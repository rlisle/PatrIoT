
/Users/ronlisle/GitRepos/Patriot/Photon/Controllers/BedBath/target/5.6.0/p2/BedBath.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085f5000  085f5000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085f5018  085f5018  00005018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  085f50a4  085f50a4  000050a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynalib      00000008  023f5b28  085f50b0  00005b28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .psram_text   0000a4c4  023f5b30  085f50b8  00005b30  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  5 .data_alt     00000000  023ffff4  023ffff4  00020000  2**0
                  CONTENTS
  6 .bss_alt      00000000  023ffff4  023ffff4  00020000  2**0
                  CONTENTS
  7 .data         000001f8  1007aac8  085ff57c  0001aac8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000032c  1007acc0  1007acc0  0002acc0  2**3
                  ALLOC
  9 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
 10 .backup       00000004  1007b400  085ff774  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .module_info_suffix_align 00000840  085ff778  085ff778  0001f778  2**0
                  ALLOC
 12 .module_info_product 00000006  085fffb8  085fffb8  0001f778  2**0
                  ALLOC
 13 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   001d327a  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0001e183  00000000  00000000  001f327a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00053030  00000000  00000000  002113fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003ce8  00000000  00000000  0026442d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 0000ea80  00000000  00000000  00268115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002f948  00000000  00000000  00276b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0005c39a  00000000  00000000  002a64dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000e2f3c  00000000  00000000  00302877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000bb1c  00000000  00000000  003e57b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085f5018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f5018:	4813      	ldr	r0, [pc, #76]	; (85f5068 <module_user_pre_init+0x50>)
 85f501a:	4914      	ldr	r1, [pc, #80]	; (85f506c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85f501c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f501e:	4288      	cmp	r0, r1
 85f5020:	d005      	beq.n	85f502e <module_user_pre_init+0x16>
 85f5022:	4a13      	ldr	r2, [pc, #76]	; (85f5070 <module_user_pre_init+0x58>)
 85f5024:	4282      	cmp	r2, r0
 85f5026:	d002      	beq.n	85f502e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85f5028:	4b12      	ldr	r3, [pc, #72]	; (85f5074 <module_user_pre_init+0x5c>)
 85f502a:	1a12      	subs	r2, r2, r0
 85f502c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85f502e:	4812      	ldr	r0, [pc, #72]	; (85f5078 <module_user_pre_init+0x60>)
 85f5030:	4a12      	ldr	r2, [pc, #72]	; (85f507c <module_user_pre_init+0x64>)
 85f5032:	2100      	movs	r1, #0
 85f5034:	4b12      	ldr	r3, [pc, #72]	; (85f5080 <module_user_pre_init+0x68>)
 85f5036:	1a12      	subs	r2, r2, r0
 85f5038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85f503a:	4812      	ldr	r0, [pc, #72]	; (85f5084 <module_user_pre_init+0x6c>)
 85f503c:	4912      	ldr	r1, [pc, #72]	; (85f5088 <module_user_pre_init+0x70>)
 85f503e:	4288      	cmp	r0, r1
 85f5040:	d005      	beq.n	85f504e <module_user_pre_init+0x36>
 85f5042:	4a12      	ldr	r2, [pc, #72]	; (85f508c <module_user_pre_init+0x74>)
 85f5044:	4282      	cmp	r2, r0
 85f5046:	d002      	beq.n	85f504e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85f5048:	4b0a      	ldr	r3, [pc, #40]	; (85f5074 <module_user_pre_init+0x5c>)
 85f504a:	1a12      	subs	r2, r2, r0
 85f504c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85f504e:	4810      	ldr	r0, [pc, #64]	; (85f5090 <module_user_pre_init+0x78>)
 85f5050:	4910      	ldr	r1, [pc, #64]	; (85f5094 <module_user_pre_init+0x7c>)
 85f5052:	4288      	cmp	r0, r1
 85f5054:	d005      	beq.n	85f5062 <module_user_pre_init+0x4a>
 85f5056:	4a10      	ldr	r2, [pc, #64]	; (85f5098 <module_user_pre_init+0x80>)
 85f5058:	4282      	cmp	r2, r0
 85f505a:	d002      	beq.n	85f5062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85f505c:	4b05      	ldr	r3, [pc, #20]	; (85f5074 <module_user_pre_init+0x5c>)
 85f505e:	1a12      	subs	r2, r2, r0
 85f5060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85f5062:	4801      	ldr	r0, [pc, #4]	; (85f5068 <module_user_pre_init+0x50>)
 85f5064:	bd08      	pop	{r3, pc}
 85f5066:	bf00      	nop
 85f5068:	1007aac8 	.word	0x1007aac8
 85f506c:	085ff57c 	.word	0x085ff57c
 85f5070:	1007acc0 	.word	0x1007acc0
 85f5074:	10110d2d 	.word	0x10110d2d
 85f5078:	1007acc0 	.word	0x1007acc0
 85f507c:	1007afec 	.word	0x1007afec
 85f5080:	10110ea1 	.word	0x10110ea1
 85f5084:	023f5b28 	.word	0x023f5b28
 85f5088:	085f50b0 	.word	0x085f50b0
 85f508c:	023f5b30 	.word	0x023f5b30
 85f5090:	023f5b30 	.word	0x023f5b30
 85f5094:	085f50b8 	.word	0x085f50b8
 85f5098:	023ffff4 	.word	0x023ffff4

085f509c <dynalib_preinit>:
 85f509c:	085f5019 00000000                       .P_.....

Disassembly of section .psram_text:

023f5b30 <__aeabi_drsub>:
 23f5b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23f5b34:	e002      	b.n	23f5b3c <__adddf3>
 23f5b36:	bf00      	nop

023f5b38 <__aeabi_dsub>:
 23f5b38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023f5b3c <__adddf3>:
 23f5b3c:	b530      	push	{r4, r5, lr}
 23f5b3e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23f5b42:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23f5b46:	ea94 0f05 	teq	r4, r5
 23f5b4a:	bf08      	it	eq
 23f5b4c:	ea90 0f02 	teqeq	r0, r2
 23f5b50:	bf1f      	itttt	ne
 23f5b52:	ea54 0c00 	orrsne.w	ip, r4, r0
 23f5b56:	ea55 0c02 	orrsne.w	ip, r5, r2
 23f5b5a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23f5b5e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f5b62:	f000 80e2 	beq.w	23f5d2a <__adddf3+0x1ee>
 23f5b66:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23f5b6a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23f5b6e:	bfb8      	it	lt
 23f5b70:	426d      	neglt	r5, r5
 23f5b72:	dd0c      	ble.n	23f5b8e <__adddf3+0x52>
 23f5b74:	442c      	add	r4, r5
 23f5b76:	ea80 0202 	eor.w	r2, r0, r2
 23f5b7a:	ea81 0303 	eor.w	r3, r1, r3
 23f5b7e:	ea82 0000 	eor.w	r0, r2, r0
 23f5b82:	ea83 0101 	eor.w	r1, r3, r1
 23f5b86:	ea80 0202 	eor.w	r2, r0, r2
 23f5b8a:	ea81 0303 	eor.w	r3, r1, r3
 23f5b8e:	2d36      	cmp	r5, #54	; 0x36
 23f5b90:	bf88      	it	hi
 23f5b92:	bd30      	pophi	{r4, r5, pc}
 23f5b94:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23f5b98:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23f5b9c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23f5ba0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23f5ba4:	d002      	beq.n	23f5bac <__adddf3+0x70>
 23f5ba6:	4240      	negs	r0, r0
 23f5ba8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f5bac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23f5bb0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23f5bb4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23f5bb8:	d002      	beq.n	23f5bc0 <__adddf3+0x84>
 23f5bba:	4252      	negs	r2, r2
 23f5bbc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23f5bc0:	ea94 0f05 	teq	r4, r5
 23f5bc4:	f000 80a7 	beq.w	23f5d16 <__adddf3+0x1da>
 23f5bc8:	f1a4 0401 	sub.w	r4, r4, #1
 23f5bcc:	f1d5 0e20 	rsbs	lr, r5, #32
 23f5bd0:	db0d      	blt.n	23f5bee <__adddf3+0xb2>
 23f5bd2:	fa02 fc0e 	lsl.w	ip, r2, lr
 23f5bd6:	fa22 f205 	lsr.w	r2, r2, r5
 23f5bda:	1880      	adds	r0, r0, r2
 23f5bdc:	f141 0100 	adc.w	r1, r1, #0
 23f5be0:	fa03 f20e 	lsl.w	r2, r3, lr
 23f5be4:	1880      	adds	r0, r0, r2
 23f5be6:	fa43 f305 	asr.w	r3, r3, r5
 23f5bea:	4159      	adcs	r1, r3
 23f5bec:	e00e      	b.n	23f5c0c <__adddf3+0xd0>
 23f5bee:	f1a5 0520 	sub.w	r5, r5, #32
 23f5bf2:	f10e 0e20 	add.w	lr, lr, #32
 23f5bf6:	2a01      	cmp	r2, #1
 23f5bf8:	fa03 fc0e 	lsl.w	ip, r3, lr
 23f5bfc:	bf28      	it	cs
 23f5bfe:	f04c 0c02 	orrcs.w	ip, ip, #2
 23f5c02:	fa43 f305 	asr.w	r3, r3, r5
 23f5c06:	18c0      	adds	r0, r0, r3
 23f5c08:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23f5c0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f5c10:	d507      	bpl.n	23f5c22 <__adddf3+0xe6>
 23f5c12:	f04f 0e00 	mov.w	lr, #0
 23f5c16:	f1dc 0c00 	rsbs	ip, ip, #0
 23f5c1a:	eb7e 0000 	sbcs.w	r0, lr, r0
 23f5c1e:	eb6e 0101 	sbc.w	r1, lr, r1
 23f5c22:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23f5c26:	d31b      	bcc.n	23f5c60 <__adddf3+0x124>
 23f5c28:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23f5c2c:	d30c      	bcc.n	23f5c48 <__adddf3+0x10c>
 23f5c2e:	0849      	lsrs	r1, r1, #1
 23f5c30:	ea5f 0030 	movs.w	r0, r0, rrx
 23f5c34:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23f5c38:	f104 0401 	add.w	r4, r4, #1
 23f5c3c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23f5c40:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23f5c44:	f080 809a 	bcs.w	23f5d7c <__adddf3+0x240>
 23f5c48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23f5c4c:	bf08      	it	eq
 23f5c4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23f5c52:	f150 0000 	adcs.w	r0, r0, #0
 23f5c56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f5c5a:	ea41 0105 	orr.w	r1, r1, r5
 23f5c5e:	bd30      	pop	{r4, r5, pc}
 23f5c60:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23f5c64:	4140      	adcs	r0, r0
 23f5c66:	eb41 0101 	adc.w	r1, r1, r1
 23f5c6a:	3c01      	subs	r4, #1
 23f5c6c:	bf28      	it	cs
 23f5c6e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23f5c72:	d2e9      	bcs.n	23f5c48 <__adddf3+0x10c>
 23f5c74:	f091 0f00 	teq	r1, #0
 23f5c78:	bf04      	itt	eq
 23f5c7a:	4601      	moveq	r1, r0
 23f5c7c:	2000      	moveq	r0, #0
 23f5c7e:	fab1 f381 	clz	r3, r1
 23f5c82:	bf08      	it	eq
 23f5c84:	3320      	addeq	r3, #32
 23f5c86:	f1a3 030b 	sub.w	r3, r3, #11
 23f5c8a:	f1b3 0220 	subs.w	r2, r3, #32
 23f5c8e:	da0c      	bge.n	23f5caa <__adddf3+0x16e>
 23f5c90:	320c      	adds	r2, #12
 23f5c92:	dd08      	ble.n	23f5ca6 <__adddf3+0x16a>
 23f5c94:	f102 0c14 	add.w	ip, r2, #20
 23f5c98:	f1c2 020c 	rsb	r2, r2, #12
 23f5c9c:	fa01 f00c 	lsl.w	r0, r1, ip
 23f5ca0:	fa21 f102 	lsr.w	r1, r1, r2
 23f5ca4:	e00c      	b.n	23f5cc0 <__adddf3+0x184>
 23f5ca6:	f102 0214 	add.w	r2, r2, #20
 23f5caa:	bfd8      	it	le
 23f5cac:	f1c2 0c20 	rsble	ip, r2, #32
 23f5cb0:	fa01 f102 	lsl.w	r1, r1, r2
 23f5cb4:	fa20 fc0c 	lsr.w	ip, r0, ip
 23f5cb8:	bfdc      	itt	le
 23f5cba:	ea41 010c 	orrle.w	r1, r1, ip
 23f5cbe:	4090      	lslle	r0, r2
 23f5cc0:	1ae4      	subs	r4, r4, r3
 23f5cc2:	bfa2      	ittt	ge
 23f5cc4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23f5cc8:	4329      	orrge	r1, r5
 23f5cca:	bd30      	popge	{r4, r5, pc}
 23f5ccc:	ea6f 0404 	mvn.w	r4, r4
 23f5cd0:	3c1f      	subs	r4, #31
 23f5cd2:	da1c      	bge.n	23f5d0e <__adddf3+0x1d2>
 23f5cd4:	340c      	adds	r4, #12
 23f5cd6:	dc0e      	bgt.n	23f5cf6 <__adddf3+0x1ba>
 23f5cd8:	f104 0414 	add.w	r4, r4, #20
 23f5cdc:	f1c4 0220 	rsb	r2, r4, #32
 23f5ce0:	fa20 f004 	lsr.w	r0, r0, r4
 23f5ce4:	fa01 f302 	lsl.w	r3, r1, r2
 23f5ce8:	ea40 0003 	orr.w	r0, r0, r3
 23f5cec:	fa21 f304 	lsr.w	r3, r1, r4
 23f5cf0:	ea45 0103 	orr.w	r1, r5, r3
 23f5cf4:	bd30      	pop	{r4, r5, pc}
 23f5cf6:	f1c4 040c 	rsb	r4, r4, #12
 23f5cfa:	f1c4 0220 	rsb	r2, r4, #32
 23f5cfe:	fa20 f002 	lsr.w	r0, r0, r2
 23f5d02:	fa01 f304 	lsl.w	r3, r1, r4
 23f5d06:	ea40 0003 	orr.w	r0, r0, r3
 23f5d0a:	4629      	mov	r1, r5
 23f5d0c:	bd30      	pop	{r4, r5, pc}
 23f5d0e:	fa21 f004 	lsr.w	r0, r1, r4
 23f5d12:	4629      	mov	r1, r5
 23f5d14:	bd30      	pop	{r4, r5, pc}
 23f5d16:	f094 0f00 	teq	r4, #0
 23f5d1a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23f5d1e:	bf06      	itte	eq
 23f5d20:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23f5d24:	3401      	addeq	r4, #1
 23f5d26:	3d01      	subne	r5, #1
 23f5d28:	e74e      	b.n	23f5bc8 <__adddf3+0x8c>
 23f5d2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f5d2e:	bf18      	it	ne
 23f5d30:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f5d34:	d029      	beq.n	23f5d8a <__adddf3+0x24e>
 23f5d36:	ea94 0f05 	teq	r4, r5
 23f5d3a:	bf08      	it	eq
 23f5d3c:	ea90 0f02 	teqeq	r0, r2
 23f5d40:	d005      	beq.n	23f5d4e <__adddf3+0x212>
 23f5d42:	ea54 0c00 	orrs.w	ip, r4, r0
 23f5d46:	bf04      	itt	eq
 23f5d48:	4619      	moveq	r1, r3
 23f5d4a:	4610      	moveq	r0, r2
 23f5d4c:	bd30      	pop	{r4, r5, pc}
 23f5d4e:	ea91 0f03 	teq	r1, r3
 23f5d52:	bf1e      	ittt	ne
 23f5d54:	2100      	movne	r1, #0
 23f5d56:	2000      	movne	r0, #0
 23f5d58:	bd30      	popne	{r4, r5, pc}
 23f5d5a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23f5d5e:	d105      	bne.n	23f5d6c <__adddf3+0x230>
 23f5d60:	0040      	lsls	r0, r0, #1
 23f5d62:	4149      	adcs	r1, r1
 23f5d64:	bf28      	it	cs
 23f5d66:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23f5d6a:	bd30      	pop	{r4, r5, pc}
 23f5d6c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23f5d70:	bf3c      	itt	cc
 23f5d72:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23f5d76:	bd30      	popcc	{r4, r5, pc}
 23f5d78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f5d7c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23f5d80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23f5d84:	f04f 0000 	mov.w	r0, #0
 23f5d88:	bd30      	pop	{r4, r5, pc}
 23f5d8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f5d8e:	bf1a      	itte	ne
 23f5d90:	4619      	movne	r1, r3
 23f5d92:	4610      	movne	r0, r2
 23f5d94:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23f5d98:	bf1c      	itt	ne
 23f5d9a:	460b      	movne	r3, r1
 23f5d9c:	4602      	movne	r2, r0
 23f5d9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23f5da2:	bf06      	itte	eq
 23f5da4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23f5da8:	ea91 0f03 	teqeq	r1, r3
 23f5dac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23f5db0:	bd30      	pop	{r4, r5, pc}
 23f5db2:	bf00      	nop

023f5db4 <__aeabi_ui2d>:
 23f5db4:	f090 0f00 	teq	r0, #0
 23f5db8:	bf04      	itt	eq
 23f5dba:	2100      	moveq	r1, #0
 23f5dbc:	4770      	bxeq	lr
 23f5dbe:	b530      	push	{r4, r5, lr}
 23f5dc0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f5dc4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f5dc8:	f04f 0500 	mov.w	r5, #0
 23f5dcc:	f04f 0100 	mov.w	r1, #0
 23f5dd0:	e750      	b.n	23f5c74 <__adddf3+0x138>
 23f5dd2:	bf00      	nop

023f5dd4 <__aeabi_i2d>:
 23f5dd4:	f090 0f00 	teq	r0, #0
 23f5dd8:	bf04      	itt	eq
 23f5dda:	2100      	moveq	r1, #0
 23f5ddc:	4770      	bxeq	lr
 23f5dde:	b530      	push	{r4, r5, lr}
 23f5de0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f5de4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f5de8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23f5dec:	bf48      	it	mi
 23f5dee:	4240      	negmi	r0, r0
 23f5df0:	f04f 0100 	mov.w	r1, #0
 23f5df4:	e73e      	b.n	23f5c74 <__adddf3+0x138>
 23f5df6:	bf00      	nop

023f5df8 <__aeabi_f2d>:
 23f5df8:	0042      	lsls	r2, r0, #1
 23f5dfa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23f5dfe:	ea4f 0131 	mov.w	r1, r1, rrx
 23f5e02:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23f5e06:	bf1f      	itttt	ne
 23f5e08:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23f5e0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23f5e10:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23f5e14:	4770      	bxne	lr
 23f5e16:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23f5e1a:	bf08      	it	eq
 23f5e1c:	4770      	bxeq	lr
 23f5e1e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23f5e22:	bf04      	itt	eq
 23f5e24:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23f5e28:	4770      	bxeq	lr
 23f5e2a:	b530      	push	{r4, r5, lr}
 23f5e2c:	f44f 7460 	mov.w	r4, #896	; 0x380
 23f5e30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f5e34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f5e38:	e71c      	b.n	23f5c74 <__adddf3+0x138>
 23f5e3a:	bf00      	nop

023f5e3c <__aeabi_ul2d>:
 23f5e3c:	ea50 0201 	orrs.w	r2, r0, r1
 23f5e40:	bf08      	it	eq
 23f5e42:	4770      	bxeq	lr
 23f5e44:	b530      	push	{r4, r5, lr}
 23f5e46:	f04f 0500 	mov.w	r5, #0
 23f5e4a:	e00a      	b.n	23f5e62 <__aeabi_l2d+0x16>

023f5e4c <__aeabi_l2d>:
 23f5e4c:	ea50 0201 	orrs.w	r2, r0, r1
 23f5e50:	bf08      	it	eq
 23f5e52:	4770      	bxeq	lr
 23f5e54:	b530      	push	{r4, r5, lr}
 23f5e56:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23f5e5a:	d502      	bpl.n	23f5e62 <__aeabi_l2d+0x16>
 23f5e5c:	4240      	negs	r0, r0
 23f5e5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f5e62:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f5e66:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f5e6a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23f5e6e:	f43f aed8 	beq.w	23f5c22 <__adddf3+0xe6>
 23f5e72:	f04f 0203 	mov.w	r2, #3
 23f5e76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f5e7a:	bf18      	it	ne
 23f5e7c:	3203      	addne	r2, #3
 23f5e7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f5e82:	bf18      	it	ne
 23f5e84:	3203      	addne	r2, #3
 23f5e86:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23f5e8a:	f1c2 0320 	rsb	r3, r2, #32
 23f5e8e:	fa00 fc03 	lsl.w	ip, r0, r3
 23f5e92:	fa20 f002 	lsr.w	r0, r0, r2
 23f5e96:	fa01 fe03 	lsl.w	lr, r1, r3
 23f5e9a:	ea40 000e 	orr.w	r0, r0, lr
 23f5e9e:	fa21 f102 	lsr.w	r1, r1, r2
 23f5ea2:	4414      	add	r4, r2
 23f5ea4:	e6bd      	b.n	23f5c22 <__adddf3+0xe6>
 23f5ea6:	bf00      	nop

023f5ea8 <__aeabi_dmul>:
 23f5ea8:	b570      	push	{r4, r5, r6, lr}
 23f5eaa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23f5eae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23f5eb2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23f5eb6:	bf1d      	ittte	ne
 23f5eb8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23f5ebc:	ea94 0f0c 	teqne	r4, ip
 23f5ec0:	ea95 0f0c 	teqne	r5, ip
 23f5ec4:	f000 f8de 	bleq	23f6084 <__aeabi_dmul+0x1dc>
 23f5ec8:	442c      	add	r4, r5
 23f5eca:	ea81 0603 	eor.w	r6, r1, r3
 23f5ece:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23f5ed2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23f5ed6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23f5eda:	bf18      	it	ne
 23f5edc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23f5ee0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f5ee4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23f5ee8:	d038      	beq.n	23f5f5c <__aeabi_dmul+0xb4>
 23f5eea:	fba0 ce02 	umull	ip, lr, r0, r2
 23f5eee:	f04f 0500 	mov.w	r5, #0
 23f5ef2:	fbe1 e502 	umlal	lr, r5, r1, r2
 23f5ef6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23f5efa:	fbe0 e503 	umlal	lr, r5, r0, r3
 23f5efe:	f04f 0600 	mov.w	r6, #0
 23f5f02:	fbe1 5603 	umlal	r5, r6, r1, r3
 23f5f06:	f09c 0f00 	teq	ip, #0
 23f5f0a:	bf18      	it	ne
 23f5f0c:	f04e 0e01 	orrne.w	lr, lr, #1
 23f5f10:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23f5f14:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23f5f18:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23f5f1c:	d204      	bcs.n	23f5f28 <__aeabi_dmul+0x80>
 23f5f1e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23f5f22:	416d      	adcs	r5, r5
 23f5f24:	eb46 0606 	adc.w	r6, r6, r6
 23f5f28:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23f5f2c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23f5f30:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23f5f34:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23f5f38:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23f5f3c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23f5f40:	bf88      	it	hi
 23f5f42:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23f5f46:	d81e      	bhi.n	23f5f86 <__aeabi_dmul+0xde>
 23f5f48:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23f5f4c:	bf08      	it	eq
 23f5f4e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23f5f52:	f150 0000 	adcs.w	r0, r0, #0
 23f5f56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f5f5a:	bd70      	pop	{r4, r5, r6, pc}
 23f5f5c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23f5f60:	ea46 0101 	orr.w	r1, r6, r1
 23f5f64:	ea40 0002 	orr.w	r0, r0, r2
 23f5f68:	ea81 0103 	eor.w	r1, r1, r3
 23f5f6c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23f5f70:	bfc2      	ittt	gt
 23f5f72:	ebd4 050c 	rsbsgt	r5, r4, ip
 23f5f76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23f5f7a:	bd70      	popgt	{r4, r5, r6, pc}
 23f5f7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f5f80:	f04f 0e00 	mov.w	lr, #0
 23f5f84:	3c01      	subs	r4, #1
 23f5f86:	f300 80ab 	bgt.w	23f60e0 <__aeabi_dmul+0x238>
 23f5f8a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23f5f8e:	bfde      	ittt	le
 23f5f90:	2000      	movle	r0, #0
 23f5f92:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23f5f96:	bd70      	pople	{r4, r5, r6, pc}
 23f5f98:	f1c4 0400 	rsb	r4, r4, #0
 23f5f9c:	3c20      	subs	r4, #32
 23f5f9e:	da35      	bge.n	23f600c <__aeabi_dmul+0x164>
 23f5fa0:	340c      	adds	r4, #12
 23f5fa2:	dc1b      	bgt.n	23f5fdc <__aeabi_dmul+0x134>
 23f5fa4:	f104 0414 	add.w	r4, r4, #20
 23f5fa8:	f1c4 0520 	rsb	r5, r4, #32
 23f5fac:	fa00 f305 	lsl.w	r3, r0, r5
 23f5fb0:	fa20 f004 	lsr.w	r0, r0, r4
 23f5fb4:	fa01 f205 	lsl.w	r2, r1, r5
 23f5fb8:	ea40 0002 	orr.w	r0, r0, r2
 23f5fbc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23f5fc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f5fc4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23f5fc8:	fa21 f604 	lsr.w	r6, r1, r4
 23f5fcc:	eb42 0106 	adc.w	r1, r2, r6
 23f5fd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f5fd4:	bf08      	it	eq
 23f5fd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f5fda:	bd70      	pop	{r4, r5, r6, pc}
 23f5fdc:	f1c4 040c 	rsb	r4, r4, #12
 23f5fe0:	f1c4 0520 	rsb	r5, r4, #32
 23f5fe4:	fa00 f304 	lsl.w	r3, r0, r4
 23f5fe8:	fa20 f005 	lsr.w	r0, r0, r5
 23f5fec:	fa01 f204 	lsl.w	r2, r1, r4
 23f5ff0:	ea40 0002 	orr.w	r0, r0, r2
 23f5ff4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f5ff8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23f5ffc:	f141 0100 	adc.w	r1, r1, #0
 23f6000:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f6004:	bf08      	it	eq
 23f6006:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f600a:	bd70      	pop	{r4, r5, r6, pc}
 23f600c:	f1c4 0520 	rsb	r5, r4, #32
 23f6010:	fa00 f205 	lsl.w	r2, r0, r5
 23f6014:	ea4e 0e02 	orr.w	lr, lr, r2
 23f6018:	fa20 f304 	lsr.w	r3, r0, r4
 23f601c:	fa01 f205 	lsl.w	r2, r1, r5
 23f6020:	ea43 0302 	orr.w	r3, r3, r2
 23f6024:	fa21 f004 	lsr.w	r0, r1, r4
 23f6028:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f602c:	fa21 f204 	lsr.w	r2, r1, r4
 23f6030:	ea20 0002 	bic.w	r0, r0, r2
 23f6034:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23f6038:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f603c:	bf08      	it	eq
 23f603e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f6042:	bd70      	pop	{r4, r5, r6, pc}
 23f6044:	f094 0f00 	teq	r4, #0
 23f6048:	d10f      	bne.n	23f606a <__aeabi_dmul+0x1c2>
 23f604a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23f604e:	0040      	lsls	r0, r0, #1
 23f6050:	eb41 0101 	adc.w	r1, r1, r1
 23f6054:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f6058:	bf08      	it	eq
 23f605a:	3c01      	subeq	r4, #1
 23f605c:	d0f7      	beq.n	23f604e <__aeabi_dmul+0x1a6>
 23f605e:	ea41 0106 	orr.w	r1, r1, r6
 23f6062:	f095 0f00 	teq	r5, #0
 23f6066:	bf18      	it	ne
 23f6068:	4770      	bxne	lr
 23f606a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23f606e:	0052      	lsls	r2, r2, #1
 23f6070:	eb43 0303 	adc.w	r3, r3, r3
 23f6074:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23f6078:	bf08      	it	eq
 23f607a:	3d01      	subeq	r5, #1
 23f607c:	d0f7      	beq.n	23f606e <__aeabi_dmul+0x1c6>
 23f607e:	ea43 0306 	orr.w	r3, r3, r6
 23f6082:	4770      	bx	lr
 23f6084:	ea94 0f0c 	teq	r4, ip
 23f6088:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23f608c:	bf18      	it	ne
 23f608e:	ea95 0f0c 	teqne	r5, ip
 23f6092:	d00c      	beq.n	23f60ae <__aeabi_dmul+0x206>
 23f6094:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f6098:	bf18      	it	ne
 23f609a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f609e:	d1d1      	bne.n	23f6044 <__aeabi_dmul+0x19c>
 23f60a0:	ea81 0103 	eor.w	r1, r1, r3
 23f60a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f60a8:	f04f 0000 	mov.w	r0, #0
 23f60ac:	bd70      	pop	{r4, r5, r6, pc}
 23f60ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f60b2:	bf06      	itte	eq
 23f60b4:	4610      	moveq	r0, r2
 23f60b6:	4619      	moveq	r1, r3
 23f60b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f60bc:	d019      	beq.n	23f60f2 <__aeabi_dmul+0x24a>
 23f60be:	ea94 0f0c 	teq	r4, ip
 23f60c2:	d102      	bne.n	23f60ca <__aeabi_dmul+0x222>
 23f60c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23f60c8:	d113      	bne.n	23f60f2 <__aeabi_dmul+0x24a>
 23f60ca:	ea95 0f0c 	teq	r5, ip
 23f60ce:	d105      	bne.n	23f60dc <__aeabi_dmul+0x234>
 23f60d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23f60d4:	bf1c      	itt	ne
 23f60d6:	4610      	movne	r0, r2
 23f60d8:	4619      	movne	r1, r3
 23f60da:	d10a      	bne.n	23f60f2 <__aeabi_dmul+0x24a>
 23f60dc:	ea81 0103 	eor.w	r1, r1, r3
 23f60e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f60e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23f60e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23f60ec:	f04f 0000 	mov.w	r0, #0
 23f60f0:	bd70      	pop	{r4, r5, r6, pc}
 23f60f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23f60f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23f60fa:	bd70      	pop	{r4, r5, r6, pc}

023f60fc <__aeabi_ddiv>:
 23f60fc:	b570      	push	{r4, r5, r6, lr}
 23f60fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23f6102:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23f6106:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23f610a:	bf1d      	ittte	ne
 23f610c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23f6110:	ea94 0f0c 	teqne	r4, ip
 23f6114:	ea95 0f0c 	teqne	r5, ip
 23f6118:	f000 f8a7 	bleq	23f626a <__aeabi_ddiv+0x16e>
 23f611c:	eba4 0405 	sub.w	r4, r4, r5
 23f6120:	ea81 0e03 	eor.w	lr, r1, r3
 23f6124:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23f6128:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23f612c:	f000 8088 	beq.w	23f6240 <__aeabi_ddiv+0x144>
 23f6130:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23f6134:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23f6138:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23f613c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23f6140:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23f6144:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23f6148:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23f614c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23f6150:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23f6154:	429d      	cmp	r5, r3
 23f6156:	bf08      	it	eq
 23f6158:	4296      	cmpeq	r6, r2
 23f615a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23f615e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23f6162:	d202      	bcs.n	23f616a <__aeabi_ddiv+0x6e>
 23f6164:	085b      	lsrs	r3, r3, #1
 23f6166:	ea4f 0232 	mov.w	r2, r2, rrx
 23f616a:	1ab6      	subs	r6, r6, r2
 23f616c:	eb65 0503 	sbc.w	r5, r5, r3
 23f6170:	085b      	lsrs	r3, r3, #1
 23f6172:	ea4f 0232 	mov.w	r2, r2, rrx
 23f6176:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23f617a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23f617e:	ebb6 0e02 	subs.w	lr, r6, r2
 23f6182:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f6186:	bf22      	ittt	cs
 23f6188:	1ab6      	subcs	r6, r6, r2
 23f618a:	4675      	movcs	r5, lr
 23f618c:	ea40 000c 	orrcs.w	r0, r0, ip
 23f6190:	085b      	lsrs	r3, r3, #1
 23f6192:	ea4f 0232 	mov.w	r2, r2, rrx
 23f6196:	ebb6 0e02 	subs.w	lr, r6, r2
 23f619a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f619e:	bf22      	ittt	cs
 23f61a0:	1ab6      	subcs	r6, r6, r2
 23f61a2:	4675      	movcs	r5, lr
 23f61a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23f61a8:	085b      	lsrs	r3, r3, #1
 23f61aa:	ea4f 0232 	mov.w	r2, r2, rrx
 23f61ae:	ebb6 0e02 	subs.w	lr, r6, r2
 23f61b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f61b6:	bf22      	ittt	cs
 23f61b8:	1ab6      	subcs	r6, r6, r2
 23f61ba:	4675      	movcs	r5, lr
 23f61bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23f61c0:	085b      	lsrs	r3, r3, #1
 23f61c2:	ea4f 0232 	mov.w	r2, r2, rrx
 23f61c6:	ebb6 0e02 	subs.w	lr, r6, r2
 23f61ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f61ce:	bf22      	ittt	cs
 23f61d0:	1ab6      	subcs	r6, r6, r2
 23f61d2:	4675      	movcs	r5, lr
 23f61d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23f61d8:	ea55 0e06 	orrs.w	lr, r5, r6
 23f61dc:	d018      	beq.n	23f6210 <__aeabi_ddiv+0x114>
 23f61de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23f61e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23f61e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23f61ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23f61ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23f61f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23f61f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23f61fa:	d1c0      	bne.n	23f617e <__aeabi_ddiv+0x82>
 23f61fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f6200:	d10b      	bne.n	23f621a <__aeabi_ddiv+0x11e>
 23f6202:	ea41 0100 	orr.w	r1, r1, r0
 23f6206:	f04f 0000 	mov.w	r0, #0
 23f620a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23f620e:	e7b6      	b.n	23f617e <__aeabi_ddiv+0x82>
 23f6210:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f6214:	bf04      	itt	eq
 23f6216:	4301      	orreq	r1, r0
 23f6218:	2000      	moveq	r0, #0
 23f621a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23f621e:	bf88      	it	hi
 23f6220:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23f6224:	f63f aeaf 	bhi.w	23f5f86 <__aeabi_dmul+0xde>
 23f6228:	ebb5 0c03 	subs.w	ip, r5, r3
 23f622c:	bf04      	itt	eq
 23f622e:	ebb6 0c02 	subseq.w	ip, r6, r2
 23f6232:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23f6236:	f150 0000 	adcs.w	r0, r0, #0
 23f623a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f623e:	bd70      	pop	{r4, r5, r6, pc}
 23f6240:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23f6244:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23f6248:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23f624c:	bfc2      	ittt	gt
 23f624e:	ebd4 050c 	rsbsgt	r5, r4, ip
 23f6252:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23f6256:	bd70      	popgt	{r4, r5, r6, pc}
 23f6258:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f625c:	f04f 0e00 	mov.w	lr, #0
 23f6260:	3c01      	subs	r4, #1
 23f6262:	e690      	b.n	23f5f86 <__aeabi_dmul+0xde>
 23f6264:	ea45 0e06 	orr.w	lr, r5, r6
 23f6268:	e68d      	b.n	23f5f86 <__aeabi_dmul+0xde>
 23f626a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23f626e:	ea94 0f0c 	teq	r4, ip
 23f6272:	bf08      	it	eq
 23f6274:	ea95 0f0c 	teqeq	r5, ip
 23f6278:	f43f af3b 	beq.w	23f60f2 <__aeabi_dmul+0x24a>
 23f627c:	ea94 0f0c 	teq	r4, ip
 23f6280:	d10a      	bne.n	23f6298 <__aeabi_ddiv+0x19c>
 23f6282:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23f6286:	f47f af34 	bne.w	23f60f2 <__aeabi_dmul+0x24a>
 23f628a:	ea95 0f0c 	teq	r5, ip
 23f628e:	f47f af25 	bne.w	23f60dc <__aeabi_dmul+0x234>
 23f6292:	4610      	mov	r0, r2
 23f6294:	4619      	mov	r1, r3
 23f6296:	e72c      	b.n	23f60f2 <__aeabi_dmul+0x24a>
 23f6298:	ea95 0f0c 	teq	r5, ip
 23f629c:	d106      	bne.n	23f62ac <__aeabi_ddiv+0x1b0>
 23f629e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23f62a2:	f43f aefd 	beq.w	23f60a0 <__aeabi_dmul+0x1f8>
 23f62a6:	4610      	mov	r0, r2
 23f62a8:	4619      	mov	r1, r3
 23f62aa:	e722      	b.n	23f60f2 <__aeabi_dmul+0x24a>
 23f62ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f62b0:	bf18      	it	ne
 23f62b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f62b6:	f47f aec5 	bne.w	23f6044 <__aeabi_dmul+0x19c>
 23f62ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23f62be:	f47f af0d 	bne.w	23f60dc <__aeabi_dmul+0x234>
 23f62c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23f62c6:	f47f aeeb 	bne.w	23f60a0 <__aeabi_dmul+0x1f8>
 23f62ca:	e712      	b.n	23f60f2 <__aeabi_dmul+0x24a>

023f62cc <__gedf2>:
 23f62cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23f62d0:	e006      	b.n	23f62e0 <__cmpdf2+0x4>
 23f62d2:	bf00      	nop

023f62d4 <__ledf2>:
 23f62d4:	f04f 0c01 	mov.w	ip, #1
 23f62d8:	e002      	b.n	23f62e0 <__cmpdf2+0x4>
 23f62da:	bf00      	nop

023f62dc <__cmpdf2>:
 23f62dc:	f04f 0c01 	mov.w	ip, #1
 23f62e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 23f62e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f62e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f62ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f62f0:	bf18      	it	ne
 23f62f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23f62f6:	d01b      	beq.n	23f6330 <__cmpdf2+0x54>
 23f62f8:	b001      	add	sp, #4
 23f62fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23f62fe:	bf0c      	ite	eq
 23f6300:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23f6304:	ea91 0f03 	teqne	r1, r3
 23f6308:	bf02      	ittt	eq
 23f630a:	ea90 0f02 	teqeq	r0, r2
 23f630e:	2000      	moveq	r0, #0
 23f6310:	4770      	bxeq	lr
 23f6312:	f110 0f00 	cmn.w	r0, #0
 23f6316:	ea91 0f03 	teq	r1, r3
 23f631a:	bf58      	it	pl
 23f631c:	4299      	cmppl	r1, r3
 23f631e:	bf08      	it	eq
 23f6320:	4290      	cmpeq	r0, r2
 23f6322:	bf2c      	ite	cs
 23f6324:	17d8      	asrcs	r0, r3, #31
 23f6326:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23f632a:	f040 0001 	orr.w	r0, r0, #1
 23f632e:	4770      	bx	lr
 23f6330:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f6334:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f6338:	d102      	bne.n	23f6340 <__cmpdf2+0x64>
 23f633a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23f633e:	d107      	bne.n	23f6350 <__cmpdf2+0x74>
 23f6340:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f6344:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f6348:	d1d6      	bne.n	23f62f8 <__cmpdf2+0x1c>
 23f634a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23f634e:	d0d3      	beq.n	23f62f8 <__cmpdf2+0x1c>
 23f6350:	f85d 0b04 	ldr.w	r0, [sp], #4
 23f6354:	4770      	bx	lr
 23f6356:	bf00      	nop

023f6358 <__aeabi_cdrcmple>:
 23f6358:	4684      	mov	ip, r0
 23f635a:	4610      	mov	r0, r2
 23f635c:	4662      	mov	r2, ip
 23f635e:	468c      	mov	ip, r1
 23f6360:	4619      	mov	r1, r3
 23f6362:	4663      	mov	r3, ip
 23f6364:	e000      	b.n	23f6368 <__aeabi_cdcmpeq>
 23f6366:	bf00      	nop

023f6368 <__aeabi_cdcmpeq>:
 23f6368:	b501      	push	{r0, lr}
 23f636a:	f7ff ffb7 	bl	23f62dc <__cmpdf2>
 23f636e:	2800      	cmp	r0, #0
 23f6370:	bf48      	it	mi
 23f6372:	f110 0f00 	cmnmi.w	r0, #0
 23f6376:	bd01      	pop	{r0, pc}

023f6378 <__aeabi_dcmpeq>:
 23f6378:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f637c:	f7ff fff4 	bl	23f6368 <__aeabi_cdcmpeq>
 23f6380:	bf0c      	ite	eq
 23f6382:	2001      	moveq	r0, #1
 23f6384:	2000      	movne	r0, #0
 23f6386:	f85d fb08 	ldr.w	pc, [sp], #8
 23f638a:	bf00      	nop

023f638c <__aeabi_dcmplt>:
 23f638c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f6390:	f7ff ffea 	bl	23f6368 <__aeabi_cdcmpeq>
 23f6394:	bf34      	ite	cc
 23f6396:	2001      	movcc	r0, #1
 23f6398:	2000      	movcs	r0, #0
 23f639a:	f85d fb08 	ldr.w	pc, [sp], #8
 23f639e:	bf00      	nop

023f63a0 <__aeabi_dcmple>:
 23f63a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f63a4:	f7ff ffe0 	bl	23f6368 <__aeabi_cdcmpeq>
 23f63a8:	bf94      	ite	ls
 23f63aa:	2001      	movls	r0, #1
 23f63ac:	2000      	movhi	r0, #0
 23f63ae:	f85d fb08 	ldr.w	pc, [sp], #8
 23f63b2:	bf00      	nop

023f63b4 <__aeabi_dcmpge>:
 23f63b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f63b8:	f7ff ffce 	bl	23f6358 <__aeabi_cdrcmple>
 23f63bc:	bf94      	ite	ls
 23f63be:	2001      	movls	r0, #1
 23f63c0:	2000      	movhi	r0, #0
 23f63c2:	f85d fb08 	ldr.w	pc, [sp], #8
 23f63c6:	bf00      	nop

023f63c8 <__aeabi_dcmpgt>:
 23f63c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f63cc:	f7ff ffc4 	bl	23f6358 <__aeabi_cdrcmple>
 23f63d0:	bf34      	ite	cc
 23f63d2:	2001      	movcc	r0, #1
 23f63d4:	2000      	movcs	r0, #0
 23f63d6:	f85d fb08 	ldr.w	pc, [sp], #8
 23f63da:	bf00      	nop

023f63dc <__aeabi_d2uiz>:
 23f63dc:	004a      	lsls	r2, r1, #1
 23f63de:	d211      	bcs.n	23f6404 <__aeabi_d2uiz+0x28>
 23f63e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23f63e4:	d211      	bcs.n	23f640a <__aeabi_d2uiz+0x2e>
 23f63e6:	d50d      	bpl.n	23f6404 <__aeabi_d2uiz+0x28>
 23f63e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23f63ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23f63f0:	d40e      	bmi.n	23f6410 <__aeabi_d2uiz+0x34>
 23f63f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23f63f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23f63fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23f63fe:	fa23 f002 	lsr.w	r0, r3, r2
 23f6402:	4770      	bx	lr
 23f6404:	f04f 0000 	mov.w	r0, #0
 23f6408:	4770      	bx	lr
 23f640a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23f640e:	d102      	bne.n	23f6416 <__aeabi_d2uiz+0x3a>
 23f6410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f6414:	4770      	bx	lr
 23f6416:	f04f 0000 	mov.w	r0, #0
 23f641a:	4770      	bx	lr

023f641c <__aeabi_d2f>:
 23f641c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23f6420:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23f6424:	bf24      	itt	cs
 23f6426:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23f642a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23f642e:	d90d      	bls.n	23f644c <__aeabi_d2f+0x30>
 23f6430:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23f6434:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23f6438:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23f643c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23f6440:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23f6444:	bf08      	it	eq
 23f6446:	f020 0001 	biceq.w	r0, r0, #1
 23f644a:	4770      	bx	lr
 23f644c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23f6450:	d121      	bne.n	23f6496 <__aeabi_d2f+0x7a>
 23f6452:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23f6456:	bfbc      	itt	lt
 23f6458:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23f645c:	4770      	bxlt	lr
 23f645e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f6462:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23f6466:	f1c2 0218 	rsb	r2, r2, #24
 23f646a:	f1c2 0c20 	rsb	ip, r2, #32
 23f646e:	fa10 f30c 	lsls.w	r3, r0, ip
 23f6472:	fa20 f002 	lsr.w	r0, r0, r2
 23f6476:	bf18      	it	ne
 23f6478:	f040 0001 	orrne.w	r0, r0, #1
 23f647c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23f6480:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23f6484:	fa03 fc0c 	lsl.w	ip, r3, ip
 23f6488:	ea40 000c 	orr.w	r0, r0, ip
 23f648c:	fa23 f302 	lsr.w	r3, r3, r2
 23f6490:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23f6494:	e7cc      	b.n	23f6430 <__aeabi_d2f+0x14>
 23f6496:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23f649a:	d107      	bne.n	23f64ac <__aeabi_d2f+0x90>
 23f649c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23f64a0:	bf1e      	ittt	ne
 23f64a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23f64a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23f64aa:	4770      	bxne	lr
 23f64ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23f64b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23f64b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23f64b8:	4770      	bx	lr
 23f64ba:	bf00      	nop

023f64bc <__aeabi_uldivmod>:
 23f64bc:	b953      	cbnz	r3, 23f64d4 <__aeabi_uldivmod+0x18>
 23f64be:	b94a      	cbnz	r2, 23f64d4 <__aeabi_uldivmod+0x18>
 23f64c0:	2900      	cmp	r1, #0
 23f64c2:	bf08      	it	eq
 23f64c4:	2800      	cmpeq	r0, #0
 23f64c6:	bf1c      	itt	ne
 23f64c8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 23f64cc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23f64d0:	f000 b9d4 	b.w	23f687c <__aeabi_idiv0>
 23f64d4:	f1ad 0c08 	sub.w	ip, sp, #8
 23f64d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23f64dc:	f000 f858 	bl	23f6590 <__udivmoddi4>
 23f64e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 23f64e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23f64e8:	b004      	add	sp, #16
 23f64ea:	4770      	bx	lr

023f64ec <__aeabi_f2lz>:
 23f64ec:	ee07 0a90 	vmov	s15, r0
 23f64f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23f64f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f64f8:	d401      	bmi.n	23f64fe <__aeabi_f2lz+0x12>
 23f64fa:	f000 b80b 	b.w	23f6514 <__aeabi_f2ulz>
 23f64fe:	eef1 7a67 	vneg.f32	s15, s15
 23f6502:	b508      	push	{r3, lr}
 23f6504:	ee17 0a90 	vmov	r0, s15
 23f6508:	f000 f804 	bl	23f6514 <__aeabi_f2ulz>
 23f650c:	4240      	negs	r0, r0
 23f650e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f6512:	bd08      	pop	{r3, pc}

023f6514 <__aeabi_f2ulz>:
 23f6514:	b5d0      	push	{r4, r6, r7, lr}
 23f6516:	f7ff fc6f 	bl	23f5df8 <__aeabi_f2d>
 23f651a:	2200      	movs	r2, #0
 23f651c:	4b0b      	ldr	r3, [pc, #44]	; (23f654c <__aeabi_f2ulz+0x38>)
 23f651e:	4606      	mov	r6, r0
 23f6520:	460f      	mov	r7, r1
 23f6522:	f7ff fcc1 	bl	23f5ea8 <__aeabi_dmul>
 23f6526:	f7ff ff59 	bl	23f63dc <__aeabi_d2uiz>
 23f652a:	4604      	mov	r4, r0
 23f652c:	f7ff fc42 	bl	23f5db4 <__aeabi_ui2d>
 23f6530:	2200      	movs	r2, #0
 23f6532:	4b07      	ldr	r3, [pc, #28]	; (23f6550 <__aeabi_f2ulz+0x3c>)
 23f6534:	f7ff fcb8 	bl	23f5ea8 <__aeabi_dmul>
 23f6538:	4602      	mov	r2, r0
 23f653a:	460b      	mov	r3, r1
 23f653c:	4630      	mov	r0, r6
 23f653e:	4639      	mov	r1, r7
 23f6540:	f7ff fafa 	bl	23f5b38 <__aeabi_dsub>
 23f6544:	f7ff ff4a 	bl	23f63dc <__aeabi_d2uiz>
 23f6548:	4621      	mov	r1, r4
 23f654a:	bdd0      	pop	{r4, r6, r7, pc}
 23f654c:	3df00000 	.word	0x3df00000
 23f6550:	41f00000 	.word	0x41f00000

023f6554 <__aeabi_d2ulz>:
 23f6554:	b5d0      	push	{r4, r6, r7, lr}
 23f6556:	2200      	movs	r2, #0
 23f6558:	4b0b      	ldr	r3, [pc, #44]	; (23f6588 <__aeabi_d2ulz+0x34>)
 23f655a:	4606      	mov	r6, r0
 23f655c:	460f      	mov	r7, r1
 23f655e:	f7ff fca3 	bl	23f5ea8 <__aeabi_dmul>
 23f6562:	f7ff ff3b 	bl	23f63dc <__aeabi_d2uiz>
 23f6566:	4604      	mov	r4, r0
 23f6568:	f7ff fc24 	bl	23f5db4 <__aeabi_ui2d>
 23f656c:	2200      	movs	r2, #0
 23f656e:	4b07      	ldr	r3, [pc, #28]	; (23f658c <__aeabi_d2ulz+0x38>)
 23f6570:	f7ff fc9a 	bl	23f5ea8 <__aeabi_dmul>
 23f6574:	4602      	mov	r2, r0
 23f6576:	460b      	mov	r3, r1
 23f6578:	4630      	mov	r0, r6
 23f657a:	4639      	mov	r1, r7
 23f657c:	f7ff fadc 	bl	23f5b38 <__aeabi_dsub>
 23f6580:	f7ff ff2c 	bl	23f63dc <__aeabi_d2uiz>
 23f6584:	4621      	mov	r1, r4
 23f6586:	bdd0      	pop	{r4, r6, r7, pc}
 23f6588:	3df00000 	.word	0x3df00000
 23f658c:	41f00000 	.word	0x41f00000

023f6590 <__udivmoddi4>:
 23f6590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f6594:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23f6596:	4604      	mov	r4, r0
 23f6598:	460f      	mov	r7, r1
 23f659a:	2b00      	cmp	r3, #0
 23f659c:	d148      	bne.n	23f6630 <__udivmoddi4+0xa0>
 23f659e:	428a      	cmp	r2, r1
 23f65a0:	4694      	mov	ip, r2
 23f65a2:	d961      	bls.n	23f6668 <__udivmoddi4+0xd8>
 23f65a4:	fab2 f382 	clz	r3, r2
 23f65a8:	b143      	cbz	r3, 23f65bc <__udivmoddi4+0x2c>
 23f65aa:	f1c3 0120 	rsb	r1, r3, #32
 23f65ae:	409f      	lsls	r7, r3
 23f65b0:	fa02 fc03 	lsl.w	ip, r2, r3
 23f65b4:	409c      	lsls	r4, r3
 23f65b6:	fa20 f101 	lsr.w	r1, r0, r1
 23f65ba:	430f      	orrs	r7, r1
 23f65bc:	ea4f 411c 	mov.w	r1, ip, lsr #16
 23f65c0:	fa1f fe8c 	uxth.w	lr, ip
 23f65c4:	0c22      	lsrs	r2, r4, #16
 23f65c6:	fbb7 f6f1 	udiv	r6, r7, r1
 23f65ca:	fb01 7716 	mls	r7, r1, r6, r7
 23f65ce:	fb06 f00e 	mul.w	r0, r6, lr
 23f65d2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 23f65d6:	4290      	cmp	r0, r2
 23f65d8:	d908      	bls.n	23f65ec <__udivmoddi4+0x5c>
 23f65da:	eb1c 0202 	adds.w	r2, ip, r2
 23f65de:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 23f65e2:	d202      	bcs.n	23f65ea <__udivmoddi4+0x5a>
 23f65e4:	4290      	cmp	r0, r2
 23f65e6:	f200 8137 	bhi.w	23f6858 <__udivmoddi4+0x2c8>
 23f65ea:	463e      	mov	r6, r7
 23f65ec:	1a12      	subs	r2, r2, r0
 23f65ee:	b2a4      	uxth	r4, r4
 23f65f0:	fbb2 f0f1 	udiv	r0, r2, r1
 23f65f4:	fb01 2210 	mls	r2, r1, r0, r2
 23f65f8:	fb00 fe0e 	mul.w	lr, r0, lr
 23f65fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 23f6600:	45a6      	cmp	lr, r4
 23f6602:	d908      	bls.n	23f6616 <__udivmoddi4+0x86>
 23f6604:	eb1c 0404 	adds.w	r4, ip, r4
 23f6608:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 23f660c:	d202      	bcs.n	23f6614 <__udivmoddi4+0x84>
 23f660e:	45a6      	cmp	lr, r4
 23f6610:	f200 811c 	bhi.w	23f684c <__udivmoddi4+0x2bc>
 23f6614:	4610      	mov	r0, r2
 23f6616:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 23f661a:	eba4 040e 	sub.w	r4, r4, lr
 23f661e:	2600      	movs	r6, #0
 23f6620:	b11d      	cbz	r5, 23f662a <__udivmoddi4+0x9a>
 23f6622:	40dc      	lsrs	r4, r3
 23f6624:	2300      	movs	r3, #0
 23f6626:	e9c5 4300 	strd	r4, r3, [r5]
 23f662a:	4631      	mov	r1, r6
 23f662c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f6630:	428b      	cmp	r3, r1
 23f6632:	d909      	bls.n	23f6648 <__udivmoddi4+0xb8>
 23f6634:	2d00      	cmp	r5, #0
 23f6636:	f000 80fd 	beq.w	23f6834 <__udivmoddi4+0x2a4>
 23f663a:	2600      	movs	r6, #0
 23f663c:	e9c5 0100 	strd	r0, r1, [r5]
 23f6640:	4630      	mov	r0, r6
 23f6642:	4631      	mov	r1, r6
 23f6644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f6648:	fab3 f683 	clz	r6, r3
 23f664c:	2e00      	cmp	r6, #0
 23f664e:	d14b      	bne.n	23f66e8 <__udivmoddi4+0x158>
 23f6650:	428b      	cmp	r3, r1
 23f6652:	f0c0 80f2 	bcc.w	23f683a <__udivmoddi4+0x2aa>
 23f6656:	4282      	cmp	r2, r0
 23f6658:	f240 80ef 	bls.w	23f683a <__udivmoddi4+0x2aa>
 23f665c:	4630      	mov	r0, r6
 23f665e:	2d00      	cmp	r5, #0
 23f6660:	d0e3      	beq.n	23f662a <__udivmoddi4+0x9a>
 23f6662:	e9c5 4700 	strd	r4, r7, [r5]
 23f6666:	e7e0      	b.n	23f662a <__udivmoddi4+0x9a>
 23f6668:	b902      	cbnz	r2, 23f666c <__udivmoddi4+0xdc>
 23f666a:	deff      	udf	#255	; 0xff
 23f666c:	fab2 f382 	clz	r3, r2
 23f6670:	2b00      	cmp	r3, #0
 23f6672:	f040 809d 	bne.w	23f67b0 <__udivmoddi4+0x220>
 23f6676:	1a89      	subs	r1, r1, r2
 23f6678:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 23f667c:	b297      	uxth	r7, r2
 23f667e:	2601      	movs	r6, #1
 23f6680:	0c20      	lsrs	r0, r4, #16
 23f6682:	fbb1 f2fe 	udiv	r2, r1, lr
 23f6686:	fb0e 1112 	mls	r1, lr, r2, r1
 23f668a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23f668e:	fb07 f002 	mul.w	r0, r7, r2
 23f6692:	4288      	cmp	r0, r1
 23f6694:	d90f      	bls.n	23f66b6 <__udivmoddi4+0x126>
 23f6696:	eb1c 0101 	adds.w	r1, ip, r1
 23f669a:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 23f669e:	bf2c      	ite	cs
 23f66a0:	f04f 0901 	movcs.w	r9, #1
 23f66a4:	f04f 0900 	movcc.w	r9, #0
 23f66a8:	4288      	cmp	r0, r1
 23f66aa:	d903      	bls.n	23f66b4 <__udivmoddi4+0x124>
 23f66ac:	f1b9 0f00 	cmp.w	r9, #0
 23f66b0:	f000 80cf 	beq.w	23f6852 <__udivmoddi4+0x2c2>
 23f66b4:	4642      	mov	r2, r8
 23f66b6:	1a09      	subs	r1, r1, r0
 23f66b8:	b2a4      	uxth	r4, r4
 23f66ba:	fbb1 f0fe 	udiv	r0, r1, lr
 23f66be:	fb0e 1110 	mls	r1, lr, r0, r1
 23f66c2:	fb00 f707 	mul.w	r7, r0, r7
 23f66c6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 23f66ca:	42a7      	cmp	r7, r4
 23f66cc:	d908      	bls.n	23f66e0 <__udivmoddi4+0x150>
 23f66ce:	eb1c 0404 	adds.w	r4, ip, r4
 23f66d2:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 23f66d6:	d202      	bcs.n	23f66de <__udivmoddi4+0x14e>
 23f66d8:	42a7      	cmp	r7, r4
 23f66da:	f200 80b4 	bhi.w	23f6846 <__udivmoddi4+0x2b6>
 23f66de:	4608      	mov	r0, r1
 23f66e0:	1be4      	subs	r4, r4, r7
 23f66e2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 23f66e6:	e79b      	b.n	23f6620 <__udivmoddi4+0x90>
 23f66e8:	f1c6 0720 	rsb	r7, r6, #32
 23f66ec:	40b3      	lsls	r3, r6
 23f66ee:	fa01 f406 	lsl.w	r4, r1, r6
 23f66f2:	fa22 fc07 	lsr.w	ip, r2, r7
 23f66f6:	40f9      	lsrs	r1, r7
 23f66f8:	40b2      	lsls	r2, r6
 23f66fa:	ea4c 0c03 	orr.w	ip, ip, r3
 23f66fe:	fa20 f307 	lsr.w	r3, r0, r7
 23f6702:	ea4f 491c 	mov.w	r9, ip, lsr #16
 23f6706:	431c      	orrs	r4, r3
 23f6708:	fa1f fe8c 	uxth.w	lr, ip
 23f670c:	fa00 f306 	lsl.w	r3, r0, r6
 23f6710:	0c20      	lsrs	r0, r4, #16
 23f6712:	fbb1 f8f9 	udiv	r8, r1, r9
 23f6716:	fb09 1118 	mls	r1, r9, r8, r1
 23f671a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23f671e:	fb08 f00e 	mul.w	r0, r8, lr
 23f6722:	4288      	cmp	r0, r1
 23f6724:	d90f      	bls.n	23f6746 <__udivmoddi4+0x1b6>
 23f6726:	eb1c 0101 	adds.w	r1, ip, r1
 23f672a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 23f672e:	bf2c      	ite	cs
 23f6730:	f04f 0b01 	movcs.w	fp, #1
 23f6734:	f04f 0b00 	movcc.w	fp, #0
 23f6738:	4288      	cmp	r0, r1
 23f673a:	d903      	bls.n	23f6744 <__udivmoddi4+0x1b4>
 23f673c:	f1bb 0f00 	cmp.w	fp, #0
 23f6740:	f000 808d 	beq.w	23f685e <__udivmoddi4+0x2ce>
 23f6744:	46d0      	mov	r8, sl
 23f6746:	1a09      	subs	r1, r1, r0
 23f6748:	b2a4      	uxth	r4, r4
 23f674a:	fbb1 f0f9 	udiv	r0, r1, r9
 23f674e:	fb09 1110 	mls	r1, r9, r0, r1
 23f6752:	fb00 fe0e 	mul.w	lr, r0, lr
 23f6756:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 23f675a:	458e      	cmp	lr, r1
 23f675c:	d907      	bls.n	23f676e <__udivmoddi4+0x1de>
 23f675e:	eb1c 0101 	adds.w	r1, ip, r1
 23f6762:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 23f6766:	d201      	bcs.n	23f676c <__udivmoddi4+0x1dc>
 23f6768:	458e      	cmp	lr, r1
 23f676a:	d87f      	bhi.n	23f686c <__udivmoddi4+0x2dc>
 23f676c:	4620      	mov	r0, r4
 23f676e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 23f6772:	eba1 010e 	sub.w	r1, r1, lr
 23f6776:	fba0 9802 	umull	r9, r8, r0, r2
 23f677a:	4541      	cmp	r1, r8
 23f677c:	464c      	mov	r4, r9
 23f677e:	46c6      	mov	lr, r8
 23f6780:	d302      	bcc.n	23f6788 <__udivmoddi4+0x1f8>
 23f6782:	d106      	bne.n	23f6792 <__udivmoddi4+0x202>
 23f6784:	454b      	cmp	r3, r9
 23f6786:	d204      	bcs.n	23f6792 <__udivmoddi4+0x202>
 23f6788:	3801      	subs	r0, #1
 23f678a:	ebb9 0402 	subs.w	r4, r9, r2
 23f678e:	eb68 0e0c 	sbc.w	lr, r8, ip
 23f6792:	2d00      	cmp	r5, #0
 23f6794:	d070      	beq.n	23f6878 <__udivmoddi4+0x2e8>
 23f6796:	1b1a      	subs	r2, r3, r4
 23f6798:	eb61 010e 	sbc.w	r1, r1, lr
 23f679c:	fa22 f306 	lsr.w	r3, r2, r6
 23f67a0:	fa01 f707 	lsl.w	r7, r1, r7
 23f67a4:	40f1      	lsrs	r1, r6
 23f67a6:	2600      	movs	r6, #0
 23f67a8:	431f      	orrs	r7, r3
 23f67aa:	e9c5 7100 	strd	r7, r1, [r5]
 23f67ae:	e73c      	b.n	23f662a <__udivmoddi4+0x9a>
 23f67b0:	fa02 fc03 	lsl.w	ip, r2, r3
 23f67b4:	f1c3 0020 	rsb	r0, r3, #32
 23f67b8:	fa01 f203 	lsl.w	r2, r1, r3
 23f67bc:	fa21 f600 	lsr.w	r6, r1, r0
 23f67c0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 23f67c4:	fa24 f100 	lsr.w	r1, r4, r0
 23f67c8:	fa1f f78c 	uxth.w	r7, ip
 23f67cc:	409c      	lsls	r4, r3
 23f67ce:	4311      	orrs	r1, r2
 23f67d0:	fbb6 f0fe 	udiv	r0, r6, lr
 23f67d4:	0c0a      	lsrs	r2, r1, #16
 23f67d6:	fb0e 6610 	mls	r6, lr, r0, r6
 23f67da:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 23f67de:	fb00 f607 	mul.w	r6, r0, r7
 23f67e2:	4296      	cmp	r6, r2
 23f67e4:	d90e      	bls.n	23f6804 <__udivmoddi4+0x274>
 23f67e6:	eb1c 0202 	adds.w	r2, ip, r2
 23f67ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 23f67ee:	bf2c      	ite	cs
 23f67f0:	f04f 0901 	movcs.w	r9, #1
 23f67f4:	f04f 0900 	movcc.w	r9, #0
 23f67f8:	4296      	cmp	r6, r2
 23f67fa:	d902      	bls.n	23f6802 <__udivmoddi4+0x272>
 23f67fc:	f1b9 0f00 	cmp.w	r9, #0
 23f6800:	d031      	beq.n	23f6866 <__udivmoddi4+0x2d6>
 23f6802:	4640      	mov	r0, r8
 23f6804:	1b92      	subs	r2, r2, r6
 23f6806:	b289      	uxth	r1, r1
 23f6808:	fbb2 f6fe 	udiv	r6, r2, lr
 23f680c:	fb0e 2216 	mls	r2, lr, r6, r2
 23f6810:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23f6814:	fb06 f207 	mul.w	r2, r6, r7
 23f6818:	428a      	cmp	r2, r1
 23f681a:	d907      	bls.n	23f682c <__udivmoddi4+0x29c>
 23f681c:	eb1c 0101 	adds.w	r1, ip, r1
 23f6820:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 23f6824:	d201      	bcs.n	23f682a <__udivmoddi4+0x29a>
 23f6826:	428a      	cmp	r2, r1
 23f6828:	d823      	bhi.n	23f6872 <__udivmoddi4+0x2e2>
 23f682a:	4646      	mov	r6, r8
 23f682c:	1a89      	subs	r1, r1, r2
 23f682e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 23f6832:	e725      	b.n	23f6680 <__udivmoddi4+0xf0>
 23f6834:	462e      	mov	r6, r5
 23f6836:	4628      	mov	r0, r5
 23f6838:	e6f7      	b.n	23f662a <__udivmoddi4+0x9a>
 23f683a:	1a84      	subs	r4, r0, r2
 23f683c:	eb61 0303 	sbc.w	r3, r1, r3
 23f6840:	2001      	movs	r0, #1
 23f6842:	461f      	mov	r7, r3
 23f6844:	e70b      	b.n	23f665e <__udivmoddi4+0xce>
 23f6846:	4464      	add	r4, ip
 23f6848:	3802      	subs	r0, #2
 23f684a:	e749      	b.n	23f66e0 <__udivmoddi4+0x150>
 23f684c:	4464      	add	r4, ip
 23f684e:	3802      	subs	r0, #2
 23f6850:	e6e1      	b.n	23f6616 <__udivmoddi4+0x86>
 23f6852:	3a02      	subs	r2, #2
 23f6854:	4461      	add	r1, ip
 23f6856:	e72e      	b.n	23f66b6 <__udivmoddi4+0x126>
 23f6858:	3e02      	subs	r6, #2
 23f685a:	4462      	add	r2, ip
 23f685c:	e6c6      	b.n	23f65ec <__udivmoddi4+0x5c>
 23f685e:	f1a8 0802 	sub.w	r8, r8, #2
 23f6862:	4461      	add	r1, ip
 23f6864:	e76f      	b.n	23f6746 <__udivmoddi4+0x1b6>
 23f6866:	3802      	subs	r0, #2
 23f6868:	4462      	add	r2, ip
 23f686a:	e7cb      	b.n	23f6804 <__udivmoddi4+0x274>
 23f686c:	3802      	subs	r0, #2
 23f686e:	4461      	add	r1, ip
 23f6870:	e77d      	b.n	23f676e <__udivmoddi4+0x1de>
 23f6872:	3e02      	subs	r6, #2
 23f6874:	4461      	add	r1, ip
 23f6876:	e7d9      	b.n	23f682c <__udivmoddi4+0x29c>
 23f6878:	462e      	mov	r6, r5
 23f687a:	e6d6      	b.n	23f662a <__udivmoddi4+0x9a>

023f687c <__aeabi_idiv0>:
 23f687c:	4770      	bx	lr
 23f687e:	bf00      	nop

023f6880 <strcmp>:
 23f6880:	f810 2b01 	ldrb.w	r2, [r0], #1
 23f6884:	f811 3b01 	ldrb.w	r3, [r1], #1
 23f6888:	2a01      	cmp	r2, #1
 23f688a:	bf28      	it	cs
 23f688c:	429a      	cmpcs	r2, r3
 23f688e:	d0f7      	beq.n	23f6880 <strcmp>
 23f6890:	1ad0      	subs	r0, r2, r3
 23f6892:	4770      	bx	lr

023f6894 <strlen>:
 23f6894:	4603      	mov	r3, r0
 23f6896:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f689a:	2a00      	cmp	r2, #0
 23f689c:	d1fb      	bne.n	23f6896 <strlen+0x2>
 23f689e:	1a18      	subs	r0, r3, r0
 23f68a0:	3801      	subs	r0, #1
 23f68a2:	4770      	bx	lr

023f68a4 <__aeabi_d2lz>:
 23f68a4:	b538      	push	{r3, r4, r5, lr}
 23f68a6:	2200      	movs	r2, #0
 23f68a8:	2300      	movs	r3, #0
 23f68aa:	4604      	mov	r4, r0
 23f68ac:	460d      	mov	r5, r1
 23f68ae:	f7ff fd6d 	bl	23f638c <__aeabi_dcmplt>
 23f68b2:	b928      	cbnz	r0, 23f68c0 <__aeabi_d2lz+0x1c>
 23f68b4:	4620      	mov	r0, r4
 23f68b6:	4629      	mov	r1, r5
 23f68b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f68bc:	f7ff be4a 	b.w	23f6554 <__aeabi_d2ulz>
 23f68c0:	4620      	mov	r0, r4
 23f68c2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 23f68c6:	f7ff fe45 	bl	23f6554 <__aeabi_d2ulz>
 23f68ca:	4240      	negs	r0, r0
 23f68cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f68d0:	bd38      	pop	{r3, r4, r5, pc}
 23f68d2:	bf00      	nop

023f68d4 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23f68d4:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23f68d6:	f006 f961 	bl	23fcb9c <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f68da:	2500      	movs	r5, #0
 23f68dc:	4e05      	ldr	r6, [pc, #20]	; (23f68f4 <module_user_init+0x20>)
 23f68de:	4c06      	ldr	r4, [pc, #24]	; (23f68f8 <module_user_init+0x24>)
 23f68e0:	1ba4      	subs	r4, r4, r6
 23f68e2:	08a4      	lsrs	r4, r4, #2
 23f68e4:	42ac      	cmp	r4, r5
 23f68e6:	d100      	bne.n	23f68ea <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23f68e8:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23f68ea:	f856 3b04 	ldr.w	r3, [r6], #4
 23f68ee:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f68f0:	3501      	adds	r5, #1
 23f68f2:	e7f7      	b.n	23f68e4 <module_user_init+0x10>
 23f68f4:	023fffc4 	.word	0x023fffc4
 23f68f8:	023ffff4 	.word	0x023ffff4

023f68fc <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23f68fc:	f000 b84a 	b.w	23f6994 <setup>

023f6900 <module_user_loop>:
}

void module_user_loop() {
 23f6900:	b508      	push	{r3, lr}
    loop();
 23f6902:	f000 f89f 	bl	23f6a44 <loop>
    _post_loop();
}
 23f6906:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23f690a:	f006 b8ff 	b.w	23fcb0c <_post_loop>

023f690e <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23f690e:	f003 ba73 	b.w	23f9df8 <malloc>

023f6912 <_Znaj>:
 23f6912:	f003 ba71 	b.w	23f9df8 <malloc>

023f6916 <_ZdaPv>:
 23f6916:	f003 ba7d 	b.w	23f9e14 <free>

023f691a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23f691a:	f003 ba7b 	b.w	23f9e14 <free>
	...

023f6920 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f6920:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23f6922:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f6924:	4a02      	ldr	r2, [pc, #8]	; (23f6930 <__cxa_pure_virtual+0x10>)
 23f6926:	4903      	ldr	r1, [pc, #12]	; (23f6934 <__cxa_pure_virtual+0x14>)
 23f6928:	f003 f86e 	bl	23f9a08 <panic_>
  while (1);
 23f692c:	e7fe      	b.n	23f692c <__cxa_pure_virtual+0xc>
 23f692e:	bf00      	nop
 23f6930:	023f943d 	.word	0x023f943d
 23f6934:	023ff26c 	.word	0x023ff26c

023f6938 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23f6938:	7800      	ldrb	r0, [r0, #0]
 23f693a:	fab0 f080 	clz	r0, r0
 23f693e:	0940      	lsrs	r0, r0, #5
 23f6940:	4770      	bx	lr

023f6942 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23f6942:	2301      	movs	r3, #1
 23f6944:	7003      	strb	r3, [r0, #0]
 23f6946:	4770      	bx	lr

023f6948 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23f6948:	4770      	bx	lr
	...

023f694c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23f694c:	b510      	push	{r4, lr}
 23f694e:	4604      	mov	r4, r0
 23f6950:	4b09      	ldr	r3, [pc, #36]	; (23f6978 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23f6952:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23f6954:	f003 fff4 	bl	23fa940 <_ZN5spark10LogManager8instanceEv>
 23f6958:	4621      	mov	r1, r4
 23f695a:	f004 fa2b 	bl	23fadb4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23f695e:	f005 ffeb 	bl	23fc938 <_Z16_fetch_usbserialv>
 23f6962:	f005 ffdd 	bl	23fc920 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23f6966:	4620      	mov	r0, r4
 23f6968:	4b04      	ldr	r3, [pc, #16]	; (23f697c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23f696a:	f840 3b04 	str.w	r3, [r0], #4
 23f696e:	f004 f8bd 	bl	23faaec <_ZN5spark6detail9LogFilterD1Ev>
    }
 23f6972:	4620      	mov	r0, r4
 23f6974:	bd10      	pop	{r4, pc}
 23f6976:	bf00      	nop
 23f6978:	023ff2c8 	.word	0x023ff2c8
 23f697c:	023ff2b0 	.word	0x023ff2b0

023f6980 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23f6980:	b510      	push	{r4, lr}
 23f6982:	4604      	mov	r4, r0
    }
 23f6984:	f7ff ffe2 	bl	23f694c <_ZN5spark16SerialLogHandlerD1Ev>
 23f6988:	4620      	mov	r0, r4
 23f698a:	2124      	movs	r1, #36	; 0x24
 23f698c:	f7ff ffc5 	bl	23f691a <_ZdlPvj>
 23f6990:	4620      	mov	r0, r4
 23f6992:	bd10      	pop	{r4, pc}

023f6994 <setup>:
#define MQTT_LOGGING false
// or show system, cloud connectivity, and application logs over USB
// View logs with CLI using 'particle serial monitor --follow'
SerialLogHandler logHandler(LOG_LEVEL_INFO);

void setup() {
 23f6994:	b510      	push	{r4, lr}
 23f6996:	b088      	sub	sp, #32
//  WiFi.setCredentials(WIFI_SSID, WIFI_PASSWORD);
//  WiFi.selectAntenna(ANT_INTERNAL);
//  WiFi.useDynamicIP();

  IoT::begin(MQTT_BROKER, CONTROLLER_NAME, MQTT_LOGGING);
 23f6998:	4925      	ldr	r1, [pc, #148]	; (23f6a30 <setup+0x9c>)
 23f699a:	4668      	mov	r0, sp
 23f699c:	f004 ffd5 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
 23f69a0:	4924      	ldr	r1, [pc, #144]	; (23f6a34 <setup+0xa0>)
 23f69a2:	a804      	add	r0, sp, #16
 23f69a4:	f004 ffd1 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
 23f69a8:	2200      	movs	r2, #0
 23f69aa:	a904      	add	r1, sp, #16
 23f69ac:	4668      	mov	r0, sp
 23f69ae:	f000 fc0b 	bl	23f71c8 <_ZN3IoT5beginE6StringS0_b>
 23f69b2:	a804      	add	r0, sp, #16
 23f69b4:	f004 ff7e 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f69b8:	4668      	mov	r0, sp
 23f69ba:	f004 ff7b 	bl	23fb8b4 <_ZN6StringD1Ev>

  Device::add(new Device("Awake", "All", 'P'));
 23f69be:	491e      	ldr	r1, [pc, #120]	; (23f6a38 <setup+0xa4>)
 23f69c0:	4668      	mov	r0, sp
 23f69c2:	f004 ffc2 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
 23f69c6:	491d      	ldr	r1, [pc, #116]	; (23f6a3c <setup+0xa8>)
 23f69c8:	a804      	add	r0, sp, #16
 23f69ca:	f004 ffbe 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
 23f69ce:	2038      	movs	r0, #56	; 0x38
 23f69d0:	f7ff ff9d 	bl	23f690e <_Znwj>
 23f69d4:	4604      	mov	r4, r0
 23f69d6:	b120      	cbz	r0, 23f69e2 <setup+0x4e>
 23f69d8:	2350      	movs	r3, #80	; 0x50
 23f69da:	4669      	mov	r1, sp
 23f69dc:	aa04      	add	r2, sp, #16
 23f69de:	f001 feaf 	bl	23f8740 <_ZN6DeviceC1E6StringS0_c>
 23f69e2:	4620      	mov	r0, r4
 23f69e4:	f001 fec6 	bl	23f8774 <_ZN6Device3addEPS_>
 23f69e8:	a804      	add	r0, sp, #16
 23f69ea:	f004 ff63 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f69ee:	4668      	mov	r0, sp
 23f69f0:	f004 ff60 	bl	23fb8b4 <_ZN6StringD1Ev>
  Device::add(new Device("Test", "All", 'P'));
 23f69f4:	4912      	ldr	r1, [pc, #72]	; (23f6a40 <setup+0xac>)
 23f69f6:	4668      	mov	r0, sp
 23f69f8:	f004 ffa7 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
 23f69fc:	490f      	ldr	r1, [pc, #60]	; (23f6a3c <setup+0xa8>)
 23f69fe:	a804      	add	r0, sp, #16
 23f6a00:	f004 ffa3 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
 23f6a04:	2038      	movs	r0, #56	; 0x38
 23f6a06:	f7ff ff82 	bl	23f690e <_Znwj>
 23f6a0a:	4604      	mov	r4, r0
 23f6a0c:	b120      	cbz	r0, 23f6a18 <setup+0x84>
 23f6a0e:	2350      	movs	r3, #80	; 0x50
 23f6a10:	4669      	mov	r1, sp
 23f6a12:	aa04      	add	r2, sp, #16
 23f6a14:	f001 fe94 	bl	23f8740 <_ZN6DeviceC1E6StringS0_c>
 23f6a18:	4620      	mov	r0, r4
 23f6a1a:	f001 feab 	bl	23f8774 <_ZN6Device3addEPS_>
 23f6a1e:	a804      	add	r0, sp, #16
 23f6a20:	f004 ff48 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f6a24:	4668      	mov	r0, sp
 23f6a26:	f004 ff45 	bl	23fb8b4 <_ZN6StringD1Ev>

}
 23f6a2a:	b008      	add	sp, #32
 23f6a2c:	bd10      	pop	{r4, pc}
 23f6a2e:	bf00      	nop
 23f6a30:	023ff281 	.word	0x023ff281
 23f6a34:	023ff28e 	.word	0x023ff28e
 23f6a38:	023ff296 	.word	0x023ff296
 23f6a3c:	023ff29c 	.word	0x023ff29c
 23f6a40:	023ff2a0 	.word	0x023ff2a0

023f6a44 <loop>:

void loop() {
  IoT::loop();
 23f6a44:	f000 b9a2 	b.w	23f6d8c <_ZN3IoT4loopEv>

023f6a48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f6a48:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f6a4a:	2614      	movs	r6, #20
 23f6a4c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f6a50:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f6a52:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f6a56:	42ae      	cmp	r6, r5
 23f6a58:	d004      	beq.n	23f6a64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23f6a5a:	4628      	mov	r0, r5
 23f6a5c:	f004 ff2a 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f6a60:	3514      	adds	r5, #20
 23f6a62:	e7f8      	b.n	23f6a56 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f6a64:	6820      	ldr	r0, [r4, #0]
 23f6a66:	f003 f9d5 	bl	23f9e14 <free>
    AllocatorT::free(data_);
}
 23f6a6a:	4620      	mov	r0, r4
 23f6a6c:	bd70      	pop	{r4, r5, r6, pc}

023f6a6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f6a6e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f6a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f6a72:	4604      	mov	r4, r0
 23f6a74:	460d      	mov	r5, r1
 23f6a76:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f6a78:	d916      	bls.n	23f6aa8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23f6a7a:	4290      	cmp	r0, r2
 23f6a7c:	d215      	bcs.n	23f6aaa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23f6a7e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f6a82:	1a75      	subs	r5, r6, r1
 23f6a84:	f1a1 0714 	sub.w	r7, r1, #20
 23f6a88:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f6a8a:	42b7      	cmp	r7, r6
 23f6a8c:	d01c      	beq.n	23f6ac8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23f6a8e:	b12c      	cbz	r4, 23f6a9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23f6a90:	4631      	mov	r1, r6
 23f6a92:	4620      	mov	r0, r4
 23f6a94:	f004 ff8b 	bl	23fb9ae <_ZN6StringC1EOS_>
 23f6a98:	7c33      	ldrb	r3, [r6, #16]
 23f6a9a:	7423      	strb	r3, [r4, #16]
 23f6a9c:	4630      	mov	r0, r6
 23f6a9e:	f004 ff09 	bl	23fb8b4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f6aa2:	3e14      	subs	r6, #20
 23f6aa4:	3c14      	subs	r4, #20
 23f6aa6:	e7f0      	b.n	23f6a8a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f6aa8:	d00e      	beq.n	23f6ac8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23f6aaa:	42b5      	cmp	r5, r6
 23f6aac:	d00c      	beq.n	23f6ac8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23f6aae:	b12c      	cbz	r4, 23f6abc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23f6ab0:	4629      	mov	r1, r5
 23f6ab2:	4620      	mov	r0, r4
 23f6ab4:	f004 ff7b 	bl	23fb9ae <_ZN6StringC1EOS_>
 23f6ab8:	7c2b      	ldrb	r3, [r5, #16]
 23f6aba:	7423      	strb	r3, [r4, #16]
 23f6abc:	4628      	mov	r0, r5
 23f6abe:	f004 fef9 	bl	23fb8b4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f6ac2:	3514      	adds	r5, #20
 23f6ac4:	3414      	adds	r4, #20
 23f6ac6:	e7f0      	b.n	23f6aaa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23f6ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f6aca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23f6aca:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f6acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23f6ad0:	e9c0 3300 	strd	r3, r3, [r0]
 23f6ad4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f6ad6:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f6ad8:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f6ada:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f6adc:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f6ade:	dd24      	ble.n	23f6b2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23f6ae0:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23f6ae4:	fb08 f007 	mul.w	r0, r8, r7
 23f6ae8:	f003 f986 	bl	23f9df8 <malloc>
            if (!d) {
 23f6aec:	4605      	mov	r5, r0
 23f6aee:	b1e0      	cbz	r0, 23f6b2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23f6af0:	e9d4 1200 	ldrd	r1, r2, [r4]
 23f6af4:	fb08 1202 	mla	r2, r8, r2, r1
 23f6af8:	f7ff ffb9 	bl	23f6a6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f6afc:	6820      	ldr	r0, [r4, #0]
 23f6afe:	f003 f989 	bl	23f9e14 <free>
        data_ = d;
 23f6b02:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23f6b04:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f6b06:	e9d6 7300 	ldrd	r7, r3, [r6]
 23f6b0a:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23f6b0e:	45b8      	cmp	r8, r7
 23f6b10:	d009      	beq.n	23f6b26 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23f6b12:	4639      	mov	r1, r7
 23f6b14:	4628      	mov	r0, r5
 23f6b16:	f004 ff64 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f6b1a:	7c3b      	ldrb	r3, [r7, #16]
 23f6b1c:	3514      	adds	r5, #20
 23f6b1e:	f805 3c04 	strb.w	r3, [r5, #-4]
 23f6b22:	3714      	adds	r7, #20
 23f6b24:	e7f3      	b.n	23f6b0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23f6b26:	6873      	ldr	r3, [r6, #4]
 23f6b28:	6063      	str	r3, [r4, #4]
}
 23f6b2a:	4620      	mov	r0, r4
 23f6b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f6b30 <_GLOBAL__sub_I_SystemMode>:
}
 23f6b30:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23f6b32:	2400      	movs	r4, #0
 23f6b34:	4b23      	ldr	r3, [pc, #140]	; (23f6bc4 <_GLOBAL__sub_I_SystemMode+0x94>)
    SleepResult() {}
 23f6b36:	4a24      	ldr	r2, [pc, #144]	; (23f6bc8 <_GLOBAL__sub_I_SystemMode+0x98>)
 23f6b38:	b08c      	sub	sp, #48	; 0x30
 23f6b3a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
 23f6b3c:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23f6b40:	2001      	movs	r0, #1
 23f6b42:	f002 ffb5 	bl	23f9ab0 <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23f6b46:	4621      	mov	r1, r4
 23f6b48:	2001      	movs	r0, #1
 23f6b4a:	f002 ffdb 	bl	23f9b04 <system_thread_set_state>
        capacity_(0) {
 23f6b4e:	e9cd 4400 	strd	r4, r4, [sp]
 23f6b52:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23f6b54:	f005 fef0 	bl	23fc938 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23f6b58:	4c1c      	ldr	r4, [pc, #112]	; (23f6bcc <_GLOBAL__sub_I_SystemMode+0x9c>)
 23f6b5a:	4605      	mov	r5, r0
 23f6b5c:	4626      	mov	r6, r4
 23f6b5e:	4669      	mov	r1, sp
 23f6b60:	a803      	add	r0, sp, #12
 23f6b62:	f7ff ffb2 	bl	23f6aca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 23f6b66:	a903      	add	r1, sp, #12
 23f6b68:	a806      	add	r0, sp, #24
 23f6b6a:	f7ff ffae 	bl	23f6aca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f6b6e:	4b18      	ldr	r3, [pc, #96]	; (23f6bd0 <_GLOBAL__sub_I_SystemMode+0xa0>)
 23f6b70:	a906      	add	r1, sp, #24
 23f6b72:	f846 3b04 	str.w	r3, [r6], #4
 23f6b76:	a809      	add	r0, sp, #36	; 0x24
 23f6b78:	f7ff ffa7 	bl	23f6aca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f6b7c:	aa09      	add	r2, sp, #36	; 0x24
 23f6b7e:	211e      	movs	r1, #30
 23f6b80:	4630      	mov	r0, r6
 23f6b82:	f004 f9f9 	bl	23faf78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f6b86:	a809      	add	r0, sp, #36	; 0x24
 23f6b88:	f7ff ff5e 	bl	23f6a48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f6b8c:	a806      	add	r0, sp, #24
 23f6b8e:	f7ff ff5b 	bl	23f6a48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f6b92:	4b10      	ldr	r3, [pc, #64]	; (23f6bd4 <_GLOBAL__sub_I_SystemMode+0xa4>)
 23f6b94:	6225      	str	r5, [r4, #32]
 23f6b96:	6023      	str	r3, [r4, #0]
 23f6b98:	a803      	add	r0, sp, #12
 23f6b9a:	f7ff ff55 	bl	23f6a48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f6b9e:	4b0e      	ldr	r3, [pc, #56]	; (23f6bd8 <_GLOBAL__sub_I_SystemMode+0xa8>)
 23f6ba0:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23f6ba2:	f005 fec9 	bl	23fc938 <_Z16_fetch_usbserialv>
 23f6ba6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f6baa:	f005 feb5 	bl	23fc918 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23f6bae:	f003 fec7 	bl	23fa940 <_ZN5spark10LogManager8instanceEv>
 23f6bb2:	4621      	mov	r1, r4
 23f6bb4:	f004 f8b8 	bl	23fad28 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
 23f6bb8:	4668      	mov	r0, sp
 23f6bba:	f7ff ff45 	bl	23f6a48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23f6bbe:	b00c      	add	sp, #48	; 0x30
 23f6bc0:	bd70      	pop	{r4, r5, r6, pc}
 23f6bc2:	bf00      	nop
 23f6bc4:	1007acc0 	.word	0x1007acc0
 23f6bc8:	ffff0000 	.word	0xffff0000
 23f6bcc:	1007accc 	.word	0x1007accc
 23f6bd0:	023ff2b0 	.word	0x023ff2b0
 23f6bd4:	023ff8cc 	.word	0x023ff8cc
 23f6bd8:	023ff2c8 	.word	0x023ff2c8

023f6bdc <_Z18outOfMemoryHandleryi>:
MQTTManager* IoT::_mqttManager = NULL;

int          outOfMemory = -1;

void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
 23f6bdc:	4b01      	ldr	r3, [pc, #4]	; (23f6be4 <_Z18outOfMemoryHandleryi+0x8>)
 23f6bde:	601a      	str	r2, [r3, #0]
}
 23f6be0:	4770      	bx	lr
 23f6be2:	bf00      	nop
 23f6be4:	1007aacc 	.word	0x1007aacc

023f6be8 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
 23f6be8:	b530      	push	{r4, r5, lr}
 23f6bea:	b085      	sub	sp, #20
 23f6bec:	4604      	mov	r4, r0
 23f6bee:	9808      	ldr	r0, [sp, #32]
        if (!context) {
 23f6bf0:	b160      	cbz	r0, 23f6c0c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
 23f6bf2:	6840      	ldr	r0, [r0, #4]
 23f6bf4:	b150      	cbz	r0, 23f6c0c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
 23f6bf6:	6885      	ldr	r5, [r0, #8]
 23f6bf8:	b145      	cbz	r5, 23f6c0c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
 23f6bfa:	e9cd 4102 	strd	r4, r1, [sp, #8]
 23f6bfe:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f6c02:	68c4      	ldr	r4, [r0, #12]
 23f6c04:	466a      	mov	r2, sp
 23f6c06:	ab01      	add	r3, sp, #4
 23f6c08:	a902      	add	r1, sp, #8
 23f6c0a:	47a0      	blx	r4
    }
 23f6c0c:	b005      	add	sp, #20
 23f6c0e:	bd30      	pop	{r4, r5, pc}

023f6c10 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f6c10:	b530      	push	{r4, r5, lr}
 23f6c12:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 23f6c14:	6800      	ldr	r0, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f6c16:	b085      	sub	sp, #20
 23f6c18:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 23f6c1a:	6883      	ldr	r3, [r0, #8]
 23f6c1c:	e9d1 4500 	ldrd	r4, r5, [r1]
 23f6c20:	e9cd 4502 	strd	r4, r5, [sp, #8]
 23f6c24:	b90b      	cbnz	r3, 23f6c2a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
 23f6c26:	f006 f96d 	bl	23fcf04 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f6c2a:	68c3      	ldr	r3, [r0, #12]
 23f6c2c:	aa01      	add	r2, sp, #4
 23f6c2e:	a902      	add	r1, sp, #8
 23f6c30:	4798      	blx	r3
      }
 23f6c32:	b005      	add	sp, #20
 23f6c34:	bd30      	pop	{r4, r5, pc}

023f6c36 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 23f6c36:	2a01      	cmp	r2, #1
 23f6c38:	d102      	bne.n	23f6c40 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f6c3a:	6001      	str	r1, [r0, #0]
      }
 23f6c3c:	2000      	movs	r0, #0
 23f6c3e:	4770      	bx	lr
	  switch (__op)
 23f6c40:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f6c42:	bf04      	itt	eq
 23f6c44:	680b      	ldreq	r3, [r1, #0]
 23f6c46:	6003      	streq	r3, [r0, #0]
	      break;
 23f6c48:	e7f8      	b.n	23f6c3c <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

023f6c4a <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23f6c4a:	6803      	ldr	r3, [r0, #0]
 23f6c4c:	6812      	ldr	r2, [r2, #0]
 23f6c4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f6c52:	4718      	bx	r3

023f6c54 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23f6c54:	b510      	push	{r4, lr}
      if (_M_manager)
 23f6c56:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23f6c58:	4604      	mov	r4, r0
      if (_M_manager)
 23f6c5a:	b113      	cbz	r3, 23f6c62 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f6c5c:	2203      	movs	r2, #3
 23f6c5e:	4601      	mov	r1, r0
 23f6c60:	4798      	blx	r3
    }
 23f6c62:	4620      	mov	r0, r4
 23f6c64:	bd10      	pop	{r4, pc}

023f6c66 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
 23f6c66:	b510      	push	{r4, lr}
            delete callableWrapper;
 23f6c68:	4604      	mov	r4, r0
 23f6c6a:	b138      	cbz	r0, 23f6c7c <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
 23f6c6c:	f7ff fff2 	bl	23f6c54 <_ZNSt14_Function_baseD1Ev>
 23f6c70:	4620      	mov	r0, r4
        };
 23f6c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
 23f6c76:	2110      	movs	r1, #16
 23f6c78:	f7ff be4f 	b.w	23f691a <_ZdlPvj>
        };
 23f6c7c:	bd10      	pop	{r4, pc}
	...

023f6c80 <__tcf_1>:
     * @brief Get the hardware watchdog instance.
     * 
     * @return The hardware watchdog singlton.
     */
    static WatchdogClass& getInstance() {
        static WatchdogClass watchdog;
 23f6c80:	b508      	push	{r3, lr}
 23f6c82:	4802      	ldr	r0, [pc, #8]	; (23f6c8c <__tcf_1+0xc>)
 23f6c84:	f7ff ffe6 	bl	23f6c54 <_ZNSt14_Function_baseD1Ev>
 23f6c88:	bd08      	pop	{r3, pc}
 23f6c8a:	bf00      	nop
 23f6c8c:	1007acf4 	.word	0x1007acf4

023f6c90 <_ZN8particle13WatchdogClass11getInstanceEv>:
    static WatchdogClass& getInstance() {
 23f6c90:	b538      	push	{r3, r4, r5, lr}
        static WatchdogClass watchdog;
 23f6c92:	4d0a      	ldr	r5, [pc, #40]	; (23f6cbc <_ZN8particle13WatchdogClass11getInstanceEv+0x2c>)
 23f6c94:	e8d5 4f8f 	ldab	r4, [r5]
 23f6c98:	f014 0401 	ands.w	r4, r4, #1
 23f6c9c:	d10c      	bne.n	23f6cb8 <_ZN8particle13WatchdogClass11getInstanceEv+0x28>
 23f6c9e:	4628      	mov	r0, r5
 23f6ca0:	f7ff fe4a 	bl	23f6938 <__cxa_guard_acquire>
 23f6ca4:	b140      	cbz	r0, 23f6cb8 <_ZN8particle13WatchdogClass11getInstanceEv+0x28>
    _Function_base() : _M_manager(nullptr) { }
 23f6ca6:	4b06      	ldr	r3, [pc, #24]	; (23f6cc0 <_ZN8particle13WatchdogClass11getInstanceEv+0x30>)
 23f6ca8:	4628      	mov	r0, r5
 23f6caa:	609c      	str	r4, [r3, #8]
    }

private:
    WatchdogClass()
            : callback_(nullptr),
              instance_(HAL_WATCHDOG_INSTANCE1) {
 23f6cac:	741c      	strb	r4, [r3, #16]
        static WatchdogClass watchdog;
 23f6cae:	f7ff fe48 	bl	23f6942 <__cxa_guard_release>
 23f6cb2:	4804      	ldr	r0, [pc, #16]	; (23f6cc4 <_ZN8particle13WatchdogClass11getInstanceEv+0x34>)
 23f6cb4:	f006 fa6a 	bl	23fd18c <atexit>
    }
 23f6cb8:	4801      	ldr	r0, [pc, #4]	; (23f6cc0 <_ZN8particle13WatchdogClass11getInstanceEv+0x30>)
 23f6cba:	bd38      	pop	{r3, r4, r5, pc}
 23f6cbc:	1007acf0 	.word	0x1007acf0
 23f6cc0:	1007acf4 	.word	0x1007acf4
 23f6cc4:	023f6c81 	.word	0x023f6c81

023f6cc8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23f6cc8:	b510      	push	{r4, lr}
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23f6cca:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23f6cce:	4604      	mov	r4, r0
 23f6cd0:	4608      	mov	r0, r1
    attr.flags = 0;
 23f6cd2:	2100      	movs	r1, #0
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23f6cd4:	b08a      	sub	sp, #40	; 0x28
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f6cd6:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
 23f6cda:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f6cde:	460b      	mov	r3, r1
 23f6ce0:	aa02      	add	r2, sp, #8
 23f6ce2:	6821      	ldr	r1, [r4, #0]
 23f6ce4:	f002 feac 	bl	23f9a40 <log_message_v>
}
 23f6ce8:	b00a      	add	sp, #40	; 0x28
 23f6cea:	bd10      	pop	{r4, pc}

023f6cec <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
 23f6cec:	b40e      	push	{r1, r2, r3}
 23f6cee:	b503      	push	{r0, r1, lr}
 23f6cf0:	ab03      	add	r3, sp, #12
 23f6cf2:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_ERROR, fmt, args);
 23f6cf6:	2132      	movs	r1, #50	; 0x32
    va_start(args, fmt);
 23f6cf8:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
 23f6cfa:	f7ff ffe5 	bl	23f6cc8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f6cfe:	b002      	add	sp, #8
 23f6d00:	f85d eb04 	ldr.w	lr, [sp], #4
 23f6d04:	b003      	add	sp, #12
 23f6d06:	4770      	bx	lr

023f6d08 <_ZNK5spark6Logger4infoEPKcz>:
inline void spark::Logger::info(const char *fmt, ...) const {
 23f6d08:	b40e      	push	{r1, r2, r3}
 23f6d0a:	b503      	push	{r0, r1, lr}
 23f6d0c:	ab03      	add	r3, sp, #12
 23f6d0e:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_INFO, fmt, args);
 23f6d12:	211e      	movs	r1, #30
    va_start(args, fmt);
 23f6d14:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_INFO, fmt, args);
 23f6d16:	f7ff ffd7 	bl	23f6cc8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f6d1a:	b002      	add	sp, #8
 23f6d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 23f6d20:	b003      	add	sp, #12
 23f6d22:	4770      	bx	lr

023f6d24 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
 23f6d24:	b40e      	push	{r1, r2, r3}
 23f6d26:	b503      	push	{r0, r1, lr}
 23f6d28:	ab03      	add	r3, sp, #12
 23f6d2a:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_TRACE, fmt, args);
 23f6d2e:	2101      	movs	r1, #1
    va_start(args, fmt);
 23f6d30:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
 23f6d32:	f7ff ffc9 	bl	23f6cc8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f6d36:	b002      	add	sp, #8
 23f6d38:	f85d eb04 	ldr.w	lr, [sp], #4
 23f6d3c:	b003      	add	sp, #12
 23f6d3e:	4770      	bx	lr

023f6d40 <_ZN3IoT13startWatchdogEv>:

/**
 * Hardware Watchdog
 */
void IoT::startWatchdog()
{
 23f6d40:	b500      	push	{lr}
            : info_{} {
 23f6d42:	4b0f      	ldr	r3, [pc, #60]	; (23f6d80 <_ZN3IoT13startWatchdogEv+0x40>)
 23f6d44:	b097      	sub	sp, #92	; 0x5c
 23f6d46:	2220      	movs	r2, #32
 23f6d48:	2100      	movs	r1, #0
 23f6d4a:	a80e      	add	r0, sp, #56	; 0x38
 23f6d4c:	930d      	str	r3, [sp, #52]	; 0x34
 23f6d4e:	f006 fa62 	bl	23fd216 <memset>
    // Getting capabiltiies
    WatchdogInfo info;
    Watchdog.getInfo(info);
 23f6d52:	f7ff ff9d 	bl	23f6c90 <_ZN8particle13WatchdogClass11getInstanceEv>
 23f6d56:	a904      	add	r1, sp, #16
 23f6d58:	f005 fe1f 	bl	23fc99a <_ZN8particle13WatchdogClass7getInfoERNS_12WatchdogInfoE>
    WatchdogCaps mandatoryCaps = info.mandatoryCapabilities();

    // Get the capabilities that can be turned off
    WatchdogCaps optionalCaps = info.capabilities();
    
    Watchdog.init(WatchdogConfiguration().timeout(300s));
 23f6d5c:	f7ff ff98 	bl	23f6c90 <_ZN8particle13WatchdogClass11getInstanceEv>
        config_.timeout_ms = ms;
 23f6d60:	4a08      	ldr	r2, [pc, #32]	; (23f6d84 <_ZN3IoT13startWatchdogEv+0x44>)
 23f6d62:	4b09      	ldr	r3, [pc, #36]	; (23f6d88 <_ZN3IoT13startWatchdogEv+0x48>)
 23f6d64:	a901      	add	r1, sp, #4
 23f6d66:	e9cd 2301 	strd	r2, r3, [sp, #4]
        config_.enable_caps = HAL_WATCHDOG_CAPS_RESET | HAL_WATCHDOG_CAPS_SLEEP_RUNNING;
 23f6d6a:	2321      	movs	r3, #33	; 0x21
 23f6d6c:	9303      	str	r3, [sp, #12]
 23f6d6e:	f005 fe07 	bl	23fc980 <_ZN8particle13WatchdogClass4initERKNS_21WatchdogConfigurationE>
    Watchdog.start();
 23f6d72:	f7ff ff8d 	bl	23f6c90 <_ZN8particle13WatchdogClass11getInstanceEv>
 23f6d76:	f005 fe08 	bl	23fc98a <_ZN8particle13WatchdogClass5startEv>
}
 23f6d7a:	b017      	add	sp, #92	; 0x5c
 23f6d7c:	f85d fb04 	ldr.w	pc, [sp], #4
 23f6d80:	00010024 	.word	0x00010024
 23f6d84:	0001000c 	.word	0x0001000c
 23f6d88:	000493e0 	.word	0x000493e0

023f6d8c <_ZN3IoT4loopEv>:
/**
 * Loop method must be called periodically,
 * typically from the sketch loop() method.
 */
void IoT::loop()
{
 23f6d8c:	b508      	push	{r3, lr}
    Device::loopAll();
 23f6d8e:	f001 fd37 	bl	23f8800 <_ZN6Device7loopAllEv>
    _mqttManager->loop();
 23f6d92:	4b0c      	ldr	r3, [pc, #48]	; (23f6dc4 <_ZN3IoT4loopEv+0x38>)
 23f6d94:	6818      	ldr	r0, [r3, #0]
 23f6d96:	f001 fa43 	bl	23f8220 <_ZN11MQTTManager4loopEv>

    //TODO: enable only for Photon 2
    if (outOfMemory >= 0) {
 23f6d9a:	4b0b      	ldr	r3, [pc, #44]	; (23f6dc8 <_ZN3IoT4loopEv+0x3c>)
 23f6d9c:	681a      	ldr	r2, [r3, #0]
 23f6d9e:	2a00      	cmp	r2, #0
 23f6da0:	db09      	blt.n	23f6db6 <_ZN3IoT4loopEv+0x2a>
        // An out of memory condition occurred - reset device.
        Log.error("out of memory occurred size=%d", outOfMemory);
 23f6da2:	490a      	ldr	r1, [pc, #40]	; (23f6dcc <_ZN3IoT4loopEv+0x40>)
 23f6da4:	480a      	ldr	r0, [pc, #40]	; (23f6dd0 <_ZN3IoT4loopEv+0x44>)
 23f6da6:	f7ff ffa1 	bl	23f6cec <_ZNK5spark6Logger5errorEPKcz>
        delay(2000);
 23f6daa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23f6dae:	f003 f8d9 	bl	23f9f64 <delay>
        System.reset();
 23f6db2:	f005 f81d 	bl	23fbdf0 <_ZN11SystemClass5resetEv>
//        Log.info("Performing daily reboot");
//        delay(500);
//        System.reset();
//    }
    
    Watchdog.refresh();
 23f6db6:	f7ff ff6b 	bl	23f6c90 <_ZN8particle13WatchdogClass11getInstanceEv>
    
}
 23f6dba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Watchdog.refresh();
 23f6dbe:	f005 bde8 	b.w	23fc992 <_ZN8particle13WatchdogClass7refreshEv>
 23f6dc2:	bf00      	nop
 23f6dc4:	1007ad58 	.word	0x1007ad58
 23f6dc8:	1007aacc 	.word	0x1007aacc
 23f6dcc:	023ff2d8 	.word	0x023ff2d8
 23f6dd0:	1007ae1c 	.word	0x1007ae1c

023f6dd4 <_ZN3IoT16subscribeHandlerEPKcS1_>:
 * Particle.io Subscribe Handler
 * t:patriot m:<device>:<value>
 * This method handles commands from Particle Cloud (was Alexa)
 */
void IoT::subscribeHandler(const char *eventName, const char *rawData)
{
 23f6dd4:	b510      	push	{r4, lr}
 23f6dd6:	b090      	sub	sp, #64	; 0x40
 23f6dd8:	4604      	mov	r4, r0
    String data = String(rawData).trim();
 23f6dda:	a80c      	add	r0, sp, #48	; 0x30
 23f6ddc:	f004 fdb5 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
 23f6de0:	a80c      	add	r0, sp, #48	; 0x30
 23f6de2:	f004 ff8c 	bl	23fbcfe <_ZN6String4trimEv>
 23f6de6:	4601      	mov	r1, r0
 23f6de8:	4668      	mov	r0, sp
 23f6dea:	f004 fdfa 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f6dee:	a80c      	add	r0, sp, #48	; 0x30
 23f6df0:	f004 fd60 	bl	23fb8b4 <_ZN6StringD1Ev>
    String event(eventName);
 23f6df4:	4621      	mov	r1, r4
 23f6df6:	a804      	add	r0, sp, #16
 23f6df8:	f004 fda7 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>

class StringSumHelper : public String
{
public:
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
 23f6dfc:	491d      	ldr	r1, [pc, #116]	; (23f6e74 <_ZN3IoT16subscribeHandlerEPKcS1_+0xa0>)
 23f6dfe:	a80c      	add	r0, sp, #48	; 0x30
 23f6e00:	f004 fda3 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
    
    Log.info("Particle.io subscribe received data: '"+event+"', '"+data+"'");
 23f6e04:	a904      	add	r1, sp, #16
 23f6e06:	a80c      	add	r0, sp, #48	; 0x30
 23f6e08:	f004 fe96 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f6e0c:	491a      	ldr	r1, [pc, #104]	; (23f6e78 <_ZN3IoT16subscribeHandlerEPKcS1_+0xa4>)
 23f6e0e:	f004 fe9f 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f6e12:	4669      	mov	r1, sp
 23f6e14:	f004 fe90 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f6e18:	4918      	ldr	r1, [pc, #96]	; (23f6e7c <_ZN3IoT16subscribeHandlerEPKcS1_+0xa8>)
 23f6e1a:	f004 fe99 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f6e1e:	6801      	ldr	r1, [r0, #0]
 23f6e20:	4817      	ldr	r0, [pc, #92]	; (23f6e80 <_ZN3IoT16subscribeHandlerEPKcS1_+0xac>)
 23f6e22:	f7ff ff71 	bl	23f6d08 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f6e26:	a80c      	add	r0, sp, #48	; 0x30
 23f6e28:	f004 fd44 	bl	23fb8b4 <_ZN6StringD1Ev>
    
    _mqttManager->parsePatriotMessage(event.toLowerCase(), data.toLowerCase());
 23f6e2c:	4b15      	ldr	r3, [pc, #84]	; (23f6e84 <_ZN3IoT16subscribeHandlerEPKcS1_+0xb0>)
 23f6e2e:	a804      	add	r0, sp, #16
 23f6e30:	681c      	ldr	r4, [r3, #0]
 23f6e32:	f004 ff56 	bl	23fbce2 <_ZN6String11toLowerCaseEv>
 23f6e36:	4601      	mov	r1, r0
 23f6e38:	a808      	add	r0, sp, #32
 23f6e3a:	f004 fdd2 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f6e3e:	4668      	mov	r0, sp
 23f6e40:	f004 ff4f 	bl	23fbce2 <_ZN6String11toLowerCaseEv>
 23f6e44:	4601      	mov	r1, r0
 23f6e46:	a80c      	add	r0, sp, #48	; 0x30
 23f6e48:	f004 fdcb 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f6e4c:	aa0c      	add	r2, sp, #48	; 0x30
 23f6e4e:	a908      	add	r1, sp, #32
 23f6e50:	4620      	mov	r0, r4
 23f6e52:	f000 fd19 	bl	23f7888 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_>
 23f6e56:	a80c      	add	r0, sp, #48	; 0x30
 23f6e58:	f004 fd2c 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f6e5c:	a808      	add	r0, sp, #32
 23f6e5e:	f004 fd29 	bl	23fb8b4 <_ZN6StringD1Ev>
    String event(eventName);
 23f6e62:	a804      	add	r0, sp, #16
 23f6e64:	f004 fd26 	bl	23fb8b4 <_ZN6StringD1Ev>
    String data = String(rawData).trim();
 23f6e68:	4668      	mov	r0, sp
 23f6e6a:	f004 fd23 	bl	23fb8b4 <_ZN6StringD1Ev>
}
 23f6e6e:	b010      	add	sp, #64	; 0x40
 23f6e70:	bd10      	pop	{r4, pc}
 23f6e72:	bf00      	nop
 23f6e74:	023ff2f7 	.word	0x023ff2f7
 23f6e78:	023ff31e 	.word	0x023ff31e
 23f6e7c:	023ff321 	.word	0x023ff321
 23f6e80:	1007ae1c 	.word	0x1007ae1c
 23f6e84:	1007ad58 	.word	0x1007ad58

023f6e88 <_ZN3IoT11mqttHandlerEPcPhj>:

/**
 MQTT Subscribe Handler
 */
void IoT::mqttHandler(char* rawTopic, byte* payload, unsigned int length)
{
 23f6e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    char p[length + 1];
 23f6e8a:	f102 0308 	add.w	r3, r2, #8
{
 23f6e8e:	b099      	sub	sp, #100	; 0x64
    char p[length + 1];
 23f6e90:	f023 0307 	bic.w	r3, r3, #7

    if(topic.startsWith("log")) {
        return;
    }
    _mqttManager->parseMQTTMessage(lcTopic, lcMessage);
    Device::mqttAll(lcTopic, lcMessage);
 23f6e94:	466e      	mov	r6, sp
{
 23f6e96:	af00      	add	r7, sp, #0
    char p[length + 1];
 23f6e98:	ebad 0d03 	sub.w	sp, sp, r3
{
 23f6e9c:	4605      	mov	r5, r0
    memcpy(p, payload, length);
 23f6e9e:	4668      	mov	r0, sp
{
 23f6ea0:	4614      	mov	r4, r2
    memcpy(p, payload, length);
 23f6ea2:	f006 f991 	bl	23fd1c8 <memcpy>
    p[length] = 0;
 23f6ea6:	2300      	movs	r3, #0
    String message(p);
 23f6ea8:	4669      	mov	r1, sp
    p[length] = 0;
 23f6eaa:	f80d 3004 	strb.w	r3, [sp, r4]
    String message(p);
 23f6eae:	4638      	mov	r0, r7
 23f6eb0:	f004 fd4b 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
    String lcMessage = message.toLowerCase();
 23f6eb4:	4638      	mov	r0, r7
 23f6eb6:	f004 ff14 	bl	23fbce2 <_ZN6String11toLowerCaseEv>
 23f6eba:	4601      	mov	r1, r0
 23f6ebc:	f107 0010 	add.w	r0, r7, #16
 23f6ec0:	f004 fd8f 	bl	23fb9e2 <_ZN6StringC1ERKS_>
    String topic(rawTopic);
 23f6ec4:	4629      	mov	r1, r5
 23f6ec6:	f107 0020 	add.w	r0, r7, #32
 23f6eca:	f004 fd3e 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
    String lcTopic = topic.toLowerCase();
 23f6ece:	f107 0020 	add.w	r0, r7, #32
 23f6ed2:	f004 ff06 	bl	23fbce2 <_ZN6String11toLowerCaseEv>
 23f6ed6:	4601      	mov	r1, r0
 23f6ed8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 23f6edc:	f004 fd81 	bl	23fb9e2 <_ZN6StringC1ERKS_>
    if(topic.startsWith("log")) {
 23f6ee0:	492d      	ldr	r1, [pc, #180]	; (23f6f98 <_ZN3IoT11mqttHandlerEPcPhj+0x110>)
 23f6ee2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 23f6ee6:	f004 fd30 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
 23f6eea:	f107 0150 	add.w	r1, r7, #80	; 0x50
 23f6eee:	f107 0020 	add.w	r0, r7, #32
 23f6ef2:	f004 fea7 	bl	23fbc44 <_ZNK6String10startsWithERKS_>
 23f6ef6:	4604      	mov	r4, r0
 23f6ef8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 23f6efc:	f004 fcda 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f6f00:	b194      	cbz	r4, 23f6f28 <_ZN3IoT11mqttHandlerEPcPhj+0xa0>
    String lcTopic = topic.toLowerCase();
 23f6f02:	f107 0030 	add.w	r0, r7, #48	; 0x30
 23f6f06:	f004 fcd5 	bl	23fb8b4 <_ZN6StringD1Ev>
    String topic(rawTopic);
 23f6f0a:	f107 0020 	add.w	r0, r7, #32
 23f6f0e:	f004 fcd1 	bl	23fb8b4 <_ZN6StringD1Ev>
    String lcMessage = message.toLowerCase();
 23f6f12:	f107 0010 	add.w	r0, r7, #16
 23f6f16:	f004 fccd 	bl	23fb8b4 <_ZN6StringD1Ev>
    String message(p);
 23f6f1a:	4638      	mov	r0, r7
 23f6f1c:	f004 fcca 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f6f20:	46b5      	mov	sp, r6
}
 23f6f22:	3764      	adds	r7, #100	; 0x64
 23f6f24:	46bd      	mov	sp, r7
 23f6f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _mqttManager->parseMQTTMessage(lcTopic, lcMessage);
 23f6f28:	4b1c      	ldr	r3, [pc, #112]	; (23f6f9c <_ZN3IoT11mqttHandlerEPcPhj+0x114>)
 23f6f2a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 23f6f2e:	681c      	ldr	r4, [r3, #0]
 23f6f30:	f107 0040 	add.w	r0, r7, #64	; 0x40
 23f6f34:	f004 fd55 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f6f38:	f107 0110 	add.w	r1, r7, #16
 23f6f3c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 23f6f40:	f004 fd4f 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f6f44:	f107 0250 	add.w	r2, r7, #80	; 0x50
 23f6f48:	f107 0140 	add.w	r1, r7, #64	; 0x40
 23f6f4c:	4620      	mov	r0, r4
 23f6f4e:	f000 ffe7 	bl	23f7f20 <_ZN11MQTTManager16parseMQTTMessageE6StringS0_>
 23f6f52:	f107 0050 	add.w	r0, r7, #80	; 0x50
 23f6f56:	f004 fcad 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f6f5a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 23f6f5e:	f004 fca9 	bl	23fb8b4 <_ZN6StringD1Ev>
    Device::mqttAll(lcTopic, lcMessage);
 23f6f62:	f107 0130 	add.w	r1, r7, #48	; 0x30
 23f6f66:	f107 0040 	add.w	r0, r7, #64	; 0x40
 23f6f6a:	f004 fd3a 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f6f6e:	f107 0110 	add.w	r1, r7, #16
 23f6f72:	f107 0050 	add.w	r0, r7, #80	; 0x50
 23f6f76:	f004 fd34 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f6f7a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 23f6f7e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 23f6f82:	f001 fc97 	bl	23f88b4 <_ZN6Device7mqttAllE6StringS0_>
 23f6f86:	f107 0050 	add.w	r0, r7, #80	; 0x50
 23f6f8a:	f004 fc93 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f6f8e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 23f6f92:	f004 fc8f 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f6f96:	e7b4      	b.n	23f6f02 <_ZN3IoT11mqttHandlerEPcPhj+0x7a>
 23f6f98:	023ff323 	.word	0x023ff323
 23f6f9c:	1007ad58 	.word	0x1007ad58

023f6fa0 <_ZN3IoT11publishMQTTE6StringS0_b>:

/**
 * Publish an MQTT message
 */
void IoT::publishMQTT(String subtopic, String message, bool retain)
{
 23f6fa0:	b570      	push	{r4, r5, r6, lr}
 23f6fa2:	4605      	mov	r5, r0
 23f6fa4:	b08e      	sub	sp, #56	; 0x38
 23f6fa6:	9201      	str	r2, [sp, #4]
    _mqttManager->publish(kPublishName+"/"+subtopic, message, retain);
 23f6fa8:	4a13      	ldr	r2, [pc, #76]	; (23f6ff8 <_ZN3IoT11publishMQTTE6StringS0_b+0x58>)
{
 23f6faa:	460c      	mov	r4, r1
    StringSumHelper(const String &s) : String(s) {}
 23f6fac:	a802      	add	r0, sp, #8
 23f6fae:	4913      	ldr	r1, [pc, #76]	; (23f6ffc <_ZN3IoT11publishMQTTE6StringS0_b+0x5c>)
    _mqttManager->publish(kPublishName+"/"+subtopic, message, retain);
 23f6fb0:	6816      	ldr	r6, [r2, #0]
 23f6fb2:	f004 fd16 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f6fb6:	4912      	ldr	r1, [pc, #72]	; (23f7000 <_ZN3IoT11publishMQTTE6StringS0_b+0x60>)
 23f6fb8:	a802      	add	r0, sp, #8
 23f6fba:	f004 fdc9 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f6fbe:	4629      	mov	r1, r5
 23f6fc0:	f004 fdba 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f6fc4:	4601      	mov	r1, r0
 23f6fc6:	a806      	add	r0, sp, #24
 23f6fc8:	f004 fd0b 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f6fcc:	4621      	mov	r1, r4
 23f6fce:	a80a      	add	r0, sp, #40	; 0x28
 23f6fd0:	f004 fd07 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f6fd4:	9b01      	ldr	r3, [sp, #4]
 23f6fd6:	aa0a      	add	r2, sp, #40	; 0x28
 23f6fd8:	a906      	add	r1, sp, #24
 23f6fda:	4630      	mov	r0, r6
 23f6fdc:	f000 fb56 	bl	23f768c <_ZN11MQTTManager7publishE6StringS0_b>
 23f6fe0:	a80a      	add	r0, sp, #40	; 0x28
 23f6fe2:	f004 fc67 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f6fe6:	a806      	add	r0, sp, #24
 23f6fe8:	f004 fc64 	bl	23fb8b4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f6fec:	a802      	add	r0, sp, #8
 23f6fee:	f004 fc61 	bl	23fb8b4 <_ZN6StringD1Ev>
}
 23f6ff2:	b00e      	add	sp, #56	; 0x38
 23f6ff4:	bd70      	pop	{r4, r5, r6, pc}
 23f6ff6:	bf00      	nop
 23f6ff8:	1007ad58 	.word	0x1007ad58
 23f6ffc:	1007ad08 	.word	0x1007ad08
 23f7000:	023ff77e 	.word	0x023ff77e

023f7004 <_ZN3IoT10setLatLongEff>:

// LATITUDE/LONGITUDE
//
void IoT::setLatLong(float latitude, float longitude) {
    // Currently only PartOfDay cares about (and persists) this.
    Device::setAllLatLong(latitude, longitude);
 23f7004:	f001 bc36 	b.w	23f8874 <_ZN6Device13setAllLatLongEff>

023f7008 <_ZN3IoT11setTimezoneEi>:
}

// TIMEZONE
//
void IoT::setTimezone(int timezone) {
 23f7008:	b510      	push	{r4, lr}
 23f700a:	4604      	mov	r4, r0
 23f700c:	b088      	sub	sp, #32
    StringSumHelper(const char *p) : String(p) {}
 23f700e:	4914      	ldr	r1, [pc, #80]	; (23f7060 <_ZN3IoT11setTimezoneEi+0x58>)
 23f7010:	a804      	add	r0, sp, #16
 23f7012:	f004 fc9a 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
    Log.trace("setTimezone: "+String(timezone));
 23f7016:	220a      	movs	r2, #10
 23f7018:	4621      	mov	r1, r4
 23f701a:	4668      	mov	r0, sp
 23f701c:	f004 fd17 	bl	23fba4e <_ZN6StringC1Eih>
 23f7020:	4669      	mov	r1, sp
 23f7022:	a804      	add	r0, sp, #16
 23f7024:	f004 fd88 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f7028:	6801      	ldr	r1, [r0, #0]
 23f702a:	480e      	ldr	r0, [pc, #56]	; (23f7064 <_ZN3IoT11setTimezoneEi+0x5c>)
 23f702c:	f7ff fe7a 	bl	23f6d24 <_ZNK5spark6Logger5traceEPKcz>
 23f7030:	4668      	mov	r0, sp
 23f7032:	f004 fc3f 	bl	23fb8b4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f7036:	a804      	add	r0, sp, #16
 23f7038:	f004 fc3c 	bl	23fb8b4 <_ZN6StringD1Ev>
    int8_t tz = timezone;
    Time.zone(float(timezone));
 23f703c:	ee07 4a90 	vmov	s15, r4
 23f7040:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    int8_t tz = timezone;
 23f7044:	f88d 4010 	strb.w	r4, [sp, #16]
    Time.zone(float(timezone));
 23f7048:	f005 fa40 	bl	23fc4cc <_ZN9TimeClass4zoneEf>
    // Persist this value across reboots
    EEPROM.put(TIMEZONE_ADDR, tz);
 23f704c:	f005 fe40 	bl	23fccd0 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 23f7050:	2201      	movs	r2, #1
 23f7052:	a904      	add	r1, sp, #16
 23f7054:	4610      	mov	r0, r2
 23f7056:	f002 fa29 	bl	23f94ac <HAL_EEPROM_Put>
}
 23f705a:	b008      	add	sp, #32
 23f705c:	bd10      	pop	{r4, pc}
 23f705e:	bf00      	nop
 23f7060:	023ff327 	.word	0x023ff327
 23f7064:	1007ae1c 	.word	0x1007ae1c

023f7068 <_ZN3IoT14handleDSTMarchEv>:
    } else if(month == 11) {
        handleDSTNovember();
    }
}

void IoT::handleDSTMarch() {
 23f7068:	b538      	push	{r3, r4, r5, lr}
    int weekday = Time.weekday();
 23f706a:	f005 fb89 	bl	23fc780 <_ZN9TimeClass7weekdayEv>
 23f706e:	4605      	mov	r5, r0
    int day = Time.day();
 23f7070:	f005 fb7a 	bl	23fc768 <_ZN9TimeClass3dayEv>
 23f7074:	4604      	mov	r4, r0
    int hour = Time.hour();
 23f7076:	f005 fb6b 	bl	23fc750 <_ZN9TimeClass4hourEv>

    if(day <= 7) return;
 23f707a:	2c07      	cmp	r4, #7
 23f707c:	dd1f      	ble.n	23f70be <_ZN3IoT14handleDSTMarchEv+0x56>

    switch(weekday) {
 23f707e:	1e6b      	subs	r3, r5, #1
 23f7080:	2b05      	cmp	r3, #5
 23f7082:	d81a      	bhi.n	23f70ba <_ZN3IoT14handleDSTMarchEv+0x52>
 23f7084:	e8df f003 	tbb	[pc, r3]
 23f7088:	13110f03 	.word	0x13110f03
 23f708c:	1715      	.short	0x1715
        case 1:     // Sunday
            if(day == 8 && hour < 2) return;
 23f708e:	2c08      	cmp	r4, #8
 23f7090:	d101      	bne.n	23f7096 <_ZN3IoT14handleDSTMarchEv+0x2e>
 23f7092:	2801      	cmp	r0, #1
            if(day < 12) return;
        case 6:
            if(day < 13) return;
        case 7:     // Saturday
        default:
            if(day < 14) return;
 23f7094:	dd13      	ble.n	23f70be <_ZN3IoT14handleDSTMarchEv+0x56>
    }
    Log.trace("Begin DST");
 23f7096:	490a      	ldr	r1, [pc, #40]	; (23f70c0 <_ZN3IoT14handleDSTMarchEv+0x58>)
 23f7098:	480a      	ldr	r0, [pc, #40]	; (23f70c4 <_ZN3IoT14handleDSTMarchEv+0x5c>)
 23f709a:	f7ff fe43 	bl	23f6d24 <_ZNK5spark6Logger5traceEPKcz>
    Time.beginDST();
}
 23f709e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Time.beginDST();
 23f70a2:	f005 ba33 	b.w	23fc50c <_ZN9TimeClass8beginDSTEv>
            if(day < 9) return;
 23f70a6:	2c08      	cmp	r4, #8
 23f70a8:	d009      	beq.n	23f70be <_ZN3IoT14handleDSTMarchEv+0x56>
            if(day < 10) return;
 23f70aa:	2c09      	cmp	r4, #9
 23f70ac:	dd07      	ble.n	23f70be <_ZN3IoT14handleDSTMarchEv+0x56>
            if(day < 11) return;
 23f70ae:	2c0a      	cmp	r4, #10
 23f70b0:	dd05      	ble.n	23f70be <_ZN3IoT14handleDSTMarchEv+0x56>
            if(day < 12) return;
 23f70b2:	2c0b      	cmp	r4, #11
 23f70b4:	dd03      	ble.n	23f70be <_ZN3IoT14handleDSTMarchEv+0x56>
            if(day < 13) return;
 23f70b6:	2c0c      	cmp	r4, #12
 23f70b8:	dd01      	ble.n	23f70be <_ZN3IoT14handleDSTMarchEv+0x56>
            if(day < 14) return;
 23f70ba:	2c0d      	cmp	r4, #13
 23f70bc:	e7ea      	b.n	23f7094 <_ZN3IoT14handleDSTMarchEv+0x2c>
}
 23f70be:	bd38      	pop	{r3, r4, r5, pc}
 23f70c0:	023ff335 	.word	0x023ff335
 23f70c4:	1007ae1c 	.word	0x1007ae1c

023f70c8 <_ZN3IoT17handleDSTNovemberEv>:

void IoT::handleDSTNovember() {
 23f70c8:	b538      	push	{r3, r4, r5, lr}
    int weekday = Time.weekday();
 23f70ca:	f005 fb59 	bl	23fc780 <_ZN9TimeClass7weekdayEv>
 23f70ce:	4605      	mov	r5, r0
    int day = Time.day();
 23f70d0:	f005 fb4a 	bl	23fc768 <_ZN9TimeClass3dayEv>
 23f70d4:	4604      	mov	r4, r0
    int hour = Time.hour();
 23f70d6:	f005 fb3b 	bl	23fc750 <_ZN9TimeClass4hourEv>

    if(day > 7) return;
 23f70da:	2c07      	cmp	r4, #7
 23f70dc:	dc0b      	bgt.n	23f70f6 <_ZN3IoT17handleDSTNovemberEv+0x2e>

    switch(weekday) {
 23f70de:	1e6b      	subs	r3, r5, #1
 23f70e0:	2b05      	cmp	r3, #5
 23f70e2:	d813      	bhi.n	23f710c <_ZN3IoT17handleDSTNovemberEv+0x44>
 23f70e4:	e8df f003 	tbb	[pc, r3]
 23f70e8:	0c0a0803 	.word	0x0c0a0803
 23f70ec:	100e      	.short	0x100e
        case 1:     // Sunday
            if(day == 1 && hour >= 2) return;
 23f70ee:	2c01      	cmp	r4, #1
 23f70f0:	d10c      	bne.n	23f710c <_ZN3IoT17handleDSTNovemberEv+0x44>
 23f70f2:	2801      	cmp	r0, #1
            break;
        case 4:
            if(day > 4) return;
            break;
        case 5:
            if(day > 5) return;
 23f70f4:	dd0a      	ble.n	23f710c <_ZN3IoT17handleDSTNovemberEv+0x44>
        default:
            if(day > 7) return;
    }
    Log.trace("Begin DST");
    Time.beginDST();
}
 23f70f6:	bd38      	pop	{r3, r4, r5, pc}
            if(day > 2) return;
 23f70f8:	2c02      	cmp	r4, #2
 23f70fa:	e7fb      	b.n	23f70f4 <_ZN3IoT17handleDSTNovemberEv+0x2c>
            if(day > 3) return;
 23f70fc:	2c03      	cmp	r4, #3
 23f70fe:	e7f9      	b.n	23f70f4 <_ZN3IoT17handleDSTNovemberEv+0x2c>
            if(day > 4) return;
 23f7100:	2c04      	cmp	r4, #4
 23f7102:	e7f7      	b.n	23f70f4 <_ZN3IoT17handleDSTNovemberEv+0x2c>
            if(day > 5) return;
 23f7104:	2c05      	cmp	r4, #5
 23f7106:	e7f5      	b.n	23f70f4 <_ZN3IoT17handleDSTNovemberEv+0x2c>
            if(day > 6) return;
 23f7108:	2c07      	cmp	r4, #7
 23f710a:	d0f4      	beq.n	23f70f6 <_ZN3IoT17handleDSTNovemberEv+0x2e>
    Log.trace("Begin DST");
 23f710c:	4903      	ldr	r1, [pc, #12]	; (23f711c <_ZN3IoT17handleDSTNovemberEv+0x54>)
 23f710e:	4804      	ldr	r0, [pc, #16]	; (23f7120 <_ZN3IoT17handleDSTNovemberEv+0x58>)
 23f7110:	f7ff fe08 	bl	23f6d24 <_ZNK5spark6Logger5traceEPKcz>
}
 23f7114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Time.beginDST();
 23f7118:	f005 b9f8 	b.w	23fc50c <_ZN9TimeClass8beginDSTEv>
 23f711c:	023ff335 	.word	0x023ff335
 23f7120:	1007ae1c 	.word	0x1007ae1c

023f7124 <_ZN3IoT21handleDaylightSavingsEv>:
void IoT::handleDaylightSavings() {
 23f7124:	b500      	push	{lr}
 23f7126:	b08b      	sub	sp, #44	; 0x2c
    EEPROM.get(TIMEZONE_ADDR, timezone);    // Photon2 uses a file on the Flash file system
 23f7128:	f005 fdd2 	bl	23fccd0 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23f712c:	2201      	movs	r2, #1
 23f712e:	f10d 0107 	add.w	r1, sp, #7
 23f7132:	4610      	mov	r0, r2
 23f7134:	f002 f9ac 	bl	23f9490 <HAL_EEPROM_Get>
    StringSumHelper(const char *p) : String(p) {}
 23f7138:	4919      	ldr	r1, [pc, #100]	; (23f71a0 <_ZN3IoT21handleDaylightSavingsEv+0x7c>)
 23f713a:	a806      	add	r0, sp, #24
 23f713c:	f004 fc05 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
    Log.trace("Setting timezone to "+String(timezone));
 23f7140:	220a      	movs	r2, #10
 23f7142:	f99d 1007 	ldrsb.w	r1, [sp, #7]
 23f7146:	a802      	add	r0, sp, #8
 23f7148:	f004 fc81 	bl	23fba4e <_ZN6StringC1Eih>
 23f714c:	a902      	add	r1, sp, #8
 23f714e:	a806      	add	r0, sp, #24
 23f7150:	f004 fcf2 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f7154:	6801      	ldr	r1, [r0, #0]
 23f7156:	4813      	ldr	r0, [pc, #76]	; (23f71a4 <_ZN3IoT21handleDaylightSavingsEv+0x80>)
 23f7158:	f7ff fde4 	bl	23f6d24 <_ZNK5spark6Logger5traceEPKcz>
 23f715c:	a802      	add	r0, sp, #8
 23f715e:	f004 fba9 	bl	23fb8b4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f7162:	a806      	add	r0, sp, #24
 23f7164:	f004 fba6 	bl	23fb8b4 <_ZN6StringD1Ev>
    Time.zone(float(timezone));
 23f7168:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 23f716c:	ee00 3a10 	vmov	s0, r3
 23f7170:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 23f7174:	f005 f9aa 	bl	23fc4cc <_ZN9TimeClass4zoneEf>
    int month = Time.month();
 23f7178:	f005 fb0a 	bl	23fc790 <_ZN9TimeClass5monthEv>
    if(month > 3 && month < 11) {
 23f717c:	1f03      	subs	r3, r0, #4
 23f717e:	2b06      	cmp	r3, #6
 23f7180:	d804      	bhi.n	23f718c <_ZN3IoT21handleDaylightSavingsEv+0x68>
        Time.beginDST();
 23f7182:	f005 f9c3 	bl	23fc50c <_ZN9TimeClass8beginDSTEv>
}
 23f7186:	b00b      	add	sp, #44	; 0x2c
 23f7188:	f85d fb04 	ldr.w	pc, [sp], #4
    } else if(month == 3) {
 23f718c:	2803      	cmp	r0, #3
 23f718e:	d102      	bne.n	23f7196 <_ZN3IoT21handleDaylightSavingsEv+0x72>
        handleDSTMarch();
 23f7190:	f7ff ff6a 	bl	23f7068 <_ZN3IoT14handleDSTMarchEv>
 23f7194:	e7f7      	b.n	23f7186 <_ZN3IoT21handleDaylightSavingsEv+0x62>
    } else if(month == 11) {
 23f7196:	280b      	cmp	r0, #11
 23f7198:	d1f5      	bne.n	23f7186 <_ZN3IoT21handleDaylightSavingsEv+0x62>
        handleDSTNovember();
 23f719a:	f7ff ff95 	bl	23f70c8 <_ZN3IoT17handleDSTNovemberEv>
}
 23f719e:	e7f2      	b.n	23f7186 <_ZN3IoT21handleDaylightSavingsEv+0x62>
 23f71a0:	023ff33f 	.word	0x023ff33f
 23f71a4:	1007ae1c 	.word	0x1007ae1c

023f71a8 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 23f71a8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f71aa:	2300      	movs	r3, #0
 23f71ac:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23f71ae:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23f71b0:	4604      	mov	r4, r0
 23f71b2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23f71b4:	b12b      	cbz	r3, 23f71c2 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f71b6:	2202      	movs	r2, #2
 23f71b8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f71ba:	68eb      	ldr	r3, [r5, #12]
 23f71bc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f71be:	68ab      	ldr	r3, [r5, #8]
 23f71c0:	60a3      	str	r3, [r4, #8]
    }
 23f71c2:	4620      	mov	r0, r4
 23f71c4:	bd38      	pop	{r3, r4, r5, pc}
	...

023f71c8 <_ZN3IoT5beginE6StringS0_b>:
{
 23f71c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f71cc:	f04f 0a00 	mov.w	sl, #0
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23f71d0:	4b47      	ldr	r3, [pc, #284]	; (23f72f0 <_ZN3IoT5beginE6StringS0_b+0x128>)
 23f71d2:	b098      	sub	sp, #96	; 0x60
 23f71d4:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23f71d6:	4b47      	ldr	r3, [pc, #284]	; (23f72f4 <_ZN3IoT5beginE6StringS0_b+0x12c>)
 23f71d8:	4680      	mov	r8, r0
 23f71da:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 23f71dc:	4b46      	ldr	r3, [pc, #280]	; (23f72f8 <_ZN3IoT5beginE6StringS0_b+0x130>)
 23f71de:	4689      	mov	r9, r1
        };
 23f71e0:	a808      	add	r0, sp, #32
 23f71e2:	a904      	add	r1, sp, #16
 23f71e4:	4617      	mov	r7, r2
 23f71e6:	9306      	str	r3, [sp, #24]
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f71e8:	ad10      	add	r5, sp, #64	; 0x40
        };
 23f71ea:	f7ff ffdd 	bl	23f71a8 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f71ee:	a908      	add	r1, sp, #32
 23f71f0:	a80c      	add	r0, sp, #48	; 0x30
 23f71f2:	f7ff ffd9 	bl	23f71a8 <_ZNSt8functionIFvyiEEC1ERKS1_>
 23f71f6:	a90c      	add	r1, sp, #48	; 0x30
 23f71f8:	4628      	mov	r0, r5
 23f71fa:	f7ff ffd5 	bl	23f71a8 <_ZNSt8functionIFvyiEEC1ERKS1_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f71fe:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 23f7200:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f7204:	f7ff fb83 	bl	23f690e <_Znwj>
 23f7208:	4604      	mov	r4, r0
 23f720a:	b1a0      	cbz	r0, 23f7236 <_ZN3IoT5beginE6StringS0_b+0x6e>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f720c:	e895 0003 	ldmia.w	r5, {r0, r1}
 23f7210:	ae01      	add	r6, sp, #4
 23f7212:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f7216:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f721a:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f721e:	e896 0003 	ldmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7222:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
 23f7224:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7226:	60a3      	str	r3, [r4, #8]
 23f7228:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f722c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 23f722e:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 23f7232:	9213      	str	r2, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
 23f7234:	60e3      	str	r3, [r4, #12]
        SystemEventContext context = {};
 23f7236:	2600      	movs	r6, #0
	    _M_invoker = &_My_handler::_M_invoke;
 23f7238:	4b30      	ldr	r3, [pc, #192]	; (23f72fc <_ZN3IoT5beginE6StringS0_b+0x134>)
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
 23f723a:	2010      	movs	r0, #16
 23f723c:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
 23f723e:	4b30      	ldr	r3, [pc, #192]	; (23f7300 <_ZN3IoT5beginE6StringS0_b+0x138>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f7240:	9414      	str	r4, [sp, #80]	; 0x50
	    _M_manager = &_My_handler::_M_manager;
 23f7242:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
 23f7244:	4b2f      	ldr	r3, [pc, #188]	; (23f7304 <_ZN3IoT5beginE6StringS0_b+0x13c>)
 23f7246:	9603      	str	r6, [sp, #12]
 23f7248:	e9cd 3601 	strd	r3, r6, [sp, #4]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
 23f724c:	f7ff fb5f 	bl	23f690e <_Znwj>
 23f7250:	4604      	mov	r4, r0
 23f7252:	b1d8      	cbz	r0, 23f728c <_ZN3IoT5beginE6StringS0_b+0xc4>
    bool _M_empty() const { return !_M_manager; }
 23f7254:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
 23f7256:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
 23f7258:	b133      	cbz	r3, 23f7268 <_ZN3IoT5beginE6StringS0_b+0xa0>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f725a:	2202      	movs	r2, #2
 23f725c:	a914      	add	r1, sp, #80	; 0x50
 23f725e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f7260:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23f7262:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f7264:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23f7266:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
 23f7268:	4b27      	ldr	r3, [pc, #156]	; (23f7308 <_ZN3IoT5beginE6StringS0_b+0x140>)
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f726a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
        context.destructor = [](void* callable) -> void {
 23f726e:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f7270:	2100      	movs	r1, #0
 23f7272:	4a26      	ldr	r2, [pc, #152]	; (23f730c <_ZN3IoT5beginE6StringS0_b+0x144>)
 23f7274:	ab01      	add	r3, sp, #4
        context.callable = wrapper;
 23f7276:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f7278:	f002 fc36 	bl	23f9ae8 <system_subscribe_event>
        if (r) {
 23f727c:	b130      	cbz	r0, 23f728c <_ZN3IoT5beginE6StringS0_b+0xc4>
    class function<_Res(_ArgTypes...)>
 23f727e:	4620      	mov	r0, r4
 23f7280:	f7ff fce8 	bl	23f6c54 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
 23f7284:	2110      	movs	r1, #16
 23f7286:	4620      	mov	r0, r4
 23f7288:	f7ff fb47 	bl	23f691a <_ZdlPvj>
 23f728c:	a814      	add	r0, sp, #80	; 0x50
 23f728e:	f7ff fce1 	bl	23f6c54 <_ZNSt14_Function_baseD1Ev>
 23f7292:	4628      	mov	r0, r5
 23f7294:	f7ff fcde 	bl	23f6c54 <_ZNSt14_Function_baseD1Ev>
 23f7298:	a80c      	add	r0, sp, #48	; 0x30
 23f729a:	f7ff fcdb 	bl	23f6c54 <_ZNSt14_Function_baseD1Ev>
 23f729e:	a808      	add	r0, sp, #32
 23f72a0:	f7ff fcd8 	bl	23f6c54 <_ZNSt14_Function_baseD1Ev>
 23f72a4:	a804      	add	r0, sp, #16
 23f72a6:	f7ff fcd5 	bl	23f6c54 <_ZNSt14_Function_baseD1Ev>
    handleDaylightSavings();    // Set isDST appropriately
 23f72aa:	f7ff ff3b 	bl	23f7124 <_ZN3IoT21handleDaylightSavingsEv>
    Device::expose();
 23f72ae:	f001 fb27 	bl	23f8900 <_ZN6Device6exposeEv>
    startWatchdog();
 23f72b2:	f7ff fd45 	bl	23f6d40 <_ZN3IoT13startWatchdogEv>
    _mqttManager = new MQTTManager(brokerIP, controllerName, mqttLogging);
 23f72b6:	4641      	mov	r1, r8
 23f72b8:	4628      	mov	r0, r5
 23f72ba:	f004 fb92 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f72be:	4649      	mov	r1, r9
 23f72c0:	a814      	add	r0, sp, #80	; 0x50
 23f72c2:	f004 fb8e 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f72c6:	2068      	movs	r0, #104	; 0x68
 23f72c8:	f7ff fb21 	bl	23f690e <_Znwj>
 23f72cc:	4604      	mov	r4, r0
 23f72ce:	b120      	cbz	r0, 23f72da <_ZN3IoT5beginE6StringS0_b+0x112>
 23f72d0:	463b      	mov	r3, r7
 23f72d2:	4629      	mov	r1, r5
 23f72d4:	aa14      	add	r2, sp, #80	; 0x50
 23f72d6:	f000 f8ef 	bl	23f74b8 <_ZN11MQTTManagerC1E6StringS0_b>
 23f72da:	4b0d      	ldr	r3, [pc, #52]	; (23f7310 <_ZN3IoT5beginE6StringS0_b+0x148>)
 23f72dc:	a814      	add	r0, sp, #80	; 0x50
 23f72de:	601c      	str	r4, [r3, #0]
 23f72e0:	f004 fae8 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f72e4:	4628      	mov	r0, r5
 23f72e6:	f004 fae5 	bl	23fb8b4 <_ZN6StringD1Ev>
}
 23f72ea:	b018      	add	sp, #96	; 0x60
 23f72ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f72f0:	023f6bdd 	.word	0x023f6bdd
 23f72f4:	023f6c4b 	.word	0x023f6c4b
 23f72f8:	023f6c37 	.word	0x023f6c37
 23f72fc:	023f6c11 	.word	0x023f6c11
 23f7300:	023f7315 	.word	0x023f7315
 23f7304:	000c0002 	.word	0x000c0002
 23f7308:	023f6c67 	.word	0x023f6c67
 23f730c:	023f6be9 	.word	0x023f6be9
 23f7310:	1007ad58 	.word	0x1007ad58

023f7314 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
 23f7314:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23f7316:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f7318:	4604      	mov	r4, r0
	switch (__op)
 23f731a:	d104      	bne.n	23f7326 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
 23f731c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f731e:	6003      	str	r3, [r0, #0]
      }
 23f7320:	2000      	movs	r0, #0
 23f7322:	b003      	add	sp, #12
 23f7324:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
 23f7326:	2a02      	cmp	r2, #2
 23f7328:	d00c      	beq.n	23f7344 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
 23f732a:	2a03      	cmp	r2, #3
 23f732c:	d1f8      	bne.n	23f7320 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23f732e:	6804      	ldr	r4, [r0, #0]
 23f7330:	2c00      	cmp	r4, #0
 23f7332:	d0f5      	beq.n	23f7320 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23f7334:	4620      	mov	r0, r4
 23f7336:	f7ff fc8d 	bl	23f6c54 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23f733a:	2110      	movs	r1, #16
 23f733c:	4620      	mov	r0, r4
 23f733e:	f7ff faec 	bl	23f691a <_ZdlPvj>
 23f7342:	e7ed      	b.n	23f7320 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
 23f7344:	6809      	ldr	r1, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f7346:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 23f7348:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f734a:	f7ff fae0 	bl	23f690e <_Znwj>
 23f734e:	4605      	mov	r5, r0
 23f7350:	b110      	cbz	r0, 23f7358 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f7352:	9901      	ldr	r1, [sp, #4]
 23f7354:	f7ff ff28 	bl	23f71a8 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
 23f7358:	6025      	str	r5, [r4, #0]
	}
 23f735a:	e7e1      	b.n	23f7320 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

023f735c <_GLOBAL__sub_I__ZN6Device8_devicesE>:
}
 23f735c:	b508      	push	{r3, lr}
#define TIMEZONE_ADDR 1     // 1 byte signed, -127 to +128 offset from GMT
#define LATITUDE_ADDR 4     // 4 byte float
#define LONGITUDE_ADDR 8    // 4 byte float

static const int    kMaxVariableStringLength   = 864; // was 622 < v3.0.0
static const String kDevicesVariableName       = "Devices";
 23f735e:	490b      	ldr	r1, [pc, #44]	; (23f738c <_GLOBAL__sub_I__ZN6Device8_devicesE+0x30>)
 23f7360:	480b      	ldr	r0, [pc, #44]	; (23f7390 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x34>)
 23f7362:	f004 faf2 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
static const String kChecklistVariableName     = "Checklist";
 23f7366:	490b      	ldr	r1, [pc, #44]	; (23f7394 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x38>)
 23f7368:	480b      	ldr	r0, [pc, #44]	; (23f7398 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x3c>)
 23f736a:	f004 faee 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
static const String kStatusVariableName        = "Status";
 23f736e:	490b      	ldr	r1, [pc, #44]	; (23f739c <_GLOBAL__sub_I__ZN6Device8_devicesE+0x40>)
 23f7370:	480b      	ldr	r0, [pc, #44]	; (23f73a0 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x44>)
 23f7372:	f004 faea 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
static const String kPublishName               = "patriot";
 23f7376:	490b      	ldr	r1, [pc, #44]	; (23f73a4 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x48>)
 23f7378:	480b      	ldr	r0, [pc, #44]	; (23f73a8 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x4c>)
 23f737a:	f004 fae6 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
 23f737e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
static const String kSSIDFunctionName          = "setSSID";
 23f7382:	490a      	ldr	r1, [pc, #40]	; (23f73ac <_GLOBAL__sub_I__ZN6Device8_devicesE+0x50>)
 23f7384:	480a      	ldr	r0, [pc, #40]	; (23f73b0 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x54>)
 23f7386:	f004 bae0 	b.w	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
 23f738a:	bf00      	nop
 23f738c:	023ff354 	.word	0x023ff354
 23f7390:	1007ad38 	.word	0x1007ad38
 23f7394:	023ff35c 	.word	0x023ff35c
 23f7398:	1007ad48 	.word	0x1007ad48
 23f739c:	023ff366 	.word	0x023ff366
 23f73a0:	1007ad28 	.word	0x1007ad28
 23f73a4:	023ff36d 	.word	0x023ff36d
 23f73a8:	1007ad08 	.word	0x1007ad08
 23f73ac:	023ff375 	.word	0x023ff375
 23f73b0:	1007ad18 	.word	0x1007ad18

023f73b4 <_ZN11MQTTManagerD1Ev>:
 */
#pragma once
#include "Particle.h"
#include "MQTT.h"

class MQTTManager : public LogHandler
 23f73b4:	b510      	push	{r4, lr}
 23f73b6:	4604      	mov	r4, r0
 23f73b8:	4b06      	ldr	r3, [pc, #24]	; (23f73d4 <_ZN11MQTTManagerD1Ev+0x20>)
 23f73ba:	f840 3b28 	str.w	r3, [r0], #40
 23f73be:	f004 fa79 	bl	23fb8b4 <_ZN6StringD1Ev>
    virtual ~LogHandler() = default;
 23f73c2:	4620      	mov	r0, r4
 23f73c4:	4b04      	ldr	r3, [pc, #16]	; (23f73d8 <_ZN11MQTTManagerD1Ev+0x24>)
 23f73c6:	f840 3b04 	str.w	r3, [r0], #4
 23f73ca:	f003 fb8f 	bl	23faaec <_ZN5spark6detail9LogFilterD1Ev>
 23f73ce:	4620      	mov	r0, r4
 23f73d0:	bd10      	pop	{r4, pc}
 23f73d2:	bf00      	nop
 23f73d4:	023ff608 	.word	0x023ff608
 23f73d8:	023ff2b0 	.word	0x023ff2b0

023f73dc <_ZN11MQTTManagerD0Ev>:
 23f73dc:	b510      	push	{r4, lr}
 23f73de:	4604      	mov	r4, r0
 23f73e0:	f7ff ffe8 	bl	23f73b4 <_ZN11MQTTManagerD1Ev>
 23f73e4:	4620      	mov	r0, r4
 23f73e6:	2168      	movs	r1, #104	; 0x68
 23f73e8:	f7ff fa97 	bl	23f691a <_ZdlPvj>
 23f73ec:	4620      	mov	r0, r4
 23f73ee:	bd10      	pop	{r4, pc}

023f73f0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23f73f0:	2200      	movs	r2, #0
 23f73f2:	6840      	ldr	r0, [r0, #4]
 23f73f4:	4611      	mov	r1, r2
 23f73f6:	f002 bc57 	b.w	23f9ca8 <network_ready>

023f73fa <_ZNK5spark6Logger4warnEPKcz>:
inline void spark::Logger::warn(const char *fmt, ...) const {
 23f73fa:	b40e      	push	{r1, r2, r3}
 23f73fc:	b503      	push	{r0, r1, lr}
 23f73fe:	ab03      	add	r3, sp, #12
 23f7400:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_WARN, fmt, args);
 23f7404:	2128      	movs	r1, #40	; 0x28
    va_start(args, fmt);
 23f7406:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_WARN, fmt, args);
 23f7408:	f7ff fc5e 	bl	23f6cc8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f740c:	b002      	add	sp, #8
 23f740e:	f85d eb04 	ldr.w	lr, [sp], #4
 23f7412:	b003      	add	sp, #12
 23f7414:	4770      	bx	lr

023f7416 <_ZN11MQTTManager13mqttConnectedEv>:
bool MQTTManager::wifiConnected() {
    return WiFi.ready();
}

bool MQTTManager::mqttConnected() {
    return _mqtt->isConnected();
 23f7416:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23f7418:	f001 bc94 	b.w	23f8d44 <_ZN4MQTT11isConnectedEv>

023f741c <_ZN11MQTTManager11connectMQTTEv>:

bool MQTTManager::cloudConnected() {
    return Particle.connected();
}

void MQTTManager::connectMQTT() {
 23f741c:	b570      	push	{r4, r5, r6, lr}
 23f741e:	4604      	mov	r4, r0
 23f7420:	b092      	sub	sp, #72	; 0x48
    StringSumHelper(const String &s) : String(s) {}
 23f7422:	4920      	ldr	r1, [pc, #128]	; (23f74a4 <_ZN11MQTTManager11connectMQTTEv+0x88>)
 23f7424:	a80e      	add	r0, sp, #56	; 0x38
 23f7426:	f004 fadc 	bl	23fb9e2 <_ZN6StringC1ERKS_>
    const char *user = NULL;
    const char *pw = NULL;
    String willTopic = kPublishName + "/" + _controllerName + "/status";
 23f742a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 23f742e:	491e      	ldr	r1, [pc, #120]	; (23f74a8 <_ZN11MQTTManager11connectMQTTEv+0x8c>)
 23f7430:	a80e      	add	r0, sp, #56	; 0x38
 23f7432:	f004 fb8d 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f7436:	4629      	mov	r1, r5
 23f7438:	f004 fb7e 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f743c:	491b      	ldr	r1, [pc, #108]	; (23f74ac <_ZN11MQTTManager11connectMQTTEv+0x90>)
 23f743e:	f004 fb87 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f7442:	4601      	mov	r1, r0
 23f7444:	a806      	add	r0, sp, #24
 23f7446:	f004 facc 	bl	23fb9e2 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 23f744a:	a80e      	add	r0, sp, #56	; 0x38
 23f744c:	f004 fa32 	bl	23fb8b4 <_ZN6StringD1Ev>
    MQTT::EMQTT_QOS willQoS = MQTT::QOS0;
    uint8_t willRetain = 0;
    String willMessage = "Offline";
 23f7450:	4917      	ldr	r1, [pc, #92]	; (23f74b0 <_ZN11MQTTManager11connectMQTTEv+0x94>)
 23f7452:	a80a      	add	r0, sp, #40	; 0x28
 23f7454:	f004 fa79 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
    StringSumHelper(const String &s) : String(s) {}
 23f7458:	4629      	mov	r1, r5
 23f745a:	a80e      	add	r0, sp, #56	; 0x38
    bool clean = false;
    _mqtt->connect(_controllerName + "Id", user, pw, willTopic, willQoS, willRetain, willMessage, clean);
 23f745c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 23f745e:	f004 fac0 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f7462:	4914      	ldr	r1, [pc, #80]	; (23f74b4 <_ZN11MQTTManager11connectMQTTEv+0x98>)
 23f7464:	a80e      	add	r0, sp, #56	; 0x38
 23f7466:	f004 fb73 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f746a:	2300      	movs	r3, #0
 23f746c:	2204      	movs	r2, #4
 23f746e:	e9cd 3204 	strd	r3, r2, [sp, #16]
 23f7472:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23f7474:	9301      	str	r3, [sp, #4]
 23f7476:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f747a:	9a06      	ldr	r2, [sp, #24]
 23f747c:	9200      	str	r2, [sp, #0]
 23f747e:	6801      	ldr	r1, [r0, #0]
 23f7480:	461a      	mov	r2, r3
 23f7482:	4630      	mov	r0, r6
 23f7484:	f001 fc6c 	bl	23f8d60 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
class StringSumHelper : public String
 23f7488:	a80e      	add	r0, sp, #56	; 0x38
 23f748a:	f004 fa13 	bl	23fb8b4 <_ZN6StringD1Ev>
    _lastMQTTtime = Time.now();
 23f748e:	f005 f94e 	bl	23fc72e <_ZN9TimeClass3nowEv>
 23f7492:	63a0      	str	r0, [r4, #56]	; 0x38
    String willMessage = "Offline";
 23f7494:	a80a      	add	r0, sp, #40	; 0x28
 23f7496:	f004 fa0d 	bl	23fb8b4 <_ZN6StringD1Ev>
    String willTopic = kPublishName + "/" + _controllerName + "/status";
 23f749a:	a806      	add	r0, sp, #24
 23f749c:	f004 fa0a 	bl	23fb8b4 <_ZN6StringD1Ev>
}
 23f74a0:	b012      	add	sp, #72	; 0x48
 23f74a2:	bd70      	pop	{r4, r5, r6, pc}
 23f74a4:	1007ad60 	.word	0x1007ad60
 23f74a8:	023ff77e 	.word	0x023ff77e
 23f74ac:	023ff37d 	.word	0x023ff37d
 23f74b0:	023ff385 	.word	0x023ff385
 23f74b4:	023ff38d 	.word	0x023ff38d

023f74b8 <_ZN11MQTTManagerC1E6StringS0_b>:
MQTTManager::MQTTManager(String brokerIP, String controllerName, bool mqttLogging)
 23f74b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f74bc:	4604      	mov	r4, r0
 23f74be:	4625      	mov	r5, r4
 23f74c0:	4690      	mov	r8, r2
 23f74c2:	461f      	mov	r7, r3
        filter_(level) {
 23f74c4:	4b32      	ldr	r3, [pc, #200]	; (23f7590 <_ZN11MQTTManagerC1E6StringS0_b+0xd8>)
 23f74c6:	460e      	mov	r6, r1
 23f74c8:	f840 3b04 	str.w	r3, [r0], #4
 23f74cc:	211e      	movs	r1, #30
 23f74ce:	f003 f937 	bl	23fa740 <_ZN5spark6detail9LogFilterC1E8LogLevel>
 23f74d2:	4b30      	ldr	r3, [pc, #192]	; (23f7594 <_ZN11MQTTManagerC1E6StringS0_b+0xdc>)
 23f74d4:	4930      	ldr	r1, [pc, #192]	; (23f7598 <_ZN11MQTTManagerC1E6StringS0_b+0xe0>)
 23f74d6:	f845 3b28 	str.w	r3, [r5], #40
 23f74da:	4628      	mov	r0, r5
 23f74dc:	f004 fa35 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
    _controllerName = controllerName.toLowerCase();
 23f74e0:	4640      	mov	r0, r8
 23f74e2:	f004 fbfe 	bl	23fbce2 <_ZN6String11toLowerCaseEv>
 23f74e6:	4601      	mov	r1, r0
 23f74e8:	4628      	mov	r0, r5
 23f74ea:	f004 fa6b 	bl	23fb9c4 <_ZN6StringaSERKS_>
    _logging = 0;
 23f74ee:	2500      	movs	r5, #0
    _logLevel = LOG_LEVEL_ALL;     // See particle doc for options
 23f74f0:	2101      	movs	r1, #1
    pinMode(D7, OUTPUT);    // Blue LED
 23f74f2:	2007      	movs	r0, #7
    _logLevel = LOG_LEVEL_ALL;     // See particle doc for options
 23f74f4:	f884 1020 	strb.w	r1, [r4, #32]
    _blinkPhase = 0;
 23f74f8:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
    _logging = 0;
 23f74fc:	64e5      	str	r5, [r4, #76]	; 0x4c
    pinMode(D7, OUTPUT);    // Blue LED
 23f74fe:	f005 fbbd 	bl	23fcc7c <pinMode>
    digitalWrite(D7, LOW);
 23f7502:	4629      	mov	r1, r5
 23f7504:	2007      	movs	r0, #7
 23f7506:	f005 fbca 	bl	23fcc9e <digitalWrite>
    Log.info("Connecting to MQTT");
 23f750a:	4924      	ldr	r1, [pc, #144]	; (23f759c <_ZN11MQTTManagerC1E6StringS0_b+0xe4>)
 23f750c:	4824      	ldr	r0, [pc, #144]	; (23f75a0 <_ZN11MQTTManagerC1E6StringS0_b+0xe8>)
 23f750e:	f7ff fbfb 	bl	23f6d08 <_ZNK5spark6Logger4infoEPKcz>
    const char * c_str() const { return buffer; }
 23f7512:	6831      	ldr	r1, [r6, #0]
    _mqtt =  new MQTT((char *)brokerIP.c_str(), 1883, IoT::mqttHandler);
 23f7514:	2060      	movs	r0, #96	; 0x60
    _mqttSubscribed = false;
 23f7516:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
 23f751a:	9103      	str	r1, [sp, #12]
    _mqtt =  new MQTT((char *)brokerIP.c_str(), 1883, IoT::mqttHandler);
 23f751c:	f7ff f9f7 	bl	23f690e <_Znwj>
 23f7520:	4606      	mov	r6, r0
 23f7522:	b130      	cbz	r0, 23f7532 <_ZN11MQTTManagerC1E6StringS0_b+0x7a>
 23f7524:	f240 725b 	movw	r2, #1883	; 0x75b
 23f7528:	4b1e      	ldr	r3, [pc, #120]	; (23f75a4 <_ZN11MQTTManagerC1E6StringS0_b+0xec>)
 23f752a:	9903      	ldr	r1, [sp, #12]
 23f752c:	9500      	str	r5, [sp, #0]
 23f752e:	f001 fb2f 	bl	23f8b90 <_ZN4MQTTC1EPKctPFvPcPhjEb>
    connectMQTT();
 23f7532:	4620      	mov	r0, r4
    _mqtt =  new MQTT((char *)brokerIP.c_str(), 1883, IoT::mqttHandler);
 23f7534:	6266      	str	r6, [r4, #36]	; 0x24
    connectMQTT();
 23f7536:	f7ff ff71 	bl	23f741c <_ZN11MQTTManager11connectMQTTEv>
    if(mqttLogging) {
 23f753a:	b147      	cbz	r7, 23f754e <_ZN11MQTTManagerC1E6StringS0_b+0x96>
        LogManager::instance()->addHandler(this);
 23f753c:	f003 fa00 	bl	23fa940 <_ZN5spark10LogManager8instanceEv>
 23f7540:	4621      	mov	r1, r4
 23f7542:	f003 fbf1 	bl	23fad28 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
        Log.info("MQTT log handler added");
 23f7546:	4918      	ldr	r1, [pc, #96]	; (23f75a8 <_ZN11MQTTManagerC1E6StringS0_b+0xf0>)
 23f7548:	4815      	ldr	r0, [pc, #84]	; (23f75a0 <_ZN11MQTTManagerC1E6StringS0_b+0xe8>)
 23f754a:	f7ff fbdd 	bl	23f6d08 <_ZNK5spark6Logger4infoEPKcz>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 23f754e:	2300      	movs	r3, #0
 23f7550:	e9cd 3300 	strd	r3, r3, [sp]
 23f7554:	4815      	ldr	r0, [pc, #84]	; (23f75ac <_ZN11MQTTManagerC1E6StringS0_b+0xf4>)
 23f7556:	461a      	mov	r2, r3
 23f7558:	4915      	ldr	r1, [pc, #84]	; (23f75b0 <_ZN11MQTTManagerC1E6StringS0_b+0xf8>)
 23f755a:	6800      	ldr	r0, [r0, #0]
 23f755c:	f002 fb50 	bl	23f9c00 <spark_subscribe>
    _lastAliveTime = Time.now() - MQTT_ALIVE_SECONDS;
 23f7560:	f005 f8e5 	bl	23fc72e <_ZN9TimeClass3nowEv>
 23f7564:	38b4      	subs	r0, #180	; 0xb4
 23f7566:	63e0      	str	r0, [r4, #60]	; 0x3c
    _lastAliveFrontPanel = Time.now();
 23f7568:	f005 f8e1 	bl	23fc72e <_ZN9TimeClass3nowEv>
 23f756c:	6520      	str	r0, [r4, #80]	; 0x50
    _lastAliveLeftSlide = Time.now();
 23f756e:	f005 f8de 	bl	23fc72e <_ZN9TimeClass3nowEv>
 23f7572:	6560      	str	r0, [r4, #84]	; 0x54
    _lastAliveRearPanel = Time.now();
 23f7574:	f005 f8db 	bl	23fc72e <_ZN9TimeClass3nowEv>
 23f7578:	65a0      	str	r0, [r4, #88]	; 0x58
    _lastAliveRonTest = Time.now();
 23f757a:	f005 f8d8 	bl	23fc72e <_ZN9TimeClass3nowEv>
 23f757e:	65e0      	str	r0, [r4, #92]	; 0x5c
    _lastCheckTime = Time.now();
 23f7580:	f005 f8d5 	bl	23fc72e <_ZN9TimeClass3nowEv>
 23f7584:	6420      	str	r0, [r4, #64]	; 0x40
}
 23f7586:	4620      	mov	r0, r4
 23f7588:	b004      	add	sp, #16
 23f758a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f758e:	bf00      	nop
 23f7590:	023ff2b0 	.word	0x023ff2b0
 23f7594:	023ff608 	.word	0x023ff608
 23f7598:	023ff895 	.word	0x023ff895
 23f759c:	023ff390 	.word	0x023ff390
 23f75a0:	1007ae1c 	.word	0x1007ae1c
 23f75a4:	023f6e89 	.word	0x023f6e89
 23f75a8:	023ff3a3 	.word	0x023ff3a3
 23f75ac:	1007ad60 	.word	0x1007ad60
 23f75b0:	023f6dd5 	.word	0x023f6dd5

023f75b4 <_ZN11MQTTManager8doRebootEv>:
        String time = Time.format(Time.now(), "%a %H:%M");
        publish(kPublishName+"/alive/"+_controllerName, time, false);
    }
}

void MQTTManager::doReboot() {
 23f75b4:	b508      	push	{r3, lr}
    Log.warn("Rebooting...");
 23f75b6:	4907      	ldr	r1, [pc, #28]	; (23f75d4 <_ZN11MQTTManager8doRebootEv+0x20>)
 23f75b8:	4807      	ldr	r0, [pc, #28]	; (23f75d8 <_ZN11MQTTManager8doRebootEv+0x24>)
 23f75ba:	f7ff ff1e 	bl	23f73fa <_ZNK5spark6Logger4warnEPKcz>
    Device::resetAll();
 23f75be:	f001 f911 	bl	23f87e4 <_ZN6Device8resetAllEv>
    delay(200);
 23f75c2:	20c8      	movs	r0, #200	; 0xc8
 23f75c4:	f002 fcce 	bl	23f9f64 <delay>
    System.reset(RESET_NO_WAIT);
 23f75c8:	4b04      	ldr	r3, [pc, #16]	; (23f75dc <_ZN11MQTTManager8doRebootEv+0x28>)
 23f75ca:	6818      	ldr	r0, [r3, #0]
}
 23f75cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    System.reset(RESET_NO_WAIT);
 23f75d0:	f004 bc0a 	b.w	23fbde8 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
 23f75d4:	023ff3ba 	.word	0x023ff3ba
 23f75d8:	1007ae1c 	.word	0x1007ae1c
 23f75dc:	1007ad70 	.word	0x1007ad70

023f75e0 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv>:
{
 23f75e0:	b510      	push	{r4, lr}
 23f75e2:	4604      	mov	r4, r0
    if(Time.now() > _lastCheckTime + CHECK_STATUS_SECONDS) {
 23f75e4:	f005 f8a3 	bl	23fc72e <_ZN9TimeClass3nowEv>
 23f75e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 23f75ea:	333c      	adds	r3, #60	; 0x3c
 23f75ec:	4298      	cmp	r0, r3
 23f75ee:	dd1b      	ble.n	23f7628 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x48>
        _lastCheckTime = Time.now();
 23f75f0:	f005 f89d 	bl	23fc72e <_ZN9TimeClass3nowEv>
 23f75f4:	6420      	str	r0, [r4, #64]	; 0x40
        if(WiFi.ready()) {
 23f75f6:	481e      	ldr	r0, [pc, #120]	; (23f7670 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x90>)
 23f75f8:	f7ff fefa 	bl	23f73f0 <_ZN5spark9WiFiClass5readyEv>
 23f75fc:	b390      	cbz	r0, 23f7664 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x84>
            if(_mqtt->isConnected()) {
 23f75fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f7600:	f001 fba0 	bl	23f8d44 <_ZN4MQTT11isConnectedEv>
 23f7604:	b328      	cbz	r0, 23f7652 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x72>
                if(_mqttSubscribed == false) {
 23f7606:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 23f760a:	b973      	cbnz	r3, 23f762a <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x4a>
                    Log.info("mqtt connected, subscribing...");
 23f760c:	4919      	ldr	r1, [pc, #100]	; (23f7674 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x94>)
 23f760e:	481a      	ldr	r0, [pc, #104]	; (23f7678 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x98>)
 23f7610:	f7ff fb7a 	bl	23f6d08 <_ZNK5spark6Logger4infoEPKcz>
                    _lastMQTTtime = Time.now();
 23f7614:	f005 f88b 	bl	23fc72e <_ZN9TimeClass3nowEv>
                    _mqtt->subscribe("#");
 23f7618:	4918      	ldr	r1, [pc, #96]	; (23f767c <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x9c>)
                    _lastMQTTtime = Time.now();
 23f761a:	63a0      	str	r0, [r4, #56]	; 0x38
                    _mqtt->subscribe("#");
 23f761c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f761e:	f001 fe8c 	bl	23f933a <_ZN4MQTT9subscribeEPKc>
                    _mqttSubscribed = true;
 23f7622:	2301      	movs	r3, #1
 23f7624:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
}
 23f7628:	bd10      	pop	{r4, pc}
                    if(Time.now() > _lastMQTTtime + MQTT_TIMEOUT_SECONDS) {
 23f762a:	f005 f880 	bl	23fc72e <_ZN9TimeClass3nowEv>
 23f762e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23f7630:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 23f7634:	4298      	cmp	r0, r3
 23f7636:	ddf7      	ble.n	23f7628 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x48>
                        Log.error("MQTT Timeout.");
 23f7638:	4911      	ldr	r1, [pc, #68]	; (23f7680 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0xa0>)
 23f763a:	480f      	ldr	r0, [pc, #60]	; (23f7678 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x98>)
 23f763c:	f7ff fb56 	bl	23f6cec <_ZNK5spark6Logger5errorEPKcz>

#ifdef __cplusplus
}
#endif

static inline void delay(std::chrono::milliseconds ms) { ::delay(ms.count()); }
 23f7640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23f7644:	f002 fc8e 	bl	23f9f64 <delay>
                        doReboot();
 23f7648:	4620      	mov	r0, r4
}
 23f764a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                        doReboot();
 23f764e:	f7ff bfb1 	b.w	23f75b4 <_ZN11MQTTManager8doRebootEv>
                Log.info("MQTT not connected, retry...");
 23f7652:	4809      	ldr	r0, [pc, #36]	; (23f7678 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x98>)
 23f7654:	490b      	ldr	r1, [pc, #44]	; (23f7684 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0xa4>)
 23f7656:	f7ff fb57 	bl	23f6d08 <_ZNK5spark6Logger4infoEPKcz>
                connectMQTT();
 23f765a:	4620      	mov	r0, r4
}
 23f765c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                connectMQTT();
 23f7660:	f7ff bedc 	b.w	23f741c <_ZN11MQTTManager11connectMQTTEv>
            Log.info("WiFi NOT ready");
 23f7664:	4908      	ldr	r1, [pc, #32]	; (23f7688 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0xa8>)
 23f7666:	4804      	ldr	r0, [pc, #16]	; (23f7678 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x98>)
 23f7668:	f7ff fb4e 	bl	23f6d08 <_ZNK5spark6Logger4infoEPKcz>
}
 23f766c:	e7dc      	b.n	23f7628 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x48>
 23f766e:	bf00      	nop
 23f7670:	1007aed0 	.word	0x1007aed0
 23f7674:	023ff3c7 	.word	0x023ff3c7
 23f7678:	1007ae1c 	.word	0x1007ae1c
 23f767c:	023ff3e6 	.word	0x023ff3e6
 23f7680:	023ff3e8 	.word	0x023ff3e8
 23f7684:	023ff3f6 	.word	0x023ff3f6
 23f7688:	023ff413 	.word	0x023ff413

023f768c <_ZN11MQTTManager7publishE6StringS0_b>:

/**
 * Send MQTT data
 */
bool MQTTManager::publish(String topic, String message, bool retain) {
 23f768c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f7690:	4607      	mov	r7, r0
 23f7692:	b088      	sub	sp, #32
    if(_mqtt->isConnected() && WiFi.ready()) {
 23f7694:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool MQTTManager::publish(String topic, String message, bool retain) {
 23f7696:	460e      	mov	r6, r1
 23f7698:	4615      	mov	r5, r2
 23f769a:	4698      	mov	r8, r3
    if(_mqtt->isConnected() && WiFi.ready()) {
 23f769c:	f001 fb52 	bl	23f8d44 <_ZN4MQTT11isConnectedEv>
 23f76a0:	b198      	cbz	r0, 23f76ca <_ZN11MQTTManager7publishE6StringS0_b+0x3e>
 23f76a2:	4815      	ldr	r0, [pc, #84]	; (23f76f8 <_ZN11MQTTManager7publishE6StringS0_b+0x6c>)
 23f76a4:	f7ff fea4 	bl	23f73f0 <_ZN5spark9WiFiClass5readyEv>
 23f76a8:	4604      	mov	r4, r0
 23f76aa:	b170      	cbz	r0, 23f76ca <_ZN11MQTTManager7publishE6StringS0_b+0x3e>
        _mqtt->publish(topic, (const uint8_t*)message.c_str(), message.length(), retain, retain ? MQTT::QOS1 : MQTT::QOS0);
 23f76ac:	2300      	movs	r3, #0
 23f76ae:	682a      	ldr	r2, [r5, #0]
 23f76b0:	e9cd 8301 	strd	r8, r3, [sp, #4]
 23f76b4:	6831      	ldr	r1, [r6, #0]
 23f76b6:	68ab      	ldr	r3, [r5, #8]
 23f76b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 23f76ba:	f8cd 8000 	str.w	r8, [sp]
 23f76be:	f001 fc9d 	bl	23f8ffc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
        return true;
    } else {
        Log.warn("publish while MQTT not connected: " + topic + ", " + message);
    }
    return false;
}
 23f76c2:	4620      	mov	r0, r4
 23f76c4:	b008      	add	sp, #32
 23f76c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    StringSumHelper(const char *p) : String(p) {}
 23f76ca:	490c      	ldr	r1, [pc, #48]	; (23f76fc <_ZN11MQTTManager7publishE6StringS0_b+0x70>)
 23f76cc:	a804      	add	r0, sp, #16
 23f76ce:	f004 f93c 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
        Log.warn("publish while MQTT not connected: " + topic + ", " + message);
 23f76d2:	4631      	mov	r1, r6
 23f76d4:	a804      	add	r0, sp, #16
 23f76d6:	f004 fa2f 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f76da:	4909      	ldr	r1, [pc, #36]	; (23f7700 <_ZN11MQTTManager7publishE6StringS0_b+0x74>)
 23f76dc:	f004 fa38 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f76e0:	4629      	mov	r1, r5
 23f76e2:	f004 fa29 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f76e6:	6801      	ldr	r1, [r0, #0]
 23f76e8:	4806      	ldr	r0, [pc, #24]	; (23f7704 <_ZN11MQTTManager7publishE6StringS0_b+0x78>)
 23f76ea:	f7ff fe86 	bl	23f73fa <_ZNK5spark6Logger4warnEPKcz>
class StringSumHelper : public String
 23f76ee:	a804      	add	r0, sp, #16
 23f76f0:	f004 f8e0 	bl	23fb8b4 <_ZN6StringD1Ev>
    return false;
 23f76f4:	2400      	movs	r4, #0
 23f76f6:	e7e4      	b.n	23f76c2 <_ZN11MQTTManager7publishE6StringS0_b+0x36>
 23f76f8:	1007aed0 	.word	0x1007aed0
 23f76fc:	023ff422 	.word	0x023ff422
 23f7700:	023ff445 	.word	0x023ff445
 23f7704:	1007ae1c 	.word	0x1007ae1c

023f7708 <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv>:
void MQTTManager::sendAliveMsgPeriodically() {
 23f7708:	b510      	push	{r4, lr}
 23f770a:	4604      	mov	r4, r0
 23f770c:	b092      	sub	sp, #72	; 0x48
    if(Time.now() > _lastAliveTime + MQTT_ALIVE_SECONDS) {
 23f770e:	f005 f80e 	bl	23fc72e <_ZN9TimeClass3nowEv>
 23f7712:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f7714:	33b4      	adds	r3, #180	; 0xb4
 23f7716:	4298      	cmp	r0, r3
 23f7718:	dd32      	ble.n	23f7780 <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv+0x78>
        _lastAliveTime = Time.now();
 23f771a:	f005 f808 	bl	23fc72e <_ZN9TimeClass3nowEv>
 23f771e:	63e0      	str	r0, [r4, #60]	; 0x3c
        String time = Time.format(Time.now(), "%a %H:%M");
 23f7720:	f005 f805 	bl	23fc72e <_ZN9TimeClass3nowEv>
 23f7724:	4b17      	ldr	r3, [pc, #92]	; (23f7784 <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv+0x7c>)
 23f7726:	4602      	mov	r2, r0
 23f7728:	4917      	ldr	r1, [pc, #92]	; (23f7788 <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv+0x80>)
 23f772a:	9300      	str	r3, [sp, #0]
 23f772c:	17c3      	asrs	r3, r0, #31
 23f772e:	a802      	add	r0, sp, #8
 23f7730:	f004 ff9e 	bl	23fc670 <_ZN9TimeClass6formatExPKc>
    StringSumHelper(const String &s) : String(s) {}
 23f7734:	4915      	ldr	r1, [pc, #84]	; (23f778c <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv+0x84>)
 23f7736:	a80a      	add	r0, sp, #40	; 0x28
 23f7738:	f004 f953 	bl	23fb9e2 <_ZN6StringC1ERKS_>
        publish(kPublishName+"/alive/"+_controllerName, time, false);
 23f773c:	4914      	ldr	r1, [pc, #80]	; (23f7790 <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv+0x88>)
 23f773e:	a80a      	add	r0, sp, #40	; 0x28
 23f7740:	f004 fa06 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f7744:	f104 0128 	add.w	r1, r4, #40	; 0x28
 23f7748:	f004 f9f6 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f774c:	4601      	mov	r1, r0
 23f774e:	a806      	add	r0, sp, #24
 23f7750:	f004 f947 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f7754:	a902      	add	r1, sp, #8
 23f7756:	a80e      	add	r0, sp, #56	; 0x38
 23f7758:	f004 f943 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f775c:	2300      	movs	r3, #0
 23f775e:	aa0e      	add	r2, sp, #56	; 0x38
 23f7760:	a906      	add	r1, sp, #24
 23f7762:	4620      	mov	r0, r4
 23f7764:	f7ff ff92 	bl	23f768c <_ZN11MQTTManager7publishE6StringS0_b>
 23f7768:	a80e      	add	r0, sp, #56	; 0x38
 23f776a:	f004 f8a3 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f776e:	a806      	add	r0, sp, #24
 23f7770:	f004 f8a0 	bl	23fb8b4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f7774:	a80a      	add	r0, sp, #40	; 0x28
 23f7776:	f004 f89d 	bl	23fb8b4 <_ZN6StringD1Ev>
        String time = Time.format(Time.now(), "%a %H:%M");
 23f777a:	a802      	add	r0, sp, #8
 23f777c:	f004 f89a 	bl	23fb8b4 <_ZN6StringD1Ev>
}
 23f7780:	b012      	add	sp, #72	; 0x48
 23f7782:	bd10      	pop	{r4, pc}
 23f7784:	023ff448 	.word	0x023ff448
 23f7788:	1007ae70 	.word	0x1007ae70
 23f778c:	1007ad60 	.word	0x1007ad60
 23f7790:	023ff451 	.word	0x023ff451

023f7794 <_ZN11MQTTManager7sendAckE6StringS0_S0_>:
            }
        }
    }
}

void MQTTManager::sendAck(String deviceName, String command, String message) {
 23f7794:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f7796:	460f      	mov	r7, r1
 23f7798:	4616      	mov	r6, r2
 23f779a:	b08d      	sub	sp, #52	; 0x34
 23f779c:	4604      	mov	r4, r0
    StringSumHelper(const String &s) : String(s) {}
 23f779e:	4915      	ldr	r1, [pc, #84]	; (23f77f4 <_ZN11MQTTManager7sendAckE6StringS0_S0_+0x60>)
 23f77a0:	4668      	mov	r0, sp
 23f77a2:	461d      	mov	r5, r3
 23f77a4:	f004 f91d 	bl	23fb9e2 <_ZN6StringC1ERKS_>
    publish(kPublishName + "/ack/" + deviceName + "/" + command, message);
 23f77a8:	4668      	mov	r0, sp
 23f77aa:	4913      	ldr	r1, [pc, #76]	; (23f77f8 <_ZN11MQTTManager7sendAckE6StringS0_S0_+0x64>)
 23f77ac:	f004 f9d0 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f77b0:	4639      	mov	r1, r7
 23f77b2:	f004 f9c1 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f77b6:	4911      	ldr	r1, [pc, #68]	; (23f77fc <_ZN11MQTTManager7sendAckE6StringS0_S0_+0x68>)
 23f77b8:	f004 f9ca 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f77bc:	4631      	mov	r1, r6
 23f77be:	f004 f9bb 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f77c2:	4601      	mov	r1, r0
 23f77c4:	a804      	add	r0, sp, #16
 23f77c6:	f004 f90c 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f77ca:	4629      	mov	r1, r5
 23f77cc:	a808      	add	r0, sp, #32
 23f77ce:	f004 f908 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f77d2:	2300      	movs	r3, #0
 23f77d4:	aa08      	add	r2, sp, #32
 23f77d6:	a904      	add	r1, sp, #16
 23f77d8:	4620      	mov	r0, r4
 23f77da:	f7ff ff57 	bl	23f768c <_ZN11MQTTManager7publishE6StringS0_b>
 23f77de:	a808      	add	r0, sp, #32
 23f77e0:	f004 f868 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f77e4:	a804      	add	r0, sp, #16
 23f77e6:	f004 f865 	bl	23fb8b4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f77ea:	4668      	mov	r0, sp
 23f77ec:	f004 f862 	bl	23fb8b4 <_ZN6StringD1Ev>
}
 23f77f0:	b00d      	add	sp, #52	; 0x34
 23f77f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f77f4:	1007ad60 	.word	0x1007ad60
 23f77f8:	023ff459 	.word	0x023ff459
 23f77fc:	023ff77e 	.word	0x023ff77e

023f7800 <_ZN11MQTTManager13parseLogLevelE6String>:
    String deviceName = subtopic.substring(slashIndex+1);
    
    return deviceName;
}

void MQTTManager::parseLogLevel(String lcMessage) {
 23f7800:	b538      	push	{r3, r4, r5, lr}
 23f7802:	460c      	mov	r4, r1
 23f7804:	4605      	mov	r5, r0
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f7806:	4919      	ldr	r1, [pc, #100]	; (23f786c <_ZN11MQTTManager13parseLogLevelE6String+0x6c>)
 23f7808:	4620      	mov	r0, r4
 23f780a:	f004 f9d8 	bl	23fbbbe <_ZNK6String6equalsEPKc>
    LogLevel level = LOG_LEVEL_WARN;
    if (lcMessage == "none") level = LOG_LEVEL_NONE;         // 70
 23f780e:	bb30      	cbnz	r0, 23f785e <_ZN11MQTTManager13parseLogLevelE6String+0x5e>
 23f7810:	4620      	mov	r0, r4
 23f7812:	4917      	ldr	r1, [pc, #92]	; (23f7870 <_ZN11MQTTManager13parseLogLevelE6String+0x70>)
 23f7814:	f004 f9d3 	bl	23fbbbe <_ZNK6String6equalsEPKc>
    else if (lcMessage == "error") level = LOG_LEVEL_ERROR;  // 50
 23f7818:	bb18      	cbnz	r0, 23f7862 <_ZN11MQTTManager13parseLogLevelE6String+0x62>
 23f781a:	4620      	mov	r0, r4
 23f781c:	4915      	ldr	r1, [pc, #84]	; (23f7874 <_ZN11MQTTManager13parseLogLevelE6String+0x74>)
 23f781e:	f004 f9ce 	bl	23fbbbe <_ZNK6String6equalsEPKc>
    else if (lcMessage == "warn" || lcMessage == "warning") level = LOG_LEVEL_WARN;    // 40
 23f7822:	b118      	cbz	r0, 23f782c <_ZN11MQTTManager13parseLogLevelE6String+0x2c>
 23f7824:	2328      	movs	r3, #40	; 0x28
    else if (lcMessage == "info") level = LOG_LEVEL_INFO;    // 30
    else if (lcMessage == "trace") level = LOG_LEVEL_TRACE;  // 1
    else if (lcMessage == "all") level = LOG_LEVEL_ALL;      // 1
    else return;
    
    _logLevel = level;
 23f7826:	f885 3020 	strb.w	r3, [r5, #32]
 23f782a:	e017      	b.n	23f785c <_ZN11MQTTManager13parseLogLevelE6String+0x5c>
 23f782c:	4620      	mov	r0, r4
 23f782e:	4912      	ldr	r1, [pc, #72]	; (23f7878 <_ZN11MQTTManager13parseLogLevelE6String+0x78>)
 23f7830:	f004 f9c5 	bl	23fbbbe <_ZNK6String6equalsEPKc>
    else if (lcMessage == "warn" || lcMessage == "warning") level = LOG_LEVEL_WARN;    // 40
 23f7834:	2800      	cmp	r0, #0
 23f7836:	d1f5      	bne.n	23f7824 <_ZN11MQTTManager13parseLogLevelE6String+0x24>
 23f7838:	4620      	mov	r0, r4
 23f783a:	4910      	ldr	r1, [pc, #64]	; (23f787c <_ZN11MQTTManager13parseLogLevelE6String+0x7c>)
 23f783c:	f004 f9bf 	bl	23fbbbe <_ZNK6String6equalsEPKc>
    else if (lcMessage == "info") level = LOG_LEVEL_INFO;    // 30
 23f7840:	b988      	cbnz	r0, 23f7866 <_ZN11MQTTManager13parseLogLevelE6String+0x66>
 23f7842:	4620      	mov	r0, r4
 23f7844:	490e      	ldr	r1, [pc, #56]	; (23f7880 <_ZN11MQTTManager13parseLogLevelE6String+0x80>)
 23f7846:	f004 f9ba 	bl	23fbbbe <_ZNK6String6equalsEPKc>
    else if (lcMessage == "trace") level = LOG_LEVEL_TRACE;  // 1
 23f784a:	b108      	cbz	r0, 23f7850 <_ZN11MQTTManager13parseLogLevelE6String+0x50>
 23f784c:	2301      	movs	r3, #1
 23f784e:	e7ea      	b.n	23f7826 <_ZN11MQTTManager13parseLogLevelE6String+0x26>
 23f7850:	4620      	mov	r0, r4
 23f7852:	490c      	ldr	r1, [pc, #48]	; (23f7884 <_ZN11MQTTManager13parseLogLevelE6String+0x84>)
 23f7854:	f004 f9b3 	bl	23fbbbe <_ZNK6String6equalsEPKc>
    else if (lcMessage == "all") level = LOG_LEVEL_ALL;      // 1
 23f7858:	2800      	cmp	r0, #0
 23f785a:	d1f7      	bne.n	23f784c <_ZN11MQTTManager13parseLogLevelE6String+0x4c>
}
 23f785c:	bd38      	pop	{r3, r4, r5, pc}
    if (lcMessage == "none") level = LOG_LEVEL_NONE;         // 70
 23f785e:	2346      	movs	r3, #70	; 0x46
 23f7860:	e7e1      	b.n	23f7826 <_ZN11MQTTManager13parseLogLevelE6String+0x26>
    else if (lcMessage == "error") level = LOG_LEVEL_ERROR;  // 50
 23f7862:	2332      	movs	r3, #50	; 0x32
 23f7864:	e7df      	b.n	23f7826 <_ZN11MQTTManager13parseLogLevelE6String+0x26>
    else if (lcMessage == "info") level = LOG_LEVEL_INFO;    // 30
 23f7866:	231e      	movs	r3, #30
 23f7868:	e7dd      	b.n	23f7826 <_ZN11MQTTManager13parseLogLevelE6String+0x26>
 23f786a:	bf00      	nop
 23f786c:	023ff45f 	.word	0x023ff45f
 23f7870:	023ff464 	.word	0x023ff464
 23f7874:	023ff46a 	.word	0x023ff46a
 23f7878:	023ff46f 	.word	0x023ff46f
 23f787c:	023ff477 	.word	0x023ff477
 23f7880:	023ff47c 	.word	0x023ff47c
 23f7884:	023ff482 	.word	0x023ff482

023f7888 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_>:
{
 23f7888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f788c:	ed2d 8b02 	vpush	{d8}
 23f7890:	4604      	mov	r4, r0
 23f7892:	4688      	mov	r8, r1
 23f7894:	4615      	mov	r5, r2
 23f7896:	2600      	movs	r6, #0
    String subtopics[5];
 23f7898:	4fb2      	ldr	r7, [pc, #712]	; (23f7b64 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2dc>)
{
 23f789a:	b0aa      	sub	sp, #168	; 0xa8
    String subtopics[5];
 23f789c:	ab16      	add	r3, sp, #88	; 0x58
 23f789e:	1998      	adds	r0, r3, r6
 23f78a0:	4639      	mov	r1, r7
 23f78a2:	3610      	adds	r6, #16
 23f78a4:	f004 f851 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
 23f78a8:	2e50      	cmp	r6, #80	; 0x50
 23f78aa:	d1f7      	bne.n	23f789c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x14>
    int numTopics = 0;
 23f78ac:	2600      	movs	r6, #0
    int end = lcTopic.indexOf('/');
 23f78ae:	212f      	movs	r1, #47	; 0x2f
 23f78b0:	4640      	mov	r0, r8
 23f78b2:	f004 f9e9 	bl	23fbc88 <_ZNK6String7indexOfEc>
    int start = 0;
 23f78b6:	4632      	mov	r2, r6
    if(end > 0) { // Might be -1 if only 1 subtopic
 23f78b8:	1e07      	subs	r7, r0, #0
 23f78ba:	dd1a      	ble.n	23f78f2 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x6a>
            subtopics[numTopics] = lcTopic.substring(start, end);
 23f78bc:	463b      	mov	r3, r7
 23f78be:	4641      	mov	r1, r8
 23f78c0:	a812      	add	r0, sp, #72	; 0x48
 23f78c2:	f004 f9e5 	bl	23fbc90 <_ZNK6String9substringEjj>
 23f78c6:	ab16      	add	r3, sp, #88	; 0x58
 23f78c8:	eb03 1006 	add.w	r0, r3, r6, lsl #4
 23f78cc:	a912      	add	r1, sp, #72	; 0x48
 23f78ce:	f004 f893 	bl	23fb9f8 <_ZN6StringaSEOS_>
 23f78d2:	a812      	add	r0, sp, #72	; 0x48
 23f78d4:	f003 ffee 	bl	23fb8b4 <_ZN6StringD1Ev>
            start = end+1;
 23f78d8:	1c7a      	adds	r2, r7, #1
            end = lcTopic.indexOf('/', start);
 23f78da:	212f      	movs	r1, #47	; 0x2f
 23f78dc:	4640      	mov	r0, r8
 23f78de:	9201      	str	r2, [sp, #4]
 23f78e0:	f004 f9c4 	bl	23fbc6c <_ZNK6String7indexOfEcj>
            numTopics++;
 23f78e4:	3601      	adds	r6, #1
        } while(numTopics < 4 && end > 0);
 23f78e6:	2e04      	cmp	r6, #4
            end = lcTopic.indexOf('/', start);
 23f78e8:	4607      	mov	r7, r0
        } while(numTopics < 4 && end > 0);
 23f78ea:	9a01      	ldr	r2, [sp, #4]
 23f78ec:	d001      	beq.n	23f78f2 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x6a>
 23f78ee:	2800      	cmp	r0, #0
 23f78f0:	e7e3      	b.n	23f78ba <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x32>
    subtopics[numTopics++] = lcTopic.substring(start);  // Last one
 23f78f2:	4641      	mov	r1, r8
 23f78f4:	a812      	add	r0, sp, #72	; 0x48
 23f78f6:	f004 f9ed 	bl	23fbcd4 <_ZNK6String9substringEj>
 23f78fa:	ab16      	add	r3, sp, #88	; 0x58
 23f78fc:	a912      	add	r1, sp, #72	; 0x48
 23f78fe:	eb03 1006 	add.w	r0, r3, r6, lsl #4
 23f7902:	f004 f879 	bl	23fb9f8 <_ZN6StringaSEOS_>
 23f7906:	a812      	add	r0, sp, #72	; 0x48
 23f7908:	f003 ffd4 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f790c:	4996      	ldr	r1, [pc, #600]	; (23f7b68 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2e0>)
 23f790e:	a816      	add	r0, sp, #88	; 0x58
 23f7910:	f004 f955 	bl	23fbbbe <_ZNK6String6equalsEPKc>
        if(subtopics[0] == "ack") {                         // patriot/ack/<device>/<command>
 23f7914:	2800      	cmp	r0, #0
 23f7916:	d14b      	bne.n	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f7918:	4994      	ldr	r1, [pc, #592]	; (23f7b6c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2e4>)
 23f791a:	a816      	add	r0, sp, #88	; 0x58
    subtopics[numTopics++] = lcTopic.substring(start);  // Last one
 23f791c:	3601      	adds	r6, #1
 23f791e:	f004 f94e 	bl	23fbbbe <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "alive" && numTopics > 1) {                // patriot/alive/<controller>
 23f7922:	b188      	cbz	r0, 23f7948 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0xc0>
 23f7924:	2e01      	cmp	r6, #1
 23f7926:	d011      	beq.n	23f794c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0xc4>
 23f7928:	4991      	ldr	r1, [pc, #580]	; (23f7b70 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2e8>)
 23f792a:	a81a      	add	r0, sp, #104	; 0x68
 23f792c:	f004 f947 	bl	23fbbbe <_ZNK6String6equalsEPKc>
            if(subtopics[1] == "frontpanel") {
 23f7930:	2800      	cmp	r0, #0
 23f7932:	d13a      	bne.n	23f79aa <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x122>
 23f7934:	498f      	ldr	r1, [pc, #572]	; (23f7b74 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2ec>)
 23f7936:	a81a      	add	r0, sp, #104	; 0x68
 23f7938:	f004 f941 	bl	23fbbbe <_ZNK6String6equalsEPKc>
            } else if(subtopics[1] == "leftslide") {
 23f793c:	2800      	cmp	r0, #0
 23f793e:	d044      	beq.n	23f79ca <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x142>
                _lastAliveLeftSlide = Time.now();
 23f7940:	f004 fef5 	bl	23fc72e <_ZN9TimeClass3nowEv>
 23f7944:	6560      	str	r0, [r4, #84]	; 0x54
 23f7946:	e033      	b.n	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
        } else if(numTopics > 1 && subtopics[1] == "brightness") {           // patriot/<device>/brightness value
 23f7948:	2e01      	cmp	r6, #1
 23f794a:	d148      	bne.n	23f79de <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x156>
 23f794c:	498a      	ldr	r1, [pc, #552]	; (23f7b78 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2f0>)
 23f794e:	a816      	add	r0, sp, #88	; 0x58
 23f7950:	f004 f935 	bl	23fbbbe <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "latlong") {                                  // patriot/latlong lat,long
 23f7954:	2800      	cmp	r0, #0
 23f7956:	f040 8083 	bne.w	23f7a60 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x1d8>
 23f795a:	4988      	ldr	r1, [pc, #544]	; (23f7b7c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2f4>)
 23f795c:	a816      	add	r0, sp, #88	; 0x58
 23f795e:	f004 f92e 	bl	23fbbbe <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "loglevel") {
 23f7962:	2800      	cmp	r0, #0
 23f7964:	f000 8129 	beq.w	23f7bba <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x332>
            if(numTopics == 1 || subtopics[1] == _controllerName || subtopics[1] == "all" ) {
 23f7968:	2e01      	cmp	r6, #1
                Log.info(_controllerName + ": hold " + subtopics[0]);
 23f796a:	f104 0728 	add.w	r7, r4, #40	; 0x28
            if(numTopics == 1 || subtopics[1] == _controllerName || subtopics[1] == "all" ) {
 23f796e:	f040 8115 	bne.w	23f7b9c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x314>
    StringSumHelper(const String &s) : String(s) {}
 23f7972:	4639      	mov	r1, r7
 23f7974:	a812      	add	r0, sp, #72	; 0x48
 23f7976:	f004 f834 	bl	23fb9e2 <_ZN6StringC1ERKS_>
                Log.warn(_controllerName + " setting logLevel = " + lcMessage);
 23f797a:	4981      	ldr	r1, [pc, #516]	; (23f7b80 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2f8>)
 23f797c:	a812      	add	r0, sp, #72	; 0x48
 23f797e:	f004 f8e7 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f7982:	4629      	mov	r1, r5
 23f7984:	f004 f8d8 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f7988:	6801      	ldr	r1, [r0, #0]
 23f798a:	487e      	ldr	r0, [pc, #504]	; (23f7b84 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2fc>)
 23f798c:	f7ff fd35 	bl	23f73fa <_ZNK5spark6Logger4warnEPKcz>
class StringSumHelper : public String
 23f7990:	a812      	add	r0, sp, #72	; 0x48
 23f7992:	f003 ff8f 	bl	23fb8b4 <_ZN6StringD1Ev>
                parseLogLevel(lcMessage);
 23f7996:	4629      	mov	r1, r5
 23f7998:	a812      	add	r0, sp, #72	; 0x48
 23f799a:	f004 f822 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f799e:	4620      	mov	r0, r4
 23f79a0:	a912      	add	r1, sp, #72	; 0x48
 23f79a2:	f7ff ff2d 	bl	23f7800 <_ZN11MQTTManager13parseLogLevelE6String>
 23f79a6:	a812      	add	r0, sp, #72	; 0x48
 23f79a8:	e057      	b.n	23f7a5a <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x1d2>
                _lastAliveFrontPanel = Time.now();
 23f79aa:	f004 fec0 	bl	23fc72e <_ZN9TimeClass3nowEv>
 23f79ae:	6520      	str	r0, [r4, #80]	; 0x50
                else if(lcMessage == "off" || lcMessage == "false") value = 0;
 23f79b0:	2404      	movs	r4, #4
    String subtopics[5];
 23f79b2:	ab16      	add	r3, sp, #88	; 0x58
 23f79b4:	eb03 1004 	add.w	r0, r3, r4, lsl #4
 23f79b8:	f003 ff7c 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f79bc:	3c01      	subs	r4, #1
 23f79be:	d2f8      	bcs.n	23f79b2 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x12a>
}
 23f79c0:	b02a      	add	sp, #168	; 0xa8
 23f79c2:	ecbd 8b02 	vpop	{d8}
 23f79c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f79ca:	496f      	ldr	r1, [pc, #444]	; (23f7b88 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x300>)
 23f79cc:	a81a      	add	r0, sp, #104	; 0x68
 23f79ce:	f004 f8f6 	bl	23fbbbe <_ZNK6String6equalsEPKc>
            } else if(subtopics[1] == "rearpanel") {
 23f79d2:	2800      	cmp	r0, #0
 23f79d4:	d0ec      	beq.n	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
                _lastAliveRearPanel = Time.now();
 23f79d6:	f004 feaa 	bl	23fc72e <_ZN9TimeClass3nowEv>
 23f79da:	65a0      	str	r0, [r4, #88]	; 0x58
 23f79dc:	e7e8      	b.n	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f79de:	496b      	ldr	r1, [pc, #428]	; (23f7b8c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x304>)
 23f79e0:	a81a      	add	r0, sp, #104	; 0x68
 23f79e2:	f004 f8ec 	bl	23fbbbe <_ZNK6String6equalsEPKc>
        } else if(numTopics > 1 && subtopics[1] == "brightness") {           // patriot/<device>/brightness value
 23f79e6:	2800      	cmp	r0, #0
 23f79e8:	f000 825e 	beq.w	23f7ea8 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x620>
            int value = lcMessage.toInt();
 23f79ec:	4628      	mov	r0, r5
 23f79ee:	f004 f9af 	bl	23fbd50 <_ZNK6String5toIntEv>
            String deviceName = subtopics[0];
 23f79f2:	a916      	add	r1, sp, #88	; 0x58
            int value = lcMessage.toInt();
 23f79f4:	4607      	mov	r7, r0
            String deviceName = subtopics[0];
 23f79f6:	a806      	add	r0, sp, #24
 23f79f8:	f003 fff3 	bl	23fb9e2 <_ZN6StringC1ERKS_>
            Device *device = Device::get(deviceName);
 23f79fc:	a906      	add	r1, sp, #24
 23f79fe:	a812      	add	r0, sp, #72	; 0x48
 23f7a00:	f003 ffef 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f7a04:	a812      	add	r0, sp, #72	; 0x48
 23f7a06:	f000 ff13 	bl	23f8830 <_ZN6Device3getE6String>
 23f7a0a:	4606      	mov	r6, r0
 23f7a0c:	a812      	add	r0, sp, #72	; 0x48
 23f7a0e:	f003 ff51 	bl	23fb8b4 <_ZN6StringD1Ev>
            if( device != NULL && value > 0) {
 23f7a12:	b30e      	cbz	r6, 23f7a58 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x1d0>
 23f7a14:	2f00      	cmp	r7, #0
 23f7a16:	dd1f      	ble.n	23f7a58 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x1d0>
                device->setBrightness(value);
 23f7a18:	6833      	ldr	r3, [r6, #0]
 23f7a1a:	4639      	mov	r1, r7
 23f7a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f7a1e:	4630      	mov	r0, r6
 23f7a20:	4798      	blx	r3
                sendAck(deviceName, "brightness", lcMessage);
 23f7a22:	a906      	add	r1, sp, #24
 23f7a24:	a80a      	add	r0, sp, #40	; 0x28
 23f7a26:	f003 ffdc 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f7a2a:	4958      	ldr	r1, [pc, #352]	; (23f7b8c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x304>)
 23f7a2c:	a80e      	add	r0, sp, #56	; 0x38
 23f7a2e:	f003 ff8c 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
 23f7a32:	4629      	mov	r1, r5
 23f7a34:	a812      	add	r0, sp, #72	; 0x48
 23f7a36:	f003 ffd4 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f7a3a:	ab12      	add	r3, sp, #72	; 0x48
 23f7a3c:	aa0e      	add	r2, sp, #56	; 0x38
 23f7a3e:	a90a      	add	r1, sp, #40	; 0x28
 23f7a40:	4620      	mov	r0, r4
 23f7a42:	f7ff fea7 	bl	23f7794 <_ZN11MQTTManager7sendAckE6StringS0_S0_>
 23f7a46:	a812      	add	r0, sp, #72	; 0x48
 23f7a48:	f003 ff34 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f7a4c:	a80e      	add	r0, sp, #56	; 0x38
 23f7a4e:	f003 ff31 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f7a52:	a80a      	add	r0, sp, #40	; 0x28
 23f7a54:	f003 ff2e 	bl	23fb8b4 <_ZN6StringD1Ev>
            String deviceName = subtopics[0];
 23f7a58:	a806      	add	r0, sp, #24
            String latString = lcMessage.substring(0, commaIndex-1);
 23f7a5a:	f003 ff2b 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f7a5e:	e7a7      	b.n	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
            int commaIndex = lcMessage.indexOf(',');
 23f7a60:	212c      	movs	r1, #44	; 0x2c
 23f7a62:	4628      	mov	r0, r5
 23f7a64:	f004 f910 	bl	23fbc88 <_ZNK6String7indexOfEc>
            if(commaIndex < 0) return;
 23f7a68:	1e04      	subs	r4, r0, #0
 23f7a6a:	dba1      	blt.n	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
            String latString = lcMessage.substring(0, commaIndex-1);
 23f7a6c:	1e63      	subs	r3, r4, #1
 23f7a6e:	2200      	movs	r2, #0
 23f7a70:	4629      	mov	r1, r5
 23f7a72:	a802      	add	r0, sp, #8
 23f7a74:	f004 f90c 	bl	23fbc90 <_ZNK6String9substringEjj>
            String lonString = lcMessage.substring(commaIndex+1);
 23f7a78:	1c62      	adds	r2, r4, #1
 23f7a7a:	4629      	mov	r1, r5
 23f7a7c:	a806      	add	r0, sp, #24
 23f7a7e:	f004 f929 	bl	23fbcd4 <_ZNK6String9substringEj>
            float latitude = latString.toFloat();
 23f7a82:	a802      	add	r0, sp, #8
 23f7a84:	f004 f96a 	bl	23fbd5c <_ZNK6String7toFloatEv>
            float longitude = lonString.toFloat();
 23f7a88:	a806      	add	r0, sp, #24
            float latitude = latString.toFloat();
 23f7a8a:	eeb0 8a40 	vmov.f32	s16, s0
            float longitude = lonString.toFloat();
 23f7a8e:	f004 f965 	bl	23fbd5c <_ZNK6String7toFloatEv>
    StringSumHelper(const char *p) : String(p) {}
 23f7a92:	493f      	ldr	r1, [pc, #252]	; (23f7b90 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x308>)
 23f7a94:	a80e      	add	r0, sp, #56	; 0x38
 23f7a96:	eef0 8a40 	vmov.f32	s17, s0
 23f7a9a:	f003 ff56 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("lat/long = " + String(latitude) + "," + String(longitude));
 23f7a9e:	eeb0 0a48 	vmov.f32	s0, s16
 23f7aa2:	2106      	movs	r1, #6
 23f7aa4:	a80a      	add	r0, sp, #40	; 0x28
 23f7aa6:	f003 ffed 	bl	23fba84 <_ZN6StringC1Efi>
 23f7aaa:	a90a      	add	r1, sp, #40	; 0x28
 23f7aac:	a80e      	add	r0, sp, #56	; 0x38
 23f7aae:	f004 f843 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f7ab2:	4938      	ldr	r1, [pc, #224]	; (23f7b94 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x30c>)
 23f7ab4:	f004 f84c 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f7ab8:	4604      	mov	r4, r0
 23f7aba:	eeb0 0a68 	vmov.f32	s0, s17
 23f7abe:	2106      	movs	r1, #6
 23f7ac0:	a812      	add	r0, sp, #72	; 0x48
 23f7ac2:	f003 ffdf 	bl	23fba84 <_ZN6StringC1Efi>
 23f7ac6:	a912      	add	r1, sp, #72	; 0x48
 23f7ac8:	4620      	mov	r0, r4
 23f7aca:	f004 f835 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f7ace:	6801      	ldr	r1, [r0, #0]
 23f7ad0:	482c      	ldr	r0, [pc, #176]	; (23f7b84 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2fc>)
 23f7ad2:	f7ff f919 	bl	23f6d08 <_ZNK5spark6Logger4infoEPKcz>
 23f7ad6:	a812      	add	r0, sp, #72	; 0x48
 23f7ad8:	f003 feec 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f7adc:	a80a      	add	r0, sp, #40	; 0x28
 23f7ade:	f003 fee9 	bl	23fb8b4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f7ae2:	a80e      	add	r0, sp, #56	; 0x38
 23f7ae4:	f003 fee6 	bl	23fb8b4 <_ZN6StringD1Ev>
            if(latitude != 0 && longitude != 0) {
 23f7ae8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 23f7aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f7af0:	d033      	beq.n	23f7b5a <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2d2>
 23f7af2:	eef5 8a40 	vcmp.f32	s17, #0.0
 23f7af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f7afa:	d02e      	beq.n	23f7b5a <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2d2>
    StringSumHelper(const char *p) : String(p) {}
 23f7afc:	4926      	ldr	r1, [pc, #152]	; (23f7b98 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x310>)
 23f7afe:	a80e      	add	r0, sp, #56	; 0x38
 23f7b00:	f003 ff23 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
                Log.trace("Setting lat/long: " + String(latitude) + "," + String(longitude));
 23f7b04:	eeb0 0a48 	vmov.f32	s0, s16
 23f7b08:	2106      	movs	r1, #6
 23f7b0a:	a80a      	add	r0, sp, #40	; 0x28
 23f7b0c:	f003 ffba 	bl	23fba84 <_ZN6StringC1Efi>
 23f7b10:	a90a      	add	r1, sp, #40	; 0x28
 23f7b12:	a80e      	add	r0, sp, #56	; 0x38
 23f7b14:	f004 f810 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f7b18:	491e      	ldr	r1, [pc, #120]	; (23f7b94 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x30c>)
 23f7b1a:	f004 f819 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f7b1e:	4604      	mov	r4, r0
 23f7b20:	eeb0 0a68 	vmov.f32	s0, s17
 23f7b24:	2106      	movs	r1, #6
 23f7b26:	a812      	add	r0, sp, #72	; 0x48
 23f7b28:	f003 ffac 	bl	23fba84 <_ZN6StringC1Efi>
 23f7b2c:	a912      	add	r1, sp, #72	; 0x48
 23f7b2e:	4620      	mov	r0, r4
 23f7b30:	f004 f802 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f7b34:	6801      	ldr	r1, [r0, #0]
 23f7b36:	4813      	ldr	r0, [pc, #76]	; (23f7b84 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2fc>)
 23f7b38:	f7ff f8f4 	bl	23f6d24 <_ZNK5spark6Logger5traceEPKcz>
 23f7b3c:	a812      	add	r0, sp, #72	; 0x48
 23f7b3e:	f003 feb9 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f7b42:	a80a      	add	r0, sp, #40	; 0x28
 23f7b44:	f003 feb6 	bl	23fb8b4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f7b48:	a80e      	add	r0, sp, #56	; 0x38
 23f7b4a:	f003 feb3 	bl	23fb8b4 <_ZN6StringD1Ev>
                IoT::setLatLong(latitude,longitude);
 23f7b4e:	eef0 0a68 	vmov.f32	s1, s17
 23f7b52:	eeb0 0a48 	vmov.f32	s0, s16
 23f7b56:	f7ff fa55 	bl	23f7004 <_ZN3IoT10setLatLongEff>
            String lonString = lcMessage.substring(commaIndex+1);
 23f7b5a:	a806      	add	r0, sp, #24
 23f7b5c:	f003 feaa 	bl	23fb8b4 <_ZN6StringD1Ev>
            String latString = lcMessage.substring(0, commaIndex-1);
 23f7b60:	a802      	add	r0, sp, #8
 23f7b62:	e77a      	b.n	23f7a5a <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x1d2>
 23f7b64:	023ff895 	.word	0x023ff895
 23f7b68:	023ff486 	.word	0x023ff486
 23f7b6c:	023ff48a 	.word	0x023ff48a
 23f7b70:	023ff490 	.word	0x023ff490
 23f7b74:	023ff49b 	.word	0x023ff49b
 23f7b78:	023ff4ba 	.word	0x023ff4ba
 23f7b7c:	023ff4ed 	.word	0x023ff4ed
 23f7b80:	023ff4f6 	.word	0x023ff4f6
 23f7b84:	1007ae1c 	.word	0x1007ae1c
 23f7b88:	023ff4a5 	.word	0x023ff4a5
 23f7b8c:	023ff4af 	.word	0x023ff4af
 23f7b90:	023ff4cc 	.word	0x023ff4cc
 23f7b94:	023ff4d8 	.word	0x023ff4d8
 23f7b98:	023ff4da 	.word	0x023ff4da
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23f7b9c:	4639      	mov	r1, r7
 23f7b9e:	a81a      	add	r0, sp, #104	; 0x68
 23f7ba0:	f004 f800 	bl	23fbba4 <_ZNK6String6equalsERKS_>
            if(numTopics == 1 || subtopics[1] == _controllerName || subtopics[1] == "all" ) {
 23f7ba4:	2800      	cmp	r0, #0
 23f7ba6:	f47f aee4 	bne.w	23f7972 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0xea>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f7baa:	49aa      	ldr	r1, [pc, #680]	; (23f7e54 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5cc>)
 23f7bac:	a81a      	add	r0, sp, #104	; 0x68
 23f7bae:	f004 f806 	bl	23fbbbe <_ZNK6String6equalsEPKc>
 23f7bb2:	2800      	cmp	r0, #0
 23f7bb4:	f47f aedd 	bne.w	23f7972 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0xea>
 23f7bb8:	e6fa      	b.n	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f7bba:	49a7      	ldr	r1, [pc, #668]	; (23f7e58 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d0>)
 23f7bbc:	a816      	add	r0, sp, #88	; 0x58
 23f7bbe:	f003 fffe 	bl	23fbbbe <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "memory") {
 23f7bc2:	b308      	cbz	r0, 23f7c08 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x380>
            if(lcMessage == _controllerName || lcMessage == "all") {
 23f7bc4:	3428      	adds	r4, #40	; 0x28
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23f7bc6:	4621      	mov	r1, r4
 23f7bc8:	4628      	mov	r0, r5
 23f7bca:	f003 ffeb 	bl	23fbba4 <_ZNK6String6equalsERKS_>
 23f7bce:	b1a0      	cbz	r0, 23f7bfa <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x372>
    StringSumHelper(const String &s) : String(s) {}
 23f7bd0:	4621      	mov	r1, r4
 23f7bd2:	a812      	add	r0, sp, #72	; 0x48
 23f7bd4:	f003 ff05 	bl	23fb9e2 <_ZN6StringC1ERKS_>
                Log.info(_controllerName + ": free memory = %d", System.freeMemory());
 23f7bd8:	49a0      	ldr	r1, [pc, #640]	; (23f7e5c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d4>)
 23f7bda:	a812      	add	r0, sp, #72	; 0x48
 23f7bdc:	f003 ffb8 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
    const char * c_str() const { return buffer; }
 23f7be0:	6801      	ldr	r1, [r0, #0]
 23f7be2:	9101      	str	r1, [sp, #4]
 23f7be4:	f004 f907 	bl	23fbdf6 <_ZN11SystemClass10freeMemoryEv>
 23f7be8:	9901      	ldr	r1, [sp, #4]
 23f7bea:	4602      	mov	r2, r0
 23f7bec:	489c      	ldr	r0, [pc, #624]	; (23f7e60 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f7bee:	f7ff f88b 	bl	23f6d08 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f7bf2:	a812      	add	r0, sp, #72	; 0x48
 23f7bf4:	f003 fe5e 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f7bf8:	e6da      	b.n	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f7bfa:	4628      	mov	r0, r5
 23f7bfc:	4995      	ldr	r1, [pc, #596]	; (23f7e54 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5cc>)
 23f7bfe:	f003 ffde 	bl	23fbbbe <_ZNK6String6equalsEPKc>
            if(lcMessage == _controllerName || lcMessage == "all") {
 23f7c02:	2800      	cmp	r0, #0
 23f7c04:	d1e4      	bne.n	23f7bd0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x348>
 23f7c06:	e6d3      	b.n	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f7c08:	4996      	ldr	r1, [pc, #600]	; (23f7e64 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5dc>)
 23f7c0a:	a816      	add	r0, sp, #88	; 0x58
 23f7c0c:	f003 ffd7 	bl	23fbbbe <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "query") {
 23f7c10:	b1f0      	cbz	r0, 23f7c50 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x3c8>
            if(lcMessage == _controllerName || lcMessage == "all") {
 23f7c12:	3428      	adds	r4, #40	; 0x28
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23f7c14:	4621      	mov	r1, r4
 23f7c16:	4628      	mov	r0, r5
 23f7c18:	f003 ffc4 	bl	23fbba4 <_ZNK6String6equalsERKS_>
 23f7c1c:	b188      	cbz	r0, 23f7c42 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x3ba>
    StringSumHelper(const String &s) : String(s) {}
 23f7c1e:	4621      	mov	r1, r4
 23f7c20:	a812      	add	r0, sp, #72	; 0x48
 23f7c22:	f003 fede 	bl	23fb9e2 <_ZN6StringC1ERKS_>
                Log.info(_controllerName + ": received query addressed to us");
 23f7c26:	4990      	ldr	r1, [pc, #576]	; (23f7e68 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5e0>)
 23f7c28:	a812      	add	r0, sp, #72	; 0x48
 23f7c2a:	f003 ff91 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f7c2e:	6801      	ldr	r1, [r0, #0]
 23f7c30:	488b      	ldr	r0, [pc, #556]	; (23f7e60 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f7c32:	f7ff f869 	bl	23f6d08 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f7c36:	a812      	add	r0, sp, #72	; 0x48
 23f7c38:	f003 fe3c 	bl	23fb8b4 <_ZN6StringD1Ev>
                Device::publishStates();
 23f7c3c:	f000 fede 	bl	23f89fc <_ZN6Device13publishStatesEv>
 23f7c40:	e6b6      	b.n	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f7c42:	4628      	mov	r0, r5
 23f7c44:	4983      	ldr	r1, [pc, #524]	; (23f7e54 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5cc>)
 23f7c46:	f003 ffba 	bl	23fbbbe <_ZNK6String6equalsEPKc>
            if(lcMessage == _controllerName || lcMessage == "all") {
 23f7c4a:	2800      	cmp	r0, #0
 23f7c4c:	d1e7      	bne.n	23f7c1e <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x396>
 23f7c4e:	e6af      	b.n	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f7c50:	4986      	ldr	r1, [pc, #536]	; (23f7e6c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5e4>)
 23f7c52:	a816      	add	r0, sp, #88	; 0x58
 23f7c54:	f003 ffb3 	bl	23fbbbe <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "reset") {
 23f7c58:	b310      	cbz	r0, 23f7ca0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x418>
            if(lcMessage == _controllerName || lcMessage == "all") {
 23f7c5a:	3428      	adds	r4, #40	; 0x28
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23f7c5c:	4621      	mov	r1, r4
 23f7c5e:	4628      	mov	r0, r5
 23f7c60:	f003 ffa0 	bl	23fbba4 <_ZNK6String6equalsERKS_>
 23f7c64:	b1a8      	cbz	r0, 23f7c92 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x40a>
    StringSumHelper(const String &s) : String(s) {}
 23f7c66:	4621      	mov	r1, r4
 23f7c68:	a812      	add	r0, sp, #72	; 0x48
 23f7c6a:	f003 feba 	bl	23fb9e2 <_ZN6StringC1ERKS_>
                Log.info(_controllerName + ": reset addressed to us");
 23f7c6e:	4980      	ldr	r1, [pc, #512]	; (23f7e70 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5e8>)
 23f7c70:	a812      	add	r0, sp, #72	; 0x48
 23f7c72:	f003 ff6d 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f7c76:	6801      	ldr	r1, [r0, #0]
 23f7c78:	4879      	ldr	r0, [pc, #484]	; (23f7e60 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f7c7a:	f7ff f845 	bl	23f6d08 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f7c7e:	a812      	add	r0, sp, #72	; 0x48
 23f7c80:	f003 fe18 	bl	23fb8b4 <_ZN6StringD1Ev>
                Device::resetAll();
 23f7c84:	f000 fdae 	bl	23f87e4 <_ZN6Device8resetAllEv>
                System.reset(RESET_NO_WAIT);
 23f7c88:	4b7a      	ldr	r3, [pc, #488]	; (23f7e74 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5ec>)
 23f7c8a:	6818      	ldr	r0, [r3, #0]
 23f7c8c:	f004 f8ac 	bl	23fbde8 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
 23f7c90:	e68e      	b.n	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f7c92:	4628      	mov	r0, r5
 23f7c94:	496f      	ldr	r1, [pc, #444]	; (23f7e54 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5cc>)
 23f7c96:	f003 ff92 	bl	23fbbbe <_ZNK6String6equalsEPKc>
            if(lcMessage == _controllerName || lcMessage == "all") {
 23f7c9a:	2800      	cmp	r0, #0
 23f7c9c:	d1e3      	bne.n	23f7c66 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x3de>
 23f7c9e:	e687      	b.n	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
        } else if(numTopics > 1 && subtopics[1] == "set") {             // patriot/<device>/set value
 23f7ca0:	2e01      	cmp	r6, #1
 23f7ca2:	d157      	bne.n	23f7d54 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x4cc>
 23f7ca4:	4974      	ldr	r1, [pc, #464]	; (23f7e78 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5f0>)
 23f7ca6:	a816      	add	r0, sp, #88	; 0x58
 23f7ca8:	f003 ff89 	bl	23fbbbe <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "test") {
 23f7cac:	4607      	mov	r7, r0
 23f7cae:	2800      	cmp	r0, #0
 23f7cb0:	f040 80a2 	bne.w	23f7df8 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x570>
 23f7cb4:	4971      	ldr	r1, [pc, #452]	; (23f7e7c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5f4>)
 23f7cb6:	a816      	add	r0, sp, #88	; 0x58
 23f7cb8:	f003 ff81 	bl	23fbbbe <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "timezone") {
 23f7cbc:	2800      	cmp	r0, #0
 23f7cbe:	f43f ae77 	beq.w	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
            Log.info(_controllerName + ": received timezone = " + lcMessage);
 23f7cc2:	3428      	adds	r4, #40	; 0x28
    StringSumHelper(const String &s) : String(s) {}
 23f7cc4:	4621      	mov	r1, r4
 23f7cc6:	a812      	add	r0, sp, #72	; 0x48
 23f7cc8:	f003 fe8b 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f7ccc:	496c      	ldr	r1, [pc, #432]	; (23f7e80 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5f8>)
 23f7cce:	a812      	add	r0, sp, #72	; 0x48
 23f7cd0:	f003 ff3e 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f7cd4:	4629      	mov	r1, r5
 23f7cd6:	f003 ff2f 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f7cda:	6801      	ldr	r1, [r0, #0]
 23f7cdc:	4860      	ldr	r0, [pc, #384]	; (23f7e60 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f7cde:	f7ff f813 	bl	23f6d08 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f7ce2:	a812      	add	r0, sp, #72	; 0x48
 23f7ce4:	f003 fde6 	bl	23fb8b4 <_ZN6StringD1Ev>
            if(lcMessage.charAt(0) == '-') {
 23f7ce8:	4639      	mov	r1, r7
 23f7cea:	4628      	mov	r0, r5
 23f7cec:	f003 ffbc 	bl	23fbc68 <_ZNK6String6charAtEj>
 23f7cf0:	282d      	cmp	r0, #45	; 0x2d
 23f7cf2:	f040 80a5 	bne.w	23f7e40 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5b8>
                timezone = 0 - lcMessage.substring(1).toInt();
 23f7cf6:	4629      	mov	r1, r5
 23f7cf8:	2201      	movs	r2, #1
 23f7cfa:	a812      	add	r0, sp, #72	; 0x48
 23f7cfc:	f003 ffea 	bl	23fbcd4 <_ZNK6String9substringEj>
 23f7d00:	a812      	add	r0, sp, #72	; 0x48
 23f7d02:	f004 f825 	bl	23fbd50 <_ZNK6String5toIntEv>
 23f7d06:	4245      	negs	r5, r0
 23f7d08:	a812      	add	r0, sp, #72	; 0x48
 23f7d0a:	f003 fdd3 	bl	23fb8b4 <_ZN6StringD1Ev>
            if(timezone != 0) {
 23f7d0e:	2d00      	cmp	r5, #0
 23f7d10:	f000 809b 	beq.w	23f7e4a <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5c2>
    StringSumHelper(const String &s) : String(s) {}
 23f7d14:	4621      	mov	r1, r4
 23f7d16:	a80e      	add	r0, sp, #56	; 0x38
 23f7d18:	f003 fe63 	bl	23fb9e2 <_ZN6StringC1ERKS_>
                Log.info(_controllerName + ": setting timezone to: " + String(timezone));
 23f7d1c:	4959      	ldr	r1, [pc, #356]	; (23f7e84 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5fc>)
 23f7d1e:	a80e      	add	r0, sp, #56	; 0x38
 23f7d20:	f003 ff16 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f7d24:	4604      	mov	r4, r0
 23f7d26:	220a      	movs	r2, #10
 23f7d28:	4629      	mov	r1, r5
 23f7d2a:	a812      	add	r0, sp, #72	; 0x48
 23f7d2c:	f003 fe8f 	bl	23fba4e <_ZN6StringC1Eih>
 23f7d30:	a912      	add	r1, sp, #72	; 0x48
 23f7d32:	4620      	mov	r0, r4
 23f7d34:	f003 ff00 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f7d38:	6801      	ldr	r1, [r0, #0]
 23f7d3a:	4849      	ldr	r0, [pc, #292]	; (23f7e60 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f7d3c:	f7fe ffe4 	bl	23f6d08 <_ZNK5spark6Logger4infoEPKcz>
 23f7d40:	a812      	add	r0, sp, #72	; 0x48
 23f7d42:	f003 fdb7 	bl	23fb8b4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f7d46:	a80e      	add	r0, sp, #56	; 0x38
 23f7d48:	f003 fdb4 	bl	23fb8b4 <_ZN6StringD1Ev>
                IoT::setTimezone(timezone);
 23f7d4c:	4628      	mov	r0, r5
 23f7d4e:	f7ff f95b 	bl	23f7008 <_ZN3IoT11setTimezoneEi>
 23f7d52:	e62d      	b.n	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f7d54:	494c      	ldr	r1, [pc, #304]	; (23f7e88 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x600>)
 23f7d56:	a81a      	add	r0, sp, #104	; 0x68
 23f7d58:	f003 ff31 	bl	23fbbbe <_ZNK6String6equalsEPKc>
        } else if(numTopics > 1 && subtopics[1] == "set") {             // patriot/<device>/set value
 23f7d5c:	2800      	cmp	r0, #0
 23f7d5e:	d0a1      	beq.n	23f7ca4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x41c>
            Device *device = Device::get(subtopics[0]);
 23f7d60:	a916      	add	r1, sp, #88	; 0x58
 23f7d62:	a812      	add	r0, sp, #72	; 0x48
 23f7d64:	f003 fe3d 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f7d68:	a812      	add	r0, sp, #72	; 0x48
 23f7d6a:	f000 fd61 	bl	23f8830 <_ZN6Device3getE6String>
 23f7d6e:	4606      	mov	r6, r0
 23f7d70:	a812      	add	r0, sp, #72	; 0x48
 23f7d72:	f003 fd9f 	bl	23fb8b4 <_ZN6StringD1Ev>
            if( device != NULL) {
 23f7d76:	2e00      	cmp	r6, #0
 23f7d78:	f43f ae1a 	beq.w	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
                int value = lcMessage.toInt();  // 0 if not numerical
 23f7d7c:	4628      	mov	r0, r5
 23f7d7e:	f003 ffe7 	bl	23fbd50 <_ZNK6String5toIntEv>
 23f7d82:	4942      	ldr	r1, [pc, #264]	; (23f7e8c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x604>)
 23f7d84:	4607      	mov	r7, r0
 23f7d86:	4628      	mov	r0, r5
 23f7d88:	f003 ff19 	bl	23fbbbe <_ZNK6String6equalsEPKc>
                if(lcMessage == "on" || lcMessage == "true") value = device->brightness();
 23f7d8c:	b980      	cbnz	r0, 23f7db0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x528>
 23f7d8e:	4628      	mov	r0, r5
 23f7d90:	493f      	ldr	r1, [pc, #252]	; (23f7e90 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x608>)
 23f7d92:	f003 ff14 	bl	23fbbbe <_ZNK6String6equalsEPKc>
 23f7d96:	b958      	cbnz	r0, 23f7db0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x528>
 23f7d98:	4628      	mov	r0, r5
 23f7d9a:	493e      	ldr	r1, [pc, #248]	; (23f7e94 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x60c>)
 23f7d9c:	f003 ff0f 	bl	23fbbbe <_ZNK6String6equalsEPKc>
                else if(lcMessage == "off" || lcMessage == "false") value = 0;
 23f7da0:	b920      	cbnz	r0, 23f7dac <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x524>
 23f7da2:	4628      	mov	r0, r5
 23f7da4:	493c      	ldr	r1, [pc, #240]	; (23f7e98 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x610>)
 23f7da6:	f003 ff0a 	bl	23fbbbe <_ZNK6String6equalsEPKc>
 23f7daa:	b130      	cbz	r0, 23f7dba <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x532>
 23f7dac:	2700      	movs	r7, #0
 23f7dae:	e004      	b.n	23f7dba <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x532>
                if(lcMessage == "on" || lcMessage == "true") value = device->brightness();
 23f7db0:	6833      	ldr	r3, [r6, #0]
 23f7db2:	4630      	mov	r0, r6
 23f7db4:	6a1b      	ldr	r3, [r3, #32]
 23f7db6:	4798      	blx	r3
 23f7db8:	4607      	mov	r7, r0
                device->setValue(value);
 23f7dba:	6833      	ldr	r3, [r6, #0]
 23f7dbc:	4639      	mov	r1, r7
 23f7dbe:	699b      	ldr	r3, [r3, #24]
 23f7dc0:	4630      	mov	r0, r6
 23f7dc2:	4798      	blx	r3
                sendAck(subtopics[0], "set", lcMessage);
 23f7dc4:	a916      	add	r1, sp, #88	; 0x58
 23f7dc6:	a80a      	add	r0, sp, #40	; 0x28
 23f7dc8:	f003 fe0b 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f7dcc:	492e      	ldr	r1, [pc, #184]	; (23f7e88 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x600>)
 23f7dce:	a80e      	add	r0, sp, #56	; 0x38
 23f7dd0:	f003 fdbb 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
 23f7dd4:	4629      	mov	r1, r5
 23f7dd6:	a812      	add	r0, sp, #72	; 0x48
 23f7dd8:	f003 fe03 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f7ddc:	ab12      	add	r3, sp, #72	; 0x48
 23f7dde:	aa0e      	add	r2, sp, #56	; 0x38
 23f7de0:	a90a      	add	r1, sp, #40	; 0x28
 23f7de2:	4620      	mov	r0, r4
 23f7de4:	f7ff fcd6 	bl	23f7794 <_ZN11MQTTManager7sendAckE6StringS0_S0_>
 23f7de8:	a812      	add	r0, sp, #72	; 0x48
 23f7dea:	f003 fd63 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f7dee:	a80e      	add	r0, sp, #56	; 0x38
 23f7df0:	f003 fd60 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f7df4:	a80a      	add	r0, sp, #40	; 0x28
 23f7df6:	e630      	b.n	23f7a5a <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x1d2>
            if(numTopics > 1 && (subtopics[1] == _controllerName || subtopics[1] == "all")) {
 23f7df8:	2e01      	cmp	r6, #1
 23f7dfa:	f43f add9 	beq.w	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f7dfe:	3428      	adds	r4, #40	; 0x28
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23f7e00:	4621      	mov	r1, r4
 23f7e02:	a81a      	add	r0, sp, #104	; 0x68
 23f7e04:	f003 fece 	bl	23fbba4 <_ZNK6String6equalsERKS_>
 23f7e08:	b198      	cbz	r0, 23f7e32 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5aa>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f7e0a:	4628      	mov	r0, r5
 23f7e0c:	4923      	ldr	r1, [pc, #140]	; (23f7e9c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x614>)
 23f7e0e:	f003 fed6 	bl	23fbbbe <_ZNK6String6equalsEPKc>
                if(lcMessage == "mqtt") {
 23f7e12:	2800      	cmp	r0, #0
 23f7e14:	f43f adcc 	beq.w	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
    StringSumHelper(const String &s) : String(s) {}
 23f7e18:	4621      	mov	r1, r4
 23f7e1a:	a812      	add	r0, sp, #72	; 0x48
 23f7e1c:	f003 fde1 	bl	23fb9e2 <_ZN6StringC1ERKS_>
                    Log.info(_controllerName + ": test disable MQTT");
 23f7e20:	491f      	ldr	r1, [pc, #124]	; (23f7ea0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x618>)
 23f7e22:	a812      	add	r0, sp, #72	; 0x48
 23f7e24:	f003 fe94 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f7e28:	6801      	ldr	r1, [r0, #0]
 23f7e2a:	480d      	ldr	r0, [pc, #52]	; (23f7e60 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f7e2c:	f7fe ff6c 	bl	23f6d08 <_ZNK5spark6Logger4infoEPKcz>
 23f7e30:	e6df      	b.n	23f7bf2 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x36a>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f7e32:	4908      	ldr	r1, [pc, #32]	; (23f7e54 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5cc>)
 23f7e34:	a81a      	add	r0, sp, #104	; 0x68
 23f7e36:	f003 fec2 	bl	23fbbbe <_ZNK6String6equalsEPKc>
            if(numTopics > 1 && (subtopics[1] == _controllerName || subtopics[1] == "all")) {
 23f7e3a:	2800      	cmp	r0, #0
 23f7e3c:	d1e5      	bne.n	23f7e0a <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x582>
 23f7e3e:	e5b7      	b.n	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
                timezone = lcMessage.toInt();
 23f7e40:	4628      	mov	r0, r5
 23f7e42:	f003 ff85 	bl	23fbd50 <_ZNK6String5toIntEv>
 23f7e46:	4605      	mov	r5, r0
 23f7e48:	e761      	b.n	23f7d0e <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x486>
                Log.error("Invalid timezone");
 23f7e4a:	4916      	ldr	r1, [pc, #88]	; (23f7ea4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x61c>)
 23f7e4c:	4804      	ldr	r0, [pc, #16]	; (23f7e60 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f7e4e:	f7fe ff4d 	bl	23f6cec <_ZNK5spark6Logger5errorEPKcz>
 23f7e52:	e5ad      	b.n	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f7e54:	023ff482 	.word	0x023ff482
 23f7e58:	023ff50b 	.word	0x023ff50b
 23f7e5c:	023ff512 	.word	0x023ff512
 23f7e60:	1007ae1c 	.word	0x1007ae1c
 23f7e64:	023ff525 	.word	0x023ff525
 23f7e68:	023ff52b 	.word	0x023ff52b
 23f7e6c:	023ff54c 	.word	0x023ff54c
 23f7e70:	023ff552 	.word	0x023ff552
 23f7e74:	1007ad70 	.word	0x1007ad70
 23f7e78:	023ff56a 	.word	0x023ff56a
 23f7e7c:	023ff5ce 	.word	0x023ff5ce
 23f7e80:	023ff597 	.word	0x023ff597
 23f7e84:	023ff5ae 	.word	0x023ff5ae
 23f7e88:	023ff54e 	.word	0x023ff54e
 23f7e8c:	023ff776 	.word	0x023ff776
 23f7e90:	023ff56f 	.word	0x023ff56f
 23f7e94:	023ff574 	.word	0x023ff574
 23f7e98:	023ff578 	.word	0x023ff578
 23f7e9c:	023ff57e 	.word	0x023ff57e
 23f7ea0:	023ff583 	.word	0x023ff583
 23f7ea4:	023ff5c6 	.word	0x023ff5c6
 23f7ea8:	4919      	ldr	r1, [pc, #100]	; (23f7f10 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x688>)
 23f7eaa:	a81a      	add	r0, sp, #104	; 0x68
 23f7eac:	f003 fe87 	bl	23fbbbe <_ZNK6String6equalsEPKc>
        } else if(numTopics > 1 && subtopics[1] == "hold") {             // patriot/<device>/hold n/a
 23f7eb0:	2800      	cmp	r0, #0
 23f7eb2:	f43f ad4b 	beq.w	23f794c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0xc4>
            Device *device = Device::get(subtopics[0]);
 23f7eb6:	a916      	add	r1, sp, #88	; 0x58
 23f7eb8:	a812      	add	r0, sp, #72	; 0x48
 23f7eba:	f003 fd92 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f7ebe:	a812      	add	r0, sp, #72	; 0x48
 23f7ec0:	f000 fcb6 	bl	23f8830 <_ZN6Device3getE6String>
 23f7ec4:	4606      	mov	r6, r0
 23f7ec6:	a812      	add	r0, sp, #72	; 0x48
 23f7ec8:	f003 fcf4 	bl	23fb8b4 <_ZN6StringD1Ev>
            if( device != NULL) {
 23f7ecc:	2e00      	cmp	r6, #0
 23f7ece:	f43f ad6f 	beq.w	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
    StringSumHelper(const String &s) : String(s) {}
 23f7ed2:	f104 0128 	add.w	r1, r4, #40	; 0x28
 23f7ed6:	a812      	add	r0, sp, #72	; 0x48
 23f7ed8:	f003 fd83 	bl	23fb9e2 <_ZN6StringC1ERKS_>
                Log.info(_controllerName + ": hold " + subtopics[0]);
 23f7edc:	490d      	ldr	r1, [pc, #52]	; (23f7f14 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x68c>)
 23f7ede:	a812      	add	r0, sp, #72	; 0x48
 23f7ee0:	f003 fe36 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f7ee4:	a916      	add	r1, sp, #88	; 0x58
 23f7ee6:	f003 fe27 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f7eea:	6801      	ldr	r1, [r0, #0]
 23f7eec:	480a      	ldr	r0, [pc, #40]	; (23f7f18 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x690>)
 23f7eee:	f7fe ff0b 	bl	23f6d08 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f7ef2:	a812      	add	r0, sp, #72	; 0x48
 23f7ef4:	f003 fcde 	bl	23fb8b4 <_ZN6StringD1Ev>
                device->setHold(lcMessage != "0"); // not sure what message will be
 23f7ef8:	6833      	ldr	r3, [r6, #0]
    unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 23f7efa:	4628      	mov	r0, r5
 23f7efc:	4907      	ldr	r1, [pc, #28]	; (23f7f1c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x694>)
 23f7efe:	69dc      	ldr	r4, [r3, #28]
 23f7f00:	f003 fe5d 	bl	23fbbbe <_ZNK6String6equalsEPKc>
 23f7f04:	fab0 f180 	clz	r1, r0
 23f7f08:	4630      	mov	r0, r6
 23f7f0a:	0949      	lsrs	r1, r1, #5
 23f7f0c:	47a0      	blx	r4
 23f7f0e:	e54f      	b.n	23f79b0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f7f10:	023ff5d7 	.word	0x023ff5d7
 23f7f14:	023ff4c2 	.word	0x023ff4c2
 23f7f18:	1007ae1c 	.word	0x1007ae1c
 23f7f1c:	023ff4ca 	.word	0x023ff4ca

023f7f20 <_ZN11MQTTManager16parseMQTTMessageE6StringS0_>:
{
 23f7f20:	b570      	push	{r4, r5, r6, lr}
 23f7f22:	b08c      	sub	sp, #48	; 0x30
 23f7f24:	460d      	mov	r5, r1
 23f7f26:	4604      	mov	r4, r0
 23f7f28:	4616      	mov	r6, r2
    _lastMQTTtime = Time.now();
 23f7f2a:	f004 fc00 	bl	23fc72e <_ZN9TimeClass3nowEv>
    if(lcTopic.startsWith(kPublishName)) {
 23f7f2e:	4912      	ldr	r1, [pc, #72]	; (23f7f78 <_ZN11MQTTManager16parseMQTTMessageE6StringS0_+0x58>)
    _lastMQTTtime = Time.now();
 23f7f30:	63a0      	str	r0, [r4, #56]	; 0x38
    if(lcTopic.startsWith(kPublishName)) {
 23f7f32:	4628      	mov	r0, r5
 23f7f34:	f003 fe86 	bl	23fbc44 <_ZNK6String10startsWithERKS_>
 23f7f38:	b1e0      	cbz	r0, 23f7f74 <_ZN11MQTTManager16parseMQTTMessageE6StringS0_+0x54>
        String subtopics = lcTopic.substring(8);                    // Skip over "patriot/"
 23f7f3a:	2208      	movs	r2, #8
 23f7f3c:	4629      	mov	r1, r5
 23f7f3e:	4668      	mov	r0, sp
 23f7f40:	f003 fec8 	bl	23fbcd4 <_ZNK6String9substringEj>
        if(subtopics.length() > 0) {                                // Must have at least 1 subtopic
 23f7f44:	9b02      	ldr	r3, [sp, #8]
 23f7f46:	b193      	cbz	r3, 23f7f6e <_ZN11MQTTManager16parseMQTTMessageE6StringS0_+0x4e>
            parsePatriotMessage(subtopics, lcMessage);
 23f7f48:	4669      	mov	r1, sp
 23f7f4a:	a804      	add	r0, sp, #16
 23f7f4c:	f003 fd49 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f7f50:	4631      	mov	r1, r6
 23f7f52:	a808      	add	r0, sp, #32
 23f7f54:	f003 fd45 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f7f58:	4620      	mov	r0, r4
 23f7f5a:	aa08      	add	r2, sp, #32
 23f7f5c:	a904      	add	r1, sp, #16
 23f7f5e:	f7ff fc93 	bl	23f7888 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_>
 23f7f62:	a808      	add	r0, sp, #32
 23f7f64:	f003 fca6 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f7f68:	a804      	add	r0, sp, #16
 23f7f6a:	f003 fca3 	bl	23fb8b4 <_ZN6StringD1Ev>
        String subtopics = lcTopic.substring(8);                    // Skip over "patriot/"
 23f7f6e:	4668      	mov	r0, sp
 23f7f70:	f003 fca0 	bl	23fb8b4 <_ZN6StringD1Ev>
}
 23f7f74:	b00c      	add	sp, #48	; 0x30
 23f7f76:	bd70      	pop	{r4, r5, r6, pc}
 23f7f78:	1007ad60 	.word	0x1007ad60

023f7f7c <_ZN11MQTTManager15extractFileNameEPKc>:

// The following methods are taken from Particle FW, specifically spark::StreamLogHandler.
// See https://github.com/spark/firmware/blob/develop/wiring/src/spark_wiring_logging.cpp
const char* MQTTManager::extractFileName(const char *s) {
 23f7f7c:	b510      	push	{r4, lr}
 23f7f7e:	460c      	mov	r4, r1
    const char *s1 = strrchr(s, '/');
 23f7f80:	212f      	movs	r1, #47	; 0x2f
 23f7f82:	4620      	mov	r0, r4
 23f7f84:	f005 f9c4 	bl	23fd310 <strrchr>
    if (s1) {
 23f7f88:	b100      	cbz	r0, 23f7f8c <_ZN11MQTTManager15extractFileNameEPKc+0x10>
        return s1 + 1;
 23f7f8a:	1c44      	adds	r4, r0, #1
    }
    return s;
}
 23f7f8c:	4620      	mov	r0, r4
 23f7f8e:	bd10      	pop	{r4, pc}

023f7f90 <_ZN11MQTTManager15extractFuncNameEPKcPj>:

const char* MQTTManager::extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
 23f7f90:	460b      	mov	r3, r1
const char* MQTTManager::extractFuncName(const char *s, size_t *size) {
 23f7f92:	b510      	push	{r4, lr}
 23f7f94:	4618      	mov	r0, r3
    for (; *s; ++s) {
 23f7f96:	f813 4b01 	ldrb.w	r4, [r3], #1
 23f7f9a:	b12c      	cbz	r4, 23f7fa8 <_ZN11MQTTManager15extractFuncNameEPKcPj+0x18>
        if (*s == ' ') {
 23f7f9c:	2c20      	cmp	r4, #32
 23f7f9e:	d101      	bne.n	23f7fa4 <_ZN11MQTTManager15extractFuncNameEPKcPj+0x14>
            s1 = s + 1;                                                                                                                         // Skip return type
 23f7fa0:	4619      	mov	r1, r3
 23f7fa2:	e7f7      	b.n	23f7f94 <_ZN11MQTTManager15extractFuncNameEPKcPj+0x4>
        } else if (*s == '(') {
 23f7fa4:	2c28      	cmp	r4, #40	; 0x28
 23f7fa6:	d1f5      	bne.n	23f7f94 <_ZN11MQTTManager15extractFuncNameEPKcPj+0x4>
            break;                                                                                                                         // Skip argument types
        }
    }
    *size = s - s1;
 23f7fa8:	1a40      	subs	r0, r0, r1
 23f7faa:	6010      	str	r0, [r2, #0]
    return s1;
}
 23f7fac:	4608      	mov	r0, r1
 23f7fae:	bd10      	pop	{r4, pc}

023f7fb0 <_ZN11MQTTManager3logEPKc6String>:
    //    Serial.println(s);
    log(category, s);
}

// This is our formatter. We can format messages however we want.
void MQTTManager::log(const char *category, String message) {
 23f7fb0:	b570      	push	{r4, r5, r6, lr}
 23f7fb2:	b096      	sub	sp, #88	; 0x58
 23f7fb4:	4604      	mov	r4, r0
 23f7fb6:	4615      	mov	r5, r2
         */
        String format(time_t t, const char* format_spec=NULL);

        inline String format(const char* format_spec=NULL)
        {
            return format(now(), format_spec);
 23f7fb8:	f004 fbb9 	bl	23fc72e <_ZN9TimeClass3nowEv>
 23f7fbc:	4b21      	ldr	r3, [pc, #132]	; (23f8044 <_ZN11MQTTManager3logEPKc6String+0x94>)
 23f7fbe:	4602      	mov	r2, r0
 23f7fc0:	9300      	str	r3, [sp, #0]
 23f7fc2:	4921      	ldr	r1, [pc, #132]	; (23f8048 <_ZN11MQTTManager3logEPKc6String+0x98>)
 23f7fc4:	17c3      	asrs	r3, r0, #31
 23f7fc6:	a802      	add	r0, sp, #8
 23f7fc8:	f004 fb52 	bl	23fc670 <_ZN9TimeClass6formatExPKc>
    // As recommended by ScruffR, don't pass time argument
    String time = Time.format("%a %H:%M");
    
    if(!_logging) {
 23f7fcc:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 23f7fce:	2e00      	cmp	r6, #0
 23f7fd0:	d132      	bne.n	23f8038 <_ZN11MQTTManager3logEPKc6String+0x88>
        _logging++;
 23f7fd2:	2301      	movs	r3, #1
    StringSumHelper(const char *p) : String(p) {}
 23f7fd4:	491d      	ldr	r1, [pc, #116]	; (23f804c <_ZN11MQTTManager3logEPKc6String+0x9c>)
 23f7fd6:	64e3      	str	r3, [r4, #76]	; 0x4c
 23f7fd8:	a806      	add	r0, sp, #24
 23f7fda:	f003 fcb6 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
        // Separate topic now, allows logging patriot/ messages without causing a loop
        publish("log/"+_controllerName, time + " " + message, false);
 23f7fde:	f104 0128 	add.w	r1, r4, #40	; 0x28
 23f7fe2:	a806      	add	r0, sp, #24
 23f7fe4:	f003 fda8 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f7fe8:	4601      	mov	r1, r0
 23f7fea:	a80e      	add	r0, sp, #56	; 0x38
 23f7fec:	f003 fcf9 	bl	23fb9e2 <_ZN6StringC1ERKS_>
    StringSumHelper(const String &s) : String(s) {}
 23f7ff0:	a902      	add	r1, sp, #8
 23f7ff2:	a80a      	add	r0, sp, #40	; 0x28
 23f7ff4:	f003 fcf5 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f7ff8:	4915      	ldr	r1, [pc, #84]	; (23f8050 <_ZN11MQTTManager3logEPKc6String+0xa0>)
 23f7ffa:	a80a      	add	r0, sp, #40	; 0x28
 23f7ffc:	f003 fda8 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f8000:	4629      	mov	r1, r5
 23f8002:	f003 fd99 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f8006:	4601      	mov	r1, r0
 23f8008:	a812      	add	r0, sp, #72	; 0x48
 23f800a:	f003 fcea 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f800e:	4633      	mov	r3, r6
 23f8010:	aa12      	add	r2, sp, #72	; 0x48
 23f8012:	a90e      	add	r1, sp, #56	; 0x38
 23f8014:	4620      	mov	r0, r4
 23f8016:	f7ff fb39 	bl	23f768c <_ZN11MQTTManager7publishE6StringS0_b>
 23f801a:	a812      	add	r0, sp, #72	; 0x48
 23f801c:	f003 fc4a 	bl	23fb8b4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f8020:	a80a      	add	r0, sp, #40	; 0x28
 23f8022:	f003 fc47 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f8026:	a80e      	add	r0, sp, #56	; 0x38
 23f8028:	f003 fc44 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f802c:	a806      	add	r0, sp, #24
 23f802e:	f003 fc41 	bl	23fb8b4 <_ZN6StringD1Ev>
        _logging--;
 23f8032:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 23f8034:	3b01      	subs	r3, #1
 23f8036:	64e3      	str	r3, [r4, #76]	; 0x4c
    String time = Time.format("%a %H:%M");
 23f8038:	a802      	add	r0, sp, #8
 23f803a:	f003 fc3b 	bl	23fb8b4 <_ZN6StringD1Ev>
    }
}
 23f803e:	b016      	add	sp, #88	; 0x58
 23f8040:	bd70      	pop	{r4, r5, r6, pc}
 23f8042:	bf00      	nop
 23f8044:	023ff448 	.word	0x023ff448
 23f8048:	1007ae70 	.word	0x1007ae70
 23f804c:	023ff5dc 	.word	0x023ff5dc
 23f8050:	023ff446 	.word	0x023ff446

023f8054 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes>:
void MQTTManager::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f8054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f8058:	4605      	mov	r5, r0
 23f805a:	4617      	mov	r7, r2
 23f805c:	b088      	sub	sp, #32
 23f805e:	460e      	mov	r6, r1
    String s;
 23f8060:	4668      	mov	r0, sp
 23f8062:	494c      	ldr	r1, [pc, #304]	; (23f8194 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x140>)
void MQTTManager::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f8064:	4698      	mov	r8, r3
 23f8066:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    String s;
 23f8068:	f003 fc6f 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
    if (level < _logLevel) {
 23f806c:	f895 3020 	ldrb.w	r3, [r5, #32]
 23f8070:	42bb      	cmp	r3, r7
 23f8072:	d905      	bls.n	23f8080 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x2c>
    String s;
 23f8074:	4668      	mov	r0, sp
 23f8076:	f003 fc1d 	bl	23fb8b4 <_ZN6StringD1Ev>
}
 23f807a:	b008      	add	sp, #32
 23f807c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (attr.has_file) {
 23f8080:	7923      	ldrb	r3, [r4, #4]
 23f8082:	07d9      	lsls	r1, r3, #31
 23f8084:	d526      	bpl.n	23f80d4 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x80>
        s = extractFileName(attr.file);                                                                                 // Strip directory path
 23f8086:	68a1      	ldr	r1, [r4, #8]
 23f8088:	4628      	mov	r0, r5
 23f808a:	f7ff ff77 	bl	23f7f7c <_ZN11MQTTManager15extractFileNameEPKc>
 23f808e:	4601      	mov	r1, r0
 23f8090:	4668      	mov	r0, sp
 23f8092:	f003 fcb9 	bl	23fba08 <_ZN6StringaSEPKc>
        s.concat(s);                                                                                 // File name
 23f8096:	4669      	mov	r1, sp
 23f8098:	4668      	mov	r0, sp
 23f809a:	f003 fd2b 	bl	23fbaf4 <_ZN6String6concatERKS_>
        if (attr.has_line) {
 23f809e:	7923      	ldrb	r3, [r4, #4]
 23f80a0:	079a      	lsls	r2, r3, #30
 23f80a2:	d50f      	bpl.n	23f80c4 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x70>
            s.concat(":");
 23f80a4:	493c      	ldr	r1, [pc, #240]	; (23f8198 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x144>)
 23f80a6:	4668      	mov	r0, sp
 23f80a8:	f003 fd28 	bl	23fbafc <_ZN6String6concatEPKc>
            s.concat(String(attr.line));                                                                                                                         // Line number
 23f80ac:	220a      	movs	r2, #10
 23f80ae:	68e1      	ldr	r1, [r4, #12]
 23f80b0:	a804      	add	r0, sp, #16
 23f80b2:	f003 fccc 	bl	23fba4e <_ZN6StringC1Eih>
 23f80b6:	4668      	mov	r0, sp
 23f80b8:	a904      	add	r1, sp, #16
 23f80ba:	f003 fd1b 	bl	23fbaf4 <_ZN6String6concatERKS_>
 23f80be:	a804      	add	r0, sp, #16
 23f80c0:	f003 fbf8 	bl	23fb8b4 <_ZN6StringD1Ev>
        if (attr.has_function) {
 23f80c4:	7923      	ldrb	r3, [r4, #4]
            s.concat(": ");
 23f80c6:	4668      	mov	r0, sp
        if (attr.has_function) {
 23f80c8:	075b      	lsls	r3, r3, #29
            s.concat(", ");
 23f80ca:	bf4c      	ite	mi
 23f80cc:	4933      	ldrmi	r1, [pc, #204]	; (23f819c <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x148>)
            s.concat(": ");
 23f80ce:	4934      	ldrpl	r1, [pc, #208]	; (23f81a0 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x14c>)
 23f80d0:	f003 fd14 	bl	23fbafc <_ZN6String6concatEPKc>
    if (attr.has_function) {
 23f80d4:	7923      	ldrb	r3, [r4, #4]
 23f80d6:	0758      	lsls	r0, r3, #29
 23f80d8:	d512      	bpl.n	23f8100 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0xac>
        size_t n = 0;
 23f80da:	2300      	movs	r3, #0
        s = extractFuncName(attr.function, &n);                                                                                 // Strip argument and return types
 23f80dc:	aa04      	add	r2, sp, #16
 23f80de:	6921      	ldr	r1, [r4, #16]
 23f80e0:	4628      	mov	r0, r5
        size_t n = 0;
 23f80e2:	9304      	str	r3, [sp, #16]
        s = extractFuncName(attr.function, &n);                                                                                 // Strip argument and return types
 23f80e4:	f7ff ff54 	bl	23f7f90 <_ZN11MQTTManager15extractFuncNameEPKcPj>
 23f80e8:	4601      	mov	r1, r0
 23f80ea:	4668      	mov	r0, sp
 23f80ec:	f003 fc8c 	bl	23fba08 <_ZN6StringaSEPKc>
        s.concat(s);
 23f80f0:	4669      	mov	r1, sp
 23f80f2:	4668      	mov	r0, sp
 23f80f4:	f003 fcfe 	bl	23fbaf4 <_ZN6String6concatERKS_>
        s.concat("(): ");
 23f80f8:	4668      	mov	r0, sp
 23f80fa:	492a      	ldr	r1, [pc, #168]	; (23f81a4 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x150>)
 23f80fc:	f003 fcfe 	bl	23fbafc <_ZN6String6concatEPKc>
    return log_level_name(level, nullptr);
 23f8100:	2100      	movs	r1, #0
 23f8102:	4638      	mov	r0, r7
 23f8104:	f001 fcaa 	bl	23f9a5c <log_level_name>
 23f8108:	4601      	mov	r1, r0
    s.concat(levelName(level));
 23f810a:	4668      	mov	r0, sp
 23f810c:	f003 fcf6 	bl	23fbafc <_ZN6String6concatEPKc>
    s.concat(": ");
 23f8110:	4668      	mov	r0, sp
 23f8112:	4923      	ldr	r1, [pc, #140]	; (23f81a0 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x14c>)
 23f8114:	f003 fcf2 	bl	23fbafc <_ZN6String6concatEPKc>
    if (msg) {
 23f8118:	b11e      	cbz	r6, 23f8122 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0xce>
        s.concat(msg);
 23f811a:	4631      	mov	r1, r6
 23f811c:	4668      	mov	r0, sp
 23f811e:	f003 fced 	bl	23fbafc <_ZN6String6concatEPKc>
    if (attr.has_code || attr.has_details) {
 23f8122:	7923      	ldrb	r3, [r4, #4]
 23f8124:	f013 0f30 	tst.w	r3, #48	; 0x30
 23f8128:	d027      	beq.n	23f817a <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x126>
        s.concat(" [");
 23f812a:	491f      	ldr	r1, [pc, #124]	; (23f81a8 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x154>)
 23f812c:	4668      	mov	r0, sp
 23f812e:	f003 fce5 	bl	23fbafc <_ZN6String6concatEPKc>
        if (attr.has_code) {
 23f8132:	7923      	ldrb	r3, [r4, #4]
 23f8134:	06d9      	lsls	r1, r3, #27
 23f8136:	d50b      	bpl.n	23f8150 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0xfc>
            s.concat(String::format("code = %p", (intptr_t)attr.code));
 23f8138:	69a2      	ldr	r2, [r4, #24]
 23f813a:	491c      	ldr	r1, [pc, #112]	; (23f81ac <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x158>)
 23f813c:	a804      	add	r0, sp, #16
 23f813e:	f003 fe1f 	bl	23fbd80 <_ZN6String6formatEPKcz>
 23f8142:	4668      	mov	r0, sp
 23f8144:	a904      	add	r1, sp, #16
 23f8146:	f003 fcd5 	bl	23fbaf4 <_ZN6String6concatERKS_>
 23f814a:	a804      	add	r0, sp, #16
 23f814c:	f003 fbb2 	bl	23fb8b4 <_ZN6StringD1Ev>
        if (attr.has_details) {
 23f8150:	7923      	ldrb	r3, [r4, #4]
 23f8152:	069a      	lsls	r2, r3, #26
 23f8154:	d50d      	bpl.n	23f8172 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x11e>
            if (attr.has_code) {
 23f8156:	06db      	lsls	r3, r3, #27
 23f8158:	d503      	bpl.n	23f8162 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x10e>
                s.concat(", ");
 23f815a:	4668      	mov	r0, sp
 23f815c:	490f      	ldr	r1, [pc, #60]	; (23f819c <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x148>)
 23f815e:	f003 fccd 	bl	23fbafc <_ZN6String6concatEPKc>
            s.concat("details = ");
 23f8162:	4913      	ldr	r1, [pc, #76]	; (23f81b0 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x15c>)
 23f8164:	4668      	mov	r0, sp
 23f8166:	f003 fcc9 	bl	23fbafc <_ZN6String6concatEPKc>
            s.concat(attr.details);
 23f816a:	4668      	mov	r0, sp
 23f816c:	69e1      	ldr	r1, [r4, #28]
 23f816e:	f003 fcc5 	bl	23fbafc <_ZN6String6concatEPKc>
        s.concat(']');
 23f8172:	215d      	movs	r1, #93	; 0x5d
 23f8174:	4668      	mov	r0, sp
 23f8176:	f003 fcd2 	bl	23fbb1e <_ZN6String6concatEc>
    log(category, s);
 23f817a:	4669      	mov	r1, sp
 23f817c:	a804      	add	r0, sp, #16
 23f817e:	f003 fc30 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f8182:	4628      	mov	r0, r5
 23f8184:	4641      	mov	r1, r8
 23f8186:	aa04      	add	r2, sp, #16
 23f8188:	f7ff ff12 	bl	23f7fb0 <_ZN11MQTTManager3logEPKc6String>
 23f818c:	a804      	add	r0, sp, #16
 23f818e:	f003 fb91 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f8192:	e76f      	b.n	23f8074 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x20>
 23f8194:	023ff895 	.word	0x023ff895
 23f8198:	023ff5e1 	.word	0x023ff5e1
 23f819c:	023ff445 	.word	0x023ff445
 23f81a0:	023ff5e5 	.word	0x023ff5e5
 23f81a4:	023ff5e3 	.word	0x023ff5e3
 23f81a8:	023ff5e8 	.word	0x023ff5e8
 23f81ac:	023ff5eb 	.word	0x023ff5eb
 23f81b0:	023ff5f5 	.word	0x023ff5f5

023f81b4 <_ZN11MQTTManager14blinkStatusLedEv>:
// Off: WiFi not connected
// 3 blinks: WiFi and/or MQTT not connected
// 2 blinks: MQTT connecting
// 1 blink: MQTT connected and subscribed
//
void MQTTManager::blinkStatusLed() {
 23f81b4:	b510      	push	{r4, lr}
 23f81b6:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f81b8:	f001 f94e 	bl	23f9458 <HAL_Timer_Get_Milli_Seconds>
    
    if(millis() >= _lastBlinkTimeMs + BLINK_INTERVAL) {
 23f81bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 23f81be:	33fa      	adds	r3, #250	; 0xfa
 23f81c0:	4283      	cmp	r3, r0
 23f81c2:	d82a      	bhi.n	23f821a <_ZN11MQTTManager14blinkStatusLedEv+0x66>
 23f81c4:	f001 f948 	bl	23f9458 <HAL_Timer_Get_Milli_Seconds>
        
        _lastBlinkTimeMs = millis();
        _blinkPhase++;
 23f81c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        _lastBlinkTimeMs = millis();
 23f81ca:	6460      	str	r0, [r4, #68]	; 0x44
        _blinkPhase++;
 23f81cc:	3301      	adds	r3, #1
    return WiFi.ready();
 23f81ce:	4813      	ldr	r0, [pc, #76]	; (23f821c <_ZN11MQTTManager14blinkStatusLedEv+0x68>)
        _blinkPhase++;
 23f81d0:	64a3      	str	r3, [r4, #72]	; 0x48
    return WiFi.ready();
 23f81d2:	f7ff f90d 	bl	23f73f0 <_ZN5spark9WiFiClass5readyEv>
        
        int nextLed = LOW;
        
        // 3 short blinks = WiFi and/or MQTT Not Connected
        if(!wifiConnected() || !mqttConnected()) {
 23f81d6:	b950      	cbnz	r0, 23f81ee <_ZN11MQTTManager14blinkStatusLedEv+0x3a>
            if(_blinkPhase == 1 || _blinkPhase == 3 || _blinkPhase == 5) {
 23f81d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 23f81da:	f023 0202 	bic.w	r2, r3, #2
 23f81de:	2a01      	cmp	r2, #1
 23f81e0:	d112      	bne.n	23f8208 <_ZN11MQTTManager14blinkStatusLedEv+0x54>
                nextLed = HIGH;
 23f81e2:	2101      	movs	r1, #1
                _blinkPhase = 0;
            }
        }
        digitalWrite(D7, nextLed);
    }
}
 23f81e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(D7, nextLed);
 23f81e8:	2007      	movs	r0, #7
 23f81ea:	f004 bd58 	b.w	23fcc9e <digitalWrite>
        if(!wifiConnected() || !mqttConnected()) {
 23f81ee:	4620      	mov	r0, r4
 23f81f0:	f7ff f911 	bl	23f7416 <_ZN11MQTTManager13mqttConnectedEv>
 23f81f4:	2800      	cmp	r0, #0
 23f81f6:	d0ef      	beq.n	23f81d8 <_ZN11MQTTManager14blinkStatusLedEv+0x24>
        } else if(_mqttSubscribed == false) {
 23f81f8:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
            if(_blinkPhase == 1 || _blinkPhase == 3) {
 23f81fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        } else if(_mqttSubscribed == false) {
 23f81fe:	b952      	cbnz	r2, 23f8216 <_ZN11MQTTManager14blinkStatusLedEv+0x62>
            if(_blinkPhase == 1 || _blinkPhase == 3) {
 23f8200:	f023 0202 	bic.w	r2, r3, #2
 23f8204:	2a01      	cmp	r2, #1
 23f8206:	e000      	b.n	23f820a <_ZN11MQTTManager14blinkStatusLedEv+0x56>
            if(_blinkPhase == 1 || _blinkPhase == 3 || _blinkPhase == 5) {
 23f8208:	2b05      	cmp	r3, #5
 23f820a:	d0ea      	beq.n	23f81e2 <_ZN11MQTTManager14blinkStatusLedEv+0x2e>
                _blinkPhase = 0;
 23f820c:	2100      	movs	r1, #0
            } else if(_blinkPhase > 8) {
 23f820e:	2b08      	cmp	r3, #8
                _blinkPhase = 0;
 23f8210:	bfc8      	it	gt
 23f8212:	64a1      	strgt	r1, [r4, #72]	; 0x48
 23f8214:	e7e6      	b.n	23f81e4 <_ZN11MQTTManager14blinkStatusLedEv+0x30>
            if(_blinkPhase == 1) {
 23f8216:	2b01      	cmp	r3, #1
 23f8218:	e7f7      	b.n	23f820a <_ZN11MQTTManager14blinkStatusLedEv+0x56>
}
 23f821a:	bd10      	pop	{r4, pc}
 23f821c:	1007aed0 	.word	0x1007aed0

023f8220 <_ZN11MQTTManager4loopEv>:
{
 23f8220:	b510      	push	{r4, lr}
 23f8222:	4604      	mov	r4, r0
    _mqtt->loop();
 23f8224:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23f8226:	f000 ff40 	bl	23f90aa <_ZN4MQTT4loopEv>
    checkNetworkStatusPeriodically();
 23f822a:	4620      	mov	r0, r4
 23f822c:	f7ff f9d8 	bl	23f75e0 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv>
    sendAliveMsgPeriodically();
 23f8230:	4620      	mov	r0, r4
 23f8232:	f7ff fa69 	bl	23f7708 <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv>
    blinkStatusLed();
 23f8236:	4620      	mov	r0, r4
}
 23f8238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    blinkStatusLed();
 23f823c:	f7ff bfba 	b.w	23f81b4 <_ZN11MQTTManager14blinkStatusLedEv>

023f8240 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23f8240:	2201      	movs	r2, #1
}
 23f8242:	b508      	push	{r3, lr}
 23f8244:	4b0b      	ldr	r3, [pc, #44]	; (23f8274 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x34>)
static const String kDevicesVariableName       = "Devices";
 23f8246:	490c      	ldr	r1, [pc, #48]	; (23f8278 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x38>)
 23f8248:	601a      	str	r2, [r3, #0]
 23f824a:	480c      	ldr	r0, [pc, #48]	; (23f827c <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x3c>)
 23f824c:	f003 fb7d 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
static const String kChecklistVariableName     = "Checklist";
 23f8250:	490b      	ldr	r1, [pc, #44]	; (23f8280 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x40>)
 23f8252:	480c      	ldr	r0, [pc, #48]	; (23f8284 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x44>)
 23f8254:	f003 fb79 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
static const String kStatusVariableName        = "Status";
 23f8258:	490b      	ldr	r1, [pc, #44]	; (23f8288 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x48>)
 23f825a:	480c      	ldr	r0, [pc, #48]	; (23f828c <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x4c>)
 23f825c:	f003 fb75 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
static const String kPublishName               = "patriot";
 23f8260:	490b      	ldr	r1, [pc, #44]	; (23f8290 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x50>)
 23f8262:	480c      	ldr	r0, [pc, #48]	; (23f8294 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x54>)
 23f8264:	f003 fb71 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
 23f8268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
static const String kSSIDFunctionName          = "setSSID";
 23f826c:	490a      	ldr	r1, [pc, #40]	; (23f8298 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x58>)
 23f826e:	480b      	ldr	r0, [pc, #44]	; (23f829c <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x5c>)
 23f8270:	f003 bb6b 	b.w	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
 23f8274:	1007ad70 	.word	0x1007ad70
 23f8278:	023ff354 	.word	0x023ff354
 23f827c:	1007ad94 	.word	0x1007ad94
 23f8280:	023ff35c 	.word	0x023ff35c
 23f8284:	1007ada4 	.word	0x1007ada4
 23f8288:	023ff366 	.word	0x023ff366
 23f828c:	1007ad84 	.word	0x1007ad84
 23f8290:	023ff36d 	.word	0x023ff36d
 23f8294:	1007ad60 	.word	0x1007ad60
 23f8298:	023ff375 	.word	0x023ff375
 23f829c:	1007ad74 	.word	0x1007ad74

023f82a0 <_ZN6Device5resetEv>:
    // begin() is called automatically when device is added.
    // Do any heavy lifting or publishing here and not in constructor.
    virtual void begin() {};
    
    // Perform hardware reset if possible
    virtual void reset() {};
 23f82a0:	4770      	bx	lr

023f82a2 <_ZN6Device5valueEv>:

    virtual String name() { return _name; };
    virtual String room() { return _room; };
    virtual String type() { return String(_type); };
    
    virtual int value() { return _value; };
 23f82a2:	6980      	ldr	r0, [r0, #24]
 23f82a4:	4770      	bx	lr

023f82a6 <_ZN6Device10brightnessEv>:
    virtual void setValue(int value);
    
    virtual void setHold(bool stopped) { return; };     // eg. Pause closing curtain
    
    virtual int brightness() { return _brightness; };
 23f82a6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 23f82a8:	4770      	bx	lr

023f82aa <_ZN6Device4roomEv>:
    virtual String room() { return _room; };
 23f82aa:	b510      	push	{r4, lr}
 23f82ac:	4604      	mov	r4, r0
 23f82ae:	311c      	adds	r1, #28
 23f82b0:	f003 fb97 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f82b4:	4620      	mov	r0, r4
 23f82b6:	bd10      	pop	{r4, pc}

023f82b8 <_ZN6Device4nameEv>:
    virtual String name() { return _name; };
 23f82b8:	b510      	push	{r4, lr}
 23f82ba:	4604      	mov	r4, r0
 23f82bc:	3108      	adds	r1, #8
 23f82be:	f003 fb90 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f82c2:	4620      	mov	r0, r4
 23f82c4:	bd10      	pop	{r4, pc}

023f82c6 <_ZN6Device4typeEv>:
    virtual String type() { return String(_type); };
 23f82c6:	b510      	push	{r4, lr}
 23f82c8:	4604      	mov	r4, r0
 23f82ca:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 23f82ce:	f003 fbad 	bl	23fba2c <_ZN6StringC1Ec>
 23f82d2:	4620      	mov	r0, r4
 23f82d4:	bd10      	pop	{r4, pc}

023f82d6 <_ZN6Device7setHoldEb>:
    virtual void setHold(bool stopped) { return; };     // eg. Pause closing curtain
 23f82d6:	4770      	bx	lr

023f82d8 <_ZN6Device5beginEv>:
    virtual void begin() {};
 23f82d8:	4770      	bx	lr

023f82da <_ZN6Device4loopEv>:
    virtual int  getChangedValue();
    
    virtual void setLatLong(float latitude, float longitude);

    // Perform things continuously, such as fading or slewing
    virtual void loop() {};
 23f82da:	4770      	bx	lr

023f82dc <_ZN6Device15getChangedValueEv>:
    }
}

// Check if device has changed and return new value or -1
int  Device::getChangedValue() {
    if( _value == _previous ) {
 23f82dc:	6983      	ldr	r3, [r0, #24]
 23f82de:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 23f82e0:	4293      	cmp	r3, r2
        //Don't put a log here. This is called almost every loop.
        return -1;
 23f82e2:	bf0c      	ite	eq
 23f82e4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    }
    // Log here is ok because it only occurs when value changes
    //Log.info("Device "+_name+" getChangedValue() changed");
    _previous = _value;
 23f82e8:	62c3      	strne	r3, [r0, #44]	; 0x2c
    return _value;
}
 23f82ea:	4618      	mov	r0, r3
 23f82ec:	4770      	bx	lr

023f82ee <_ZN6Device10setLatLongEff>:
    return device->getChangedValue();
}

void Device::setLatLong(float latitude, float longitude) {
    // Nothing to do. Device will override if needed.
}
 23f82ee:	4770      	bx	lr

023f82f0 <_ZN6Device4mqttE6StringS0_>:

void Device::mqtt(String topic, String message) {
    // Nothing to do. Device will override if needed.
}
 23f82f0:	4770      	bx	lr
	...

023f82f4 <_ZN6Device16calculateDevicesEv>:

// The Devices variable is used by Alexa discovery and ReportState and iOS app.
// It is a comma delimited list of <T>:<Name>
// Note: Alexa skill hasn't been updated to support @<room>, so removing it for now.
String Device::calculateDevices()
{
 23f82f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f82f6:	b08d      	sub	sp, #52	; 0x34
 23f82f8:	4605      	mov	r5, r0
    String devices = "";
 23f82fa:	4924      	ldr	r1, [pc, #144]	; (23f838c <_ZN6Device16calculateDevicesEv+0x98>)
 23f82fc:	4668      	mov	r0, sp
 23f82fe:	f003 fb24 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
    
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f8302:	4b23      	ldr	r3, [pc, #140]	; (23f8390 <_ZN6Device16calculateDevicesEv+0x9c>)

        if(ptr->_type != 'X') {     // Ignore Checklist items
            devices += String(ptr->_type)+":";
 23f8304:	4e23      	ldr	r6, [pc, #140]	; (23f8394 <_ZN6Device16calculateDevicesEv+0xa0>)
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f8306:	681c      	ldr	r4, [r3, #0]
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23f8308:	4f23      	ldr	r7, [pc, #140]	; (23f8398 <_ZN6Device16calculateDevicesEv+0xa4>)
 23f830a:	b364      	cbz	r4, 23f8366 <_ZN6Device16calculateDevicesEv+0x72>
        if(ptr->_type != 'X') {     // Ignore Checklist items
 23f830c:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 23f8310:	2958      	cmp	r1, #88	; 0x58
 23f8312:	d026      	beq.n	23f8362 <_ZN6Device16calculateDevicesEv+0x6e>
            devices += String(ptr->_type)+":";
 23f8314:	a804      	add	r0, sp, #16
 23f8316:	f003 fb89 	bl	23fba2c <_ZN6StringC1Ec>
    StringSumHelper(const String &s) : String(s) {}
 23f831a:	a904      	add	r1, sp, #16
 23f831c:	a808      	add	r0, sp, #32
 23f831e:	f003 fb60 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f8322:	4631      	mov	r1, r6
 23f8324:	a808      	add	r0, sp, #32
 23f8326:	f003 fc13 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f832a:	4601      	mov	r1, r0
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f832c:	4668      	mov	r0, sp
 23f832e:	f003 fbe1 	bl	23fbaf4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 23f8332:	a808      	add	r0, sp, #32
 23f8334:	f003 fabe 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f8338:	a804      	add	r0, sp, #16
 23f833a:	f003 fabb 	bl	23fb8b4 <_ZN6StringD1Ev>
            devices += String(ptr->_name);
 23f833e:	f104 0108 	add.w	r1, r4, #8
 23f8342:	a808      	add	r0, sp, #32
 23f8344:	f003 fb4d 	bl	23fb9e2 <_ZN6StringC1ERKS_>
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f8348:	a908      	add	r1, sp, #32
 23f834a:	4668      	mov	r0, sp
 23f834c:	f003 fbd2 	bl	23fbaf4 <_ZN6String6concatERKS_>
 23f8350:	a808      	add	r0, sp, #32
 23f8352:	f003 faaf 	bl	23fb8b4 <_ZN6StringD1Ev>
            if (ptr->_next != NULL) {
 23f8356:	6863      	ldr	r3, [r4, #4]
 23f8358:	b11b      	cbz	r3, 23f8362 <_ZN6Device16calculateDevicesEv+0x6e>
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23f835a:	4639      	mov	r1, r7
 23f835c:	4668      	mov	r0, sp
 23f835e:	f003 fbcd 	bl	23fbafc <_ZN6String6concatEPKc>
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f8362:	6864      	ldr	r4, [r4, #4]
 23f8364:	e7d1      	b.n	23f830a <_ZN6Device16calculateDevicesEv+0x16>
                devices += ",";
            }
        }
    }
    if(devices.length() >= particle::protocol:: MAX_VARIABLE_VALUE_LENGTH) {
 23f8366:	9b02      	ldr	r3, [sp, #8]
 23f8368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 23f836c:	d309      	bcc.n	23f8382 <_ZN6Device16calculateDevicesEv+0x8e>
        return("Devices variable is too long. Need to extend to a 2nd variable");
 23f836e:	4628      	mov	r0, r5
 23f8370:	490a      	ldr	r1, [pc, #40]	; (23f839c <_ZN6Device16calculateDevicesEv+0xa8>)
 23f8372:	f003 faea 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
    String devices = "";
 23f8376:	4668      	mov	r0, sp
 23f8378:	f003 fa9c 	bl	23fb8b4 <_ZN6StringD1Ev>
    }
    return devices;
}
 23f837c:	4628      	mov	r0, r5
 23f837e:	b00d      	add	sp, #52	; 0x34
 23f8380:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return devices;
 23f8382:	4669      	mov	r1, sp
 23f8384:	4628      	mov	r0, r5
 23f8386:	f003 fb12 	bl	23fb9ae <_ZN6StringC1EOS_>
 23f838a:	e7f4      	b.n	23f8376 <_ZN6Device16calculateDevicesEv+0x82>
 23f838c:	023ff895 	.word	0x023ff895
 23f8390:	1007ad5c 	.word	0x1007ad5c
 23f8394:	023ff5e1 	.word	0x023ff5e1
 23f8398:	023ff4d8 	.word	0x023ff4d8
 23f839c:	023ff618 	.word	0x023ff618

023f83a0 <_ZN6Device13setBrightnessEi>:
    if(_value != 0) {
 23f83a0:	6982      	ldr	r2, [r0, #24]
    _brightness = value;
 23f83a2:	6341      	str	r1, [r0, #52]	; 0x34
    if(_value != 0) {
 23f83a4:	b112      	cbz	r2, 23f83ac <_ZN6Device13setBrightnessEi+0xc>
        setValue(value);
 23f83a6:	6803      	ldr	r3, [r0, #0]
 23f83a8:	699b      	ldr	r3, [r3, #24]
 23f83aa:	4718      	bx	r3
}
 23f83ac:	4770      	bx	lr
	...

023f83b0 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
 23f83b0:	b530      	push	{r4, r5, lr}
 23f83b2:	4614      	mov	r4, r2
 23f83b4:	b085      	sub	sp, #20
 23f83b6:	4603      	mov	r3, r0
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
 23f83b8:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
 23f83ba:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
 23f83bc:	4798      	blx	r3
    inline unsigned int length(void) const {return len;}
 23f83be:	9802      	ldr	r0, [sp, #8]
        size = str.length();
 23f83c0:	6020      	str	r0, [r4, #0]
        data = malloc(size);
 23f83c2:	f001 fd19 	bl	23f9df8 <malloc>
 23f83c6:	6028      	str	r0, [r5, #0]
        if (!data) {
 23f83c8:	b150      	cbz	r0, 23f83e0 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
 23f83ca:	6822      	ldr	r2, [r4, #0]
 23f83cc:	9900      	ldr	r1, [sp, #0]
 23f83ce:	f004 fefb 	bl	23fd1c8 <memcpy>
        return 0;
 23f83d2:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
 23f83d4:	4668      	mov	r0, sp
 23f83d6:	f003 fa6d 	bl	23fb8b4 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
 23f83da:	4620      	mov	r0, r4
 23f83dc:	b005      	add	sp, #20
 23f83de:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
 23f83e0:	4c00      	ldr	r4, [pc, #0]	; (23f83e4 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
 23f83e2:	e7f7      	b.n	23f83d4 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
 23f83e4:	fffffefc 	.word	0xfffffefc

023f83e8 <_ZN10CloudClass8variableI6StringJRFS1_vEEEEbRKT_DpOT0_.isra.0>:
    static inline bool variable(const T &name, ArgsT&&... args)
 23f83e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        spark_variable_t extra = {};
 23f83ea:	2300      	movs	r3, #0
 23f83ec:	e9cd 3301 	strd	r3, r3, [sp, #4]
        extra.size = sizeof(extra);
 23f83f0:	230c      	movs	r3, #12
 23f83f2:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.copy = [](const void* var, void** data, size_t* size) {
 23f83f6:	4b04      	ldr	r3, [pc, #16]	; (23f8408 <_ZN10CloudClass8variableI6StringJRFS1_vEEEEbRKT_DpOT0_.isra.0+0x20>)
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
 23f83f8:	2204      	movs	r2, #4
        extra.copy = [](const void* var, void** data, size_t* size) {
 23f83fa:	9303      	str	r3, [sp, #12]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
 23f83fc:	ab01      	add	r3, sp, #4
 23f83fe:	f001 fbc7 	bl	23f9b90 <spark_variable>
    }
 23f8402:	b005      	add	sp, #20
 23f8404:	f85d fb04 	ldr.w	pc, [sp], #4
 23f8408:	023f83b1 	.word	0x023f83b1

023f840c <_ZN6Device15calculateStatusEv>:
String Device::calculateStatus() {
 23f840c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f8410:	b08c      	sub	sp, #48	; 0x30
 23f8412:	4605      	mov	r5, r0
                return timeStr(now());
 23f8414:	f004 f98b 	bl	23fc72e <_ZN9TimeClass3nowEv>
 23f8418:	17c3      	asrs	r3, r0, #31
 23f841a:	4602      	mov	r2, r0
 23f841c:	a804      	add	r0, sp, #16
 23f841e:	f004 f881 	bl	23fc524 <_ZN9TimeClass7timeStrEx>
    StringSumHelper(const String &s) : String(s) {}
 23f8422:	a904      	add	r1, sp, #16
 23f8424:	a808      	add	r0, sp, #32
 23f8426:	f003 fadc 	bl	23fb9e2 <_ZN6StringC1ERKS_>
    String status = Time.timeStr() + ": ";
 23f842a:	4937      	ldr	r1, [pc, #220]	; (23f8508 <_ZN6Device15calculateStatusEv+0xfc>)
 23f842c:	a808      	add	r0, sp, #32
 23f842e:	f003 fb8f 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f8432:	4601      	mov	r1, r0
 23f8434:	4668      	mov	r0, sp
 23f8436:	f003 fad4 	bl	23fb9e2 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 23f843a:	a808      	add	r0, sp, #32
 23f843c:	f003 fa3a 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f8440:	a804      	add	r0, sp, #16
 23f8442:	f003 fa37 	bl	23fb8b4 <_ZN6StringD1Ev>
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f8446:	4b31      	ldr	r3, [pc, #196]	; (23f850c <_ZN6Device15calculateStatusEv+0x100>)
            status += String(ptr->_type)+":";
 23f8448:	4e31      	ldr	r6, [pc, #196]	; (23f8510 <_ZN6Device15calculateStatusEv+0x104>)
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f844a:	681c      	ldr	r4, [r3, #0]
    StringSumHelper(const char *p) : String(p) {}
 23f844c:	4f31      	ldr	r7, [pc, #196]	; (23f8514 <_ZN6Device15calculateStatusEv+0x108>)
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23f844e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 23f851c <_ZN6Device15calculateStatusEv+0x110>
 23f8452:	2c00      	cmp	r4, #0
 23f8454:	d043      	beq.n	23f84de <_ZN6Device15calculateStatusEv+0xd2>
        if(ptr->_type != 'X') {     // Ignore checklist items
 23f8456:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 23f845a:	2958      	cmp	r1, #88	; 0x58
 23f845c:	d03d      	beq.n	23f84da <_ZN6Device15calculateStatusEv+0xce>
            status += String(ptr->_type)+":";
 23f845e:	a804      	add	r0, sp, #16
 23f8460:	f003 fae4 	bl	23fba2c <_ZN6StringC1Ec>
    StringSumHelper(const String &s) : String(s) {}
 23f8464:	a904      	add	r1, sp, #16
 23f8466:	a808      	add	r0, sp, #32
 23f8468:	f003 fabb 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f846c:	4631      	mov	r1, r6
 23f846e:	a808      	add	r0, sp, #32
 23f8470:	f003 fb6e 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f8474:	4601      	mov	r1, r0
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f8476:	4668      	mov	r0, sp
 23f8478:	f003 fb3c 	bl	23fbaf4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 23f847c:	a808      	add	r0, sp, #32
 23f847e:	f003 fa19 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f8482:	a804      	add	r0, sp, #16
 23f8484:	f003 fa16 	bl	23fb8b4 <_ZN6StringD1Ev>
            status += String(ptr->_name);
 23f8488:	f104 0108 	add.w	r1, r4, #8
 23f848c:	a808      	add	r0, sp, #32
 23f848e:	f003 faa8 	bl	23fb9e2 <_ZN6StringC1ERKS_>
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f8492:	a908      	add	r1, sp, #32
 23f8494:	4668      	mov	r0, sp
 23f8496:	f003 fb2d 	bl	23fbaf4 <_ZN6String6concatERKS_>
 23f849a:	a808      	add	r0, sp, #32
 23f849c:	f003 fa0a 	bl	23fb8b4 <_ZN6StringD1Ev>
    StringSumHelper(const char *p) : String(p) {}
 23f84a0:	4639      	mov	r1, r7
 23f84a2:	a808      	add	r0, sp, #32
 23f84a4:	f003 fa51 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
            status += "="+String(ptr->_value);
 23f84a8:	220a      	movs	r2, #10
 23f84aa:	69a1      	ldr	r1, [r4, #24]
 23f84ac:	a804      	add	r0, sp, #16
 23f84ae:	f003 face 	bl	23fba4e <_ZN6StringC1Eih>
 23f84b2:	a904      	add	r1, sp, #16
 23f84b4:	a808      	add	r0, sp, #32
 23f84b6:	f003 fb3f 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f84ba:	4601      	mov	r1, r0
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f84bc:	4668      	mov	r0, sp
 23f84be:	f003 fb19 	bl	23fbaf4 <_ZN6String6concatERKS_>
 23f84c2:	a804      	add	r0, sp, #16
 23f84c4:	f003 f9f6 	bl	23fb8b4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f84c8:	a808      	add	r0, sp, #32
 23f84ca:	f003 f9f3 	bl	23fb8b4 <_ZN6StringD1Ev>
            if (ptr->_next != NULL) {
 23f84ce:	6863      	ldr	r3, [r4, #4]
 23f84d0:	b11b      	cbz	r3, 23f84da <_ZN6Device15calculateStatusEv+0xce>
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23f84d2:	4641      	mov	r1, r8
 23f84d4:	4668      	mov	r0, sp
 23f84d6:	f003 fb11 	bl	23fbafc <_ZN6String6concatEPKc>
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f84da:	6864      	ldr	r4, [r4, #4]
 23f84dc:	e7b9      	b.n	23f8452 <_ZN6Device15calculateStatusEv+0x46>
    if(status.length() >= particle::protocol:: MAX_VARIABLE_VALUE_LENGTH) {
 23f84de:	9b02      	ldr	r3, [sp, #8]
 23f84e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 23f84e4:	d30a      	bcc.n	23f84fc <_ZN6Device15calculateStatusEv+0xf0>
        return("Status variable is too long. Need to extend to a 2nd variable");
 23f84e6:	4628      	mov	r0, r5
 23f84e8:	490b      	ldr	r1, [pc, #44]	; (23f8518 <_ZN6Device15calculateStatusEv+0x10c>)
 23f84ea:	f003 fa2e 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
    String status = Time.timeStr() + ": ";
 23f84ee:	4668      	mov	r0, sp
 23f84f0:	f003 f9e0 	bl	23fb8b4 <_ZN6StringD1Ev>
}
 23f84f4:	4628      	mov	r0, r5
 23f84f6:	b00c      	add	sp, #48	; 0x30
 23f84f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return status;
 23f84fc:	4669      	mov	r1, sp
 23f84fe:	4628      	mov	r0, r5
 23f8500:	f003 fa55 	bl	23fb9ae <_ZN6StringC1EOS_>
 23f8504:	e7f3      	b.n	23f84ee <_ZN6Device15calculateStatusEv+0xe2>
 23f8506:	bf00      	nop
 23f8508:	023ff5e5 	.word	0x023ff5e5
 23f850c:	1007ad5c 	.word	0x1007ad5c
 23f8510:	023ff5e1 	.word	0x023ff5e1
 23f8514:	023ff657 	.word	0x023ff657
 23f8518:	023ff659 	.word	0x023ff659
 23f851c:	023ff4d8 	.word	0x023ff4d8

023f8520 <_ZN6Device8setValueEi>:
void Device::setValue(int value) {
 23f8520:	b570      	push	{r4, r5, r6, lr}
 23f8522:	4604      	mov	r4, r0
 23f8524:	b08c      	sub	sp, #48	; 0x30
 23f8526:	460d      	mov	r5, r1
    StringSumHelper(const char *p) : String(p) {}
 23f8528:	4668      	mov	r0, sp
 23f852a:	4919      	ldr	r1, [pc, #100]	; (23f8590 <_ZN6Device8setValueEi+0x70>)
 23f852c:	f003 fa0d 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("Device " + _name + " setValue " + String(value) + ", was "+String(_value));
 23f8530:	f104 0108 	add.w	r1, r4, #8
 23f8534:	4668      	mov	r0, sp
 23f8536:	f003 faff 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f853a:	4916      	ldr	r1, [pc, #88]	; (23f8594 <_ZN6Device8setValueEi+0x74>)
 23f853c:	f003 fb08 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f8540:	4606      	mov	r6, r0
 23f8542:	220a      	movs	r2, #10
 23f8544:	4629      	mov	r1, r5
 23f8546:	a804      	add	r0, sp, #16
 23f8548:	f003 fa81 	bl	23fba4e <_ZN6StringC1Eih>
 23f854c:	a904      	add	r1, sp, #16
 23f854e:	4630      	mov	r0, r6
 23f8550:	f003 faf2 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f8554:	4910      	ldr	r1, [pc, #64]	; (23f8598 <_ZN6Device8setValueEi+0x78>)
 23f8556:	f003 fafb 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f855a:	4606      	mov	r6, r0
 23f855c:	220a      	movs	r2, #10
 23f855e:	69a1      	ldr	r1, [r4, #24]
 23f8560:	a808      	add	r0, sp, #32
 23f8562:	f003 fa74 	bl	23fba4e <_ZN6StringC1Eih>
 23f8566:	a908      	add	r1, sp, #32
 23f8568:	4630      	mov	r0, r6
 23f856a:	f003 fae5 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f856e:	6801      	ldr	r1, [r0, #0]
 23f8570:	480a      	ldr	r0, [pc, #40]	; (23f859c <_ZN6Device8setValueEi+0x7c>)
 23f8572:	f7fe fbc9 	bl	23f6d08 <_ZNK5spark6Logger4infoEPKcz>
 23f8576:	a808      	add	r0, sp, #32
 23f8578:	f003 f99c 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f857c:	a804      	add	r0, sp, #16
 23f857e:	f003 f999 	bl	23fb8b4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f8582:	4668      	mov	r0, sp
 23f8584:	f003 f996 	bl	23fb8b4 <_ZN6StringD1Ev>
    _value = value;
 23f8588:	61a5      	str	r5, [r4, #24]
}
 23f858a:	b00c      	add	sp, #48	; 0x30
 23f858c:	bd70      	pop	{r4, r5, r6, pc}
 23f858e:	bf00      	nop
 23f8590:	023ff697 	.word	0x023ff697
 23f8594:	023ff69f 	.word	0x023ff69f
 23f8598:	023ff6aa 	.word	0x023ff6aa
 23f859c:	1007ae1c 	.word	0x1007ae1c

023f85a0 <_ZN6Device7setSSIDE6String>:
int Device::setSSID(String info) {
 23f85a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int comma = info.indexOf(',');
 23f85a2:	212c      	movs	r1, #44	; 0x2c
int Device::setSSID(String info) {
 23f85a4:	b09d      	sub	sp, #116	; 0x74
 23f85a6:	4604      	mov	r4, r0
    int comma = info.indexOf(',');
 23f85a8:	f003 fb6e 	bl	23fbc88 <_ZNK6String7indexOfEc>
    if(comma <= 0) {  // -1 if comma missing
 23f85ac:	1e05      	subs	r5, r0, #0
 23f85ae:	dc13      	bgt.n	23f85d8 <_ZN6Device7setSSIDE6String+0x38>
    StringSumHelper(const char *p) : String(p) {}
 23f85b0:	4931      	ldr	r1, [pc, #196]	; (23f8678 <_ZN6Device7setSSIDE6String+0xd8>)
 23f85b2:	a809      	add	r0, sp, #36	; 0x24
 23f85b4:	f003 f9c9 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
        Log.error("setSSID info incorrect: " + info);
 23f85b8:	4621      	mov	r1, r4
 23f85ba:	a809      	add	r0, sp, #36	; 0x24
 23f85bc:	f003 fabc 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f85c0:	6801      	ldr	r1, [r0, #0]
 23f85c2:	482e      	ldr	r0, [pc, #184]	; (23f867c <_ZN6Device7setSSIDE6String+0xdc>)
 23f85c4:	f7fe fb92 	bl	23f6cec <_ZNK5spark6Logger5errorEPKcz>
class StringSumHelper : public String
 23f85c8:	a809      	add	r0, sp, #36	; 0x24
 23f85ca:	f003 f973 	bl	23fb8b4 <_ZN6StringD1Ev>
        return -1;
 23f85ce:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 23f85d2:	4620      	mov	r0, r4
 23f85d4:	b01d      	add	sp, #116	; 0x74
 23f85d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    String ssid = info.substring(start, comma);
 23f85d8:	462b      	mov	r3, r5
 23f85da:	2200      	movs	r2, #0
 23f85dc:	4621      	mov	r1, r4
 23f85de:	a801      	add	r0, sp, #4
 23f85e0:	f003 fb56 	bl	23fbc90 <_ZNK6String9substringEjj>
    String password = info.substring(comma+1);
 23f85e4:	1c6a      	adds	r2, r5, #1
 23f85e6:	4621      	mov	r1, r4
 23f85e8:	a805      	add	r0, sp, #20
 23f85ea:	f003 fb73 	bl	23fbcd4 <_ZNK6String9substringEj>
    StringSumHelper(const char *p) : String(p) {}
 23f85ee:	4924      	ldr	r1, [pc, #144]	; (23f8680 <_ZN6Device7setSSIDE6String+0xe0>)
 23f85f0:	a809      	add	r0, sp, #36	; 0x24
 23f85f2:	f003 f9aa 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("Setting SSID/password: " + ssid + ", " + password);
 23f85f6:	a901      	add	r1, sp, #4
 23f85f8:	a809      	add	r0, sp, #36	; 0x24
 23f85fa:	f003 fa9d 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f85fe:	4921      	ldr	r1, [pc, #132]	; (23f8684 <_ZN6Device7setSSIDE6String+0xe4>)
 23f8600:	f003 faa6 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f8604:	a905      	add	r1, sp, #20
 23f8606:	f003 fa97 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f860a:	6801      	ldr	r1, [r0, #0]
 23f860c:	481b      	ldr	r0, [pc, #108]	; (23f867c <_ZN6Device7setSSIDE6String+0xdc>)
 23f860e:	f7fe fb7b 	bl	23f6d08 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f8612:	a809      	add	r0, sp, #36	; 0x24
 23f8614:	f003 f94e 	bl	23fb8b4 <_ZN6StringD1Ev>
    const char * c_str() const { return buffer; }
 23f8618:	9f01      	ldr	r7, [sp, #4]
 23f861a:	9d05      	ldr	r5, [sp, #20]
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
 23f861c:	b347      	cbz	r7, 23f8670 <_ZN6Device7setSSIDE6String+0xd0>
 23f861e:	4638      	mov	r0, r7
 23f8620:	f7fe f938 	bl	23f6894 <strlen>
 23f8624:	4606      	mov	r6, r0
 23f8626:	b32d      	cbz	r5, 23f8674 <_ZN6Device7setSSIDE6String+0xd4>
 23f8628:	4628      	mov	r0, r5
 23f862a:	f7fe f933 	bl	23f6894 <strlen>
 23f862e:	4604      	mov	r4, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
 23f8630:	2238      	movs	r2, #56	; 0x38
 23f8632:	2100      	movs	r1, #0
 23f8634:	eb0d 0002 	add.w	r0, sp, r2
 23f8638:	f004 fded 	bl	23fd216 <memset>
        creds.size = sizeof(creds);
 23f863c:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
 23f863e:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
 23f8642:	2303      	movs	r3, #3
 23f8644:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 23f8648:	2300      	movs	r3, #0
 23f864a:	480f      	ldr	r0, [pc, #60]	; (23f8688 <_ZN6Device7setSSIDE6String+0xe8>)
 23f864c:	4619      	mov	r1, r3
 23f864e:	aa09      	add	r2, sp, #36	; 0x24
 23f8650:	6840      	ldr	r0, [r0, #4]
        creds.password_len = passwordLen;
 23f8652:	940d      	str	r4, [sp, #52]	; 0x34
        creds.password = password;
 23f8654:	e9cd 650b 	strd	r6, r5, [sp, #44]	; 0x2c
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 23f8658:	f001 fb6c 	bl	23f9d34 <network_set_credentials>
 23f865c:	fab0 f480 	clz	r4, r0
    String password = info.substring(comma+1);
 23f8660:	a805      	add	r0, sp, #20
 23f8662:	f003 f927 	bl	23fb8b4 <_ZN6StringD1Ev>
    String ssid = info.substring(start, comma);
 23f8666:	a801      	add	r0, sp, #4
 23f8668:	0964      	lsrs	r4, r4, #5
 23f866a:	f003 f923 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f866e:	e7b0      	b.n	23f85d2 <_ZN6Device7setSSIDE6String+0x32>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
 23f8670:	463e      	mov	r6, r7
 23f8672:	e7d8      	b.n	23f8626 <_ZN6Device7setSSIDE6String+0x86>
 23f8674:	462c      	mov	r4, r5
 23f8676:	e7db      	b.n	23f8630 <_ZN6Device7setSSIDE6String+0x90>
 23f8678:	023ff6b1 	.word	0x023ff6b1
 23f867c:	1007ae1c 	.word	0x1007ae1c
 23f8680:	023ff6ca 	.word	0x023ff6ca
 23f8684:	023ff445 	.word	0x023ff445
 23f8688:	1007aed0 	.word	0x1007aed0

023f868c <_ZN6Device18calculateChecklistEv>:

// The Checklist variable is used by the Checklist iOS app.
// It is a comma delimited list of <Name>=0|1
String Device::calculateChecklist()
{
 23f868c:	b5f0      	push	{r4, r5, r6, r7, lr}
    String newChecklist = "";
 23f868e:	4925      	ldr	r1, [pc, #148]	; (23f8724 <_ZN6Device18calculateChecklistEv+0x98>)
{
 23f8690:	b089      	sub	sp, #36	; 0x24
 23f8692:	4604      	mov	r4, r0
    String newChecklist = "";
 23f8694:	f003 f959 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
    
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f8698:	4b23      	ldr	r3, [pc, #140]	; (23f8728 <_ZN6Device18calculateChecklistEv+0x9c>)
    StringSumHelper(const char *p) : String(p) {}
 23f869a:	4e24      	ldr	r6, [pc, #144]	; (23f872c <_ZN6Device18calculateChecklistEv+0xa0>)
 23f869c:	681d      	ldr	r5, [r3, #0]
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23f869e:	4f24      	ldr	r7, [pc, #144]	; (23f8730 <_ZN6Device18calculateChecklistEv+0xa4>)
 23f86a0:	b375      	cbz	r5, 23f8700 <_ZN6Device18calculateChecklistEv+0x74>
        if(ptr->_type == 'X') {
 23f86a2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 23f86a6:	2b58      	cmp	r3, #88	; 0x58
 23f86a8:	d128      	bne.n	23f86fc <_ZN6Device18calculateChecklistEv+0x70>
            newChecklist += String(ptr->_name);
 23f86aa:	f105 0108 	add.w	r1, r5, #8
 23f86ae:	a804      	add	r0, sp, #16
 23f86b0:	f003 f997 	bl	23fb9e2 <_ZN6StringC1ERKS_>
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f86b4:	a904      	add	r1, sp, #16
 23f86b6:	4620      	mov	r0, r4
 23f86b8:	f003 fa1c 	bl	23fbaf4 <_ZN6String6concatERKS_>
 23f86bc:	a804      	add	r0, sp, #16
 23f86be:	f003 f8f9 	bl	23fb8b4 <_ZN6StringD1Ev>
    StringSumHelper(const char *p) : String(p) {}
 23f86c2:	4631      	mov	r1, r6
 23f86c4:	a804      	add	r0, sp, #16
 23f86c6:	f003 f940 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
            newChecklist += "="+String(ptr->_value);
 23f86ca:	220a      	movs	r2, #10
 23f86cc:	69a9      	ldr	r1, [r5, #24]
 23f86ce:	4668      	mov	r0, sp
 23f86d0:	f003 f9bd 	bl	23fba4e <_ZN6StringC1Eih>
 23f86d4:	4669      	mov	r1, sp
 23f86d6:	a804      	add	r0, sp, #16
 23f86d8:	f003 fa2e 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f86dc:	4601      	mov	r1, r0
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f86de:	4620      	mov	r0, r4
 23f86e0:	f003 fa08 	bl	23fbaf4 <_ZN6String6concatERKS_>
 23f86e4:	4668      	mov	r0, sp
 23f86e6:	f003 f8e5 	bl	23fb8b4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f86ea:	a804      	add	r0, sp, #16
 23f86ec:	f003 f8e2 	bl	23fb8b4 <_ZN6StringD1Ev>
            if (ptr->_next != NULL) {
 23f86f0:	686b      	ldr	r3, [r5, #4]
 23f86f2:	b11b      	cbz	r3, 23f86fc <_ZN6Device18calculateChecklistEv+0x70>
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23f86f4:	4639      	mov	r1, r7
 23f86f6:	4620      	mov	r0, r4
 23f86f8:	f003 fa00 	bl	23fbafc <_ZN6String6concatEPKc>
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f86fc:	686d      	ldr	r5, [r5, #4]
 23f86fe:	e7cf      	b.n	23f86a0 <_ZN6Device18calculateChecklistEv+0x14>
                newChecklist += ",";
            }
        }
    }
    if(newChecklist.length() >= particle::protocol:: MAX_VARIABLE_VALUE_LENGTH) {
 23f8700:	68a3      	ldr	r3, [r4, #8]
 23f8702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 23f8706:	d303      	bcc.n	23f8710 <_ZN6Device18calculateChecklistEv+0x84>
        Log.error("Checklist variable is too long. Need to extend to a 2nd variable");
 23f8708:	490a      	ldr	r1, [pc, #40]	; (23f8734 <_ZN6Device18calculateChecklistEv+0xa8>)
 23f870a:	480b      	ldr	r0, [pc, #44]	; (23f8738 <_ZN6Device18calculateChecklistEv+0xac>)
 23f870c:	f7fe faee 	bl	23f6cec <_ZNK5spark6Logger5errorEPKcz>
    }
    if(newChecklist.length() == 0) { Log.info("No checklist items"); }
 23f8710:	68a3      	ldr	r3, [r4, #8]
 23f8712:	b91b      	cbnz	r3, 23f871c <_ZN6Device18calculateChecklistEv+0x90>
 23f8714:	4909      	ldr	r1, [pc, #36]	; (23f873c <_ZN6Device18calculateChecklistEv+0xb0>)
 23f8716:	4808      	ldr	r0, [pc, #32]	; (23f8738 <_ZN6Device18calculateChecklistEv+0xac>)
 23f8718:	f7fe faf6 	bl	23f6d08 <_ZNK5spark6Logger4infoEPKcz>
    return newChecklist;
}
 23f871c:	4620      	mov	r0, r4
 23f871e:	b009      	add	sp, #36	; 0x24
 23f8720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f8722:	bf00      	nop
 23f8724:	023ff895 	.word	0x023ff895
 23f8728:	1007ad5c 	.word	0x1007ad5c
 23f872c:	023ff657 	.word	0x023ff657
 23f8730:	023ff4d8 	.word	0x023ff4d8
 23f8734:	023ff6e2 	.word	0x023ff6e2
 23f8738:	1007ae1c 	.word	0x1007ae1c
 23f873c:	023ff723 	.word	0x023ff723

023f8740 <_ZN6DeviceC1E6StringS0_c>:
Device::Device(String name, String room, char type)
 23f8740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
: _next(NULL), _name(name), _room(room), _value(0), _previous(0), _type(type), _brightness(100)
 23f8742:	2600      	movs	r6, #0
Device::Device(String name, String room, char type)
 23f8744:	4604      	mov	r4, r0
 23f8746:	4617      	mov	r7, r2
 23f8748:	461d      	mov	r5, r3
: _next(NULL), _name(name), _room(room), _value(0), _previous(0), _type(type), _brightness(100)
 23f874a:	4b09      	ldr	r3, [pc, #36]	; (23f8770 <_ZN6DeviceC1E6StringS0_c+0x30>)
 23f874c:	6046      	str	r6, [r0, #4]
 23f874e:	6003      	str	r3, [r0, #0]
 23f8750:	3008      	adds	r0, #8
 23f8752:	f003 f946 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f8756:	4639      	mov	r1, r7
 23f8758:	61a6      	str	r6, [r4, #24]
 23f875a:	f104 001c 	add.w	r0, r4, #28
 23f875e:	f003 f940 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f8762:	2364      	movs	r3, #100	; 0x64
}
 23f8764:	4620      	mov	r0, r4
: _next(NULL), _name(name), _room(room), _value(0), _previous(0), _type(type), _brightness(100)
 23f8766:	62e6      	str	r6, [r4, #44]	; 0x2c
 23f8768:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 23f876c:	6363      	str	r3, [r4, #52]	; 0x34
}
 23f876e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f8770:	023ff788 	.word	0x023ff788

023f8774 <_ZN6Device3addEPS_>:
{
 23f8774:	b530      	push	{r4, r5, lr}
 23f8776:	4604      	mov	r4, r0
 23f8778:	b089      	sub	sp, #36	; 0x24
    StringSumHelper(const char *p) : String(p) {}
 23f877a:	4916      	ldr	r1, [pc, #88]	; (23f87d4 <_ZN6Device3addEPS_+0x60>)
 23f877c:	a804      	add	r0, sp, #16
 23f877e:	f003 f8e4 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("addDevice name: "+String(device->name()));
 23f8782:	6823      	ldr	r3, [r4, #0]
 23f8784:	4621      	mov	r1, r4
 23f8786:	689b      	ldr	r3, [r3, #8]
 23f8788:	4668      	mov	r0, sp
 23f878a:	4798      	blx	r3
 23f878c:	4669      	mov	r1, sp
 23f878e:	a804      	add	r0, sp, #16
 23f8790:	f003 f9d2 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f8794:	6801      	ldr	r1, [r0, #0]
 23f8796:	4810      	ldr	r0, [pc, #64]	; (23f87d8 <_ZN6Device3addEPS_+0x64>)
 23f8798:	f7fe fab6 	bl	23f6d08 <_ZNK5spark6Logger4infoEPKcz>
    if(_devices == NULL) {
 23f879c:	4d0f      	ldr	r5, [pc, #60]	; (23f87dc <_ZN6Device3addEPS_+0x68>)
    Log.info("addDevice name: "+String(device->name()));
 23f879e:	4668      	mov	r0, sp
 23f87a0:	f003 f888 	bl	23fb8b4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f87a4:	a804      	add	r0, sp, #16
 23f87a6:	f003 f885 	bl	23fb8b4 <_ZN6StringD1Ev>
    if(_devices == NULL) {
 23f87aa:	682b      	ldr	r3, [r5, #0]
 23f87ac:	b95b      	cbnz	r3, 23f87c6 <_ZN6Device3addEPS_+0x52>
        Log.info("  first device");
 23f87ae:	490c      	ldr	r1, [pc, #48]	; (23f87e0 <_ZN6Device3addEPS_+0x6c>)
 23f87b0:	4809      	ldr	r0, [pc, #36]	; (23f87d8 <_ZN6Device3addEPS_+0x64>)
 23f87b2:	f7fe faa9 	bl	23f6d08 <_ZNK5spark6Logger4infoEPKcz>
        _devices = device;
 23f87b6:	602c      	str	r4, [r5, #0]
    device->begin();
 23f87b8:	4620      	mov	r0, r4
 23f87ba:	6823      	ldr	r3, [r4, #0]
 23f87bc:	681b      	ldr	r3, [r3, #0]
}
 23f87be:	b009      	add	sp, #36	; 0x24
 23f87c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    device->begin();
 23f87c4:	4718      	bx	r3
        while(ptr->_next != NULL) {
 23f87c6:	461a      	mov	r2, r3
 23f87c8:	685b      	ldr	r3, [r3, #4]
 23f87ca:	2b00      	cmp	r3, #0
 23f87cc:	d1fb      	bne.n	23f87c6 <_ZN6Device3addEPS_+0x52>
        ptr->_next = device;
 23f87ce:	6054      	str	r4, [r2, #4]
 23f87d0:	e7f2      	b.n	23f87b8 <_ZN6Device3addEPS_+0x44>
 23f87d2:	bf00      	nop
 23f87d4:	023ff736 	.word	0x023ff736
 23f87d8:	1007ae1c 	.word	0x1007ae1c
 23f87dc:	1007ad5c 	.word	0x1007ad5c
 23f87e0:	023ff747 	.word	0x023ff747

023f87e4 <_ZN6Device8resetAllEv>:
{
 23f87e4:	b510      	push	{r4, lr}
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f87e6:	4b05      	ldr	r3, [pc, #20]	; (23f87fc <_ZN6Device8resetAllEv+0x18>)
 23f87e8:	681c      	ldr	r4, [r3, #0]
 23f87ea:	b12c      	cbz	r4, 23f87f8 <_ZN6Device8resetAllEv+0x14>
        ptr->reset();
 23f87ec:	6823      	ldr	r3, [r4, #0]
 23f87ee:	4620      	mov	r0, r4
 23f87f0:	685b      	ldr	r3, [r3, #4]
 23f87f2:	4798      	blx	r3
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f87f4:	6864      	ldr	r4, [r4, #4]
 23f87f6:	e7f8      	b.n	23f87ea <_ZN6Device8resetAllEv+0x6>
}
 23f87f8:	bd10      	pop	{r4, pc}
 23f87fa:	bf00      	nop
 23f87fc:	1007ad5c 	.word	0x1007ad5c

023f8800 <_ZN6Device7loopAllEv>:
{
 23f8800:	b510      	push	{r4, lr}
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f8802:	4b05      	ldr	r3, [pc, #20]	; (23f8818 <_ZN6Device7loopAllEv+0x18>)
 23f8804:	681c      	ldr	r4, [r3, #0]
 23f8806:	b12c      	cbz	r4, 23f8814 <_ZN6Device7loopAllEv+0x14>
        ptr->loop();
 23f8808:	6823      	ldr	r3, [r4, #0]
 23f880a:	4620      	mov	r0, r4
 23f880c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f880e:	4798      	blx	r3
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f8810:	6864      	ldr	r4, [r4, #4]
 23f8812:	e7f8      	b.n	23f8806 <_ZN6Device7loopAllEv+0x6>
}
 23f8814:	bd10      	pop	{r4, pc}
 23f8816:	bf00      	nop
 23f8818:	1007ad5c 	.word	0x1007ad5c

023f881c <_ZN6Device5countEv>:
    int i = 0;
 23f881c:	2000      	movs	r0, #0
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next) i++;
 23f881e:	4b03      	ldr	r3, [pc, #12]	; (23f882c <_ZN6Device5countEv+0x10>)
 23f8820:	681b      	ldr	r3, [r3, #0]
 23f8822:	b113      	cbz	r3, 23f882a <_ZN6Device5countEv+0xe>
 23f8824:	685b      	ldr	r3, [r3, #4]
 23f8826:	3001      	adds	r0, #1
 23f8828:	e7fb      	b.n	23f8822 <_ZN6Device5countEv+0x6>
}
 23f882a:	4770      	bx	lr
 23f882c:	1007ad5c 	.word	0x1007ad5c

023f8830 <_ZN6Device3getE6String>:
{
 23f8830:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f8832:	4606      	mov	r6, r0
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f8834:	2500      	movs	r5, #0
    Device *ptr = _devices;
 23f8836:	4b0e      	ldr	r3, [pc, #56]	; (23f8870 <_ZN6Device3getE6String+0x40>)
{
 23f8838:	b085      	sub	sp, #20
    Device *ptr = _devices;
 23f883a:	681c      	ldr	r4, [r3, #0]
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f883c:	f7ff ffee 	bl	23f881c <_ZN6Device5countEv>
 23f8840:	42a8      	cmp	r0, r5
 23f8842:	dd11      	ble.n	23f8868 <_ZN6Device3getE6String+0x38>
 23f8844:	b18c      	cbz	r4, 23f886a <_ZN6Device3getE6String+0x3a>
        if (ptr->name().equalsIgnoreCase(name)) {
 23f8846:	6823      	ldr	r3, [r4, #0]
 23f8848:	4621      	mov	r1, r4
 23f884a:	4668      	mov	r0, sp
 23f884c:	689b      	ldr	r3, [r3, #8]
 23f884e:	4798      	blx	r3
 23f8850:	4631      	mov	r1, r6
 23f8852:	4668      	mov	r0, sp
 23f8854:	f003 f9c5 	bl	23fbbe2 <_ZNK6String16equalsIgnoreCaseERKS_>
 23f8858:	4607      	mov	r7, r0
 23f885a:	4668      	mov	r0, sp
 23f885c:	f003 f82a 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f8860:	b91f      	cbnz	r7, 23f886a <_ZN6Device3getE6String+0x3a>
        ptr = ptr->_next;
 23f8862:	6864      	ldr	r4, [r4, #4]
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f8864:	3501      	adds	r5, #1
 23f8866:	e7e9      	b.n	23f883c <_ZN6Device3getE6String+0xc>
    return NULL;
 23f8868:	2400      	movs	r4, #0
}
 23f886a:	4620      	mov	r0, r4
 23f886c:	b005      	add	sp, #20
 23f886e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f8870:	1007ad5c 	.word	0x1007ad5c

023f8874 <_ZN6Device13setAllLatLongEff>:
void Device::setAllLatLong(float latitude, float longitude) {
 23f8874:	b538      	push	{r3, r4, r5, lr}
 23f8876:	ed2d 8b02 	vpush	{d8}
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f887a:	2500      	movs	r5, #0
void Device::setAllLatLong(float latitude, float longitude) {
 23f887c:	eeb0 8a40 	vmov.f32	s16, s0
 23f8880:	eef0 8a60 	vmov.f32	s17, s1
    Device *ptr = _devices;
 23f8884:	4b0a      	ldr	r3, [pc, #40]	; (23f88b0 <_ZN6Device13setAllLatLongEff+0x3c>)
 23f8886:	681c      	ldr	r4, [r3, #0]
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f8888:	f7ff ffc8 	bl	23f881c <_ZN6Device5countEv>
 23f888c:	42a8      	cmp	r0, r5
 23f888e:	dd0b      	ble.n	23f88a8 <_ZN6Device13setAllLatLongEff+0x34>
 23f8890:	b154      	cbz	r4, 23f88a8 <_ZN6Device13setAllLatLongEff+0x34>
        ptr->setLatLong(latitude,longitude);
 23f8892:	6823      	ldr	r3, [r4, #0]
 23f8894:	4620      	mov	r0, r4
 23f8896:	eef0 0a68 	vmov.f32	s1, s17
 23f889a:	eeb0 0a48 	vmov.f32	s0, s16
 23f889e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f88a0:	4798      	blx	r3
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f88a2:	3501      	adds	r5, #1
        ptr = ptr->_next;
 23f88a4:	6864      	ldr	r4, [r4, #4]
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f88a6:	e7ef      	b.n	23f8888 <_ZN6Device13setAllLatLongEff+0x14>
}
 23f88a8:	ecbd 8b02 	vpop	{d8}
 23f88ac:	bd38      	pop	{r3, r4, r5, pc}
 23f88ae:	bf00      	nop
 23f88b0:	1007ad5c 	.word	0x1007ad5c

023f88b4 <_ZN6Device7mqttAllE6StringS0_>:
{
 23f88b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f88b6:	4605      	mov	r5, r0
 23f88b8:	460e      	mov	r6, r1
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f88ba:	4b10      	ldr	r3, [pc, #64]	; (23f88fc <_ZN6Device7mqttAllE6StringS0_+0x48>)
{
 23f88bc:	b089      	sub	sp, #36	; 0x24
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f88be:	681c      	ldr	r4, [r3, #0]
 23f88c0:	b1cc      	cbz	r4, 23f88f6 <_ZN6Device7mqttAllE6StringS0_+0x42>
        if(ptr->_type == 'W') {
 23f88c2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 23f88c6:	2b57      	cmp	r3, #87	; 0x57
 23f88c8:	d113      	bne.n	23f88f2 <_ZN6Device7mqttAllE6StringS0_+0x3e>
            ptr->mqtt(topic, message);
 23f88ca:	6823      	ldr	r3, [r4, #0]
 23f88cc:	4629      	mov	r1, r5
 23f88ce:	4668      	mov	r0, sp
 23f88d0:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 23f88d2:	f003 f886 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f88d6:	4631      	mov	r1, r6
 23f88d8:	a804      	add	r0, sp, #16
 23f88da:	f003 f882 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f88de:	4669      	mov	r1, sp
 23f88e0:	4620      	mov	r0, r4
 23f88e2:	aa04      	add	r2, sp, #16
 23f88e4:	47b8      	blx	r7
 23f88e6:	a804      	add	r0, sp, #16
 23f88e8:	f002 ffe4 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f88ec:	4668      	mov	r0, sp
 23f88ee:	f002 ffe1 	bl	23fb8b4 <_ZN6StringD1Ev>
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f88f2:	6864      	ldr	r4, [r4, #4]
 23f88f4:	e7e4      	b.n	23f88c0 <_ZN6Device7mqttAllE6StringS0_+0xc>
}
 23f88f6:	b009      	add	sp, #36	; 0x24
 23f88f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f88fa:	bf00      	nop
 23f88fc:	1007ad5c 	.word	0x1007ad5c

023f8900 <_ZN6Device6exposeEv>:
{
 23f8900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(!Particle.variable(kDevicesVariableName, calculateDevices))
 23f8902:	4c31      	ldr	r4, [pc, #196]	; (23f89c8 <_ZN6Device6exposeEv+0xc8>)
 23f8904:	4931      	ldr	r1, [pc, #196]	; (23f89cc <_ZN6Device6exposeEv+0xcc>)
 23f8906:	6820      	ldr	r0, [r4, #0]
 23f8908:	f7ff fd6e 	bl	23f83e8 <_ZN10CloudClass8variableI6StringJRFS1_vEEEEbRKT_DpOT0_.isra.0>
 23f890c:	b988      	cbnz	r0, 23f8932 <_ZN6Device6exposeEv+0x32>
    StringSumHelper(const char *p) : String(p) {}
 23f890e:	4930      	ldr	r1, [pc, #192]	; (23f89d0 <_ZN6Device6exposeEv+0xd0>)
 23f8910:	4668      	mov	r0, sp
 23f8912:	f003 f81a 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
        Log.error("Error: Unable to expose " + kDevicesVariableName + " variable");
 23f8916:	4621      	mov	r1, r4
 23f8918:	4668      	mov	r0, sp
 23f891a:	f003 f90d 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f891e:	492d      	ldr	r1, [pc, #180]	; (23f89d4 <_ZN6Device6exposeEv+0xd4>)
 23f8920:	f003 f916 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f8924:	6801      	ldr	r1, [r0, #0]
 23f8926:	482c      	ldr	r0, [pc, #176]	; (23f89d8 <_ZN6Device6exposeEv+0xd8>)
 23f8928:	f7fe f9e0 	bl	23f6cec <_ZNK5spark6Logger5errorEPKcz>
class StringSumHelper : public String
 23f892c:	4668      	mov	r0, sp
 23f892e:	f002 ffc1 	bl	23fb8b4 <_ZN6StringD1Ev>
    if(!Particle.variable(kChecklistVariableName, calculateChecklist))
 23f8932:	4c2a      	ldr	r4, [pc, #168]	; (23f89dc <_ZN6Device6exposeEv+0xdc>)
 23f8934:	492a      	ldr	r1, [pc, #168]	; (23f89e0 <_ZN6Device6exposeEv+0xe0>)
 23f8936:	6820      	ldr	r0, [r4, #0]
 23f8938:	f7ff fd56 	bl	23f83e8 <_ZN10CloudClass8variableI6StringJRFS1_vEEEEbRKT_DpOT0_.isra.0>
 23f893c:	b988      	cbnz	r0, 23f8962 <_ZN6Device6exposeEv+0x62>
    StringSumHelper(const char *p) : String(p) {}
 23f893e:	4924      	ldr	r1, [pc, #144]	; (23f89d0 <_ZN6Device6exposeEv+0xd0>)
 23f8940:	4668      	mov	r0, sp
 23f8942:	f003 f802 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
        Log.error("Error: Unable to expose " + kChecklistVariableName + " variable");
 23f8946:	4621      	mov	r1, r4
 23f8948:	4668      	mov	r0, sp
 23f894a:	f003 f8f5 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f894e:	4921      	ldr	r1, [pc, #132]	; (23f89d4 <_ZN6Device6exposeEv+0xd4>)
 23f8950:	f003 f8fe 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f8954:	6801      	ldr	r1, [r0, #0]
 23f8956:	4820      	ldr	r0, [pc, #128]	; (23f89d8 <_ZN6Device6exposeEv+0xd8>)
 23f8958:	f7fe f9c8 	bl	23f6cec <_ZNK5spark6Logger5errorEPKcz>
class StringSumHelper : public String
 23f895c:	4668      	mov	r0, sp
 23f895e:	f002 ffa9 	bl	23fb8b4 <_ZN6StringD1Ev>
    if(!Particle.variable(kStatusVariableName, Device::calculateStatus))
 23f8962:	4c20      	ldr	r4, [pc, #128]	; (23f89e4 <_ZN6Device6exposeEv+0xe4>)
 23f8964:	4920      	ldr	r1, [pc, #128]	; (23f89e8 <_ZN6Device6exposeEv+0xe8>)
 23f8966:	6820      	ldr	r0, [r4, #0]
 23f8968:	f7ff fd3e 	bl	23f83e8 <_ZN10CloudClass8variableI6StringJRFS1_vEEEEbRKT_DpOT0_.isra.0>
 23f896c:	b988      	cbnz	r0, 23f8992 <_ZN6Device6exposeEv+0x92>
    StringSumHelper(const char *p) : String(p) {}
 23f896e:	4918      	ldr	r1, [pc, #96]	; (23f89d0 <_ZN6Device6exposeEv+0xd0>)
 23f8970:	4668      	mov	r0, sp
 23f8972:	f002 ffea 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
        Log.error("Error: Unable to expose " + kStatusVariableName + " variable");
 23f8976:	4621      	mov	r1, r4
 23f8978:	4668      	mov	r0, sp
 23f897a:	f003 f8dd 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f897e:	4915      	ldr	r1, [pc, #84]	; (23f89d4 <_ZN6Device6exposeEv+0xd4>)
 23f8980:	f003 f8e6 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f8984:	6801      	ldr	r1, [r0, #0]
 23f8986:	4814      	ldr	r0, [pc, #80]	; (23f89d8 <_ZN6Device6exposeEv+0xd8>)
 23f8988:	f7fe f9b0 	bl	23f6cec <_ZNK5spark6Logger5errorEPKcz>
class StringSumHelper : public String
 23f898c:	4668      	mov	r0, sp
 23f898e:	f002 ff91 	bl	23fb8b4 <_ZN6StringD1Ev>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 23f8992:	4c16      	ldr	r4, [pc, #88]	; (23f89ec <_ZN6Device6exposeEv+0xec>)
 23f8994:	4916      	ldr	r1, [pc, #88]	; (23f89f0 <_ZN6Device6exposeEv+0xf0>)
 23f8996:	6822      	ldr	r2, [r4, #0]
 23f8998:	4816      	ldr	r0, [pc, #88]	; (23f89f4 <_ZN6Device6exposeEv+0xf4>)
 23f899a:	f001 fb41 	bl	23fa020 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    if(!Particle.function(kSSIDFunctionName, Device::setSSID))
 23f899e:	b988      	cbnz	r0, 23f89c4 <_ZN6Device6exposeEv+0xc4>
    StringSumHelper(const char *p) : String(p) {}
 23f89a0:	490b      	ldr	r1, [pc, #44]	; (23f89d0 <_ZN6Device6exposeEv+0xd0>)
 23f89a2:	4668      	mov	r0, sp
 23f89a4:	f002 ffd1 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
        Log.error("Error: Unable to expose " + kSSIDFunctionName + " function");
 23f89a8:	4621      	mov	r1, r4
 23f89aa:	4668      	mov	r0, sp
 23f89ac:	f003 f8c4 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f89b0:	4911      	ldr	r1, [pc, #68]	; (23f89f8 <_ZN6Device6exposeEv+0xf8>)
 23f89b2:	f003 f8cd 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f89b6:	6801      	ldr	r1, [r0, #0]
 23f89b8:	4807      	ldr	r0, [pc, #28]	; (23f89d8 <_ZN6Device6exposeEv+0xd8>)
 23f89ba:	f7fe f997 	bl	23f6cec <_ZNK5spark6Logger5errorEPKcz>
class StringSumHelper : public String
 23f89be:	4668      	mov	r0, sp
 23f89c0:	f002 ff78 	bl	23fb8b4 <_ZN6StringD1Ev>
}
 23f89c4:	b004      	add	sp, #16
 23f89c6:	bd10      	pop	{r4, pc}
 23f89c8:	1007ade4 	.word	0x1007ade4
 23f89cc:	023f82f5 	.word	0x023f82f5
 23f89d0:	023ff756 	.word	0x023ff756
 23f89d4:	023ff64d 	.word	0x023ff64d
 23f89d8:	1007ae1c 	.word	0x1007ae1c
 23f89dc:	1007adf4 	.word	0x1007adf4
 23f89e0:	023f868d 	.word	0x023f868d
 23f89e4:	1007add4 	.word	0x1007add4
 23f89e8:	023f840d 	.word	0x023f840d
 23f89ec:	1007adc4 	.word	0x1007adc4
 23f89f0:	023f85a1 	.word	0x023f85a1
 23f89f4:	023f9ff5 	.word	0x023f9ff5
 23f89f8:	023ff76f 	.word	0x023ff76f

023f89fc <_ZN6Device13publishStatesEv>:


// Publish each device name and its value in response to patriot/query
// New format: patriot/state/<room>/<T>/<name>
void Device::publishStates() {
 23f89fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f89fe:	4b29      	ldr	r3, [pc, #164]	; (23f8aa4 <_ZN6Device13publishStatesEv+0xa8>)
    StringSumHelper(const char *p) : String(p) {}
 23f8a00:	4f29      	ldr	r7, [pc, #164]	; (23f8aa8 <_ZN6Device13publishStatesEv+0xac>)
 23f8a02:	681c      	ldr	r4, [r3, #0]
        IoT::publishMQTT("state/"+ptr->room()+"/"+ptr->type()+"/"+ptr->name(), String(ptr->_value));
 23f8a04:	4e29      	ldr	r6, [pc, #164]	; (23f8aac <_ZN6Device13publishStatesEv+0xb0>)
void Device::publishStates() {
 23f8a06:	b099      	sub	sp, #100	; 0x64
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f8a08:	2c00      	cmp	r4, #0
 23f8a0a:	d048      	beq.n	23f8a9e <_ZN6Device13publishStatesEv+0xa2>
 23f8a0c:	4639      	mov	r1, r7
 23f8a0e:	a804      	add	r0, sp, #16
 23f8a10:	f002 ff9b 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
        IoT::publishMQTT("state/"+ptr->room()+"/"+ptr->type()+"/"+ptr->name(), String(ptr->_value));
 23f8a14:	6823      	ldr	r3, [r4, #0]
 23f8a16:	4621      	mov	r1, r4
 23f8a18:	68db      	ldr	r3, [r3, #12]
 23f8a1a:	4668      	mov	r0, sp
 23f8a1c:	4798      	blx	r3
 23f8a1e:	4669      	mov	r1, sp
 23f8a20:	a804      	add	r0, sp, #16
 23f8a22:	f003 f889 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f8a26:	4631      	mov	r1, r6
 23f8a28:	f003 f892 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f8a2c:	4605      	mov	r5, r0
 23f8a2e:	6823      	ldr	r3, [r4, #0]
 23f8a30:	4621      	mov	r1, r4
 23f8a32:	691b      	ldr	r3, [r3, #16]
 23f8a34:	a808      	add	r0, sp, #32
 23f8a36:	4798      	blx	r3
 23f8a38:	4628      	mov	r0, r5
 23f8a3a:	a908      	add	r1, sp, #32
 23f8a3c:	f003 f87c 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f8a40:	4631      	mov	r1, r6
 23f8a42:	f003 f885 	bl	23fbb50 <_ZplRK15StringSumHelperPKc>
 23f8a46:	4605      	mov	r5, r0
 23f8a48:	6823      	ldr	r3, [r4, #0]
 23f8a4a:	4621      	mov	r1, r4
 23f8a4c:	689b      	ldr	r3, [r3, #8]
 23f8a4e:	a80c      	add	r0, sp, #48	; 0x30
 23f8a50:	4798      	blx	r3
 23f8a52:	a90c      	add	r1, sp, #48	; 0x30
 23f8a54:	4628      	mov	r0, r5
 23f8a56:	f003 f86f 	bl	23fbb38 <_ZplRK15StringSumHelperRK6String>
 23f8a5a:	4601      	mov	r1, r0
 23f8a5c:	a814      	add	r0, sp, #80	; 0x50
 23f8a5e:	f002 ffc0 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23f8a62:	69a1      	ldr	r1, [r4, #24]
 23f8a64:	220a      	movs	r2, #10
 23f8a66:	a810      	add	r0, sp, #64	; 0x40
 23f8a68:	f002 fff1 	bl	23fba4e <_ZN6StringC1Eih>
 23f8a6c:	2200      	movs	r2, #0
 23f8a6e:	a910      	add	r1, sp, #64	; 0x40
 23f8a70:	a814      	add	r0, sp, #80	; 0x50
 23f8a72:	f7fe fa95 	bl	23f6fa0 <_ZN3IoT11publishMQTTE6StringS0_b>
 23f8a76:	a810      	add	r0, sp, #64	; 0x40
 23f8a78:	f002 ff1c 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f8a7c:	a814      	add	r0, sp, #80	; 0x50
 23f8a7e:	f002 ff19 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f8a82:	a80c      	add	r0, sp, #48	; 0x30
 23f8a84:	f002 ff16 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f8a88:	a808      	add	r0, sp, #32
 23f8a8a:	f002 ff13 	bl	23fb8b4 <_ZN6StringD1Ev>
 23f8a8e:	4668      	mov	r0, sp
 23f8a90:	f002 ff10 	bl	23fb8b4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f8a94:	a804      	add	r0, sp, #16
 23f8a96:	f002 ff0d 	bl	23fb8b4 <_ZN6StringD1Ev>
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f8a9a:	6864      	ldr	r4, [r4, #4]
 23f8a9c:	e7b4      	b.n	23f8a08 <_ZN6Device13publishStatesEv+0xc>
    }
}
 23f8a9e:	b019      	add	sp, #100	; 0x64
 23f8aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f8aa2:	bf00      	nop
 23f8aa4:	1007ad5c 	.word	0x1007ad5c
 23f8aa8:	023ff779 	.word	0x023ff779
 23f8aac:	023ff77e 	.word	0x023ff77e

023f8ab0 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c>:
 23f8ab0:	b508      	push	{r3, lr}
static const String kDevicesVariableName       = "Devices";
 23f8ab2:	490b      	ldr	r1, [pc, #44]	; (23f8ae0 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x30>)
 23f8ab4:	480b      	ldr	r0, [pc, #44]	; (23f8ae4 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x34>)
 23f8ab6:	f002 ff48 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
static const String kChecklistVariableName     = "Checklist";
 23f8aba:	490b      	ldr	r1, [pc, #44]	; (23f8ae8 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x38>)
 23f8abc:	480b      	ldr	r0, [pc, #44]	; (23f8aec <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x3c>)
 23f8abe:	f002 ff44 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
static const String kStatusVariableName        = "Status";
 23f8ac2:	490b      	ldr	r1, [pc, #44]	; (23f8af0 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x40>)
 23f8ac4:	480b      	ldr	r0, [pc, #44]	; (23f8af4 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x44>)
 23f8ac6:	f002 ff40 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
static const String kPublishName               = "patriot";
 23f8aca:	490b      	ldr	r1, [pc, #44]	; (23f8af8 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x48>)
 23f8acc:	480b      	ldr	r0, [pc, #44]	; (23f8afc <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x4c>)
 23f8ace:	f002 ff3c 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
 23f8ad2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
static const String kSSIDFunctionName          = "setSSID";
 23f8ad6:	490a      	ldr	r1, [pc, #40]	; (23f8b00 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x50>)
 23f8ad8:	480a      	ldr	r0, [pc, #40]	; (23f8b04 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x54>)
 23f8ada:	f002 bf36 	b.w	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
 23f8ade:	bf00      	nop
 23f8ae0:	023ff354 	.word	0x023ff354
 23f8ae4:	1007ade4 	.word	0x1007ade4
 23f8ae8:	023ff35c 	.word	0x023ff35c
 23f8aec:	1007adf4 	.word	0x1007adf4
 23f8af0:	023ff366 	.word	0x023ff366
 23f8af4:	1007add4 	.word	0x1007add4
 23f8af8:	023ff36d 	.word	0x023ff36d
 23f8afc:	1007adb4 	.word	0x1007adb4
 23f8b00:	023ff375 	.word	0x023ff375
 23f8b04:	1007adc4 	.word	0x1007adc4

023f8b08 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
 23f8b08:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
 23f8b0c:	b510      	push	{r4, lr}
 23f8b0e:	4604      	mov	r4, r0
            this->mqtt = mqtt;
 23f8b10:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
 23f8b12:	b113      	cbz	r3, 23f8b1a <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
 23f8b14:	6d88      	ldr	r0, [r1, #88]	; 0x58
 23f8b16:	f000 fc21 	bl	23f935c <os_mutex_lock>
#endif
#endif
#endif
        }
 23f8b1a:	4620      	mov	r0, r4
 23f8b1c:	bd10      	pop	{r4, pc}

023f8b1e <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
 23f8b1e:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
 23f8b20:	6803      	ldr	r3, [r0, #0]
        ~MutexLocker() {
 23f8b22:	4604      	mov	r4, r0
            if (mqtt->thread)
 23f8b24:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 23f8b28:	b112      	cbz	r2, 23f8b30 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
 23f8b2a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 23f8b2c:	f000 fc24 	bl	23f9378 <os_mutex_unlock>
#endif
#endif
#endif
        }
 23f8b30:	4620      	mov	r0, r4
 23f8b32:	bd10      	pop	{r4, pc}

023f8b34 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
 23f8b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f8b36:	461f      	mov	r7, r3
 23f8b38:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 23f8b3c:	4604      	mov	r4, r0
 23f8b3e:	460d      	mov	r5, r1
 23f8b40:	4616      	mov	r6, r2
    if (thread) {
 23f8b42:	b123      	cbz	r3, 23f8b4e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1a>
        this->thread = true;
 23f8b44:	2301      	movs	r3, #1
        os_mutex_create(&mutex_lock);
 23f8b46:	3058      	adds	r0, #88	; 0x58
        this->thread = true;
 23f8b48:	7103      	strb	r3, [r0, #4]
        os_mutex_create(&mutex_lock);
 23f8b4a:	f000 fbf9 	bl	23f9340 <os_mutex_create>
    }
    this->callback = callback;
 23f8b4e:	9b08      	ldr	r3, [sp, #32]
 23f8b50:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
 23f8b52:	2300      	movs	r3, #0
 23f8b54:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
 23f8b56:	b106      	cbz	r6, 23f8b5a <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x26>
        this->ip = ip;
 23f8b58:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
 23f8b5a:	b125      	cbz	r5, 23f8b66 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x32>
        this->domain = domain;
 23f8b5c:	4629      	mov	r1, r5
 23f8b5e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 23f8b62:	f002 ff51 	bl	23fba08 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 23f8b66:	9b06      	ldr	r3, [sp, #24]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 23f8b68:	69e0      	ldr	r0, [r4, #28]
    this->keepalive = keepalive;
 23f8b6a:	6523      	str	r3, [r4, #80]	; 0x50
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 23f8b6c:	9b07      	ldr	r3, [sp, #28]
    this->port = port;
 23f8b6e:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 23f8b72:	2bff      	cmp	r3, #255	; 0xff
 23f8b74:	bfb8      	it	lt
 23f8b76:	23ff      	movlt	r3, #255	; 0xff
 23f8b78:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 23f8b7c:	b108      	cbz	r0, 23f8b82 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x4e>
      delete[] buffer;
 23f8b7e:	f7fd feca 	bl	23f6916 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 23f8b82:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 23f8b86:	f7fd fec4 	bl	23f6912 <_Znaj>
 23f8b8a:	61e0      	str	r0, [r4, #28]
}
 23f8b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

023f8b90 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
 23f8b90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f8b94:	4604      	mov	r4, r0
            bool thread) {
 23f8b96:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
 23f8b98:	4698      	mov	r8, r3
 23f8b9a:	4617      	mov	r7, r2
 23f8b9c:	460e      	mov	r6, r1
            bool thread) {
 23f8b9e:	f003 fc29 	bl	23fc3f4 <_ZN9TCPClientC1Ev>
 23f8ba2:	490d      	ldr	r1, [pc, #52]	; (23f8bd8 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
 23f8ba4:	61e5      	str	r5, [r4, #28]
 23f8ba6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 23f8baa:	f002 fece 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
 23f8bae:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 23f8bb2:	22ff      	movs	r2, #255	; 0xff
 23f8bb4:	e9cd 8302 	strd	r8, r3, [sp, #8]
 23f8bb8:	230f      	movs	r3, #15
 23f8bba:	4620      	mov	r0, r4
 23f8bbc:	e9cd 3200 	strd	r3, r2, [sp]
 23f8bc0:	4631      	mov	r1, r6
 23f8bc2:	463b      	mov	r3, r7
 23f8bc4:	462a      	mov	r2, r5
            bool thread) {
 23f8bc6:	64a5      	str	r5, [r4, #72]	; 0x48
 23f8bc8:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
 23f8bcc:	f7ff ffb2 	bl	23f8b34 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
 23f8bd0:	4620      	mov	r0, r4
 23f8bd2:	b004      	add	sp, #16
 23f8bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f8bd8:	023ff895 	.word	0x023ff895

023f8bdc <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 23f8bdc:	b510      	push	{r4, lr}
 23f8bde:	4604      	mov	r4, r0
    while(!_client.available()) {}
 23f8be0:	4620      	mov	r0, r4
 23f8be2:	f003 fb63 	bl	23fc2ac <_ZN9TCPClient9availableEv>
 23f8be6:	2800      	cmp	r0, #0
 23f8be8:	d0fa      	beq.n	23f8be0 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 23f8bea:	4620      	mov	r0, r4
 23f8bec:	f003 f948 	bl	23fbe80 <_ZN9TCPClient4readEv>
}
 23f8bf0:	b2c0      	uxtb	r0, r0
 23f8bf2:	bd10      	pop	{r4, pc}

023f8bf4 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 23f8bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t len = 0;
    buffer[len++] = readByte();
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 23f8bf8:	f04f 0901 	mov.w	r9, #1
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 23f8bfc:	4605      	mov	r5, r0
 23f8bfe:	4688      	mov	r8, r1
    buffer[len++] = readByte();
 23f8c00:	f7ff ffec 	bl	23f8bdc <_ZN4MQTT8readByteEv>
    uint16_t length = 0;
 23f8c04:	2700      	movs	r7, #0
    buffer[len++] = readByte();
 23f8c06:	464c      	mov	r4, r9
 23f8c08:	69eb      	ldr	r3, [r5, #28]
 23f8c0a:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 23f8c0c:	69eb      	ldr	r3, [r5, #28]
 23f8c0e:	f893 a000 	ldrb.w	sl, [r3]
 23f8c12:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 23f8c16:	4628      	mov	r0, r5
 23f8c18:	f7ff ffe0 	bl	23f8bdc <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 23f8c1c:	4626      	mov	r6, r4
 23f8c1e:	69eb      	ldr	r3, [r5, #28]
 23f8c20:	3401      	adds	r4, #1
 23f8c22:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 23f8c24:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 23f8c28:	fb13 f309 	smulbb	r3, r3, r9
 23f8c2c:	441f      	add	r7, r3
        multiplier *= 128;
    } while ((digit & 128) != 0);
 23f8c2e:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
 23f8c30:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 23f8c32:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 23f8c34:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
 23f8c38:	d4ed      	bmi.n	23f8c16 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
 23f8c3a:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 23f8c3c:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
 23f8c40:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
 23f8c44:	d11e      	bne.n	23f8c84 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 23f8c46:	4628      	mov	r0, r5
 23f8c48:	f7ff ffc8 	bl	23f8bdc <_ZN4MQTT8readByteEv>
 23f8c4c:	69eb      	ldr	r3, [r5, #28]
 23f8c4e:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
 23f8c50:	4628      	mov	r0, r5
 23f8c52:	f7ff ffc3 	bl	23f8bdc <_ZN4MQTT8readByteEv>
 23f8c56:	1cf4      	adds	r4, r6, #3
 23f8c58:	69eb      	ldr	r3, [r5, #28]
        buffer[len++] = readByte();
 23f8c5a:	3602      	adds	r6, #2
        buffer[len++] = readByte();
 23f8c5c:	b2b6      	uxth	r6, r6
 23f8c5e:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 23f8c60:	2602      	movs	r6, #2
        buffer[len++] = readByte();
 23f8c62:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 23f8c64:	b2b6      	uxth	r6, r6
 23f8c66:	42be      	cmp	r6, r7
 23f8c68:	d20e      	bcs.n	23f8c88 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
 23f8c6a:	4628      	mov	r0, r5
 23f8c6c:	f7ff ffb6 	bl	23f8bdc <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 23f8c70:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
    for (uint16_t i = start;i<length;i++) {
 23f8c74:	3601      	adds	r6, #1
        if (len < this->maxpacketsize) {
 23f8c76:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 23f8c78:	bf84      	itt	hi
 23f8c7a:	69eb      	ldrhi	r3, [r5, #28]
 23f8c7c:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 23f8c7e:	3401      	adds	r4, #1
 23f8c80:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
 23f8c82:	e7ef      	b.n	23f8c64 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
 23f8c84:	2600      	movs	r6, #0
 23f8c86:	e7ed      	b.n	23f8c64 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
 23f8c88:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 23f8c8c:	42a3      	cmp	r3, r4
 23f8c8e:	bf2c      	ite	cs
 23f8c90:	4620      	movcs	r0, r4
 23f8c92:	2000      	movcc	r0, #0
 23f8c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023f8c98 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 23f8c98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f8c9c:	4615      	mov	r5, r2
 23f8c9e:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 23f8ca0:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 23f8ca2:	4607      	mov	r7, r0
    uint8_t llen = 0;
 23f8ca4:	2300      	movs	r3, #0
    do {
        digit = len % 128;
 23f8ca6:	4696      	mov	lr, r2
 23f8ca8:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
 23f8cac:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 23f8cb0:	a802      	add	r0, sp, #8
            digit |= 0x80;
 23f8cb2:	bf88      	it	hi
 23f8cb4:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        lenBuf[pos++] = digit;
 23f8cb8:	1c5c      	adds	r4, r3, #1
        llen++;
    } while(len > 0);
 23f8cba:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
 23f8cbe:	4403      	add	r3, r0
        len = len / 128;
 23f8cc0:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
 23f8cc4:	b2e4      	uxtb	r4, r4
 23f8cc6:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
 23f8cca:	d81e      	bhi.n	23f8d0a <_ZN4MQTT5writeEhPht+0x72>

    buf[4-llen] = header;
 23f8ccc:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
 23f8cd0:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
 23f8cd4:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
 23f8cd6:	4622      	mov	r2, r4
 23f8cd8:	a901      	add	r1, sp, #4
 23f8cda:	4428      	add	r0, r5
    buf[4-llen] = header;
 23f8cdc:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
 23f8ce0:	f004 fa72 	bl	23fd1c8 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 23f8ce4:	1c72      	adds	r2, r6, #1
 23f8ce6:	4422      	add	r2, r4
 23f8ce8:	4641      	mov	r1, r8
 23f8cea:	4638      	mov	r0, r7
 23f8cec:	f003 f8b3 	bl	23fbe56 <_ZN9TCPClient5writeEPKhj>
 23f8cf0:	4605      	mov	r5, r0
 23f8cf2:	f000 fbb1 	bl	23f9458 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 23f8cf6:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
 23f8cf8:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 23f8cfa:	4432      	add	r2, r6
 23f8cfc:	b2a8      	uxth	r0, r5
}
 23f8cfe:	1a13      	subs	r3, r2, r0
 23f8d00:	4258      	negs	r0, r3
 23f8d02:	4158      	adcs	r0, r3
 23f8d04:	b002      	add	sp, #8
 23f8d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
 23f8d0a:	4623      	mov	r3, r4
 23f8d0c:	e7cb      	b.n	23f8ca6 <_ZN4MQTT5writeEhPht+0xe>

023f8d0e <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 23f8d0e:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 23f8d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f8d12:	4605      	mov	r5, r0
    pos += 2;
 23f8d14:	b298      	uxth	r0, r3
 23f8d16:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
 23f8d18:	5cce      	ldrb	r6, [r1, r3]
 23f8d1a:	b29c      	uxth	r4, r3
 23f8d1c:	b14e      	cbz	r6, 23f8d32 <_ZN4MQTT11writeStringEPKcPht+0x24>
 23f8d1e:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
 23f8d22:	1c5f      	adds	r7, r3, #1
 23f8d24:	4584      	cmp	ip, r0
 23f8d26:	d904      	bls.n	23f8d32 <_ZN4MQTT11writeStringEPKcPht+0x24>
        buf[pos++] = *idp++;
 23f8d28:	1c44      	adds	r4, r0, #1
 23f8d2a:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
 23f8d2c:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
 23f8d2e:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
 23f8d30:	e7f2      	b.n	23f8d18 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 23f8d32:	b299      	uxth	r1, r3
 23f8d34:	1a41      	subs	r1, r0, r1
 23f8d36:	440a      	add	r2, r1
 23f8d38:	0a21      	lsrs	r1, r4, #8
 23f8d3a:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 23f8d3e:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
 23f8d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f8d44 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 23f8d44:	b538      	push	{r3, r4, r5, lr}
 23f8d46:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
 23f8d48:	f003 f9d2 	bl	23fc0f0 <_ZN9TCPClient9connectedEv>
 23f8d4c:	2800      	cmp	r0, #0
 23f8d4e:	bf14      	ite	ne
 23f8d50:	2501      	movne	r5, #1
 23f8d52:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
 23f8d54:	d102      	bne.n	23f8d5c <_ZN4MQTT11isConnectedEv+0x18>
 23f8d56:	4620      	mov	r0, r4
 23f8d58:	f003 fb02 	bl	23fc360 <_ZN9TCPClient4stopEv>
    return rc;
}
 23f8d5c:	4628      	mov	r0, r5
 23f8d5e:	bd38      	pop	{r3, r4, r5, pc}

023f8d60 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 23f8d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f8d64:	b088      	sub	sp, #32
 23f8d66:	4604      	mov	r4, r0
 23f8d68:	4689      	mov	r9, r1
 23f8d6a:	4617      	mov	r7, r2
 23f8d6c:	461e      	mov	r6, r3
 23f8d6e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 23f8d72:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    if (!isConnected()) {
 23f8d76:	f7ff ffe5 	bl	23f8d44 <_ZN4MQTT11isConnectedEv>
 23f8d7a:	4605      	mov	r5, r0
 23f8d7c:	2800      	cmp	r0, #0
 23f8d7e:	f040 80cd 	bne.w	23f8f1c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
 23f8d82:	4621      	mov	r1, r4
 23f8d84:	a801      	add	r0, sp, #4
 23f8d86:	f7ff febf 	bl	23f8b08 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
 23f8d8a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f8d8c:	2900      	cmp	r1, #0
 23f8d8e:	f040 8088 	bne.w	23f8ea2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
 23f8d92:	462b      	mov	r3, r5
 23f8d94:	4620      	mov	r0, r4
 23f8d96:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 23f8d9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 23f8d9c:	f003 f92a 	bl	23fbff4 <_ZN9TCPClient7connectEPKctm>
        if (result) {
 23f8da0:	2800      	cmp	r0, #0
 23f8da2:	d07a      	beq.n	23f8e9a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
 23f8da4:	2301      	movs	r3, #1
 23f8da6:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
 23f8da8:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 23f8dac:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
 23f8dae:	2b04      	cmp	r3, #4
 23f8db0:	4b5b      	ldr	r3, [pc, #364]	; (23f8f20 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
 23f8db2:	f040 8081 	bne.w	23f8eb8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 23f8db6:	6818      	ldr	r0, [r3, #0]
 23f8db8:	8899      	ldrh	r1, [r3, #4]
 23f8dba:	799b      	ldrb	r3, [r3, #6]
 23f8dbc:	f8ad 100c 	strh.w	r1, [sp, #12]
 23f8dc0:	f88d 300e 	strb.w	r3, [sp, #14]
 23f8dc4:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 23f8dc6:	f8c2 0005 	str.w	r0, [r2, #5]
 23f8dca:	f89d 300e 	ldrb.w	r3, [sp, #14]
 23f8dce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 23f8dd2:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
 23f8dd4:	230c      	movs	r3, #12
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 23f8dd6:	f8a2 1009 	strh.w	r1, [r2, #9]
            if (willTopic) {
 23f8dda:	f1b8 0f00 	cmp.w	r8, #0
 23f8dde:	f000 8081 	beq.w	23f8ee4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 23f8de2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 23f8de6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 23f8dea:	0140      	lsls	r0, r0, #5
 23f8dec:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 23f8df0:	f040 0006 	orr.w	r0, r0, #6
 23f8df4:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
 23f8df6:	f1ba 0f00 	cmp.w	sl, #0
 23f8dfa:	d101      	bne.n	23f8e00 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
 23f8dfc:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
 23f8e00:	b11f      	cbz	r7, 23f8e0a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
 23f8e02:	2e00      	cmp	r6, #0
 23f8e04:	d170      	bne.n	23f8ee8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
 23f8e06:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
 23f8e0a:	69e2      	ldr	r2, [r4, #28]
 23f8e0c:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
 23f8e0e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 23f8e10:	69e1      	ldr	r1, [r4, #28]
 23f8e12:	1c58      	adds	r0, r3, #1
 23f8e14:	1212      	asrs	r2, r2, #8
 23f8e16:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 23f8e18:	69e1      	ldr	r1, [r4, #28]
 23f8e1a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 23f8e1c:	1c9a      	adds	r2, r3, #2
 23f8e1e:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 23f8e20:	3303      	adds	r3, #3
 23f8e22:	4649      	mov	r1, r9
 23f8e24:	4620      	mov	r0, r4
 23f8e26:	69e2      	ldr	r2, [r4, #28]
 23f8e28:	f7ff ff71 	bl	23f8d0e <_ZN4MQTT11writeStringEPKcPht>
 23f8e2c:	4603      	mov	r3, r0
            if (willTopic) {
 23f8e2e:	f1b8 0f00 	cmp.w	r8, #0
 23f8e32:	d00b      	beq.n	23f8e4c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
 23f8e34:	4641      	mov	r1, r8
 23f8e36:	69e2      	ldr	r2, [r4, #28]
 23f8e38:	4620      	mov	r0, r4
 23f8e3a:	f7ff ff68 	bl	23f8d0e <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 23f8e3e:	69e2      	ldr	r2, [r4, #28]
                length = writeString(willTopic, buffer, length);
 23f8e40:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
 23f8e42:	9913      	ldr	r1, [sp, #76]	; 0x4c
 23f8e44:	4620      	mov	r0, r4
 23f8e46:	f7ff ff62 	bl	23f8d0e <_ZN4MQTT11writeStringEPKcPht>
 23f8e4a:	4603      	mov	r3, r0
            if(user != NULL) {
 23f8e4c:	b167      	cbz	r7, 23f8e68 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
 23f8e4e:	4639      	mov	r1, r7
 23f8e50:	4620      	mov	r0, r4
 23f8e52:	69e2      	ldr	r2, [r4, #28]
 23f8e54:	f7ff ff5b 	bl	23f8d0e <_ZN4MQTT11writeStringEPKcPht>
 23f8e58:	4603      	mov	r3, r0
                if(pass != NULL) {
 23f8e5a:	b12e      	cbz	r6, 23f8e68 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
 23f8e5c:	4631      	mov	r1, r6
 23f8e5e:	4620      	mov	r0, r4
 23f8e60:	69e2      	ldr	r2, [r4, #28]
 23f8e62:	f7ff ff54 	bl	23f8d0e <_ZN4MQTT11writeStringEPKcPht>
 23f8e66:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
 23f8e68:	3b05      	subs	r3, #5
 23f8e6a:	2110      	movs	r1, #16
 23f8e6c:	69e2      	ldr	r2, [r4, #28]
 23f8e6e:	b29b      	uxth	r3, r3
 23f8e70:	4620      	mov	r0, r4
 23f8e72:	f7ff ff11 	bl	23f8c98 <_ZN4MQTT5writeEhPht>
 23f8e76:	f000 faef 	bl	23f9458 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 23f8e7a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            lastInActivity = lastOutActivity = millis();
 23f8e7e:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
            while (!_client.available()) {
 23f8e82:	4620      	mov	r0, r4
 23f8e84:	f003 fa12 	bl	23fc2ac <_ZN9TCPClient9availableEv>
 23f8e88:	bb88      	cbnz	r0, 23f8eee <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
 23f8e8a:	f000 fae5 	bl	23f9458 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 23f8e8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23f8e90:	1ac0      	subs	r0, r0, r3
 23f8e92:	6d23      	ldr	r3, [r4, #80]	; 0x50
 23f8e94:	4373      	muls	r3, r6
 23f8e96:	4298      	cmp	r0, r3
 23f8e98:	d9f3      	bls.n	23f8e82 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
 23f8e9a:	4620      	mov	r0, r4
 23f8e9c:	f003 fa60 	bl	23fc360 <_ZN9TCPClient4stopEv>
 23f8ea0:	e035      	b.n	23f8f0e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
 23f8ea2:	a802      	add	r0, sp, #8
 23f8ea4:	f001 f9d4 	bl	23fa250 <_ZN9IPAddressC1EPKh>
 23f8ea8:	462b      	mov	r3, r5
 23f8eaa:	4620      	mov	r0, r4
 23f8eac:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 23f8eb0:	a902      	add	r1, sp, #8
 23f8eb2:	f003 f97f 	bl	23fc1b4 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23f8eb6:	e773      	b.n	23f8da0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 23f8eb8:	f8d3 0007 	ldr.w	r0, [r3, #7]
 23f8ebc:	f8d3 100b 	ldr.w	r1, [r3, #11]
 23f8ec0:	f10d 0c08 	add.w	ip, sp, #8
 23f8ec4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 23f8ec8:	7bdb      	ldrb	r3, [r3, #15]
 23f8eca:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 23f8ece:	ab02      	add	r3, sp, #8
 23f8ed0:	cb03      	ldmia	r3!, {r0, r1}
 23f8ed2:	f8c2 0005 	str.w	r0, [r2, #5]
 23f8ed6:	f8c2 1009 	str.w	r1, [r2, #9]
 23f8eda:	f89c 3000 	ldrb.w	r3, [ip]
 23f8ede:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 23f8ee0:	230e      	movs	r3, #14
 23f8ee2:	e77a      	b.n	23f8dda <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
 23f8ee4:	2002      	movs	r0, #2
 23f8ee6:	e786      	b.n	23f8df6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
 23f8ee8:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 23f8eec:	e78d      	b.n	23f8e0a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
 23f8eee:	4620      	mov	r0, r4
 23f8ef0:	a902      	add	r1, sp, #8
 23f8ef2:	f7ff fe7f 	bl	23f8bf4 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
 23f8ef6:	2804      	cmp	r0, #4
 23f8ef8:	d1cf      	bne.n	23f8e9a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
 23f8efa:	69e3      	ldr	r3, [r4, #28]
 23f8efc:	78de      	ldrb	r6, [r3, #3]
 23f8efe:	2e00      	cmp	r6, #0
 23f8f00:	d1cb      	bne.n	23f8e9a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
 23f8f02:	f000 faa9 	bl	23f9458 <HAL_Timer_Get_Milli_Seconds>
                    return true;
 23f8f06:	2501      	movs	r5, #1
                    lastInActivity = millis();
 23f8f08:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 23f8f0a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
 23f8f0e:	a801      	add	r0, sp, #4
 23f8f10:	f7ff fe05 	bl	23f8b1e <_ZN4MQTT11MutexLockerD1Ev>
}
 23f8f14:	4628      	mov	r0, r5
 23f8f16:	b008      	add	sp, #32
 23f8f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
 23f8f1c:	2500      	movs	r5, #0
 23f8f1e:	e7f9      	b.n	23f8f14 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
 23f8f20:	023ff24c 	.word	0x023ff24c

023f8f24 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 23f8f24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f8f28:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 23f8f2c:	4604      	mov	r4, r0
 23f8f2e:	468b      	mov	fp, r1
 23f8f30:	4616      	mov	r6, r2
 23f8f32:	461f      	mov	r7, r3
 23f8f34:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 23f8f38:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    if (isConnected()) {
 23f8f3c:	f7ff ff02 	bl	23f8d44 <_ZN4MQTT11isConnectedEv>
 23f8f40:	4682      	mov	sl, r0
 23f8f42:	2800      	cmp	r0, #0
 23f8f44:	d051      	beq.n	23f8fea <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
 23f8f46:	4621      	mov	r1, r4
 23f8f48:	a801      	add	r0, sp, #4
 23f8f4a:	f7ff fddd 	bl	23f8b08 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
 23f8f4e:	2100      	movs	r1, #0
 23f8f50:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 23f8f54:	69e0      	ldr	r0, [r4, #28]
 23f8f56:	f004 f95e 	bl	23fd216 <memset>
        length = writeString(topic, buffer, length);
 23f8f5a:	2305      	movs	r3, #5
 23f8f5c:	4659      	mov	r1, fp
 23f8f5e:	4620      	mov	r0, r4
 23f8f60:	69e2      	ldr	r2, [r4, #28]
 23f8f62:	f7ff fed4 	bl	23f8d0e <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
 23f8f66:	1e6b      	subs	r3, r5, #1
 23f8f68:	2b01      	cmp	r3, #1
 23f8f6a:	d815      	bhi.n	23f8f98 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
 23f8f6c:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 23f8f6e:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
 23f8f70:	3101      	adds	r1, #1
 23f8f72:	b289      	uxth	r1, r1
 23f8f74:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 23f8f76:	0a09      	lsrs	r1, r1, #8
 23f8f78:	5419      	strb	r1, [r3, r0]
 23f8f7a:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 23f8f7c:	69e3      	ldr	r3, [r4, #28]
 23f8f7e:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 23f8f80:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
 23f8f82:	3002      	adds	r0, #2
 23f8f84:	b280      	uxth	r0, r0
 23f8f86:	5499      	strb	r1, [r3, r2]
            if (messageid != NULL)
 23f8f88:	f1b8 0f00 	cmp.w	r8, #0
 23f8f8c:	d004      	beq.n	23f8f98 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
 23f8f8e:	8c23      	ldrh	r3, [r4, #32]
 23f8f90:	1c5a      	adds	r2, r3, #1
 23f8f92:	8422      	strh	r2, [r4, #32]
 23f8f94:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 23f8f98:	2100      	movs	r1, #0
 23f8f9a:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 23f8f9c:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
 23f8f9e:	69e2      	ldr	r2, [r4, #28]
 23f8fa0:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 23f8fa2:	d90a      	bls.n	23f8fba <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
 23f8fa4:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
 23f8fa8:	459c      	cmp	ip, r3
 23f8faa:	d906      	bls.n	23f8fba <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
 23f8fac:	f816 c001 	ldrb.w	ip, [r6, r1]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 23f8fb0:	3101      	adds	r1, #1
            buffer[length++] = payload[i];
 23f8fb2:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 23f8fb6:	b289      	uxth	r1, r1
 23f8fb8:	e7ef      	b.n	23f8f9a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
 23f8fba:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 23f8fbe:	2900      	cmp	r1, #0
 23f8fc0:	bf0c      	ite	eq
 23f8fc2:	2130      	moveq	r1, #48	; 0x30
 23f8fc4:	2131      	movne	r1, #49	; 0x31
        if (dup) {
 23f8fc6:	f1b9 0f00 	cmp.w	r9, #0
 23f8fca:	d001      	beq.n	23f8fd0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
 23f8fcc:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
 23f8fd0:	2d02      	cmp	r5, #2
 23f8fd2:	d10e      	bne.n	23f8ff2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
 23f8fd4:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
 23f8fd8:	3b05      	subs	r3, #5
 23f8fda:	4620      	mov	r0, r4
 23f8fdc:	b29b      	uxth	r3, r3
 23f8fde:	f7ff fe5b 	bl	23f8c98 <_ZN4MQTT5writeEhPht>
 23f8fe2:	4682      	mov	sl, r0
        MutexLocker lock(this);
 23f8fe4:	a801      	add	r0, sp, #4
 23f8fe6:	f7ff fd9a 	bl	23f8b1e <_ZN4MQTT11MutexLockerD1Ev>
}
 23f8fea:	4650      	mov	r0, sl
 23f8fec:	b003      	add	sp, #12
 23f8fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
 23f8ff2:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 23f8ff4:	bf08      	it	eq
 23f8ff6:	f041 0102 	orreq.w	r1, r1, #2
 23f8ffa:	e7ed      	b.n	23f8fd8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

023f8ffc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 23f8ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 23f8ffe:	9c08      	ldr	r4, [sp, #32]
 23f9000:	9403      	str	r4, [sp, #12]
 23f9002:	2400      	movs	r4, #0
 23f9004:	9402      	str	r4, [sp, #8]
 23f9006:	f89d 401c 	ldrb.w	r4, [sp, #28]
 23f900a:	9401      	str	r4, [sp, #4]
 23f900c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 23f9010:	9400      	str	r4, [sp, #0]
 23f9012:	f7ff ff87 	bl	23f8f24 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 23f9016:	b004      	add	sp, #16
 23f9018:	bd10      	pop	{r4, pc}

023f901a <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
 23f901a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f901c:	4604      	mov	r4, r0
 23f901e:	460e      	mov	r6, r1
    if (isConnected()) {
 23f9020:	f7ff fe90 	bl	23f8d44 <_ZN4MQTT11isConnectedEv>
 23f9024:	4605      	mov	r5, r0
 23f9026:	b1c8      	cbz	r0, 23f905c <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
 23f9028:	4621      	mov	r1, r4
 23f902a:	a801      	add	r0, sp, #4
 23f902c:	f7ff fd6c 	bl	23f8b08 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 23f9030:	2262      	movs	r2, #98	; 0x62
 23f9032:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 23f9034:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 23f9036:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 23f9038:	2202      	movs	r2, #2
 23f903a:	69e3      	ldr	r3, [r4, #28]
 23f903c:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 23f903e:	69e3      	ldr	r3, [r4, #28]
 23f9040:	0a32      	lsrs	r2, r6, #8
 23f9042:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 23f9044:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 23f9046:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 23f9048:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
 23f904a:	69e1      	ldr	r1, [r4, #28]
 23f904c:	f002 ff03 	bl	23fbe56 <_ZN9TCPClient5writeEPKhj>
 23f9050:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
 23f9052:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
 23f9054:	bf18      	it	ne
 23f9056:	2501      	movne	r5, #1
        MutexLocker lock(this);
 23f9058:	f7ff fd61 	bl	23f8b1e <_ZN4MQTT11MutexLockerD1Ev>
}
 23f905c:	4628      	mov	r0, r5
 23f905e:	b002      	add	sp, #8
 23f9060:	bd70      	pop	{r4, r5, r6, pc}

023f9062 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
 23f9062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f9064:	4604      	mov	r4, r0
 23f9066:	460e      	mov	r6, r1
    if (isConnected()) {
 23f9068:	f7ff fe6c 	bl	23f8d44 <_ZN4MQTT11isConnectedEv>
 23f906c:	4605      	mov	r5, r0
 23f906e:	b1c8      	cbz	r0, 23f90a4 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
 23f9070:	4621      	mov	r1, r4
 23f9072:	a801      	add	r0, sp, #4
 23f9074:	f7ff fd48 	bl	23f8b08 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 23f9078:	2272      	movs	r2, #114	; 0x72
 23f907a:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 23f907c:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 23f907e:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 23f9080:	2202      	movs	r2, #2
 23f9082:	69e3      	ldr	r3, [r4, #28]
 23f9084:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 23f9086:	69e3      	ldr	r3, [r4, #28]
 23f9088:	0a32      	lsrs	r2, r6, #8
 23f908a:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 23f908c:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 23f908e:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 23f9090:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
 23f9092:	69e1      	ldr	r1, [r4, #28]
 23f9094:	f002 fedf 	bl	23fbe56 <_ZN9TCPClient5writeEPKhj>
 23f9098:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
 23f909a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
 23f909c:	bf18      	it	ne
 23f909e:	2501      	movne	r5, #1
        MutexLocker lock(this);
 23f90a0:	f7ff fd3d 	bl	23f8b1e <_ZN4MQTT11MutexLockerD1Ev>
}
 23f90a4:	4628      	mov	r0, r5
 23f90a6:	b002      	add	sp, #8
 23f90a8:	bd70      	pop	{r4, r5, r6, pc}

023f90aa <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
 23f90aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f90ae:	ed2d 8b02 	vpush	{d8}
 23f90b2:	b087      	sub	sp, #28
 23f90b4:	af00      	add	r7, sp, #0
 23f90b6:	4604      	mov	r4, r0
    if (isConnected()) {
 23f90b8:	f7ff fe44 	bl	23f8d44 <_ZN4MQTT11isConnectedEv>
 23f90bc:	4681      	mov	r9, r0
 23f90be:	b1f8      	cbz	r0, 23f9100 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
 23f90c0:	4621      	mov	r1, r4
 23f90c2:	f107 0014 	add.w	r0, r7, #20
 23f90c6:	f7ff fd1f 	bl	23f8b08 <_ZN4MQTT11MutexLockerC1EPS_>
 23f90ca:	f000 f9c5 	bl	23f9458 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 23f90ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23f90d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 23f90d4:	4606      	mov	r6, r0
 23f90d6:	4353      	muls	r3, r2
 23f90d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 23f90da:	1a82      	subs	r2, r0, r2
 23f90dc:	429a      	cmp	r2, r3
 23f90de:	d803      	bhi.n	23f90e8 <_ZN4MQTT4loopEv+0x3e>
 23f90e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 23f90e2:	1a82      	subs	r2, r0, r2
 23f90e4:	4293      	cmp	r3, r2
 23f90e6:	d221      	bcs.n	23f912c <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
 23f90e8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 23f90ec:	b17b      	cbz	r3, 23f910e <_ZN4MQTT4loopEv+0x64>
                _client.stop();
 23f90ee:	4620      	mov	r0, r4
 23f90f0:	f003 f936 	bl	23fc360 <_ZN9TCPClient4stopEv>
                return false;
 23f90f4:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
 23f90f8:	f107 0014 	add.w	r0, r7, #20
 23f90fc:	f7ff fd0f 	bl	23f8b1e <_ZN4MQTT11MutexLockerD1Ev>
}
 23f9100:	4648      	mov	r0, r9
 23f9102:	371c      	adds	r7, #28
 23f9104:	46bd      	mov	sp, r7
 23f9106:	ecbd 8b02 	vpop	{d8}
 23f910a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
 23f910e:	21c0      	movs	r1, #192	; 0xc0
 23f9110:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 23f9112:	4620      	mov	r0, r4
                buffer[0] = MQTTPINGREQ;
 23f9114:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 23f9116:	69e2      	ldr	r2, [r4, #28]
 23f9118:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 23f911a:	69e1      	ldr	r1, [r4, #28]
 23f911c:	2202      	movs	r2, #2
 23f911e:	f002 fe9a 	bl	23fbe56 <_ZN9TCPClient5writeEPKhj>
                pingOutstanding = true;
 23f9122:	2301      	movs	r3, #1
                lastInActivity = t;
 23f9124:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
 23f9128:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
 23f912c:	4620      	mov	r0, r4
 23f912e:	f003 f8bd 	bl	23fc2ac <_ZN9TCPClient9availableEv>
 23f9132:	2800      	cmp	r0, #0
 23f9134:	d0e0      	beq.n	23f90f8 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
 23f9136:	4620      	mov	r0, r4
 23f9138:	f107 0113 	add.w	r1, r7, #19
 23f913c:	f7ff fd5a 	bl	23f8bf4 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
 23f9140:	4683      	mov	fp, r0
 23f9142:	2800      	cmp	r0, #0
 23f9144:	d0d8      	beq.n	23f90f8 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
 23f9146:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
 23f9148:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 23f914a:	7819      	ldrb	r1, [r3, #0]
 23f914c:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 23f9150:	2a30      	cmp	r2, #48	; 0x30
 23f9152:	d17f      	bne.n	23f9254 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
 23f9154:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 23f9158:	f1ba 0f00 	cmp.w	sl, #0
 23f915c:	d0cc      	beq.n	23f90f8 <_ZN4MQTT4loopEv+0x4e>
                        }
 23f915e:	466a      	mov	r2, sp
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 23f9160:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
 23f9164:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 23f9168:	eb03 020c 	add.w	r2, r3, ip
 23f916c:	7851      	ldrb	r1, [r2, #1]
 23f916e:	7895      	ldrb	r5, [r2, #2]
 23f9170:	eb05 2501 	add.w	r5, r5, r1, lsl #8
                        char topic[tl+1];
 23f9174:	4669      	mov	r1, sp
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 23f9176:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
 23f9178:	f105 0208 	add.w	r2, r5, #8
 23f917c:	08d2      	lsrs	r2, r2, #3
 23f917e:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
 23f9182:	4695      	mov	sp, r2
 23f9184:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
 23f9186:	f10c 0203 	add.w	r2, ip, #3
 23f918a:	60fa      	str	r2, [r7, #12]
 23f918c:	eb03 0e02 	add.w	lr, r3, r2
 23f9190:	eb0d 0205 	add.w	r2, sp, r5
 23f9194:	f8c7 d008 	str.w	sp, [r7, #8]
 23f9198:	607a      	str	r2, [r7, #4]
 23f919a:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
 23f919e:	428a      	cmp	r2, r1
 23f91a0:	d006      	beq.n	23f91b0 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
 23f91a2:	460a      	mov	r2, r1
 23f91a4:	f81e 8b01 	ldrb.w	r8, [lr], #1
 23f91a8:	f802 8b01 	strb.w	r8, [r2], #1
 23f91ac:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
 23f91ae:	e7f4      	b.n	23f919a <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
 23f91b0:	2200      	movs	r2, #0
 23f91b2:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 23f91b4:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 23f91b8:	68f9      	ldr	r1, [r7, #12]
 23f91ba:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
 23f91be:	ebab 020c 	sub.w	r2, fp, ip
 23f91c2:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 23f91c4:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
 23f91c8:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 23f91cc:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 23f91ce:	d125      	bne.n	23f921c <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 23f91d0:	f813 e001 	ldrb.w	lr, [r3, r1]
 23f91d4:	4419      	add	r1, r3
 23f91d6:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
 23f91da:	f10c 0105 	add.w	r1, ip, #5
 23f91de:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
 23f91e0:	3a02      	subs	r2, #2
 23f91e2:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 23f91e4:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
 23f91e8:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 23f91ea:	2240      	movs	r2, #64	; 0x40
 23f91ec:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 23f91ee:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 23f91f2:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 23f91f4:	69e3      	ldr	r3, [r4, #28]
 23f91f6:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
 23f91fa:	69e3      	ldr	r3, [r4, #28]
 23f91fc:	ea4f 221b 	mov.w	r2, fp, lsr #8
 23f9200:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 23f9202:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 23f9204:	2204      	movs	r2, #4
                            buffer[3] = (msgId & 0xFF);
 23f9206:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
 23f920a:	4620      	mov	r0, r4
 23f920c:	69e1      	ldr	r1, [r4, #28]
 23f920e:	f002 fe22 	bl	23fbe56 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
 23f9212:	6266      	str	r6, [r4, #36]	; 0x24
 23f9214:	ee18 3a10 	vmov	r3, s16
 23f9218:	469d      	mov	sp, r3
 23f921a:	e76d      	b.n	23f90f8 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 23f921c:	f1b8 0f04 	cmp.w	r8, #4
 23f9220:	d115      	bne.n	23f924e <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 23f9222:	f813 e001 	ldrb.w	lr, [r3, r1]
 23f9226:	4419      	add	r1, r3
 23f9228:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
 23f922c:	f10c 0105 	add.w	r1, ip, #5
 23f9230:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
 23f9232:	3a02      	subs	r2, #2
 23f9234:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 23f9236:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
 23f923a:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
 23f923c:	2250      	movs	r2, #80	; 0x50
 23f923e:	69e3      	ldr	r3, [r4, #28]
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 23f9240:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
 23f9244:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
 23f9246:	2202      	movs	r2, #2
 23f9248:	69e3      	ldr	r3, [r4, #28]
 23f924a:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
 23f924c:	e7d5      	b.n	23f91fa <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
 23f924e:	4419      	add	r1, r3
 23f9250:	47d0      	blx	sl
 23f9252:	e7df      	b.n	23f9214 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
 23f9254:	2a50      	cmp	r2, #80	; 0x50
 23f9256:	d108      	bne.n	23f926a <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
 23f9258:	789a      	ldrb	r2, [r3, #2]
 23f925a:	78d9      	ldrb	r1, [r3, #3]
                    this->publishRelease(msgId);
 23f925c:	4620      	mov	r0, r4
                    msgId = (buffer[2] << 8) + buffer[3];
 23f925e:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
 23f9262:	b289      	uxth	r1, r1
 23f9264:	f7ff fed9 	bl	23f901a <_ZN4MQTT14publishReleaseEt>
 23f9268:	e746      	b.n	23f90f8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
 23f926a:	2a40      	cmp	r2, #64	; 0x40
 23f926c:	d112      	bne.n	23f9294 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
 23f926e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 23f9270:	2a00      	cmp	r2, #0
 23f9272:	f43f af41 	beq.w	23f90f8 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 23f9276:	f1bb 0f04 	cmp.w	fp, #4
 23f927a:	f47f af3d 	bne.w	23f90f8 <_ZN4MQTT4loopEv+0x4e>
 23f927e:	f011 0f06 	tst.w	r1, #6
 23f9282:	f47f af39 	bne.w	23f90f8 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
 23f9286:	7899      	ldrb	r1, [r3, #2]
 23f9288:	78d8      	ldrb	r0, [r3, #3]
 23f928a:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
 23f928e:	b280      	uxth	r0, r0
 23f9290:	4790      	blx	r2
 23f9292:	e731      	b.n	23f90f8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
 23f9294:	2a60      	cmp	r2, #96	; 0x60
 23f9296:	d108      	bne.n	23f92aa <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
 23f9298:	789a      	ldrb	r2, [r3, #2]
 23f929a:	78d9      	ldrb	r1, [r3, #3]
                this->publishComplete(msgId);
 23f929c:	4620      	mov	r0, r4
                msgId = (buffer[2] << 8) + buffer[3];
 23f929e:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
 23f92a2:	b289      	uxth	r1, r1
 23f92a4:	f7ff fedd 	bl	23f9062 <_ZN4MQTT15publishCompleteEt>
 23f92a8:	e726      	b.n	23f90f8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
 23f92aa:	2a70      	cmp	r2, #112	; 0x70
 23f92ac:	d0df      	beq.n	23f926e <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
 23f92ae:	2a90      	cmp	r2, #144	; 0x90
 23f92b0:	f43f af22 	beq.w	23f90f8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
 23f92b4:	2ac0      	cmp	r2, #192	; 0xc0
 23f92b6:	d10a      	bne.n	23f92ce <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
 23f92b8:	22d0      	movs	r2, #208	; 0xd0
 23f92ba:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 23f92bc:	2200      	movs	r2, #0
 23f92be:	69e3      	ldr	r3, [r4, #28]
                    _client.write(buffer,2);
 23f92c0:	4620      	mov	r0, r4
                    buffer[1] = 0;
 23f92c2:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 23f92c4:	69e1      	ldr	r1, [r4, #28]
 23f92c6:	2202      	movs	r2, #2
 23f92c8:	f002 fdc5 	bl	23fbe56 <_ZN9TCPClient5writeEPKhj>
 23f92cc:	e714      	b.n	23f90f8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
 23f92ce:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
 23f92d0:	bf04      	itt	eq
 23f92d2:	2300      	moveq	r3, #0
 23f92d4:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
 23f92d8:	e70e      	b.n	23f90f8 <_ZN4MQTT4loopEv+0x4e>

023f92da <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 23f92da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f92dc:	4604      	mov	r4, r0
 23f92de:	460f      	mov	r7, r1
 23f92e0:	4616      	mov	r6, r2
    if (isConnected()) {
 23f92e2:	f7ff fd2f 	bl	23f8d44 <_ZN4MQTT11isConnectedEv>
 23f92e6:	4605      	mov	r5, r0
 23f92e8:	b310      	cbz	r0, 23f9330 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
 23f92ea:	4621      	mov	r1, r4
 23f92ec:	a801      	add	r0, sp, #4
 23f92ee:	f7ff fc0b 	bl	23f8b08 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
 23f92f2:	8c23      	ldrh	r3, [r4, #32]
 23f92f4:	3301      	adds	r3, #1
 23f92f6:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 23f92f8:	b1eb      	cbz	r3, 23f9336 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
 23f92fa:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
 23f92fc:	8c23      	ldrh	r3, [r4, #32]
 23f92fe:	69e2      	ldr	r2, [r4, #28]
 23f9300:	0a1b      	lsrs	r3, r3, #8
 23f9302:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 23f9304:	69e3      	ldr	r3, [r4, #28]
 23f9306:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 23f9308:	4639      	mov	r1, r7
        buffer[length++] = (nextMsgId & 0xFF);
 23f930a:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 23f930c:	69e2      	ldr	r2, [r4, #28]
 23f930e:	2307      	movs	r3, #7
 23f9310:	4620      	mov	r0, r4
 23f9312:	f7ff fcfc 	bl	23f8d0e <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 23f9316:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 23f9318:	2182      	movs	r1, #130	; 0x82
        buffer[length++] = qos;
 23f931a:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 23f931c:	3804      	subs	r0, #4
 23f931e:	b283      	uxth	r3, r0
 23f9320:	69e2      	ldr	r2, [r4, #28]
 23f9322:	4620      	mov	r0, r4
 23f9324:	f7ff fcb8 	bl	23f8c98 <_ZN4MQTT5writeEhPht>
 23f9328:	4605      	mov	r5, r0
        MutexLocker lock(this);
 23f932a:	a801      	add	r0, sp, #4
 23f932c:	f7ff fbf7 	bl	23f8b1e <_ZN4MQTT11MutexLockerD1Ev>
}
 23f9330:	4628      	mov	r0, r5
 23f9332:	b003      	add	sp, #12
 23f9334:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
 23f9336:	2301      	movs	r3, #1
 23f9338:	e7df      	b.n	23f92fa <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

023f933a <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
 23f933a:	2200      	movs	r2, #0
 23f933c:	f7ff bfcd 	b.w	23f92da <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

023f9340 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 23f9340:	b509      	push	{r0, r3, lr}
 23f9342:	4804      	ldr	r0, [pc, #16]	; (23f9354 <os_mutex_create+0x14>)
 23f9344:	6800      	ldr	r0, [r0, #0]
 23f9346:	4b04      	ldr	r3, [pc, #16]	; (23f9358 <os_mutex_create+0x18>)
 23f9348:	4403      	add	r3, r0
 23f934a:	681b      	ldr	r3, [r3, #0]
 23f934c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f934e:	9302      	str	r3, [sp, #8]
 23f9350:	bd09      	pop	{r0, r3, pc}
 23f9352:	0000      	.short	0x0000
 23f9354:	1007aac8 	.word	0x1007aac8
 23f9358:	00000030 	.word	0x00000030

023f935c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 23f935c:	b509      	push	{r0, r3, lr}
 23f935e:	4804      	ldr	r0, [pc, #16]	; (23f9370 <os_mutex_lock+0x14>)
 23f9360:	6800      	ldr	r0, [r0, #0]
 23f9362:	4b04      	ldr	r3, [pc, #16]	; (23f9374 <os_mutex_lock+0x18>)
 23f9364:	4403      	add	r3, r0
 23f9366:	681b      	ldr	r3, [r3, #0]
 23f9368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23f936a:	9302      	str	r3, [sp, #8]
 23f936c:	bd09      	pop	{r0, r3, pc}
 23f936e:	0000      	.short	0x0000
 23f9370:	1007aac8 	.word	0x1007aac8
 23f9374:	00000030 	.word	0x00000030

023f9378 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 23f9378:	b509      	push	{r0, r3, lr}
 23f937a:	4804      	ldr	r0, [pc, #16]	; (23f938c <os_mutex_unlock+0x14>)
 23f937c:	6800      	ldr	r0, [r0, #0]
 23f937e:	4b04      	ldr	r3, [pc, #16]	; (23f9390 <os_mutex_unlock+0x18>)
 23f9380:	4403      	add	r3, r0
 23f9382:	681b      	ldr	r3, [r3, #0]
 23f9384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f9386:	9302      	str	r3, [sp, #8]
 23f9388:	bd09      	pop	{r0, r3, pc}
 23f938a:	0000      	.short	0x0000
 23f938c:	1007aac8 	.word	0x1007aac8
 23f9390:	00000030 	.word	0x00000030

023f9394 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23f9394:	b509      	push	{r0, r3, lr}
 23f9396:	4804      	ldr	r0, [pc, #16]	; (23f93a8 <os_mutex_recursive_create+0x14>)
 23f9398:	6800      	ldr	r0, [r0, #0]
 23f939a:	4b04      	ldr	r3, [pc, #16]	; (23f93ac <os_mutex_recursive_create+0x18>)
 23f939c:	4403      	add	r3, r0
 23f939e:	681b      	ldr	r3, [r3, #0]
 23f93a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f93a2:	9302      	str	r3, [sp, #8]
 23f93a4:	bd09      	pop	{r0, r3, pc}
 23f93a6:	0000      	.short	0x0000
 23f93a8:	1007aac8 	.word	0x1007aac8
 23f93ac:	00000030 	.word	0x00000030

023f93b0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23f93b0:	b509      	push	{r0, r3, lr}
 23f93b2:	4804      	ldr	r0, [pc, #16]	; (23f93c4 <os_mutex_recursive_destroy+0x14>)
 23f93b4:	6800      	ldr	r0, [r0, #0]
 23f93b6:	4b04      	ldr	r3, [pc, #16]	; (23f93c8 <os_mutex_recursive_destroy+0x18>)
 23f93b8:	4403      	add	r3, r0
 23f93ba:	681b      	ldr	r3, [r3, #0]
 23f93bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f93be:	9302      	str	r3, [sp, #8]
 23f93c0:	bd09      	pop	{r0, r3, pc}
 23f93c2:	0000      	.short	0x0000
 23f93c4:	1007aac8 	.word	0x1007aac8
 23f93c8:	00000030 	.word	0x00000030

023f93cc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23f93cc:	b509      	push	{r0, r3, lr}
 23f93ce:	4804      	ldr	r0, [pc, #16]	; (23f93e0 <os_mutex_recursive_lock+0x14>)
 23f93d0:	6800      	ldr	r0, [r0, #0]
 23f93d2:	4b04      	ldr	r3, [pc, #16]	; (23f93e4 <os_mutex_recursive_lock+0x18>)
 23f93d4:	4403      	add	r3, r0
 23f93d6:	681b      	ldr	r3, [r3, #0]
 23f93d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f93da:	9302      	str	r3, [sp, #8]
 23f93dc:	bd09      	pop	{r0, r3, pc}
 23f93de:	0000      	.short	0x0000
 23f93e0:	1007aac8 	.word	0x1007aac8
 23f93e4:	00000030 	.word	0x00000030

023f93e8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23f93e8:	b509      	push	{r0, r3, lr}
 23f93ea:	4804      	ldr	r0, [pc, #16]	; (23f93fc <os_mutex_recursive_unlock+0x14>)
 23f93ec:	6800      	ldr	r0, [r0, #0]
 23f93ee:	4b04      	ldr	r3, [pc, #16]	; (23f9400 <os_mutex_recursive_unlock+0x18>)
 23f93f0:	4403      	add	r3, r0
 23f93f2:	681b      	ldr	r3, [r3, #0]
 23f93f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f93f6:	9302      	str	r3, [sp, #8]
 23f93f8:	bd09      	pop	{r0, r3, pc}
 23f93fa:	0000      	.short	0x0000
 23f93fc:	1007aac8 	.word	0x1007aac8
 23f9400:	00000030 	.word	0x00000030

023f9404 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, hal_watchdog_reset_flagged_deprecated, bool(void))
DYNALIB_FN(17, hal_core, hal_watchdog_refresh_deprecated, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
 23f9404:	b509      	push	{r0, r3, lr}
 23f9406:	4804      	ldr	r0, [pc, #16]	; (23f9418 <HAL_Core_Runtime_Info+0x14>)
 23f9408:	6800      	ldr	r0, [r0, #0]
 23f940a:	4b04      	ldr	r3, [pc, #16]	; (23f941c <HAL_Core_Runtime_Info+0x18>)
 23f940c:	4403      	add	r3, r0
 23f940e:	681b      	ldr	r3, [r3, #0]
 23f9410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f9412:	9302      	str	r3, [sp, #8]
 23f9414:	bd09      	pop	{r0, r3, pc}
 23f9416:	0000      	.short	0x0000
 23f9418:	1007aac8 	.word	0x1007aac8
 23f941c:	0000001c 	.word	0x0000001c

023f9420 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23f9420:	b509      	push	{r0, r3, lr}
 23f9422:	4804      	ldr	r0, [pc, #16]	; (23f9434 <HAL_RNG_GetRandomNumber+0x14>)
 23f9424:	6800      	ldr	r0, [r0, #0]
 23f9426:	4b04      	ldr	r3, [pc, #16]	; (23f9438 <HAL_RNG_GetRandomNumber+0x18>)
 23f9428:	4403      	add	r3, r0
 23f942a:	681b      	ldr	r3, [r3, #0]
 23f942c:	685b      	ldr	r3, [r3, #4]
 23f942e:	9302      	str	r3, [sp, #8]
 23f9430:	bd09      	pop	{r0, r3, pc}
 23f9432:	0000      	.short	0x0000
 23f9434:	1007aac8 	.word	0x1007aac8
 23f9438:	00000000 	.word	0x00000000

023f943c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23f943c:	b509      	push	{r0, r3, lr}
 23f943e:	4804      	ldr	r0, [pc, #16]	; (23f9450 <HAL_Delay_Microseconds+0x14>)
 23f9440:	6800      	ldr	r0, [r0, #0]
 23f9442:	4b04      	ldr	r3, [pc, #16]	; (23f9454 <HAL_Delay_Microseconds+0x18>)
 23f9444:	4403      	add	r3, r0
 23f9446:	681b      	ldr	r3, [r3, #0]
 23f9448:	68db      	ldr	r3, [r3, #12]
 23f944a:	9302      	str	r3, [sp, #8]
 23f944c:	bd09      	pop	{r0, r3, pc}
 23f944e:	0000      	.short	0x0000
 23f9450:	1007aac8 	.word	0x1007aac8
 23f9454:	00000000 	.word	0x00000000

023f9458 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23f9458:	b509      	push	{r0, r3, lr}
 23f945a:	4804      	ldr	r0, [pc, #16]	; (23f946c <HAL_Timer_Get_Milli_Seconds+0x14>)
 23f945c:	6800      	ldr	r0, [r0, #0]
 23f945e:	4b04      	ldr	r3, [pc, #16]	; (23f9470 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23f9460:	4403      	add	r3, r0
 23f9462:	681b      	ldr	r3, [r3, #0]
 23f9464:	695b      	ldr	r3, [r3, #20]
 23f9466:	9302      	str	r3, [sp, #8]
 23f9468:	bd09      	pop	{r0, r3, pc}
 23f946a:	0000      	.short	0x0000
 23f946c:	1007aac8 	.word	0x1007aac8
 23f9470:	00000000 	.word	0x00000000

023f9474 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 23f9474:	b509      	push	{r0, r3, lr}
 23f9476:	4804      	ldr	r0, [pc, #16]	; (23f9488 <HAL_EEPROM_Init+0x14>)
 23f9478:	6800      	ldr	r0, [r0, #0]
 23f947a:	4b04      	ldr	r3, [pc, #16]	; (23f948c <HAL_EEPROM_Init+0x18>)
 23f947c:	4403      	add	r3, r0
 23f947e:	681b      	ldr	r3, [r3, #0]
 23f9480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f9482:	9302      	str	r3, [sp, #8]
 23f9484:	bd09      	pop	{r0, r3, pc}
 23f9486:	0000      	.short	0x0000
 23f9488:	1007aac8 	.word	0x1007aac8
 23f948c:	00000000 	.word	0x00000000

023f9490 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 23f9490:	b509      	push	{r0, r3, lr}
 23f9492:	4804      	ldr	r0, [pc, #16]	; (23f94a4 <HAL_EEPROM_Get+0x14>)
 23f9494:	6800      	ldr	r0, [r0, #0]
 23f9496:	4b04      	ldr	r3, [pc, #16]	; (23f94a8 <HAL_EEPROM_Get+0x18>)
 23f9498:	4403      	add	r3, r0
 23f949a:	681b      	ldr	r3, [r3, #0]
 23f949c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f949e:	9302      	str	r3, [sp, #8]
 23f94a0:	bd09      	pop	{r0, r3, pc}
 23f94a2:	0000      	.short	0x0000
 23f94a4:	1007aac8 	.word	0x1007aac8
 23f94a8:	00000000 	.word	0x00000000

023f94ac <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 23f94ac:	b509      	push	{r0, r3, lr}
 23f94ae:	4804      	ldr	r0, [pc, #16]	; (23f94c0 <HAL_EEPROM_Put+0x14>)
 23f94b0:	6800      	ldr	r0, [r0, #0]
 23f94b2:	4b04      	ldr	r3, [pc, #16]	; (23f94c4 <HAL_EEPROM_Put+0x18>)
 23f94b4:	4403      	add	r3, r0
 23f94b6:	681b      	ldr	r3, [r3, #0]
 23f94b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f94ba:	9302      	str	r3, [sp, #8]
 23f94bc:	bd09      	pop	{r0, r3, pc}
 23f94be:	0000      	.short	0x0000
 23f94c0:	1007aac8 	.word	0x1007aac8
 23f94c4:	00000000 	.word	0x00000000

023f94c8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 23f94c8:	b509      	push	{r0, r3, lr}
 23f94ca:	4804      	ldr	r0, [pc, #16]	; (23f94dc <hal_rtc_time_is_valid+0x14>)
 23f94cc:	6800      	ldr	r0, [r0, #0]
 23f94ce:	4b04      	ldr	r3, [pc, #16]	; (23f94e0 <hal_rtc_time_is_valid+0x18>)
 23f94d0:	4403      	add	r3, r0
 23f94d2:	681b      	ldr	r3, [r3, #0]
 23f94d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f94d6:	9302      	str	r3, [sp, #8]
 23f94d8:	bd09      	pop	{r0, r3, pc}
 23f94da:	0000      	.short	0x0000
 23f94dc:	1007aac8 	.word	0x1007aac8
 23f94e0:	00000000 	.word	0x00000000

023f94e4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 23f94e4:	b509      	push	{r0, r3, lr}
 23f94e6:	4804      	ldr	r0, [pc, #16]	; (23f94f8 <hal_rtc_get_time+0x14>)
 23f94e8:	6800      	ldr	r0, [r0, #0]
 23f94ea:	4b04      	ldr	r3, [pc, #16]	; (23f94fc <hal_rtc_get_time+0x18>)
 23f94ec:	4403      	add	r3, r0
 23f94ee:	681b      	ldr	r3, [r3, #0]
 23f94f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 23f94f2:	9302      	str	r3, [sp, #8]
 23f94f4:	bd09      	pop	{r0, r3, pc}
 23f94f6:	0000      	.short	0x0000
 23f94f8:	1007aac8 	.word	0x1007aac8
 23f94fc:	00000000 	.word	0x00000000

023f9500 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23f9500:	b509      	push	{r0, r3, lr}
 23f9502:	4804      	ldr	r0, [pc, #16]	; (23f9514 <hal_gpio_mode+0x14>)
 23f9504:	6800      	ldr	r0, [r0, #0]
 23f9506:	4b04      	ldr	r3, [pc, #16]	; (23f9518 <hal_gpio_mode+0x18>)
 23f9508:	4403      	add	r3, r0
 23f950a:	681b      	ldr	r3, [r3, #0]
 23f950c:	689b      	ldr	r3, [r3, #8]
 23f950e:	9302      	str	r3, [sp, #8]
 23f9510:	bd09      	pop	{r0, r3, pc}
 23f9512:	0000      	.short	0x0000
 23f9514:	1007aac8 	.word	0x1007aac8
 23f9518:	00000014 	.word	0x00000014

023f951c <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23f951c:	b509      	push	{r0, r3, lr}
 23f951e:	4804      	ldr	r0, [pc, #16]	; (23f9530 <hal_gpio_get_mode+0x14>)
 23f9520:	6800      	ldr	r0, [r0, #0]
 23f9522:	4b04      	ldr	r3, [pc, #16]	; (23f9534 <hal_gpio_get_mode+0x18>)
 23f9524:	4403      	add	r3, r0
 23f9526:	681b      	ldr	r3, [r3, #0]
 23f9528:	68db      	ldr	r3, [r3, #12]
 23f952a:	9302      	str	r3, [sp, #8]
 23f952c:	bd09      	pop	{r0, r3, pc}
 23f952e:	0000      	.short	0x0000
 23f9530:	1007aac8 	.word	0x1007aac8
 23f9534:	00000014 	.word	0x00000014

023f9538 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23f9538:	b509      	push	{r0, r3, lr}
 23f953a:	4804      	ldr	r0, [pc, #16]	; (23f954c <hal_gpio_write+0x14>)
 23f953c:	6800      	ldr	r0, [r0, #0]
 23f953e:	4b04      	ldr	r3, [pc, #16]	; (23f9550 <hal_gpio_write+0x18>)
 23f9540:	4403      	add	r3, r0
 23f9542:	681b      	ldr	r3, [r3, #0]
 23f9544:	691b      	ldr	r3, [r3, #16]
 23f9546:	9302      	str	r3, [sp, #8]
 23f9548:	bd09      	pop	{r0, r3, pc}
 23f954a:	0000      	.short	0x0000
 23f954c:	1007aac8 	.word	0x1007aac8
 23f9550:	00000014 	.word	0x00000014

023f9554 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23f9554:	b509      	push	{r0, r3, lr}
 23f9556:	4804      	ldr	r0, [pc, #16]	; (23f9568 <hal_i2c_write+0x14>)
 23f9558:	6800      	ldr	r0, [r0, #0]
 23f955a:	4b04      	ldr	r3, [pc, #16]	; (23f956c <hal_i2c_write+0x18>)
 23f955c:	4403      	add	r3, r0
 23f955e:	681b      	ldr	r3, [r3, #0]
 23f9560:	6a1b      	ldr	r3, [r3, #32]
 23f9562:	9302      	str	r3, [sp, #8]
 23f9564:	bd09      	pop	{r0, r3, pc}
 23f9566:	0000      	.short	0x0000
 23f9568:	1007aac8 	.word	0x1007aac8
 23f956c:	00000010 	.word	0x00000010

023f9570 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23f9570:	b509      	push	{r0, r3, lr}
 23f9572:	4804      	ldr	r0, [pc, #16]	; (23f9584 <hal_i2c_available+0x14>)
 23f9574:	6800      	ldr	r0, [r0, #0]
 23f9576:	4b04      	ldr	r3, [pc, #16]	; (23f9588 <hal_i2c_available+0x18>)
 23f9578:	4403      	add	r3, r0
 23f957a:	681b      	ldr	r3, [r3, #0]
 23f957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f957e:	9302      	str	r3, [sp, #8]
 23f9580:	bd09      	pop	{r0, r3, pc}
 23f9582:	0000      	.short	0x0000
 23f9584:	1007aac8 	.word	0x1007aac8
 23f9588:	00000010 	.word	0x00000010

023f958c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23f958c:	b509      	push	{r0, r3, lr}
 23f958e:	4804      	ldr	r0, [pc, #16]	; (23f95a0 <hal_i2c_read+0x14>)
 23f9590:	6800      	ldr	r0, [r0, #0]
 23f9592:	4b04      	ldr	r3, [pc, #16]	; (23f95a4 <hal_i2c_read+0x18>)
 23f9594:	4403      	add	r3, r0
 23f9596:	681b      	ldr	r3, [r3, #0]
 23f9598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f959a:	9302      	str	r3, [sp, #8]
 23f959c:	bd09      	pop	{r0, r3, pc}
 23f959e:	0000      	.short	0x0000
 23f95a0:	1007aac8 	.word	0x1007aac8
 23f95a4:	00000010 	.word	0x00000010

023f95a8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23f95a8:	b509      	push	{r0, r3, lr}
 23f95aa:	4804      	ldr	r0, [pc, #16]	; (23f95bc <hal_i2c_peek+0x14>)
 23f95ac:	6800      	ldr	r0, [r0, #0]
 23f95ae:	4b04      	ldr	r3, [pc, #16]	; (23f95c0 <hal_i2c_peek+0x18>)
 23f95b0:	4403      	add	r3, r0
 23f95b2:	681b      	ldr	r3, [r3, #0]
 23f95b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f95b6:	9302      	str	r3, [sp, #8]
 23f95b8:	bd09      	pop	{r0, r3, pc}
 23f95ba:	0000      	.short	0x0000
 23f95bc:	1007aac8 	.word	0x1007aac8
 23f95c0:	00000010 	.word	0x00000010

023f95c4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23f95c4:	b509      	push	{r0, r3, lr}
 23f95c6:	4804      	ldr	r0, [pc, #16]	; (23f95d8 <hal_i2c_flush+0x14>)
 23f95c8:	6800      	ldr	r0, [r0, #0]
 23f95ca:	4b04      	ldr	r3, [pc, #16]	; (23f95dc <hal_i2c_flush+0x18>)
 23f95cc:	4403      	add	r3, r0
 23f95ce:	681b      	ldr	r3, [r3, #0]
 23f95d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f95d2:	9302      	str	r3, [sp, #8]
 23f95d4:	bd09      	pop	{r0, r3, pc}
 23f95d6:	0000      	.short	0x0000
 23f95d8:	1007aac8 	.word	0x1007aac8
 23f95dc:	00000010 	.word	0x00000010

023f95e0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23f95e0:	b509      	push	{r0, r3, lr}
 23f95e2:	4804      	ldr	r0, [pc, #16]	; (23f95f4 <hal_i2c_is_enabled+0x14>)
 23f95e4:	6800      	ldr	r0, [r0, #0]
 23f95e6:	4b04      	ldr	r3, [pc, #16]	; (23f95f8 <hal_i2c_is_enabled+0x18>)
 23f95e8:	4403      	add	r3, r0
 23f95ea:	681b      	ldr	r3, [r3, #0]
 23f95ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f95ee:	9302      	str	r3, [sp, #8]
 23f95f0:	bd09      	pop	{r0, r3, pc}
 23f95f2:	0000      	.short	0x0000
 23f95f4:	1007aac8 	.word	0x1007aac8
 23f95f8:	00000010 	.word	0x00000010

023f95fc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23f95fc:	b509      	push	{r0, r3, lr}
 23f95fe:	4804      	ldr	r0, [pc, #16]	; (23f9610 <hal_i2c_init+0x14>)
 23f9600:	6800      	ldr	r0, [r0, #0]
 23f9602:	4b04      	ldr	r3, [pc, #16]	; (23f9614 <hal_i2c_init+0x18>)
 23f9604:	4403      	add	r3, r0
 23f9606:	681b      	ldr	r3, [r3, #0]
 23f9608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f960a:	9302      	str	r3, [sp, #8]
 23f960c:	bd09      	pop	{r0, r3, pc}
 23f960e:	0000      	.short	0x0000
 23f9610:	1007aac8 	.word	0x1007aac8
 23f9614:	00000010 	.word	0x00000010

023f9618 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
 23f9618:	b509      	push	{r0, r3, lr}
 23f961a:	4804      	ldr	r0, [pc, #16]	; (23f962c <if_index_to_name+0x14>)
 23f961c:	6800      	ldr	r0, [r0, #0]
 23f961e:	4b04      	ldr	r3, [pc, #16]	; (23f9630 <if_index_to_name+0x18>)
 23f9620:	4403      	add	r3, r0
 23f9622:	681b      	ldr	r3, [r3, #0]
 23f9624:	695b      	ldr	r3, [r3, #20]
 23f9626:	9302      	str	r3, [sp, #8]
 23f9628:	bd09      	pop	{r0, r3, pc}
 23f962a:	0000      	.short	0x0000
 23f962c:	1007aac8 	.word	0x1007aac8
 23f9630:	00000054 	.word	0x00000054

023f9634 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23f9634:	b509      	push	{r0, r3, lr}
 23f9636:	4804      	ldr	r0, [pc, #16]	; (23f9648 <inet_inet_ntop+0x14>)
 23f9638:	6800      	ldr	r0, [r0, #0]
 23f963a:	4b04      	ldr	r3, [pc, #16]	; (23f964c <inet_inet_ntop+0x18>)
 23f963c:	4403      	add	r3, r0
 23f963e:	681b      	ldr	r3, [r3, #0]
 23f9640:	695b      	ldr	r3, [r3, #20]
 23f9642:	9302      	str	r3, [sp, #8]
 23f9644:	bd09      	pop	{r0, r3, pc}
 23f9646:	0000      	.short	0x0000
 23f9648:	1007aac8 	.word	0x1007aac8
 23f964c:	0000004c 	.word	0x0000004c

023f9650 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
 23f9650:	b509      	push	{r0, r3, lr}
 23f9652:	4804      	ldr	r0, [pc, #16]	; (23f9664 <inet_htonl+0x14>)
 23f9654:	6800      	ldr	r0, [r0, #0]
 23f9656:	4b04      	ldr	r3, [pc, #16]	; (23f9668 <inet_htonl+0x18>)
 23f9658:	4403      	add	r3, r0
 23f965a:	681b      	ldr	r3, [r3, #0]
 23f965c:	6a1b      	ldr	r3, [r3, #32]
 23f965e:	9302      	str	r3, [sp, #8]
 23f9660:	bd09      	pop	{r0, r3, pc}
 23f9662:	0000      	.short	0x0000
 23f9664:	1007aac8 	.word	0x1007aac8
 23f9668:	0000004c 	.word	0x0000004c

023f966c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
 23f966c:	b509      	push	{r0, r3, lr}
 23f966e:	4804      	ldr	r0, [pc, #16]	; (23f9680 <inet_htons+0x14>)
 23f9670:	6800      	ldr	r0, [r0, #0]
 23f9672:	4b04      	ldr	r3, [pc, #16]	; (23f9684 <inet_htons+0x18>)
 23f9674:	4403      	add	r3, r0
 23f9676:	681b      	ldr	r3, [r3, #0]
 23f9678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f967a:	9302      	str	r3, [sp, #8]
 23f967c:	bd09      	pop	{r0, r3, pc}
 23f967e:	0000      	.short	0x0000
 23f9680:	1007aac8 	.word	0x1007aac8
 23f9684:	0000004c 	.word	0x0000004c

023f9688 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23f9688:	b509      	push	{r0, r3, lr}
 23f968a:	4804      	ldr	r0, [pc, #16]	; (23f969c <netdb_freeaddrinfo+0x14>)
 23f968c:	6800      	ldr	r0, [r0, #0]
 23f968e:	4b04      	ldr	r3, [pc, #16]	; (23f96a0 <netdb_freeaddrinfo+0x18>)
 23f9690:	4403      	add	r3, r0
 23f9692:	681b      	ldr	r3, [r3, #0]
 23f9694:	689b      	ldr	r3, [r3, #8]
 23f9696:	9302      	str	r3, [sp, #8]
 23f9698:	bd09      	pop	{r0, r3, pc}
 23f969a:	0000      	.short	0x0000
 23f969c:	1007aac8 	.word	0x1007aac8
 23f96a0:	00000050 	.word	0x00000050

023f96a4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23f96a4:	b509      	push	{r0, r3, lr}
 23f96a6:	4804      	ldr	r0, [pc, #16]	; (23f96b8 <netdb_getaddrinfo+0x14>)
 23f96a8:	6800      	ldr	r0, [r0, #0]
 23f96aa:	4b04      	ldr	r3, [pc, #16]	; (23f96bc <netdb_getaddrinfo+0x18>)
 23f96ac:	4403      	add	r3, r0
 23f96ae:	681b      	ldr	r3, [r3, #0]
 23f96b0:	68db      	ldr	r3, [r3, #12]
 23f96b2:	9302      	str	r3, [sp, #8]
 23f96b4:	bd09      	pop	{r0, r3, pc}
 23f96b6:	0000      	.short	0x0000
 23f96b8:	1007aac8 	.word	0x1007aac8
 23f96bc:	00000050 	.word	0x00000050

023f96c0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
 23f96c0:	b509      	push	{r0, r3, lr}
 23f96c2:	4804      	ldr	r0, [pc, #16]	; (23f96d4 <sock_setsockopt+0x14>)
 23f96c4:	6800      	ldr	r0, [r0, #0]
 23f96c6:	4b04      	ldr	r3, [pc, #16]	; (23f96d8 <sock_setsockopt+0x18>)
 23f96c8:	4403      	add	r3, r0
 23f96ca:	681b      	ldr	r3, [r3, #0]
 23f96cc:	699b      	ldr	r3, [r3, #24]
 23f96ce:	9302      	str	r3, [sp, #8]
 23f96d0:	bd09      	pop	{r0, r3, pc}
 23f96d2:	0000      	.short	0x0000
 23f96d4:	1007aac8 	.word	0x1007aac8
 23f96d8:	00000020 	.word	0x00000020

023f96dc <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
 23f96dc:	b509      	push	{r0, r3, lr}
 23f96de:	4804      	ldr	r0, [pc, #16]	; (23f96f0 <sock_close+0x14>)
 23f96e0:	6800      	ldr	r0, [r0, #0]
 23f96e2:	4b04      	ldr	r3, [pc, #16]	; (23f96f4 <sock_close+0x18>)
 23f96e4:	4403      	add	r3, r0
 23f96e6:	681b      	ldr	r3, [r3, #0]
 23f96e8:	69db      	ldr	r3, [r3, #28]
 23f96ea:	9302      	str	r3, [sp, #8]
 23f96ec:	bd09      	pop	{r0, r3, pc}
 23f96ee:	0000      	.short	0x0000
 23f96f0:	1007aac8 	.word	0x1007aac8
 23f96f4:	00000020 	.word	0x00000020

023f96f8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
 23f96f8:	b509      	push	{r0, r3, lr}
 23f96fa:	4804      	ldr	r0, [pc, #16]	; (23f970c <sock_connect+0x14>)
 23f96fc:	6800      	ldr	r0, [r0, #0]
 23f96fe:	4b04      	ldr	r3, [pc, #16]	; (23f9710 <sock_connect+0x18>)
 23f9700:	4403      	add	r3, r0
 23f9702:	681b      	ldr	r3, [r3, #0]
 23f9704:	6a1b      	ldr	r3, [r3, #32]
 23f9706:	9302      	str	r3, [sp, #8]
 23f9708:	bd09      	pop	{r0, r3, pc}
 23f970a:	0000      	.short	0x0000
 23f970c:	1007aac8 	.word	0x1007aac8
 23f9710:	00000020 	.word	0x00000020

023f9714 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
 23f9714:	b509      	push	{r0, r3, lr}
 23f9716:	4804      	ldr	r0, [pc, #16]	; (23f9728 <sock_recv+0x14>)
 23f9718:	6800      	ldr	r0, [r0, #0]
 23f971a:	4b04      	ldr	r3, [pc, #16]	; (23f972c <sock_recv+0x18>)
 23f971c:	4403      	add	r3, r0
 23f971e:	681b      	ldr	r3, [r3, #0]
 23f9720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f9722:	9302      	str	r3, [sp, #8]
 23f9724:	bd09      	pop	{r0, r3, pc}
 23f9726:	0000      	.short	0x0000
 23f9728:	1007aac8 	.word	0x1007aac8
 23f972c:	00000020 	.word	0x00000020

023f9730 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
 23f9730:	b509      	push	{r0, r3, lr}
 23f9732:	4804      	ldr	r0, [pc, #16]	; (23f9744 <sock_send+0x14>)
 23f9734:	6800      	ldr	r0, [r0, #0]
 23f9736:	4b04      	ldr	r3, [pc, #16]	; (23f9748 <sock_send+0x18>)
 23f9738:	4403      	add	r3, r0
 23f973a:	681b      	ldr	r3, [r3, #0]
 23f973c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f973e:	9302      	str	r3, [sp, #8]
 23f9740:	bd09      	pop	{r0, r3, pc}
 23f9742:	0000      	.short	0x0000
 23f9744:	1007aac8 	.word	0x1007aac8
 23f9748:	00000020 	.word	0x00000020

023f974c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
 23f974c:	b509      	push	{r0, r3, lr}
 23f974e:	4804      	ldr	r0, [pc, #16]	; (23f9760 <sock_socket+0x14>)
 23f9750:	6800      	ldr	r0, [r0, #0]
 23f9752:	4b04      	ldr	r3, [pc, #16]	; (23f9764 <sock_socket+0x18>)
 23f9754:	4403      	add	r3, r0
 23f9756:	681b      	ldr	r3, [r3, #0]
 23f9758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23f975a:	9302      	str	r3, [sp, #8]
 23f975c:	bd09      	pop	{r0, r3, pc}
 23f975e:	0000      	.short	0x0000
 23f9760:	1007aac8 	.word	0x1007aac8
 23f9764:	00000020 	.word	0x00000020

023f9768 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23f9768:	b509      	push	{r0, r3, lr}
 23f976a:	4804      	ldr	r0, [pc, #16]	; (23f977c <hal_spi_init+0x14>)
 23f976c:	6800      	ldr	r0, [r0, #0]
 23f976e:	4b04      	ldr	r3, [pc, #16]	; (23f9780 <hal_spi_init+0x18>)
 23f9770:	4403      	add	r3, r0
 23f9772:	681b      	ldr	r3, [r3, #0]
 23f9774:	69db      	ldr	r3, [r3, #28]
 23f9776:	9302      	str	r3, [sp, #8]
 23f9778:	bd09      	pop	{r0, r3, pc}
 23f977a:	0000      	.short	0x0000
 23f977c:	1007aac8 	.word	0x1007aac8
 23f9780:	00000018 	.word	0x00000018

023f9784 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23f9784:	b509      	push	{r0, r3, lr}
 23f9786:	4804      	ldr	r0, [pc, #16]	; (23f9798 <hal_spi_is_enabled+0x14>)
 23f9788:	6800      	ldr	r0, [r0, #0]
 23f978a:	4b04      	ldr	r3, [pc, #16]	; (23f979c <hal_spi_is_enabled+0x18>)
 23f978c:	4403      	add	r3, r0
 23f978e:	681b      	ldr	r3, [r3, #0]
 23f9790:	6a1b      	ldr	r3, [r3, #32]
 23f9792:	9302      	str	r3, [sp, #8]
 23f9794:	bd09      	pop	{r0, r3, pc}
 23f9796:	0000      	.short	0x0000
 23f9798:	1007aac8 	.word	0x1007aac8
 23f979c:	00000018 	.word	0x00000018

023f97a0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23f97a0:	b509      	push	{r0, r3, lr}
 23f97a2:	4804      	ldr	r0, [pc, #16]	; (23f97b4 <hal_usart_end+0x14>)
 23f97a4:	6800      	ldr	r0, [r0, #0]
 23f97a6:	4b04      	ldr	r3, [pc, #16]	; (23f97b8 <hal_usart_end+0x18>)
 23f97a8:	4403      	add	r3, r0
 23f97aa:	681b      	ldr	r3, [r3, #0]
 23f97ac:	689b      	ldr	r3, [r3, #8]
 23f97ae:	9302      	str	r3, [sp, #8]
 23f97b0:	bd09      	pop	{r0, r3, pc}
 23f97b2:	0000      	.short	0x0000
 23f97b4:	1007aac8 	.word	0x1007aac8
 23f97b8:	00000024 	.word	0x00000024

023f97bc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23f97bc:	b509      	push	{r0, r3, lr}
 23f97be:	4804      	ldr	r0, [pc, #16]	; (23f97d0 <hal_usart_write+0x14>)
 23f97c0:	6800      	ldr	r0, [r0, #0]
 23f97c2:	4b04      	ldr	r3, [pc, #16]	; (23f97d4 <hal_usart_write+0x18>)
 23f97c4:	4403      	add	r3, r0
 23f97c6:	681b      	ldr	r3, [r3, #0]
 23f97c8:	68db      	ldr	r3, [r3, #12]
 23f97ca:	9302      	str	r3, [sp, #8]
 23f97cc:	bd09      	pop	{r0, r3, pc}
 23f97ce:	0000      	.short	0x0000
 23f97d0:	1007aac8 	.word	0x1007aac8
 23f97d4:	00000024 	.word	0x00000024

023f97d8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23f97d8:	b509      	push	{r0, r3, lr}
 23f97da:	4804      	ldr	r0, [pc, #16]	; (23f97ec <hal_usart_available+0x14>)
 23f97dc:	6800      	ldr	r0, [r0, #0]
 23f97de:	4b04      	ldr	r3, [pc, #16]	; (23f97f0 <hal_usart_available+0x18>)
 23f97e0:	4403      	add	r3, r0
 23f97e2:	681b      	ldr	r3, [r3, #0]
 23f97e4:	691b      	ldr	r3, [r3, #16]
 23f97e6:	9302      	str	r3, [sp, #8]
 23f97e8:	bd09      	pop	{r0, r3, pc}
 23f97ea:	0000      	.short	0x0000
 23f97ec:	1007aac8 	.word	0x1007aac8
 23f97f0:	00000024 	.word	0x00000024

023f97f4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23f97f4:	b509      	push	{r0, r3, lr}
 23f97f6:	4804      	ldr	r0, [pc, #16]	; (23f9808 <hal_usart_read+0x14>)
 23f97f8:	6800      	ldr	r0, [r0, #0]
 23f97fa:	4b04      	ldr	r3, [pc, #16]	; (23f980c <hal_usart_read+0x18>)
 23f97fc:	4403      	add	r3, r0
 23f97fe:	681b      	ldr	r3, [r3, #0]
 23f9800:	695b      	ldr	r3, [r3, #20]
 23f9802:	9302      	str	r3, [sp, #8]
 23f9804:	bd09      	pop	{r0, r3, pc}
 23f9806:	0000      	.short	0x0000
 23f9808:	1007aac8 	.word	0x1007aac8
 23f980c:	00000024 	.word	0x00000024

023f9810 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23f9810:	b509      	push	{r0, r3, lr}
 23f9812:	4804      	ldr	r0, [pc, #16]	; (23f9824 <hal_usart_peek+0x14>)
 23f9814:	6800      	ldr	r0, [r0, #0]
 23f9816:	4b04      	ldr	r3, [pc, #16]	; (23f9828 <hal_usart_peek+0x18>)
 23f9818:	4403      	add	r3, r0
 23f981a:	681b      	ldr	r3, [r3, #0]
 23f981c:	699b      	ldr	r3, [r3, #24]
 23f981e:	9302      	str	r3, [sp, #8]
 23f9820:	bd09      	pop	{r0, r3, pc}
 23f9822:	0000      	.short	0x0000
 23f9824:	1007aac8 	.word	0x1007aac8
 23f9828:	00000024 	.word	0x00000024

023f982c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23f982c:	b509      	push	{r0, r3, lr}
 23f982e:	4804      	ldr	r0, [pc, #16]	; (23f9840 <hal_usart_flush+0x14>)
 23f9830:	6800      	ldr	r0, [r0, #0]
 23f9832:	4b04      	ldr	r3, [pc, #16]	; (23f9844 <hal_usart_flush+0x18>)
 23f9834:	4403      	add	r3, r0
 23f9836:	681b      	ldr	r3, [r3, #0]
 23f9838:	69db      	ldr	r3, [r3, #28]
 23f983a:	9302      	str	r3, [sp, #8]
 23f983c:	bd09      	pop	{r0, r3, pc}
 23f983e:	0000      	.short	0x0000
 23f9840:	1007aac8 	.word	0x1007aac8
 23f9844:	00000024 	.word	0x00000024

023f9848 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23f9848:	b509      	push	{r0, r3, lr}
 23f984a:	4804      	ldr	r0, [pc, #16]	; (23f985c <hal_usart_is_enabled+0x14>)
 23f984c:	6800      	ldr	r0, [r0, #0]
 23f984e:	4b04      	ldr	r3, [pc, #16]	; (23f9860 <hal_usart_is_enabled+0x18>)
 23f9850:	4403      	add	r3, r0
 23f9852:	681b      	ldr	r3, [r3, #0]
 23f9854:	6a1b      	ldr	r3, [r3, #32]
 23f9856:	9302      	str	r3, [sp, #8]
 23f9858:	bd09      	pop	{r0, r3, pc}
 23f985a:	0000      	.short	0x0000
 23f985c:	1007aac8 	.word	0x1007aac8
 23f9860:	00000024 	.word	0x00000024

023f9864 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23f9864:	b509      	push	{r0, r3, lr}
 23f9866:	4804      	ldr	r0, [pc, #16]	; (23f9878 <hal_usart_available_data_for_write+0x14>)
 23f9868:	6800      	ldr	r0, [r0, #0]
 23f986a:	4b04      	ldr	r3, [pc, #16]	; (23f987c <hal_usart_available_data_for_write+0x18>)
 23f986c:	4403      	add	r3, r0
 23f986e:	681b      	ldr	r3, [r3, #0]
 23f9870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f9872:	9302      	str	r3, [sp, #8]
 23f9874:	bd09      	pop	{r0, r3, pc}
 23f9876:	0000      	.short	0x0000
 23f9878:	1007aac8 	.word	0x1007aac8
 23f987c:	00000024 	.word	0x00000024

023f9880 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23f9880:	b509      	push	{r0, r3, lr}
 23f9882:	4804      	ldr	r0, [pc, #16]	; (23f9894 <hal_usart_begin_config+0x14>)
 23f9884:	6800      	ldr	r0, [r0, #0]
 23f9886:	4b04      	ldr	r3, [pc, #16]	; (23f9898 <hal_usart_begin_config+0x18>)
 23f9888:	4403      	add	r3, r0
 23f988a:	681b      	ldr	r3, [r3, #0]
 23f988c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f988e:	9302      	str	r3, [sp, #8]
 23f9890:	bd09      	pop	{r0, r3, pc}
 23f9892:	0000      	.short	0x0000
 23f9894:	1007aac8 	.word	0x1007aac8
 23f9898:	00000024 	.word	0x00000024

023f989c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23f989c:	b509      	push	{r0, r3, lr}
 23f989e:	4804      	ldr	r0, [pc, #16]	; (23f98b0 <hal_usart_init_ex+0x14>)
 23f98a0:	6800      	ldr	r0, [r0, #0]
 23f98a2:	4b04      	ldr	r3, [pc, #16]	; (23f98b4 <hal_usart_init_ex+0x18>)
 23f98a4:	4403      	add	r3, r0
 23f98a6:	681b      	ldr	r3, [r3, #0]
 23f98a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f98aa:	9302      	str	r3, [sp, #8]
 23f98ac:	bd09      	pop	{r0, r3, pc}
 23f98ae:	0000      	.short	0x0000
 23f98b0:	1007aac8 	.word	0x1007aac8
 23f98b4:	00000024 	.word	0x00000024

023f98b8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23f98b8:	b509      	push	{r0, r3, lr}
 23f98ba:	4804      	ldr	r0, [pc, #16]	; (23f98cc <HAL_USB_USART_Init+0x14>)
 23f98bc:	6800      	ldr	r0, [r0, #0]
 23f98be:	4b04      	ldr	r3, [pc, #16]	; (23f98d0 <HAL_USB_USART_Init+0x18>)
 23f98c0:	4403      	add	r3, r0
 23f98c2:	681b      	ldr	r3, [r3, #0]
 23f98c4:	681b      	ldr	r3, [r3, #0]
 23f98c6:	9302      	str	r3, [sp, #8]
 23f98c8:	bd09      	pop	{r0, r3, pc}
 23f98ca:	0000      	.short	0x0000
 23f98cc:	1007aac8 	.word	0x1007aac8
 23f98d0:	00000034 	.word	0x00000034

023f98d4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23f98d4:	b509      	push	{r0, r3, lr}
 23f98d6:	4804      	ldr	r0, [pc, #16]	; (23f98e8 <HAL_USB_USART_Begin+0x14>)
 23f98d8:	6800      	ldr	r0, [r0, #0]
 23f98da:	4b04      	ldr	r3, [pc, #16]	; (23f98ec <HAL_USB_USART_Begin+0x18>)
 23f98dc:	4403      	add	r3, r0
 23f98de:	681b      	ldr	r3, [r3, #0]
 23f98e0:	685b      	ldr	r3, [r3, #4]
 23f98e2:	9302      	str	r3, [sp, #8]
 23f98e4:	bd09      	pop	{r0, r3, pc}
 23f98e6:	0000      	.short	0x0000
 23f98e8:	1007aac8 	.word	0x1007aac8
 23f98ec:	00000034 	.word	0x00000034

023f98f0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23f98f0:	b509      	push	{r0, r3, lr}
 23f98f2:	4804      	ldr	r0, [pc, #16]	; (23f9904 <HAL_USB_USART_End+0x14>)
 23f98f4:	6800      	ldr	r0, [r0, #0]
 23f98f6:	4b04      	ldr	r3, [pc, #16]	; (23f9908 <HAL_USB_USART_End+0x18>)
 23f98f8:	4403      	add	r3, r0
 23f98fa:	681b      	ldr	r3, [r3, #0]
 23f98fc:	689b      	ldr	r3, [r3, #8]
 23f98fe:	9302      	str	r3, [sp, #8]
 23f9900:	bd09      	pop	{r0, r3, pc}
 23f9902:	0000      	.short	0x0000
 23f9904:	1007aac8 	.word	0x1007aac8
 23f9908:	00000034 	.word	0x00000034

023f990c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23f990c:	b509      	push	{r0, r3, lr}
 23f990e:	4804      	ldr	r0, [pc, #16]	; (23f9920 <HAL_USB_USART_Available_Data+0x14>)
 23f9910:	6800      	ldr	r0, [r0, #0]
 23f9912:	4b04      	ldr	r3, [pc, #16]	; (23f9924 <HAL_USB_USART_Available_Data+0x18>)
 23f9914:	4403      	add	r3, r0
 23f9916:	681b      	ldr	r3, [r3, #0]
 23f9918:	691b      	ldr	r3, [r3, #16]
 23f991a:	9302      	str	r3, [sp, #8]
 23f991c:	bd09      	pop	{r0, r3, pc}
 23f991e:	0000      	.short	0x0000
 23f9920:	1007aac8 	.word	0x1007aac8
 23f9924:	00000034 	.word	0x00000034

023f9928 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23f9928:	b509      	push	{r0, r3, lr}
 23f992a:	4804      	ldr	r0, [pc, #16]	; (23f993c <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23f992c:	6800      	ldr	r0, [r0, #0]
 23f992e:	4b04      	ldr	r3, [pc, #16]	; (23f9940 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23f9930:	4403      	add	r3, r0
 23f9932:	681b      	ldr	r3, [r3, #0]
 23f9934:	695b      	ldr	r3, [r3, #20]
 23f9936:	9302      	str	r3, [sp, #8]
 23f9938:	bd09      	pop	{r0, r3, pc}
 23f993a:	0000      	.short	0x0000
 23f993c:	1007aac8 	.word	0x1007aac8
 23f9940:	00000034 	.word	0x00000034

023f9944 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f9944:	b509      	push	{r0, r3, lr}
 23f9946:	4804      	ldr	r0, [pc, #16]	; (23f9958 <HAL_USB_USART_Receive_Data+0x14>)
 23f9948:	6800      	ldr	r0, [r0, #0]
 23f994a:	4b04      	ldr	r3, [pc, #16]	; (23f995c <HAL_USB_USART_Receive_Data+0x18>)
 23f994c:	4403      	add	r3, r0
 23f994e:	681b      	ldr	r3, [r3, #0]
 23f9950:	699b      	ldr	r3, [r3, #24]
 23f9952:	9302      	str	r3, [sp, #8]
 23f9954:	bd09      	pop	{r0, r3, pc}
 23f9956:	0000      	.short	0x0000
 23f9958:	1007aac8 	.word	0x1007aac8
 23f995c:	00000034 	.word	0x00000034

023f9960 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f9960:	b509      	push	{r0, r3, lr}
 23f9962:	4804      	ldr	r0, [pc, #16]	; (23f9974 <HAL_USB_USART_Send_Data+0x14>)
 23f9964:	6800      	ldr	r0, [r0, #0]
 23f9966:	4b04      	ldr	r3, [pc, #16]	; (23f9978 <HAL_USB_USART_Send_Data+0x18>)
 23f9968:	4403      	add	r3, r0
 23f996a:	681b      	ldr	r3, [r3, #0]
 23f996c:	69db      	ldr	r3, [r3, #28]
 23f996e:	9302      	str	r3, [sp, #8]
 23f9970:	bd09      	pop	{r0, r3, pc}
 23f9972:	0000      	.short	0x0000
 23f9974:	1007aac8 	.word	0x1007aac8
 23f9978:	00000034 	.word	0x00000034

023f997c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23f997c:	b509      	push	{r0, r3, lr}
 23f997e:	4804      	ldr	r0, [pc, #16]	; (23f9990 <HAL_USB_USART_Flush_Data+0x14>)
 23f9980:	6800      	ldr	r0, [r0, #0]
 23f9982:	4b04      	ldr	r3, [pc, #16]	; (23f9994 <HAL_USB_USART_Flush_Data+0x18>)
 23f9984:	4403      	add	r3, r0
 23f9986:	681b      	ldr	r3, [r3, #0]
 23f9988:	6a1b      	ldr	r3, [r3, #32]
 23f998a:	9302      	str	r3, [sp, #8]
 23f998c:	bd09      	pop	{r0, r3, pc}
 23f998e:	0000      	.short	0x0000
 23f9990:	1007aac8 	.word	0x1007aac8
 23f9994:	00000034 	.word	0x00000034

023f9998 <hal_watchdog_set_config>:

#if HAL_PLATFORM_HW_WATCHDOG

DYNALIB_BEGIN(hal_watchdog)

DYNALIB_FN(0, hal_watchdog, hal_watchdog_set_config, int(hal_watchdog_instance_t, const hal_watchdog_config_t*, void*))
 23f9998:	b509      	push	{r0, r3, lr}
 23f999a:	4804      	ldr	r0, [pc, #16]	; (23f99ac <hal_watchdog_set_config+0x14>)
 23f999c:	6800      	ldr	r0, [r0, #0]
 23f999e:	4b04      	ldr	r3, [pc, #16]	; (23f99b0 <hal_watchdog_set_config+0x18>)
 23f99a0:	4403      	add	r3, r0
 23f99a2:	681b      	ldr	r3, [r3, #0]
 23f99a4:	681b      	ldr	r3, [r3, #0]
 23f99a6:	9302      	str	r3, [sp, #8]
 23f99a8:	bd09      	pop	{r0, r3, pc}
 23f99aa:	0000      	.short	0x0000
 23f99ac:	1007aac8 	.word	0x1007aac8
 23f99b0:	0000006c 	.word	0x0000006c

023f99b4 <hal_watchdog_start>:
DYNALIB_FN(1, hal_watchdog, hal_watchdog_on_expired_callback, int(hal_watchdog_instance_t, hal_watchdog_on_expired_callback_t, void*, void*))
DYNALIB_FN(2, hal_watchdog, hal_watchdog_start, int(hal_watchdog_instance_t, void*))
 23f99b4:	b509      	push	{r0, r3, lr}
 23f99b6:	4804      	ldr	r0, [pc, #16]	; (23f99c8 <hal_watchdog_start+0x14>)
 23f99b8:	6800      	ldr	r0, [r0, #0]
 23f99ba:	4b04      	ldr	r3, [pc, #16]	; (23f99cc <hal_watchdog_start+0x18>)
 23f99bc:	4403      	add	r3, r0
 23f99be:	681b      	ldr	r3, [r3, #0]
 23f99c0:	689b      	ldr	r3, [r3, #8]
 23f99c2:	9302      	str	r3, [sp, #8]
 23f99c4:	bd09      	pop	{r0, r3, pc}
 23f99c6:	0000      	.short	0x0000
 23f99c8:	1007aac8 	.word	0x1007aac8
 23f99cc:	0000006c 	.word	0x0000006c

023f99d0 <hal_watchdog_refresh>:
DYNALIB_FN(3, hal_watchdog, hal_watchdog_stop, int(hal_watchdog_instance_t, void*))
DYNALIB_FN(4, hal_watchdog, hal_watchdog_refresh, int(hal_watchdog_instance_t, void*))
 23f99d0:	b509      	push	{r0, r3, lr}
 23f99d2:	4804      	ldr	r0, [pc, #16]	; (23f99e4 <hal_watchdog_refresh+0x14>)
 23f99d4:	6800      	ldr	r0, [r0, #0]
 23f99d6:	4b04      	ldr	r3, [pc, #16]	; (23f99e8 <hal_watchdog_refresh+0x18>)
 23f99d8:	4403      	add	r3, r0
 23f99da:	681b      	ldr	r3, [r3, #0]
 23f99dc:	691b      	ldr	r3, [r3, #16]
 23f99de:	9302      	str	r3, [sp, #8]
 23f99e0:	bd09      	pop	{r0, r3, pc}
 23f99e2:	0000      	.short	0x0000
 23f99e4:	1007aac8 	.word	0x1007aac8
 23f99e8:	0000006c 	.word	0x0000006c

023f99ec <hal_watchdog_get_info>:
DYNALIB_FN(5, hal_watchdog, hal_watchdog_get_info, int(hal_watchdog_instance_t, hal_watchdog_info_t*, void*))
 23f99ec:	b509      	push	{r0, r3, lr}
 23f99ee:	4804      	ldr	r0, [pc, #16]	; (23f9a00 <hal_watchdog_get_info+0x14>)
 23f99f0:	6800      	ldr	r0, [r0, #0]
 23f99f2:	4b04      	ldr	r3, [pc, #16]	; (23f9a04 <hal_watchdog_get_info+0x18>)
 23f99f4:	4403      	add	r3, r0
 23f99f6:	681b      	ldr	r3, [r3, #0]
 23f99f8:	695b      	ldr	r3, [r3, #20]
 23f99fa:	9302      	str	r3, [sp, #8]
 23f99fc:	bd09      	pop	{r0, r3, pc}
 23f99fe:	0000      	.short	0x0000
 23f9a00:	1007aac8 	.word	0x1007aac8
 23f9a04:	0000006c 	.word	0x0000006c

023f9a08 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23f9a08:	b509      	push	{r0, r3, lr}
 23f9a0a:	4804      	ldr	r0, [pc, #16]	; (23f9a1c <panic_+0x14>)
 23f9a0c:	6800      	ldr	r0, [r0, #0]
 23f9a0e:	4b04      	ldr	r3, [pc, #16]	; (23f9a20 <panic_+0x18>)
 23f9a10:	4403      	add	r3, r0
 23f9a12:	681b      	ldr	r3, [r3, #0]
 23f9a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f9a16:	9302      	str	r3, [sp, #8]
 23f9a18:	bd09      	pop	{r0, r3, pc}
 23f9a1a:	0000      	.short	0x0000
 23f9a1c:	1007aac8 	.word	0x1007aac8
 23f9a20:	00000048 	.word	0x00000048

023f9a24 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23f9a24:	b509      	push	{r0, r3, lr}
 23f9a26:	4804      	ldr	r0, [pc, #16]	; (23f9a38 <log_message+0x14>)
 23f9a28:	6800      	ldr	r0, [r0, #0]
 23f9a2a:	4b04      	ldr	r3, [pc, #16]	; (23f9a3c <log_message+0x18>)
 23f9a2c:	4403      	add	r3, r0
 23f9a2e:	681b      	ldr	r3, [r3, #0]
 23f9a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f9a32:	9302      	str	r3, [sp, #8]
 23f9a34:	bd09      	pop	{r0, r3, pc}
 23f9a36:	0000      	.short	0x0000
 23f9a38:	1007aac8 	.word	0x1007aac8
 23f9a3c:	00000048 	.word	0x00000048

023f9a40 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23f9a40:	b509      	push	{r0, r3, lr}
 23f9a42:	4804      	ldr	r0, [pc, #16]	; (23f9a54 <log_message_v+0x14>)
 23f9a44:	6800      	ldr	r0, [r0, #0]
 23f9a46:	4b04      	ldr	r3, [pc, #16]	; (23f9a58 <log_message_v+0x18>)
 23f9a48:	4403      	add	r3, r0
 23f9a4a:	681b      	ldr	r3, [r3, #0]
 23f9a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f9a4e:	9302      	str	r3, [sp, #8]
 23f9a50:	bd09      	pop	{r0, r3, pc}
 23f9a52:	0000      	.short	0x0000
 23f9a54:	1007aac8 	.word	0x1007aac8
 23f9a58:	00000048 	.word	0x00000048

023f9a5c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23f9a5c:	b509      	push	{r0, r3, lr}
 23f9a5e:	4804      	ldr	r0, [pc, #16]	; (23f9a70 <log_level_name+0x14>)
 23f9a60:	6800      	ldr	r0, [r0, #0]
 23f9a62:	4b04      	ldr	r3, [pc, #16]	; (23f9a74 <log_level_name+0x18>)
 23f9a64:	4403      	add	r3, r0
 23f9a66:	681b      	ldr	r3, [r3, #0]
 23f9a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23f9a6a:	9302      	str	r3, [sp, #8]
 23f9a6c:	bd09      	pop	{r0, r3, pc}
 23f9a6e:	0000      	.short	0x0000
 23f9a70:	1007aac8 	.word	0x1007aac8
 23f9a74:	00000048 	.word	0x00000048

023f9a78 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23f9a78:	b509      	push	{r0, r3, lr}
 23f9a7a:	4804      	ldr	r0, [pc, #16]	; (23f9a8c <log_set_callbacks+0x14>)
 23f9a7c:	6800      	ldr	r0, [r0, #0]
 23f9a7e:	4b04      	ldr	r3, [pc, #16]	; (23f9a90 <log_set_callbacks+0x18>)
 23f9a80:	4403      	add	r3, r0
 23f9a82:	681b      	ldr	r3, [r3, #0]
 23f9a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23f9a86:	9302      	str	r3, [sp, #8]
 23f9a88:	bd09      	pop	{r0, r3, pc}
 23f9a8a:	0000      	.short	0x0000
 23f9a8c:	1007aac8 	.word	0x1007aac8
 23f9a90:	00000048 	.word	0x00000048

023f9a94 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 23f9a94:	b509      	push	{r0, r3, lr}
 23f9a96:	4804      	ldr	r0, [pc, #16]	; (23f9aa8 <system_mode+0x14>)
 23f9a98:	6800      	ldr	r0, [r0, #0]
 23f9a9a:	4b04      	ldr	r3, [pc, #16]	; (23f9aac <system_mode+0x18>)
 23f9a9c:	4403      	add	r3, r0
 23f9a9e:	681b      	ldr	r3, [r3, #0]
 23f9aa0:	681b      	ldr	r3, [r3, #0]
 23f9aa2:	9302      	str	r3, [sp, #8]
 23f9aa4:	bd09      	pop	{r0, r3, pc}
 23f9aa6:	0000      	.short	0x0000
 23f9aa8:	1007aac8 	.word	0x1007aac8
 23f9aac:	00000008 	.word	0x00000008

023f9ab0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23f9ab0:	b509      	push	{r0, r3, lr}
 23f9ab2:	4804      	ldr	r0, [pc, #16]	; (23f9ac4 <set_system_mode+0x14>)
 23f9ab4:	6800      	ldr	r0, [r0, #0]
 23f9ab6:	4b04      	ldr	r3, [pc, #16]	; (23f9ac8 <set_system_mode+0x18>)
 23f9ab8:	4403      	add	r3, r0
 23f9aba:	681b      	ldr	r3, [r3, #0]
 23f9abc:	685b      	ldr	r3, [r3, #4]
 23f9abe:	9302      	str	r3, [sp, #8]
 23f9ac0:	bd09      	pop	{r0, r3, pc}
 23f9ac2:	0000      	.short	0x0000
 23f9ac4:	1007aac8 	.word	0x1007aac8
 23f9ac8:	00000008 	.word	0x00000008

023f9acc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23f9acc:	b509      	push	{r0, r3, lr}
 23f9ace:	4804      	ldr	r0, [pc, #16]	; (23f9ae0 <system_delay_ms+0x14>)
 23f9ad0:	6800      	ldr	r0, [r0, #0]
 23f9ad2:	4b04      	ldr	r3, [pc, #16]	; (23f9ae4 <system_delay_ms+0x18>)
 23f9ad4:	4403      	add	r3, r0
 23f9ad6:	681b      	ldr	r3, [r3, #0]
 23f9ad8:	695b      	ldr	r3, [r3, #20]
 23f9ada:	9302      	str	r3, [sp, #8]
 23f9adc:	bd09      	pop	{r0, r3, pc}
 23f9ade:	0000      	.short	0x0000
 23f9ae0:	1007aac8 	.word	0x1007aac8
 23f9ae4:	00000008 	.word	0x00000008

023f9ae8 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
 23f9ae8:	b509      	push	{r0, r3, lr}
 23f9aea:	4804      	ldr	r0, [pc, #16]	; (23f9afc <system_subscribe_event+0x14>)
 23f9aec:	6800      	ldr	r0, [r0, #0]
 23f9aee:	4b04      	ldr	r3, [pc, #16]	; (23f9b00 <system_subscribe_event+0x18>)
 23f9af0:	4403      	add	r3, r0
 23f9af2:	681b      	ldr	r3, [r3, #0]
 23f9af4:	6a1b      	ldr	r3, [r3, #32]
 23f9af6:	9302      	str	r3, [sp, #8]
 23f9af8:	bd09      	pop	{r0, r3, pc}
 23f9afa:	0000      	.short	0x0000
 23f9afc:	1007aac8 	.word	0x1007aac8
 23f9b00:	00000008 	.word	0x00000008

023f9b04 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23f9b04:	b509      	push	{r0, r3, lr}
 23f9b06:	4804      	ldr	r0, [pc, #16]	; (23f9b18 <system_thread_set_state+0x14>)
 23f9b08:	6800      	ldr	r0, [r0, #0]
 23f9b0a:	4b04      	ldr	r3, [pc, #16]	; (23f9b1c <system_thread_set_state+0x18>)
 23f9b0c:	4403      	add	r3, r0
 23f9b0e:	681b      	ldr	r3, [r3, #0]
 23f9b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f9b12:	9302      	str	r3, [sp, #8]
 23f9b14:	bd09      	pop	{r0, r3, pc}
 23f9b16:	0000      	.short	0x0000
 23f9b18:	1007aac8 	.word	0x1007aac8
 23f9b1c:	00000008 	.word	0x00000008

023f9b20 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 23f9b20:	b509      	push	{r0, r3, lr}
 23f9b22:	4804      	ldr	r0, [pc, #16]	; (23f9b34 <system_thread_get_state+0x14>)
 23f9b24:	6800      	ldr	r0, [r0, #0]
 23f9b26:	4b04      	ldr	r3, [pc, #16]	; (23f9b38 <system_thread_get_state+0x18>)
 23f9b28:	4403      	add	r3, r0
 23f9b2a:	681b      	ldr	r3, [r3, #0]
 23f9b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f9b2e:	9302      	str	r3, [sp, #8]
 23f9b30:	bd09      	pop	{r0, r3, pc}
 23f9b32:	0000      	.short	0x0000
 23f9b34:	1007aac8 	.word	0x1007aac8
 23f9b38:	00000008 	.word	0x00000008

023f9b3c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23f9b3c:	b509      	push	{r0, r3, lr}
 23f9b3e:	4804      	ldr	r0, [pc, #16]	; (23f9b50 <system_ctrl_set_app_request_handler+0x14>)
 23f9b40:	6800      	ldr	r0, [r0, #0]
 23f9b42:	4b04      	ldr	r3, [pc, #16]	; (23f9b54 <system_ctrl_set_app_request_handler+0x18>)
 23f9b44:	4403      	add	r3, r0
 23f9b46:	681b      	ldr	r3, [r3, #0]
 23f9b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23f9b4c:	9302      	str	r3, [sp, #8]
 23f9b4e:	bd09      	pop	{r0, r3, pc}
 23f9b50:	1007aac8 	.word	0x1007aac8
 23f9b54:	00000008 	.word	0x00000008

023f9b58 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23f9b58:	b509      	push	{r0, r3, lr}
 23f9b5a:	4804      	ldr	r0, [pc, #16]	; (23f9b6c <system_ctrl_set_result+0x14>)
 23f9b5c:	6800      	ldr	r0, [r0, #0]
 23f9b5e:	4b04      	ldr	r3, [pc, #16]	; (23f9b70 <system_ctrl_set_result+0x18>)
 23f9b60:	4403      	add	r3, r0
 23f9b62:	681b      	ldr	r3, [r3, #0]
 23f9b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23f9b68:	9302      	str	r3, [sp, #8]
 23f9b6a:	bd09      	pop	{r0, r3, pc}
 23f9b6c:	1007aac8 	.word	0x1007aac8
 23f9b70:	00000008 	.word	0x00000008

023f9b74 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 23f9b74:	b509      	push	{r0, r3, lr}
 23f9b76:	4804      	ldr	r0, [pc, #16]	; (23f9b88 <system_reset+0x14>)
 23f9b78:	6800      	ldr	r0, [r0, #0]
 23f9b7a:	4b04      	ldr	r3, [pc, #16]	; (23f9b8c <system_reset+0x18>)
 23f9b7c:	4403      	add	r3, r0
 23f9b7e:	681b      	ldr	r3, [r3, #0]
 23f9b80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 23f9b84:	9302      	str	r3, [sp, #8]
 23f9b86:	bd09      	pop	{r0, r3, pc}
 23f9b88:	1007aac8 	.word	0x1007aac8
 23f9b8c:	00000008 	.word	0x00000008

023f9b90 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 23f9b90:	b509      	push	{r0, r3, lr}
 23f9b92:	4804      	ldr	r0, [pc, #16]	; (23f9ba4 <spark_variable+0x14>)
 23f9b94:	6800      	ldr	r0, [r0, #0]
 23f9b96:	4b04      	ldr	r3, [pc, #16]	; (23f9ba8 <spark_variable+0x18>)
 23f9b98:	4403      	add	r3, r0
 23f9b9a:	681b      	ldr	r3, [r3, #0]
 23f9b9c:	681b      	ldr	r3, [r3, #0]
 23f9b9e:	9302      	str	r3, [sp, #8]
 23f9ba0:	bd09      	pop	{r0, r3, pc}
 23f9ba2:	0000      	.short	0x0000
 23f9ba4:	1007aac8 	.word	0x1007aac8
 23f9ba8:	0000002c 	.word	0x0000002c

023f9bac <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 23f9bac:	b509      	push	{r0, r3, lr}
 23f9bae:	4804      	ldr	r0, [pc, #16]	; (23f9bc0 <spark_function+0x14>)
 23f9bb0:	6800      	ldr	r0, [r0, #0]
 23f9bb2:	4b04      	ldr	r3, [pc, #16]	; (23f9bc4 <spark_function+0x18>)
 23f9bb4:	4403      	add	r3, r0
 23f9bb6:	681b      	ldr	r3, [r3, #0]
 23f9bb8:	685b      	ldr	r3, [r3, #4]
 23f9bba:	9302      	str	r3, [sp, #8]
 23f9bbc:	bd09      	pop	{r0, r3, pc}
 23f9bbe:	0000      	.short	0x0000
 23f9bc0:	1007aac8 	.word	0x1007aac8
 23f9bc4:	0000002c 	.word	0x0000002c

023f9bc8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23f9bc8:	b509      	push	{r0, r3, lr}
 23f9bca:	4804      	ldr	r0, [pc, #16]	; (23f9bdc <spark_process+0x14>)
 23f9bcc:	6800      	ldr	r0, [r0, #0]
 23f9bce:	4b04      	ldr	r3, [pc, #16]	; (23f9be0 <spark_process+0x18>)
 23f9bd0:	4403      	add	r3, r0
 23f9bd2:	681b      	ldr	r3, [r3, #0]
 23f9bd4:	689b      	ldr	r3, [r3, #8]
 23f9bd6:	9302      	str	r3, [sp, #8]
 23f9bd8:	bd09      	pop	{r0, r3, pc}
 23f9bda:	0000      	.short	0x0000
 23f9bdc:	1007aac8 	.word	0x1007aac8
 23f9be0:	0000002c 	.word	0x0000002c

023f9be4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23f9be4:	b509      	push	{r0, r3, lr}
 23f9be6:	4804      	ldr	r0, [pc, #16]	; (23f9bf8 <spark_cloud_flag_connected+0x14>)
 23f9be8:	6800      	ldr	r0, [r0, #0]
 23f9bea:	4b04      	ldr	r3, [pc, #16]	; (23f9bfc <spark_cloud_flag_connected+0x18>)
 23f9bec:	4403      	add	r3, r0
 23f9bee:	681b      	ldr	r3, [r3, #0]
 23f9bf0:	695b      	ldr	r3, [r3, #20]
 23f9bf2:	9302      	str	r3, [sp, #8]
 23f9bf4:	bd09      	pop	{r0, r3, pc}
 23f9bf6:	0000      	.short	0x0000
 23f9bf8:	1007aac8 	.word	0x1007aac8
 23f9bfc:	0000002c 	.word	0x0000002c

023f9c00 <spark_subscribe>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 23f9c00:	b509      	push	{r0, r3, lr}
 23f9c02:	4804      	ldr	r0, [pc, #16]	; (23f9c14 <spark_subscribe+0x14>)
 23f9c04:	6800      	ldr	r0, [r0, #0]
 23f9c06:	4b04      	ldr	r3, [pc, #16]	; (23f9c18 <spark_subscribe+0x18>)
 23f9c08:	4403      	add	r3, r0
 23f9c0a:	681b      	ldr	r3, [r3, #0]
 23f9c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f9c0e:	9302      	str	r3, [sp, #8]
 23f9c10:	bd09      	pop	{r0, r3, pc}
 23f9c12:	0000      	.short	0x0000
 23f9c14:	1007aac8 	.word	0x1007aac8
 23f9c18:	0000002c 	.word	0x0000002c

023f9c1c <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 23f9c1c:	b509      	push	{r0, r3, lr}
 23f9c1e:	4804      	ldr	r0, [pc, #16]	; (23f9c30 <spark_sync_time_pending+0x14>)
 23f9c20:	6800      	ldr	r0, [r0, #0]
 23f9c22:	4b04      	ldr	r3, [pc, #16]	; (23f9c34 <spark_sync_time_pending+0x18>)
 23f9c24:	4403      	add	r3, r0
 23f9c26:	681b      	ldr	r3, [r3, #0]
 23f9c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f9c2a:	9302      	str	r3, [sp, #8]
 23f9c2c:	bd09      	pop	{r0, r3, pc}
 23f9c2e:	0000      	.short	0x0000
 23f9c30:	1007aac8 	.word	0x1007aac8
 23f9c34:	0000002c 	.word	0x0000002c

023f9c38 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23f9c38:	b509      	push	{r0, r3, lr}
 23f9c3a:	4804      	ldr	r0, [pc, #16]	; (23f9c4c <spark_set_random_seed_from_cloud_handler+0x14>)
 23f9c3c:	6800      	ldr	r0, [r0, #0]
 23f9c3e:	4b04      	ldr	r3, [pc, #16]	; (23f9c50 <spark_set_random_seed_from_cloud_handler+0x18>)
 23f9c40:	4403      	add	r3, r0
 23f9c42:	681b      	ldr	r3, [r3, #0]
 23f9c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f9c46:	9302      	str	r3, [sp, #8]
 23f9c48:	bd09      	pop	{r0, r3, pc}
 23f9c4a:	0000      	.short	0x0000
 23f9c4c:	1007aac8 	.word	0x1007aac8
 23f9c50:	0000002c 	.word	0x0000002c

023f9c54 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23f9c54:	b509      	push	{r0, r3, lr}
 23f9c56:	4804      	ldr	r0, [pc, #16]	; (23f9c68 <network_connect+0x14>)
 23f9c58:	6800      	ldr	r0, [r0, #0]
 23f9c5a:	4b04      	ldr	r3, [pc, #16]	; (23f9c6c <network_connect+0x18>)
 23f9c5c:	4403      	add	r3, r0
 23f9c5e:	681b      	ldr	r3, [r3, #0]
 23f9c60:	685b      	ldr	r3, [r3, #4]
 23f9c62:	9302      	str	r3, [sp, #8]
 23f9c64:	bd09      	pop	{r0, r3, pc}
 23f9c66:	0000      	.short	0x0000
 23f9c68:	1007aac8 	.word	0x1007aac8
 23f9c6c:	00000028 	.word	0x00000028

023f9c70 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23f9c70:	b509      	push	{r0, r3, lr}
 23f9c72:	4804      	ldr	r0, [pc, #16]	; (23f9c84 <network_connecting+0x14>)
 23f9c74:	6800      	ldr	r0, [r0, #0]
 23f9c76:	4b04      	ldr	r3, [pc, #16]	; (23f9c88 <network_connecting+0x18>)
 23f9c78:	4403      	add	r3, r0
 23f9c7a:	681b      	ldr	r3, [r3, #0]
 23f9c7c:	689b      	ldr	r3, [r3, #8]
 23f9c7e:	9302      	str	r3, [sp, #8]
 23f9c80:	bd09      	pop	{r0, r3, pc}
 23f9c82:	0000      	.short	0x0000
 23f9c84:	1007aac8 	.word	0x1007aac8
 23f9c88:	00000028 	.word	0x00000028

023f9c8c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23f9c8c:	b509      	push	{r0, r3, lr}
 23f9c8e:	4804      	ldr	r0, [pc, #16]	; (23f9ca0 <network_disconnect+0x14>)
 23f9c90:	6800      	ldr	r0, [r0, #0]
 23f9c92:	4b04      	ldr	r3, [pc, #16]	; (23f9ca4 <network_disconnect+0x18>)
 23f9c94:	4403      	add	r3, r0
 23f9c96:	681b      	ldr	r3, [r3, #0]
 23f9c98:	68db      	ldr	r3, [r3, #12]
 23f9c9a:	9302      	str	r3, [sp, #8]
 23f9c9c:	bd09      	pop	{r0, r3, pc}
 23f9c9e:	0000      	.short	0x0000
 23f9ca0:	1007aac8 	.word	0x1007aac8
 23f9ca4:	00000028 	.word	0x00000028

023f9ca8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23f9ca8:	b509      	push	{r0, r3, lr}
 23f9caa:	4804      	ldr	r0, [pc, #16]	; (23f9cbc <network_ready+0x14>)
 23f9cac:	6800      	ldr	r0, [r0, #0]
 23f9cae:	4b04      	ldr	r3, [pc, #16]	; (23f9cc0 <network_ready+0x18>)
 23f9cb0:	4403      	add	r3, r0
 23f9cb2:	681b      	ldr	r3, [r3, #0]
 23f9cb4:	691b      	ldr	r3, [r3, #16]
 23f9cb6:	9302      	str	r3, [sp, #8]
 23f9cb8:	bd09      	pop	{r0, r3, pc}
 23f9cba:	0000      	.short	0x0000
 23f9cbc:	1007aac8 	.word	0x1007aac8
 23f9cc0:	00000028 	.word	0x00000028

023f9cc4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23f9cc4:	b509      	push	{r0, r3, lr}
 23f9cc6:	4804      	ldr	r0, [pc, #16]	; (23f9cd8 <network_on+0x14>)
 23f9cc8:	6800      	ldr	r0, [r0, #0]
 23f9cca:	4b04      	ldr	r3, [pc, #16]	; (23f9cdc <network_on+0x18>)
 23f9ccc:	4403      	add	r3, r0
 23f9cce:	681b      	ldr	r3, [r3, #0]
 23f9cd0:	695b      	ldr	r3, [r3, #20]
 23f9cd2:	9302      	str	r3, [sp, #8]
 23f9cd4:	bd09      	pop	{r0, r3, pc}
 23f9cd6:	0000      	.short	0x0000
 23f9cd8:	1007aac8 	.word	0x1007aac8
 23f9cdc:	00000028 	.word	0x00000028

023f9ce0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23f9ce0:	b509      	push	{r0, r3, lr}
 23f9ce2:	4804      	ldr	r0, [pc, #16]	; (23f9cf4 <network_off+0x14>)
 23f9ce4:	6800      	ldr	r0, [r0, #0]
 23f9ce6:	4b04      	ldr	r3, [pc, #16]	; (23f9cf8 <network_off+0x18>)
 23f9ce8:	4403      	add	r3, r0
 23f9cea:	681b      	ldr	r3, [r3, #0]
 23f9cec:	699b      	ldr	r3, [r3, #24]
 23f9cee:	9302      	str	r3, [sp, #8]
 23f9cf0:	bd09      	pop	{r0, r3, pc}
 23f9cf2:	0000      	.short	0x0000
 23f9cf4:	1007aac8 	.word	0x1007aac8
 23f9cf8:	00000028 	.word	0x00000028

023f9cfc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23f9cfc:	b509      	push	{r0, r3, lr}
 23f9cfe:	4804      	ldr	r0, [pc, #16]	; (23f9d10 <network_listen+0x14>)
 23f9d00:	6800      	ldr	r0, [r0, #0]
 23f9d02:	4b04      	ldr	r3, [pc, #16]	; (23f9d14 <network_listen+0x18>)
 23f9d04:	4403      	add	r3, r0
 23f9d06:	681b      	ldr	r3, [r3, #0]
 23f9d08:	69db      	ldr	r3, [r3, #28]
 23f9d0a:	9302      	str	r3, [sp, #8]
 23f9d0c:	bd09      	pop	{r0, r3, pc}
 23f9d0e:	0000      	.short	0x0000
 23f9d10:	1007aac8 	.word	0x1007aac8
 23f9d14:	00000028 	.word	0x00000028

023f9d18 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23f9d18:	b509      	push	{r0, r3, lr}
 23f9d1a:	4804      	ldr	r0, [pc, #16]	; (23f9d2c <network_listening+0x14>)
 23f9d1c:	6800      	ldr	r0, [r0, #0]
 23f9d1e:	4b04      	ldr	r3, [pc, #16]	; (23f9d30 <network_listening+0x18>)
 23f9d20:	4403      	add	r3, r0
 23f9d22:	681b      	ldr	r3, [r3, #0]
 23f9d24:	6a1b      	ldr	r3, [r3, #32]
 23f9d26:	9302      	str	r3, [sp, #8]
 23f9d28:	bd09      	pop	{r0, r3, pc}
 23f9d2a:	0000      	.short	0x0000
 23f9d2c:	1007aac8 	.word	0x1007aac8
 23f9d30:	00000028 	.word	0x00000028

023f9d34 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
 23f9d34:	b509      	push	{r0, r3, lr}
 23f9d36:	4804      	ldr	r0, [pc, #16]	; (23f9d48 <network_set_credentials+0x14>)
 23f9d38:	6800      	ldr	r0, [r0, #0]
 23f9d3a:	4b04      	ldr	r3, [pc, #16]	; (23f9d4c <network_set_credentials+0x18>)
 23f9d3c:	4403      	add	r3, r0
 23f9d3e:	681b      	ldr	r3, [r3, #0]
 23f9d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f9d42:	9302      	str	r3, [sp, #8]
 23f9d44:	bd09      	pop	{r0, r3, pc}
 23f9d46:	0000      	.short	0x0000
 23f9d48:	1007aac8 	.word	0x1007aac8
 23f9d4c:	00000028 	.word	0x00000028

023f9d50 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23f9d50:	b509      	push	{r0, r3, lr}
 23f9d52:	4804      	ldr	r0, [pc, #16]	; (23f9d64 <network_set_listen_timeout+0x14>)
 23f9d54:	6800      	ldr	r0, [r0, #0]
 23f9d56:	4b04      	ldr	r3, [pc, #16]	; (23f9d68 <network_set_listen_timeout+0x18>)
 23f9d58:	4403      	add	r3, r0
 23f9d5a:	681b      	ldr	r3, [r3, #0]
 23f9d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f9d5e:	9302      	str	r3, [sp, #8]
 23f9d60:	bd09      	pop	{r0, r3, pc}
 23f9d62:	0000      	.short	0x0000
 23f9d64:	1007aac8 	.word	0x1007aac8
 23f9d68:	00000028 	.word	0x00000028

023f9d6c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23f9d6c:	b509      	push	{r0, r3, lr}
 23f9d6e:	4804      	ldr	r0, [pc, #16]	; (23f9d80 <network_get_listen_timeout+0x14>)
 23f9d70:	6800      	ldr	r0, [r0, #0]
 23f9d72:	4b04      	ldr	r3, [pc, #16]	; (23f9d84 <network_get_listen_timeout+0x18>)
 23f9d74:	4403      	add	r3, r0
 23f9d76:	681b      	ldr	r3, [r3, #0]
 23f9d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f9d7a:	9302      	str	r3, [sp, #8]
 23f9d7c:	bd09      	pop	{r0, r3, pc}
 23f9d7e:	0000      	.short	0x0000
 23f9d80:	1007aac8 	.word	0x1007aac8
 23f9d84:	00000028 	.word	0x00000028

023f9d88 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23f9d88:	b509      	push	{r0, r3, lr}
 23f9d8a:	4804      	ldr	r0, [pc, #16]	; (23f9d9c <network_is_on+0x14>)
 23f9d8c:	6800      	ldr	r0, [r0, #0]
 23f9d8e:	4b04      	ldr	r3, [pc, #16]	; (23f9da0 <network_is_on+0x18>)
 23f9d90:	4403      	add	r3, r0
 23f9d92:	681b      	ldr	r3, [r3, #0]
 23f9d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f9d96:	9302      	str	r3, [sp, #8]
 23f9d98:	bd09      	pop	{r0, r3, pc}
 23f9d9a:	0000      	.short	0x0000
 23f9d9c:	1007aac8 	.word	0x1007aac8
 23f9da0:	00000028 	.word	0x00000028

023f9da4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23f9da4:	b509      	push	{r0, r3, lr}
 23f9da6:	4804      	ldr	r0, [pc, #16]	; (23f9db8 <network_is_off+0x14>)
 23f9da8:	6800      	ldr	r0, [r0, #0]
 23f9daa:	4b04      	ldr	r3, [pc, #16]	; (23f9dbc <network_is_off+0x18>)
 23f9dac:	4403      	add	r3, r0
 23f9dae:	681b      	ldr	r3, [r3, #0]
 23f9db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f9db2:	9302      	str	r3, [sp, #8]
 23f9db4:	bd09      	pop	{r0, r3, pc}
 23f9db6:	0000      	.short	0x0000
 23f9db8:	1007aac8 	.word	0x1007aac8
 23f9dbc:	00000028 	.word	0x00000028

023f9dc0 <network_preferred>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_preferred, network_handle_t(network_handle_t, bool, void*))
 23f9dc0:	b509      	push	{r0, r3, lr}
 23f9dc2:	4804      	ldr	r0, [pc, #16]	; (23f9dd4 <network_preferred+0x14>)
 23f9dc4:	6800      	ldr	r0, [r0, #0]
 23f9dc6:	4b04      	ldr	r3, [pc, #16]	; (23f9dd8 <network_preferred+0x18>)
 23f9dc8:	4403      	add	r3, r0
 23f9dca:	681b      	ldr	r3, [r3, #0]
 23f9dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f9dce:	9302      	str	r3, [sp, #8]
 23f9dd0:	bd09      	pop	{r0, r3, pc}
 23f9dd2:	0000      	.short	0x0000
 23f9dd4:	1007aac8 	.word	0x1007aac8
 23f9dd8:	00000028 	.word	0x00000028

023f9ddc <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23f9ddc:	b509      	push	{r0, r3, lr}
 23f9dde:	4804      	ldr	r0, [pc, #16]	; (23f9df0 <network_is_preferred+0x14>)
 23f9de0:	6800      	ldr	r0, [r0, #0]
 23f9de2:	4b04      	ldr	r3, [pc, #16]	; (23f9df4 <network_is_preferred+0x18>)
 23f9de4:	4403      	add	r3, r0
 23f9de6:	681b      	ldr	r3, [r3, #0]
 23f9de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f9dea:	9302      	str	r3, [sp, #8]
 23f9dec:	bd09      	pop	{r0, r3, pc}
 23f9dee:	0000      	.short	0x0000
 23f9df0:	1007aac8 	.word	0x1007aac8
 23f9df4:	00000028 	.word	0x00000028

023f9df8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23f9df8:	b509      	push	{r0, r3, lr}
 23f9dfa:	4804      	ldr	r0, [pc, #16]	; (23f9e0c <malloc+0x14>)
 23f9dfc:	6800      	ldr	r0, [r0, #0]
 23f9dfe:	4b04      	ldr	r3, [pc, #16]	; (23f9e10 <malloc+0x18>)
 23f9e00:	4403      	add	r3, r0
 23f9e02:	681b      	ldr	r3, [r3, #0]
 23f9e04:	681b      	ldr	r3, [r3, #0]
 23f9e06:	9302      	str	r3, [sp, #8]
 23f9e08:	bd09      	pop	{r0, r3, pc}
 23f9e0a:	0000      	.short	0x0000
 23f9e0c:	1007aac8 	.word	0x1007aac8
 23f9e10:	00000004 	.word	0x00000004

023f9e14 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23f9e14:	b509      	push	{r0, r3, lr}
 23f9e16:	4804      	ldr	r0, [pc, #16]	; (23f9e28 <free+0x14>)
 23f9e18:	6800      	ldr	r0, [r0, #0]
 23f9e1a:	4b04      	ldr	r3, [pc, #16]	; (23f9e2c <free+0x18>)
 23f9e1c:	4403      	add	r3, r0
 23f9e1e:	681b      	ldr	r3, [r3, #0]
 23f9e20:	685b      	ldr	r3, [r3, #4]
 23f9e22:	9302      	str	r3, [sp, #8]
 23f9e24:	bd09      	pop	{r0, r3, pc}
 23f9e26:	0000      	.short	0x0000
 23f9e28:	1007aac8 	.word	0x1007aac8
 23f9e2c:	00000004 	.word	0x00000004

023f9e30 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23f9e30:	b509      	push	{r0, r3, lr}
 23f9e32:	4804      	ldr	r0, [pc, #16]	; (23f9e44 <realloc+0x14>)
 23f9e34:	6800      	ldr	r0, [r0, #0]
 23f9e36:	4b04      	ldr	r3, [pc, #16]	; (23f9e48 <realloc+0x18>)
 23f9e38:	4403      	add	r3, r0
 23f9e3a:	681b      	ldr	r3, [r3, #0]
 23f9e3c:	689b      	ldr	r3, [r3, #8]
 23f9e3e:	9302      	str	r3, [sp, #8]
 23f9e40:	bd09      	pop	{r0, r3, pc}
 23f9e42:	0000      	.short	0x0000
 23f9e44:	1007aac8 	.word	0x1007aac8
 23f9e48:	00000004 	.word	0x00000004

023f9e4c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 23f9e4c:	b509      	push	{r0, r3, lr}
 23f9e4e:	4804      	ldr	r0, [pc, #16]	; (23f9e60 <siprintf+0x14>)
 23f9e50:	6800      	ldr	r0, [r0, #0]
 23f9e52:	4b04      	ldr	r3, [pc, #16]	; (23f9e64 <siprintf+0x18>)
 23f9e54:	4403      	add	r3, r0
 23f9e56:	681b      	ldr	r3, [r3, #0]
 23f9e58:	691b      	ldr	r3, [r3, #16]
 23f9e5a:	9302      	str	r3, [sp, #8]
 23f9e5c:	bd09      	pop	{r0, r3, pc}
 23f9e5e:	0000      	.short	0x0000
 23f9e60:	1007aac8 	.word	0x1007aac8
 23f9e64:	00000004 	.word	0x00000004

023f9e68 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 23f9e68:	b509      	push	{r0, r3, lr}
 23f9e6a:	4804      	ldr	r0, [pc, #16]	; (23f9e7c <snprintf+0x14>)
 23f9e6c:	6800      	ldr	r0, [r0, #0]
 23f9e6e:	4b04      	ldr	r3, [pc, #16]	; (23f9e80 <snprintf+0x18>)
 23f9e70:	4403      	add	r3, r0
 23f9e72:	681b      	ldr	r3, [r3, #0]
 23f9e74:	69db      	ldr	r3, [r3, #28]
 23f9e76:	9302      	str	r3, [sp, #8]
 23f9e78:	bd09      	pop	{r0, r3, pc}
 23f9e7a:	0000      	.short	0x0000
 23f9e7c:	1007aac8 	.word	0x1007aac8
 23f9e80:	00000004 	.word	0x00000004

023f9e84 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23f9e84:	b509      	push	{r0, r3, lr}
 23f9e86:	4804      	ldr	r0, [pc, #16]	; (23f9e98 <vsnprintf+0x14>)
 23f9e88:	6800      	ldr	r0, [r0, #0]
 23f9e8a:	4b04      	ldr	r3, [pc, #16]	; (23f9e9c <vsnprintf+0x18>)
 23f9e8c:	4403      	add	r3, r0
 23f9e8e:	681b      	ldr	r3, [r3, #0]
 23f9e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f9e92:	9302      	str	r3, [sp, #8]
 23f9e94:	bd09      	pop	{r0, r3, pc}
 23f9e96:	0000      	.short	0x0000
 23f9e98:	1007aac8 	.word	0x1007aac8
 23f9e9c:	00000004 	.word	0x00000004

023f9ea0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23f9ea0:	b509      	push	{r0, r3, lr}
 23f9ea2:	4804      	ldr	r0, [pc, #16]	; (23f9eb4 <abort+0x14>)
 23f9ea4:	6800      	ldr	r0, [r0, #0]
 23f9ea6:	4b04      	ldr	r3, [pc, #16]	; (23f9eb8 <abort+0x18>)
 23f9ea8:	4403      	add	r3, r0
 23f9eaa:	681b      	ldr	r3, [r3, #0]
 23f9eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f9eae:	9302      	str	r3, [sp, #8]
 23f9eb0:	bd09      	pop	{r0, r3, pc}
 23f9eb2:	0000      	.short	0x0000
 23f9eb4:	1007aac8 	.word	0x1007aac8
 23f9eb8:	00000004 	.word	0x00000004

023f9ebc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23f9ebc:	b509      	push	{r0, r3, lr}
 23f9ebe:	4804      	ldr	r0, [pc, #16]	; (23f9ed0 <_malloc_r+0x14>)
 23f9ec0:	6800      	ldr	r0, [r0, #0]
 23f9ec2:	4b04      	ldr	r3, [pc, #16]	; (23f9ed4 <_malloc_r+0x18>)
 23f9ec4:	4403      	add	r3, r0
 23f9ec6:	681b      	ldr	r3, [r3, #0]
 23f9ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f9eca:	9302      	str	r3, [sp, #8]
 23f9ecc:	bd09      	pop	{r0, r3, pc}
 23f9ece:	0000      	.short	0x0000
 23f9ed0:	1007aac8 	.word	0x1007aac8
 23f9ed4:	00000004 	.word	0x00000004

023f9ed8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23f9ed8:	b509      	push	{r0, r3, lr}
 23f9eda:	4804      	ldr	r0, [pc, #16]	; (23f9eec <__errno+0x14>)
 23f9edc:	6800      	ldr	r0, [r0, #0]
 23f9ede:	4b04      	ldr	r3, [pc, #16]	; (23f9ef0 <__errno+0x18>)
 23f9ee0:	4403      	add	r3, r0
 23f9ee2:	681b      	ldr	r3, [r3, #0]
 23f9ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f9ee6:	9302      	str	r3, [sp, #8]
 23f9ee8:	bd09      	pop	{r0, r3, pc}
 23f9eea:	0000      	.short	0x0000
 23f9eec:	1007aac8 	.word	0x1007aac8
 23f9ef0:	00000004 	.word	0x00000004

023f9ef4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23f9ef4:	b509      	push	{r0, r3, lr}
 23f9ef6:	4804      	ldr	r0, [pc, #16]	; (23f9f08 <__assert_func+0x14>)
 23f9ef8:	6800      	ldr	r0, [r0, #0]
 23f9efa:	4b04      	ldr	r3, [pc, #16]	; (23f9f0c <__assert_func+0x18>)
 23f9efc:	4403      	add	r3, r0
 23f9efe:	681b      	ldr	r3, [r3, #0]
 23f9f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f9f02:	9302      	str	r3, [sp, #8]
 23f9f04:	bd09      	pop	{r0, r3, pc}
 23f9f06:	0000      	.short	0x0000
 23f9f08:	1007aac8 	.word	0x1007aac8
 23f9f0c:	00000004 	.word	0x00000004

023f9f10 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23f9f10:	b509      	push	{r0, r3, lr}
 23f9f12:	4804      	ldr	r0, [pc, #16]	; (23f9f24 <newlib_impure_ptr_callback+0x14>)
 23f9f14:	6800      	ldr	r0, [r0, #0]
 23f9f16:	4b04      	ldr	r3, [pc, #16]	; (23f9f28 <newlib_impure_ptr_callback+0x18>)
 23f9f18:	4403      	add	r3, r0
 23f9f1a:	681b      	ldr	r3, [r3, #0]
 23f9f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f9f1e:	9302      	str	r3, [sp, #8]
 23f9f20:	bd09      	pop	{r0, r3, pc}
 23f9f22:	0000      	.short	0x0000
 23f9f24:	1007aac8 	.word	0x1007aac8
 23f9f28:	00000004 	.word	0x00000004

023f9f2c <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 23f9f2c:	b509      	push	{r0, r3, lr}
 23f9f2e:	4804      	ldr	r0, [pc, #16]	; (23f9f40 <strftime+0x14>)
 23f9f30:	6800      	ldr	r0, [r0, #0]
 23f9f32:	4b04      	ldr	r3, [pc, #16]	; (23f9f44 <strftime+0x18>)
 23f9f34:	4403      	add	r3, r0
 23f9f36:	681b      	ldr	r3, [r3, #0]
 23f9f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f9f3a:	9302      	str	r3, [sp, #8]
 23f9f3c:	bd09      	pop	{r0, r3, pc}
 23f9f3e:	0000      	.short	0x0000
 23f9f40:	1007aac8 	.word	0x1007aac8
 23f9f44:	00000004 	.word	0x00000004

023f9f48 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
 23f9f48:	b509      	push	{r0, r3, lr}
 23f9f4a:	4804      	ldr	r0, [pc, #16]	; (23f9f5c <localtime_r+0x14>)
 23f9f4c:	6800      	ldr	r0, [r0, #0]
 23f9f4e:	4b04      	ldr	r3, [pc, #16]	; (23f9f60 <localtime_r+0x18>)
 23f9f50:	4403      	add	r3, r0
 23f9f52:	681b      	ldr	r3, [r3, #0]
 23f9f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f9f56:	9302      	str	r3, [sp, #8]
 23f9f58:	bd09      	pop	{r0, r3, pc}
 23f9f5a:	0000      	.short	0x0000
 23f9f5c:	1007aac8 	.word	0x1007aac8
 23f9f60:	00000004 	.word	0x00000004

023f9f64 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23f9f64:	2100      	movs	r1, #0
 23f9f66:	f7ff bdb1 	b.w	23f9acc <system_delay_ms>

023f9f6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23f9f6a:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23f9f6c:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23f9f6e:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23f9f70:	b17c      	cbz	r4, 23f9f92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23f9f72:	6863      	ldr	r3, [r4, #4]
 23f9f74:	3b01      	subs	r3, #1
 23f9f76:	6063      	str	r3, [r4, #4]
 23f9f78:	b95b      	cbnz	r3, 23f9f92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23f9f7a:	6823      	ldr	r3, [r4, #0]
 23f9f7c:	4620      	mov	r0, r4
 23f9f7e:	689b      	ldr	r3, [r3, #8]
 23f9f80:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f9f82:	68a3      	ldr	r3, [r4, #8]
 23f9f84:	3b01      	subs	r3, #1
 23f9f86:	60a3      	str	r3, [r4, #8]
 23f9f88:	b91b      	cbnz	r3, 23f9f92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23f9f8a:	6823      	ldr	r3, [r4, #0]
 23f9f8c:	4620      	mov	r0, r4
 23f9f8e:	68db      	ldr	r3, [r3, #12]
 23f9f90:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23f9f92:	4628      	mov	r0, r5
 23f9f94:	bd38      	pop	{r3, r4, r5, pc}

023f9f96 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23f9f96:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23f9f98:	6843      	ldr	r3, [r0, #4]
    {
 23f9f9a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23f9f9c:	3b01      	subs	r3, #1
 23f9f9e:	6043      	str	r3, [r0, #4]
 23f9fa0:	b963      	cbnz	r3, 23f9fbc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23f9fa2:	6803      	ldr	r3, [r0, #0]
 23f9fa4:	689b      	ldr	r3, [r3, #8]
 23f9fa6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f9fa8:	68a3      	ldr	r3, [r4, #8]
 23f9faa:	3b01      	subs	r3, #1
 23f9fac:	60a3      	str	r3, [r4, #8]
 23f9fae:	b92b      	cbnz	r3, 23f9fbc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23f9fb0:	6823      	ldr	r3, [r4, #0]
 23f9fb2:	4620      	mov	r0, r4
    }
 23f9fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23f9fb8:	68db      	ldr	r3, [r3, #12]
 23f9fba:	4718      	bx	r3
    }
 23f9fbc:	bd10      	pop	{r4, pc}

023f9fbe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f9fbe:	b570      	push	{r4, r5, r6, lr}
 23f9fc0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f9fc2:	e9d0 5300 	ldrd	r5, r3, [r0]
 23f9fc6:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23f9fca:	42ae      	cmp	r6, r5
 23f9fcc:	d004      	beq.n	23f9fd8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23f9fce:	4628      	mov	r0, r5
 23f9fd0:	f001 fc70 	bl	23fb8b4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23f9fd4:	3510      	adds	r5, #16
 23f9fd6:	e7f8      	b.n	23f9fca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23f9fd8:	6820      	ldr	r0, [r4, #0]
 23f9fda:	f7ff ff1b 	bl	23f9e14 <free>
    AllocatorT::free(data_);
}
 23f9fde:	4620      	mov	r0, r4
 23f9fe0:	bd70      	pop	{r4, r5, r6, pc}
	...

023f9fe4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23f9fe4:	2300      	movs	r3, #0
 23f9fe6:	4802      	ldr	r0, [pc, #8]	; (23f9ff0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23f9fe8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23f9fea:	f7ff b9d3 	b.w	23f9394 <os_mutex_recursive_create>
 23f9fee:	bf00      	nop
 23f9ff0:	1007ae04 	.word	0x1007ae04

023f9ff4 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 23f9ff4:	b510      	push	{r4, lr}
 23f9ff6:	b088      	sub	sp, #32
 23f9ff8:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 23f9ffa:	4668      	mov	r0, sp
 23f9ffc:	f001 fca5 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 23fa000:	4669      	mov	r1, sp
 23fa002:	a804      	add	r0, sp, #16
 23fa004:	f001 fced 	bl	23fb9e2 <_ZN6StringC1ERKS_>
 23fa008:	a804      	add	r0, sp, #16
 23fa00a:	47a0      	blx	r4
 23fa00c:	4604      	mov	r4, r0
 23fa00e:	a804      	add	r0, sp, #16
 23fa010:	f001 fc50 	bl	23fb8b4 <_ZN6StringD1Ev>
    String p(param);
 23fa014:	4668      	mov	r0, sp
 23fa016:	f001 fc4d 	bl	23fb8b4 <_ZN6StringD1Ev>
}
 23fa01a:	4620      	mov	r0, r4
 23fa01c:	b008      	add	sp, #32
 23fa01e:	bd10      	pop	{r4, pc}

023fa020 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 23fa020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 23fa022:	2300      	movs	r3, #0
         size = sizeof(*this);
 23fa024:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 23fa026:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 23fa02a:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 23fa02c:	4669      	mov	r1, sp
 23fa02e:	461a      	mov	r2, r3
 23fa030:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 23fa032:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 23fa036:	f8ad 4000 	strh.w	r4, [sp]
 23fa03a:	f7ff fdb7 	bl	23f9bac <spark_function>
}
 23fa03e:	b004      	add	sp, #16
 23fa040:	bd10      	pop	{r4, pc}

023fa042 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fa042:	2200      	movs	r2, #0
 23fa044:	6840      	ldr	r0, [r0, #4]
 23fa046:	4611      	mov	r1, r2
 23fa048:	f7ff be66 	b.w	23f9d18 <network_listening>

023fa04c <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fa04c:	2200      	movs	r2, #0
 23fa04e:	6840      	ldr	r0, [r0, #4]
 23fa050:	4611      	mov	r1, r2
 23fa052:	f7ff be8b 	b.w	23f9d6c <network_get_listen_timeout>

023fa056 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fa056:	2200      	movs	r2, #0
 23fa058:	6840      	ldr	r0, [r0, #4]
 23fa05a:	f7ff be79 	b.w	23f9d50 <network_set_listen_timeout>

023fa05e <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fa05e:	2200      	movs	r2, #0
 23fa060:	6840      	ldr	r0, [r0, #4]
 23fa062:	f081 0101 	eor.w	r1, r1, #1
 23fa066:	f7ff be49 	b.w	23f9cfc <network_listen>

023fa06a <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fa06a:	2300      	movs	r3, #0
 23fa06c:	6840      	ldr	r0, [r0, #4]
 23fa06e:	461a      	mov	r2, r3
 23fa070:	4619      	mov	r1, r3
 23fa072:	f7ff be35 	b.w	23f9ce0 <network_off>

023fa076 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fa076:	2300      	movs	r3, #0
 23fa078:	6840      	ldr	r0, [r0, #4]
 23fa07a:	461a      	mov	r2, r3
 23fa07c:	4619      	mov	r1, r3
 23fa07e:	f7ff be21 	b.w	23f9cc4 <network_on>

023fa082 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fa082:	2200      	movs	r2, #0
 23fa084:	6840      	ldr	r0, [r0, #4]
 23fa086:	4611      	mov	r1, r2
 23fa088:	f7ff be0e 	b.w	23f9ca8 <network_ready>

023fa08c <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fa08c:	2200      	movs	r2, #0
 23fa08e:	6840      	ldr	r0, [r0, #4]
 23fa090:	4611      	mov	r1, r2
 23fa092:	f7ff bded 	b.w	23f9c70 <network_connecting>

023fa096 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fa096:	2200      	movs	r2, #0
 23fa098:	2102      	movs	r1, #2
 23fa09a:	6840      	ldr	r0, [r0, #4]
 23fa09c:	f7ff bdf6 	b.w	23f9c8c <network_disconnect>

023fa0a0 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fa0a0:	2300      	movs	r3, #0
 23fa0a2:	6840      	ldr	r0, [r0, #4]
 23fa0a4:	461a      	mov	r2, r3
 23fa0a6:	f7ff bdd5 	b.w	23f9c54 <network_connect>
	...

023fa0ac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fa0ac:	2203      	movs	r2, #3
 23fa0ae:	4b02      	ldr	r3, [pc, #8]	; (23fa0b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fa0b0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fa0b2:	4a02      	ldr	r2, [pc, #8]	; (23fa0bc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fa0b4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fa0b6:	4770      	bx	lr
 23fa0b8:	1007ae08 	.word	0x1007ae08
 23fa0bc:	023ff7d0 	.word	0x023ff7d0

023fa0c0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fa0c0:	4770      	bx	lr

023fa0c2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fa0c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fa0c4:	4606      	mov	r6, r0
 23fa0c6:	4615      	mov	r5, r2
 23fa0c8:	460c      	mov	r4, r1
 23fa0ca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fa0cc:	42bc      	cmp	r4, r7
 23fa0ce:	d006      	beq.n	23fa0de <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fa0d0:	6833      	ldr	r3, [r6, #0]
 23fa0d2:	4630      	mov	r0, r6
 23fa0d4:	689b      	ldr	r3, [r3, #8]
 23fa0d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fa0da:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fa0dc:	e7f6      	b.n	23fa0cc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fa0de:	4628      	mov	r0, r5
 23fa0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fa0e2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fa0e2:	2200      	movs	r2, #0
 23fa0e4:	7c00      	ldrb	r0, [r0, #16]
 23fa0e6:	f7ff ba35 	b.w	23f9554 <hal_i2c_write>

023fa0ea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fa0ea:	2100      	movs	r1, #0
 23fa0ec:	7c00      	ldrb	r0, [r0, #16]
 23fa0ee:	f7ff ba3f 	b.w	23f9570 <hal_i2c_available>

023fa0f2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fa0f2:	2100      	movs	r1, #0
 23fa0f4:	7c00      	ldrb	r0, [r0, #16]
 23fa0f6:	f7ff ba49 	b.w	23f958c <hal_i2c_read>

023fa0fa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fa0fa:	2100      	movs	r1, #0
 23fa0fc:	7c00      	ldrb	r0, [r0, #16]
 23fa0fe:	f7ff ba53 	b.w	23f95a8 <hal_i2c_peek>

023fa102 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fa102:	2100      	movs	r1, #0
 23fa104:	7c00      	ldrb	r0, [r0, #16]
 23fa106:	f7ff ba5d 	b.w	23f95c4 <hal_i2c_flush>

023fa10a <_ZN7TwoWireD0Ev>:
 23fa10a:	b510      	push	{r4, lr}
 23fa10c:	4604      	mov	r4, r0
 23fa10e:	2114      	movs	r1, #20
 23fa110:	f7fc fc03 	bl	23f691a <_ZdlPvj>
 23fa114:	4620      	mov	r0, r4
 23fa116:	bd10      	pop	{r4, pc}

023fa118 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fa118:	b538      	push	{r3, r4, r5, lr}
 23fa11a:	4604      	mov	r4, r0
 23fa11c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fa11e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fa122:	2200      	movs	r2, #0
 23fa124:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fa128:	4b09      	ldr	r3, [pc, #36]	; (23fa150 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fa12a:	4608      	mov	r0, r1
  _i2c = i2c;
 23fa12c:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fa12e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fa130:	4629      	mov	r1, r5
 23fa132:	f7ff fa63 	bl	23f95fc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fa136:	30bf      	adds	r0, #191	; 0xbf
 23fa138:	d108      	bne.n	23fa14c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fa13a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fa13c:	07db      	lsls	r3, r3, #31
 23fa13e:	d505      	bpl.n	23fa14c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fa140:	6868      	ldr	r0, [r5, #4]
 23fa142:	f7ff fe67 	bl	23f9e14 <free>
    free(conf.tx_buffer);
 23fa146:	68e8      	ldr	r0, [r5, #12]
 23fa148:	f7ff fe64 	bl	23f9e14 <free>
}
 23fa14c:	4620      	mov	r0, r4
 23fa14e:	bd38      	pop	{r3, r4, r5, pc}
 23fa150:	023ff814 	.word	0x023ff814

023fa154 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fa154:	4770      	bx	lr

023fa156 <_ZN9IPAddressD0Ev>:
 23fa156:	b510      	push	{r4, lr}
 23fa158:	4604      	mov	r4, r0
 23fa15a:	2118      	movs	r1, #24
 23fa15c:	f7fc fbdd 	bl	23f691a <_ZdlPvj>
 23fa160:	4620      	mov	r0, r4
 23fa162:	bd10      	pop	{r4, pc}

023fa164 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fa164:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fa166:	7d03      	ldrb	r3, [r0, #20]
{
 23fa168:	460e      	mov	r6, r1
	if (address.v==6) {
 23fa16a:	2b06      	cmp	r3, #6
 23fa16c:	f04f 0400 	mov.w	r4, #0
{
 23fa170:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fa172:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fa176:	d012      	beq.n	23fa19e <_ZNK9IPAddress7printToER5Print+0x3a>
 23fa178:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fa17c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fa180:	220a      	movs	r2, #10
 23fa182:	4630      	mov	r0, r6
 23fa184:	f001 fb07 	bl	23fb796 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fa188:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fa18a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fa18c:	d019      	beq.n	23fa1c2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fa18e:	2c00      	cmp	r4, #0
 23fa190:	d0f4      	beq.n	23fa17c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fa192:	212e      	movs	r1, #46	; 0x2e
 23fa194:	4630      	mov	r0, r6
 23fa196:	f001 fafb 	bl	23fb790 <_ZN5Print5printEc>
 23fa19a:	4404      	add	r4, r0
 23fa19c:	e7ee      	b.n	23fa17c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fa19e:	232f      	movs	r3, #47	; 0x2f
 23fa1a0:	466a      	mov	r2, sp
 23fa1a2:	4639      	mov	r1, r7
 23fa1a4:	200a      	movs	r0, #10
		buf[0] = 0;
 23fa1a6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fa1aa:	f7ff fa43 	bl	23f9634 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fa1ae:	4668      	mov	r0, sp
 23fa1b0:	f7fc fb70 	bl	23f6894 <strlen>
 23fa1b4:	6833      	ldr	r3, [r6, #0]
 23fa1b6:	4602      	mov	r2, r0
 23fa1b8:	4669      	mov	r1, sp
 23fa1ba:	4630      	mov	r0, r6
 23fa1bc:	68db      	ldr	r3, [r3, #12]
 23fa1be:	4798      	blx	r3
 23fa1c0:	4604      	mov	r4, r0
    }
    return n;
}
 23fa1c2:	4620      	mov	r0, r4
 23fa1c4:	b00d      	add	sp, #52	; 0x34
 23fa1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fa1c8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fa1c8:	b510      	push	{r4, lr}
 23fa1ca:	4604      	mov	r4, r0
 23fa1cc:	4b04      	ldr	r3, [pc, #16]	; (23fa1e0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fa1ce:	2211      	movs	r2, #17
 23fa1d0:	2100      	movs	r1, #0
 23fa1d2:	f840 3b04 	str.w	r3, [r0], #4
 23fa1d6:	f003 f81e 	bl	23fd216 <memset>
}
 23fa1da:	4620      	mov	r0, r4
 23fa1dc:	bd10      	pop	{r4, pc}
 23fa1de:	bf00      	nop
 23fa1e0:	023ff83c 	.word	0x023ff83c

023fa1e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fa1e4:	4603      	mov	r3, r0
 23fa1e6:	4a07      	ldr	r2, [pc, #28]	; (23fa204 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fa1e8:	b510      	push	{r4, lr}
 23fa1ea:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fa1ee:	f101 0210 	add.w	r2, r1, #16
 23fa1f2:	f851 4b04 	ldr.w	r4, [r1], #4
 23fa1f6:	4291      	cmp	r1, r2
 23fa1f8:	f843 4b04 	str.w	r4, [r3], #4
 23fa1fc:	d1f9      	bne.n	23fa1f2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fa1fe:	780a      	ldrb	r2, [r1, #0]
 23fa200:	701a      	strb	r2, [r3, #0]
}
 23fa202:	bd10      	pop	{r4, pc}
 23fa204:	023ff83c 	.word	0x023ff83c

023fa208 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
 23fa208:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
 23fa20a:	2b04      	cmp	r3, #4
 23fa20c:	d104      	bne.n	23fa218 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
 23fa20e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23fa210:	3800      	subs	r0, #0
 23fa212:	bf18      	it	ne
 23fa214:	2001      	movne	r0, #1
 23fa216:	4770      	bx	lr
    } else if (version() == 6) {
 23fa218:	2b06      	cmp	r3, #6
 23fa21a:	d107      	bne.n	23fa22c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23fa21c:	6843      	ldr	r3, [r0, #4]
 23fa21e:	b93b      	cbnz	r3, 23fa230 <_ZNK9IPAddresscvbEv+0x28>
 23fa220:	6883      	ldr	r3, [r0, #8]
 23fa222:	b92b      	cbnz	r3, 23fa230 <_ZNK9IPAddresscvbEv+0x28>
 23fa224:	68c3      	ldr	r3, [r0, #12]
 23fa226:	b91b      	cbnz	r3, 23fa230 <_ZNK9IPAddresscvbEv+0x28>
 23fa228:	6900      	ldr	r0, [r0, #16]
 23fa22a:	e7f1      	b.n	23fa210 <_ZNK9IPAddresscvbEv+0x8>
        return false;
 23fa22c:	2000      	movs	r0, #0
 23fa22e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23fa230:	2001      	movs	r0, #1
}
 23fa232:	4770      	bx	lr

023fa234 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fa234:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fa236:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fa23a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fa23e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fa242:	2304      	movs	r3, #4
 23fa244:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fa248:	6041      	str	r1, [r0, #4]
 23fa24a:	7503      	strb	r3, [r0, #20]
}
 23fa24c:	bd10      	pop	{r4, pc}
	...

023fa250 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fa250:	b507      	push	{r0, r1, r2, lr}
 23fa252:	4b06      	ldr	r3, [pc, #24]	; (23fa26c <_ZN9IPAddressC1EPKh+0x1c>)
 23fa254:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fa256:	78cb      	ldrb	r3, [r1, #3]
 23fa258:	9300      	str	r3, [sp, #0]
 23fa25a:	788b      	ldrb	r3, [r1, #2]
 23fa25c:	784a      	ldrb	r2, [r1, #1]
 23fa25e:	7809      	ldrb	r1, [r1, #0]
 23fa260:	f7ff ffe8 	bl	23fa234 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fa264:	b003      	add	sp, #12
 23fa266:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa26a:	bf00      	nop
 23fa26c:	023ff83c 	.word	0x023ff83c

023fa270 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fa270:	2201      	movs	r2, #1
 23fa272:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fa276:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fa27a:	4618      	mov	r0, r3
 23fa27c:	2901      	cmp	r1, #1
 23fa27e:	d108      	bne.n	23fa292 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fa280:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fa284:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fa288:	3a01      	subs	r2, #1
 23fa28a:	f103 0310 	add.w	r3, r3, #16
 23fa28e:	d1f2      	bne.n	23fa276 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fa290:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fa292:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fa294:	bf04      	itt	eq
 23fa296:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fa29a:	1852      	addeq	r2, r2, r1
 23fa29c:	e7f4      	b.n	23fa288 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fa29e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fa29e:	b40e      	push	{r1, r2, r3}
 23fa2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fa2a2:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa2a4:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fa2a6:	af00      	add	r7, sp, #0
 23fa2a8:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fa2ac:	f855 2b04 	ldr.w	r2, [r5], #4
 23fa2b0:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa2b2:	462b      	mov	r3, r5
 23fa2b4:	1878      	adds	r0, r7, r1
 23fa2b6:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fa2b8:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa2ba:	f7ff fde3 	bl	23f9e84 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fa2be:	280f      	cmp	r0, #15
 23fa2c0:	687a      	ldr	r2, [r7, #4]
 23fa2c2:	d91a      	bls.n	23fa2fa <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fa2c4:	f100 0308 	add.w	r3, r0, #8
 23fa2c8:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fa2cc:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fa2ce:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa2d2:	1c41      	adds	r1, r0, #1
 23fa2d4:	462b      	mov	r3, r5
 23fa2d6:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fa2d8:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa2da:	f7ff fdd3 	bl	23f9e84 <vsnprintf>
        if (n > 0) {
 23fa2de:	1e02      	subs	r2, r0, #0
 23fa2e0:	dd04      	ble.n	23fa2ec <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fa2e2:	6823      	ldr	r3, [r4, #0]
 23fa2e4:	4669      	mov	r1, sp
 23fa2e6:	4620      	mov	r0, r4
 23fa2e8:	689b      	ldr	r3, [r3, #8]
 23fa2ea:	4798      	blx	r3
 23fa2ec:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fa2ee:	3720      	adds	r7, #32
 23fa2f0:	46bd      	mov	sp, r7
 23fa2f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fa2f6:	b003      	add	sp, #12
 23fa2f8:	4770      	bx	lr
    } else if (n > 0) {
 23fa2fa:	2800      	cmp	r0, #0
 23fa2fc:	d0f7      	beq.n	23fa2ee <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fa2fe:	6823      	ldr	r3, [r4, #0]
 23fa300:	4602      	mov	r2, r0
 23fa302:	689b      	ldr	r3, [r3, #8]
 23fa304:	4620      	mov	r0, r4
 23fa306:	f107 0110 	add.w	r1, r7, #16
 23fa30a:	4798      	blx	r3
}
 23fa30c:	e7ef      	b.n	23fa2ee <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fa30e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fa30e:	b538      	push	{r3, r4, r5, lr}
 23fa310:	680b      	ldr	r3, [r1, #0]
 23fa312:	4604      	mov	r4, r0
 23fa314:	6003      	str	r3, [r0, #0]
 23fa316:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fa318:	6843      	ldr	r3, [r0, #4]
 23fa31a:	429d      	cmp	r5, r3
 23fa31c:	d008      	beq.n	23fa330 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fa31e:	b115      	cbz	r5, 23fa326 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fa320:	686b      	ldr	r3, [r5, #4]
 23fa322:	3301      	adds	r3, #1
 23fa324:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fa326:	6860      	ldr	r0, [r4, #4]
 23fa328:	b108      	cbz	r0, 23fa32e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fa32a:	f7ff fe34 	bl	23f9f96 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fa32e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fa330:	bd38      	pop	{r3, r4, r5, pc}

023fa332 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fa332:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fa334:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fa336:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fa33a:	2201      	movs	r2, #1
 23fa33c:	689b      	ldr	r3, [r3, #8]
 23fa33e:	f10d 0107 	add.w	r1, sp, #7
 23fa342:	4798      	blx	r3
}
 23fa344:	b003      	add	sp, #12
 23fa346:	f85d fb04 	ldr.w	pc, [sp], #4

023fa34a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fa34a:	460b      	mov	r3, r1
 23fa34c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fa34e:	2200      	movs	r2, #0
 23fa350:	b510      	push	{r4, lr}
 23fa352:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fa354:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fa358:	6083      	str	r3, [r0, #8]
    if (t) {
 23fa35a:	b90b      	cbnz	r3, 23fa360 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fa35c:	4620      	mov	r0, r4
 23fa35e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fa360:	f7ff ffd5 	bl	23fa30e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fa364:	e7fa      	b.n	23fa35c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fa366 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fa366:	6883      	ldr	r3, [r0, #8]
 23fa368:	b1eb      	cbz	r3, 23fa3a6 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fa36a:	781a      	ldrb	r2, [r3, #0]
 23fa36c:	2a03      	cmp	r2, #3
 23fa36e:	d81a      	bhi.n	23fa3a6 <_ZNK5spark9JSONValue4typeEv+0x40>
 23fa370:	e8df f002 	tbb	[pc, r2]
 23fa374:	1b021704 	.word	0x1b021704
 23fa378:	2005      	movs	r0, #5
 23fa37a:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fa37c:	6802      	ldr	r2, [r0, #0]
 23fa37e:	685b      	ldr	r3, [r3, #4]
 23fa380:	6852      	ldr	r2, [r2, #4]
 23fa382:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fa384:	282d      	cmp	r0, #45	; 0x2d
 23fa386:	d012      	beq.n	23fa3ae <_ZNK5spark9JSONValue4typeEv+0x48>
 23fa388:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fa38c:	2b09      	cmp	r3, #9
 23fa38e:	d90e      	bls.n	23fa3ae <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fa390:	2874      	cmp	r0, #116	; 0x74
 23fa392:	d00e      	beq.n	23fa3b2 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fa394:	2866      	cmp	r0, #102	; 0x66
 23fa396:	d00c      	beq.n	23fa3b2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fa398:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fa39c:	4258      	negs	r0, r3
 23fa39e:	4158      	adcs	r0, r3
 23fa3a0:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fa3a2:	2006      	movs	r0, #6
 23fa3a4:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fa3a6:	2000      	movs	r0, #0
 23fa3a8:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fa3aa:	2004      	movs	r0, #4
 23fa3ac:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fa3ae:	2003      	movs	r0, #3
 23fa3b0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fa3b2:	2002      	movs	r0, #2
}
 23fa3b4:	4770      	bx	lr

023fa3b6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fa3b6:	b510      	push	{r4, lr}
 23fa3b8:	4604      	mov	r4, r0
    switch (type()) {
 23fa3ba:	f7ff ffd4 	bl	23fa366 <_ZNK5spark9JSONValue4typeEv>
 23fa3be:	2802      	cmp	r0, #2
 23fa3c0:	d00e      	beq.n	23fa3e0 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fa3c2:	1ec3      	subs	r3, r0, #3
 23fa3c4:	b2db      	uxtb	r3, r3
 23fa3c6:	2b01      	cmp	r3, #1
 23fa3c8:	d814      	bhi.n	23fa3f4 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fa3ca:	6822      	ldr	r2, [r4, #0]
 23fa3cc:	68a3      	ldr	r3, [r4, #8]
 23fa3ce:	6850      	ldr	r0, [r2, #4]
 23fa3d0:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fa3d2:	220a      	movs	r2, #10
}
 23fa3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fa3d8:	2100      	movs	r1, #0
 23fa3da:	4418      	add	r0, r3
 23fa3dc:	f003 be58 	b.w	23fe090 <strtol>
        const char* const s = d_->json + t_->start;
 23fa3e0:	6822      	ldr	r2, [r4, #0]
 23fa3e2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fa3e4:	6852      	ldr	r2, [r2, #4]
 23fa3e6:	685b      	ldr	r3, [r3, #4]
 23fa3e8:	5cd0      	ldrb	r0, [r2, r3]
 23fa3ea:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fa3ee:	4258      	negs	r0, r3
 23fa3f0:	4158      	adcs	r0, r3
}
 23fa3f2:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fa3f4:	2000      	movs	r0, #0
 23fa3f6:	e7fc      	b.n	23fa3f2 <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fa3f8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fa3f8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fa3fa:	2300      	movs	r3, #0
 23fa3fc:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fa3fe:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fa402:	480e      	ldr	r0, [pc, #56]	; (23fa43c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fa404:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fa408:	b1a9      	cbz	r1, 23fa436 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fa40a:	780b      	ldrb	r3, [r1, #0]
 23fa40c:	2b03      	cmp	r3, #3
 23fa40e:	d006      	beq.n	23fa41e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fa410:	b98b      	cbnz	r3, 23fa436 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fa412:	6813      	ldr	r3, [r2, #0]
 23fa414:	6858      	ldr	r0, [r3, #4]
 23fa416:	684b      	ldr	r3, [r1, #4]
 23fa418:	5cc3      	ldrb	r3, [r0, r3]
 23fa41a:	2b6e      	cmp	r3, #110	; 0x6e
 23fa41c:	d007      	beq.n	23fa42e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fa41e:	6813      	ldr	r3, [r2, #0]
 23fa420:	684d      	ldr	r5, [r1, #4]
 23fa422:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fa424:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fa426:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fa428:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fa42a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fa42c:	60e3      	str	r3, [r4, #12]
 23fa42e:	4611      	mov	r1, r2
 23fa430:	4620      	mov	r0, r4
 23fa432:	f7ff ff6c 	bl	23fa30e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fa436:	4620      	mov	r0, r4
 23fa438:	bd38      	pop	{r3, r4, r5, pc}
 23fa43a:	bf00      	nop
 23fa43c:	023ff895 	.word	0x023ff895

023fa440 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fa440:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fa442:	2500      	movs	r5, #0
 23fa444:	460b      	mov	r3, r1
 23fa446:	4604      	mov	r4, r0
 23fa448:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fa44a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fa44e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fa452:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fa456:	b14b      	cbz	r3, 23fa46c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fa458:	781a      	ldrb	r2, [r3, #0]
 23fa45a:	2a01      	cmp	r2, #1
 23fa45c:	d106      	bne.n	23fa46c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fa45e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fa462:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fa464:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fa466:	6143      	str	r3, [r0, #20]
 23fa468:	f7ff ff51 	bl	23fa30e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fa46c:	4620      	mov	r0, r4
 23fa46e:	bd38      	pop	{r3, r4, r5, pc}

023fa470 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fa470:	b510      	push	{r4, lr}
    if (!n_) {
 23fa472:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fa474:	4604      	mov	r4, r0
    if (!n_) {
 23fa476:	b163      	cbz	r3, 23fa492 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fa478:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fa47a:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fa47c:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fa47e:	3010      	adds	r0, #16
 23fa480:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fa482:	6120      	str	r0, [r4, #16]
    --n_;
 23fa484:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fa486:	b113      	cbz	r3, 23fa48e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fa488:	f7ff fef2 	bl	23fa270 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fa48c:	60a0      	str	r0, [r4, #8]
    return true;
 23fa48e:	2001      	movs	r0, #1
 23fa490:	e000      	b.n	23fa494 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fa492:	4618      	mov	r0, r3
}
 23fa494:	bd10      	pop	{r4, pc}

023fa496 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fa496:	b510      	push	{r4, lr}
    write('}');
 23fa498:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fa49a:	4604      	mov	r4, r0
    write('}');
 23fa49c:	f7ff ff49 	bl	23fa332 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fa4a0:	2301      	movs	r3, #1
}
 23fa4a2:	4620      	mov	r0, r4
    state_ = NEXT;
 23fa4a4:	7123      	strb	r3, [r4, #4]
}
 23fa4a6:	bd10      	pop	{r4, pc}

023fa4a8 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fa4a8:	b508      	push	{r3, lr}
    switch (state_) {
 23fa4aa:	7903      	ldrb	r3, [r0, #4]
 23fa4ac:	2b01      	cmp	r3, #1
 23fa4ae:	d002      	beq.n	23fa4b6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fa4b0:	2b02      	cmp	r3, #2
 23fa4b2:	d004      	beq.n	23fa4be <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fa4b4:	bd08      	pop	{r3, pc}
        write(',');
 23fa4b6:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fa4b8:	f7ff ff3b 	bl	23fa332 <_ZN5spark10JSONWriter5writeEc>
}
 23fa4bc:	e7fa      	b.n	23fa4b4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fa4be:	213a      	movs	r1, #58	; 0x3a
 23fa4c0:	e7fa      	b.n	23fa4b8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fa4c2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fa4c2:	b510      	push	{r4, lr}
 23fa4c4:	4604      	mov	r4, r0
    writeSeparator();
 23fa4c6:	f7ff ffef 	bl	23fa4a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fa4ca:	4620      	mov	r0, r4
 23fa4cc:	217b      	movs	r1, #123	; 0x7b
 23fa4ce:	f7ff ff30 	bl	23fa332 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fa4d2:	2300      	movs	r3, #0
}
 23fa4d4:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fa4d6:	7123      	strb	r3, [r4, #4]
}
 23fa4d8:	bd10      	pop	{r4, pc}
	...

023fa4dc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fa4dc:	b513      	push	{r0, r1, r4, lr}
 23fa4de:	4604      	mov	r4, r0
 23fa4e0:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fa4e2:	f7ff ffe1 	bl	23fa4a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fa4e6:	6823      	ldr	r3, [r4, #0]
 23fa4e8:	4620      	mov	r0, r4
 23fa4ea:	68db      	ldr	r3, [r3, #12]
 23fa4ec:	9a01      	ldr	r2, [sp, #4]
 23fa4ee:	4903      	ldr	r1, [pc, #12]	; (23fa4fc <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fa4f0:	4798      	blx	r3
    state_ = NEXT;
 23fa4f2:	2301      	movs	r3, #1
}
 23fa4f4:	4620      	mov	r0, r4
    state_ = NEXT;
 23fa4f6:	7123      	strb	r3, [r4, #4]
}
 23fa4f8:	b002      	add	sp, #8
 23fa4fa:	bd10      	pop	{r4, pc}
 23fa4fc:	023ff988 	.word	0x023ff988

023fa500 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fa500:	b513      	push	{r0, r1, r4, lr}
 23fa502:	4604      	mov	r4, r0
 23fa504:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fa506:	f7ff ffcf 	bl	23fa4a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fa50a:	6823      	ldr	r3, [r4, #0]
 23fa50c:	4620      	mov	r0, r4
 23fa50e:	68db      	ldr	r3, [r3, #12]
 23fa510:	9a01      	ldr	r2, [sp, #4]
 23fa512:	4903      	ldr	r1, [pc, #12]	; (23fa520 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fa514:	4798      	blx	r3
    state_ = NEXT;
 23fa516:	2301      	movs	r3, #1
}
 23fa518:	4620      	mov	r0, r4
    state_ = NEXT;
 23fa51a:	7123      	strb	r3, [r4, #4]
}
 23fa51c:	b002      	add	sp, #8
 23fa51e:	bd10      	pop	{r4, pc}
 23fa520:	023ff848 	.word	0x023ff848

023fa524 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fa524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fa528:	460d      	mov	r5, r1
 23fa52a:	4690      	mov	r8, r2
    write('"');
 23fa52c:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fa52e:	4604      	mov	r4, r0
 23fa530:	462f      	mov	r7, r5
    write('"');
 23fa532:	f7ff fefe 	bl	23fa332 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fa536:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fa5dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fa53a:	44a8      	add	r8, r5
    while (s != end) {
 23fa53c:	4547      	cmp	r7, r8
 23fa53e:	46ba      	mov	sl, r7
 23fa540:	d03d      	beq.n	23fa5be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fa542:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fa546:	2e22      	cmp	r6, #34	; 0x22
 23fa548:	d006      	beq.n	23fa558 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fa54a:	2e5c      	cmp	r6, #92	; 0x5c
 23fa54c:	d004      	beq.n	23fa558 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fa54e:	4630      	mov	r0, r6
 23fa550:	f002 fe2a 	bl	23fd1a8 <isprint>
 23fa554:	2800      	cmp	r0, #0
 23fa556:	d1f1      	bne.n	23fa53c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fa558:	6823      	ldr	r3, [r4, #0]
 23fa55a:	4629      	mov	r1, r5
 23fa55c:	4620      	mov	r0, r4
 23fa55e:	689b      	ldr	r3, [r3, #8]
 23fa560:	ebaa 0205 	sub.w	r2, sl, r5
 23fa564:	4798      	blx	r3
            write('\\');
 23fa566:	215c      	movs	r1, #92	; 0x5c
 23fa568:	4620      	mov	r0, r4
 23fa56a:	f7ff fee2 	bl	23fa332 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fa56e:	2e0d      	cmp	r6, #13
 23fa570:	d80a      	bhi.n	23fa588 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fa572:	2e07      	cmp	r6, #7
 23fa574:	d91c      	bls.n	23fa5b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fa576:	f1a6 0308 	sub.w	r3, r6, #8
 23fa57a:	2b05      	cmp	r3, #5
 23fa57c:	d818      	bhi.n	23fa5b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fa57e:	e8df f003 	tbb	[pc, r3]
 23fa582:	0f0d      	.short	0x0f0d
 23fa584:	15131711 	.word	0x15131711
 23fa588:	2e22      	cmp	r6, #34	; 0x22
 23fa58a:	d001      	beq.n	23fa590 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fa58c:	2e5c      	cmp	r6, #92	; 0x5c
 23fa58e:	d10f      	bne.n	23fa5b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fa590:	4631      	mov	r1, r6
                write('b');
 23fa592:	4620      	mov	r0, r4
 23fa594:	f7ff fecd 	bl	23fa332 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fa598:	463d      	mov	r5, r7
    while (s != end) {
 23fa59a:	e7cf      	b.n	23fa53c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fa59c:	2162      	movs	r1, #98	; 0x62
 23fa59e:	e7f8      	b.n	23fa592 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fa5a0:	2174      	movs	r1, #116	; 0x74
 23fa5a2:	e7f6      	b.n	23fa592 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fa5a4:	216e      	movs	r1, #110	; 0x6e
 23fa5a6:	e7f4      	b.n	23fa592 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fa5a8:	2166      	movs	r1, #102	; 0x66
 23fa5aa:	e7f2      	b.n	23fa592 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fa5ac:	2172      	movs	r1, #114	; 0x72
 23fa5ae:	e7f0      	b.n	23fa592 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fa5b0:	6823      	ldr	r3, [r4, #0]
 23fa5b2:	4632      	mov	r2, r6
 23fa5b4:	4649      	mov	r1, r9
 23fa5b6:	4620      	mov	r0, r4
 23fa5b8:	68db      	ldr	r3, [r3, #12]
 23fa5ba:	4798      	blx	r3
                break;
 23fa5bc:	e7ec      	b.n	23fa598 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fa5be:	42bd      	cmp	r5, r7
 23fa5c0:	d005      	beq.n	23fa5ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fa5c2:	6823      	ldr	r3, [r4, #0]
 23fa5c4:	4629      	mov	r1, r5
 23fa5c6:	4620      	mov	r0, r4
 23fa5c8:	689b      	ldr	r3, [r3, #8]
 23fa5ca:	1b7a      	subs	r2, r7, r5
 23fa5cc:	4798      	blx	r3
    }
    write('"');
 23fa5ce:	2122      	movs	r1, #34	; 0x22
 23fa5d0:	4620      	mov	r0, r4
 23fa5d2:	f7ff feae 	bl	23fa332 <_ZN5spark10JSONWriter5writeEc>
}
 23fa5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fa5da:	bf00      	nop
 23fa5dc:	023ff84b 	.word	0x023ff84b

023fa5e0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fa5e0:	b513      	push	{r0, r1, r4, lr}
 23fa5e2:	4604      	mov	r4, r0
 23fa5e4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fa5e8:	f7ff ff5e 	bl	23fa4a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fa5ec:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fa5f0:	4620      	mov	r0, r4
 23fa5f2:	f7ff ff97 	bl	23fa524 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fa5f6:	2302      	movs	r3, #2
}
 23fa5f8:	4620      	mov	r0, r4
    state_ = VALUE;
 23fa5fa:	7123      	strb	r3, [r4, #4]
}
 23fa5fc:	b002      	add	sp, #8
 23fa5fe:	bd10      	pop	{r4, pc}

023fa600 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fa600:	b513      	push	{r0, r1, r4, lr}
 23fa602:	4604      	mov	r4, r0
 23fa604:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fa608:	f7ff ff4e 	bl	23fa4a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fa60c:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fa610:	4620      	mov	r0, r4
 23fa612:	f7ff ff87 	bl	23fa524 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fa616:	2301      	movs	r3, #1
}
 23fa618:	4620      	mov	r0, r4
    state_ = NEXT;
 23fa61a:	7123      	strb	r3, [r4, #4]
}
 23fa61c:	b002      	add	sp, #8
 23fa61e:	bd10      	pop	{r4, pc}

023fa620 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fa620:	6880      	ldr	r0, [r0, #8]
 23fa622:	6803      	ldr	r3, [r0, #0]
 23fa624:	68db      	ldr	r3, [r3, #12]
 23fa626:	4718      	bx	r3

023fa628 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fa628:	4770      	bx	lr

023fa62a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fa62a:	4608      	mov	r0, r1
 23fa62c:	b111      	cbz	r1, 23fa634 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fa62e:	680b      	ldr	r3, [r1, #0]
 23fa630:	685b      	ldr	r3, [r3, #4]
 23fa632:	4718      	bx	r3
}
 23fa634:	4770      	bx	lr

023fa636 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fa636:	4770      	bx	lr

023fa638 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fa638:	4770      	bx	lr

023fa63a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fa63a:	4770      	bx	lr

023fa63c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fa63c:	4770      	bx	lr

023fa63e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fa63e:	b538      	push	{r3, r4, r5, lr}
 23fa640:	4604      	mov	r4, r0
 23fa642:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fa644:	6800      	ldr	r0, [r0, #0]
 23fa646:	212e      	movs	r1, #46	; 0x2e
 23fa648:	f002 fe29 	bl	23fd29e <strchrnul>
    size = s - category;
 23fa64c:	6823      	ldr	r3, [r4, #0]
 23fa64e:	1ac3      	subs	r3, r0, r3
 23fa650:	602b      	str	r3, [r5, #0]
    if (size) {
 23fa652:	b123      	cbz	r3, 23fa65e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fa654:	7803      	ldrb	r3, [r0, #0]
 23fa656:	b103      	cbz	r3, 23fa65a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fa658:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
 23fa65a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fa65c:	6020      	str	r0, [r4, #0]
}
 23fa65e:	4618      	mov	r0, r3
 23fa660:	bd38      	pop	{r3, r4, r5, pc}

023fa662 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fa662:	b510      	push	{r4, lr}
 23fa664:	4604      	mov	r4, r0
 23fa666:	210c      	movs	r1, #12
 23fa668:	f7fc f957 	bl	23f691a <_ZdlPvj>
 23fa66c:	4620      	mov	r0, r4
 23fa66e:	bd10      	pop	{r4, pc}

023fa670 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fa670:	b510      	push	{r4, lr}
 23fa672:	4604      	mov	r4, r0
 23fa674:	2104      	movs	r1, #4
 23fa676:	f7fc f950 	bl	23f691a <_ZdlPvj>
 23fa67a:	4620      	mov	r0, r4
 23fa67c:	bd10      	pop	{r4, pc}

023fa67e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fa67e:	b510      	push	{r4, lr}
 23fa680:	4604      	mov	r4, r0
 23fa682:	2104      	movs	r1, #4
 23fa684:	f7fc f949 	bl	23f691a <_ZdlPvj>
 23fa688:	4620      	mov	r0, r4
 23fa68a:	bd10      	pop	{r4, pc}

023fa68c <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fa68c:	f7fe be9e 	b.w	23f93cc <os_mutex_recursive_lock>

023fa690 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fa690:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fa692:	f7fc f8f5 	bl	23f6880 <strcmp>
}
 23fa696:	fab0 f080 	clz	r0, r0
 23fa69a:	0940      	lsrs	r0, r0, #5
 23fa69c:	bd08      	pop	{r3, pc}

023fa69e <__tcf_1>:
 23fa69e:	4770      	bx	lr

023fa6a0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fa6a0:	b510      	push	{r4, lr}
 23fa6a2:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fa6a4:	f002 f948 	bl	23fc938 <_Z16_fetch_usbserialv>
 23fa6a8:	4284      	cmp	r4, r0
 23fa6aa:	d105      	bne.n	23fa6b8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fa6ac:	f002 f944 	bl	23fc938 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fa6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fa6b4:	f002 b934 	b.w	23fc920 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fa6b8:	f002 fb90 	bl	23fcddc <_Z22__fetch_global_Serial1v>
 23fa6bc:	4284      	cmp	r4, r0
 23fa6be:	d105      	bne.n	23fa6cc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fa6c0:	f002 fb8c 	bl	23fcddc <_Z22__fetch_global_Serial1v>
}
 23fa6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fa6c8:	f002 b8cd 	b.w	23fc866 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fa6cc:	b12c      	cbz	r4, 23fa6da <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fa6ce:	6823      	ldr	r3, [r4, #0]
 23fa6d0:	4620      	mov	r0, r4
}
 23fa6d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fa6d6:	685b      	ldr	r3, [r3, #4]
 23fa6d8:	4718      	bx	r3
 23fa6da:	bd10      	pop	{r4, pc}

023fa6dc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fa6dc:	680b      	ldr	r3, [r1, #0]
 23fa6de:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fa6e0:	684b      	ldr	r3, [r1, #4]
 23fa6e2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fa6e4:	b113      	cbz	r3, 23fa6ec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fa6e6:	685a      	ldr	r2, [r3, #4]
 23fa6e8:	3201      	adds	r2, #1
 23fa6ea:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fa6ec:	4770      	bx	lr

023fa6ee <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fa6ee:	b513      	push	{r0, r1, r4, lr}
 23fa6f0:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fa6f2:	4608      	mov	r0, r1
 23fa6f4:	9101      	str	r1, [sp, #4]
 23fa6f6:	f7fc f8cd 	bl	23f6894 <strlen>
 23fa6fa:	4602      	mov	r2, r0
 23fa6fc:	4620      	mov	r0, r4
 23fa6fe:	9901      	ldr	r1, [sp, #4]
}
 23fa700:	b002      	add	sp, #8
 23fa702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fa706:	f7ff bf7b 	b.w	23fa600 <_ZN5spark10JSONWriter5valueEPKcj>

023fa70a <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fa70a:	b513      	push	{r0, r1, r4, lr}
 23fa70c:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fa70e:	4608      	mov	r0, r1
 23fa710:	9101      	str	r1, [sp, #4]
 23fa712:	f7fc f8bf 	bl	23f6894 <strlen>
 23fa716:	4602      	mov	r2, r0
 23fa718:	4620      	mov	r0, r4
 23fa71a:	6823      	ldr	r3, [r4, #0]
 23fa71c:	9901      	ldr	r1, [sp, #4]
 23fa71e:	68db      	ldr	r3, [r3, #12]
}
 23fa720:	b002      	add	sp, #8
 23fa722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fa726:	4718      	bx	r3

023fa728 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fa728:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fa72a:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fa72c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fa730:	2201      	movs	r2, #1
 23fa732:	68db      	ldr	r3, [r3, #12]
 23fa734:	f10d 0107 	add.w	r1, sp, #7
 23fa738:	4798      	blx	r3
}
 23fa73a:	b003      	add	sp, #12
 23fa73c:	f85d fb04 	ldr.w	pc, [sp], #4

023fa740 <_ZN5spark6detail9LogFilterC1E8LogLevel>:
        capacity_(0) {
 23fa740:	2200      	movs	r2, #0
        level_(level) {
 23fa742:	7601      	strb	r1, [r0, #24]
 23fa744:	e9c0 2200 	strd	r2, r2, [r0]
 23fa748:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fa74c:	e9c0 2204 	strd	r2, r2, [r0, #16]
}
 23fa750:	4770      	bx	lr

023fa752 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fa752:	680a      	ldr	r2, [r1, #0]
 23fa754:	b510      	push	{r4, lr}
 23fa756:	6002      	str	r2, [r0, #0]
 23fa758:	684a      	ldr	r2, [r1, #4]
 23fa75a:	6042      	str	r2, [r0, #4]
 23fa75c:	2200      	movs	r2, #0
 23fa75e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fa762:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fa764:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fa766:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fa768:	6084      	str	r4, [r0, #8]
 23fa76a:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fa76c:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fa76e:	60c4      	str	r4, [r0, #12]
 23fa770:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fa772:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fa774:	6104      	str	r4, [r0, #16]
 23fa776:	bd10      	pop	{r4, pc}

023fa778 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fa778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fa77c:	f04f 0a14 	mov.w	sl, #20
 23fa780:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fa784:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fa786:	4645      	mov	r5, r8
 23fa788:	fb0a f404 	mul.w	r4, sl, r4
 23fa78c:	9300      	str	r3, [sp, #0]
 23fa78e:	4b17      	ldr	r3, [pc, #92]	; (23fa7ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fa790:	10a4      	asrs	r4, r4, #2
 23fa792:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fa794:	2c00      	cmp	r4, #0
 23fa796:	dd21      	ble.n	23fa7dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fa798:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fa79a:	fb0a f006 	mul.w	r0, sl, r6
 23fa79e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fa7a2:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fa7a6:	463a      	mov	r2, r7
 23fa7a8:	455f      	cmp	r7, fp
 23fa7aa:	bf28      	it	cs
 23fa7ac:	465a      	movcs	r2, fp
 23fa7ae:	5828      	ldr	r0, [r5, r0]
 23fa7b0:	9101      	str	r1, [sp, #4]
 23fa7b2:	f002 fd86 	bl	23fd2c2 <strncmp>
                if (cmp == 0) {
 23fa7b6:	2800      	cmp	r0, #0
 23fa7b8:	f04f 0301 	mov.w	r3, #1
 23fa7bc:	9901      	ldr	r1, [sp, #4]
 23fa7be:	d10b      	bne.n	23fa7d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fa7c0:	455f      	cmp	r7, fp
 23fa7c2:	d103      	bne.n	23fa7cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fa7c4:	9a00      	ldr	r2, [sp, #0]
 23fa7c6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fa7c8:	4634      	mov	r4, r6
 23fa7ca:	e7e3      	b.n	23fa794 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fa7cc:	d9fc      	bls.n	23fa7c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fa7ce:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fa7d0:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fa7d4:	3e01      	subs	r6, #1
 23fa7d6:	e7f7      	b.n	23fa7c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fa7d8:	dbf9      	blt.n	23fa7ce <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fa7da:	e7f5      	b.n	23fa7c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fa7dc:	eba5 0508 	sub.w	r5, r5, r8
}
 23fa7e0:	4802      	ldr	r0, [pc, #8]	; (23fa7ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fa7e2:	10ad      	asrs	r5, r5, #2
 23fa7e4:	4368      	muls	r0, r5
 23fa7e6:	b003      	add	sp, #12
 23fa7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa7ec:	cccccccd 	.word	0xcccccccd

023fa7f0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fa7f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fa7f2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fa7f4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fa7f6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fa7f8:	b303      	cbz	r3, 23fa83c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fa7fa:	b1f9      	cbz	r1, 23fa83c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fa7fc:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fa7fe:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fa802:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fa804:	a903      	add	r1, sp, #12
 23fa806:	a801      	add	r0, sp, #4
 23fa808:	f7ff ff19 	bl	23fa63e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fa80c:	4601      	mov	r1, r0
 23fa80e:	b1a8      	cbz	r0, 23fa83c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fa810:	f10d 030b 	add.w	r3, sp, #11
 23fa814:	4620      	mov	r0, r4
 23fa816:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fa818:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fa81c:	f7ff ffac 	bl	23fa778 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fa820:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fa824:	b153      	cbz	r3, 23fa83c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fa826:	6823      	ldr	r3, [r4, #0]
 23fa828:	2414      	movs	r4, #20
 23fa82a:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fa82e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fa832:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fa834:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fa836:	bfa8      	it	ge
 23fa838:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fa83a:	e7e3      	b.n	23fa804 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fa83c:	4628      	mov	r0, r5
 23fa83e:	b004      	add	sp, #16
 23fa840:	bd70      	pop	{r4, r5, r6, pc}

023fa842 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fa842:	b40e      	push	{r1, r2, r3}
 23fa844:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fa846:	b08c      	sub	sp, #48	; 0x30
 23fa848:	af00      	add	r7, sp, #0
 23fa84a:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fa84e:	f855 2b04 	ldr.w	r2, [r5], #4
 23fa852:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa854:	462b      	mov	r3, r5
 23fa856:	2120      	movs	r1, #32
 23fa858:	f107 0010 	add.w	r0, r7, #16
 23fa85c:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fa85e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa860:	f7ff fb10 	bl	23f9e84 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fa864:	281f      	cmp	r0, #31
 23fa866:	687a      	ldr	r2, [r7, #4]
 23fa868:	d91a      	bls.n	23fa8a0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fa86a:	f100 0308 	add.w	r3, r0, #8
 23fa86e:	f023 0307 	bic.w	r3, r3, #7
        }
 23fa872:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fa874:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa878:	1c41      	adds	r1, r0, #1
 23fa87a:	462b      	mov	r3, r5
 23fa87c:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fa87e:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa880:	f7ff fb00 	bl	23f9e84 <vsnprintf>
        if (n > 0) {
 23fa884:	1e02      	subs	r2, r0, #0
 23fa886:	dd04      	ble.n	23fa892 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fa888:	6823      	ldr	r3, [r4, #0]
 23fa88a:	4669      	mov	r1, sp
 23fa88c:	4620      	mov	r0, r4
 23fa88e:	68db      	ldr	r3, [r3, #12]
 23fa890:	4798      	blx	r3
 23fa892:	46b5      	mov	sp, r6
}
 23fa894:	3730      	adds	r7, #48	; 0x30
 23fa896:	46bd      	mov	sp, r7
 23fa898:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fa89c:	b003      	add	sp, #12
 23fa89e:	4770      	bx	lr
    } else if (n > 0) {
 23fa8a0:	2800      	cmp	r0, #0
 23fa8a2:	d0f7      	beq.n	23fa894 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fa8a4:	6823      	ldr	r3, [r4, #0]
 23fa8a6:	4602      	mov	r2, r0
 23fa8a8:	68db      	ldr	r3, [r3, #12]
 23fa8aa:	4620      	mov	r0, r4
 23fa8ac:	f107 0110 	add.w	r1, r7, #16
 23fa8b0:	4798      	blx	r3
}
 23fa8b2:	e7ef      	b.n	23fa894 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fa8b4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fa8b4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fa8b6:	4c08      	ldr	r4, [pc, #32]	; (23fa8d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fa8b8:	e8d4 3f8f 	ldab	r3, [r4]
 23fa8bc:	07db      	lsls	r3, r3, #31
 23fa8be:	d409      	bmi.n	23fa8d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fa8c0:	4620      	mov	r0, r4
 23fa8c2:	f7fc f839 	bl	23f6938 <__cxa_guard_acquire>
 23fa8c6:	b128      	cbz	r0, 23fa8d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fa8c8:	4620      	mov	r0, r4
 23fa8ca:	f7fc f83a 	bl	23f6942 <__cxa_guard_release>
 23fa8ce:	4803      	ldr	r0, [pc, #12]	; (23fa8dc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fa8d0:	f002 fc5c 	bl	23fd18c <atexit>
}
 23fa8d4:	4802      	ldr	r0, [pc, #8]	; (23fa8e0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fa8d6:	bd10      	pop	{r4, pc}
 23fa8d8:	1007ae14 	.word	0x1007ae14
 23fa8dc:	023fa637 	.word	0x023fa637
 23fa8e0:	1007aad0 	.word	0x1007aad0

023fa8e4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fa8e4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fa8e6:	4c08      	ldr	r4, [pc, #32]	; (23fa908 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fa8e8:	e8d4 3f8f 	ldab	r3, [r4]
 23fa8ec:	07db      	lsls	r3, r3, #31
 23fa8ee:	d409      	bmi.n	23fa904 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fa8f0:	4620      	mov	r0, r4
 23fa8f2:	f7fc f821 	bl	23f6938 <__cxa_guard_acquire>
 23fa8f6:	b128      	cbz	r0, 23fa904 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fa8f8:	4620      	mov	r0, r4
 23fa8fa:	f7fc f822 	bl	23f6942 <__cxa_guard_release>
 23fa8fe:	4803      	ldr	r0, [pc, #12]	; (23fa90c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fa900:	f002 fc44 	bl	23fd18c <atexit>
    return &factory;
}
 23fa904:	4802      	ldr	r0, [pc, #8]	; (23fa910 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fa906:	bd10      	pop	{r4, pc}
 23fa908:	1007ae18 	.word	0x1007ae18
 23fa90c:	023fa69f 	.word	0x023fa69f
 23fa910:	1007aad4 	.word	0x1007aad4

023fa914 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fa914:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fa916:	2500      	movs	r5, #0
 23fa918:	4604      	mov	r4, r0
 23fa91a:	e9c0 5500 	strd	r5, r5, [r0]
 23fa91e:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fa922:	6085      	str	r5, [r0, #8]
 23fa924:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fa926:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fa92a:	f7fe fd33 	bl	23f9394 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fa92e:	f7ff ffc1 	bl	23fa8b4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fa932:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fa934:	f7ff ffd6 	bl	23fa8e4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fa938:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fa93a:	6220      	str	r0, [r4, #32]
}
 23fa93c:	4620      	mov	r0, r4
 23fa93e:	bd38      	pop	{r3, r4, r5, pc}

023fa940 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fa940:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fa942:	4c0a      	ldr	r4, [pc, #40]	; (23fa96c <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fa944:	e8d4 3f8f 	ldab	r3, [r4]
 23fa948:	07db      	lsls	r3, r3, #31
 23fa94a:	d40c      	bmi.n	23fa966 <_ZN5spark10LogManager8instanceEv+0x26>
 23fa94c:	4620      	mov	r0, r4
 23fa94e:	f7fb fff3 	bl	23f6938 <__cxa_guard_acquire>
 23fa952:	b140      	cbz	r0, 23fa966 <_ZN5spark10LogManager8instanceEv+0x26>
 23fa954:	4806      	ldr	r0, [pc, #24]	; (23fa970 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fa956:	f7ff ffdd 	bl	23fa914 <_ZN5spark10LogManagerC1Ev>
 23fa95a:	4620      	mov	r0, r4
 23fa95c:	f7fb fff1 	bl	23f6942 <__cxa_guard_release>
 23fa960:	4804      	ldr	r0, [pc, #16]	; (23fa974 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fa962:	f002 fc13 	bl	23fd18c <atexit>
    return &mgr;
}
 23fa966:	4802      	ldr	r0, [pc, #8]	; (23fa970 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fa968:	bd10      	pop	{r4, pc}
 23fa96a:	bf00      	nop
 23fa96c:	1007ae10 	.word	0x1007ae10
 23fa970:	1007ae20 	.word	0x1007ae20
 23fa974:	023fae91 	.word	0x023fae91

023fa978 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fa978:	2300      	movs	r3, #0
 23fa97a:	4a02      	ldr	r2, [pc, #8]	; (23fa984 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fa97c:	4902      	ldr	r1, [pc, #8]	; (23fa988 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fa97e:	4803      	ldr	r0, [pc, #12]	; (23fa98c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fa980:	f7ff b87a 	b.w	23f9a78 <log_set_callbacks>
 23fa984:	023fac79 	.word	0x023fac79
 23fa988:	023fac05 	.word	0x023fac05
 23fa98c:	023fab85 	.word	0x023fab85

023fa990 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fa990:	2300      	movs	r3, #0
 23fa992:	461a      	mov	r2, r3
 23fa994:	4619      	mov	r1, r3
 23fa996:	4618      	mov	r0, r3
 23fa998:	f7ff b86e 	b.w	23f9a78 <log_set_callbacks>

023fa99c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fa99c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa99e:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fa9a0:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fa9a2:	4668      	mov	r0, sp
 23fa9a4:	f7ff fe9a 	bl	23fa6dc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fa9a8:	466a      	mov	r2, sp
 23fa9aa:	4629      	mov	r1, r5
 23fa9ac:	4620      	mov	r0, r4
 23fa9ae:	f7ff fd47 	bl	23fa440 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fa9b2:	a801      	add	r0, sp, #4
 23fa9b4:	f7ff fad9 	bl	23f9f6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fa9b8:	4620      	mov	r0, r4
 23fa9ba:	b003      	add	sp, #12
 23fa9bc:	bd30      	pop	{r4, r5, pc}

023fa9be <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fa9be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa9c0:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fa9c2:	68cd      	ldr	r5, [r1, #12]
 23fa9c4:	4668      	mov	r0, sp
 23fa9c6:	f7ff fe89 	bl	23fa6dc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fa9ca:	466a      	mov	r2, sp
 23fa9cc:	4629      	mov	r1, r5
 23fa9ce:	4620      	mov	r0, r4
 23fa9d0:	f7ff fd12 	bl	23fa3f8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fa9d4:	a801      	add	r0, sp, #4
 23fa9d6:	f7ff fac8 	bl	23f9f6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fa9da:	4620      	mov	r0, r4
 23fa9dc:	b003      	add	sp, #12
 23fa9de:	bd30      	pop	{r4, r5, pc}

023fa9e0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fa9e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa9e2:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fa9e4:	690d      	ldr	r5, [r1, #16]
 23fa9e6:	4668      	mov	r0, sp
 23fa9e8:	f7ff fe78 	bl	23fa6dc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fa9ec:	466a      	mov	r2, sp
 23fa9ee:	4629      	mov	r1, r5
 23fa9f0:	4620      	mov	r0, r4
 23fa9f2:	f7ff fcaa 	bl	23fa34a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fa9f6:	a801      	add	r0, sp, #4
 23fa9f8:	f7ff fab7 	bl	23f9f6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fa9fc:	4620      	mov	r0, r4
 23fa9fe:	b003      	add	sp, #12
 23faa00:	bd30      	pop	{r4, r5, pc}
	...

023faa04 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23faa04:	b570      	push	{r4, r5, r6, lr}
 23faa06:	b08a      	sub	sp, #40	; 0x28
 23faa08:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23faa0a:	4601      	mov	r1, r0
 23faa0c:	a804      	add	r0, sp, #16
 23faa0e:	f7ff ffc5 	bl	23fa99c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23faa12:	4e14      	ldr	r6, [pc, #80]	; (23faa64 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23faa14:	a804      	add	r0, sp, #16
 23faa16:	f7ff fd2b 	bl	23fa470 <_ZN5spark18JSONObjectIterator4nextEv>
 23faa1a:	b1e8      	cbz	r0, 23faa58 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23faa1c:	4668      	mov	r0, sp
 23faa1e:	a904      	add	r1, sp, #16
 23faa20:	f7ff ffcd 	bl	23fa9be <_ZNK5spark18JSONObjectIterator4nameEv>
 23faa24:	4631      	mov	r1, r6
 23faa26:	9802      	ldr	r0, [sp, #8]
 23faa28:	f7ff fe32 	bl	23fa690 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23faa2c:	4604      	mov	r4, r0
 23faa2e:	b110      	cbz	r0, 23faa36 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23faa30:	1e2c      	subs	r4, r5, #0
 23faa32:	bf18      	it	ne
 23faa34:	2401      	movne	r4, #1
 23faa36:	a801      	add	r0, sp, #4
 23faa38:	f7ff fa97 	bl	23f9f6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23faa3c:	2c00      	cmp	r4, #0
 23faa3e:	d0e9      	beq.n	23faa14 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23faa40:	4668      	mov	r0, sp
 23faa42:	a904      	add	r1, sp, #16
 23faa44:	f7ff ffcc 	bl	23fa9e0 <_ZNK5spark18JSONObjectIterator5valueEv>
 23faa48:	4668      	mov	r0, sp
 23faa4a:	f7ff fcb4 	bl	23fa3b6 <_ZNK5spark9JSONValue5toIntEv>
 23faa4e:	6028      	str	r0, [r5, #0]
 23faa50:	a801      	add	r0, sp, #4
 23faa52:	f7ff fa8a 	bl	23f9f6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23faa56:	e7dd      	b.n	23faa14 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23faa58:	a805      	add	r0, sp, #20
 23faa5a:	f7ff fa86 	bl	23f9f6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23faa5e:	b00a      	add	sp, #40	; 0x28
 23faa60:	bd70      	pop	{r4, r5, r6, pc}
 23faa62:	bf00      	nop
 23faa64:	023ff851 	.word	0x023ff851

023faa68 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23faa68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23faa6a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23faa6c:	4913      	ldr	r1, [pc, #76]	; (23faabc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23faa6e:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23faa70:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23faa72:	f7fb ff05 	bl	23f6880 <strcmp>
 23faa76:	b950      	cbnz	r0, 23faa8e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23faa78:	f001 ff5e 	bl	23fc938 <_Z16_fetch_usbserialv>
 23faa7c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23faa80:	f001 ff4a 	bl	23fc918 <_ZN9USBSerial5beginEl>
}
 23faa84:	b003      	add	sp, #12
 23faa86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23faa8a:	f001 bf55 	b.w	23fc938 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23faa8e:	4620      	mov	r0, r4
 23faa90:	490b      	ldr	r1, [pc, #44]	; (23faac0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23faa92:	f7fb fef5 	bl	23f6880 <strcmp>
 23faa96:	b978      	cbnz	r0, 23faab8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23faa98:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23faa9c:	a901      	add	r1, sp, #4
 23faa9e:	4628      	mov	r0, r5
        int baud = 9600;
 23faaa0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23faaa2:	f7ff ffaf 	bl	23faa04 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23faaa6:	f002 f999 	bl	23fcddc <_Z22__fetch_global_Serial1v>
 23faaaa:	9901      	ldr	r1, [sp, #4]
 23faaac:	f001 fed8 	bl	23fc860 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23faab0:	f002 f994 	bl	23fcddc <_Z22__fetch_global_Serial1v>
}
 23faab4:	b003      	add	sp, #12
 23faab6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23faab8:	2000      	movs	r0, #0
 23faaba:	e7fb      	b.n	23faab4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23faabc:	023ff856 	.word	0x023ff856
 23faac0:	023ff85d 	.word	0x023ff85d

023faac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23faac4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23faac6:	2614      	movs	r6, #20
 23faac8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23faacc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23faace:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23faad2:	42ae      	cmp	r6, r5
 23faad4:	d005      	beq.n	23faae2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23faad6:	f105 0008 	add.w	r0, r5, #8
 23faada:	f7ff fff3 	bl	23faac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23faade:	3514      	adds	r5, #20
 23faae0:	e7f7      	b.n	23faad2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23faae2:	6820      	ldr	r0, [r4, #0]
 23faae4:	f7ff f996 	bl	23f9e14 <free>
}
 23faae8:	4620      	mov	r0, r4
 23faaea:	bd70      	pop	{r4, r5, r6, pc}

023faaec <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23faaec:	b510      	push	{r4, lr}
 23faaee:	4604      	mov	r4, r0
 23faaf0:	300c      	adds	r0, #12
 23faaf2:	f7ff ffe7 	bl	23faac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23faaf6:	4620      	mov	r0, r4
 23faaf8:	f7ff fa61 	bl	23f9fbe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23faafc:	4620      	mov	r0, r4
 23faafe:	bd10      	pop	{r4, pc}

023fab00 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fab00:	b510      	push	{r4, lr}
 23fab02:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fab04:	4b03      	ldr	r3, [pc, #12]	; (23fab14 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fab06:	f840 3b04 	str.w	r3, [r0], #4
 23fab0a:	f7ff ffef 	bl	23faaec <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fab0e:	4620      	mov	r0, r4
 23fab10:	bd10      	pop	{r4, pc}
 23fab12:	bf00      	nop
 23fab14:	023ff2b0 	.word	0x023ff2b0

023fab18 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fab18:	b510      	push	{r4, lr}
 23fab1a:	4604      	mov	r4, r0
 23fab1c:	f7ff fff0 	bl	23fab00 <_ZN5spark16StreamLogHandlerD1Ev>
 23fab20:	4620      	mov	r0, r4
 23fab22:	2124      	movs	r1, #36	; 0x24
 23fab24:	f7fb fef9 	bl	23f691a <_ZdlPvj>
 23fab28:	4620      	mov	r0, r4
 23fab2a:	bd10      	pop	{r4, pc}

023fab2c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fab2c:	b510      	push	{r4, lr}
 23fab2e:	4604      	mov	r4, r0
 23fab30:	4b02      	ldr	r3, [pc, #8]	; (23fab3c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fab32:	6003      	str	r3, [r0, #0]
 23fab34:	f7ff ffe4 	bl	23fab00 <_ZN5spark16StreamLogHandlerD1Ev>
 23fab38:	4620      	mov	r0, r4
 23fab3a:	bd10      	pop	{r4, pc}
 23fab3c:	023ff8e4 	.word	0x023ff8e4

023fab40 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fab40:	b510      	push	{r4, lr}
 23fab42:	4604      	mov	r4, r0
 23fab44:	f7ff fff2 	bl	23fab2c <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fab48:	4620      	mov	r0, r4
 23fab4a:	2124      	movs	r1, #36	; 0x24
 23fab4c:	f7fb fee5 	bl	23f691a <_ZdlPvj>
 23fab50:	4620      	mov	r0, r4
 23fab52:	bd10      	pop	{r4, pc}

023fab54 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fab54:	2200      	movs	r2, #0
 23fab56:	e9c0 2200 	strd	r2, r2, [r0]
 23fab5a:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fab5c:	b510      	push	{r4, lr}
 23fab5e:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fab60:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fab62:	6004      	str	r4, [r0, #0]
 23fab64:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fab66:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fab68:	6044      	str	r4, [r0, #4]
 23fab6a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fab6c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fab6e:	6084      	str	r4, [r0, #8]
}
 23fab70:	bd10      	pop	{r4, pc}

023fab72 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fab72:	b510      	push	{r4, lr}
 23fab74:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fab76:	6803      	ldr	r3, [r0, #0]
 23fab78:	6818      	ldr	r0, [r3, #0]
 23fab7a:	f7fe fc35 	bl	23f93e8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fab7e:	4620      	mov	r0, r4
 23fab80:	bd10      	pop	{r4, pc}
	...

023fab84 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fab84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fab88:	b087      	sub	sp, #28
 23fab8a:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fab8c:	4b1c      	ldr	r3, [pc, #112]	; (23fac00 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fab8e:	4680      	mov	r8, r0
 23fab90:	685b      	ldr	r3, [r3, #4]
 23fab92:	4689      	mov	r9, r1
 23fab94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fab98:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fab9a:	b96b      	cbnz	r3, 23fabb8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fab9c:	f7ff fed0 	bl	23fa940 <_ZN5spark10LogManager8instanceEv>
 23faba0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23faba2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23faba6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23faba8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fabaa:	f7ff fd6f 	bl	23fa68c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fabae:	7b23      	ldrb	r3, [r4, #12]
 23fabb0:	b12b      	cbz	r3, 23fabbe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fabb2:	a805      	add	r0, sp, #20
 23fabb4:	f7ff ffdd 	bl	23fab72 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fabb8:	b007      	add	sp, #28
 23fabba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fabbe:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fabc0:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fabc4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fabc6:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fabca:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fabce:	45aa      	cmp	sl, r5
 23fabd0:	d012      	beq.n	23fabf8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fabd2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fabd6:	4631      	mov	r1, r6
 23fabd8:	1d38      	adds	r0, r7, #4
 23fabda:	f7ff fe09 	bl	23fa7f0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fabde:	4581      	cmp	r9, r0
 23fabe0:	d3f5      	bcc.n	23fabce <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fabe2:	9a03      	ldr	r2, [sp, #12]
 23fabe4:	683b      	ldr	r3, [r7, #0]
 23fabe6:	9200      	str	r2, [sp, #0]
 23fabe8:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fabec:	464a      	mov	r2, r9
 23fabee:	4633      	mov	r3, r6
 23fabf0:	4641      	mov	r1, r8
 23fabf2:	4638      	mov	r0, r7
 23fabf4:	47d8      	blx	fp
 23fabf6:	e7ea      	b.n	23fabce <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fabf8:	2300      	movs	r3, #0
 23fabfa:	7323      	strb	r3, [r4, #12]
 23fabfc:	e7d9      	b.n	23fabb2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fabfe:	bf00      	nop
 23fac00:	e000ed00 	.word	0xe000ed00

023fac04 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fac04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fac08:	469b      	mov	fp, r3
 23fac0a:	4b1a      	ldr	r3, [pc, #104]	; (23fac74 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fac0c:	4680      	mov	r8, r0
 23fac0e:	685b      	ldr	r3, [r3, #4]
 23fac10:	4689      	mov	r9, r1
 23fac12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fac16:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fac18:	b96b      	cbnz	r3, 23fac36 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fac1a:	f7ff fe91 	bl	23fa940 <_ZN5spark10LogManager8instanceEv>
 23fac1e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fac20:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fac24:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fac26:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fac28:	f7ff fd30 	bl	23fa68c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fac2c:	7b23      	ldrb	r3, [r4, #12]
 23fac2e:	b12b      	cbz	r3, 23fac3c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fac30:	a801      	add	r0, sp, #4
 23fac32:	f7ff ff9e 	bl	23fab72 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fac36:	b003      	add	sp, #12
 23fac38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fac3c:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fac3e:	b2f6      	uxtb	r6, r6
 23fac40:	7323      	strb	r3, [r4, #12]
 23fac42:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fac46:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fac4a:	4555      	cmp	r5, sl
 23fac4c:	d00e      	beq.n	23fac6c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fac4e:	f855 7b04 	ldr.w	r7, [r5], #4
 23fac52:	4659      	mov	r1, fp
 23fac54:	1d38      	adds	r0, r7, #4
 23fac56:	f7ff fdcb 	bl	23fa7f0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fac5a:	4286      	cmp	r6, r0
 23fac5c:	d3f5      	bcc.n	23fac4a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fac5e:	683b      	ldr	r3, [r7, #0]
 23fac60:	464a      	mov	r2, r9
 23fac62:	4641      	mov	r1, r8
 23fac64:	4638      	mov	r0, r7
 23fac66:	68db      	ldr	r3, [r3, #12]
 23fac68:	4798      	blx	r3
 23fac6a:	e7ee      	b.n	23fac4a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fac6c:	2300      	movs	r3, #0
 23fac6e:	7323      	strb	r3, [r4, #12]
 23fac70:	e7de      	b.n	23fac30 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fac72:	bf00      	nop
 23fac74:	e000ed00 	.word	0xe000ed00

023fac78 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fac78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fac7c:	4b16      	ldr	r3, [pc, #88]	; (23facd8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fac7e:	4605      	mov	r5, r0
 23fac80:	685b      	ldr	r3, [r3, #4]
 23fac82:	460f      	mov	r7, r1
 23fac84:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fac88:	bb1b      	cbnz	r3, 23facd2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fac8a:	f7ff fe59 	bl	23fa940 <_ZN5spark10LogManager8instanceEv>
 23fac8e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fac90:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fac94:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fac96:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fac98:	f7ff fcf8 	bl	23fa68c <_ZN14RecursiveMutex4lockEv.isra.0>
 23fac9c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23faca0:	2446      	movs	r4, #70	; 0x46
 23faca2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23faca6:	45b0      	cmp	r8, r6
 23faca8:	d109      	bne.n	23facbe <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23facaa:	a801      	add	r0, sp, #4
 23facac:	f7ff ff61 	bl	23fab72 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23facb0:	42a5      	cmp	r5, r4
 23facb2:	bfb4      	ite	lt
 23facb4:	2000      	movlt	r0, #0
 23facb6:	2001      	movge	r0, #1
}
 23facb8:	b002      	add	sp, #8
 23facba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23facbe:	f856 0b04 	ldr.w	r0, [r6], #4
 23facc2:	4639      	mov	r1, r7
 23facc4:	3004      	adds	r0, #4
 23facc6:	f7ff fd93 	bl	23fa7f0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23facca:	4284      	cmp	r4, r0
 23faccc:	bfa8      	it	ge
 23facce:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23facd0:	e7e9      	b.n	23faca6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23facd2:	2000      	movs	r0, #0
 23facd4:	e7f0      	b.n	23facb8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23facd6:	bf00      	nop
 23facd8:	e000ed00 	.word	0xe000ed00

023facdc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23facdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23facde:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23face2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23face4:	4604      	mov	r4, r0
 23face6:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23face8:	db0d      	blt.n	23fad06 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23facea:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23facec:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23facee:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23facf0:	dd04      	ble.n	23facfc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23facf2:	00b9      	lsls	r1, r7, #2
 23facf4:	f7ff f89c 	bl	23f9e30 <realloc>
            if (!d) {
 23facf8:	b918      	cbnz	r0, 23fad02 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23facfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23facfc:	f7ff f88a 	bl	23f9e14 <free>
        T* d = nullptr;
 23fad00:	2000      	movs	r0, #0
        data_ = d;
 23fad02:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fad04:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fad06:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fad08:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fad0a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fad0e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fad10:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fad14:	1d08      	adds	r0, r1, #4
 23fad16:	f002 fa64 	bl	23fd1e2 <memmove>
    new(p) T(std::move(value));
 23fad1a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fad1e:	6863      	ldr	r3, [r4, #4]
    return true;
 23fad20:	2001      	movs	r0, #1
    ++size_;
 23fad22:	3301      	adds	r3, #1
 23fad24:	6063      	str	r3, [r4, #4]
    return true;
 23fad26:	e7e8      	b.n	23facfa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fad28 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fad28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fad2a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fad2c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fad30:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fad32:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fad34:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fad36:	f7ff fca9 	bl	23fa68c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fad3a:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fad3e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fad42:	4293      	cmp	r3, r2
 23fad44:	4619      	mov	r1, r3
 23fad46:	d00a      	beq.n	23fad5e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fad48:	6809      	ldr	r1, [r1, #0]
 23fad4a:	3304      	adds	r3, #4
 23fad4c:	42a9      	cmp	r1, r5
 23fad4e:	d1f8      	bne.n	23fad42 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fad50:	a801      	add	r0, sp, #4
 23fad52:	f7ff ff0e 	bl	23fab72 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fad56:	2500      	movs	r5, #0
}
 23fad58:	4628      	mov	r0, r5
 23fad5a:	b003      	add	sp, #12
 23fad5c:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fad5e:	4629      	mov	r1, r5
 23fad60:	4620      	mov	r0, r4
 23fad62:	f7ff ffbb 	bl	23facdc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fad66:	4605      	mov	r5, r0
 23fad68:	2800      	cmp	r0, #0
 23fad6a:	d0f1      	beq.n	23fad50 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fad6c:	6863      	ldr	r3, [r4, #4]
 23fad6e:	2b01      	cmp	r3, #1
 23fad70:	d101      	bne.n	23fad76 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fad72:	f7ff fe01 	bl	23fa978 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fad76:	a801      	add	r0, sp, #4
 23fad78:	f7ff fefb 	bl	23fab72 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fad7c:	e7ec      	b.n	23fad58 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fad7e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fad7e:	460b      	mov	r3, r1
 23fad80:	b570      	push	{r4, r5, r6, lr}
 23fad82:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fad84:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fad88:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fad8c:	4282      	cmp	r2, r0
 23fad8e:	d00f      	beq.n	23fadb0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fad90:	4601      	mov	r1, r0
            if (*p == value) {
 23fad92:	681d      	ldr	r5, [r3, #0]
 23fad94:	f851 6b04 	ldr.w	r6, [r1], #4
 23fad98:	42ae      	cmp	r6, r5
 23fad9a:	d107      	bne.n	23fadac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fad9c:	1a52      	subs	r2, r2, r1
 23fad9e:	f002 fa20 	bl	23fd1e2 <memmove>
    return true;
 23fada2:	2001      	movs	r0, #1
    --size_;
 23fada4:	6863      	ldr	r3, [r4, #4]
 23fada6:	3b01      	subs	r3, #1
 23fada8:	6063      	str	r3, [r4, #4]
}
 23fadaa:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fadac:	4608      	mov	r0, r1
 23fadae:	e7ed      	b.n	23fad8c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fadb0:	2000      	movs	r0, #0
 23fadb2:	e7fa      	b.n	23fadaa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fadb4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fadb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fadb6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fadb8:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fadbc:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fadbe:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fadc0:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fadc2:	f7ff fc63 	bl	23fa68c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fadc6:	4620      	mov	r0, r4
 23fadc8:	a901      	add	r1, sp, #4
 23fadca:	f7ff ffd8 	bl	23fad7e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fadce:	b118      	cbz	r0, 23fadd8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fadd0:	6863      	ldr	r3, [r4, #4]
 23fadd2:	b90b      	cbnz	r3, 23fadd8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fadd4:	f7ff fddc 	bl	23fa990 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fadd8:	a803      	add	r0, sp, #12
 23fadda:	f7ff feca 	bl	23fab72 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fadde:	b004      	add	sp, #16
 23fade0:	bd10      	pop	{r4, pc}

023fade2 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fade2:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fade4:	b570      	push	{r4, r5, r6, lr}
 23fade6:	4604      	mov	r4, r0
 23fade8:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fadec:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fadf0:	42ae      	cmp	r6, r5
 23fadf2:	d015      	beq.n	23fae20 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fadf4:	4620      	mov	r0, r4
 23fadf6:	f105 0110 	add.w	r1, r5, #16
 23fadfa:	f7ff ffc0 	bl	23fad7e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fadfe:	6863      	ldr	r3, [r4, #4]
 23fae00:	b90b      	cbnz	r3, 23fae06 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fae02:	f7ff fdc5 	bl	23fa990 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fae06:	69e0      	ldr	r0, [r4, #28]
 23fae08:	6929      	ldr	r1, [r5, #16]
 23fae0a:	6803      	ldr	r3, [r0, #0]
 23fae0c:	68db      	ldr	r3, [r3, #12]
 23fae0e:	4798      	blx	r3
        if (h.stream) {
 23fae10:	6969      	ldr	r1, [r5, #20]
 23fae12:	b119      	cbz	r1, 23fae1c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fae14:	6a20      	ldr	r0, [r4, #32]
 23fae16:	6803      	ldr	r3, [r0, #0]
 23fae18:	68db      	ldr	r3, [r3, #12]
 23fae1a:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fae1c:	3518      	adds	r5, #24
 23fae1e:	e7e7      	b.n	23fadf0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fae20:	2618      	movs	r6, #24
 23fae22:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fae26:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fae2a:	42ae      	cmp	r6, r5
 23fae2c:	d004      	beq.n	23fae38 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fae2e:	4628      	mov	r0, r5
 23fae30:	f000 fd40 	bl	23fb8b4 <_ZN6StringD1Ev>
 23fae34:	3518      	adds	r5, #24
 23fae36:	e7f8      	b.n	23fae2a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fae38:	2300      	movs	r3, #0
 23fae3a:	6163      	str	r3, [r4, #20]
}
 23fae3c:	bd70      	pop	{r4, r5, r6, pc}

023fae3e <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fae3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fae40:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fae42:	f7ff fda5 	bl	23fa990 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fae46:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fae4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fae4c:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fae4e:	f7ff fc1d 	bl	23fa68c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fae52:	4620      	mov	r0, r4
 23fae54:	f7ff ffc5 	bl	23fade2 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fae58:	a801      	add	r0, sp, #4
 23fae5a:	f7ff fe8a 	bl	23fab72 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fae5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fae60:	b108      	cbz	r0, 23fae66 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fae62:	f7fe faa5 	bl	23f93b0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fae66:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fae6a:	2618      	movs	r6, #24
 23fae6c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fae70:	42ae      	cmp	r6, r5
 23fae72:	d004      	beq.n	23fae7e <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fae74:	4628      	mov	r0, r5
 23fae76:	f000 fd1d 	bl	23fb8b4 <_ZN6StringD1Ev>
 23fae7a:	3518      	adds	r5, #24
 23fae7c:	e7f8      	b.n	23fae70 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fae7e:	6920      	ldr	r0, [r4, #16]
 23fae80:	f7fe ffc8 	bl	23f9e14 <free>
 23fae84:	6820      	ldr	r0, [r4, #0]
 23fae86:	f7fe ffc5 	bl	23f9e14 <free>
}
 23fae8a:	4620      	mov	r0, r4
 23fae8c:	b002      	add	sp, #8
 23fae8e:	bd70      	pop	{r4, r5, r6, pc}

023fae90 <__tcf_2>:
    static LogManager mgr;
 23fae90:	4801      	ldr	r0, [pc, #4]	; (23fae98 <__tcf_2+0x8>)
 23fae92:	f7ff bfd4 	b.w	23fae3e <_ZN5spark10LogManagerD1Ev>
 23fae96:	bf00      	nop
 23fae98:	1007ae20 	.word	0x1007ae20

023fae9c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fae9c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fae9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23faea0:	4604      	mov	r4, r0
 23faea2:	460d      	mov	r5, r1
 23faea4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23faea6:	d915      	bls.n	23faed4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23faea8:	4290      	cmp	r0, r2
 23faeaa:	d214      	bcs.n	23faed6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23faeac:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23faeb0:	1a75      	subs	r5, r6, r1
 23faeb2:	f1a1 0714 	sub.w	r7, r1, #20
 23faeb6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23faeb8:	42b7      	cmp	r7, r6
 23faeba:	d01a      	beq.n	23faef2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23faebc:	b11c      	cbz	r4, 23faec6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23faebe:	4631      	mov	r1, r6
 23faec0:	4620      	mov	r0, r4
 23faec2:	f7ff fc46 	bl	23fa752 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23faec6:	f106 0008 	add.w	r0, r6, #8
 23faeca:	f7ff fdfb 	bl	23faac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23faece:	3e14      	subs	r6, #20
 23faed0:	3c14      	subs	r4, #20
 23faed2:	e7f1      	b.n	23faeb8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23faed4:	d00d      	beq.n	23faef2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23faed6:	42b5      	cmp	r5, r6
 23faed8:	d00b      	beq.n	23faef2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23faeda:	b11c      	cbz	r4, 23faee4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23faedc:	4629      	mov	r1, r5
 23faede:	4620      	mov	r0, r4
 23faee0:	f7ff fc37 	bl	23fa752 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23faee4:	f105 0008 	add.w	r0, r5, #8
 23faee8:	f7ff fdec 	bl	23faac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23faeec:	3514      	adds	r5, #20
 23faeee:	3414      	adds	r4, #20
 23faef0:	e7f1      	b.n	23faed6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23faef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023faef4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23faef4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23faef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23faef8:	4604      	mov	r4, r0
 23faefa:	460d      	mov	r5, r1
 23faefc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23faefe:	d914      	bls.n	23faf2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23faf00:	4290      	cmp	r0, r2
 23faf02:	d213      	bcs.n	23faf2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23faf04:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23faf08:	1a75      	subs	r5, r6, r1
 23faf0a:	f1a1 0710 	sub.w	r7, r1, #16
 23faf0e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23faf10:	42b7      	cmp	r7, r6
 23faf12:	d018      	beq.n	23faf46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23faf14:	b11c      	cbz	r4, 23faf1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23faf16:	4631      	mov	r1, r6
 23faf18:	4620      	mov	r0, r4
 23faf1a:	f000 fd48 	bl	23fb9ae <_ZN6StringC1EOS_>
                end->~T();
 23faf1e:	4630      	mov	r0, r6
 23faf20:	f000 fcc8 	bl	23fb8b4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23faf24:	3e10      	subs	r6, #16
 23faf26:	3c10      	subs	r4, #16
 23faf28:	e7f2      	b.n	23faf10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23faf2a:	d00c      	beq.n	23faf46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23faf2c:	42b5      	cmp	r5, r6
 23faf2e:	d00a      	beq.n	23faf46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23faf30:	b11c      	cbz	r4, 23faf3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23faf32:	4629      	mov	r1, r5
 23faf34:	4620      	mov	r0, r4
 23faf36:	f000 fd3a 	bl	23fb9ae <_ZN6StringC1EOS_>
                p->~T();
 23faf3a:	4628      	mov	r0, r5
 23faf3c:	f000 fcba 	bl	23fb8b4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23faf40:	3510      	adds	r5, #16
 23faf42:	3410      	adds	r4, #16
 23faf44:	e7f2      	b.n	23faf2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23faf46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023faf48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23faf48:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23faf4a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23faf4c:	4605      	mov	r5, r0
        if (n > 0) {
 23faf4e:	dd11      	ble.n	23faf74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23faf50:	0130      	lsls	r0, r6, #4
 23faf52:	f7fe ff51 	bl	23f9df8 <malloc>
            if (!d) {
 23faf56:	4604      	mov	r4, r0
 23faf58:	b158      	cbz	r0, 23faf72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23faf5a:	e9d5 1200 	ldrd	r1, r2, [r5]
 23faf5e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23faf62:	f7ff ffc7 	bl	23faef4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23faf66:	6828      	ldr	r0, [r5, #0]
 23faf68:	f7fe ff54 	bl	23f9e14 <free>
        return true;
 23faf6c:	2001      	movs	r0, #1
        data_ = d;
 23faf6e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23faf70:	60ae      	str	r6, [r5, #8]
    }
 23faf72:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23faf74:	2400      	movs	r4, #0
 23faf76:	e7f6      	b.n	23faf66 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023faf78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23faf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23faf7c:	4690      	mov	r8, r2
        capacity_(0) {
 23faf7e:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23faf80:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23faf82:	b095      	sub	sp, #84	; 0x54
 23faf84:	9103      	str	r1, [sp, #12]
    return size_;
 23faf86:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23faf8a:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23faf8c:	4299      	cmp	r1, r3
        capacity_(0) {
 23faf8e:	e9c0 3300 	strd	r3, r3, [r0]
 23faf92:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23faf96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23faf9a:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23faf9e:	7602      	strb	r2, [r0, #24]
 23fafa0:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fafa2:	dc23      	bgt.n	23fafec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fafa4:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fafa8:	2314      	movs	r3, #20
 23fafaa:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fafae:	42af      	cmp	r7, r5
 23fafb0:	d03b      	beq.n	23fb02a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fafb2:	4629      	mov	r1, r5
 23fafb4:	a80b      	add	r0, sp, #44	; 0x2c
 23fafb6:	f000 fcfa 	bl	23fb9ae <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fafba:	a90b      	add	r1, sp, #44	; 0x2c
 23fafbc:	a80f      	add	r0, sp, #60	; 0x3c
 23fafbe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fafc0:	f000 fcf5 	bl	23fb9ae <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fafc4:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fafc8:	4299      	cmp	r1, r3
 23fafca:	da1b      	bge.n	23fb004 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fafcc:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fafce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fafd0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fafd4:	4631      	mov	r1, r6
 23fafd6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fafda:	f106 0010 	add.w	r0, r6, #16
 23fafde:	f7ff ff89 	bl	23faef4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fafe2:	b9ee      	cbnz	r6, 23fb020 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fafe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fafe6:	3301      	adds	r3, #1
 23fafe8:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fafea:	e011      	b.n	23fb010 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fafec:	a808      	add	r0, sp, #32
 23fafee:	f7ff ffab 	bl	23faf48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23faff2:	2800      	cmp	r0, #0
 23faff4:	d1d6      	bne.n	23fafa4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23faff6:	a808      	add	r0, sp, #32
 23faff8:	f7fe ffe1 	bl	23f9fbe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23faffc:	4620      	mov	r0, r4
 23faffe:	b015      	add	sp, #84	; 0x54
 23fb000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb004:	3101      	adds	r1, #1
 23fb006:	a808      	add	r0, sp, #32
 23fb008:	f7ff ff9e 	bl	23faf48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fb00c:	2800      	cmp	r0, #0
 23fb00e:	d1dd      	bne.n	23fafcc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fb010:	a80f      	add	r0, sp, #60	; 0x3c
 23fb012:	f000 fc4f 	bl	23fb8b4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fb016:	a80b      	add	r0, sp, #44	; 0x2c
 23fb018:	f000 fc4c 	bl	23fb8b4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fb01c:	3514      	adds	r5, #20
 23fb01e:	e7c6      	b.n	23fafae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fb020:	4630      	mov	r0, r6
 23fb022:	a90f      	add	r1, sp, #60	; 0x3c
 23fb024:	f000 fcc3 	bl	23fb9ae <_ZN6StringC1EOS_>
 23fb028:	e7dc      	b.n	23fafe4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fb02a:	2600      	movs	r6, #0
 23fb02c:	f04f 0914 	mov.w	r9, #20
 23fb030:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fb034:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fb036:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fb03a:	429e      	cmp	r6, r3
 23fb03c:	da7c      	bge.n	23fb138 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23fb03e:	0133      	lsls	r3, r6, #4
 23fb040:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fb042:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fb044:	b90b      	cbnz	r3, 23fb04a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fb046:	3601      	adds	r6, #1
 23fb048:	e7f5      	b.n	23fb036 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fb04a:	2300      	movs	r3, #0
 23fb04c:	9307      	str	r3, [sp, #28]
 23fb04e:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fb052:	ad0b      	add	r5, sp, #44	; 0x2c
 23fb054:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fb056:	a907      	add	r1, sp, #28
 23fb058:	a806      	add	r0, sp, #24
 23fb05a:	f7ff faf0 	bl	23fa63e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fb05e:	4682      	mov	sl, r0
 23fb060:	2800      	cmp	r0, #0
 23fb062:	d0f0      	beq.n	23fb046 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fb064:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fb068:	4601      	mov	r1, r0
            bool found = false;
 23fb06a:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fb06e:	4628      	mov	r0, r5
 23fb070:	9a07      	ldr	r2, [sp, #28]
 23fb072:	f10d 0317 	add.w	r3, sp, #23
 23fb076:	f7ff fb7f 	bl	23fa778 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fb07a:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fb07e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fb080:	2f00      	cmp	r7, #0
 23fb082:	d14a      	bne.n	23fb11a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fb084:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fb088:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fb08c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fb090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fb094:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fb098:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fb09c:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb09e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fb0a2:	4293      	cmp	r3, r2
 23fb0a4:	db17      	blt.n	23fb0d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fb0a6:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fb0aa:	f1ba 0f00 	cmp.w	sl, #0
 23fb0ae:	dd30      	ble.n	23fb112 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fb0b0:	fb09 f00a 	mul.w	r0, r9, sl
 23fb0b4:	f7fe fea0 	bl	23f9df8 <malloc>
            if (!d) {
 23fb0b8:	4683      	mov	fp, r0
 23fb0ba:	b360      	cbz	r0, 23fb116 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fb0bc:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fb0c0:	fb09 1202 	mla	r2, r9, r2, r1
 23fb0c4:	f7ff feea 	bl	23fae9c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fb0c8:	6828      	ldr	r0, [r5, #0]
 23fb0ca:	f7fe fea3 	bl	23f9e14 <free>
        data_ = d;
 23fb0ce:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fb0d2:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fb0d6:	682b      	ldr	r3, [r5, #0]
 23fb0d8:	9a01      	ldr	r2, [sp, #4]
 23fb0da:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fb0de:	686a      	ldr	r2, [r5, #4]
 23fb0e0:	4651      	mov	r1, sl
 23fb0e2:	fb09 3202 	mla	r2, r9, r2, r3
 23fb0e6:	f10a 0014 	add.w	r0, sl, #20
 23fb0ea:	f7ff fed7 	bl	23fae9c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fb0ee:	f1ba 0f00 	cmp.w	sl, #0
 23fb0f2:	d003      	beq.n	23fb0fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fb0f4:	4650      	mov	r0, sl
 23fb0f6:	a90f      	add	r1, sp, #60	; 0x3c
 23fb0f8:	f7ff fb2b 	bl	23fa752 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fb0fc:	686b      	ldr	r3, [r5, #4]
 23fb0fe:	3301      	adds	r3, #1
 23fb100:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fb102:	a811      	add	r0, sp, #68	; 0x44
 23fb104:	f7ff fcde 	bl	23faac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fb108:	b13f      	cbz	r7, 23fb11a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fb10a:	a80b      	add	r0, sp, #44	; 0x2c
 23fb10c:	f7ff fcda 	bl	23faac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fb110:	e771      	b.n	23faff6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fb112:	46bb      	mov	fp, r7
 23fb114:	e7d8      	b.n	23fb0c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fb116:	2701      	movs	r7, #1
 23fb118:	e7f3      	b.n	23fb102 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fb11a:	9b01      	ldr	r3, [sp, #4]
 23fb11c:	682d      	ldr	r5, [r5, #0]
 23fb11e:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fb122:	9b06      	ldr	r3, [sp, #24]
 23fb124:	781b      	ldrb	r3, [r3, #0]
 23fb126:	b92b      	cbnz	r3, 23fb134 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fb128:	f8d8 3000 	ldr.w	r3, [r8]
 23fb12c:	9a02      	ldr	r2, [sp, #8]
 23fb12e:	4413      	add	r3, r2
 23fb130:	7c1b      	ldrb	r3, [r3, #16]
 23fb132:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fb134:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fb136:	e78e      	b.n	23fb056 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb138:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb13a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb13c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fb13e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb140:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb142:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fb144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fb146:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb148:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fb14a:	60a2      	str	r2, [r4, #8]
 23fb14c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fb14e:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb150:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fb152:	60e2      	str	r2, [r4, #12]
 23fb154:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fb156:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb158:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fb15a:	6122      	str	r2, [r4, #16]
 23fb15c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fb15e:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fb160:	9b03      	ldr	r3, [sp, #12]
 23fb162:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fb164:	6162      	str	r2, [r4, #20]
 23fb166:	7623      	strb	r3, [r4, #24]
 23fb168:	e7cf      	b.n	23fb10a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fb16c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fb16c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fb16e:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fb170:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fb172:	4617      	mov	r7, r2
 23fb174:	b087      	sub	sp, #28
 23fb176:	460d      	mov	r5, r1
        stream_(&stream) {
 23fb178:	4668      	mov	r0, sp
 23fb17a:	4619      	mov	r1, r3
 23fb17c:	f7fb fca5 	bl	23f6aca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fb180:	4b0b      	ldr	r3, [pc, #44]	; (23fb1b0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fb182:	4669      	mov	r1, sp
 23fb184:	f846 3b04 	str.w	r3, [r6], #4
 23fb188:	a803      	add	r0, sp, #12
 23fb18a:	f7fb fc9e 	bl	23f6aca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fb18e:	4639      	mov	r1, r7
 23fb190:	aa03      	add	r2, sp, #12
 23fb192:	4630      	mov	r0, r6
 23fb194:	f7ff fef0 	bl	23faf78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fb198:	a803      	add	r0, sp, #12
 23fb19a:	f7fb fc55 	bl	23f6a48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fb19e:	4668      	mov	r0, sp
 23fb1a0:	f7fb fc52 	bl	23f6a48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fb1a4:	4620      	mov	r0, r4
        stream_(&stream) {
 23fb1a6:	4b03      	ldr	r3, [pc, #12]	; (23fb1b4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fb1a8:	6225      	str	r5, [r4, #32]
 23fb1aa:	6023      	str	r3, [r4, #0]
}
 23fb1ac:	b007      	add	sp, #28
 23fb1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fb1b0:	023ff2b0 	.word	0x023ff2b0
 23fb1b4:	023ff8cc 	.word	0x023ff8cc

023fb1b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fb1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fb1ba:	460f      	mov	r7, r1
 23fb1bc:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fb1be:	4638      	mov	r0, r7
 23fb1c0:	491c      	ldr	r1, [pc, #112]	; (23fb234 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fb1c2:	4616      	mov	r6, r2
 23fb1c4:	461d      	mov	r5, r3
 23fb1c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fb1c8:	f7fb fb5a 	bl	23f6880 <strcmp>
 23fb1cc:	b9c0      	cbnz	r0, 23fb200 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fb1ce:	b1a4      	cbz	r4, 23fb1fa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fb1d0:	4629      	mov	r1, r5
 23fb1d2:	a801      	add	r0, sp, #4
 23fb1d4:	f7ff fcbe 	bl	23fab54 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fb1d8:	2024      	movs	r0, #36	; 0x24
 23fb1da:	4917      	ldr	r1, [pc, #92]	; (23fb238 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fb1dc:	f001 fe8e 	bl	23fcefc <_ZnwjRKSt9nothrow_t>
 23fb1e0:	4605      	mov	r5, r0
 23fb1e2:	b130      	cbz	r0, 23fb1f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fb1e4:	ab01      	add	r3, sp, #4
 23fb1e6:	4632      	mov	r2, r6
 23fb1e8:	4621      	mov	r1, r4
 23fb1ea:	f7ff ffbf 	bl	23fb16c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fb1ee:	4b13      	ldr	r3, [pc, #76]	; (23fb23c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fb1f0:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fb1f2:	a801      	add	r0, sp, #4
 23fb1f4:	f7fb fc28 	bl	23f6a48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fb1f8:	462c      	mov	r4, r5
}
 23fb1fa:	4620      	mov	r0, r4
 23fb1fc:	b005      	add	sp, #20
 23fb1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fb200:	4638      	mov	r0, r7
 23fb202:	490f      	ldr	r1, [pc, #60]	; (23fb240 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fb204:	f7fb fb3c 	bl	23f6880 <strcmp>
 23fb208:	b990      	cbnz	r0, 23fb230 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fb20a:	2c00      	cmp	r4, #0
 23fb20c:	d0f5      	beq.n	23fb1fa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fb20e:	4629      	mov	r1, r5
 23fb210:	a801      	add	r0, sp, #4
 23fb212:	f7ff fc9f 	bl	23fab54 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fb216:	2024      	movs	r0, #36	; 0x24
 23fb218:	4907      	ldr	r1, [pc, #28]	; (23fb238 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fb21a:	f001 fe6f 	bl	23fcefc <_ZnwjRKSt9nothrow_t>
 23fb21e:	4605      	mov	r5, r0
 23fb220:	2800      	cmp	r0, #0
 23fb222:	d0e6      	beq.n	23fb1f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fb224:	4632      	mov	r2, r6
 23fb226:	4621      	mov	r1, r4
 23fb228:	ab01      	add	r3, sp, #4
 23fb22a:	f7ff ff9f 	bl	23fb16c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fb22e:	e7e0      	b.n	23fb1f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fb230:	2400      	movs	r4, #0
 23fb232:	e7e2      	b.n	23fb1fa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fb234:	023ff865 	.word	0x023ff865
 23fb238:	023ffac4 	.word	0x023ffac4
 23fb23c:	023ff8e4 	.word	0x023ff8e4
 23fb240:	023ff869 	.word	0x023ff869

023fb244 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fb244:	4b01      	ldr	r3, [pc, #4]	; (23fb24c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fb246:	4a02      	ldr	r2, [pc, #8]	; (23fb250 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fb248:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fb24a:	4770      	bx	lr
 23fb24c:	1007ae1c 	.word	0x1007ae1c
 23fb250:	023ff87a 	.word	0x023ff87a

023fb254 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fb254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fb258:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fb25a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fb25e:	4604      	mov	r4, r0
 23fb260:	460e      	mov	r6, r1
 23fb262:	4617      	mov	r7, r2
 23fb264:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fb266:	f001 fb67 	bl	23fc938 <_Z16_fetch_usbserialv>
 23fb26a:	4581      	cmp	r9, r0
 23fb26c:	d04d      	beq.n	23fb30a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fb26e:	792b      	ldrb	r3, [r5, #4]
 23fb270:	0719      	lsls	r1, r3, #28
 23fb272:	d504      	bpl.n	23fb27e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fb274:	4620      	mov	r0, r4
 23fb276:	696a      	ldr	r2, [r5, #20]
 23fb278:	4954      	ldr	r1, [pc, #336]	; (23fb3cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fb27a:	f7ff fae2 	bl	23fa842 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fb27e:	f1b8 0f00 	cmp.w	r8, #0
 23fb282:	d00d      	beq.n	23fb2a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fb284:	215b      	movs	r1, #91	; 0x5b
 23fb286:	4620      	mov	r0, r4
 23fb288:	f7ff fa4e 	bl	23fa728 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fb28c:	4641      	mov	r1, r8
 23fb28e:	4620      	mov	r0, r4
 23fb290:	f7ff fa3b 	bl	23fa70a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fb294:	6823      	ldr	r3, [r4, #0]
 23fb296:	2202      	movs	r2, #2
 23fb298:	4620      	mov	r0, r4
 23fb29a:	68db      	ldr	r3, [r3, #12]
 23fb29c:	494c      	ldr	r1, [pc, #304]	; (23fb3d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fb29e:	4798      	blx	r3
    if (attr.has_file) {
 23fb2a0:	792b      	ldrb	r3, [r5, #4]
 23fb2a2:	07da      	lsls	r2, r3, #31
 23fb2a4:	d524      	bpl.n	23fb2f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fb2a6:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fb2aa:	212f      	movs	r1, #47	; 0x2f
 23fb2ac:	4640      	mov	r0, r8
 23fb2ae:	f002 f82f 	bl	23fd310 <strrchr>
    if (s1) {
 23fb2b2:	b108      	cbz	r0, 23fb2b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fb2b4:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fb2b8:	4641      	mov	r1, r8
 23fb2ba:	4620      	mov	r0, r4
 23fb2bc:	f7ff fa25 	bl	23fa70a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fb2c0:	792b      	ldrb	r3, [r5, #4]
 23fb2c2:	079b      	lsls	r3, r3, #30
 23fb2c4:	d508      	bpl.n	23fb2d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fb2c6:	213a      	movs	r1, #58	; 0x3a
 23fb2c8:	4620      	mov	r0, r4
 23fb2ca:	f7ff fa2d 	bl	23fa728 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fb2ce:	4620      	mov	r0, r4
 23fb2d0:	68ea      	ldr	r2, [r5, #12]
 23fb2d2:	4940      	ldr	r1, [pc, #256]	; (23fb3d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fb2d4:	f7ff fab5 	bl	23fa842 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fb2d8:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fb2da:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fb2dc:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fb2e0:	4620      	mov	r0, r4
            write(", ", 2);
 23fb2e2:	f04f 0202 	mov.w	r2, #2
 23fb2e6:	68db      	ldr	r3, [r3, #12]
 23fb2e8:	bf14      	ite	ne
 23fb2ea:	493b      	ldrne	r1, [pc, #236]	; (23fb3d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fb2ec:	493b      	ldreq	r1, [pc, #236]	; (23fb3dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fb2ee:	4798      	blx	r3
    if (attr.has_function) {
 23fb2f0:	792b      	ldrb	r3, [r5, #4]
 23fb2f2:	0758      	lsls	r0, r3, #29
 23fb2f4:	d51d      	bpl.n	23fb332 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fb2f6:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fb2f8:	460b      	mov	r3, r1
 23fb2fa:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fb2fc:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fb300:	b160      	cbz	r0, 23fb31c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fb302:	2820      	cmp	r0, #32
 23fb304:	d108      	bne.n	23fb318 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fb306:	4619      	mov	r1, r3
 23fb308:	e7f7      	b.n	23fb2fa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fb30a:	4835      	ldr	r0, [pc, #212]	; (23fb3e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fb30c:	f000 f983 	bl	23fb616 <_ZN5spark12NetworkClass9listeningEv>
 23fb310:	2800      	cmp	r0, #0
 23fb312:	d0ac      	beq.n	23fb26e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fb314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fb318:	2828      	cmp	r0, #40	; 0x28
 23fb31a:	d1ee      	bne.n	23fb2fa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fb31c:	6823      	ldr	r3, [r4, #0]
 23fb31e:	1a52      	subs	r2, r2, r1
 23fb320:	4620      	mov	r0, r4
 23fb322:	68db      	ldr	r3, [r3, #12]
 23fb324:	4798      	blx	r3
        write("(): ", 4);
 23fb326:	6823      	ldr	r3, [r4, #0]
 23fb328:	2204      	movs	r2, #4
 23fb32a:	4620      	mov	r0, r4
 23fb32c:	68db      	ldr	r3, [r3, #12]
 23fb32e:	492d      	ldr	r1, [pc, #180]	; (23fb3e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fb330:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fb332:	2100      	movs	r1, #0
 23fb334:	4638      	mov	r0, r7
 23fb336:	f7fe fb91 	bl	23f9a5c <log_level_name>
 23fb33a:	4601      	mov	r1, r0
    write(s);
 23fb33c:	4620      	mov	r0, r4
 23fb33e:	f7ff f9e4 	bl	23fa70a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fb342:	6823      	ldr	r3, [r4, #0]
 23fb344:	2202      	movs	r2, #2
 23fb346:	4620      	mov	r0, r4
 23fb348:	68db      	ldr	r3, [r3, #12]
 23fb34a:	4924      	ldr	r1, [pc, #144]	; (23fb3dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fb34c:	4798      	blx	r3
    if (msg) {
 23fb34e:	b11e      	cbz	r6, 23fb358 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fb350:	4631      	mov	r1, r6
 23fb352:	4620      	mov	r0, r4
 23fb354:	f7ff f9d9 	bl	23fa70a <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fb358:	792b      	ldrb	r3, [r5, #4]
 23fb35a:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fb35e:	d02c      	beq.n	23fb3ba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fb360:	6823      	ldr	r3, [r4, #0]
 23fb362:	4921      	ldr	r1, [pc, #132]	; (23fb3e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fb364:	68db      	ldr	r3, [r3, #12]
 23fb366:	2202      	movs	r2, #2
 23fb368:	4620      	mov	r0, r4
 23fb36a:	4798      	blx	r3
        if (attr.has_code) {
 23fb36c:	792b      	ldrb	r3, [r5, #4]
 23fb36e:	06d9      	lsls	r1, r3, #27
 23fb370:	d50a      	bpl.n	23fb388 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fb372:	6823      	ldr	r3, [r4, #0]
 23fb374:	2207      	movs	r2, #7
 23fb376:	4620      	mov	r0, r4
 23fb378:	491c      	ldr	r1, [pc, #112]	; (23fb3ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fb37a:	68db      	ldr	r3, [r3, #12]
 23fb37c:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fb37e:	4620      	mov	r0, r4
 23fb380:	69aa      	ldr	r2, [r5, #24]
 23fb382:	491b      	ldr	r1, [pc, #108]	; (23fb3f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fb384:	f7ff fa5d 	bl	23fa842 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fb388:	792b      	ldrb	r3, [r5, #4]
 23fb38a:	069a      	lsls	r2, r3, #26
 23fb38c:	d511      	bpl.n	23fb3b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fb38e:	06db      	lsls	r3, r3, #27
 23fb390:	d505      	bpl.n	23fb39e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fb392:	6823      	ldr	r3, [r4, #0]
 23fb394:	2202      	movs	r2, #2
 23fb396:	4620      	mov	r0, r4
 23fb398:	68db      	ldr	r3, [r3, #12]
 23fb39a:	490f      	ldr	r1, [pc, #60]	; (23fb3d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fb39c:	4798      	blx	r3
            write("details = ", 10);
 23fb39e:	6823      	ldr	r3, [r4, #0]
 23fb3a0:	4620      	mov	r0, r4
 23fb3a2:	4914      	ldr	r1, [pc, #80]	; (23fb3f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fb3a4:	220a      	movs	r2, #10
 23fb3a6:	68db      	ldr	r3, [r3, #12]
 23fb3a8:	4798      	blx	r3
            write(attr.details);
 23fb3aa:	4620      	mov	r0, r4
 23fb3ac:	69e9      	ldr	r1, [r5, #28]
 23fb3ae:	f7ff f9ac 	bl	23fa70a <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fb3b2:	215d      	movs	r1, #93	; 0x5d
 23fb3b4:	4620      	mov	r0, r4
 23fb3b6:	f7ff f9b7 	bl	23fa728 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fb3ba:	6823      	ldr	r3, [r4, #0]
 23fb3bc:	4620      	mov	r0, r4
}
 23fb3be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fb3c2:	2202      	movs	r2, #2
 23fb3c4:	68db      	ldr	r3, [r3, #12]
 23fb3c6:	490c      	ldr	r1, [pc, #48]	; (23fb3f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fb3c8:	4718      	bx	r3
 23fb3ca:	bf00      	nop
 23fb3cc:	023ff87e 	.word	0x023ff87e
 23fb3d0:	023ff885 	.word	0x023ff885
 23fb3d4:	023ff988 	.word	0x023ff988
 23fb3d8:	023ff445 	.word	0x023ff445
 23fb3dc:	023ff5e5 	.word	0x023ff5e5
 23fb3e0:	1007ae48 	.word	0x1007ae48
 23fb3e4:	023ff5e3 	.word	0x023ff5e3
 23fb3e8:	023ff5e8 	.word	0x023ff5e8
 23fb3ec:	023ff888 	.word	0x023ff888
 23fb3f0:	023ff890 	.word	0x023ff890
 23fb3f4:	023ff5f5 	.word	0x023ff5f5
 23fb3f8:	023ff893 	.word	0x023ff893

023fb3fc <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fb3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb400:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fb402:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fb404:	460d      	mov	r5, r1
 23fb406:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fb408:	f001 fa96 	bl	23fc938 <_Z16_fetch_usbserialv>
 23fb40c:	4287      	cmp	r7, r0
 23fb40e:	d007      	beq.n	23fb420 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fb410:	6a20      	ldr	r0, [r4, #32]
 23fb412:	4632      	mov	r2, r6
 23fb414:	6803      	ldr	r3, [r0, #0]
 23fb416:	4629      	mov	r1, r5
}
 23fb418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fb41c:	68db      	ldr	r3, [r3, #12]
 23fb41e:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fb420:	4803      	ldr	r0, [pc, #12]	; (23fb430 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fb422:	f000 f8f8 	bl	23fb616 <_ZN5spark12NetworkClass9listeningEv>
 23fb426:	2800      	cmp	r0, #0
 23fb428:	d0f2      	beq.n	23fb410 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fb42a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fb42e:	bf00      	nop
 23fb430:	1007ae48 	.word	0x1007ae48

023fb434 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fb434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fb438:	b085      	sub	sp, #20
    return stream_;
 23fb43a:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fb43e:	4605      	mov	r5, r0
 23fb440:	460f      	mov	r7, r1
 23fb442:	4690      	mov	r8, r2
 23fb444:	461e      	mov	r6, r3
 23fb446:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fb448:	f001 fa76 	bl	23fc938 <_Z16_fetch_usbserialv>
 23fb44c:	4581      	cmp	r9, r0
 23fb44e:	d105      	bne.n	23fb45c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fb450:	4849      	ldr	r0, [pc, #292]	; (23fb578 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fb452:	f000 f8e0 	bl	23fb616 <_ZN5spark12NetworkClass9listeningEv>
 23fb456:	2800      	cmp	r0, #0
 23fb458:	f040 808a 	bne.w	23fb570 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fb45c:	f04f 0900 	mov.w	r9, #0
 23fb460:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fb462:	4a46      	ldr	r2, [pc, #280]	; (23fb57c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fb464:	a801      	add	r0, sp, #4
 23fb466:	9201      	str	r2, [sp, #4]
 23fb468:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fb46a:	f88d 9008 	strb.w	r9, [sp, #8]
 23fb46e:	f7ff f828 	bl	23fa4c2 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fb472:	4649      	mov	r1, r9
 23fb474:	4640      	mov	r0, r8
 23fb476:	f7fe faf1 	bl	23f9a5c <log_level_name>
 23fb47a:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fb47c:	4940      	ldr	r1, [pc, #256]	; (23fb580 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fb47e:	2201      	movs	r2, #1
 23fb480:	a801      	add	r0, sp, #4
 23fb482:	f7ff f8ad 	bl	23fa5e0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb486:	4641      	mov	r1, r8
 23fb488:	f7ff f931 	bl	23fa6ee <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fb48c:	b13f      	cbz	r7, 23fb49e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fb48e:	493d      	ldr	r1, [pc, #244]	; (23fb584 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fb490:	2201      	movs	r2, #1
 23fb492:	a801      	add	r0, sp, #4
 23fb494:	f7ff f8a4 	bl	23fa5e0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb498:	4639      	mov	r1, r7
 23fb49a:	f7ff f928 	bl	23fa6ee <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fb49e:	b13e      	cbz	r6, 23fb4b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fb4a0:	4939      	ldr	r1, [pc, #228]	; (23fb588 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fb4a2:	2201      	movs	r2, #1
 23fb4a4:	a801      	add	r0, sp, #4
 23fb4a6:	f7ff f89b 	bl	23fa5e0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb4aa:	4631      	mov	r1, r6
 23fb4ac:	f7ff f91f 	bl	23fa6ee <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fb4b0:	7923      	ldrb	r3, [r4, #4]
 23fb4b2:	07df      	lsls	r7, r3, #31
 23fb4b4:	d50e      	bpl.n	23fb4d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fb4b6:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fb4b8:	212f      	movs	r1, #47	; 0x2f
 23fb4ba:	4630      	mov	r0, r6
 23fb4bc:	f001 ff28 	bl	23fd310 <strrchr>
    if (s1) {
 23fb4c0:	b100      	cbz	r0, 23fb4c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fb4c2:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fb4c4:	4931      	ldr	r1, [pc, #196]	; (23fb58c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fb4c6:	2201      	movs	r2, #1
 23fb4c8:	a801      	add	r0, sp, #4
 23fb4ca:	f7ff f889 	bl	23fa5e0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb4ce:	4631      	mov	r1, r6
 23fb4d0:	f7ff f90d 	bl	23fa6ee <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fb4d4:	7923      	ldrb	r3, [r4, #4]
 23fb4d6:	079e      	lsls	r6, r3, #30
 23fb4d8:	d507      	bpl.n	23fb4ea <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fb4da:	492d      	ldr	r1, [pc, #180]	; (23fb590 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fb4dc:	2202      	movs	r2, #2
 23fb4de:	a801      	add	r0, sp, #4
 23fb4e0:	f7ff f87e 	bl	23fa5e0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb4e4:	68e1      	ldr	r1, [r4, #12]
 23fb4e6:	f7fe fff9 	bl	23fa4dc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fb4ea:	7923      	ldrb	r3, [r4, #4]
 23fb4ec:	0758      	lsls	r0, r3, #29
 23fb4ee:	d514      	bpl.n	23fb51a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fb4f0:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fb4f2:	4633      	mov	r3, r6
 23fb4f4:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fb4f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fb4fa:	b12a      	cbz	r2, 23fb508 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fb4fc:	2a20      	cmp	r2, #32
 23fb4fe:	d101      	bne.n	23fb504 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fb500:	461e      	mov	r6, r3
 23fb502:	e7f7      	b.n	23fb4f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fb504:	2a28      	cmp	r2, #40	; 0x28
 23fb506:	d1f5      	bne.n	23fb4f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fb508:	2202      	movs	r2, #2
 23fb50a:	4922      	ldr	r1, [pc, #136]	; (23fb594 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fb50c:	a801      	add	r0, sp, #4
 23fb50e:	f7ff f867 	bl	23fa5e0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb512:	4631      	mov	r1, r6
 23fb514:	1bba      	subs	r2, r7, r6
 23fb516:	f7ff f873 	bl	23fa600 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fb51a:	7923      	ldrb	r3, [r4, #4]
 23fb51c:	0719      	lsls	r1, r3, #28
 23fb51e:	d507      	bpl.n	23fb530 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fb520:	491d      	ldr	r1, [pc, #116]	; (23fb598 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fb522:	2201      	movs	r2, #1
 23fb524:	a801      	add	r0, sp, #4
 23fb526:	f7ff f85b 	bl	23fa5e0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb52a:	6961      	ldr	r1, [r4, #20]
 23fb52c:	f7fe ffe8 	bl	23fa500 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fb530:	7923      	ldrb	r3, [r4, #4]
 23fb532:	06da      	lsls	r2, r3, #27
 23fb534:	d508      	bpl.n	23fb548 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fb536:	2204      	movs	r2, #4
 23fb538:	4918      	ldr	r1, [pc, #96]	; (23fb59c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fb53a:	eb0d 0002 	add.w	r0, sp, r2
 23fb53e:	f7ff f84f 	bl	23fa5e0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb542:	69a1      	ldr	r1, [r4, #24]
 23fb544:	f7fe ffca 	bl	23fa4dc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fb548:	7923      	ldrb	r3, [r4, #4]
 23fb54a:	069b      	lsls	r3, r3, #26
 23fb54c:	d507      	bpl.n	23fb55e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fb54e:	4914      	ldr	r1, [pc, #80]	; (23fb5a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fb550:	2206      	movs	r2, #6
 23fb552:	a801      	add	r0, sp, #4
 23fb554:	f7ff f844 	bl	23fa5e0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb558:	69e1      	ldr	r1, [r4, #28]
 23fb55a:	f7ff f8c8 	bl	23fa6ee <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fb55e:	a801      	add	r0, sp, #4
 23fb560:	f7fe ff99 	bl	23fa496 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fb564:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fb566:	2202      	movs	r2, #2
 23fb568:	6803      	ldr	r3, [r0, #0]
 23fb56a:	490e      	ldr	r1, [pc, #56]	; (23fb5a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fb56c:	68db      	ldr	r3, [r3, #12]
 23fb56e:	4798      	blx	r3
}
 23fb570:	b005      	add	sp, #20
 23fb572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fb576:	bf00      	nop
 23fb578:	1007ae48 	.word	0x1007ae48
 23fb57c:	023ff8b4 	.word	0x023ff8b4
 23fb580:	023ff85b 	.word	0x023ff85b
 23fb584:	023ff896 	.word	0x023ff896
 23fb588:	023ffec0 	.word	0x023ffec0
 23fb58c:	023ff576 	.word	0x023ff576
 23fb590:	023ff898 	.word	0x023ff898
 23fb594:	023ff89b 	.word	0x023ff89b
 23fb598:	023ff550 	.word	0x023ff550
 23fb59c:	023ff89e 	.word	0x023ff89e
 23fb5a0:	023ff8a3 	.word	0x023ff8a3
 23fb5a4:	023ff893 	.word	0x023ff893

023fb5a8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fb5a8:	2300      	movs	r3, #0
 23fb5aa:	6840      	ldr	r0, [r0, #4]
 23fb5ac:	461a      	mov	r2, r3
 23fb5ae:	f7fe bb51 	b.w	23f9c54 <network_connect>

023fb5b2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fb5b2:	2200      	movs	r2, #0
 23fb5b4:	2102      	movs	r1, #2
 23fb5b6:	6840      	ldr	r0, [r0, #4]
 23fb5b8:	f7fe bb68 	b.w	23f9c8c <network_disconnect>

023fb5bc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fb5bc:	2200      	movs	r2, #0
 23fb5be:	6840      	ldr	r0, [r0, #4]
 23fb5c0:	4611      	mov	r1, r2
 23fb5c2:	f7fe bb55 	b.w	23f9c70 <network_connecting>

023fb5c6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fb5c6:	2200      	movs	r2, #0
 23fb5c8:	6840      	ldr	r0, [r0, #4]
 23fb5ca:	4611      	mov	r1, r2
 23fb5cc:	f7fe bb6c 	b.w	23f9ca8 <network_ready>

023fb5d0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fb5d0:	2300      	movs	r3, #0
 23fb5d2:	6840      	ldr	r0, [r0, #4]
 23fb5d4:	461a      	mov	r2, r3
 23fb5d6:	4619      	mov	r1, r3
 23fb5d8:	f7fe bb74 	b.w	23f9cc4 <network_on>

023fb5dc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fb5dc:	2300      	movs	r3, #0
 23fb5de:	6840      	ldr	r0, [r0, #4]
 23fb5e0:	461a      	mov	r2, r3
 23fb5e2:	4619      	mov	r1, r3
 23fb5e4:	f7fe bb7c 	b.w	23f9ce0 <network_off>

023fb5e8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fb5e8:	2100      	movs	r1, #0
 23fb5ea:	6840      	ldr	r0, [r0, #4]
 23fb5ec:	f7fe bbcc 	b.w	23f9d88 <network_is_on>

023fb5f0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fb5f0:	2100      	movs	r1, #0
 23fb5f2:	6840      	ldr	r0, [r0, #4]
 23fb5f4:	f7fe bbd6 	b.w	23f9da4 <network_is_off>

023fb5f8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fb5f8:	2200      	movs	r2, #0
 23fb5fa:	6840      	ldr	r0, [r0, #4]
 23fb5fc:	f081 0101 	eor.w	r1, r1, #1
 23fb600:	f7fe bb7c 	b.w	23f9cfc <network_listen>

023fb604 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fb604:	2200      	movs	r2, #0
 23fb606:	6840      	ldr	r0, [r0, #4]
 23fb608:	f7fe bba2 	b.w	23f9d50 <network_set_listen_timeout>

023fb60c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fb60c:	2200      	movs	r2, #0
 23fb60e:	6840      	ldr	r0, [r0, #4]
 23fb610:	4611      	mov	r1, r2
 23fb612:	f7fe bbab 	b.w	23f9d6c <network_get_listen_timeout>

023fb616 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fb616:	2200      	movs	r2, #0
 23fb618:	6840      	ldr	r0, [r0, #4]
 23fb61a:	4611      	mov	r1, r2
 23fb61c:	f7fe bb7c 	b.w	23f9d18 <network_listening>

023fb620 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_preferred(*this, preferred, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23fb620:	2100      	movs	r1, #0
 23fb622:	6840      	ldr	r0, [r0, #4]
 23fb624:	f7fe bbda 	b.w	23f9ddc <network_is_preferred>

023fb628 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fb628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fb62c:	b095      	sub	sp, #84	; 0x54
 23fb62e:	4614      	mov	r4, r2
 23fb630:	460d      	mov	r5, r1
 23fb632:	4607      	mov	r7, r0
    IPAddress addr;
 23fb634:	f7fe fdc8 	bl	23fa1c8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fb638:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fb63a:	221c      	movs	r2, #28
 23fb63c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fb63e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fb640:	f001 fde9 	bl	23fd216 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fb644:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fb646:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fb648:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fb64a:	2100      	movs	r1, #0
 23fb64c:	466b      	mov	r3, sp
 23fb64e:	aa0c      	add	r2, sp, #48	; 0x30
 23fb650:	f7fe f828 	bl	23f96a4 <netdb_getaddrinfo>
    if (!r) {
 23fb654:	4604      	mov	r4, r0
 23fb656:	2800      	cmp	r0, #0
 23fb658:	d14b      	bne.n	23fb6f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fb65a:	4602      	mov	r2, r0
 23fb65c:	2101      	movs	r1, #1
 23fb65e:	6868      	ldr	r0, [r5, #4]
 23fb660:	f7fe fb22 	bl	23f9ca8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fb664:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fb666:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fb668:	4622      	mov	r2, r4
 23fb66a:	6868      	ldr	r0, [r5, #4]
 23fb66c:	f7fe fb1c 	bl	23f9ca8 <network_ready>
        bool ok = false;
 23fb670:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fb672:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fb674:	9e00      	ldr	r6, [sp, #0]
 23fb676:	2e00      	cmp	r6, #0
 23fb678:	d03b      	beq.n	23fb6f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fb67a:	2900      	cmp	r1, #0
 23fb67c:	d139      	bne.n	23fb6f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fb67e:	6873      	ldr	r3, [r6, #4]
 23fb680:	2b02      	cmp	r3, #2
 23fb682:	d003      	beq.n	23fb68c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fb684:	2b0a      	cmp	r3, #10
 23fb686:	d011      	beq.n	23fb6ac <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fb688:	69f6      	ldr	r6, [r6, #28]
 23fb68a:	e7f4      	b.n	23fb676 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fb68c:	f1b8 0f00 	cmp.w	r8, #0
 23fb690:	d0fa      	beq.n	23fb688 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fb692:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fb694:	a806      	add	r0, sp, #24
 23fb696:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fb698:	1d3c      	adds	r4, r7, #4
 23fb69a:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fb69c:	f7fe fdd8 	bl	23fa250 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fb6a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fb6a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fb6a4:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fb6a6:	4641      	mov	r1, r8
 23fb6a8:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fb6aa:	e7ed      	b.n	23fb688 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fb6ac:	f1b9 0f00 	cmp.w	r9, #0
 23fb6b0:	d0ea      	beq.n	23fb688 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fb6b2:	2210      	movs	r2, #16
 23fb6b4:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fb6b6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fb6b8:	f001 fdad 	bl	23fd216 <memset>
                    a.v = 6;
 23fb6bc:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fb6be:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fb6c0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fb6c4:	f104 0308 	add.w	r3, r4, #8
 23fb6c8:	3418      	adds	r4, #24
 23fb6ca:	462a      	mov	r2, r5
 23fb6cc:	6818      	ldr	r0, [r3, #0]
 23fb6ce:	6859      	ldr	r1, [r3, #4]
 23fb6d0:	3308      	adds	r3, #8
 23fb6d2:	c203      	stmia	r2!, {r0, r1}
 23fb6d4:	42a3      	cmp	r3, r4
 23fb6d6:	4615      	mov	r5, r2
 23fb6d8:	d1f7      	bne.n	23fb6ca <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fb6da:	a901      	add	r1, sp, #4
 23fb6dc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fb6de:	1d3c      	adds	r4, r7, #4
 23fb6e0:	ad07      	add	r5, sp, #28
 23fb6e2:	f7fe fd7f 	bl	23fa1e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fb6e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fb6e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fb6ea:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fb6ec:	4649      	mov	r1, r9
 23fb6ee:	7023      	strb	r3, [r4, #0]
                    break;
 23fb6f0:	e7ca      	b.n	23fb688 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fb6f2:	9800      	ldr	r0, [sp, #0]
 23fb6f4:	f7fd ffc8 	bl	23f9688 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fb6f8:	4638      	mov	r0, r7
 23fb6fa:	b015      	add	sp, #84	; 0x54
 23fb6fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fb700 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23fb700:	3803      	subs	r0, #3
 23fb702:	2802      	cmp	r0, #2
 23fb704:	bf9a      	itte	ls
 23fb706:	4b02      	ldrls	r3, [pc, #8]	; (23fb710 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23fb708:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23fb70c:	4801      	ldrhi	r0, [pc, #4]	; (23fb714 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23fb70e:	4770      	bx	lr
 23fb710:	023ff924 	.word	0x023ff924
 23fb714:	1007ae48 	.word	0x1007ae48

023fb718 <_ZN5spark12NetworkClass9preferredEb>:
NetworkClass& NetworkClass::preferred(bool preferred) {
 23fb718:	b508      	push	{r3, lr}
    network_handle_t network = network_preferred(*this, preferred, nullptr);
 23fb71a:	2200      	movs	r2, #0
 23fb71c:	6840      	ldr	r0, [r0, #4]
 23fb71e:	f7fe fb4f 	bl	23f9dc0 <network_preferred>
}
 23fb722:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23fb726:	f7ff bfeb 	b.w	23fb700 <_ZN5spark12NetworkClass4fromEm>
	...

023fb72c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fb72c:	4b02      	ldr	r3, [pc, #8]	; (23fb738 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fb72e:	4a03      	ldr	r2, [pc, #12]	; (23fb73c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fb730:	601a      	str	r2, [r3, #0]
 23fb732:	2200      	movs	r2, #0
 23fb734:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fb736:	4770      	bx	lr
 23fb738:	1007ae48 	.word	0x1007ae48
 23fb73c:	023ff938 	.word	0x023ff938

023fb740 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fb740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb742:	4606      	mov	r6, r0
 23fb744:	460d      	mov	r5, r1
  size_t n = 0;
 23fb746:	2400      	movs	r4, #0
 23fb748:	188f      	adds	r7, r1, r2
  while (size--) {
 23fb74a:	42bd      	cmp	r5, r7
 23fb74c:	d00c      	beq.n	23fb768 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fb74e:	6833      	ldr	r3, [r6, #0]
 23fb750:	4630      	mov	r0, r6
 23fb752:	689b      	ldr	r3, [r3, #8]
 23fb754:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fb758:	4798      	blx	r3
     if (chunk>=0)
 23fb75a:	1e03      	subs	r3, r0, #0
 23fb75c:	db01      	blt.n	23fb762 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fb75e:	441c      	add	r4, r3
  while (size--) {
 23fb760:	e7f3      	b.n	23fb74a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fb762:	2c00      	cmp	r4, #0
 23fb764:	bf08      	it	eq
 23fb766:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fb768:	4620      	mov	r0, r4
 23fb76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fb76c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fb76c:	b513      	push	{r0, r1, r4, lr}
 23fb76e:	4604      	mov	r4, r0
    }
 23fb770:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fb772:	b159      	cbz	r1, 23fb78c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fb774:	9101      	str	r1, [sp, #4]
 23fb776:	f7fb f88d 	bl	23f6894 <strlen>
 23fb77a:	4602      	mov	r2, r0
 23fb77c:	4620      	mov	r0, r4
 23fb77e:	6823      	ldr	r3, [r4, #0]
 23fb780:	9901      	ldr	r1, [sp, #4]
 23fb782:	68db      	ldr	r3, [r3, #12]
    }
 23fb784:	b002      	add	sp, #8
 23fb786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fb78a:	4718      	bx	r3
    }
 23fb78c:	b002      	add	sp, #8
 23fb78e:	bd10      	pop	{r4, pc}

023fb790 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fb790:	6803      	ldr	r3, [r0, #0]
 23fb792:	689b      	ldr	r3, [r3, #8]
 23fb794:	4718      	bx	r3

023fb796 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fb796:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fb798:	2a01      	cmp	r2, #1
 23fb79a:	bf98      	it	ls
 23fb79c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fb79e:	b530      	push	{r4, r5, lr}
 23fb7a0:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fb7a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fb7a6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fb7a8:	460d      	mov	r5, r1
 23fb7aa:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fb7ae:	fb01 5312 	mls	r3, r1, r2, r5
 23fb7b2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fb7b6:	2b09      	cmp	r3, #9
 23fb7b8:	bf94      	ite	ls
 23fb7ba:	3330      	addls	r3, #48	; 0x30
 23fb7bc:	3337      	addhi	r3, #55	; 0x37
 23fb7be:	b2db      	uxtb	r3, r3
  } while(n);
 23fb7c0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fb7c2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fb7c6:	d9ef      	bls.n	23fb7a8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fb7c8:	4621      	mov	r1, r4
 23fb7ca:	f7ff ffcf 	bl	23fb76c <_ZN5Print5writeEPKc>
}
 23fb7ce:	b00b      	add	sp, #44	; 0x2c
 23fb7d0:	bd30      	pop	{r4, r5, pc}
	...

023fb7d4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fb7d4:	2200      	movs	r2, #0
 23fb7d6:	4b01      	ldr	r3, [pc, #4]	; (23fb7dc <_GLOBAL__sub_I_RGB+0x8>)
 23fb7d8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fb7da:	4770      	bx	lr
 23fb7dc:	1007ae50 	.word	0x1007ae50

023fb7e0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fb7e0:	b510      	push	{r4, lr}
 23fb7e2:	4604      	mov	r4, r0
 23fb7e4:	4608      	mov	r0, r1
{
    _spi = spi;
 23fb7e6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fb7e8:	f7fd ffbe 	bl	23f9768 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fb7ec:	2300      	movs	r3, #0
}
 23fb7ee:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fb7f0:	6063      	str	r3, [r4, #4]
}
 23fb7f2:	bd10      	pop	{r4, pc}

023fb7f4 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 23fb7f4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb7f8:	ec57 6b10 	vmov	r6, r7, d0
 23fb7fc:	4680      	mov	r8, r0
 23fb7fe:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
 23fb800:	2200      	movs	r2, #0
 23fb802:	2300      	movs	r3, #0
 23fb804:	ee10 0a10 	vmov	r0, s0
 23fb808:	4639      	mov	r1, r7
 23fb80a:	f7fa fdbf 	bl	23f638c <__aeabi_dcmplt>
 23fb80e:	b128      	cbz	r0, 23fb81c <_Z4dtoadhPc+0x28>
        val = -val;
 23fb810:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 23fb814:	461f      	mov	r7, r3
        *sout++ = '-';
 23fb816:	232d      	movs	r3, #45	; 0x2d
 23fb818:	f804 3b01 	strb.w	r3, [r4], #1
 23fb81c:	2300      	movs	r3, #0
    }
    long scale = 1;
 23fb81e:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 23fb822:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 23fb824:	b2d9      	uxtb	r1, r3
 23fb826:	4588      	cmp	r8, r1
 23fb828:	d903      	bls.n	23fb832 <_Z4dtoadhPc+0x3e>
        scale *= 10;
 23fb82a:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
 23fb82e:	3301      	adds	r3, #1
 23fb830:	e7f8      	b.n	23fb824 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
 23fb832:	4648      	mov	r0, r9
 23fb834:	f7fa face 	bl	23f5dd4 <__aeabi_i2d>
 23fb838:	4632      	mov	r2, r6
 23fb83a:	463b      	mov	r3, r7
 23fb83c:	f7fa fb34 	bl	23f5ea8 <__aeabi_dmul>
 23fb840:	4606      	mov	r6, r0
 23fb842:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
 23fb844:	f7fa fe86 	bl	23f6554 <__aeabi_d2ulz>
 23fb848:	468a      	mov	sl, r1
 23fb84a:	4605      	mov	r5, r0
 23fb84c:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
 23fb84e:	f7fa faf5 	bl	23f5e3c <__aeabi_ul2d>
 23fb852:	4602      	mov	r2, r0
 23fb854:	460b      	mov	r3, r1
 23fb856:	4630      	mov	r0, r6
 23fb858:	4639      	mov	r1, r7
 23fb85a:	f7fa f96d 	bl	23f5b38 <__aeabi_dsub>
 23fb85e:	2200      	movs	r2, #0
 23fb860:	4b13      	ldr	r3, [pc, #76]	; (23fb8b0 <_Z4dtoadhPc+0xbc>)
 23fb862:	f7fa fda7 	bl	23f63b4 <__aeabi_dcmpge>
 23fb866:	b110      	cbz	r0, 23fb86e <_Z4dtoadhPc+0x7a>
        fixed++;
 23fb868:	3501      	adds	r5, #1
 23fb86a:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
 23fb86e:	464a      	mov	r2, r9
 23fb870:	4628      	mov	r0, r5
 23fb872:	4659      	mov	r1, fp
 23fb874:	17d3      	asrs	r3, r2, #31
 23fb876:	f7fa fe21 	bl	23f64bc <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 23fb87a:	2301      	movs	r3, #1
 23fb87c:	4615      	mov	r5, r2
 23fb87e:	4621      	mov	r1, r4
 23fb880:	220a      	movs	r2, #10
 23fb882:	f001 f8da 	bl	23fca3a <ultoa>
    if (prec) {
 23fb886:	f1b8 0f00 	cmp.w	r8, #0
 23fb88a:	d00e      	beq.n	23fb8aa <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
 23fb88c:	4620      	mov	r0, r4
 23fb88e:	f7fb f801 	bl	23f6894 <strlen>
        *sout++ = '.';
 23fb892:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 23fb894:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 23fb896:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 23fb898:	220a      	movs	r2, #10
 23fb89a:	4643      	mov	r3, r8
 23fb89c:	4628      	mov	r0, r5
 23fb89e:	3101      	adds	r1, #1
    }
}
 23fb8a0:	b001      	add	sp, #4
 23fb8a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
 23fb8a6:	f001 b8c8 	b.w	23fca3a <ultoa>
}
 23fb8aa:	b001      	add	sp, #4
 23fb8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb8b0:	3fe00000 	.word	0x3fe00000

023fb8b4 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23fb8b4:	b510      	push	{r4, lr}
 23fb8b6:	4604      	mov	r4, r0
{
    free(buffer);
 23fb8b8:	6800      	ldr	r0, [r0, #0]
 23fb8ba:	f7fe faab 	bl	23f9e14 <free>
}
 23fb8be:	4620      	mov	r0, r4
 23fb8c0:	bd10      	pop	{r4, pc}

023fb8c2 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23fb8c2:	b510      	push	{r4, lr}
 23fb8c4:	4604      	mov	r4, r0
    if (buffer) {
 23fb8c6:	6800      	ldr	r0, [r0, #0]
 23fb8c8:	b108      	cbz	r0, 23fb8ce <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23fb8ca:	f7fe faa3 	bl	23f9e14 <free>
    }
    buffer = nullptr;
 23fb8ce:	2300      	movs	r3, #0
    capacity = len = 0;
 23fb8d0:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23fb8d4:	6023      	str	r3, [r4, #0]
}
 23fb8d6:	bd10      	pop	{r4, pc}

023fb8d8 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fb8d8:	b538      	push	{r3, r4, r5, lr}
 23fb8da:	4604      	mov	r4, r0
 23fb8dc:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fb8de:	6800      	ldr	r0, [r0, #0]
 23fb8e0:	3101      	adds	r1, #1
 23fb8e2:	f7fe faa5 	bl	23f9e30 <realloc>
    if (newbuffer) {
 23fb8e6:	b110      	cbz	r0, 23fb8ee <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
 23fb8e8:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23fb8ec:	2001      	movs	r0, #1
    }
    return 0;
}
 23fb8ee:	bd38      	pop	{r3, r4, r5, pc}

023fb8f0 <_ZN6String7reserveEj>:
{
 23fb8f0:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
 23fb8f2:	6803      	ldr	r3, [r0, #0]
{
 23fb8f4:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
 23fb8f6:	b123      	cbz	r3, 23fb902 <_ZN6String7reserveEj+0x12>
 23fb8f8:	6843      	ldr	r3, [r0, #4]
 23fb8fa:	428b      	cmp	r3, r1
 23fb8fc:	d301      	bcc.n	23fb902 <_ZN6String7reserveEj+0x12>
 23fb8fe:	2001      	movs	r0, #1
}
 23fb900:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23fb902:	4620      	mov	r0, r4
 23fb904:	f7ff ffe8 	bl	23fb8d8 <_ZN6String12changeBufferEj>
 23fb908:	2800      	cmp	r0, #0
 23fb90a:	d0f9      	beq.n	23fb900 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23fb90c:	68a3      	ldr	r3, [r4, #8]
 23fb90e:	2b00      	cmp	r3, #0
 23fb910:	d1f5      	bne.n	23fb8fe <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23fb912:	6822      	ldr	r2, [r4, #0]
 23fb914:	7013      	strb	r3, [r2, #0]
 23fb916:	e7f2      	b.n	23fb8fe <_ZN6String7reserveEj+0xe>

023fb918 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fb918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fb91a:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23fb91c:	4611      	mov	r1, r2
 23fb91e:	9201      	str	r2, [sp, #4]
{
 23fb920:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23fb922:	f7ff ffe5 	bl	23fb8f0 <_ZN6String7reserveEj>
 23fb926:	9a01      	ldr	r2, [sp, #4]
 23fb928:	b928      	cbnz	r0, 23fb936 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23fb92a:	4620      	mov	r0, r4
 23fb92c:	f7ff ffc9 	bl	23fb8c2 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23fb930:	4620      	mov	r0, r4
 23fb932:	b003      	add	sp, #12
 23fb934:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23fb936:	4629      	mov	r1, r5
    len = length;
 23fb938:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23fb93a:	6820      	ldr	r0, [r4, #0]
 23fb93c:	f001 fc44 	bl	23fd1c8 <memcpy>
    buffer[len] = 0;
 23fb940:	2100      	movs	r1, #0
 23fb942:	6822      	ldr	r2, [r4, #0]
 23fb944:	68a3      	ldr	r3, [r4, #8]
 23fb946:	54d1      	strb	r1, [r2, r3]
    return *this;
 23fb948:	e7f2      	b.n	23fb930 <_ZN6String4copyEPKcj+0x18>

023fb94a <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
 23fb94a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fb94c:	b513      	push	{r0, r1, r4, lr}
 23fb94e:	4604      	mov	r4, r0
    capacity = 0;
 23fb950:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fb954:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fb956:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23fb958:	b141      	cbz	r1, 23fb96c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
 23fb95a:	4608      	mov	r0, r1
 23fb95c:	9101      	str	r1, [sp, #4]
 23fb95e:	f7fa ff99 	bl	23f6894 <strlen>
 23fb962:	9901      	ldr	r1, [sp, #4]
 23fb964:	4602      	mov	r2, r0
 23fb966:	4620      	mov	r0, r4
 23fb968:	f7ff ffd6 	bl	23fb918 <_ZN6String4copyEPKcj>
}
 23fb96c:	4620      	mov	r0, r4
 23fb96e:	b002      	add	sp, #8
 23fb970:	bd10      	pop	{r4, pc}

023fb972 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fb972:	b538      	push	{r3, r4, r5, lr}
 23fb974:	4605      	mov	r5, r0
    if (buffer) {
 23fb976:	6800      	ldr	r0, [r0, #0]
{
 23fb978:	460c      	mov	r4, r1
    if (buffer) {
 23fb97a:	b170      	cbz	r0, 23fb99a <_ZN6String4moveERS_+0x28>
        if (capacity >= rhs.len && rhs.buffer) {
 23fb97c:	686a      	ldr	r2, [r5, #4]
 23fb97e:	688b      	ldr	r3, [r1, #8]
 23fb980:	429a      	cmp	r2, r3
 23fb982:	d308      	bcc.n	23fb996 <_ZN6String4moveERS_+0x24>
 23fb984:	6809      	ldr	r1, [r1, #0]
 23fb986:	b131      	cbz	r1, 23fb996 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
 23fb988:	f001 fc93 	bl	23fd2b2 <strcpy>
            len = rhs.len;
 23fb98c:	68a3      	ldr	r3, [r4, #8]
 23fb98e:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
 23fb990:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity = rhs.capacity;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity = 0;
    rhs.len = 0;
 23fb992:	60a3      	str	r3, [r4, #8]
}
 23fb994:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
 23fb996:	f7fe fa3d 	bl	23f9e14 <free>
    buffer = rhs.buffer;
 23fb99a:	6823      	ldr	r3, [r4, #0]
 23fb99c:	602b      	str	r3, [r5, #0]
    capacity = rhs.capacity;
 23fb99e:	6863      	ldr	r3, [r4, #4]
 23fb9a0:	606b      	str	r3, [r5, #4]
    len = rhs.len;
 23fb9a2:	68a3      	ldr	r3, [r4, #8]
 23fb9a4:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
 23fb9a6:	2300      	movs	r3, #0
    rhs.capacity = 0;
 23fb9a8:	e9c4 3300 	strd	r3, r3, [r4]
 23fb9ac:	e7f1      	b.n	23fb992 <_ZN6String4moveERS_+0x20>

023fb9ae <_ZN6StringC1EOS_>:
    buffer = nullptr;
 23fb9ae:	2300      	movs	r3, #0
String::String(String &&rval)
 23fb9b0:	b510      	push	{r4, lr}
 23fb9b2:	4604      	mov	r4, r0
    capacity = 0;
 23fb9b4:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fb9b8:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fb9ba:	7303      	strb	r3, [r0, #12]
    move(rval);
 23fb9bc:	f7ff ffd9 	bl	23fb972 <_ZN6String4moveERS_>
}
 23fb9c0:	4620      	mov	r0, r4
 23fb9c2:	bd10      	pop	{r4, pc}

023fb9c4 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23fb9c4:	4288      	cmp	r0, r1
{
 23fb9c6:	b510      	push	{r4, lr}
 23fb9c8:	4604      	mov	r4, r0
    if (this == &rhs) {
 23fb9ca:	d005      	beq.n	23fb9d8 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23fb9cc:	680b      	ldr	r3, [r1, #0]
 23fb9ce:	b12b      	cbz	r3, 23fb9dc <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23fb9d0:	688a      	ldr	r2, [r1, #8]
 23fb9d2:	4619      	mov	r1, r3
 23fb9d4:	f7ff ffa0 	bl	23fb918 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fb9d8:	4620      	mov	r0, r4
 23fb9da:	bd10      	pop	{r4, pc}
        invalidate();
 23fb9dc:	f7ff ff71 	bl	23fb8c2 <_ZN6String10invalidateEv>
 23fb9e0:	e7fa      	b.n	23fb9d8 <_ZN6StringaSERKS_+0x14>

023fb9e2 <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23fb9e2:	2300      	movs	r3, #0
String::String(const String &value)
 23fb9e4:	b510      	push	{r4, lr}
 23fb9e6:	4604      	mov	r4, r0
    capacity = 0;
 23fb9e8:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fb9ec:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fb9ee:	7303      	strb	r3, [r0, #12]
    *this = value;
 23fb9f0:	f7ff ffe8 	bl	23fb9c4 <_ZN6StringaSERKS_>
}
 23fb9f4:	4620      	mov	r0, r4
 23fb9f6:	bd10      	pop	{r4, pc}

023fb9f8 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
    if (this != &rval) {
 23fb9f8:	4288      	cmp	r0, r1
{
 23fb9fa:	b510      	push	{r4, lr}
 23fb9fc:	4604      	mov	r4, r0
    if (this != &rval) {
 23fb9fe:	d001      	beq.n	23fba04 <_ZN6StringaSEOS_+0xc>
        move(rval);
 23fba00:	f7ff ffb7 	bl	23fb972 <_ZN6String4moveERS_>
    }
    return *this;
}
 23fba04:	4620      	mov	r0, r4
 23fba06:	bd10      	pop	{r4, pc}

023fba08 <_ZN6StringaSEPKc>:
    return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 23fba08:	b513      	push	{r0, r1, r4, lr}
 23fba0a:	4604      	mov	r4, r0
    if (cstr) {
 23fba0c:	b159      	cbz	r1, 23fba26 <_ZN6StringaSEPKc+0x1e>
        copy(cstr, strlen(cstr));
 23fba0e:	4608      	mov	r0, r1
 23fba10:	9101      	str	r1, [sp, #4]
 23fba12:	f7fa ff3f 	bl	23f6894 <strlen>
 23fba16:	9901      	ldr	r1, [sp, #4]
 23fba18:	4602      	mov	r2, r0
 23fba1a:	4620      	mov	r0, r4
 23fba1c:	f7ff ff7c 	bl	23fb918 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fba20:	4620      	mov	r0, r4
 23fba22:	b002      	add	sp, #8
 23fba24:	bd10      	pop	{r4, pc}
        invalidate();
 23fba26:	f7ff ff4c 	bl	23fb8c2 <_ZN6String10invalidateEv>
 23fba2a:	e7f9      	b.n	23fba20 <_ZN6StringaSEPKc+0x18>

023fba2c <_ZN6StringC1Ec>:
    buffer = nullptr;
 23fba2c:	2300      	movs	r3, #0
String::String(char c)
 23fba2e:	b513      	push	{r0, r1, r4, lr}
 23fba30:	4604      	mov	r4, r0
    char buf[2] = {};
 23fba32:	f8ad 3004 	strh.w	r3, [sp, #4]
    capacity = 0;
 23fba36:	e9c0 3300 	strd	r3, r3, [r0]
    buf[0] = c;
 23fba3a:	f88d 1004 	strb.w	r1, [sp, #4]
    len = 0;
 23fba3e:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fba40:	7303      	strb	r3, [r0, #12]
    *this = buf;
 23fba42:	a901      	add	r1, sp, #4
 23fba44:	f7ff ffe0 	bl	23fba08 <_ZN6StringaSEPKc>
}
 23fba48:	4620      	mov	r0, r4
 23fba4a:	b002      	add	sp, #8
 23fba4c:	bd10      	pop	{r4, pc}

023fba4e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 23fba4e:	b570      	push	{r4, r5, r6, lr}
 23fba50:	460d      	mov	r5, r1
    buffer = nullptr;
 23fba52:	2100      	movs	r1, #0
String::String(int value, unsigned char base)
 23fba54:	4616      	mov	r6, r2
 23fba56:	4604      	mov	r4, r0
 23fba58:	b08a      	sub	sp, #40	; 0x28
    capacity = 0;
 23fba5a:	e9c0 1100 	strd	r1, r1, [r0]
    len = 0;
 23fba5e:	6081      	str	r1, [r0, #8]
    flags = 0;
 23fba60:	7301      	strb	r1, [r0, #12]
    char buf[34] = {};
 23fba62:	221e      	movs	r2, #30
 23fba64:	a802      	add	r0, sp, #8
 23fba66:	9101      	str	r1, [sp, #4]
 23fba68:	f001 fbd5 	bl	23fd216 <memset>
    itoa(value, buf, base);
 23fba6c:	4632      	mov	r2, r6
 23fba6e:	a901      	add	r1, sp, #4
 23fba70:	4628      	mov	r0, r5
 23fba72:	f001 f807 	bl	23fca84 <itoa>
    *this = buf;
 23fba76:	4620      	mov	r0, r4
 23fba78:	a901      	add	r1, sp, #4
 23fba7a:	f7ff ffc5 	bl	23fba08 <_ZN6StringaSEPKc>
}
 23fba7e:	4620      	mov	r0, r4
 23fba80:	b00a      	add	sp, #40	; 0x28
 23fba82:	bd70      	pop	{r4, r5, r6, pc}

023fba84 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
 23fba84:	b570      	push	{r4, r5, r6, lr}
 23fba86:	460d      	mov	r5, r1
    buffer = nullptr;
 23fba88:	2100      	movs	r1, #0
String::String(float value, int decimalPlaces)
 23fba8a:	ee10 6a10 	vmov	r6, s0
 23fba8e:	b08a      	sub	sp, #40	; 0x28
    char buf[33] = {};
 23fba90:	221d      	movs	r2, #29
String::String(float value, int decimalPlaces)
 23fba92:	4604      	mov	r4, r0
    capacity = 0;
 23fba94:	e9c0 1100 	strd	r1, r1, [r0]
    len = 0;
 23fba98:	6081      	str	r1, [r0, #8]
    flags = 0;
 23fba9a:	7301      	strb	r1, [r0, #12]
    char buf[33] = {};
 23fba9c:	a802      	add	r0, sp, #8
 23fba9e:	9101      	str	r1, [sp, #4]
 23fbaa0:	f001 fbb9 	bl	23fd216 <memset>
    dtoa(value, decimalPlaces, buf);
 23fbaa4:	4630      	mov	r0, r6
 23fbaa6:	f7fa f9a7 	bl	23f5df8 <__aeabi_f2d>
 23fbaaa:	b2ed      	uxtb	r5, r5
 23fbaac:	ec41 0b10 	vmov	d0, r0, r1
 23fbab0:	4628      	mov	r0, r5
 23fbab2:	a901      	add	r1, sp, #4
 23fbab4:	f7ff fe9e 	bl	23fb7f4 <_Z4dtoadhPc>
  *this = buf;
 23fbab8:	4620      	mov	r0, r4
 23fbaba:	a901      	add	r1, sp, #4
 23fbabc:	f7ff ffa4 	bl	23fba08 <_ZN6StringaSEPKc>
}
 23fbac0:	4620      	mov	r0, r4
 23fbac2:	b00a      	add	sp, #40	; 0x28
 23fbac4:	bd70      	pop	{r4, r5, r6, pc}

023fbac6 <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23fbac6:	b570      	push	{r4, r5, r6, lr}
 23fbac8:	4605      	mov	r5, r0
    unsigned int newlen = len + length;
    if (!cstr) {
 23fbaca:	460e      	mov	r6, r1
 23fbacc:	b909      	cbnz	r1, 23fbad2 <_ZN6String6concatEPKcj+0xc>
        return 0;
 23fbace:	2000      	movs	r0, #0
        return 0;
    }
    strcpy(buffer + len, cstr);
    len = newlen;
    return 1;
}
 23fbad0:	bd70      	pop	{r4, r5, r6, pc}
    if (length == 0) {
 23fbad2:	b16a      	cbz	r2, 23fbaf0 <_ZN6String6concatEPKcj+0x2a>
    unsigned int newlen = len + length;
 23fbad4:	6884      	ldr	r4, [r0, #8]
 23fbad6:	4414      	add	r4, r2
    if (!reserve(newlen)) {
 23fbad8:	4621      	mov	r1, r4
 23fbada:	f7ff ff09 	bl	23fb8f0 <_ZN6String7reserveEj>
 23fbade:	2800      	cmp	r0, #0
 23fbae0:	d0f5      	beq.n	23fbace <_ZN6String6concatEPKcj+0x8>
    strcpy(buffer + len, cstr);
 23fbae2:	6828      	ldr	r0, [r5, #0]
 23fbae4:	68ab      	ldr	r3, [r5, #8]
 23fbae6:	4631      	mov	r1, r6
 23fbae8:	4418      	add	r0, r3
 23fbaea:	f001 fbe2 	bl	23fd2b2 <strcpy>
    len = newlen;
 23fbaee:	60ac      	str	r4, [r5, #8]
        return 1;
 23fbaf0:	2001      	movs	r0, #1
 23fbaf2:	e7ed      	b.n	23fbad0 <_ZN6String6concatEPKcj+0xa>

023fbaf4 <_ZN6String6concatERKS_>:
    return concat(s.buffer, s.len);
 23fbaf4:	688a      	ldr	r2, [r1, #8]
 23fbaf6:	6809      	ldr	r1, [r1, #0]
 23fbaf8:	f7ff bfe5 	b.w	23fbac6 <_ZN6String6concatEPKcj>

023fbafc <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 23fbafc:	b513      	push	{r0, r1, r4, lr}
 23fbafe:	4604      	mov	r4, r0
    if (!cstr) {
        return 0;
    }
    return concat(cstr, strlen(cstr));
}
 23fbb00:	4608      	mov	r0, r1
    if (!cstr) {
 23fbb02:	b151      	cbz	r1, 23fbb1a <_ZN6String6concatEPKc+0x1e>
    return concat(cstr, strlen(cstr));
 23fbb04:	9101      	str	r1, [sp, #4]
 23fbb06:	f7fa fec5 	bl	23f6894 <strlen>
 23fbb0a:	4602      	mov	r2, r0
 23fbb0c:	4620      	mov	r0, r4
 23fbb0e:	9901      	ldr	r1, [sp, #4]
}
 23fbb10:	b002      	add	sp, #8
 23fbb12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return concat(cstr, strlen(cstr));
 23fbb16:	f7ff bfd6 	b.w	23fbac6 <_ZN6String6concatEPKcj>
}
 23fbb1a:	b002      	add	sp, #8
 23fbb1c:	bd10      	pop	{r4, pc}

023fbb1e <_ZN6String6concatEc>:
    return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
    char buf[2] = {};
 23fbb1e:	2300      	movs	r3, #0
{
 23fbb20:	b507      	push	{r0, r1, r2, lr}
    buf[0] = c;
    buf[1] = 0;
    return concat(buf, 1);
 23fbb22:	2201      	movs	r2, #1
    char buf[2] = {};
 23fbb24:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf[0] = c;
 23fbb28:	f88d 1004 	strb.w	r1, [sp, #4]
    return concat(buf, 1);
 23fbb2c:	a901      	add	r1, sp, #4
 23fbb2e:	f7ff ffca 	bl	23fbac6 <_ZN6String6concatEPKcj>
}
 23fbb32:	b003      	add	sp, #12
 23fbb34:	f85d fb04 	ldr.w	pc, [sp], #4

023fbb38 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 23fbb38:	b510      	push	{r4, lr}
    StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    if (!a.concat(rhs.buffer, rhs.len)) {
 23fbb3a:	688a      	ldr	r2, [r1, #8]
 23fbb3c:	6809      	ldr	r1, [r1, #0]
{
 23fbb3e:	4604      	mov	r4, r0
    if (!a.concat(rhs.buffer, rhs.len)) {
 23fbb40:	f7ff ffc1 	bl	23fbac6 <_ZN6String6concatEPKcj>
 23fbb44:	b910      	cbnz	r0, 23fbb4c <_ZplRK15StringSumHelperRK6String+0x14>
        a.invalidate();
 23fbb46:	4620      	mov	r0, r4
 23fbb48:	f7ff febb 	bl	23fb8c2 <_ZN6String10invalidateEv>
    }
    return a;
}
 23fbb4c:	4620      	mov	r0, r4
 23fbb4e:	bd10      	pop	{r4, pc}

023fbb50 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 23fbb50:	b513      	push	{r0, r1, r4, lr}
 23fbb52:	4604      	mov	r4, r0
    StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    if (!cstr || !a.concat(cstr, strlen(cstr))) {
 23fbb54:	b929      	cbnz	r1, 23fbb62 <_ZplRK15StringSumHelperPKc+0x12>
        a.invalidate();
 23fbb56:	4620      	mov	r0, r4
 23fbb58:	f7ff feb3 	bl	23fb8c2 <_ZN6String10invalidateEv>
    }
    return a;
}
 23fbb5c:	4620      	mov	r0, r4
 23fbb5e:	b002      	add	sp, #8
 23fbb60:	bd10      	pop	{r4, pc}
    if (!cstr || !a.concat(cstr, strlen(cstr))) {
 23fbb62:	4608      	mov	r0, r1
 23fbb64:	9101      	str	r1, [sp, #4]
 23fbb66:	f7fa fe95 	bl	23f6894 <strlen>
 23fbb6a:	9901      	ldr	r1, [sp, #4]
 23fbb6c:	4602      	mov	r2, r0
 23fbb6e:	4620      	mov	r0, r4
 23fbb70:	f7ff ffa9 	bl	23fbac6 <_ZN6String6concatEPKcj>
 23fbb74:	2800      	cmp	r0, #0
 23fbb76:	d0ee      	beq.n	23fbb56 <_ZplRK15StringSumHelperPKc+0x6>
 23fbb78:	e7f0      	b.n	23fbb5c <_ZplRK15StringSumHelperPKc+0xc>

023fbb7a <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    if (!buffer || !s.buffer) {
 23fbb7a:	6802      	ldr	r2, [r0, #0]
{
 23fbb7c:	460b      	mov	r3, r1
    if (!buffer || !s.buffer) {
 23fbb7e:	6809      	ldr	r1, [r1, #0]
 23fbb80:	b162      	cbz	r2, 23fbb9c <_ZNK6String9compareToERKS_+0x22>
 23fbb82:	b941      	cbnz	r1, 23fbb96 <_ZNK6String9compareToERKS_+0x1c>
        if (s.buffer && s.len > 0) {
            return 0 - *(unsigned char *)s.buffer;
        }
        if (buffer && len > 0) {
 23fbb84:	6880      	ldr	r0, [r0, #8]
 23fbb86:	b160      	cbz	r0, 23fbba2 <_ZNK6String9compareToERKS_+0x28>
            return *(unsigned char *)buffer;
 23fbb88:	7810      	ldrb	r0, [r2, #0]
 23fbb8a:	4770      	bx	lr
        if (s.buffer && s.len > 0) {
 23fbb8c:	6898      	ldr	r0, [r3, #8]
 23fbb8e:	b140      	cbz	r0, 23fbba2 <_ZNK6String9compareToERKS_+0x28>
            return 0 - *(unsigned char *)s.buffer;
 23fbb90:	7809      	ldrb	r1, [r1, #0]
 23fbb92:	4248      	negs	r0, r1
 23fbb94:	4770      	bx	lr
        }
        return 0;
    }
    return strcmp(buffer, s.buffer);
 23fbb96:	4610      	mov	r0, r2
 23fbb98:	f7fa be72 	b.w	23f6880 <strcmp>
        if (s.buffer && s.len > 0) {
 23fbb9c:	2900      	cmp	r1, #0
 23fbb9e:	d1f5      	bne.n	23fbb8c <_ZNK6String9compareToERKS_+0x12>
        return 0;
 23fbba0:	4608      	mov	r0, r1
}
 23fbba2:	4770      	bx	lr

023fbba4 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
 23fbba4:	b508      	push	{r3, lr}
    return (len == s2.len && compareTo(s2) == 0);
 23fbba6:	6882      	ldr	r2, [r0, #8]
 23fbba8:	688b      	ldr	r3, [r1, #8]
 23fbbaa:	429a      	cmp	r2, r3
 23fbbac:	d105      	bne.n	23fbbba <_ZNK6String6equalsERKS_+0x16>
 23fbbae:	f7ff ffe4 	bl	23fbb7a <_ZNK6String9compareToERKS_>
 23fbbb2:	fab0 f080 	clz	r0, r0
 23fbbb6:	0940      	lsrs	r0, r0, #5
}
 23fbbb8:	bd08      	pop	{r3, pc}
    return (len == s2.len && compareTo(s2) == 0);
 23fbbba:	2000      	movs	r0, #0
 23fbbbc:	e7fc      	b.n	23fbbb8 <_ZNK6String6equalsERKS_+0x14>

023fbbbe <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
 23fbbbe:	b508      	push	{r3, lr}
    if (len == 0) {
 23fbbc0:	6882      	ldr	r2, [r0, #8]
 23fbbc2:	b93a      	cbnz	r2, 23fbbd4 <_ZNK6String6equalsEPKc+0x16>
        return (cstr == nullptr || *cstr == 0);
 23fbbc4:	b121      	cbz	r1, 23fbbd0 <_ZNK6String6equalsEPKc+0x12>
 23fbbc6:	7808      	ldrb	r0, [r1, #0]
    }
    if (cstr == nullptr) {
        return buffer[0] == 0;
    }
    return strcmp(buffer, cstr) == 0;
 23fbbc8:	fab0 f080 	clz	r0, r0
 23fbbcc:	0940      	lsrs	r0, r0, #5
 23fbbce:	e000      	b.n	23fbbd2 <_ZNK6String6equalsEPKc+0x14>
        return (cstr == nullptr || *cstr == 0);
 23fbbd0:	2001      	movs	r0, #1
}
 23fbbd2:	bd08      	pop	{r3, pc}
        return buffer[0] == 0;
 23fbbd4:	6800      	ldr	r0, [r0, #0]
    if (cstr == nullptr) {
 23fbbd6:	b909      	cbnz	r1, 23fbbdc <_ZNK6String6equalsEPKc+0x1e>
        return buffer[0] == 0;
 23fbbd8:	7800      	ldrb	r0, [r0, #0]
 23fbbda:	e7f5      	b.n	23fbbc8 <_ZNK6String6equalsEPKc+0xa>
    return strcmp(buffer, cstr) == 0;
 23fbbdc:	f7fa fe50 	bl	23f6880 <strcmp>
 23fbbe0:	e7f2      	b.n	23fbbc8 <_ZNK6String6equalsEPKc+0xa>

023fbbe2 <_ZNK6String16equalsIgnoreCaseERKS_>:
    return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
    if (this == &s2) {
 23fbbe2:	4288      	cmp	r0, r1
{
 23fbbe4:	b570      	push	{r4, r5, r6, lr}
    if (this == &s2) {
 23fbbe6:	d015      	beq.n	23fbc14 <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
        return 1;
    }
    if (len != s2.len) {
 23fbbe8:	6883      	ldr	r3, [r0, #8]
 23fbbea:	688a      	ldr	r2, [r1, #8]
 23fbbec:	4293      	cmp	r3, r2
 23fbbee:	d10f      	bne.n	23fbc10 <_ZNK6String16equalsIgnoreCaseERKS_+0x2e>
        return 0;
    }
    if (len == 0) {
 23fbbf0:	b183      	cbz	r3, 23fbc14 <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
 23fbbf2:	6804      	ldr	r4, [r0, #0]
 23fbbf4:	680e      	ldr	r6, [r1, #0]
        return 1;
    }
    const char *p1 = buffer;
    const char *p2 = s2.buffer;
 23fbbf6:	3c01      	subs	r4, #1
    while (*p1) {
 23fbbf8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 23fbbfc:	b150      	cbz	r0, 23fbc14 <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
        if (tolower(*p1++) != tolower(*p2++)) {
 23fbbfe:	f002 fa51 	bl	23fe0a4 <tolower>
 23fbc02:	4605      	mov	r5, r0
 23fbc04:	f816 0b01 	ldrb.w	r0, [r6], #1
 23fbc08:	f002 fa4c 	bl	23fe0a4 <tolower>
 23fbc0c:	4285      	cmp	r5, r0
 23fbc0e:	d0f3      	beq.n	23fbbf8 <_ZNK6String16equalsIgnoreCaseERKS_+0x16>
        return 0;
 23fbc10:	2000      	movs	r0, #0
            return 0;
        }
    }
    return 1;
}
 23fbc12:	bd70      	pop	{r4, r5, r6, pc}
        return 1;
 23fbc14:	2001      	movs	r0, #1
 23fbc16:	e7fc      	b.n	23fbc12 <_ZNK6String16equalsIgnoreCaseERKS_+0x30>

023fbc18 <_ZNK6String10startsWithERKS_j>:
    }
    return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 23fbc18:	4613      	mov	r3, r2
 23fbc1a:	b510      	push	{r4, lr}
    if (offset > len - s2.len || !buffer || !s2.buffer) {
 23fbc1c:	688a      	ldr	r2, [r1, #8]
 23fbc1e:	6884      	ldr	r4, [r0, #8]
 23fbc20:	1aa4      	subs	r4, r4, r2
 23fbc22:	429c      	cmp	r4, r3
 23fbc24:	d30a      	bcc.n	23fbc3c <_ZNK6String10startsWithERKS_j+0x24>
 23fbc26:	6800      	ldr	r0, [r0, #0]
 23fbc28:	b138      	cbz	r0, 23fbc3a <_ZNK6String10startsWithERKS_j+0x22>
 23fbc2a:	6809      	ldr	r1, [r1, #0]
 23fbc2c:	b141      	cbz	r1, 23fbc40 <_ZNK6String10startsWithERKS_j+0x28>
        return 0;
    }
    return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 23fbc2e:	4418      	add	r0, r3
 23fbc30:	f001 fb47 	bl	23fd2c2 <strncmp>
 23fbc34:	fab0 f080 	clz	r0, r0
 23fbc38:	0940      	lsrs	r0, r0, #5
}
 23fbc3a:	bd10      	pop	{r4, pc}
        return 0;
 23fbc3c:	2000      	movs	r0, #0
 23fbc3e:	e7fc      	b.n	23fbc3a <_ZNK6String10startsWithERKS_j+0x22>
 23fbc40:	4608      	mov	r0, r1
 23fbc42:	e7fa      	b.n	23fbc3a <_ZNK6String10startsWithERKS_j+0x22>

023fbc44 <_ZNK6String10startsWithERKS_>:
    if (len < s2.len) {
 23fbc44:	6882      	ldr	r2, [r0, #8]
 23fbc46:	688b      	ldr	r3, [r1, #8]
 23fbc48:	429a      	cmp	r2, r3
 23fbc4a:	d302      	bcc.n	23fbc52 <_ZNK6String10startsWithERKS_+0xe>
    return startsWith(s2, 0);
 23fbc4c:	2200      	movs	r2, #0
 23fbc4e:	f7ff bfe3 	b.w	23fbc18 <_ZNK6String10startsWithERKS_j>
}
 23fbc52:	2000      	movs	r0, #0
 23fbc54:	4770      	bx	lr

023fbc56 <_ZNK6StringixEj>:
    return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
    if (index >= len || !buffer) {
 23fbc56:	6883      	ldr	r3, [r0, #8]
 23fbc58:	428b      	cmp	r3, r1
 23fbc5a:	d903      	bls.n	23fbc64 <_ZNK6StringixEj+0xe>
 23fbc5c:	6800      	ldr	r0, [r0, #0]
 23fbc5e:	b110      	cbz	r0, 23fbc66 <_ZNK6StringixEj+0x10>
        return 0;
    }
    return buffer[index];
 23fbc60:	5c40      	ldrb	r0, [r0, r1]
 23fbc62:	4770      	bx	lr
        return 0;
 23fbc64:	2000      	movs	r0, #0
}
 23fbc66:	4770      	bx	lr

023fbc68 <_ZNK6String6charAtEj>:
    return operator[](loc);
 23fbc68:	f7ff bff5 	b.w	23fbc56 <_ZNK6StringixEj>

023fbc6c <_ZNK6String7indexOfEcj>:
{
    return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
 23fbc6c:	b510      	push	{r4, lr}
    if (fromIndex >= len) {
 23fbc6e:	6883      	ldr	r3, [r0, #8]
 23fbc70:	4293      	cmp	r3, r2
 23fbc72:	d906      	bls.n	23fbc82 <_ZNK6String7indexOfEcj+0x16>
        return -1;
    }
    const char* temp = strchr(buffer + fromIndex, ch);
 23fbc74:	6804      	ldr	r4, [r0, #0]
 23fbc76:	18a0      	adds	r0, r4, r2
 23fbc78:	f001 fb04 	bl	23fd284 <strchr>
    if (temp == nullptr) {
 23fbc7c:	b108      	cbz	r0, 23fbc82 <_ZNK6String7indexOfEcj+0x16>
        return -1;
    }
    return temp - buffer;
 23fbc7e:	1b00      	subs	r0, r0, r4
}
 23fbc80:	bd10      	pop	{r4, pc}
        return -1;
 23fbc82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fbc86:	e7fb      	b.n	23fbc80 <_ZNK6String7indexOfEcj+0x14>

023fbc88 <_ZNK6String7indexOfEc>:
    return indexOf(c, 0);
 23fbc88:	2200      	movs	r2, #0
 23fbc8a:	f7ff bfef 	b.w	23fbc6c <_ZNK6String7indexOfEcj>
	...

023fbc90 <_ZNK6String9substringEjj>:
{
    return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 23fbc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbc92:	461d      	mov	r5, r3
    if (left > right) {
 23fbc94:	429a      	cmp	r2, r3
 23fbc96:	bf88      	it	hi
 23fbc98:	4613      	movhi	r3, r2
{
 23fbc9a:	460f      	mov	r7, r1
 23fbc9c:	4614      	mov	r4, r2
    if (left > right) {
 23fbc9e:	bf88      	it	hi
 23fbca0:	462c      	movhi	r4, r5
        unsigned int temp = right;
        right = left;
        left = temp;
    }
    String out;
 23fbca2:	490b      	ldr	r1, [pc, #44]	; (23fbcd0 <_ZNK6String9substringEjj+0x40>)
    if (left > right) {
 23fbca4:	bf88      	it	hi
 23fbca6:	461d      	movhi	r5, r3
{
 23fbca8:	4606      	mov	r6, r0
    String out;
 23fbcaa:	f7ff fe4e 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
    if (left > len) {
 23fbcae:	68bb      	ldr	r3, [r7, #8]
 23fbcb0:	42a3      	cmp	r3, r4
 23fbcb2:	d30a      	bcc.n	23fbcca <_ZNK6String9substringEjj+0x3a>
        return out;
    }
    if (right > len) {
        right = len;
    }
    out.copy(&buffer[left], right - left);
 23fbcb4:	6839      	ldr	r1, [r7, #0]
 23fbcb6:	42ab      	cmp	r3, r5
 23fbcb8:	bf94      	ite	ls
 23fbcba:	ebc4 0203 	rsbls	r2, r4, r3
 23fbcbe:	ebc4 0205 	rsbhi	r2, r4, r5
 23fbcc2:	4630      	mov	r0, r6
 23fbcc4:	4421      	add	r1, r4
 23fbcc6:	f7ff fe27 	bl	23fb918 <_ZN6String4copyEPKcj>
    return out;
}
 23fbcca:	4630      	mov	r0, r6
 23fbccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fbcce:	bf00      	nop
 23fbcd0:	023ff895 	.word	0x023ff895

023fbcd4 <_ZNK6String9substringEj>:
{
 23fbcd4:	b510      	push	{r4, lr}
 23fbcd6:	4604      	mov	r4, r0
    return substring(left, len);
 23fbcd8:	688b      	ldr	r3, [r1, #8]
 23fbcda:	f7ff ffd9 	bl	23fbc90 <_ZNK6String9substringEjj>
}
 23fbcde:	4620      	mov	r0, r4
 23fbce0:	bd10      	pop	{r4, pc}

023fbce2 <_ZN6String11toLowerCaseEv>:
    buffer[len] = 0;
    return *this;
}

String& String::toLowerCase(void)
{
 23fbce2:	b538      	push	{r3, r4, r5, lr}
    if (buffer) {
 23fbce4:	6804      	ldr	r4, [r0, #0]
{
 23fbce6:	4605      	mov	r5, r0
    if (buffer) {
 23fbce8:	b13c      	cbz	r4, 23fbcfa <_ZN6String11toLowerCaseEv+0x18>
 23fbcea:	3c01      	subs	r4, #1
        for (char *p = buffer; *p; p++) {
 23fbcec:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 23fbcf0:	b118      	cbz	r0, 23fbcfa <_ZN6String11toLowerCaseEv+0x18>
            *p = tolower(*p);
 23fbcf2:	f002 f9d7 	bl	23fe0a4 <tolower>
 23fbcf6:	7020      	strb	r0, [r4, #0]
        for (char *p = buffer; *p; p++) {
 23fbcf8:	e7f8      	b.n	23fbcec <_ZN6String11toLowerCaseEv+0xa>
        }
    }
    return *this;
}
 23fbcfa:	4628      	mov	r0, r5
 23fbcfc:	bd38      	pop	{r3, r4, r5, pc}

023fbcfe <_ZN6String4trimEv>:
    }
    return *this;
}

String& String::trim(void)
{
 23fbcfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!buffer || len == 0) {
 23fbd02:	6806      	ldr	r6, [r0, #0]
{
 23fbd04:	4605      	mov	r5, r0
    if (!buffer || len == 0) {
 23fbd06:	b306      	cbz	r6, 23fbd4a <_ZN6String4trimEv+0x4c>
 23fbd08:	6884      	ldr	r4, [r0, #8]
 23fbd0a:	b1f4      	cbz	r4, 23fbd4a <_ZN6String4trimEv+0x4c>
 23fbd0c:	46b0      	mov	r8, r6
 23fbd0e:	4647      	mov	r7, r8
        return *this;
    }
    char *begin = buffer;
    while (isspace(*begin)) {
 23fbd10:	f818 0b01 	ldrb.w	r0, [r8], #1
 23fbd14:	f001 fa50 	bl	23fd1b8 <isspace>
 23fbd18:	2800      	cmp	r0, #0
 23fbd1a:	d1f8      	bne.n	23fbd0e <_ZN6String4trimEv+0x10>
        begin++;
    }
    char *end = buffer + len - 1;
 23fbd1c:	3c01      	subs	r4, #1
 23fbd1e:	4434      	add	r4, r6
    while (isspace(*end) && end >= begin) {
 23fbd20:	7820      	ldrb	r0, [r4, #0]
 23fbd22:	f001 fa49 	bl	23fd1b8 <isspace>
 23fbd26:	b118      	cbz	r0, 23fbd30 <_ZN6String4trimEv+0x32>
 23fbd28:	42a7      	cmp	r7, r4
 23fbd2a:	d801      	bhi.n	23fbd30 <_ZN6String4trimEv+0x32>
        end--;
 23fbd2c:	3c01      	subs	r4, #1
    while (isspace(*end) && end >= begin) {
 23fbd2e:	e7f7      	b.n	23fbd20 <_ZN6String4trimEv+0x22>
    }
    len = end + 1 - begin;
 23fbd30:	1c62      	adds	r2, r4, #1
 23fbd32:	1bd2      	subs	r2, r2, r7
    if (begin > buffer) {
 23fbd34:	42be      	cmp	r6, r7
    len = end + 1 - begin;
 23fbd36:	60aa      	str	r2, [r5, #8]
    if (begin > buffer) {
 23fbd38:	d203      	bcs.n	23fbd42 <_ZN6String4trimEv+0x44>
        memcpy(buffer, begin, len);
 23fbd3a:	4639      	mov	r1, r7
 23fbd3c:	4630      	mov	r0, r6
 23fbd3e:	f001 fa43 	bl	23fd1c8 <memcpy>
    }
    buffer[len] = 0;
 23fbd42:	2100      	movs	r1, #0
 23fbd44:	682a      	ldr	r2, [r5, #0]
 23fbd46:	68ab      	ldr	r3, [r5, #8]
 23fbd48:	54d1      	strb	r1, [r2, r3]
  return *this;
}
 23fbd4a:	4628      	mov	r0, r5
 23fbd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fbd50 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
    if (buffer) {
 23fbd50:	6800      	ldr	r0, [r0, #0]
 23fbd52:	b108      	cbz	r0, 23fbd58 <_ZNK6String5toIntEv+0x8>
        return atol(buffer);
 23fbd54:	f001 ba23 	b.w	23fd19e <atol>
    }
    return 0;
}
 23fbd58:	4770      	bx	lr
	...

023fbd5c <_ZNK6String7toFloatEv>:
    }
    return 0;
}

float String::toFloat(void) const
{
 23fbd5c:	b508      	push	{r3, lr}
    if (buffer) {
 23fbd5e:	6800      	ldr	r0, [r0, #0]
 23fbd60:	b140      	cbz	r0, 23fbd74 <_ZNK6String7toFloatEv+0x18>
        return float(atof(buffer));
 23fbd62:	f001 fa19 	bl	23fd198 <atof>
 23fbd66:	ec51 0b10 	vmov	r0, r1, d0
 23fbd6a:	f7fa fb57 	bl	23f641c <__aeabi_d2f>
 23fbd6e:	ee00 0a10 	vmov	s0, r0
    }
    return 0;
}
 23fbd72:	bd08      	pop	{r3, pc}
    return 0;
 23fbd74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 23fbd7c <_ZNK6String7toFloatEv+0x20>
 23fbd78:	e7fb      	b.n	23fbd72 <_ZNK6String7toFloatEv+0x16>
 23fbd7a:	bf00      	nop
 23fbd7c:	00000000 	.word	0x00000000

023fbd80 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 23fbd80:	b40e      	push	{r1, r2, r3}
 23fbd82:	b570      	push	{r4, r5, r6, lr}
 23fbd84:	b087      	sub	sp, #28
 23fbd86:	ad0b      	add	r5, sp, #44	; 0x2c
 23fbd88:	f855 2b04 	ldr.w	r2, [r5], #4
 23fbd8c:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 23fbd8e:	462b      	mov	r3, r5
 23fbd90:	2105      	movs	r1, #5
 23fbd92:	a804      	add	r0, sp, #16
 23fbd94:	9201      	str	r2, [sp, #4]
    va_start(marker, fmt);
 23fbd96:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 23fbd98:	f7fe f874 	bl	23f9e84 <vsnprintf>
 23fbd9c:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 23fbd9e:	490b      	ldr	r1, [pc, #44]	; (23fbdcc <_ZN6String6formatEPKcz+0x4c>)
 23fbda0:	4620      	mov	r0, r4
 23fbda2:	f7ff fdd2 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 23fbda6:	4631      	mov	r1, r6
 23fbda8:	4620      	mov	r0, r4
 23fbdaa:	f7ff fda1 	bl	23fb8f0 <_ZN6String7reserveEj>
    if (result.buffer) {
 23fbdae:	6820      	ldr	r0, [r4, #0]
 23fbdb0:	b130      	cbz	r0, 23fbdc0 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 23fbdb2:	462b      	mov	r3, r5
 23fbdb4:	9a01      	ldr	r2, [sp, #4]
 23fbdb6:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 23fbdb8:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 23fbdba:	f7fe f863 	bl	23f9e84 <vsnprintf>
        va_end(marker);
        result.len = n;
 23fbdbe:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 23fbdc0:	4620      	mov	r0, r4
 23fbdc2:	b007      	add	sp, #28
 23fbdc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fbdc8:	b003      	add	sp, #12
 23fbdca:	4770      	bx	lr
 23fbdcc:	023ff895 	.word	0x023ff895

023fbdd0 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 23fbdd0:	b507      	push	{r0, r1, r2, lr}
 23fbdd2:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23fbdd4:	2100      	movs	r1, #0
{
 23fbdd6:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23fbdd8:	9100      	str	r1, [sp, #0]
 23fbdda:	2001      	movs	r0, #1
 23fbddc:	218c      	movs	r1, #140	; 0x8c
 23fbdde:	f7fd fec9 	bl	23f9b74 <system_reset>
}
 23fbde2:	b003      	add	sp, #12
 23fbde4:	f85d fb04 	ldr.w	pc, [sp], #4

023fbde8 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 23fbde8:	4601      	mov	r1, r0
    reset(0, flags);
 23fbdea:	2000      	movs	r0, #0
 23fbdec:	f7ff bff0 	b.w	23fbdd0 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

023fbdf0 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 23fbdf0:	2000      	movs	r0, #0
 23fbdf2:	f7ff bff9 	b.w	23fbde8 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

023fbdf6 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
 23fbdf6:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
 23fbdf8:	2420      	movs	r4, #32
{
 23fbdfa:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
 23fbdfc:	4622      	mov	r2, r4
 23fbdfe:	2100      	movs	r1, #0
 23fbe00:	4668      	mov	r0, sp
 23fbe02:	f001 fa08 	bl	23fd216 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
 23fbe06:	2100      	movs	r1, #0
 23fbe08:	4668      	mov	r0, sp
    info.size = sizeof(info);
 23fbe0a:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
 23fbe0e:	f7fd faf9 	bl	23f9404 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
 23fbe12:	9801      	ldr	r0, [sp, #4]
 23fbe14:	b008      	add	sp, #32
 23fbe16:	bd10      	pop	{r4, pc}

023fbe18 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fbe18:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fbe1a:	2000      	movs	r0, #0
 23fbe1c:	4b04      	ldr	r3, [pc, #16]	; (23fbe30 <_GLOBAL__sub_I_System+0x18>)
 23fbe1e:	601a      	str	r2, [r3, #0]
 23fbe20:	4b04      	ldr	r3, [pc, #16]	; (23fbe34 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fbe22:	4a05      	ldr	r2, [pc, #20]	; (23fbe38 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fbe24:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fbe28:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fbe2a:	f7fd be41 	b.w	23f9ab0 <set_system_mode>
 23fbe2e:	bf00      	nop
 23fbe30:	1007ae6c 	.word	0x1007ae6c
 23fbe34:	1007ae60 	.word	0x1007ae60
 23fbe38:	ffff0000 	.word	0xffff0000

023fbe3c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
 23fbe3c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
 23fbe3e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
 23fbe40:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
 23fbe44:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 23fbe46:	2201      	movs	r2, #1
 23fbe48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fbe4c:	f10d 0107 	add.w	r1, sp, #7
 23fbe50:	47a0      	blx	r4
}
 23fbe52:	b002      	add	sp, #8
 23fbe54:	bd10      	pop	{r4, pc}

023fbe56 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
 23fbe56:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
 23fbe58:	6803      	ldr	r3, [r0, #0]
 23fbe5a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 23fbe5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fbe60:	46a4      	mov	ip, r4
}
 23fbe62:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
 23fbe66:	4760      	bx	ip

023fbe68 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
 23fbe68:	b513      	push	{r0, r1, r4, lr}
 23fbe6a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 23fbe6c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
 23fbe6e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 23fbe72:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 23fbe74:	f10d 0107 	add.w	r1, sp, #7
 23fbe78:	2201      	movs	r2, #1
 23fbe7a:	47a0      	blx	r4
}
 23fbe7c:	b002      	add	sp, #8
 23fbe7e:	bd10      	pop	{r4, pc}

023fbe80 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
 23fbe80:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fbe82:	6943      	ldr	r3, [r0, #20]
 23fbe84:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 23fbe86:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fbe8a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23fbe8e:	429a      	cmp	r2, r3
 23fbe90:	d008      	beq.n	23fbea4 <_ZN9TCPClient4readEv+0x24>
 23fbe92:	6963      	ldr	r3, [r4, #20]
 23fbe94:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 23fbe98:	1c51      	adds	r1, r2, #1
 23fbe9a:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 23fbe9e:	4413      	add	r3, r2
 23fbea0:	7918      	ldrb	r0, [r3, #4]
}
 23fbea2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 23fbea4:	6803      	ldr	r3, [r0, #0]
 23fbea6:	691b      	ldr	r3, [r3, #16]
 23fbea8:	4798      	blx	r3
 23fbeaa:	2800      	cmp	r0, #0
 23fbeac:	d1f1      	bne.n	23fbe92 <_ZN9TCPClient4readEv+0x12>
 23fbeae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fbeb2:	e7f6      	b.n	23fbea2 <_ZN9TCPClient4readEv+0x22>

023fbeb4 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
 23fbeb4:	4770      	bx	lr

023fbeb6 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
 23fbeb6:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
 23fbeb8:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
 23fbeba:	43c0      	mvns	r0, r0
 23fbebc:	0fc0      	lsrs	r0, r0, #31
 23fbebe:	4770      	bx	lr

023fbec0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fbec0:	4770      	bx	lr
	...

023fbec4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fbec4:	4b06      	ldr	r3, [pc, #24]	; (23fbee0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fbec6:	b510      	push	{r4, lr}
	    ||
 23fbec8:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fbeca:	f100 040c 	add.w	r4, r0, #12
 23fbece:	d005      	beq.n	23fbedc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fbed0:	4608      	mov	r0, r1
 23fbed2:	f001 f81b 	bl	23fcf0c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fbed6:	2800      	cmp	r0, #0
 23fbed8:	bf08      	it	eq
 23fbeda:	2400      	moveq	r4, #0
      }
 23fbedc:	4620      	mov	r0, r4
 23fbede:	bd10      	pop	{r4, pc}
 23fbee0:	023ff7c0 	.word	0x023ff7c0

023fbee4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fbee4:	b510      	push	{r4, lr}
 23fbee6:	4604      	mov	r4, r0
 23fbee8:	21ac      	movs	r1, #172	; 0xac
 23fbeea:	f7fa fd16 	bl	23f691a <_ZdlPvj>
 23fbeee:	4620      	mov	r0, r4
 23fbef0:	bd10      	pop	{r4, pc}

023fbef2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 23fbef2:	21ac      	movs	r1, #172	; 0xac
 23fbef4:	f7fa bd11 	b.w	23f691a <_ZdlPvj>

023fbef8 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
 23fbef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 23fbefc:	f04f 0800 	mov.w	r8, #0
 23fbf00:	461c      	mov	r4, r3
 23fbf02:	b086      	sub	sp, #24
 23fbf04:	f8c0 8004 	str.w	r8, [r0, #4]
 23fbf08:	4605      	mov	r5, r0
 23fbf0a:	460e      	mov	r6, r1
 23fbf0c:	4617      	mov	r7, r2
    struct timeval tv = {};
 23fbf0e:	4641      	mov	r1, r8
 23fbf10:	2210      	movs	r2, #16
 23fbf12:	a802      	add	r0, sp, #8
 23fbf14:	f001 f97f 	bl	23fd216 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
 23fbf18:	1c63      	adds	r3, r4, #1
 23fbf1a:	d009      	beq.n	23fbf30 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
 23fbf1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fbf20:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
 23fbf24:	fb03 4412 	mls	r4, r3, r2, r4
 23fbf28:	435c      	muls	r4, r3
        tv.tv_sec = timeout / 1000;
 23fbf2a:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
 23fbf2e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
 23fbf30:	2310      	movs	r3, #16
 23fbf32:	6968      	ldr	r0, [r5, #20]
 23fbf34:	9300      	str	r3, [sp, #0]
 23fbf36:	f241 0205 	movw	r2, #4101	; 0x1005
 23fbf3a:	f640 71ff 	movw	r1, #4095	; 0xfff
 23fbf3e:	6800      	ldr	r0, [r0, #0]
 23fbf40:	ab02      	add	r3, sp, #8
 23fbf42:	f7fd fbbd 	bl	23f96c0 <sock_setsockopt>
    if (ret < 0) {
 23fbf46:	2800      	cmp	r0, #0
 23fbf48:	da07      	bge.n	23fbf5a <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
 23fbf4a:	f7fd ffc5 	bl	23f9ed8 <__errno>
 23fbf4e:	6803      	ldr	r3, [r0, #0]
        return 0;
 23fbf50:	2000      	movs	r0, #0
 23fbf52:	606b      	str	r3, [r5, #4]
}
 23fbf54:	b006      	add	sp, #24
 23fbf56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
 23fbf5a:	6968      	ldr	r0, [r5, #20]
 23fbf5c:	2300      	movs	r3, #0
 23fbf5e:	463a      	mov	r2, r7
 23fbf60:	4631      	mov	r1, r6
 23fbf62:	6800      	ldr	r0, [r0, #0]
 23fbf64:	f7fd fbe4 	bl	23f9730 <sock_send>
    if (ret < 0) {
 23fbf68:	1e03      	subs	r3, r0, #0
 23fbf6a:	dbee      	blt.n	23fbf4a <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
 23fbf6c:	4618      	mov	r0, r3
 23fbf6e:	e7f1      	b.n	23fbf54 <_ZN9TCPClient5writeEPKhjm+0x5c>

023fbf70 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 23fbf70:	b538      	push	{r3, r4, r5, lr}
 23fbf72:	4b0b      	ldr	r3, [pc, #44]	; (23fbfa0 <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 23fbf74:	6984      	ldr	r4, [r0, #24]
 23fbf76:	4605      	mov	r5, r0
 23fbf78:	6003      	str	r3, [r0, #0]
 23fbf7a:	b17c      	cbz	r4, 23fbf9c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 23fbf7c:	6863      	ldr	r3, [r4, #4]
 23fbf7e:	3b01      	subs	r3, #1
 23fbf80:	6063      	str	r3, [r4, #4]
 23fbf82:	b95b      	cbnz	r3, 23fbf9c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 23fbf84:	6823      	ldr	r3, [r4, #0]
 23fbf86:	4620      	mov	r0, r4
 23fbf88:	689b      	ldr	r3, [r3, #8]
 23fbf8a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fbf8c:	68a3      	ldr	r3, [r4, #8]
 23fbf8e:	3b01      	subs	r3, #1
 23fbf90:	60a3      	str	r3, [r4, #8]
 23fbf92:	b91b      	cbnz	r3, 23fbf9c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 23fbf94:	6823      	ldr	r3, [r4, #0]
 23fbf96:	4620      	mov	r0, r4
 23fbf98:	68db      	ldr	r3, [r3, #12]
 23fbf9a:	4798      	blx	r3
 23fbf9c:	4628      	mov	r0, r5
 23fbf9e:	bd38      	pop	{r3, r4, r5, pc}
 23fbfa0:	023ff9b0 	.word	0x023ff9b0

023fbfa4 <_ZN9TCPClientD0Ev>:
 23fbfa4:	b510      	push	{r4, lr}
 23fbfa6:	4604      	mov	r4, r0
 23fbfa8:	f7ff ffe2 	bl	23fbf70 <_ZN9TCPClientD1Ev>
 23fbfac:	4620      	mov	r0, r4
 23fbfae:	211c      	movs	r1, #28
 23fbfb0:	f7fa fcb3 	bl	23f691a <_ZdlPvj>
 23fbfb4:	4620      	mov	r0, r4
 23fbfb6:	bd10      	pop	{r4, pc}

023fbfb8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
 23fbfb8:	b530      	push	{r4, r5, lr}
 23fbfba:	4604      	mov	r4, r0
 23fbfbc:	b087      	sub	sp, #28
        return *this = IPAddress(address);
 23fbfbe:	4668      	mov	r0, sp
 23fbfc0:	f7fe f946 	bl	23fa250 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fbfc4:	ad01      	add	r5, sp, #4
 23fbfc6:	3404      	adds	r4, #4
 23fbfc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fbfca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fbfcc:	682b      	ldr	r3, [r5, #0]
 23fbfce:	7023      	strb	r3, [r4, #0]
    }
 23fbfd0:	b007      	add	sp, #28
 23fbfd2:	bd30      	pop	{r4, r5, pc}

023fbfd4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
 23fbfd4:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 23fbfd6:	4604      	mov	r4, r0
 23fbfd8:	4606      	mov	r6, r0
      { return _M_ptr; }
 23fbfda:	694d      	ldr	r5, [r1, #20]
 23fbfdc:	4b04      	ldr	r3, [pc, #16]	; (23fbff0 <_ZN9TCPClient8remoteIPEv+0x1c>)
 23fbfde:	358c      	adds	r5, #140	; 0x8c
 23fbfe0:	f844 3b04 	str.w	r3, [r4], #4
 23fbfe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fbfe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fbfe8:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 23fbfea:	4630      	mov	r0, r6
 23fbfec:	7023      	strb	r3, [r4, #0]
 23fbfee:	bd70      	pop	{r4, r5, r6, pc}
 23fbff0:	023ff83c 	.word	0x023ff83c

023fbff4 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fbff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fbff8:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
 23fbffa:	2400      	movs	r4, #0
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fbffc:	4698      	mov	r8, r3
    stop();
 23fbffe:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fc000:	b093      	sub	sp, #76	; 0x4c
    stop();
 23fc002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fc004:	4606      	mov	r6, r0
 23fc006:	4617      	mov	r7, r2
    stop();
 23fc008:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23fc00a:	4628      	mov	r0, r5
 23fc00c:	466b      	mov	r3, sp
 23fc00e:	4622      	mov	r2, r4
 23fc010:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
 23fc012:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23fc014:	f7fd fb46 	bl	23f96a4 <netdb_getaddrinfo>
 23fc018:	4605      	mov	r5, r0
 23fc01a:	2800      	cmp	r0, #0
 23fc01c:	d163      	bne.n	23fc0e6 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
 23fc01e:	9b00      	ldr	r3, [sp, #0]
 23fc020:	2b00      	cmp	r3, #0
 23fc022:	d04b      	beq.n	23fc0bc <_ZN9TCPClient7connectEPKctm+0xc8>
 23fc024:	695b      	ldr	r3, [r3, #20]
 23fc026:	2b00      	cmp	r3, #0
 23fc028:	d048      	beq.n	23fc0bc <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
 23fc02a:	a806      	add	r0, sp, #24
 23fc02c:	f7fe f8cc 	bl	23fa1c8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
 23fc030:	9b00      	ldr	r3, [sp, #0]
 23fc032:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
 23fc034:	7863      	ldrb	r3, [r4, #1]
 23fc036:	2b02      	cmp	r3, #2
 23fc038:	d104      	bne.n	23fc044 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
 23fc03a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
 23fc03c:	a806      	add	r0, sp, #24
 23fc03e:	f7ff ffbb 	bl	23fbfb8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
 23fc042:	e026      	b.n	23fc092 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
 23fc044:	2b0a      	cmp	r3, #10
 23fc046:	d124      	bne.n	23fc092 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
 23fc048:	2211      	movs	r2, #17
 23fc04a:	4629      	mov	r1, r5
 23fc04c:	a801      	add	r0, sp, #4
 23fc04e:	f001 f8e2 	bl	23fd216 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
 23fc052:	68a3      	ldr	r3, [r4, #8]
 23fc054:	2b00      	cmp	r3, #0
 23fc056:	d038      	beq.n	23fc0ca <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fc058:	f104 0308 	add.w	r3, r4, #8
 23fc05c:	f10d 0c04 	add.w	ip, sp, #4
 23fc060:	3418      	adds	r4, #24
 23fc062:	4662      	mov	r2, ip
 23fc064:	6818      	ldr	r0, [r3, #0]
 23fc066:	6859      	ldr	r1, [r3, #4]
 23fc068:	3308      	adds	r3, #8
 23fc06a:	c203      	stmia	r2!, {r0, r1}
 23fc06c:	42a3      	cmp	r3, r4
 23fc06e:	4694      	mov	ip, r2
 23fc070:	d1f7      	bne.n	23fc062 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
 23fc072:	2306      	movs	r3, #6
            addr = IPAddress(a);
 23fc074:	a901      	add	r1, sp, #4
 23fc076:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
 23fc078:	f88d 3014 	strb.w	r3, [sp, #20]
 23fc07c:	ac07      	add	r4, sp, #28
            addr = IPAddress(a);
 23fc07e:	f7fe f8b1 	bl	23fa1e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fc082:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23fc086:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23fc08a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fc08c:	f8dc 3000 	ldr.w	r3, [ip]
 23fc090:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
 23fc092:	a806      	add	r0, sp, #24
 23fc094:	f7fe f8b8 	bl	23fa208 <_ZNK9IPAddresscvbEv>
        if (addr) {
 23fc098:	b180      	cbz	r0, 23fc0bc <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
 23fc09a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 23fc09c:	ac0d      	add	r4, sp, #52	; 0x34
 23fc09e:	f8d3 9020 	ldr.w	r9, [r3, #32]
 23fc0a2:	4b12      	ldr	r3, [pc, #72]	; (23fc0ec <_ZN9TCPClient7connectEPKctm+0xf8>)
 23fc0a4:	ad07      	add	r5, sp, #28
 23fc0a6:	930c      	str	r3, [sp, #48]	; 0x30
 23fc0a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fc0aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fc0ac:	682b      	ldr	r3, [r5, #0]
 23fc0ae:	463a      	mov	r2, r7
 23fc0b0:	7023      	strb	r3, [r4, #0]
 23fc0b2:	4630      	mov	r0, r6
 23fc0b4:	4643      	mov	r3, r8
 23fc0b6:	a90c      	add	r1, sp, #48	; 0x30
 23fc0b8:	47c8      	blx	r9
 23fc0ba:	4605      	mov	r5, r0
    SCOPE_GUARD({
 23fc0bc:	9800      	ldr	r0, [sp, #0]
 23fc0be:	f7fd fae3 	bl	23f9688 <netdb_freeaddrinfo>
}
 23fc0c2:	4628      	mov	r0, r5
 23fc0c4:	b013      	add	sp, #76	; 0x4c
 23fc0c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
 23fc0ca:	68e3      	ldr	r3, [r4, #12]
 23fc0cc:	2b00      	cmp	r3, #0
 23fc0ce:	d1c3      	bne.n	23fc058 <_ZN9TCPClient7connectEPKctm+0x64>
 23fc0d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 23fc0d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 23fc0d8:	f7fd faba 	bl	23f9650 <inet_htonl>
 23fc0dc:	4581      	cmp	r9, r0
 23fc0de:	d1bb      	bne.n	23fc058 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
 23fc0e0:	f104 0114 	add.w	r1, r4, #20
 23fc0e4:	e7aa      	b.n	23fc03c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23fc0e6:	4625      	mov	r5, r4
 23fc0e8:	e7e8      	b.n	23fc0bc <_ZN9TCPClient7connectEPKctm+0xc8>
 23fc0ea:	bf00      	nop
 23fc0ec:	023ff83c 	.word	0x023ff83c

023fc0f0 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
 23fc0f0:	b538      	push	{r3, r4, r5, lr}
 23fc0f2:	6943      	ldr	r3, [r0, #20]
 23fc0f4:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
 23fc0f6:	681a      	ldr	r2, [r3, #0]
 23fc0f8:	2a00      	cmp	r2, #0
 23fc0fa:	da10      	bge.n	23fc11e <_ZN9TCPClient9connectedEv+0x2e>
 23fc0fc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fc100:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23fc104:	429a      	cmp	r2, r3
 23fc106:	d10a      	bne.n	23fc11e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
 23fc108:	6803      	ldr	r3, [r0, #0]
 23fc10a:	691b      	ldr	r3, [r3, #16]
 23fc10c:	4798      	blx	r3
        if (!rv) {
 23fc10e:	4604      	mov	r4, r0
 23fc110:	b928      	cbnz	r0, 23fc11e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
 23fc112:	682b      	ldr	r3, [r5, #0]
 23fc114:	4628      	mov	r0, r5
 23fc116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc118:	4798      	blx	r3
        rv = available();
 23fc11a:	4620      	mov	r0, r4
}
 23fc11c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
 23fc11e:	2001      	movs	r0, #1
 23fc120:	e7fc      	b.n	23fc11c <_ZN9TCPClient9connectedEv+0x2c>

023fc122 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
 23fc122:	b510      	push	{r4, lr}
 23fc124:	6943      	ldr	r3, [r0, #20]
 23fc126:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 23fc128:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fc12c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23fc130:	429a      	cmp	r2, r3
 23fc132:	d005      	beq.n	23fc140 <_ZN9TCPClient4peekEv+0x1e>
 23fc134:	6963      	ldr	r3, [r4, #20]
 23fc136:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 23fc13a:	4413      	add	r3, r2
 23fc13c:	7918      	ldrb	r0, [r3, #4]
}
 23fc13e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 23fc140:	6803      	ldr	r3, [r0, #0]
 23fc142:	691b      	ldr	r3, [r3, #16]
 23fc144:	4798      	blx	r3
 23fc146:	2800      	cmp	r0, #0
 23fc148:	d1f4      	bne.n	23fc134 <_ZN9TCPClient4peekEv+0x12>
 23fc14a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fc14e:	e7f6      	b.n	23fc13e <_ZN9TCPClient4peekEv+0x1c>

023fc150 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
 23fc150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc152:	6943      	ldr	r3, [r0, #20]
 23fc154:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
 23fc156:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fc15a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
int TCPClient::read(uint8_t *buffer, size_t size) {
 23fc15e:	4605      	mov	r5, r0
    if (bufferCount() || available()) {
 23fc160:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
 23fc162:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
 23fc164:	d016      	beq.n	23fc194 <_ZN9TCPClient4readEPhj+0x44>
 23fc166:	6969      	ldr	r1, [r5, #20]
        memcpy(buffer, &d_->buffer[d_->offset], read);
 23fc168:	4630      	mov	r0, r6
    return d_->total - d_->offset;
 23fc16a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 23fc16e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 23fc172:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 23fc174:	42bc      	cmp	r4, r7
 23fc176:	bf28      	it	cs
 23fc178:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
 23fc17a:	3304      	adds	r3, #4
 23fc17c:	4622      	mov	r2, r4
 23fc17e:	4419      	add	r1, r3
 23fc180:	f001 f822 	bl	23fd1c8 <memcpy>
 23fc184:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
 23fc186:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 23fc18a:	4423      	add	r3, r4
 23fc18c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 23fc190:	4620      	mov	r0, r4
 23fc192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
 23fc194:	6803      	ldr	r3, [r0, #0]
 23fc196:	691b      	ldr	r3, [r3, #16]
 23fc198:	4798      	blx	r3
 23fc19a:	2800      	cmp	r0, #0
 23fc19c:	d1e3      	bne.n	23fc166 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
 23fc19e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 23fc1a2:	e7f5      	b.n	23fc190 <_ZN9TCPClient4readEPhj+0x40>

023fc1a4 <_ZN9TCPClient12flush_bufferEv>:
    d_->offset = 0;
 23fc1a4:	2300      	movs	r3, #0
 23fc1a6:	6942      	ldr	r2, [r0, #20]
 23fc1a8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 23fc1ac:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
 23fc1ae:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 23fc1b2:	4770      	bx	lr

023fc1b4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23fc1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fc1b8:	460c      	mov	r4, r1
 23fc1ba:	4605      	mov	r5, r0
 23fc1bc:	461f      	mov	r7, r3
    stop();
 23fc1be:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23fc1c0:	b08a      	sub	sp, #40	; 0x28
    stop();
 23fc1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23fc1c4:	4616      	mov	r6, r2
    stop();
 23fc1c6:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
 23fc1c8:	7d23      	ldrb	r3, [r4, #20]
 23fc1ca:	2206      	movs	r2, #6
 23fc1cc:	2b04      	cmp	r3, #4
 23fc1ce:	bf0c      	ite	eq
 23fc1d0:	2002      	moveq	r0, #2
 23fc1d2:	200a      	movne	r0, #10
 23fc1d4:	2101      	movs	r1, #1
 23fc1d6:	f8d5 8014 	ldr.w	r8, [r5, #20]
 23fc1da:	f7fd fab7 	bl	23f974c <sock_socket>
 23fc1de:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
 23fc1e2:	696b      	ldr	r3, [r5, #20]
 23fc1e4:	681b      	ldr	r3, [r3, #0]
 23fc1e6:	2b00      	cmp	r3, #0
 23fc1e8:	da08      	bge.n	23fc1fc <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
 23fc1ea:	682b      	ldr	r3, [r5, #0]
 23fc1ec:	4628      	mov	r0, r5
 23fc1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fc1f0:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
 23fc1f2:	4798      	blx	r3
}
 23fc1f4:	4620      	mov	r0, r4
 23fc1f6:	b00a      	add	sp, #40	; 0x28
 23fc1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
 23fc1fc:	4628      	mov	r0, r5
 23fc1fe:	f7ff ffd1 	bl	23fc1a4 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
 23fc202:	b1b7      	cbz	r7, 23fc232 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
 23fc204:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fc206:	a903      	add	r1, sp, #12
 23fc208:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
 23fc20a:	9303      	str	r3, [sp, #12]
 23fc20c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fc210:	f7fd fa02 	bl	23f9618 <if_index_to_name>
 23fc214:	2800      	cmp	r0, #0
 23fc216:	d1e8      	bne.n	23fc1ea <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
 23fc218:	2306      	movs	r3, #6
 23fc21a:	6968      	ldr	r0, [r5, #20]
 23fc21c:	9300      	str	r3, [sp, #0]
 23fc21e:	f241 020b 	movw	r2, #4107	; 0x100b
 23fc222:	f640 71ff 	movw	r1, #4095	; 0xfff
 23fc226:	6800      	ldr	r0, [r0, #0]
 23fc228:	ab03      	add	r3, sp, #12
 23fc22a:	f7fd fa49 	bl	23f96c0 <sock_setsockopt>
 23fc22e:	2800      	cmp	r0, #0
 23fc230:	d1db      	bne.n	23fc1ea <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
 23fc232:	221c      	movs	r2, #28
 23fc234:	2100      	movs	r1, #0
 23fc236:	a803      	add	r0, sp, #12
 23fc238:	f000 ffed 	bl	23fd216 <memset>
    if (ip.version() == 4) {
 23fc23c:	7d23      	ldrb	r3, [r4, #20]
 23fc23e:	2b04      	cmp	r3, #4
 23fc240:	d11d      	bne.n	23fc27e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
 23fc242:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
 23fc246:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
 23fc248:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
 23fc24c:	f7fd fa0e 	bl	23f966c <inet_htons>
 23fc250:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
 23fc254:	6860      	ldr	r0, [r4, #4]
 23fc256:	f7fd f9fb 	bl	23f9650 <inet_htonl>
 23fc25a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
 23fc25c:	696b      	ldr	r3, [r5, #20]
 23fc25e:	221c      	movs	r2, #28
 23fc260:	6818      	ldr	r0, [r3, #0]
 23fc262:	a903      	add	r1, sp, #12
 23fc264:	f7fd fa48 	bl	23f96f8 <sock_connect>
 23fc268:	2800      	cmp	r0, #0
 23fc26a:	d1be      	bne.n	23fc1ea <_ZN9TCPClient7connectE9IPAddresstm+0x36>
 23fc26c:	696d      	ldr	r5, [r5, #20]
 23fc26e:	3404      	adds	r4, #4
 23fc270:	358c      	adds	r5, #140	; 0x8c
 23fc272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fc274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23fc276:	6823      	ldr	r3, [r4, #0]
    return 1; // success
 23fc278:	2401      	movs	r4, #1
 23fc27a:	702b      	strb	r3, [r5, #0]
 23fc27c:	e7ba      	b.n	23fc1f4 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
 23fc27e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
 23fc282:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
 23fc284:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
 23fc288:	f7fd f9f0 	bl	23f966c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
 23fc28c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
 23fc28e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
 23fc292:	1d23      	adds	r3, r4, #4
 23fc294:	f104 0714 	add.w	r7, r4, #20
 23fc298:	4632      	mov	r2, r6
 23fc29a:	6818      	ldr	r0, [r3, #0]
 23fc29c:	6859      	ldr	r1, [r3, #4]
 23fc29e:	3308      	adds	r3, #8
 23fc2a0:	c203      	stmia	r2!, {r0, r1}
 23fc2a2:	42bb      	cmp	r3, r7
 23fc2a4:	4616      	mov	r6, r2
 23fc2a6:	d1f7      	bne.n	23fc298 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
 23fc2a8:	e7d8      	b.n	23fc25c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

023fc2ac <_ZN9TCPClient9availableEv>:
{
 23fc2ac:	b530      	push	{r4, r5, lr}
 23fc2ae:	6942      	ldr	r2, [r0, #20]
 23fc2b0:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
 23fc2b2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
 23fc2b6:	b08b      	sub	sp, #44	; 0x2c
    if (d_->total && (d_->offset == d_->total)) {
 23fc2b8:	b12b      	cbz	r3, 23fc2c6 <_ZN9TCPClient9availableEv+0x1a>
 23fc2ba:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 23fc2be:	429a      	cmp	r2, r3
 23fc2c0:	d101      	bne.n	23fc2c6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
 23fc2c2:	f7ff ff6f 	bl	23fc1a4 <_ZN9TCPClient12flush_bufferEv>
 23fc2c6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
 23fc2c8:	6808      	ldr	r0, [r1, #0]
 23fc2ca:	2800      	cmp	r0, #0
 23fc2cc:	db18      	blt.n	23fc300 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
 23fc2ce:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
 23fc2d2:	2d7f      	cmp	r5, #127	; 0x7f
 23fc2d4:	d814      	bhi.n	23fc300 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
 23fc2d6:	3104      	adds	r1, #4
 23fc2d8:	2308      	movs	r3, #8
 23fc2da:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
 23fc2de:	4429      	add	r1, r5
 23fc2e0:	f7fd fa18 	bl	23f9714 <sock_recv>
            if (ret > 0) {
 23fc2e4:	2800      	cmp	r0, #0
 23fc2e6:	dd13      	ble.n	23fc310 <_ZN9TCPClient9availableEv+0x64>
 23fc2e8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
 23fc2ea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fc2ee:	b90a      	cbnz	r2, 23fc2f4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
 23fc2f0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 23fc2f4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 23fc2f6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fc2fa:	4410      	add	r0, r2
 23fc2fc:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 23fc300:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
 23fc302:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 23fc306:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 23fc30a:	1ac0      	subs	r0, r0, r3
 23fc30c:	b00b      	add	sp, #44	; 0x2c
 23fc30e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
 23fc310:	f7fd fde2 	bl	23f9ed8 <__errno>
 23fc314:	6803      	ldr	r3, [r0, #0]
 23fc316:	2b0b      	cmp	r3, #11
 23fc318:	d0f2      	beq.n	23fc300 <_ZN9TCPClient9availableEv+0x54>
 23fc31a:	f7fd fddd 	bl	23f9ed8 <__errno>
 23fc31e:	6803      	ldr	r3, [r0, #0]
 23fc320:	2b0b      	cmp	r3, #11
 23fc322:	d0ed      	beq.n	23fc300 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
 23fc324:	2320      	movs	r3, #32
 23fc326:	2500      	movs	r5, #0
 23fc328:	e9cd 3502 	strd	r3, r5, [sp, #8]
 23fc32c:	f7fd fdd4 	bl	23f9ed8 <__errno>
 23fc330:	6803      	ldr	r3, [r0, #0]
 23fc332:	aa02      	add	r2, sp, #8
 23fc334:	9301      	str	r3, [sp, #4]
 23fc336:	4b08      	ldr	r3, [pc, #32]	; (23fc358 <_ZN9TCPClient9availableEv+0xac>)
 23fc338:	2032      	movs	r0, #50	; 0x32
 23fc33a:	4908      	ldr	r1, [pc, #32]	; (23fc35c <_ZN9TCPClient9availableEv+0xb0>)
 23fc33c:	9300      	str	r3, [sp, #0]
 23fc33e:	462b      	mov	r3, r5
 23fc340:	f7fd fb70 	bl	23f9a24 <log_message>
                    sock_close(d_->sock);
 23fc344:	6963      	ldr	r3, [r4, #20]
 23fc346:	6818      	ldr	r0, [r3, #0]
 23fc348:	f7fd f9c8 	bl	23f96dc <sock_close>
                    d_->sock = -1;
 23fc34c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fc350:	6963      	ldr	r3, [r4, #20]
 23fc352:	601a      	str	r2, [r3, #0]
 23fc354:	e7d4      	b.n	23fc300 <_ZN9TCPClient9availableEv+0x54>
 23fc356:	bf00      	nop
 23fc358:	023ff97b 	.word	0x023ff97b
 23fc35c:	023ff974 	.word	0x023ff974

023fc360 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
 23fc360:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
 23fc362:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
 23fc364:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
 23fc366:	6818      	ldr	r0, [r3, #0]
 23fc368:	2800      	cmp	r0, #0
 23fc36a:	db01      	blt.n	23fc370 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
 23fc36c:	f7fd f9b6 	bl	23f96dc <sock_close>
    d_->sock = -1;
 23fc370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fc374:	6963      	ldr	r3, [r4, #20]
    void clear() { memset(&address, 0, sizeof (address)); }
 23fc376:	2100      	movs	r1, #0
 23fc378:	601a      	str	r2, [r3, #0]
 23fc37a:	6960      	ldr	r0, [r4, #20]
 23fc37c:	2211      	movs	r2, #17
 23fc37e:	308c      	adds	r0, #140	; 0x8c
 23fc380:	f000 ff49 	bl	23fd216 <memset>
    flush_buffer();
 23fc384:	4620      	mov	r0, r4
}
 23fc386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
 23fc38a:	f7ff bf0b 	b.w	23fc1a4 <_ZN9TCPClient12flush_bufferEv>

023fc38e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 23fc38e:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 23fc390:	b510      	push	{r4, lr}
 23fc392:	4604      	mov	r4, r0
          total(0) {
 23fc394:	6001      	str	r1, [r0, #0]
 23fc396:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 23fc39a:	3088      	adds	r0, #136	; 0x88
 23fc39c:	f7fd ff14 	bl	23fa1c8 <_ZN9IPAddressC1Ev>
}
 23fc3a0:	4620      	mov	r0, r4
 23fc3a2:	bd10      	pop	{r4, pc}

023fc3a4 <_ZN9TCPClientC1Ei>:
 23fc3a4:	2300      	movs	r3, #0
 23fc3a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
TCPClient::TCPClient(sock_handle_t sock)
 23fc3aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fc3ac:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
 23fc3b0:	4a0e      	ldr	r2, [pc, #56]	; (23fc3ec <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 23fc3b2:	6103      	str	r3, [r0, #16]
 23fc3b4:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fc3b6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
 23fc3b8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fc3ba:	20ac      	movs	r0, #172	; 0xac
 23fc3bc:	9101      	str	r1, [sp, #4]
 23fc3be:	f7fa faa6 	bl	23f690e <_Znwj>
	  auto __pi = ::new (__mem)
 23fc3c2:	1e05      	subs	r5, r0, #0
 23fc3c4:	f105 060c 	add.w	r6, r5, #12
 23fc3c8:	d008      	beq.n	23fc3dc <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 23fc3ca:	2301      	movs	r3, #1
 23fc3cc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 23fc3d0:	4b07      	ldr	r3, [pc, #28]	; (23fc3f0 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 23fc3d2:	4630      	mov	r0, r6
 23fc3d4:	9901      	ldr	r1, [sp, #4]
 23fc3d6:	602b      	str	r3, [r5, #0]
 23fc3d8:	f7ff ffd9 	bl	23fc38e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
 23fc3dc:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 23fc3de:	e9c4 6505 	strd	r6, r5, [r4, #20]
 23fc3e2:	f7ff fedf 	bl	23fc1a4 <_ZN9TCPClient12flush_bufferEv>
}
 23fc3e6:	b002      	add	sp, #8
 23fc3e8:	bd70      	pop	{r4, r5, r6, pc}
 23fc3ea:	bf00      	nop
 23fc3ec:	023ff9b0 	.word	0x023ff9b0
 23fc3f0:	023ff994 	.word	0x023ff994

023fc3f4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
 23fc3f4:	b510      	push	{r4, lr}
 23fc3f6:	4604      	mov	r4, r0
        : TCPClient(-1) {
 23fc3f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23fc3fc:	f7ff ffd2 	bl	23fc3a4 <_ZN9TCPClientC1Ei>
}
 23fc400:	4620      	mov	r0, r4
 23fc402:	bd10      	pop	{r4, pc}

023fc404 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 23fc404:	b510      	push	{r4, lr}
 23fc406:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 23fc408:	6800      	ldr	r0, [r0, #0]
 23fc40a:	2800      	cmp	r0, #0
 23fc40c:	db01      	blt.n	23fc412 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
 23fc40e:	f7fd f965 	bl	23f96dc <sock_close>
    }
}
 23fc412:	4620      	mov	r0, r4
 23fc414:	bd10      	pop	{r4, pc}

023fc416 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 23fc416:	300c      	adds	r0, #12
 23fc418:	f7ff bff4 	b.w	23fc404 <_ZN9TCPClient4DataD1Ev>

023fc41c <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 23fc41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 23fc420:	4a15      	ldr	r2, [pc, #84]	; (23fc478 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 23fc422:	f8df 8060 	ldr.w	r8, [pc, #96]	; 23fc484 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 23fc426:	e9d2 6300 	ldrd	r6, r3, [r2]
 23fc42a:	1980      	adds	r0, r0, r6
 23fc42c:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
 23fc430:	4b12      	ldr	r3, [pc, #72]	; (23fc47c <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 23fc432:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 23fc434:	e9d3 6700 	ldrd	r6, r7, [r3]
 23fc438:	1986      	adds	r6, r0, r6
 23fc43a:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
 23fc43e:	e9d8 2300 	ldrd	r2, r3, [r8]
 23fc442:	42bb      	cmp	r3, r7
 23fc444:	bf08      	it	eq
 23fc446:	42b2      	cmpeq	r2, r6
 23fc448:	d013      	beq.n	23fc472 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 23fc44a:	a903      	add	r1, sp, #12
 23fc44c:	4668      	mov	r0, sp
 23fc44e:	e9cd 6700 	strd	r6, r7, [sp]
 23fc452:	f7fd fd79 	bl	23f9f48 <localtime_r>
	calendar_time.tm_year += 1900;
 23fc456:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23fc458:	4d09      	ldr	r5, [pc, #36]	; (23fc480 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 23fc45a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23fc45e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 23fc460:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23fc462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fc464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23fc466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fc468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 23fc46a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23fc46e:	6823      	ldr	r3, [r4, #0]
 23fc470:	602b      	str	r3, [r5, #0]
    }
}
 23fc472:	b00c      	add	sp, #48	; 0x30
 23fc474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fc478:	1007aea8 	.word	0x1007aea8
 23fc47c:	1007aea0 	.word	0x1007aea0
 23fc480:	1007ae78 	.word	0x1007ae78
 23fc484:	1007aeb0 	.word	0x1007aeb0

023fc488 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 23fc488:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 23fc48a:	2000      	movs	r0, #0
 23fc48c:	f7fd fbc6 	bl	23f9c1c <spark_sync_time_pending>
 23fc490:	b128      	cbz	r0, 23fc49e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fc492:	f7fd fba7 	bl	23f9be4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 23fc496:	f080 0001 	eor.w	r0, r0, #1
 23fc49a:	b2c0      	uxtb	r0, r0
    }
 23fc49c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 23fc49e:	2001      	movs	r0, #1
 23fc4a0:	e7fc      	b.n	23fc49c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

023fc4a4 <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
 23fc4a4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23fc4a6:	f7ff ffb9 	bl	23fc41c <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
 23fc4aa:	4b02      	ldr	r3, [pc, #8]	; (23fc4b4 <_ZN9TimeClass7weekdayEx+0x10>)
 23fc4ac:	6998      	ldr	r0, [r3, #24]
}
 23fc4ae:	3001      	adds	r0, #1
 23fc4b0:	bd08      	pop	{r3, pc}
 23fc4b2:	bf00      	nop
 23fc4b4:	1007ae78 	.word	0x1007ae78

023fc4b8 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 23fc4b8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23fc4ba:	f7ff ffaf 	bl	23fc41c <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 23fc4be:	4b02      	ldr	r3, [pc, #8]	; (23fc4c8 <_ZN9TimeClass5monthEx+0x10>)
 23fc4c0:	6918      	ldr	r0, [r3, #16]
}
 23fc4c2:	3001      	adds	r0, #1
 23fc4c4:	bd08      	pop	{r3, pc}
 23fc4c6:	bf00      	nop
 23fc4c8:	1007ae78 	.word	0x1007ae78

023fc4cc <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
 23fc4cc:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 23fc4d0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23fc4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 23fc4d8:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 23fc4da:	d411      	bmi.n	23fc500 <_ZN9TimeClass4zoneEf+0x34>
 23fc4dc:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
 23fc4e0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23fc4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fc4e8:	dc0a      	bgt.n	23fc500 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 23fc4ea:	eddf 7a06 	vldr	s15, [pc, #24]	; 23fc504 <_ZN9TimeClass4zoneEf+0x38>
 23fc4ee:	ee60 7a27 	vmul.f32	s15, s0, s15
 23fc4f2:	ee17 0a90 	vmov	r0, s15
 23fc4f6:	f7f9 fff9 	bl	23f64ec <__aeabi_f2lz>
 23fc4fa:	4b03      	ldr	r3, [pc, #12]	; (23fc508 <_ZN9TimeClass4zoneEf+0x3c>)
 23fc4fc:	e9c3 0100 	strd	r0, r1, [r3]
}
 23fc500:	bd08      	pop	{r3, pc}
 23fc502:	bf00      	nop
 23fc504:	45610000 	.word	0x45610000
 23fc508:	1007aea8 	.word	0x1007aea8

023fc50c <_ZN9TimeClass8beginDSTEv>:
    dst_cache = offset * 3600;
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
 23fc50c:	4b03      	ldr	r3, [pc, #12]	; (23fc51c <_ZN9TimeClass8beginDSTEv+0x10>)
 23fc50e:	e9d3 0100 	ldrd	r0, r1, [r3]
 23fc512:	4b03      	ldr	r3, [pc, #12]	; (23fc520 <_ZN9TimeClass8beginDSTEv+0x14>)
 23fc514:	e9c3 0100 	strd	r0, r1, [r3]
}
 23fc518:	4770      	bx	lr
 23fc51a:	bf00      	nop
 23fc51c:	1007aae0 	.word	0x1007aae0
 23fc520:	1007aea0 	.word	0x1007aea0

023fc524 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 23fc524:	b530      	push	{r4, r5, lr}
 23fc526:	b093      	sub	sp, #76	; 0x4c
 23fc528:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
 23fc52c:	4b19      	ldr	r3, [pc, #100]	; (23fc594 <_ZN9TimeClass7timeStrEx+0x70>)
{
 23fc52e:	4604      	mov	r4, r0
    t += time_zone_cache;
 23fc530:	e9d3 1000 	ldrd	r1, r0, [r3]
 23fc534:	9b01      	ldr	r3, [sp, #4]
 23fc536:	1852      	adds	r2, r2, r1
 23fc538:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
 23fc53c:	4816      	ldr	r0, [pc, #88]	; (23fc598 <_ZN9TimeClass7timeStrEx+0x74>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 23fc53e:	2500      	movs	r5, #0
    t += dst_current_cache;
 23fc540:	e9d0 1000 	ldrd	r1, r0, [r0]
 23fc544:	1852      	adds	r2, r2, r1
 23fc546:	eb43 0300 	adc.w	r3, r3, r0
 23fc54a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 23fc54e:	2224      	movs	r2, #36	; 0x24
 23fc550:	2100      	movs	r1, #0
 23fc552:	eb0d 0002 	add.w	r0, sp, r2
 23fc556:	f000 fe5e 	bl	23fd216 <memset>
    localtime_r(&t, &calendar_time);
 23fc55a:	a909      	add	r1, sp, #36	; 0x24
 23fc55c:	4668      	mov	r0, sp
 23fc55e:	f7fd fcf3 	bl	23f9f48 <localtime_r>
    char ascstr[26] = {};
 23fc562:	2216      	movs	r2, #22
 23fc564:	4629      	mov	r1, r5
 23fc566:	a803      	add	r0, sp, #12
 23fc568:	9502      	str	r5, [sp, #8]
 23fc56a:	f000 fe54 	bl	23fd216 <memset>
    asctime_r(&calendar_time, ascstr);
 23fc56e:	a902      	add	r1, sp, #8
 23fc570:	a809      	add	r0, sp, #36	; 0x24
 23fc572:	f000 fde5 	bl	23fd140 <asctime_r>
    int len = strlen(ascstr);
 23fc576:	a802      	add	r0, sp, #8
 23fc578:	f7fa f98c 	bl	23f6894 <strlen>
    ascstr[len-1] = 0; // remove final newline
 23fc57c:	ab12      	add	r3, sp, #72	; 0x48
 23fc57e:	4418      	add	r0, r3
 23fc580:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 23fc584:	a902      	add	r1, sp, #8
 23fc586:	4620      	mov	r0, r4
 23fc588:	f7ff f9df 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
}
 23fc58c:	4620      	mov	r0, r4
 23fc58e:	b013      	add	sp, #76	; 0x4c
 23fc590:	bd30      	pop	{r4, r5, pc}
 23fc592:	bf00      	nop
 23fc594:	1007aea8 	.word	0x1007aea8
 23fc598:	1007aea0 	.word	0x1007aea0

023fc59c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 23fc59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fc5a0:	b0a4      	sub	sp, #144	; 0x90
 23fc5a2:	4607      	mov	r7, r0
 23fc5a4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23fc5a6:	a814      	add	r0, sp, #80	; 0x50
{
 23fc5a8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23fc5aa:	223f      	movs	r2, #63	; 0x3f
{
 23fc5ac:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23fc5ae:	f000 fe9c 	bl	23fd2ea <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 23fc5b2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 23fc5b4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 23fc5b6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 23fc5ba:	f7fa f96b 	bl	23f6894 <strlen>
 23fc5be:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 23fc5c0:	bb4c      	cbnz	r4, 23fc616 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
 23fc5c2:	4929      	ldr	r1, [pc, #164]	; (23fc668 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
 23fc5c4:	a803      	add	r0, sp, #12
 23fc5c6:	f000 fe74 	bl	23fd2b2 <strcpy>
{
 23fc5ca:	2600      	movs	r6, #0
 23fc5cc:	ac14      	add	r4, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 23fc5ce:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 23fc5d2:	45b1      	cmp	r9, r6
 23fc5d4:	d934      	bls.n	23fc640 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 23fc5d6:	7823      	ldrb	r3, [r4, #0]
 23fc5d8:	f106 0a01 	add.w	sl, r6, #1
 23fc5dc:	2b25      	cmp	r3, #37	; 0x25
 23fc5de:	d117      	bne.n	23fc610 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
 23fc5e0:	7863      	ldrb	r3, [r4, #1]
 23fc5e2:	2b7a      	cmp	r3, #122	; 0x7a
 23fc5e4:	d114      	bne.n	23fc610 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
 23fc5e6:	a803      	add	r0, sp, #12
 23fc5e8:	f7fa f954 	bl	23f6894 <strlen>
 23fc5ec:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 23fc5ee:	ab14      	add	r3, sp, #80	; 0x50
 23fc5f0:	1830      	adds	r0, r6, r0
 23fc5f2:	4418      	add	r0, r3
 23fc5f4:	eba9 0206 	sub.w	r2, r9, r6
 23fc5f8:	1ca1      	adds	r1, r4, #2
 23fc5fa:	f000 fde5 	bl	23fd1c8 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 23fc5fe:	462a      	mov	r2, r5
 23fc600:	a903      	add	r1, sp, #12
 23fc602:	4620      	mov	r0, r4
 23fc604:	f000 fde0 	bl	23fd1c8 <memcpy>
            len = strlen(format_str);
 23fc608:	a814      	add	r0, sp, #80	; 0x50
 23fc60a:	f7fa f943 	bl	23f6894 <strlen>
 23fc60e:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
 23fc610:	4656      	mov	r6, sl
 23fc612:	3401      	adds	r4, #1
 23fc614:	e7db      	b.n	23fc5ce <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 23fc616:	233c      	movs	r3, #60	; 0x3c
 23fc618:	fb94 f2f3 	sdiv	r2, r4, r3
 23fc61c:	2a00      	cmp	r2, #0
 23fc61e:	bfb8      	it	lt
 23fc620:	4252      	neglt	r2, r2
 23fc622:	fbb2 f1f3 	udiv	r1, r2, r3
 23fc626:	fb03 2211 	mls	r2, r3, r1, r2
 23fc62a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 23fc62e:	9200      	str	r2, [sp, #0]
 23fc630:	fb94 f3f3 	sdiv	r3, r4, r3
 23fc634:	2110      	movs	r1, #16
 23fc636:	4a0d      	ldr	r2, [pc, #52]	; (23fc66c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 23fc638:	a803      	add	r0, sp, #12
 23fc63a:	f7fd fc15 	bl	23f9e68 <snprintf>
 23fc63e:	e7c4      	b.n	23fc5ca <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 23fc640:	2100      	movs	r1, #0
 23fc642:	222e      	movs	r2, #46	; 0x2e
 23fc644:	a808      	add	r0, sp, #32
 23fc646:	9107      	str	r1, [sp, #28]
 23fc648:	f000 fde5 	bl	23fd216 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 23fc64c:	4643      	mov	r3, r8
 23fc64e:	aa14      	add	r2, sp, #80	; 0x50
 23fc650:	2132      	movs	r1, #50	; 0x32
 23fc652:	a807      	add	r0, sp, #28
 23fc654:	f7fd fc6a 	bl	23f9f2c <strftime>
    return String(buf);
 23fc658:	4638      	mov	r0, r7
 23fc65a:	a907      	add	r1, sp, #28
 23fc65c:	f7ff f975 	bl	23fb94a <_ZN6StringC1EPK19__FlashStringHelper>
}
 23fc660:	4638      	mov	r0, r7
 23fc662:	b024      	add	sp, #144	; 0x90
 23fc664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fc668:	023ff9f4 	.word	0x023ff9f4
 23fc66c:	023ff9f6 	.word	0x023ff9f6

023fc670 <_ZN9TimeClass6formatExPKc>:
{
 23fc670:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc672:	b08d      	sub	sp, #52	; 0x34
 23fc674:	9d12      	ldr	r5, [sp, #72]	; 0x48
 23fc676:	4604      	mov	r4, r0
 23fc678:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 23fc67c:	b915      	cbnz	r5, 23fc684 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 23fc67e:	4b19      	ldr	r3, [pc, #100]	; (23fc6e4 <_ZN9TimeClass6formatExPKc+0x74>)
 23fc680:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 23fc682:	b12d      	cbz	r5, 23fc690 <_ZN9TimeClass6formatExPKc+0x20>
 23fc684:	4b18      	ldr	r3, [pc, #96]	; (23fc6e8 <_ZN9TimeClass6formatExPKc+0x78>)
 23fc686:	4628      	mov	r0, r5
 23fc688:	6819      	ldr	r1, [r3, #0]
 23fc68a:	f7fa f8f9 	bl	23f6880 <strcmp>
 23fc68e:	b938      	cbnz	r0, 23fc6a0 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 23fc690:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fc694:	4620      	mov	r0, r4
 23fc696:	f7ff ff45 	bl	23fc524 <_ZN9TimeClass7timeStrEx>
}
 23fc69a:	4620      	mov	r0, r4
 23fc69c:	b00d      	add	sp, #52	; 0x34
 23fc69e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 23fc6a0:	9900      	ldr	r1, [sp, #0]
 23fc6a2:	4e12      	ldr	r6, [pc, #72]	; (23fc6ec <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 23fc6a4:	4f12      	ldr	r7, [pc, #72]	; (23fc6f0 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 23fc6a6:	e9d6 3200 	ldrd	r3, r2, [r6]
 23fc6aa:	185b      	adds	r3, r3, r1
 23fc6ac:	9901      	ldr	r1, [sp, #4]
 23fc6ae:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
 23fc6b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 23fc6b6:	181b      	adds	r3, r3, r0
 23fc6b8:	eb42 0201 	adc.w	r2, r2, r1
 23fc6bc:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 23fc6c0:	2100      	movs	r1, #0
 23fc6c2:	2224      	movs	r2, #36	; 0x24
 23fc6c4:	a803      	add	r0, sp, #12
 23fc6c6:	f000 fda6 	bl	23fd216 <memset>
    localtime_r(&t, &calendar_time);
 23fc6ca:	a903      	add	r1, sp, #12
 23fc6cc:	4668      	mov	r0, sp
 23fc6ce:	f7fd fc3b 	bl	23f9f48 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 23fc6d2:	6832      	ldr	r2, [r6, #0]
 23fc6d4:	683b      	ldr	r3, [r7, #0]
 23fc6d6:	4620      	mov	r0, r4
 23fc6d8:	4413      	add	r3, r2
 23fc6da:	a903      	add	r1, sp, #12
 23fc6dc:	462a      	mov	r2, r5
 23fc6de:	f7ff ff5d 	bl	23fc59c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 23fc6e2:	e7da      	b.n	23fc69a <_ZN9TimeClass6formatExPKc+0x2a>
 23fc6e4:	1007ae74 	.word	0x1007ae74
 23fc6e8:	1007aad8 	.word	0x1007aad8
 23fc6ec:	1007aea8 	.word	0x1007aea8
 23fc6f0:	1007aea0 	.word	0x1007aea0

023fc6f4 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 23fc6f4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 23fc6f6:	2000      	movs	r0, #0
 23fc6f8:	f7fc fee6 	bl	23f94c8 <hal_rtc_time_is_valid>
    if (rtcstate)
 23fc6fc:	4604      	mov	r4, r0
 23fc6fe:	b9a0      	cbnz	r0, 23fc72a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 23fc700:	f7fd f9c8 	bl	23f9a94 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 23fc704:	2801      	cmp	r0, #1
 23fc706:	d110      	bne.n	23fc72a <_ZN9TimeClass7isValidEv+0x36>
 23fc708:	4620      	mov	r0, r4
 23fc70a:	f7fd fa09 	bl	23f9b20 <system_thread_get_state>
 23fc70e:	b960      	cbnz	r0, 23fc72a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 23fc710:	f7ff feba 	bl	23fc488 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 23fc714:	b910      	cbnz	r0, 23fc71c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 23fc716:	f7fd fa57 	bl	23f9bc8 <spark_process>
        while (_while() && !_condition()) {
 23fc71a:	e7f9      	b.n	23fc710 <_ZN9TimeClass7isValidEv+0x1c>
 23fc71c:	f7ff feb4 	bl	23fc488 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 23fc720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 23fc724:	2000      	movs	r0, #0
 23fc726:	f7fc becf 	b.w	23f94c8 <hal_rtc_time_is_valid>
}
 23fc72a:	4620      	mov	r0, r4
 23fc72c:	bd10      	pop	{r4, pc}

023fc72e <_ZN9TimeClass3nowEv>:
{
 23fc72e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 23fc730:	f7ff ffe0 	bl	23fc6f4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 23fc734:	2210      	movs	r2, #16
 23fc736:	2100      	movs	r1, #0
 23fc738:	4668      	mov	r0, sp
 23fc73a:	f000 fd6c 	bl	23fd216 <memset>
    hal_rtc_get_time(&tv, nullptr);
 23fc73e:	2100      	movs	r1, #0
 23fc740:	4668      	mov	r0, sp
 23fc742:	f7fc fecf 	bl	23f94e4 <hal_rtc_get_time>
}
 23fc746:	9800      	ldr	r0, [sp, #0]
 23fc748:	b005      	add	sp, #20
 23fc74a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fc750 <_ZN9TimeClass4hourEv>:
{
 23fc750:	b508      	push	{r3, lr}
	return hour(now());
 23fc752:	f7ff ffec 	bl	23fc72e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23fc756:	17c1      	asrs	r1, r0, #31
 23fc758:	f7ff fe60 	bl	23fc41c <_ZL22Refresh_UnixTime_Cachex>
}
 23fc75c:	4b01      	ldr	r3, [pc, #4]	; (23fc764 <_ZN9TimeClass4hourEv+0x14>)
 23fc75e:	6898      	ldr	r0, [r3, #8]
 23fc760:	bd08      	pop	{r3, pc}
 23fc762:	bf00      	nop
 23fc764:	1007ae78 	.word	0x1007ae78

023fc768 <_ZN9TimeClass3dayEv>:
{
 23fc768:	b508      	push	{r3, lr}
	return day(now());
 23fc76a:	f7ff ffe0 	bl	23fc72e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23fc76e:	17c1      	asrs	r1, r0, #31
 23fc770:	f7ff fe54 	bl	23fc41c <_ZL22Refresh_UnixTime_Cachex>
}
 23fc774:	4b01      	ldr	r3, [pc, #4]	; (23fc77c <_ZN9TimeClass3dayEv+0x14>)
 23fc776:	68d8      	ldr	r0, [r3, #12]
 23fc778:	bd08      	pop	{r3, pc}
 23fc77a:	bf00      	nop
 23fc77c:	1007ae78 	.word	0x1007ae78

023fc780 <_ZN9TimeClass7weekdayEv>:
{
 23fc780:	b508      	push	{r3, lr}
	return weekday(now());
 23fc782:	f7ff ffd4 	bl	23fc72e <_ZN9TimeClass3nowEv>
}
 23fc786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
 23fc78a:	17c1      	asrs	r1, r0, #31
 23fc78c:	f7ff be8a 	b.w	23fc4a4 <_ZN9TimeClass7weekdayEx>

023fc790 <_ZN9TimeClass5monthEv>:
{
 23fc790:	b508      	push	{r3, lr}
	return month(now());
 23fc792:	f7ff ffcc 	bl	23fc72e <_ZN9TimeClass3nowEv>
}
 23fc796:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 23fc79a:	17c1      	asrs	r1, r0, #31
 23fc79c:	f7ff be8c 	b.w	23fc4b8 <_ZN9TimeClass5monthEx>

023fc7a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fc7a0:	4b02      	ldr	r3, [pc, #8]	; (23fc7ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fc7a2:	681a      	ldr	r2, [r3, #0]
 23fc7a4:	4b02      	ldr	r3, [pc, #8]	; (23fc7b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fc7a6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fc7a8:	4770      	bx	lr
 23fc7aa:	bf00      	nop
 23fc7ac:	1007aad8 	.word	0x1007aad8
 23fc7b0:	1007ae74 	.word	0x1007ae74

023fc7b4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fc7b4:	4770      	bx	lr

023fc7b6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fc7b6:	7441      	strb	r1, [r0, #17]
}
 23fc7b8:	4770      	bx	lr

023fc7ba <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fc7ba:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fc7bc:	7c00      	ldrb	r0, [r0, #16]
 23fc7be:	f7fd f851 	bl	23f9864 <hal_usart_available_data_for_write>
}
 23fc7c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fc7c6:	bd08      	pop	{r3, pc}

023fc7c8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fc7c8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fc7ca:	7c00      	ldrb	r0, [r0, #16]
 23fc7cc:	f7fd f804 	bl	23f97d8 <hal_usart_available>
}
 23fc7d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fc7d4:	bd08      	pop	{r3, pc}

023fc7d6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fc7d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fc7d8:	7c00      	ldrb	r0, [r0, #16]
 23fc7da:	f7fd f819 	bl	23f9810 <hal_usart_peek>
}
 23fc7de:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fc7e2:	bd08      	pop	{r3, pc}

023fc7e4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fc7e4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fc7e6:	7c00      	ldrb	r0, [r0, #16]
 23fc7e8:	f7fd f804 	bl	23f97f4 <hal_usart_read>
}
 23fc7ec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fc7f0:	bd08      	pop	{r3, pc}

023fc7f2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fc7f2:	7c00      	ldrb	r0, [r0, #16]
 23fc7f4:	f7fd b81a 	b.w	23f982c <hal_usart_flush>

023fc7f8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fc7f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fc7fa:	7c45      	ldrb	r5, [r0, #17]
{
 23fc7fc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fc7fe:	b12d      	cbz	r5, 23fc80c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fc800:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fc802:	b003      	add	sp, #12
 23fc804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fc808:	f7fc bfd8 	b.w	23f97bc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fc80c:	7c00      	ldrb	r0, [r0, #16]
 23fc80e:	9101      	str	r1, [sp, #4]
 23fc810:	f7fd f828 	bl	23f9864 <hal_usart_available_data_for_write>
 23fc814:	2800      	cmp	r0, #0
 23fc816:	9901      	ldr	r1, [sp, #4]
 23fc818:	dcf2      	bgt.n	23fc800 <_ZN11USARTSerial5writeEh+0x8>
}
 23fc81a:	4628      	mov	r0, r5
 23fc81c:	b003      	add	sp, #12
 23fc81e:	bd30      	pop	{r4, r5, pc}

023fc820 <_ZN11USARTSerialD0Ev>:
 23fc820:	b510      	push	{r4, lr}
 23fc822:	4604      	mov	r4, r0
 23fc824:	2114      	movs	r1, #20
 23fc826:	f7fa f878 	bl	23f691a <_ZdlPvj>
 23fc82a:	4620      	mov	r0, r4
 23fc82c:	bd10      	pop	{r4, pc}
	...

023fc830 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fc830:	b510      	push	{r4, lr}
 23fc832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fc836:	4604      	mov	r4, r0
 23fc838:	4608      	mov	r0, r1
 23fc83a:	4611      	mov	r1, r2
 23fc83c:	2200      	movs	r2, #0
 23fc83e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fc842:	4b04      	ldr	r3, [pc, #16]	; (23fc854 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fc844:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fc846:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fc848:	2301      	movs	r3, #1
 23fc84a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fc84c:	f7fd f826 	bl	23f989c <hal_usart_init_ex>
}
 23fc850:	4620      	mov	r0, r4
 23fc852:	bd10      	pop	{r4, pc}
 23fc854:	023ffa28 	.word	0x023ffa28

023fc858 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fc858:	2300      	movs	r3, #0
 23fc85a:	7c00      	ldrb	r0, [r0, #16]
 23fc85c:	f7fd b810 	b.w	23f9880 <hal_usart_begin_config>

023fc860 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fc860:	2200      	movs	r2, #0
 23fc862:	f7ff bff9 	b.w	23fc858 <_ZN11USARTSerial5beginEmm>

023fc866 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fc866:	7c00      	ldrb	r0, [r0, #16]
 23fc868:	f7fc bf9a 	b.w	23f97a0 <hal_usart_end>

023fc86c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fc86c:	7c00      	ldrb	r0, [r0, #16]
 23fc86e:	f7fc bfeb 	b.w	23f9848 <hal_usart_is_enabled>

023fc872 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fc872:	7441      	strb	r1, [r0, #17]
}
 23fc874:	4770      	bx	lr

023fc876 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fc876:	4770      	bx	lr

023fc878 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fc878:	4770      	bx	lr

023fc87a <_ZN9USBSerial4readEv>:
{
 23fc87a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fc87c:	2100      	movs	r1, #0
 23fc87e:	7c00      	ldrb	r0, [r0, #16]
 23fc880:	f7fd f860 	bl	23f9944 <HAL_USB_USART_Receive_Data>
}
 23fc884:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fc888:	bd08      	pop	{r3, pc}

023fc88a <_ZN9USBSerial4peekEv>:
{
 23fc88a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fc88c:	2101      	movs	r1, #1
 23fc88e:	7c00      	ldrb	r0, [r0, #16]
 23fc890:	f7fd f858 	bl	23f9944 <HAL_USB_USART_Receive_Data>
}
 23fc894:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fc898:	bd08      	pop	{r3, pc}

023fc89a <_ZN9USBSerial17availableForWriteEv>:
{
 23fc89a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fc89c:	7c00      	ldrb	r0, [r0, #16]
 23fc89e:	f7fd f843 	bl	23f9928 <HAL_USB_USART_Available_Data_For_Write>
}
 23fc8a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fc8a6:	bd08      	pop	{r3, pc}

023fc8a8 <_ZN9USBSerial9availableEv>:
{
 23fc8a8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fc8aa:	7c00      	ldrb	r0, [r0, #16]
 23fc8ac:	f7fd f82e 	bl	23f990c <HAL_USB_USART_Available_Data>
}
 23fc8b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fc8b4:	bd08      	pop	{r3, pc}

023fc8b6 <_ZN9USBSerial5writeEh>:
{
 23fc8b6:	b513      	push	{r0, r1, r4, lr}
 23fc8b8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fc8ba:	7c00      	ldrb	r0, [r0, #16]
{
 23fc8bc:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fc8be:	f7fd f833 	bl	23f9928 <HAL_USB_USART_Available_Data_For_Write>
 23fc8c2:	2800      	cmp	r0, #0
 23fc8c4:	9901      	ldr	r1, [sp, #4]
 23fc8c6:	dc01      	bgt.n	23fc8cc <_ZN9USBSerial5writeEh+0x16>
 23fc8c8:	7c60      	ldrb	r0, [r4, #17]
 23fc8ca:	b120      	cbz	r0, 23fc8d6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fc8cc:	7c20      	ldrb	r0, [r4, #16]
 23fc8ce:	f7fd f847 	bl	23f9960 <HAL_USB_USART_Send_Data>
 23fc8d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fc8d6:	b002      	add	sp, #8
 23fc8d8:	bd10      	pop	{r4, pc}

023fc8da <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fc8da:	7c00      	ldrb	r0, [r0, #16]
 23fc8dc:	f7fd b84e 	b.w	23f997c <HAL_USB_USART_Flush_Data>

023fc8e0 <_ZN9USBSerialD0Ev>:
 23fc8e0:	b510      	push	{r4, lr}
 23fc8e2:	4604      	mov	r4, r0
 23fc8e4:	2114      	movs	r1, #20
 23fc8e6:	f7fa f818 	bl	23f691a <_ZdlPvj>
 23fc8ea:	4620      	mov	r0, r4
 23fc8ec:	bd10      	pop	{r4, pc}
	...

023fc8f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fc8f0:	b510      	push	{r4, lr}
 23fc8f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fc8f6:	4604      	mov	r4, r0
 23fc8f8:	4608      	mov	r0, r1
 23fc8fa:	2100      	movs	r1, #0
 23fc8fc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fc900:	4b04      	ldr	r3, [pc, #16]	; (23fc914 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fc902:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fc904:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fc906:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fc908:	4611      	mov	r1, r2
  _blocking = true;
 23fc90a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fc90c:	f7fc ffd4 	bl	23f98b8 <HAL_USB_USART_Init>
}
 23fc910:	4620      	mov	r0, r4
 23fc912:	bd10      	pop	{r4, pc}
 23fc914:	023ffa58 	.word	0x023ffa58

023fc918 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fc918:	2200      	movs	r2, #0
 23fc91a:	7c00      	ldrb	r0, [r0, #16]
 23fc91c:	f7fc bfda 	b.w	23f98d4 <HAL_USB_USART_Begin>

023fc920 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fc920:	7c00      	ldrb	r0, [r0, #16]
 23fc922:	f7fc bfe5 	b.w	23f98f0 <HAL_USB_USART_End>

023fc926 <_Z19acquireSerialBufferv>:
{
 23fc926:	b510      	push	{r4, lr}
 23fc928:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fc92a:	2214      	movs	r2, #20
 23fc92c:	2100      	movs	r1, #0
 23fc92e:	f000 fc72 	bl	23fd216 <memset>
}
 23fc932:	4620      	mov	r0, r4
 23fc934:	bd10      	pop	{r4, pc}
	...

023fc938 <_Z16_fetch_usbserialv>:
{
 23fc938:	b510      	push	{r4, lr}
 23fc93a:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fc93c:	a803      	add	r0, sp, #12
 23fc93e:	f7ff fff2 	bl	23fc926 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fc942:	4c0c      	ldr	r4, [pc, #48]	; (23fc974 <_Z16_fetch_usbserialv+0x3c>)
 23fc944:	e8d4 1f8f 	ldab	r1, [r4]
 23fc948:	f011 0101 	ands.w	r1, r1, #1
 23fc94c:	d10f      	bne.n	23fc96e <_Z16_fetch_usbserialv+0x36>
 23fc94e:	4620      	mov	r0, r4
 23fc950:	9101      	str	r1, [sp, #4]
 23fc952:	f7f9 fff1 	bl	23f6938 <__cxa_guard_acquire>
 23fc956:	9901      	ldr	r1, [sp, #4]
 23fc958:	b148      	cbz	r0, 23fc96e <_Z16_fetch_usbserialv+0x36>
 23fc95a:	aa03      	add	r2, sp, #12
 23fc95c:	4806      	ldr	r0, [pc, #24]	; (23fc978 <_Z16_fetch_usbserialv+0x40>)
 23fc95e:	f7ff ffc7 	bl	23fc8f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fc962:	4620      	mov	r0, r4
 23fc964:	f7f9 ffed 	bl	23f6942 <__cxa_guard_release>
 23fc968:	4804      	ldr	r0, [pc, #16]	; (23fc97c <_Z16_fetch_usbserialv+0x44>)
 23fc96a:	f000 fc0f 	bl	23fd18c <atexit>
	return _usbserial;
}
 23fc96e:	4802      	ldr	r0, [pc, #8]	; (23fc978 <_Z16_fetch_usbserialv+0x40>)
 23fc970:	b008      	add	sp, #32
 23fc972:	bd10      	pop	{r4, pc}
 23fc974:	1007aeb8 	.word	0x1007aeb8
 23fc978:	1007aebc 	.word	0x1007aebc
 23fc97c:	023fc877 	.word	0x023fc877

023fc980 <_ZN8particle13WatchdogClass4initERKNS_21WatchdogConfigurationE>:
LOG_SOURCE_CATEGORY("wiring.watchdog")

namespace particle {

int WatchdogClass::init(const WatchdogConfiguration& config) {
    instance_ = config.watchdogInstance();
 23fc980:	2200      	movs	r2, #0
 23fc982:	7402      	strb	r2, [r0, #16]
    return hal_watchdog_set_config(instance_, config.halConfig(), nullptr);
 23fc984:	4610      	mov	r0, r2
 23fc986:	f7fd b807 	b.w	23f9998 <hal_watchdog_set_config>

023fc98a <_ZN8particle13WatchdogClass5startEv>:
}

int WatchdogClass::start() {
    return hal_watchdog_start(instance_, nullptr);
 23fc98a:	2100      	movs	r1, #0
 23fc98c:	7c00      	ldrb	r0, [r0, #16]
 23fc98e:	f7fd b811 	b.w	23f99b4 <hal_watchdog_start>

023fc992 <_ZN8particle13WatchdogClass7refreshEv>:
int WatchdogClass::stop() {
    return hal_watchdog_stop(instance_, nullptr);
}

int WatchdogClass::refresh() {
    return hal_watchdog_refresh(instance_, nullptr);
 23fc992:	2100      	movs	r1, #0
 23fc994:	7c00      	ldrb	r0, [r0, #16]
 23fc996:	f7fd b81b 	b.w	23f99d0 <hal_watchdog_refresh>

023fc99a <_ZN8particle13WatchdogClass7getInfoERNS_12WatchdogInfoE>:
}

int WatchdogClass::getInfo(WatchdogInfo& info) {
    return hal_watchdog_get_info(instance_, info.halInfo(), nullptr);
 23fc99a:	2200      	movs	r2, #0
 23fc99c:	7c00      	ldrb	r0, [r0, #16]
 23fc99e:	3124      	adds	r1, #36	; 0x24
 23fc9a0:	f7fd b824 	b.w	23f99ec <hal_watchdog_get_info>

023fc9a4 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fc9a4:	2200      	movs	r2, #0
 23fc9a6:	6840      	ldr	r0, [r0, #4]
 23fc9a8:	4611      	mov	r1, r2
 23fc9aa:	f7fd b9b5 	b.w	23f9d18 <network_listening>

023fc9ae <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fc9ae:	2200      	movs	r2, #0
 23fc9b0:	6840      	ldr	r0, [r0, #4]
 23fc9b2:	4611      	mov	r1, r2
 23fc9b4:	f7fd b9da 	b.w	23f9d6c <network_get_listen_timeout>

023fc9b8 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fc9b8:	2200      	movs	r2, #0
 23fc9ba:	6840      	ldr	r0, [r0, #4]
 23fc9bc:	f7fd b9c8 	b.w	23f9d50 <network_set_listen_timeout>

023fc9c0 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fc9c0:	2200      	movs	r2, #0
 23fc9c2:	6840      	ldr	r0, [r0, #4]
 23fc9c4:	f081 0101 	eor.w	r1, r1, #1
 23fc9c8:	f7fd b998 	b.w	23f9cfc <network_listen>

023fc9cc <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fc9cc:	2300      	movs	r3, #0
 23fc9ce:	6840      	ldr	r0, [r0, #4]
 23fc9d0:	461a      	mov	r2, r3
 23fc9d2:	4619      	mov	r1, r3
 23fc9d4:	f7fd b984 	b.w	23f9ce0 <network_off>

023fc9d8 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fc9d8:	2300      	movs	r3, #0
 23fc9da:	6840      	ldr	r0, [r0, #4]
 23fc9dc:	461a      	mov	r2, r3
 23fc9de:	4619      	mov	r1, r3
 23fc9e0:	f7fd b970 	b.w	23f9cc4 <network_on>

023fc9e4 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fc9e4:	2200      	movs	r2, #0
 23fc9e6:	6840      	ldr	r0, [r0, #4]
 23fc9e8:	4611      	mov	r1, r2
 23fc9ea:	f7fd b941 	b.w	23f9c70 <network_connecting>

023fc9ee <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fc9ee:	2200      	movs	r2, #0
 23fc9f0:	2102      	movs	r1, #2
 23fc9f2:	6840      	ldr	r0, [r0, #4]
 23fc9f4:	f7fd b94a 	b.w	23f9c8c <network_disconnect>

023fc9f8 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fc9f8:	2300      	movs	r3, #0
 23fc9fa:	6840      	ldr	r0, [r0, #4]
 23fc9fc:	461a      	mov	r2, r3
 23fc9fe:	f7fd b929 	b.w	23f9c54 <network_connect>
	...

023fca04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fca04:	2204      	movs	r2, #4
 23fca06:	4b02      	ldr	r3, [pc, #8]	; (23fca10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fca08:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fca0a:	4a02      	ldr	r2, [pc, #8]	; (23fca14 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fca0c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fca0e:	4770      	bx	lr
 23fca10:	1007aed0 	.word	0x1007aed0
 23fca14:	023ffa88 	.word	0x023ffa88

023fca18 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 23fca18:	b510      	push	{r4, lr}
 23fca1a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 23fca1c:	f7f9 ff3a 	bl	23f6894 <strlen>
 23fca20:	3801      	subs	r0, #1
 23fca22:	1823      	adds	r3, r4, r0
 23fca24:	4620      	mov	r0, r4
	while(i<j){
 23fca26:	4283      	cmp	r3, r0
 23fca28:	d906      	bls.n	23fca38 <_Z11str_reversePc+0x20>
		c = *i;
 23fca2a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 23fca2c:	7819      	ldrb	r1, [r3, #0]
 23fca2e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 23fca32:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 23fca36:	e7f6      	b.n	23fca26 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 23fca38:	bd10      	pop	{r4, pc}

023fca3a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 23fca3a:	b570      	push	{r4, r5, r6, lr}
 23fca3c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 23fca3e:	1e91      	subs	r1, r2, #2
 23fca40:	2922      	cmp	r1, #34	; 0x22
 23fca42:	d81d      	bhi.n	23fca80 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
 23fca44:	4625      	mov	r5, r4

	div_t result;
	while(a){
 23fca46:	b930      	cbnz	r0, 23fca56 <ultoa+0x1c>
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 23fca48:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
 23fca4a:	4423      	add	r3, r4
 23fca4c:	429d      	cmp	r5, r3
 23fca4e:	d210      	bcs.n	23fca72 <ultoa+0x38>
            *ptr++ = '0';
 23fca50:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
 23fca54:	e7fa      	b.n	23fca4c <ultoa+0x12>
            result.quot = a/radix;
 23fca56:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 23fca5a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 23fca5e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 23fca60:	2809      	cmp	r0, #9
                *ptr += '0';
 23fca62:	bf94      	ite	ls
 23fca64:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
 23fca66:	3157      	addhi	r1, #87	; 0x57
 23fca68:	b2c9      	uxtb	r1, r1
            a = result.quot;
 23fca6a:	4630      	mov	r0, r6
 23fca6c:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 23fca70:	e7e9      	b.n	23fca46 <ultoa+0xc>

	*ptr = '\0';
 23fca72:	2300      	movs	r3, #0
	str_reverse(buffer);
 23fca74:	4620      	mov	r0, r4
	*ptr = '\0';
 23fca76:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
 23fca78:	f7ff ffce 	bl	23fca18 <_Z11str_reversePc>
	return buffer;
 23fca7c:	4620      	mov	r0, r4
}
 23fca7e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 23fca80:	2000      	movs	r0, #0
 23fca82:	e7fc      	b.n	23fca7e <ultoa+0x44>

023fca84 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 23fca84:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 23fca86:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 23fca88:	460c      	mov	r4, r1
 23fca8a:	4615      	mov	r5, r2
	if(a<0){
 23fca8c:	da0d      	bge.n	23fcaaa <itoa+0x26>
		*buffer = '-';
 23fca8e:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 23fca90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23fca94:	bf0c      	ite	eq
 23fca96:	4618      	moveq	r0, r3
 23fca98:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 23fca9a:	2301      	movs	r3, #1
		*buffer = '-';
 23fca9c:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 23fca9e:	462a      	mov	r2, r5
 23fcaa0:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 23fcaa2:	f7ff ffca 	bl	23fca3a <ultoa>
	}
	return buffer;
}
 23fcaa6:	4620      	mov	r0, r4
 23fcaa8:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 23fcaaa:	2301      	movs	r3, #1
 23fcaac:	e7f9      	b.n	23fcaa2 <itoa+0x1e>
	...

023fcab0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fcab0:	4b01      	ldr	r3, [pc, #4]	; (23fcab8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fcab2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fcab4:	4770      	bx	lr
 23fcab6:	bf00      	nop
 23fcab8:	1007aae8 	.word	0x1007aae8

023fcabc <serialEventRun>:
{
 23fcabc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fcabe:	4b0f      	ldr	r3, [pc, #60]	; (23fcafc <serialEventRun+0x40>)
 23fcac0:	b143      	cbz	r3, 23fcad4 <serialEventRun+0x18>
 23fcac2:	f7ff ff39 	bl	23fc938 <_Z16_fetch_usbserialv>
 23fcac6:	6803      	ldr	r3, [r0, #0]
 23fcac8:	691b      	ldr	r3, [r3, #16]
 23fcaca:	4798      	blx	r3
 23fcacc:	2800      	cmp	r0, #0
 23fcace:	dd01      	ble.n	23fcad4 <serialEventRun+0x18>
        serialEvent();
 23fcad0:	e000      	b.n	23fcad4 <serialEventRun+0x18>
 23fcad2:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fcad4:	4b0a      	ldr	r3, [pc, #40]	; (23fcb00 <serialEventRun+0x44>)
 23fcad6:	b143      	cbz	r3, 23fcaea <serialEventRun+0x2e>
 23fcad8:	f000 f980 	bl	23fcddc <_Z22__fetch_global_Serial1v>
 23fcadc:	6803      	ldr	r3, [r0, #0]
 23fcade:	691b      	ldr	r3, [r3, #16]
 23fcae0:	4798      	blx	r3
 23fcae2:	2800      	cmp	r0, #0
 23fcae4:	dd01      	ble.n	23fcaea <serialEventRun+0x2e>
        serialEvent1();
 23fcae6:	e000      	b.n	23fcaea <serialEventRun+0x2e>
 23fcae8:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fcaea:	4b06      	ldr	r3, [pc, #24]	; (23fcb04 <serialEventRun+0x48>)
 23fcaec:	b10b      	cbz	r3, 23fcaf2 <serialEventRun+0x36>
 23fcaee:	f000 f9bb 	bl	23fce68 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fcaf2:	4b05      	ldr	r3, [pc, #20]	; (23fcb08 <serialEventRun+0x4c>)
 23fcaf4:	b10b      	cbz	r3, 23fcafa <serialEventRun+0x3e>
 23fcaf6:	f000 f9ed 	bl	23fced4 <_Z15serialEventRun3v>
}
 23fcafa:	bd08      	pop	{r3, pc}
	...

023fcb0c <_post_loop>:
{
 23fcb0c:	b508      	push	{r3, lr}
	serialEventRun();
 23fcb0e:	f7ff ffd5 	bl	23fcabc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fcb12:	f7fc fca1 	bl	23f9458 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fcb16:	4b01      	ldr	r3, [pc, #4]	; (23fcb1c <_post_loop+0x10>)
 23fcb18:	6018      	str	r0, [r3, #0]
}
 23fcb1a:	bd08      	pop	{r3, pc}
 23fcb1c:	1007aeec 	.word	0x1007aeec

023fcb20 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fcb20:	4805      	ldr	r0, [pc, #20]	; (23fcb38 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fcb22:	4a06      	ldr	r2, [pc, #24]	; (23fcb3c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fcb24:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fcb26:	1a12      	subs	r2, r2, r0
 23fcb28:	4905      	ldr	r1, [pc, #20]	; (23fcb40 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fcb2a:	f000 fb4d 	bl	23fd1c8 <memcpy>
    __backup_sram_signature = signature;
 23fcb2e:	4b05      	ldr	r3, [pc, #20]	; (23fcb44 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fcb30:	4a05      	ldr	r2, [pc, #20]	; (23fcb48 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fcb32:	601a      	str	r2, [r3, #0]
}
 23fcb34:	bd08      	pop	{r3, pc}
 23fcb36:	bf00      	nop
 23fcb38:	1007b400 	.word	0x1007b400
 23fcb3c:	1007b404 	.word	0x1007b404
 23fcb40:	085ff774 	.word	0x085ff774
 23fcb44:	1007b400 	.word	0x1007b400
 23fcb48:	9a271c1e 	.word	0x9a271c1e

023fcb4c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fcb4c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fcb4e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fcb50:	461a      	mov	r2, r3
 23fcb52:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fcb56:	9300      	str	r3, [sp, #0]
 23fcb58:	f7fc fffe 	bl	23f9b58 <system_ctrl_set_result>
}
 23fcb5c:	b003      	add	sp, #12
 23fcb5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fcb64 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fcb64:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fcb66:	8843      	ldrh	r3, [r0, #2]
 23fcb68:	2b0a      	cmp	r3, #10
 23fcb6a:	d008      	beq.n	23fcb7e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fcb6c:	2b50      	cmp	r3, #80	; 0x50
 23fcb6e:	d10b      	bne.n	23fcb88 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fcb70:	4b09      	ldr	r3, [pc, #36]	; (23fcb98 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fcb72:	681b      	ldr	r3, [r3, #0]
 23fcb74:	b14b      	cbz	r3, 23fcb8a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fcb76:	b003      	add	sp, #12
 23fcb78:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fcb7c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fcb7e:	f7ff ffe5 	bl	23fcb4c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fcb82:	b003      	add	sp, #12
 23fcb84:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fcb88:	2300      	movs	r3, #0
 23fcb8a:	461a      	mov	r2, r3
 23fcb8c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fcb90:	9300      	str	r3, [sp, #0]
 23fcb92:	f7fc ffe1 	bl	23f9b58 <system_ctrl_set_result>
}
 23fcb96:	e7f4      	b.n	23fcb82 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fcb98:	1007aedc 	.word	0x1007aedc

023fcb9c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fcb9c:	2100      	movs	r1, #0
{
 23fcb9e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fcba0:	4811      	ldr	r0, [pc, #68]	; (23fcbe8 <module_user_init_hook+0x4c>)
 23fcba2:	f7fd f9b5 	bl	23f9f10 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fcba6:	4b11      	ldr	r3, [pc, #68]	; (23fcbec <module_user_init_hook+0x50>)
 23fcba8:	681a      	ldr	r2, [r3, #0]
 23fcbaa:	4b11      	ldr	r3, [pc, #68]	; (23fcbf0 <module_user_init_hook+0x54>)
 23fcbac:	429a      	cmp	r2, r3
 23fcbae:	bf0c      	ite	eq
 23fcbb0:	2201      	moveq	r2, #1
 23fcbb2:	2200      	movne	r2, #0
 23fcbb4:	4b0f      	ldr	r3, [pc, #60]	; (23fcbf4 <module_user_init_hook+0x58>)
 23fcbb6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fcbb8:	d001      	beq.n	23fcbbe <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fcbba:	f7ff ffb1 	bl	23fcb20 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fcbbe:	f7fc fc2f 	bl	23f9420 <HAL_RNG_GetRandomNumber>
 23fcbc2:	4604      	mov	r4, r0
    srand(seed);
 23fcbc4:	f000 fb30 	bl	23fd228 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fcbc8:	4b0b      	ldr	r3, [pc, #44]	; (23fcbf8 <module_user_init_hook+0x5c>)
 23fcbca:	b113      	cbz	r3, 23fcbd2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fcbcc:	4620      	mov	r0, r4
 23fcbce:	e000      	b.n	23fcbd2 <module_user_init_hook+0x36>
 23fcbd0:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fcbd2:	2100      	movs	r1, #0
 23fcbd4:	4808      	ldr	r0, [pc, #32]	; (23fcbf8 <module_user_init_hook+0x5c>)
 23fcbd6:	f7fd f82f 	bl	23f9c38 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fcbda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fcbde:	2100      	movs	r1, #0
 23fcbe0:	4806      	ldr	r0, [pc, #24]	; (23fcbfc <module_user_init_hook+0x60>)
 23fcbe2:	f7fc bfab 	b.w	23f9b3c <system_ctrl_set_app_request_handler>
 23fcbe6:	bf00      	nop
 23fcbe8:	023fcab1 	.word	0x023fcab1
 23fcbec:	1007b400 	.word	0x1007b400
 23fcbf0:	9a271c1e 	.word	0x9a271c1e
 23fcbf4:	1007aed8 	.word	0x1007aed8
 23fcbf8:	00000000 	.word	0x00000000
 23fcbfc:	023fcb65 	.word	0x023fcb65

023fcc00 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fcc00:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fcc02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcc04:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fcc06:	d902      	bls.n	23fcc0e <pinAvailable+0xe>
    return false;
 23fcc08:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fcc0a:	b003      	add	sp, #12
 23fcc0c:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fcc0e:	f1a0 030f 	sub.w	r3, r0, #15
 23fcc12:	2b02      	cmp	r3, #2
 23fcc14:	d90b      	bls.n	23fcc2e <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fcc16:	2801      	cmp	r0, #1
 23fcc18:	d821      	bhi.n	23fcc5e <pinAvailable+0x5e>
 23fcc1a:	f000 f88b 	bl	23fcd34 <_Z19__fetch_global_Wirev>
 23fcc1e:	2100      	movs	r1, #0
 23fcc20:	7c00      	ldrb	r0, [r0, #16]
 23fcc22:	f7fc fcdd 	bl	23f95e0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fcc26:	f080 0001 	eor.w	r0, r0, #1
 23fcc2a:	b2c0      	uxtb	r0, r0
 23fcc2c:	e7ed      	b.n	23fcc0a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fcc2e:	4d11      	ldr	r5, [pc, #68]	; (23fcc74 <pinAvailable+0x74>)
 23fcc30:	e8d5 1f8f 	ldab	r1, [r5]
 23fcc34:	f011 0101 	ands.w	r1, r1, #1
 23fcc38:	d10b      	bne.n	23fcc52 <pinAvailable+0x52>
 23fcc3a:	4628      	mov	r0, r5
 23fcc3c:	9101      	str	r1, [sp, #4]
 23fcc3e:	f7f9 fe7b 	bl	23f6938 <__cxa_guard_acquire>
 23fcc42:	9901      	ldr	r1, [sp, #4]
 23fcc44:	b128      	cbz	r0, 23fcc52 <pinAvailable+0x52>
 23fcc46:	480c      	ldr	r0, [pc, #48]	; (23fcc78 <pinAvailable+0x78>)
 23fcc48:	f7fe fdca 	bl	23fb7e0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fcc4c:	4628      	mov	r0, r5
 23fcc4e:	f7f9 fe78 	bl	23f6942 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fcc52:	4b09      	ldr	r3, [pc, #36]	; (23fcc78 <pinAvailable+0x78>)
 23fcc54:	7818      	ldrb	r0, [r3, #0]
 23fcc56:	f7fc fd95 	bl	23f9784 <hal_spi_is_enabled>
 23fcc5a:	2800      	cmp	r0, #0
 23fcc5c:	d1d4      	bne.n	23fcc08 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fcc5e:	3c08      	subs	r4, #8
 23fcc60:	2c01      	cmp	r4, #1
 23fcc62:	d805      	bhi.n	23fcc70 <pinAvailable+0x70>
 23fcc64:	f000 f8ba 	bl	23fcddc <_Z22__fetch_global_Serial1v>
 23fcc68:	7c00      	ldrb	r0, [r0, #16]
 23fcc6a:	f7fc fded 	bl	23f9848 <hal_usart_is_enabled>
 23fcc6e:	e7da      	b.n	23fcc26 <pinAvailable+0x26>
  return true; // 'pin' is available
 23fcc70:	2001      	movs	r0, #1
 23fcc72:	e7ca      	b.n	23fcc0a <pinAvailable+0xa>
 23fcc74:	1007aee0 	.word	0x1007aee0
 23fcc78:	1007aee4 	.word	0x1007aee4

023fcc7c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fcc7c:	281b      	cmp	r0, #27
{
 23fcc7e:	b538      	push	{r3, r4, r5, lr}
 23fcc80:	4604      	mov	r4, r0
 23fcc82:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fcc84:	d80a      	bhi.n	23fcc9c <pinMode+0x20>
 23fcc86:	29ff      	cmp	r1, #255	; 0xff
 23fcc88:	d008      	beq.n	23fcc9c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fcc8a:	f7ff ffb9 	bl	23fcc00 <pinAvailable>
 23fcc8e:	b128      	cbz	r0, 23fcc9c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fcc90:	4629      	mov	r1, r5
 23fcc92:	4620      	mov	r0, r4
}
 23fcc94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fcc98:	f7fc bc32 	b.w	23f9500 <hal_gpio_mode>
}
 23fcc9c:	bd38      	pop	{r3, r4, r5, pc}

023fcc9e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fcc9e:	b538      	push	{r3, r4, r5, lr}
 23fcca0:	4604      	mov	r4, r0
 23fcca2:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fcca4:	f7fc fc3a 	bl	23f951c <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fcca8:	28ff      	cmp	r0, #255	; 0xff
 23fccaa:	d010      	beq.n	23fccce <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fccac:	2806      	cmp	r0, #6
 23fccae:	d804      	bhi.n	23fccba <digitalWrite+0x1c>
 23fccb0:	234d      	movs	r3, #77	; 0x4d
 23fccb2:	fa23 f000 	lsr.w	r0, r3, r0
 23fccb6:	07c3      	lsls	r3, r0, #31
 23fccb8:	d409      	bmi.n	23fccce <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fccba:	4620      	mov	r0, r4
 23fccbc:	f7ff ffa0 	bl	23fcc00 <pinAvailable>
 23fccc0:	b128      	cbz	r0, 23fccce <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fccc2:	4629      	mov	r1, r5
 23fccc4:	4620      	mov	r0, r4
}
 23fccc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fccca:	f7fc bc35 	b.w	23f9538 <hal_gpio_write>
}
 23fccce:	bd38      	pop	{r3, r4, r5, pc}

023fccd0 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 23fccd0:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 23fccd2:	4c08      	ldr	r4, [pc, #32]	; (23fccf4 <_Z21__fetch_global_EEPROMv+0x24>)
 23fccd4:	e8d4 3f8f 	ldab	r3, [r4]
 23fccd8:	07db      	lsls	r3, r3, #31
 23fccda:	d408      	bmi.n	23fccee <_Z21__fetch_global_EEPROMv+0x1e>
 23fccdc:	4620      	mov	r0, r4
 23fccde:	f7f9 fe2b 	bl	23f6938 <__cxa_guard_acquire>
 23fcce2:	b120      	cbz	r0, 23fccee <_Z21__fetch_global_EEPROMv+0x1e>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 23fcce4:	f7fc fbc6 	bl	23f9474 <HAL_EEPROM_Init>
 23fcce8:	4620      	mov	r0, r4
 23fccea:	f7f9 fe2a 	bl	23f6942 <__cxa_guard_release>
	return eeprom;
}
 23fccee:	4802      	ldr	r0, [pc, #8]	; (23fccf8 <_Z21__fetch_global_EEPROMv+0x28>)
 23fccf0:	bd10      	pop	{r4, pc}
 23fccf2:	bf00      	nop
 23fccf4:	1007aef0 	.word	0x1007aef0
 23fccf8:	1007aef4 	.word	0x1007aef4

023fccfc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fccfc:	4770      	bx	lr
	...

023fcd00 <_Z17acquireWireBufferv>:
{
 23fcd00:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fcd02:	4b0a      	ldr	r3, [pc, #40]	; (23fcd2c <_Z17acquireWireBufferv+0x2c>)
{
 23fcd04:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fcd06:	6003      	str	r3, [r0, #0]
 23fcd08:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fcd0a:	4909      	ldr	r1, [pc, #36]	; (23fcd30 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fcd0c:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fcd0e:	2020      	movs	r0, #32
 23fcd10:	f000 f8f6 	bl	23fcf00 <_ZnajRKSt9nothrow_t>
	};
 23fcd14:	2520      	movs	r5, #32
 23fcd16:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fcd18:	4905      	ldr	r1, [pc, #20]	; (23fcd30 <_Z17acquireWireBufferv+0x30>)
 23fcd1a:	4628      	mov	r0, r5
	};
 23fcd1c:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fcd1e:	f000 f8ef 	bl	23fcf00 <_ZnajRKSt9nothrow_t>
	};
 23fcd22:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fcd26:	4620      	mov	r0, r4
 23fcd28:	bd38      	pop	{r3, r4, r5, pc}
 23fcd2a:	bf00      	nop
 23fcd2c:	00010018 	.word	0x00010018
 23fcd30:	023ffac4 	.word	0x023ffac4

023fcd34 <_Z19__fetch_global_Wirev>:
{
 23fcd34:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fcd36:	4d0e      	ldr	r5, [pc, #56]	; (23fcd70 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fcd38:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fcd3a:	e8d5 1f8f 	ldab	r1, [r5]
 23fcd3e:	f011 0401 	ands.w	r4, r1, #1
 23fcd42:	d111      	bne.n	23fcd68 <_Z19__fetch_global_Wirev+0x34>
 23fcd44:	4628      	mov	r0, r5
 23fcd46:	f7f9 fdf7 	bl	23f6938 <__cxa_guard_acquire>
 23fcd4a:	b168      	cbz	r0, 23fcd68 <_Z19__fetch_global_Wirev+0x34>
 23fcd4c:	4668      	mov	r0, sp
 23fcd4e:	f7ff ffd7 	bl	23fcd00 <_Z17acquireWireBufferv>
 23fcd52:	466a      	mov	r2, sp
 23fcd54:	4621      	mov	r1, r4
 23fcd56:	4807      	ldr	r0, [pc, #28]	; (23fcd74 <_Z19__fetch_global_Wirev+0x40>)
 23fcd58:	f7fd f9de 	bl	23fa118 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fcd5c:	4628      	mov	r0, r5
 23fcd5e:	f7f9 fdf0 	bl	23f6942 <__cxa_guard_release>
 23fcd62:	4805      	ldr	r0, [pc, #20]	; (23fcd78 <_Z19__fetch_global_Wirev+0x44>)
 23fcd64:	f000 fa12 	bl	23fd18c <atexit>
	return wire;
}
 23fcd68:	4802      	ldr	r0, [pc, #8]	; (23fcd74 <_Z19__fetch_global_Wirev+0x40>)
 23fcd6a:	b007      	add	sp, #28
 23fcd6c:	bd30      	pop	{r4, r5, pc}
 23fcd6e:	bf00      	nop
 23fcd70:	1007aef8 	.word	0x1007aef8
 23fcd74:	1007aefc 	.word	0x1007aefc
 23fcd78:	023fccfd 	.word	0x023fccfd

023fcd7c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fcd7c:	4770      	bx	lr
	...

023fcd80 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fcd80:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fcd82:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fcd84:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fcd86:	462a      	mov	r2, r5
 23fcd88:	2100      	movs	r1, #0
 23fcd8a:	f000 fa44 	bl	23fd216 <memset>
 23fcd8e:	8025      	strh	r5, [r4, #0]
 23fcd90:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fcd92:	4907      	ldr	r1, [pc, #28]	; (23fcdb0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fcd94:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fcd96:	8125      	strh	r5, [r4, #8]
 23fcd98:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fcd9a:	f000 f8b1 	bl	23fcf00 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fcd9e:	4904      	ldr	r1, [pc, #16]	; (23fcdb0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fcda0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fcda2:	4628      	mov	r0, r5
 23fcda4:	f000 f8ac 	bl	23fcf00 <_ZnajRKSt9nothrow_t>
    };
 23fcda8:	60e0      	str	r0, [r4, #12]
}
 23fcdaa:	4620      	mov	r0, r4
 23fcdac:	bd38      	pop	{r3, r4, r5, pc}
 23fcdae:	bf00      	nop
 23fcdb0:	023ffac4 	.word	0x023ffac4

023fcdb4 <__tcf_2>:
 23fcdb4:	4770      	bx	lr

023fcdb6 <__tcf_1>:
 23fcdb6:	4770      	bx	lr

023fcdb8 <_Z20acquireSerial1Bufferv>:
{
 23fcdb8:	b510      	push	{r4, lr}
 23fcdba:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fcdbc:	f7ff ffe0 	bl	23fcd80 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fcdc0:	4620      	mov	r0, r4
 23fcdc2:	bd10      	pop	{r4, pc}

023fcdc4 <_Z20acquireSerial2Bufferv>:
 23fcdc4:	b510      	push	{r4, lr}
 23fcdc6:	4604      	mov	r4, r0
 23fcdc8:	f7ff ffda 	bl	23fcd80 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fcdcc:	4620      	mov	r0, r4
 23fcdce:	bd10      	pop	{r4, pc}

023fcdd0 <_Z20acquireSerial3Bufferv>:
 23fcdd0:	b510      	push	{r4, lr}
 23fcdd2:	4604      	mov	r4, r0
 23fcdd4:	f7ff ffd4 	bl	23fcd80 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fcdd8:	4620      	mov	r0, r4
 23fcdda:	bd10      	pop	{r4, pc}

023fcddc <_Z22__fetch_global_Serial1v>:
{
 23fcddc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fcdde:	4d0e      	ldr	r5, [pc, #56]	; (23fce18 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fcde0:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fcde2:	e8d5 1f8f 	ldab	r1, [r5]
 23fcde6:	f011 0401 	ands.w	r4, r1, #1
 23fcdea:	d111      	bne.n	23fce10 <_Z22__fetch_global_Serial1v+0x34>
 23fcdec:	4628      	mov	r0, r5
 23fcdee:	f7f9 fda3 	bl	23f6938 <__cxa_guard_acquire>
 23fcdf2:	b168      	cbz	r0, 23fce10 <_Z22__fetch_global_Serial1v+0x34>
 23fcdf4:	a801      	add	r0, sp, #4
 23fcdf6:	f7ff ffdf 	bl	23fcdb8 <_Z20acquireSerial1Bufferv>
 23fcdfa:	4621      	mov	r1, r4
 23fcdfc:	aa01      	add	r2, sp, #4
 23fcdfe:	4807      	ldr	r0, [pc, #28]	; (23fce1c <_Z22__fetch_global_Serial1v+0x40>)
 23fce00:	f7ff fd16 	bl	23fc830 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fce04:	4628      	mov	r0, r5
 23fce06:	f7f9 fd9c 	bl	23f6942 <__cxa_guard_release>
 23fce0a:	4805      	ldr	r0, [pc, #20]	; (23fce20 <_Z22__fetch_global_Serial1v+0x44>)
 23fce0c:	f000 f9be 	bl	23fd18c <atexit>
    return serial1;
}
 23fce10:	4802      	ldr	r0, [pc, #8]	; (23fce1c <_Z22__fetch_global_Serial1v+0x40>)
 23fce12:	b007      	add	sp, #28
 23fce14:	bd30      	pop	{r4, r5, pc}
 23fce16:	bf00      	nop
 23fce18:	1007af10 	.word	0x1007af10
 23fce1c:	1007af1c 	.word	0x1007af1c
 23fce20:	023fcd7d 	.word	0x023fcd7d

023fce24 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fce24:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fce26:	4c0d      	ldr	r4, [pc, #52]	; (23fce5c <_Z22__fetch_global_Serial2v+0x38>)
{
 23fce28:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fce2a:	e8d4 3f8f 	ldab	r3, [r4]
 23fce2e:	07db      	lsls	r3, r3, #31
 23fce30:	d411      	bmi.n	23fce56 <_Z22__fetch_global_Serial2v+0x32>
 23fce32:	4620      	mov	r0, r4
 23fce34:	f7f9 fd80 	bl	23f6938 <__cxa_guard_acquire>
 23fce38:	b168      	cbz	r0, 23fce56 <_Z22__fetch_global_Serial2v+0x32>
 23fce3a:	a801      	add	r0, sp, #4
 23fce3c:	f7ff ffc2 	bl	23fcdc4 <_Z20acquireSerial2Bufferv>
 23fce40:	2101      	movs	r1, #1
 23fce42:	aa01      	add	r2, sp, #4
 23fce44:	4806      	ldr	r0, [pc, #24]	; (23fce60 <_Z22__fetch_global_Serial2v+0x3c>)
 23fce46:	f7ff fcf3 	bl	23fc830 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fce4a:	4620      	mov	r0, r4
 23fce4c:	f7f9 fd79 	bl	23f6942 <__cxa_guard_release>
 23fce50:	4804      	ldr	r0, [pc, #16]	; (23fce64 <_Z22__fetch_global_Serial2v+0x40>)
 23fce52:	f000 f99b 	bl	23fd18c <atexit>
	return serial2;
}
 23fce56:	4802      	ldr	r0, [pc, #8]	; (23fce60 <_Z22__fetch_global_Serial2v+0x3c>)
 23fce58:	b006      	add	sp, #24
 23fce5a:	bd10      	pop	{r4, pc}
 23fce5c:	1007af14 	.word	0x1007af14
 23fce60:	1007af30 	.word	0x1007af30
 23fce64:	023fcdb7 	.word	0x023fcdb7

023fce68 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fce68:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fce6a:	f7ff ffdb 	bl	23fce24 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fce6e:	4b07      	ldr	r3, [pc, #28]	; (23fce8c <_Z15serialEventRun2v+0x24>)
 23fce70:	4604      	mov	r4, r0
 23fce72:	b153      	cbz	r3, 23fce8a <_Z15serialEventRun2v+0x22>
 23fce74:	f7ff fcfa 	bl	23fc86c <_ZN11USARTSerial9isEnabledEv>
 23fce78:	b138      	cbz	r0, 23fce8a <_Z15serialEventRun2v+0x22>
 23fce7a:	6823      	ldr	r3, [r4, #0]
 23fce7c:	4620      	mov	r0, r4
 23fce7e:	691b      	ldr	r3, [r3, #16]
 23fce80:	4798      	blx	r3
 23fce82:	2800      	cmp	r0, #0
 23fce84:	dd01      	ble.n	23fce8a <_Z15serialEventRun2v+0x22>
        handler();
 23fce86:	e000      	b.n	23fce8a <_Z15serialEventRun2v+0x22>
 23fce88:	bf00      	nop
}
 23fce8a:	bd10      	pop	{r4, pc}
 23fce8c:	00000000 	.word	0x00000000

023fce90 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fce90:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fce92:	4c0d      	ldr	r4, [pc, #52]	; (23fcec8 <_Z22__fetch_global_Serial3v+0x38>)
{
 23fce94:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fce96:	e8d4 3f8f 	ldab	r3, [r4]
 23fce9a:	07db      	lsls	r3, r3, #31
 23fce9c:	d411      	bmi.n	23fcec2 <_Z22__fetch_global_Serial3v+0x32>
 23fce9e:	4620      	mov	r0, r4
 23fcea0:	f7f9 fd4a 	bl	23f6938 <__cxa_guard_acquire>
 23fcea4:	b168      	cbz	r0, 23fcec2 <_Z22__fetch_global_Serial3v+0x32>
 23fcea6:	a801      	add	r0, sp, #4
 23fcea8:	f7ff ff92 	bl	23fcdd0 <_Z20acquireSerial3Bufferv>
 23fceac:	2102      	movs	r1, #2
 23fceae:	aa01      	add	r2, sp, #4
 23fceb0:	4806      	ldr	r0, [pc, #24]	; (23fcecc <_Z22__fetch_global_Serial3v+0x3c>)
 23fceb2:	f7ff fcbd 	bl	23fc830 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fceb6:	4620      	mov	r0, r4
 23fceb8:	f7f9 fd43 	bl	23f6942 <__cxa_guard_release>
 23fcebc:	4804      	ldr	r0, [pc, #16]	; (23fced0 <_Z22__fetch_global_Serial3v+0x40>)
 23fcebe:	f000 f965 	bl	23fd18c <atexit>
	return serial3;
}
 23fcec2:	4802      	ldr	r0, [pc, #8]	; (23fcecc <_Z22__fetch_global_Serial3v+0x3c>)
 23fcec4:	b006      	add	sp, #24
 23fcec6:	bd10      	pop	{r4, pc}
 23fcec8:	1007af18 	.word	0x1007af18
 23fcecc:	1007af44 	.word	0x1007af44
 23fced0:	023fcdb5 	.word	0x023fcdb5

023fced4 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fced4:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fced6:	f7ff ffdb 	bl	23fce90 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fceda:	4b07      	ldr	r3, [pc, #28]	; (23fcef8 <_Z15serialEventRun3v+0x24>)
 23fcedc:	4604      	mov	r4, r0
 23fcede:	b153      	cbz	r3, 23fcef6 <_Z15serialEventRun3v+0x22>
 23fcee0:	f7ff fcc4 	bl	23fc86c <_ZN11USARTSerial9isEnabledEv>
 23fcee4:	b138      	cbz	r0, 23fcef6 <_Z15serialEventRun3v+0x22>
 23fcee6:	6823      	ldr	r3, [r4, #0]
 23fcee8:	4620      	mov	r0, r4
 23fceea:	691b      	ldr	r3, [r3, #16]
 23fceec:	4798      	blx	r3
 23fceee:	2800      	cmp	r0, #0
 23fcef0:	dd01      	ble.n	23fcef6 <_Z15serialEventRun3v+0x22>
        handler();
 23fcef2:	e000      	b.n	23fcef6 <_Z15serialEventRun3v+0x22>
 23fcef4:	bf00      	nop
}
 23fcef6:	bd10      	pop	{r4, pc}
 23fcef8:	00000000 	.word	0x00000000

023fcefc <_ZnwjRKSt9nothrow_t>:
 23fcefc:	f7f9 bd07 	b.w	23f690e <_Znwj>

023fcf00 <_ZnajRKSt9nothrow_t>:
 23fcf00:	f7f9 bd07 	b.w	23f6912 <_Znaj>

023fcf04 <_ZSt25__throw_bad_function_callv>:
 23fcf04:	b508      	push	{r3, lr}
 23fcf06:	f7fc ffcb 	bl	23f9ea0 <abort>
	...

023fcf0c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23fcf0c:	4901      	ldr	r1, [pc, #4]	; (23fcf14 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23fcf0e:	f000 b8f9 	b.w	23fd104 <_ZNKSt9type_infoeqERKS_>
 23fcf12:	bf00      	nop
 23fcf14:	023ffae0 	.word	0x023ffae0

023fcf18 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23fcf18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23fcf1a:	2400      	movs	r4, #0
 23fcf1c:	2310      	movs	r3, #16
 23fcf1e:	4615      	mov	r5, r2
 23fcf20:	6812      	ldr	r2, [r2, #0]
 23fcf22:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23fcf26:	6803      	ldr	r3, [r0, #0]
 23fcf28:	e9cd 4400 	strd	r4, r4, [sp]
 23fcf2c:	699e      	ldr	r6, [r3, #24]
 23fcf2e:	466b      	mov	r3, sp
 23fcf30:	47b0      	blx	r6
 23fcf32:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23fcf36:	f003 0306 	and.w	r3, r3, #6
 23fcf3a:	2b06      	cmp	r3, #6
 23fcf3c:	bf05      	ittet	eq
 23fcf3e:	9b00      	ldreq	r3, [sp, #0]
 23fcf40:	2001      	moveq	r0, #1
 23fcf42:	4620      	movne	r0, r4
 23fcf44:	602b      	streq	r3, [r5, #0]
 23fcf46:	b004      	add	sp, #16
 23fcf48:	bd70      	pop	{r4, r5, r6, pc}

023fcf4a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23fcf4a:	9800      	ldr	r0, [sp, #0]
 23fcf4c:	4290      	cmp	r0, r2
 23fcf4e:	bf14      	ite	ne
 23fcf50:	2001      	movne	r0, #1
 23fcf52:	2006      	moveq	r0, #6
 23fcf54:	4770      	bx	lr
	...

023fcf58 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23fcf58:	4b03      	ldr	r3, [pc, #12]	; (23fcf68 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23fcf5a:	b510      	push	{r4, lr}
 23fcf5c:	4604      	mov	r4, r0
 23fcf5e:	6003      	str	r3, [r0, #0]
 23fcf60:	f000 f8cd 	bl	23fd0fe <_ZNSt9type_infoD1Ev>
 23fcf64:	4620      	mov	r0, r4
 23fcf66:	bd10      	pop	{r4, pc}
 23fcf68:	023ffb20 	.word	0x023ffb20

023fcf6c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23fcf6c:	b510      	push	{r4, lr}
 23fcf6e:	4604      	mov	r4, r0
 23fcf70:	f7ff fff2 	bl	23fcf58 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fcf74:	2108      	movs	r1, #8
 23fcf76:	4620      	mov	r0, r4
 23fcf78:	f7f9 fccf 	bl	23f691a <_ZdlPvj>
 23fcf7c:	4620      	mov	r0, r4
 23fcf7e:	bd10      	pop	{r4, pc}

023fcf80 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23fcf80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fcf84:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23fcf88:	461f      	mov	r7, r3
 23fcf8a:	4606      	mov	r6, r0
 23fcf8c:	4615      	mov	r5, r2
 23fcf8e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23fcf92:	4598      	cmp	r8, r3
 23fcf94:	d107      	bne.n	23fcfa6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fcf96:	9907      	ldr	r1, [sp, #28]
 23fcf98:	f000 f8b4 	bl	23fd104 <_ZNKSt9type_infoeqERKS_>
 23fcf9c:	b118      	cbz	r0, 23fcfa6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fcf9e:	7165      	strb	r5, [r4, #5]
 23fcfa0:	2000      	movs	r0, #0
 23fcfa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fcfa6:	4639      	mov	r1, r7
 23fcfa8:	4630      	mov	r0, r6
 23fcfaa:	f000 f8ab 	bl	23fd104 <_ZNKSt9type_infoeqERKS_>
 23fcfae:	2800      	cmp	r0, #0
 23fcfb0:	d0f6      	beq.n	23fcfa0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23fcfb2:	2301      	movs	r3, #1
 23fcfb4:	f8c4 8000 	str.w	r8, [r4]
 23fcfb8:	7125      	strb	r5, [r4, #4]
 23fcfba:	71a3      	strb	r3, [r4, #6]
 23fcfbc:	e7f0      	b.n	23fcfa0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023fcfbe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23fcfbe:	b538      	push	{r3, r4, r5, lr}
 23fcfc0:	4615      	mov	r5, r2
 23fcfc2:	461c      	mov	r4, r3
 23fcfc4:	f000 f89e 	bl	23fd104 <_ZNKSt9type_infoeqERKS_>
 23fcfc8:	b120      	cbz	r0, 23fcfd4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23fcfca:	2308      	movs	r3, #8
 23fcfcc:	6025      	str	r5, [r4, #0]
 23fcfce:	60e3      	str	r3, [r4, #12]
 23fcfd0:	2306      	movs	r3, #6
 23fcfd2:	7123      	strb	r3, [r4, #4]
 23fcfd4:	bd38      	pop	{r3, r4, r5, pc}

023fcfd6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23fcfd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fcfd8:	4605      	mov	r5, r0
 23fcfda:	460c      	mov	r4, r1
 23fcfdc:	461e      	mov	r6, r3
 23fcfde:	9201      	str	r2, [sp, #4]
 23fcfe0:	f000 f890 	bl	23fd104 <_ZNKSt9type_infoeqERKS_>
 23fcfe4:	b950      	cbnz	r0, 23fcffc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fcfe6:	2e03      	cmp	r6, #3
 23fcfe8:	d808      	bhi.n	23fcffc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fcfea:	6823      	ldr	r3, [r4, #0]
 23fcfec:	4629      	mov	r1, r5
 23fcfee:	9a01      	ldr	r2, [sp, #4]
 23fcff0:	4620      	mov	r0, r4
 23fcff2:	695b      	ldr	r3, [r3, #20]
 23fcff4:	b002      	add	sp, #8
 23fcff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fcffa:	4718      	bx	r3
 23fcffc:	b002      	add	sp, #8
 23fcffe:	bd70      	pop	{r4, r5, r6, pc}

023fd000 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23fd000:	4b03      	ldr	r3, [pc, #12]	; (23fd010 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23fd002:	b510      	push	{r4, lr}
 23fd004:	4604      	mov	r4, r0
 23fd006:	6003      	str	r3, [r0, #0]
 23fd008:	f7ff ffa6 	bl	23fcf58 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fd00c:	4620      	mov	r0, r4
 23fd00e:	bd10      	pop	{r4, pc}
 23fd010:	023ffb80 	.word	0x023ffb80

023fd014 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23fd014:	b510      	push	{r4, lr}
 23fd016:	4604      	mov	r4, r0
 23fd018:	f7ff fff2 	bl	23fd000 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23fd01c:	210c      	movs	r1, #12
 23fd01e:	4620      	mov	r0, r4
 23fd020:	f7f9 fc7b 	bl	23f691a <_ZdlPvj>
 23fd024:	4620      	mov	r0, r4
 23fd026:	bd10      	pop	{r4, pc}

023fd028 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23fd028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fd02a:	9f08      	ldr	r7, [sp, #32]
 23fd02c:	4605      	mov	r5, r0
 23fd02e:	460e      	mov	r6, r1
 23fd030:	4614      	mov	r4, r2
 23fd032:	4297      	cmp	r7, r2
 23fd034:	d00a      	beq.n	23fd04c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23fd036:	68a8      	ldr	r0, [r5, #8]
 23fd038:	4631      	mov	r1, r6
 23fd03a:	6802      	ldr	r2, [r0, #0]
 23fd03c:	9708      	str	r7, [sp, #32]
 23fd03e:	6a15      	ldr	r5, [r2, #32]
 23fd040:	4622      	mov	r2, r4
 23fd042:	46ac      	mov	ip, r5
 23fd044:	b003      	add	sp, #12
 23fd046:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd04a:	4760      	bx	ip
 23fd04c:	4619      	mov	r1, r3
 23fd04e:	9301      	str	r3, [sp, #4]
 23fd050:	f000 f858 	bl	23fd104 <_ZNKSt9type_infoeqERKS_>
 23fd054:	9b01      	ldr	r3, [sp, #4]
 23fd056:	2800      	cmp	r0, #0
 23fd058:	d0ed      	beq.n	23fd036 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23fd05a:	2006      	movs	r0, #6
 23fd05c:	b003      	add	sp, #12
 23fd05e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fd060 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23fd060:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd064:	460d      	mov	r5, r1
 23fd066:	4619      	mov	r1, r3
 23fd068:	4681      	mov	r9, r0
 23fd06a:	4617      	mov	r7, r2
 23fd06c:	4698      	mov	r8, r3
 23fd06e:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23fd072:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23fd076:	f000 f845 	bl	23fd104 <_ZNKSt9type_infoeqERKS_>
 23fd07a:	b190      	cbz	r0, 23fd0a2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23fd07c:	2d00      	cmp	r5, #0
 23fd07e:	6034      	str	r4, [r6, #0]
 23fd080:	7137      	strb	r7, [r6, #4]
 23fd082:	db09      	blt.n	23fd098 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23fd084:	1961      	adds	r1, r4, r5
 23fd086:	458a      	cmp	sl, r1
 23fd088:	bf0c      	ite	eq
 23fd08a:	2106      	moveq	r1, #6
 23fd08c:	2101      	movne	r1, #1
 23fd08e:	71b1      	strb	r1, [r6, #6]
 23fd090:	2000      	movs	r0, #0
 23fd092:	b001      	add	sp, #4
 23fd094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd098:	3502      	adds	r5, #2
 23fd09a:	d1f9      	bne.n	23fd090 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fd09c:	2301      	movs	r3, #1
 23fd09e:	71b3      	strb	r3, [r6, #6]
 23fd0a0:	e7f6      	b.n	23fd090 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fd0a2:	4554      	cmp	r4, sl
 23fd0a4:	d106      	bne.n	23fd0b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fd0a6:	4659      	mov	r1, fp
 23fd0a8:	4648      	mov	r0, r9
 23fd0aa:	f000 f82b 	bl	23fd104 <_ZNKSt9type_infoeqERKS_>
 23fd0ae:	b108      	cbz	r0, 23fd0b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fd0b0:	7177      	strb	r7, [r6, #5]
 23fd0b2:	e7ed      	b.n	23fd090 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fd0b4:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23fd0b8:	463a      	mov	r2, r7
 23fd0ba:	4629      	mov	r1, r5
 23fd0bc:	6803      	ldr	r3, [r0, #0]
 23fd0be:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23fd0c2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23fd0c6:	69dc      	ldr	r4, [r3, #28]
 23fd0c8:	4643      	mov	r3, r8
 23fd0ca:	46a4      	mov	ip, r4
 23fd0cc:	b001      	add	sp, #4
 23fd0ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd0d2:	4760      	bx	ip

023fd0d4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23fd0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd0d8:	4607      	mov	r7, r0
 23fd0da:	460c      	mov	r4, r1
 23fd0dc:	4615      	mov	r5, r2
 23fd0de:	461e      	mov	r6, r3
 23fd0e0:	f7ff ff6d 	bl	23fcfbe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23fd0e4:	b948      	cbnz	r0, 23fd0fa <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23fd0e6:	68b8      	ldr	r0, [r7, #8]
 23fd0e8:	462a      	mov	r2, r5
 23fd0ea:	4621      	mov	r1, r4
 23fd0ec:	6803      	ldr	r3, [r0, #0]
 23fd0ee:	699f      	ldr	r7, [r3, #24]
 23fd0f0:	4633      	mov	r3, r6
 23fd0f2:	46bc      	mov	ip, r7
 23fd0f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23fd0f8:	4760      	bx	ip
 23fd0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fd0fe <_ZNSt9type_infoD1Ev>:
 23fd0fe:	4770      	bx	lr

023fd100 <_ZNKSt9type_info14__is_pointer_pEv>:
 23fd100:	2000      	movs	r0, #0
 23fd102:	4770      	bx	lr

023fd104 <_ZNKSt9type_infoeqERKS_>:
 23fd104:	4281      	cmp	r1, r0
 23fd106:	b508      	push	{r3, lr}
 23fd108:	d00e      	beq.n	23fd128 <_ZNKSt9type_infoeqERKS_+0x24>
 23fd10a:	6840      	ldr	r0, [r0, #4]
 23fd10c:	7803      	ldrb	r3, [r0, #0]
 23fd10e:	2b2a      	cmp	r3, #42	; 0x2a
 23fd110:	d00c      	beq.n	23fd12c <_ZNKSt9type_infoeqERKS_+0x28>
 23fd112:	6849      	ldr	r1, [r1, #4]
 23fd114:	780b      	ldrb	r3, [r1, #0]
 23fd116:	2b2a      	cmp	r3, #42	; 0x2a
 23fd118:	bf08      	it	eq
 23fd11a:	3101      	addeq	r1, #1
 23fd11c:	f7f9 fbb0 	bl	23f6880 <strcmp>
 23fd120:	fab0 f080 	clz	r0, r0
 23fd124:	0940      	lsrs	r0, r0, #5
 23fd126:	bd08      	pop	{r3, pc}
 23fd128:	2001      	movs	r0, #1
 23fd12a:	e7fc      	b.n	23fd126 <_ZNKSt9type_infoeqERKS_+0x22>
 23fd12c:	2000      	movs	r0, #0
 23fd12e:	e7fa      	b.n	23fd126 <_ZNKSt9type_infoeqERKS_+0x22>

023fd130 <nan>:
 23fd130:	ed9f 0b01 	vldr	d0, [pc, #4]	; 23fd138 <nan+0x8>
 23fd134:	4770      	bx	lr
 23fd136:	bf00      	nop
 23fd138:	00000000 	.word	0x00000000
 23fd13c:	7ff80000 	.word	0x7ff80000

023fd140 <asctime_r>:
 23fd140:	b510      	push	{r4, lr}
 23fd142:	460c      	mov	r4, r1
 23fd144:	6941      	ldr	r1, [r0, #20]
 23fd146:	b086      	sub	sp, #24
 23fd148:	6903      	ldr	r3, [r0, #16]
 23fd14a:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 23fd14e:	6982      	ldr	r2, [r0, #24]
 23fd150:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fd154:	9104      	str	r1, [sp, #16]
 23fd156:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 23fd15a:	6801      	ldr	r1, [r0, #0]
 23fd15c:	9103      	str	r1, [sp, #12]
 23fd15e:	6841      	ldr	r1, [r0, #4]
 23fd160:	9102      	str	r1, [sp, #8]
 23fd162:	6881      	ldr	r1, [r0, #8]
 23fd164:	9101      	str	r1, [sp, #4]
 23fd166:	68c1      	ldr	r1, [r0, #12]
 23fd168:	4620      	mov	r0, r4
 23fd16a:	9100      	str	r1, [sp, #0]
 23fd16c:	4904      	ldr	r1, [pc, #16]	; (23fd180 <asctime_r+0x40>)
 23fd16e:	440b      	add	r3, r1
 23fd170:	4904      	ldr	r1, [pc, #16]	; (23fd184 <asctime_r+0x44>)
 23fd172:	440a      	add	r2, r1
 23fd174:	4904      	ldr	r1, [pc, #16]	; (23fd188 <asctime_r+0x48>)
 23fd176:	f7fc fe69 	bl	23f9e4c <siprintf>
 23fd17a:	4620      	mov	r0, r4
 23fd17c:	b006      	add	sp, #24
 23fd17e:	bd10      	pop	{r4, pc}
 23fd180:	023ffbee 	.word	0x023ffbee
 23fd184:	023ffbd9 	.word	0x023ffbd9
 23fd188:	023ffbb9 	.word	0x023ffbb9

023fd18c <atexit>:
 23fd18c:	2300      	movs	r3, #0
 23fd18e:	4601      	mov	r1, r0
 23fd190:	461a      	mov	r2, r3
 23fd192:	4618      	mov	r0, r3
 23fd194:	f000 bf90 	b.w	23fe0b8 <__register_exitproc>

023fd198 <atof>:
 23fd198:	2100      	movs	r1, #0
 23fd19a:	f000 beeb 	b.w	23fdf74 <strtod>

023fd19e <atol>:
 23fd19e:	220a      	movs	r2, #10
 23fd1a0:	2100      	movs	r1, #0
 23fd1a2:	f000 bf75 	b.w	23fe090 <strtol>
	...

023fd1a8 <isprint>:
 23fd1a8:	4b02      	ldr	r3, [pc, #8]	; (23fd1b4 <isprint+0xc>)
 23fd1aa:	4418      	add	r0, r3
 23fd1ac:	7840      	ldrb	r0, [r0, #1]
 23fd1ae:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fd1b2:	4770      	bx	lr
 23fd1b4:	023ffce0 	.word	0x023ffce0

023fd1b8 <isspace>:
 23fd1b8:	4b02      	ldr	r3, [pc, #8]	; (23fd1c4 <isspace+0xc>)
 23fd1ba:	4418      	add	r0, r3
 23fd1bc:	7840      	ldrb	r0, [r0, #1]
 23fd1be:	f000 0008 	and.w	r0, r0, #8
 23fd1c2:	4770      	bx	lr
 23fd1c4:	023ffce0 	.word	0x023ffce0

023fd1c8 <memcpy>:
 23fd1c8:	440a      	add	r2, r1
 23fd1ca:	1e43      	subs	r3, r0, #1
 23fd1cc:	4291      	cmp	r1, r2
 23fd1ce:	d100      	bne.n	23fd1d2 <memcpy+0xa>
 23fd1d0:	4770      	bx	lr
 23fd1d2:	b510      	push	{r4, lr}
 23fd1d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fd1d8:	4291      	cmp	r1, r2
 23fd1da:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fd1de:	d1f9      	bne.n	23fd1d4 <memcpy+0xc>
 23fd1e0:	bd10      	pop	{r4, pc}

023fd1e2 <memmove>:
 23fd1e2:	4288      	cmp	r0, r1
 23fd1e4:	b510      	push	{r4, lr}
 23fd1e6:	eb01 0402 	add.w	r4, r1, r2
 23fd1ea:	d902      	bls.n	23fd1f2 <memmove+0x10>
 23fd1ec:	4284      	cmp	r4, r0
 23fd1ee:	4623      	mov	r3, r4
 23fd1f0:	d807      	bhi.n	23fd202 <memmove+0x20>
 23fd1f2:	1e43      	subs	r3, r0, #1
 23fd1f4:	42a1      	cmp	r1, r4
 23fd1f6:	d008      	beq.n	23fd20a <memmove+0x28>
 23fd1f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fd1fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 23fd200:	e7f8      	b.n	23fd1f4 <memmove+0x12>
 23fd202:	4402      	add	r2, r0
 23fd204:	4601      	mov	r1, r0
 23fd206:	428a      	cmp	r2, r1
 23fd208:	d100      	bne.n	23fd20c <memmove+0x2a>
 23fd20a:	bd10      	pop	{r4, pc}
 23fd20c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23fd210:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23fd214:	e7f7      	b.n	23fd206 <memmove+0x24>

023fd216 <memset>:
 23fd216:	4402      	add	r2, r0
 23fd218:	4603      	mov	r3, r0
 23fd21a:	4293      	cmp	r3, r2
 23fd21c:	d100      	bne.n	23fd220 <memset+0xa>
 23fd21e:	4770      	bx	lr
 23fd220:	f803 1b01 	strb.w	r1, [r3], #1
 23fd224:	e7f9      	b.n	23fd21a <memset+0x4>
	...

023fd228 <srand>:
 23fd228:	b538      	push	{r3, r4, r5, lr}
 23fd22a:	4b10      	ldr	r3, [pc, #64]	; (23fd26c <srand+0x44>)
 23fd22c:	4604      	mov	r4, r0
 23fd22e:	681d      	ldr	r5, [r3, #0]
 23fd230:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fd232:	b9b3      	cbnz	r3, 23fd262 <srand+0x3a>
 23fd234:	2018      	movs	r0, #24
 23fd236:	f7fc fddf 	bl	23f9df8 <malloc>
 23fd23a:	4602      	mov	r2, r0
 23fd23c:	63a8      	str	r0, [r5, #56]	; 0x38
 23fd23e:	b920      	cbnz	r0, 23fd24a <srand+0x22>
 23fd240:	4b0b      	ldr	r3, [pc, #44]	; (23fd270 <srand+0x48>)
 23fd242:	2142      	movs	r1, #66	; 0x42
 23fd244:	480b      	ldr	r0, [pc, #44]	; (23fd274 <srand+0x4c>)
 23fd246:	f7fc fe55 	bl	23f9ef4 <__assert_func>
 23fd24a:	490b      	ldr	r1, [pc, #44]	; (23fd278 <srand+0x50>)
 23fd24c:	4b0b      	ldr	r3, [pc, #44]	; (23fd27c <srand+0x54>)
 23fd24e:	e9c0 1300 	strd	r1, r3, [r0]
 23fd252:	4b0b      	ldr	r3, [pc, #44]	; (23fd280 <srand+0x58>)
 23fd254:	2100      	movs	r1, #0
 23fd256:	6083      	str	r3, [r0, #8]
 23fd258:	230b      	movs	r3, #11
 23fd25a:	8183      	strh	r3, [r0, #12]
 23fd25c:	2001      	movs	r0, #1
 23fd25e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fd262:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fd264:	2200      	movs	r2, #0
 23fd266:	611c      	str	r4, [r3, #16]
 23fd268:	615a      	str	r2, [r3, #20]
 23fd26a:	bd38      	pop	{r3, r4, r5, pc}
 23fd26c:	1007aae8 	.word	0x1007aae8
 23fd270:	023ffc12 	.word	0x023ffc12
 23fd274:	023ffc29 	.word	0x023ffc29
 23fd278:	abcd330e 	.word	0xabcd330e
 23fd27c:	e66d1234 	.word	0xe66d1234
 23fd280:	0005deec 	.word	0x0005deec

023fd284 <strchr>:
 23fd284:	b2c9      	uxtb	r1, r1
 23fd286:	4603      	mov	r3, r0
 23fd288:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fd28c:	b11a      	cbz	r2, 23fd296 <strchr+0x12>
 23fd28e:	428a      	cmp	r2, r1
 23fd290:	d1f9      	bne.n	23fd286 <strchr+0x2>
 23fd292:	4618      	mov	r0, r3
 23fd294:	4770      	bx	lr
 23fd296:	2900      	cmp	r1, #0
 23fd298:	bf18      	it	ne
 23fd29a:	2300      	movne	r3, #0
 23fd29c:	e7f9      	b.n	23fd292 <strchr+0xe>

023fd29e <strchrnul>:
 23fd29e:	b510      	push	{r4, lr}
 23fd2a0:	4604      	mov	r4, r0
 23fd2a2:	f7ff ffef 	bl	23fd284 <strchr>
 23fd2a6:	b918      	cbnz	r0, 23fd2b0 <strchrnul+0x12>
 23fd2a8:	4620      	mov	r0, r4
 23fd2aa:	f7f9 faf3 	bl	23f6894 <strlen>
 23fd2ae:	4420      	add	r0, r4
 23fd2b0:	bd10      	pop	{r4, pc}

023fd2b2 <strcpy>:
 23fd2b2:	4603      	mov	r3, r0
 23fd2b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fd2b8:	f803 2b01 	strb.w	r2, [r3], #1
 23fd2bc:	2a00      	cmp	r2, #0
 23fd2be:	d1f9      	bne.n	23fd2b4 <strcpy+0x2>
 23fd2c0:	4770      	bx	lr

023fd2c2 <strncmp>:
 23fd2c2:	b510      	push	{r4, lr}
 23fd2c4:	b17a      	cbz	r2, 23fd2e6 <strncmp+0x24>
 23fd2c6:	4603      	mov	r3, r0
 23fd2c8:	3901      	subs	r1, #1
 23fd2ca:	1884      	adds	r4, r0, r2
 23fd2cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fd2d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23fd2d4:	4290      	cmp	r0, r2
 23fd2d6:	d101      	bne.n	23fd2dc <strncmp+0x1a>
 23fd2d8:	42a3      	cmp	r3, r4
 23fd2da:	d101      	bne.n	23fd2e0 <strncmp+0x1e>
 23fd2dc:	1a80      	subs	r0, r0, r2
 23fd2de:	bd10      	pop	{r4, pc}
 23fd2e0:	2800      	cmp	r0, #0
 23fd2e2:	d1f3      	bne.n	23fd2cc <strncmp+0xa>
 23fd2e4:	e7fa      	b.n	23fd2dc <strncmp+0x1a>
 23fd2e6:	4610      	mov	r0, r2
 23fd2e8:	e7f9      	b.n	23fd2de <strncmp+0x1c>

023fd2ea <strncpy>:
 23fd2ea:	3901      	subs	r1, #1
 23fd2ec:	4603      	mov	r3, r0
 23fd2ee:	b510      	push	{r4, lr}
 23fd2f0:	b132      	cbz	r2, 23fd300 <strncpy+0x16>
 23fd2f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23fd2f6:	3a01      	subs	r2, #1
 23fd2f8:	f803 4b01 	strb.w	r4, [r3], #1
 23fd2fc:	2c00      	cmp	r4, #0
 23fd2fe:	d1f7      	bne.n	23fd2f0 <strncpy+0x6>
 23fd300:	441a      	add	r2, r3
 23fd302:	2100      	movs	r1, #0
 23fd304:	4293      	cmp	r3, r2
 23fd306:	d100      	bne.n	23fd30a <strncpy+0x20>
 23fd308:	bd10      	pop	{r4, pc}
 23fd30a:	f803 1b01 	strb.w	r1, [r3], #1
 23fd30e:	e7f9      	b.n	23fd304 <strncpy+0x1a>

023fd310 <strrchr>:
 23fd310:	b538      	push	{r3, r4, r5, lr}
 23fd312:	4603      	mov	r3, r0
 23fd314:	460c      	mov	r4, r1
 23fd316:	b969      	cbnz	r1, 23fd334 <strrchr+0x24>
 23fd318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fd31c:	f7ff bfb2 	b.w	23fd284 <strchr>
 23fd320:	1c43      	adds	r3, r0, #1
 23fd322:	4605      	mov	r5, r0
 23fd324:	4621      	mov	r1, r4
 23fd326:	4618      	mov	r0, r3
 23fd328:	f7ff ffac 	bl	23fd284 <strchr>
 23fd32c:	2800      	cmp	r0, #0
 23fd32e:	d1f7      	bne.n	23fd320 <strrchr+0x10>
 23fd330:	4628      	mov	r0, r5
 23fd332:	bd38      	pop	{r3, r4, r5, pc}
 23fd334:	2500      	movs	r5, #0
 23fd336:	e7f5      	b.n	23fd324 <strrchr+0x14>

023fd338 <sulp>:
 23fd338:	b570      	push	{r4, r5, r6, lr}
 23fd33a:	4604      	mov	r4, r0
 23fd33c:	460d      	mov	r5, r1
 23fd33e:	4616      	mov	r6, r2
 23fd340:	ec45 4b10 	vmov	d0, r4, r5
 23fd344:	f001 fe18 	bl	23fef78 <__ulp>
 23fd348:	ec51 0b10 	vmov	r0, r1, d0
 23fd34c:	b17e      	cbz	r6, 23fd36e <sulp+0x36>
 23fd34e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 23fd352:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 23fd356:	2b00      	cmp	r3, #0
 23fd358:	dd09      	ble.n	23fd36e <sulp+0x36>
 23fd35a:	051b      	lsls	r3, r3, #20
 23fd35c:	2400      	movs	r4, #0
 23fd35e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 23fd362:	4622      	mov	r2, r4
 23fd364:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 23fd368:	462b      	mov	r3, r5
 23fd36a:	f7f8 fd9d 	bl	23f5ea8 <__aeabi_dmul>
 23fd36e:	bd70      	pop	{r4, r5, r6, pc}

023fd370 <_strtod_l>:
 23fd370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd374:	461f      	mov	r7, r3
 23fd376:	2300      	movs	r3, #0
 23fd378:	4604      	mov	r4, r0
 23fd37a:	4688      	mov	r8, r1
 23fd37c:	f04f 0a00 	mov.w	sl, #0
 23fd380:	f04f 0b00 	mov.w	fp, #0
 23fd384:	ed2d 8b02 	vpush	{d8}
 23fd388:	b09d      	sub	sp, #116	; 0x74
 23fd38a:	9318      	str	r3, [sp, #96]	; 0x60
 23fd38c:	4b9f      	ldr	r3, [pc, #636]	; (23fd60c <_strtod_l+0x29c>)
 23fd38e:	9213      	str	r2, [sp, #76]	; 0x4c
 23fd390:	681b      	ldr	r3, [r3, #0]
 23fd392:	4618      	mov	r0, r3
 23fd394:	9305      	str	r3, [sp, #20]
 23fd396:	f7f9 fa7d 	bl	23f6894 <strlen>
 23fd39a:	4605      	mov	r5, r0
 23fd39c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 23fd3a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd3a2:	781a      	ldrb	r2, [r3, #0]
 23fd3a4:	2a2b      	cmp	r2, #43	; 0x2b
 23fd3a6:	d04e      	beq.n	23fd446 <_strtod_l+0xd6>
 23fd3a8:	d83b      	bhi.n	23fd422 <_strtod_l+0xb2>
 23fd3aa:	2a0d      	cmp	r2, #13
 23fd3ac:	d834      	bhi.n	23fd418 <_strtod_l+0xa8>
 23fd3ae:	2a08      	cmp	r2, #8
 23fd3b0:	d834      	bhi.n	23fd41c <_strtod_l+0xac>
 23fd3b2:	2a00      	cmp	r2, #0
 23fd3b4:	d03e      	beq.n	23fd434 <_strtod_l+0xc4>
 23fd3b6:	2300      	movs	r3, #0
 23fd3b8:	930a      	str	r3, [sp, #40]	; 0x28
 23fd3ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 23fd3bc:	7833      	ldrb	r3, [r6, #0]
 23fd3be:	2b30      	cmp	r3, #48	; 0x30
 23fd3c0:	f040 80b0 	bne.w	23fd524 <_strtod_l+0x1b4>
 23fd3c4:	7873      	ldrb	r3, [r6, #1]
 23fd3c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 23fd3ca:	2b58      	cmp	r3, #88	; 0x58
 23fd3cc:	d168      	bne.n	23fd4a0 <_strtod_l+0x130>
 23fd3ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fd3d0:	a917      	add	r1, sp, #92	; 0x5c
 23fd3d2:	9702      	str	r7, [sp, #8]
 23fd3d4:	4620      	mov	r0, r4
 23fd3d6:	9301      	str	r3, [sp, #4]
 23fd3d8:	ab18      	add	r3, sp, #96	; 0x60
 23fd3da:	4a8d      	ldr	r2, [pc, #564]	; (23fd610 <_strtod_l+0x2a0>)
 23fd3dc:	9300      	str	r3, [sp, #0]
 23fd3de:	ab19      	add	r3, sp, #100	; 0x64
 23fd3e0:	f000 ff34 	bl	23fe24c <__gethex>
 23fd3e4:	f010 0707 	ands.w	r7, r0, #7
 23fd3e8:	4605      	mov	r5, r0
 23fd3ea:	d005      	beq.n	23fd3f8 <_strtod_l+0x88>
 23fd3ec:	2f06      	cmp	r7, #6
 23fd3ee:	d12c      	bne.n	23fd44a <_strtod_l+0xda>
 23fd3f0:	3601      	adds	r6, #1
 23fd3f2:	2300      	movs	r3, #0
 23fd3f4:	9617      	str	r6, [sp, #92]	; 0x5c
 23fd3f6:	930a      	str	r3, [sp, #40]	; 0x28
 23fd3f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23fd3fa:	2b00      	cmp	r3, #0
 23fd3fc:	f040 858e 	bne.w	23fdf1c <_strtod_l+0xbac>
 23fd400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fd402:	b1eb      	cbz	r3, 23fd440 <_strtod_l+0xd0>
 23fd404:	4652      	mov	r2, sl
 23fd406:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 23fd40a:	ec43 2b10 	vmov	d0, r2, r3
 23fd40e:	b01d      	add	sp, #116	; 0x74
 23fd410:	ecbd 8b02 	vpop	{d8}
 23fd414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd418:	2a20      	cmp	r2, #32
 23fd41a:	d1cc      	bne.n	23fd3b6 <_strtod_l+0x46>
 23fd41c:	3301      	adds	r3, #1
 23fd41e:	9317      	str	r3, [sp, #92]	; 0x5c
 23fd420:	e7be      	b.n	23fd3a0 <_strtod_l+0x30>
 23fd422:	2a2d      	cmp	r2, #45	; 0x2d
 23fd424:	d1c7      	bne.n	23fd3b6 <_strtod_l+0x46>
 23fd426:	2201      	movs	r2, #1
 23fd428:	920a      	str	r2, [sp, #40]	; 0x28
 23fd42a:	1c5a      	adds	r2, r3, #1
 23fd42c:	9217      	str	r2, [sp, #92]	; 0x5c
 23fd42e:	785b      	ldrb	r3, [r3, #1]
 23fd430:	2b00      	cmp	r3, #0
 23fd432:	d1c2      	bne.n	23fd3ba <_strtod_l+0x4a>
 23fd434:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23fd436:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 23fd43a:	2b00      	cmp	r3, #0
 23fd43c:	f040 856c 	bne.w	23fdf18 <_strtod_l+0xba8>
 23fd440:	4652      	mov	r2, sl
 23fd442:	465b      	mov	r3, fp
 23fd444:	e7e1      	b.n	23fd40a <_strtod_l+0x9a>
 23fd446:	2200      	movs	r2, #0
 23fd448:	e7ee      	b.n	23fd428 <_strtod_l+0xb8>
 23fd44a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 23fd44c:	b13a      	cbz	r2, 23fd45e <_strtod_l+0xee>
 23fd44e:	2135      	movs	r1, #53	; 0x35
 23fd450:	a81a      	add	r0, sp, #104	; 0x68
 23fd452:	f001 fe9a 	bl	23ff18a <__copybits>
 23fd456:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fd458:	4620      	mov	r0, r4
 23fd45a:	f001 fa55 	bl	23fe908 <_Bfree>
 23fd45e:	3f01      	subs	r7, #1
 23fd460:	2f04      	cmp	r7, #4
 23fd462:	d806      	bhi.n	23fd472 <_strtod_l+0x102>
 23fd464:	e8df f007 	tbb	[pc, r7]
 23fd468:	1714030a 	.word	0x1714030a
 23fd46c:	0a          	.byte	0x0a
 23fd46d:	00          	.byte	0x00
 23fd46e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 23fd472:	0728      	lsls	r0, r5, #28
 23fd474:	d5c0      	bpl.n	23fd3f8 <_strtod_l+0x88>
 23fd476:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 23fd47a:	e7bd      	b.n	23fd3f8 <_strtod_l+0x88>
 23fd47c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 23fd480:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23fd482:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 23fd486:	f202 4233 	addw	r2, r2, #1075	; 0x433
 23fd48a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 23fd48e:	e7f0      	b.n	23fd472 <_strtod_l+0x102>
 23fd490:	f8df b180 	ldr.w	fp, [pc, #384]	; 23fd614 <_strtod_l+0x2a4>
 23fd494:	e7ed      	b.n	23fd472 <_strtod_l+0x102>
 23fd496:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 23fd49a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 23fd49e:	e7e8      	b.n	23fd472 <_strtod_l+0x102>
 23fd4a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd4a2:	1c5a      	adds	r2, r3, #1
 23fd4a4:	9217      	str	r2, [sp, #92]	; 0x5c
 23fd4a6:	785b      	ldrb	r3, [r3, #1]
 23fd4a8:	2b30      	cmp	r3, #48	; 0x30
 23fd4aa:	d0f9      	beq.n	23fd4a0 <_strtod_l+0x130>
 23fd4ac:	2b00      	cmp	r3, #0
 23fd4ae:	d0a3      	beq.n	23fd3f8 <_strtod_l+0x88>
 23fd4b0:	2301      	movs	r3, #1
 23fd4b2:	f04f 0900 	mov.w	r9, #0
 23fd4b6:	9304      	str	r3, [sp, #16]
 23fd4b8:	220a      	movs	r2, #10
 23fd4ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd4bc:	464f      	mov	r7, r9
 23fd4be:	f8cd 901c 	str.w	r9, [sp, #28]
 23fd4c2:	9308      	str	r3, [sp, #32]
 23fd4c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 23fd4c6:	7806      	ldrb	r6, [r0, #0]
 23fd4c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 23fd4cc:	b2d9      	uxtb	r1, r3
 23fd4ce:	2909      	cmp	r1, #9
 23fd4d0:	d92a      	bls.n	23fd528 <_strtod_l+0x1b8>
 23fd4d2:	462a      	mov	r2, r5
 23fd4d4:	9905      	ldr	r1, [sp, #20]
 23fd4d6:	f7ff fef4 	bl	23fd2c2 <strncmp>
 23fd4da:	b3a0      	cbz	r0, 23fd546 <_strtod_l+0x1d6>
 23fd4dc:	2000      	movs	r0, #0
 23fd4de:	4632      	mov	r2, r6
 23fd4e0:	463d      	mov	r5, r7
 23fd4e2:	4603      	mov	r3, r0
 23fd4e4:	9005      	str	r0, [sp, #20]
 23fd4e6:	2a65      	cmp	r2, #101	; 0x65
 23fd4e8:	d001      	beq.n	23fd4ee <_strtod_l+0x17e>
 23fd4ea:	2a45      	cmp	r2, #69	; 0x45
 23fd4ec:	d118      	bne.n	23fd520 <_strtod_l+0x1b0>
 23fd4ee:	b91d      	cbnz	r5, 23fd4f8 <_strtod_l+0x188>
 23fd4f0:	9a04      	ldr	r2, [sp, #16]
 23fd4f2:	4302      	orrs	r2, r0
 23fd4f4:	d09e      	beq.n	23fd434 <_strtod_l+0xc4>
 23fd4f6:	2500      	movs	r5, #0
 23fd4f8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 23fd4fc:	f108 0201 	add.w	r2, r8, #1
 23fd500:	9217      	str	r2, [sp, #92]	; 0x5c
 23fd502:	f898 2001 	ldrb.w	r2, [r8, #1]
 23fd506:	2a2b      	cmp	r2, #43	; 0x2b
 23fd508:	d075      	beq.n	23fd5f6 <_strtod_l+0x286>
 23fd50a:	2a2d      	cmp	r2, #45	; 0x2d
 23fd50c:	d07b      	beq.n	23fd606 <_strtod_l+0x296>
 23fd50e:	f04f 0c00 	mov.w	ip, #0
 23fd512:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 23fd516:	2909      	cmp	r1, #9
 23fd518:	f240 8082 	bls.w	23fd620 <_strtod_l+0x2b0>
 23fd51c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 23fd520:	2600      	movs	r6, #0
 23fd522:	e09d      	b.n	23fd660 <_strtod_l+0x2f0>
 23fd524:	2300      	movs	r3, #0
 23fd526:	e7c4      	b.n	23fd4b2 <_strtod_l+0x142>
 23fd528:	2f08      	cmp	r7, #8
 23fd52a:	f100 0001 	add.w	r0, r0, #1
 23fd52e:	f107 0701 	add.w	r7, r7, #1
 23fd532:	bfd4      	ite	le
 23fd534:	9907      	ldrle	r1, [sp, #28]
 23fd536:	fb02 3909 	mlagt	r9, r2, r9, r3
 23fd53a:	9017      	str	r0, [sp, #92]	; 0x5c
 23fd53c:	bfdc      	itt	le
 23fd53e:	fb02 3301 	mlale	r3, r2, r1, r3
 23fd542:	9307      	strle	r3, [sp, #28]
 23fd544:	e7be      	b.n	23fd4c4 <_strtod_l+0x154>
 23fd546:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd548:	195a      	adds	r2, r3, r5
 23fd54a:	9217      	str	r2, [sp, #92]	; 0x5c
 23fd54c:	5d5a      	ldrb	r2, [r3, r5]
 23fd54e:	2f00      	cmp	r7, #0
 23fd550:	d036      	beq.n	23fd5c0 <_strtod_l+0x250>
 23fd552:	463d      	mov	r5, r7
 23fd554:	9005      	str	r0, [sp, #20]
 23fd556:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 23fd55a:	2b09      	cmp	r3, #9
 23fd55c:	d912      	bls.n	23fd584 <_strtod_l+0x214>
 23fd55e:	2301      	movs	r3, #1
 23fd560:	e7c1      	b.n	23fd4e6 <_strtod_l+0x176>
 23fd562:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd564:	3001      	adds	r0, #1
 23fd566:	1c5a      	adds	r2, r3, #1
 23fd568:	9217      	str	r2, [sp, #92]	; 0x5c
 23fd56a:	785a      	ldrb	r2, [r3, #1]
 23fd56c:	2a30      	cmp	r2, #48	; 0x30
 23fd56e:	d0f8      	beq.n	23fd562 <_strtod_l+0x1f2>
 23fd570:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 23fd574:	2b08      	cmp	r3, #8
 23fd576:	f200 84d6 	bhi.w	23fdf26 <_strtod_l+0xbb6>
 23fd57a:	9005      	str	r0, [sp, #20]
 23fd57c:	2000      	movs	r0, #0
 23fd57e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd580:	4605      	mov	r5, r0
 23fd582:	9308      	str	r3, [sp, #32]
 23fd584:	3a30      	subs	r2, #48	; 0x30
 23fd586:	f100 0301 	add.w	r3, r0, #1
 23fd58a:	d013      	beq.n	23fd5b4 <_strtod_l+0x244>
 23fd58c:	9905      	ldr	r1, [sp, #20]
 23fd58e:	eb00 0e05 	add.w	lr, r0, r5
 23fd592:	4419      	add	r1, r3
 23fd594:	462b      	mov	r3, r5
 23fd596:	9105      	str	r1, [sp, #20]
 23fd598:	210a      	movs	r1, #10
 23fd59a:	4573      	cmp	r3, lr
 23fd59c:	d112      	bne.n	23fd5c4 <_strtod_l+0x254>
 23fd59e:	182b      	adds	r3, r5, r0
 23fd5a0:	3501      	adds	r5, #1
 23fd5a2:	2b08      	cmp	r3, #8
 23fd5a4:	4405      	add	r5, r0
 23fd5a6:	dc1c      	bgt.n	23fd5e2 <_strtod_l+0x272>
 23fd5a8:	9907      	ldr	r1, [sp, #28]
 23fd5aa:	230a      	movs	r3, #10
 23fd5ac:	fb03 2301 	mla	r3, r3, r1, r2
 23fd5b0:	9307      	str	r3, [sp, #28]
 23fd5b2:	2300      	movs	r3, #0
 23fd5b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fd5b6:	4618      	mov	r0, r3
 23fd5b8:	1c51      	adds	r1, r2, #1
 23fd5ba:	9117      	str	r1, [sp, #92]	; 0x5c
 23fd5bc:	7852      	ldrb	r2, [r2, #1]
 23fd5be:	e7ca      	b.n	23fd556 <_strtod_l+0x1e6>
 23fd5c0:	4638      	mov	r0, r7
 23fd5c2:	e7d3      	b.n	23fd56c <_strtod_l+0x1fc>
 23fd5c4:	2b08      	cmp	r3, #8
 23fd5c6:	dc04      	bgt.n	23fd5d2 <_strtod_l+0x262>
 23fd5c8:	9e07      	ldr	r6, [sp, #28]
 23fd5ca:	434e      	muls	r6, r1
 23fd5cc:	9607      	str	r6, [sp, #28]
 23fd5ce:	3301      	adds	r3, #1
 23fd5d0:	e7e3      	b.n	23fd59a <_strtod_l+0x22a>
 23fd5d2:	f103 0c01 	add.w	ip, r3, #1
 23fd5d6:	f1bc 0f10 	cmp.w	ip, #16
 23fd5da:	bfd8      	it	le
 23fd5dc:	fb01 f909 	mulle.w	r9, r1, r9
 23fd5e0:	e7f5      	b.n	23fd5ce <_strtod_l+0x25e>
 23fd5e2:	2d10      	cmp	r5, #16
 23fd5e4:	bfdc      	itt	le
 23fd5e6:	230a      	movle	r3, #10
 23fd5e8:	fb03 2909 	mlale	r9, r3, r9, r2
 23fd5ec:	e7e1      	b.n	23fd5b2 <_strtod_l+0x242>
 23fd5ee:	2300      	movs	r3, #0
 23fd5f0:	9305      	str	r3, [sp, #20]
 23fd5f2:	2301      	movs	r3, #1
 23fd5f4:	e77c      	b.n	23fd4f0 <_strtod_l+0x180>
 23fd5f6:	f04f 0c00 	mov.w	ip, #0
 23fd5fa:	f108 0202 	add.w	r2, r8, #2
 23fd5fe:	9217      	str	r2, [sp, #92]	; 0x5c
 23fd600:	f898 2002 	ldrb.w	r2, [r8, #2]
 23fd604:	e785      	b.n	23fd512 <_strtod_l+0x1a2>
 23fd606:	f04f 0c01 	mov.w	ip, #1
 23fd60a:	e7f6      	b.n	23fd5fa <_strtod_l+0x28a>
 23fd60c:	023ffe54 	.word	0x023ffe54
 23fd610:	023ffc90 	.word	0x023ffc90
 23fd614:	7ff00000 	.word	0x7ff00000
 23fd618:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fd61a:	1c51      	adds	r1, r2, #1
 23fd61c:	9117      	str	r1, [sp, #92]	; 0x5c
 23fd61e:	7852      	ldrb	r2, [r2, #1]
 23fd620:	2a30      	cmp	r2, #48	; 0x30
 23fd622:	d0f9      	beq.n	23fd618 <_strtod_l+0x2a8>
 23fd624:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 23fd628:	2908      	cmp	r1, #8
 23fd62a:	f63f af79 	bhi.w	23fd520 <_strtod_l+0x1b0>
 23fd62e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 23fd632:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fd634:	9206      	str	r2, [sp, #24]
 23fd636:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fd638:	1c51      	adds	r1, r2, #1
 23fd63a:	9117      	str	r1, [sp, #92]	; 0x5c
 23fd63c:	7852      	ldrb	r2, [r2, #1]
 23fd63e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 23fd642:	2e09      	cmp	r6, #9
 23fd644:	d937      	bls.n	23fd6b6 <_strtod_l+0x346>
 23fd646:	9e06      	ldr	r6, [sp, #24]
 23fd648:	1b89      	subs	r1, r1, r6
 23fd64a:	f644 661f 	movw	r6, #19999	; 0x4e1f
 23fd64e:	2908      	cmp	r1, #8
 23fd650:	dc02      	bgt.n	23fd658 <_strtod_l+0x2e8>
 23fd652:	4576      	cmp	r6, lr
 23fd654:	bfa8      	it	ge
 23fd656:	4676      	movge	r6, lr
 23fd658:	f1bc 0f00 	cmp.w	ip, #0
 23fd65c:	d000      	beq.n	23fd660 <_strtod_l+0x2f0>
 23fd65e:	4276      	negs	r6, r6
 23fd660:	2d00      	cmp	r5, #0
 23fd662:	d14d      	bne.n	23fd700 <_strtod_l+0x390>
 23fd664:	9904      	ldr	r1, [sp, #16]
 23fd666:	4301      	orrs	r1, r0
 23fd668:	f47f aec6 	bne.w	23fd3f8 <_strtod_l+0x88>
 23fd66c:	2b00      	cmp	r3, #0
 23fd66e:	f47f aee1 	bne.w	23fd434 <_strtod_l+0xc4>
 23fd672:	2a69      	cmp	r2, #105	; 0x69
 23fd674:	d027      	beq.n	23fd6c6 <_strtod_l+0x356>
 23fd676:	dc24      	bgt.n	23fd6c2 <_strtod_l+0x352>
 23fd678:	2a49      	cmp	r2, #73	; 0x49
 23fd67a:	d024      	beq.n	23fd6c6 <_strtod_l+0x356>
 23fd67c:	2a4e      	cmp	r2, #78	; 0x4e
 23fd67e:	f47f aed9 	bne.w	23fd434 <_strtod_l+0xc4>
 23fd682:	499f      	ldr	r1, [pc, #636]	; (23fd900 <_strtod_l+0x590>)
 23fd684:	a817      	add	r0, sp, #92	; 0x5c
 23fd686:	f001 f839 	bl	23fe6fc <__match>
 23fd68a:	2800      	cmp	r0, #0
 23fd68c:	f43f aed2 	beq.w	23fd434 <_strtod_l+0xc4>
 23fd690:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd692:	781b      	ldrb	r3, [r3, #0]
 23fd694:	2b28      	cmp	r3, #40	; 0x28
 23fd696:	d12d      	bne.n	23fd6f4 <_strtod_l+0x384>
 23fd698:	aa1a      	add	r2, sp, #104	; 0x68
 23fd69a:	499a      	ldr	r1, [pc, #616]	; (23fd904 <_strtod_l+0x594>)
 23fd69c:	a817      	add	r0, sp, #92	; 0x5c
 23fd69e:	f001 f841 	bl	23fe724 <__hexnan>
 23fd6a2:	2805      	cmp	r0, #5
 23fd6a4:	d126      	bne.n	23fd6f4 <_strtod_l+0x384>
 23fd6a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 23fd6a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 23fd6ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 23fd6b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 23fd6b4:	e6a0      	b.n	23fd3f8 <_strtod_l+0x88>
 23fd6b6:	210a      	movs	r1, #10
 23fd6b8:	fb01 2e0e 	mla	lr, r1, lr, r2
 23fd6bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 23fd6c0:	e7b9      	b.n	23fd636 <_strtod_l+0x2c6>
 23fd6c2:	2a6e      	cmp	r2, #110	; 0x6e
 23fd6c4:	e7db      	b.n	23fd67e <_strtod_l+0x30e>
 23fd6c6:	4990      	ldr	r1, [pc, #576]	; (23fd908 <_strtod_l+0x598>)
 23fd6c8:	a817      	add	r0, sp, #92	; 0x5c
 23fd6ca:	f001 f817 	bl	23fe6fc <__match>
 23fd6ce:	2800      	cmp	r0, #0
 23fd6d0:	f43f aeb0 	beq.w	23fd434 <_strtod_l+0xc4>
 23fd6d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd6d6:	a817      	add	r0, sp, #92	; 0x5c
 23fd6d8:	498c      	ldr	r1, [pc, #560]	; (23fd90c <_strtod_l+0x59c>)
 23fd6da:	3b01      	subs	r3, #1
 23fd6dc:	9317      	str	r3, [sp, #92]	; 0x5c
 23fd6de:	f001 f80d 	bl	23fe6fc <__match>
 23fd6e2:	b910      	cbnz	r0, 23fd6ea <_strtod_l+0x37a>
 23fd6e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd6e6:	3301      	adds	r3, #1
 23fd6e8:	9317      	str	r3, [sp, #92]	; 0x5c
 23fd6ea:	f8df b230 	ldr.w	fp, [pc, #560]	; 23fd91c <_strtod_l+0x5ac>
 23fd6ee:	f04f 0a00 	mov.w	sl, #0
 23fd6f2:	e681      	b.n	23fd3f8 <_strtod_l+0x88>
 23fd6f4:	4886      	ldr	r0, [pc, #536]	; (23fd910 <_strtod_l+0x5a0>)
 23fd6f6:	f7ff fd1b 	bl	23fd130 <nan>
 23fd6fa:	ec5b ab10 	vmov	sl, fp, d0
 23fd6fe:	e67b      	b.n	23fd3f8 <_strtod_l+0x88>
 23fd700:	9b05      	ldr	r3, [sp, #20]
 23fd702:	2f00      	cmp	r7, #0
 23fd704:	bf08      	it	eq
 23fd706:	462f      	moveq	r7, r5
 23fd708:	2d10      	cmp	r5, #16
 23fd70a:	9807      	ldr	r0, [sp, #28]
 23fd70c:	eba6 0303 	sub.w	r3, r6, r3
 23fd710:	46a8      	mov	r8, r5
 23fd712:	bfa8      	it	ge
 23fd714:	f04f 0810 	movge.w	r8, #16
 23fd718:	9306      	str	r3, [sp, #24]
 23fd71a:	f7f8 fb4b 	bl	23f5db4 <__aeabi_ui2d>
 23fd71e:	2d09      	cmp	r5, #9
 23fd720:	4682      	mov	sl, r0
 23fd722:	468b      	mov	fp, r1
 23fd724:	dd13      	ble.n	23fd74e <_strtod_l+0x3de>
 23fd726:	4b7b      	ldr	r3, [pc, #492]	; (23fd914 <_strtod_l+0x5a4>)
 23fd728:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 23fd72c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 23fd730:	f7f8 fbba 	bl	23f5ea8 <__aeabi_dmul>
 23fd734:	4682      	mov	sl, r0
 23fd736:	468b      	mov	fp, r1
 23fd738:	4648      	mov	r0, r9
 23fd73a:	f7f8 fb3b 	bl	23f5db4 <__aeabi_ui2d>
 23fd73e:	4602      	mov	r2, r0
 23fd740:	460b      	mov	r3, r1
 23fd742:	4650      	mov	r0, sl
 23fd744:	4659      	mov	r1, fp
 23fd746:	f7f8 f9f9 	bl	23f5b3c <__adddf3>
 23fd74a:	4682      	mov	sl, r0
 23fd74c:	468b      	mov	fp, r1
 23fd74e:	2d0f      	cmp	r5, #15
 23fd750:	dc38      	bgt.n	23fd7c4 <_strtod_l+0x454>
 23fd752:	9b06      	ldr	r3, [sp, #24]
 23fd754:	2b00      	cmp	r3, #0
 23fd756:	f43f ae4f 	beq.w	23fd3f8 <_strtod_l+0x88>
 23fd75a:	dd24      	ble.n	23fd7a6 <_strtod_l+0x436>
 23fd75c:	2b16      	cmp	r3, #22
 23fd75e:	dc0b      	bgt.n	23fd778 <_strtod_l+0x408>
 23fd760:	496c      	ldr	r1, [pc, #432]	; (23fd914 <_strtod_l+0x5a4>)
 23fd762:	4652      	mov	r2, sl
 23fd764:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 23fd768:	465b      	mov	r3, fp
 23fd76a:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fd76e:	f7f8 fb9b 	bl	23f5ea8 <__aeabi_dmul>
 23fd772:	4682      	mov	sl, r0
 23fd774:	468b      	mov	fp, r1
 23fd776:	e63f      	b.n	23fd3f8 <_strtod_l+0x88>
 23fd778:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 23fd77c:	9a06      	ldr	r2, [sp, #24]
 23fd77e:	4293      	cmp	r3, r2
 23fd780:	db20      	blt.n	23fd7c4 <_strtod_l+0x454>
 23fd782:	f1c5 050f 	rsb	r5, r5, #15
 23fd786:	4c63      	ldr	r4, [pc, #396]	; (23fd914 <_strtod_l+0x5a4>)
 23fd788:	4652      	mov	r2, sl
 23fd78a:	465b      	mov	r3, fp
 23fd78c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 23fd790:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fd794:	f7f8 fb88 	bl	23f5ea8 <__aeabi_dmul>
 23fd798:	9b06      	ldr	r3, [sp, #24]
 23fd79a:	1b5d      	subs	r5, r3, r5
 23fd79c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 23fd7a0:	e9d4 2300 	ldrd	r2, r3, [r4]
 23fd7a4:	e7e3      	b.n	23fd76e <_strtod_l+0x3fe>
 23fd7a6:	9b06      	ldr	r3, [sp, #24]
 23fd7a8:	3316      	adds	r3, #22
 23fd7aa:	db0b      	blt.n	23fd7c4 <_strtod_l+0x454>
 23fd7ac:	9b05      	ldr	r3, [sp, #20]
 23fd7ae:	4650      	mov	r0, sl
 23fd7b0:	4659      	mov	r1, fp
 23fd7b2:	1b9e      	subs	r6, r3, r6
 23fd7b4:	4b57      	ldr	r3, [pc, #348]	; (23fd914 <_strtod_l+0x5a4>)
 23fd7b6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 23fd7ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 23fd7be:	f7f8 fc9d 	bl	23f60fc <__aeabi_ddiv>
 23fd7c2:	e7d6      	b.n	23fd772 <_strtod_l+0x402>
 23fd7c4:	eba5 0808 	sub.w	r8, r5, r8
 23fd7c8:	9b06      	ldr	r3, [sp, #24]
 23fd7ca:	4498      	add	r8, r3
 23fd7cc:	f1b8 0f00 	cmp.w	r8, #0
 23fd7d0:	dd74      	ble.n	23fd8bc <_strtod_l+0x54c>
 23fd7d2:	f018 030f 	ands.w	r3, r8, #15
 23fd7d6:	d00a      	beq.n	23fd7ee <_strtod_l+0x47e>
 23fd7d8:	494e      	ldr	r1, [pc, #312]	; (23fd914 <_strtod_l+0x5a4>)
 23fd7da:	4652      	mov	r2, sl
 23fd7dc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 23fd7e0:	465b      	mov	r3, fp
 23fd7e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fd7e6:	f7f8 fb5f 	bl	23f5ea8 <__aeabi_dmul>
 23fd7ea:	4682      	mov	sl, r0
 23fd7ec:	468b      	mov	fp, r1
 23fd7ee:	f038 080f 	bics.w	r8, r8, #15
 23fd7f2:	d04f      	beq.n	23fd894 <_strtod_l+0x524>
 23fd7f4:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 23fd7f8:	dd22      	ble.n	23fd840 <_strtod_l+0x4d0>
 23fd7fa:	2500      	movs	r5, #0
 23fd7fc:	462e      	mov	r6, r5
 23fd7fe:	9507      	str	r5, [sp, #28]
 23fd800:	9505      	str	r5, [sp, #20]
 23fd802:	2322      	movs	r3, #34	; 0x22
 23fd804:	f8df b114 	ldr.w	fp, [pc, #276]	; 23fd91c <_strtod_l+0x5ac>
 23fd808:	f04f 0a00 	mov.w	sl, #0
 23fd80c:	6023      	str	r3, [r4, #0]
 23fd80e:	9b07      	ldr	r3, [sp, #28]
 23fd810:	2b00      	cmp	r3, #0
 23fd812:	f43f adf1 	beq.w	23fd3f8 <_strtod_l+0x88>
 23fd816:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fd818:	4620      	mov	r0, r4
 23fd81a:	f001 f875 	bl	23fe908 <_Bfree>
 23fd81e:	9905      	ldr	r1, [sp, #20]
 23fd820:	4620      	mov	r0, r4
 23fd822:	f001 f871 	bl	23fe908 <_Bfree>
 23fd826:	4631      	mov	r1, r6
 23fd828:	4620      	mov	r0, r4
 23fd82a:	f001 f86d 	bl	23fe908 <_Bfree>
 23fd82e:	9907      	ldr	r1, [sp, #28]
 23fd830:	4620      	mov	r0, r4
 23fd832:	f001 f869 	bl	23fe908 <_Bfree>
 23fd836:	4629      	mov	r1, r5
 23fd838:	4620      	mov	r0, r4
 23fd83a:	f001 f865 	bl	23fe908 <_Bfree>
 23fd83e:	e5db      	b.n	23fd3f8 <_strtod_l+0x88>
 23fd840:	4b35      	ldr	r3, [pc, #212]	; (23fd918 <_strtod_l+0x5a8>)
 23fd842:	ea4f 1828 	mov.w	r8, r8, asr #4
 23fd846:	4650      	mov	r0, sl
 23fd848:	4659      	mov	r1, fp
 23fd84a:	9304      	str	r3, [sp, #16]
 23fd84c:	2300      	movs	r3, #0
 23fd84e:	4699      	mov	r9, r3
 23fd850:	f1b8 0f01 	cmp.w	r8, #1
 23fd854:	dc21      	bgt.n	23fd89a <_strtod_l+0x52a>
 23fd856:	b10b      	cbz	r3, 23fd85c <_strtod_l+0x4ec>
 23fd858:	4682      	mov	sl, r0
 23fd85a:	468b      	mov	fp, r1
 23fd85c:	4b2e      	ldr	r3, [pc, #184]	; (23fd918 <_strtod_l+0x5a8>)
 23fd85e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 23fd862:	4652      	mov	r2, sl
 23fd864:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 23fd868:	465b      	mov	r3, fp
 23fd86a:	e9d9 0100 	ldrd	r0, r1, [r9]
 23fd86e:	f7f8 fb1b 	bl	23f5ea8 <__aeabi_dmul>
 23fd872:	4b2a      	ldr	r3, [pc, #168]	; (23fd91c <_strtod_l+0x5ac>)
 23fd874:	460a      	mov	r2, r1
 23fd876:	4682      	mov	sl, r0
 23fd878:	400b      	ands	r3, r1
 23fd87a:	4929      	ldr	r1, [pc, #164]	; (23fd920 <_strtod_l+0x5b0>)
 23fd87c:	428b      	cmp	r3, r1
 23fd87e:	d8bc      	bhi.n	23fd7fa <_strtod_l+0x48a>
 23fd880:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 23fd884:	428b      	cmp	r3, r1
 23fd886:	bf86      	itte	hi
 23fd888:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 23fd924 <_strtod_l+0x5b4>
 23fd88c:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 23fd890:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 23fd894:	2300      	movs	r3, #0
 23fd896:	9304      	str	r3, [sp, #16]
 23fd898:	e083      	b.n	23fd9a2 <_strtod_l+0x632>
 23fd89a:	f018 0f01 	tst.w	r8, #1
 23fd89e:	d005      	beq.n	23fd8ac <_strtod_l+0x53c>
 23fd8a0:	9b04      	ldr	r3, [sp, #16]
 23fd8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd8a6:	f7f8 faff 	bl	23f5ea8 <__aeabi_dmul>
 23fd8aa:	2301      	movs	r3, #1
 23fd8ac:	9a04      	ldr	r2, [sp, #16]
 23fd8ae:	f109 0901 	add.w	r9, r9, #1
 23fd8b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 23fd8b6:	3208      	adds	r2, #8
 23fd8b8:	9204      	str	r2, [sp, #16]
 23fd8ba:	e7c9      	b.n	23fd850 <_strtod_l+0x4e0>
 23fd8bc:	d0ea      	beq.n	23fd894 <_strtod_l+0x524>
 23fd8be:	f1c8 0800 	rsb	r8, r8, #0
 23fd8c2:	f018 020f 	ands.w	r2, r8, #15
 23fd8c6:	d00a      	beq.n	23fd8de <_strtod_l+0x56e>
 23fd8c8:	4b12      	ldr	r3, [pc, #72]	; (23fd914 <_strtod_l+0x5a4>)
 23fd8ca:	4650      	mov	r0, sl
 23fd8cc:	4659      	mov	r1, fp
 23fd8ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 23fd8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd8d6:	f7f8 fc11 	bl	23f60fc <__aeabi_ddiv>
 23fd8da:	4682      	mov	sl, r0
 23fd8dc:	468b      	mov	fp, r1
 23fd8de:	ea5f 1828 	movs.w	r8, r8, asr #4
 23fd8e2:	d0d7      	beq.n	23fd894 <_strtod_l+0x524>
 23fd8e4:	f1b8 0f1f 	cmp.w	r8, #31
 23fd8e8:	dd1e      	ble.n	23fd928 <_strtod_l+0x5b8>
 23fd8ea:	2500      	movs	r5, #0
 23fd8ec:	462e      	mov	r6, r5
 23fd8ee:	9507      	str	r5, [sp, #28]
 23fd8f0:	9505      	str	r5, [sp, #20]
 23fd8f2:	2322      	movs	r3, #34	; 0x22
 23fd8f4:	f04f 0a00 	mov.w	sl, #0
 23fd8f8:	f04f 0b00 	mov.w	fp, #0
 23fd8fc:	6023      	str	r3, [r4, #0]
 23fd8fe:	e786      	b.n	23fd80e <_strtod_l+0x49e>
 23fd900:	023ffc8b 	.word	0x023ffc8b
 23fd904:	023ffca4 	.word	0x023ffca4
 23fd908:	023ffc82 	.word	0x023ffc82
 23fd90c:	023ffc85 	.word	0x023ffc85
 23fd910:	023ff895 	.word	0x023ff895
 23fd914:	023ffef0 	.word	0x023ffef0
 23fd918:	023ffec8 	.word	0x023ffec8
 23fd91c:	7ff00000 	.word	0x7ff00000
 23fd920:	7ca00000 	.word	0x7ca00000
 23fd924:	7fefffff 	.word	0x7fefffff
 23fd928:	f018 0310 	ands.w	r3, r8, #16
 23fd92c:	4650      	mov	r0, sl
 23fd92e:	4659      	mov	r1, fp
 23fd930:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 23fdcdc <_strtod_l+0x96c>
 23fd934:	bf18      	it	ne
 23fd936:	236a      	movne	r3, #106	; 0x6a
 23fd938:	9304      	str	r3, [sp, #16]
 23fd93a:	2300      	movs	r3, #0
 23fd93c:	f018 0f01 	tst.w	r8, #1
 23fd940:	d004      	beq.n	23fd94c <_strtod_l+0x5dc>
 23fd942:	e9d9 2300 	ldrd	r2, r3, [r9]
 23fd946:	f7f8 faaf 	bl	23f5ea8 <__aeabi_dmul>
 23fd94a:	2301      	movs	r3, #1
 23fd94c:	ea5f 0868 	movs.w	r8, r8, asr #1
 23fd950:	f109 0908 	add.w	r9, r9, #8
 23fd954:	d1f2      	bne.n	23fd93c <_strtod_l+0x5cc>
 23fd956:	b10b      	cbz	r3, 23fd95c <_strtod_l+0x5ec>
 23fd958:	4682      	mov	sl, r0
 23fd95a:	468b      	mov	fp, r1
 23fd95c:	9b04      	ldr	r3, [sp, #16]
 23fd95e:	b1c3      	cbz	r3, 23fd992 <_strtod_l+0x622>
 23fd960:	f3cb 520a 	ubfx	r2, fp, #20, #11
 23fd964:	4659      	mov	r1, fp
 23fd966:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 23fd96a:	2b00      	cmp	r3, #0
 23fd96c:	dd11      	ble.n	23fd992 <_strtod_l+0x622>
 23fd96e:	2b1f      	cmp	r3, #31
 23fd970:	f340 8121 	ble.w	23fdbb6 <_strtod_l+0x846>
 23fd974:	2b34      	cmp	r3, #52	; 0x34
 23fd976:	f04f 0a00 	mov.w	sl, #0
 23fd97a:	bfdb      	ittet	le
 23fd97c:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 23fd980:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 23fd984:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 23fd988:	fa03 f202 	lslle.w	r2, r3, r2
 23fd98c:	bfd8      	it	le
 23fd98e:	ea02 0b01 	andle.w	fp, r2, r1
 23fd992:	2200      	movs	r2, #0
 23fd994:	2300      	movs	r3, #0
 23fd996:	4650      	mov	r0, sl
 23fd998:	4659      	mov	r1, fp
 23fd99a:	f7f8 fced 	bl	23f6378 <__aeabi_dcmpeq>
 23fd99e:	2800      	cmp	r0, #0
 23fd9a0:	d1a3      	bne.n	23fd8ea <_strtod_l+0x57a>
 23fd9a2:	9b07      	ldr	r3, [sp, #28]
 23fd9a4:	463a      	mov	r2, r7
 23fd9a6:	9908      	ldr	r1, [sp, #32]
 23fd9a8:	4620      	mov	r0, r4
 23fd9aa:	9300      	str	r3, [sp, #0]
 23fd9ac:	462b      	mov	r3, r5
 23fd9ae:	f001 f815 	bl	23fe9dc <__s2b>
 23fd9b2:	9007      	str	r0, [sp, #28]
 23fd9b4:	2800      	cmp	r0, #0
 23fd9b6:	f43f af20 	beq.w	23fd7fa <_strtod_l+0x48a>
 23fd9ba:	9b05      	ldr	r3, [sp, #20]
 23fd9bc:	2500      	movs	r5, #0
 23fd9be:	1b9e      	subs	r6, r3, r6
 23fd9c0:	9b06      	ldr	r3, [sp, #24]
 23fd9c2:	2b00      	cmp	r3, #0
 23fd9c4:	bfb4      	ite	lt
 23fd9c6:	4633      	movlt	r3, r6
 23fd9c8:	2300      	movge	r3, #0
 23fd9ca:	462e      	mov	r6, r5
 23fd9cc:	930c      	str	r3, [sp, #48]	; 0x30
 23fd9ce:	9b06      	ldr	r3, [sp, #24]
 23fd9d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 23fd9d4:	9312      	str	r3, [sp, #72]	; 0x48
 23fd9d6:	9b07      	ldr	r3, [sp, #28]
 23fd9d8:	4620      	mov	r0, r4
 23fd9da:	6859      	ldr	r1, [r3, #4]
 23fd9dc:	f000 ff54 	bl	23fe888 <_Balloc>
 23fd9e0:	9005      	str	r0, [sp, #20]
 23fd9e2:	2800      	cmp	r0, #0
 23fd9e4:	f43f af0d 	beq.w	23fd802 <_strtod_l+0x492>
 23fd9e8:	9b07      	ldr	r3, [sp, #28]
 23fd9ea:	300c      	adds	r0, #12
 23fd9ec:	691a      	ldr	r2, [r3, #16]
 23fd9ee:	f103 010c 	add.w	r1, r3, #12
 23fd9f2:	3202      	adds	r2, #2
 23fd9f4:	0092      	lsls	r2, r2, #2
 23fd9f6:	f7ff fbe7 	bl	23fd1c8 <memcpy>
 23fd9fa:	aa1a      	add	r2, sp, #104	; 0x68
 23fd9fc:	a919      	add	r1, sp, #100	; 0x64
 23fd9fe:	4620      	mov	r0, r4
 23fda00:	ec4b ab10 	vmov	d0, sl, fp
 23fda04:	f001 fb32 	bl	23ff06c <__d2b>
 23fda08:	9018      	str	r0, [sp, #96]	; 0x60
 23fda0a:	ec4b ab18 	vmov	d8, sl, fp
 23fda0e:	2800      	cmp	r0, #0
 23fda10:	f43f aef7 	beq.w	23fd802 <_strtod_l+0x492>
 23fda14:	2101      	movs	r1, #1
 23fda16:	4620      	mov	r0, r4
 23fda18:	f001 f87a 	bl	23feb10 <__i2b>
 23fda1c:	4606      	mov	r6, r0
 23fda1e:	2800      	cmp	r0, #0
 23fda20:	f43f aeef 	beq.w	23fd802 <_strtod_l+0x492>
 23fda24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 23fda26:	9904      	ldr	r1, [sp, #16]
 23fda28:	2b00      	cmp	r3, #0
 23fda2a:	eba3 0801 	sub.w	r8, r3, r1
 23fda2e:	bfa9      	itett	ge
 23fda30:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 23fda32:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 23fda34:	eb03 0902 	addge.w	r9, r3, r2
 23fda38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 23fda3a:	bfb8      	it	lt
 23fda3c:	1ad7      	sublt	r7, r2, r3
 23fda3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 23fda40:	4ba1      	ldr	r3, [pc, #644]	; (23fdcc8 <_strtod_l+0x958>)
 23fda42:	4490      	add	r8, r2
 23fda44:	bfb8      	it	lt
 23fda46:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 23fda4a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 23fda4e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fda52:	4598      	cmp	r8, r3
 23fda54:	f280 80c3 	bge.w	23fdbde <_strtod_l+0x86e>
 23fda58:	eba3 0308 	sub.w	r3, r3, r8
 23fda5c:	2101      	movs	r1, #1
 23fda5e:	2b1f      	cmp	r3, #31
 23fda60:	eba2 0203 	sub.w	r2, r2, r3
 23fda64:	f300 80ae 	bgt.w	23fdbc4 <_strtod_l+0x854>
 23fda68:	fa01 f303 	lsl.w	r3, r1, r3
 23fda6c:	930d      	str	r3, [sp, #52]	; 0x34
 23fda6e:	2300      	movs	r3, #0
 23fda70:	9308      	str	r3, [sp, #32]
 23fda72:	eb09 0802 	add.w	r8, r9, r2
 23fda76:	9b04      	ldr	r3, [sp, #16]
 23fda78:	4417      	add	r7, r2
 23fda7a:	45c1      	cmp	r9, r8
 23fda7c:	441f      	add	r7, r3
 23fda7e:	464b      	mov	r3, r9
 23fda80:	bfa8      	it	ge
 23fda82:	4643      	movge	r3, r8
 23fda84:	42bb      	cmp	r3, r7
 23fda86:	bfa8      	it	ge
 23fda88:	463b      	movge	r3, r7
 23fda8a:	2b00      	cmp	r3, #0
 23fda8c:	bfc2      	ittt	gt
 23fda8e:	eba8 0803 	subgt.w	r8, r8, r3
 23fda92:	1aff      	subgt	r7, r7, r3
 23fda94:	eba9 0903 	subgt.w	r9, r9, r3
 23fda98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fda9a:	2b00      	cmp	r3, #0
 23fda9c:	dd17      	ble.n	23fdace <_strtod_l+0x75e>
 23fda9e:	4631      	mov	r1, r6
 23fdaa0:	461a      	mov	r2, r3
 23fdaa2:	4620      	mov	r0, r4
 23fdaa4:	f001 f8f2 	bl	23fec8c <__pow5mult>
 23fdaa8:	4606      	mov	r6, r0
 23fdaaa:	2800      	cmp	r0, #0
 23fdaac:	f43f aea9 	beq.w	23fd802 <_strtod_l+0x492>
 23fdab0:	4601      	mov	r1, r0
 23fdab2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 23fdab4:	4620      	mov	r0, r4
 23fdab6:	f001 f841 	bl	23feb3c <__multiply>
 23fdaba:	900b      	str	r0, [sp, #44]	; 0x2c
 23fdabc:	2800      	cmp	r0, #0
 23fdabe:	f43f aea0 	beq.w	23fd802 <_strtod_l+0x492>
 23fdac2:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fdac4:	4620      	mov	r0, r4
 23fdac6:	f000 ff1f 	bl	23fe908 <_Bfree>
 23fdaca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fdacc:	9318      	str	r3, [sp, #96]	; 0x60
 23fdace:	f1b8 0f00 	cmp.w	r8, #0
 23fdad2:	f300 8089 	bgt.w	23fdbe8 <_strtod_l+0x878>
 23fdad6:	9b06      	ldr	r3, [sp, #24]
 23fdad8:	2b00      	cmp	r3, #0
 23fdada:	dd08      	ble.n	23fdaee <_strtod_l+0x77e>
 23fdadc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23fdade:	4620      	mov	r0, r4
 23fdae0:	9905      	ldr	r1, [sp, #20]
 23fdae2:	f001 f8d3 	bl	23fec8c <__pow5mult>
 23fdae6:	9005      	str	r0, [sp, #20]
 23fdae8:	2800      	cmp	r0, #0
 23fdaea:	f43f ae8a 	beq.w	23fd802 <_strtod_l+0x492>
 23fdaee:	2f00      	cmp	r7, #0
 23fdaf0:	dd08      	ble.n	23fdb04 <_strtod_l+0x794>
 23fdaf2:	463a      	mov	r2, r7
 23fdaf4:	9905      	ldr	r1, [sp, #20]
 23fdaf6:	4620      	mov	r0, r4
 23fdaf8:	f001 f922 	bl	23fed40 <__lshift>
 23fdafc:	9005      	str	r0, [sp, #20]
 23fdafe:	2800      	cmp	r0, #0
 23fdb00:	f43f ae7f 	beq.w	23fd802 <_strtod_l+0x492>
 23fdb04:	f1b9 0f00 	cmp.w	r9, #0
 23fdb08:	dd08      	ble.n	23fdb1c <_strtod_l+0x7ac>
 23fdb0a:	4631      	mov	r1, r6
 23fdb0c:	464a      	mov	r2, r9
 23fdb0e:	4620      	mov	r0, r4
 23fdb10:	f001 f916 	bl	23fed40 <__lshift>
 23fdb14:	4606      	mov	r6, r0
 23fdb16:	2800      	cmp	r0, #0
 23fdb18:	f43f ae73 	beq.w	23fd802 <_strtod_l+0x492>
 23fdb1c:	9a05      	ldr	r2, [sp, #20]
 23fdb1e:	4620      	mov	r0, r4
 23fdb20:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fdb22:	f001 f999 	bl	23fee58 <__mdiff>
 23fdb26:	4605      	mov	r5, r0
 23fdb28:	2800      	cmp	r0, #0
 23fdb2a:	f43f ae6a 	beq.w	23fd802 <_strtod_l+0x492>
 23fdb2e:	68c3      	ldr	r3, [r0, #12]
 23fdb30:	4631      	mov	r1, r6
 23fdb32:	930b      	str	r3, [sp, #44]	; 0x2c
 23fdb34:	2300      	movs	r3, #0
 23fdb36:	60c3      	str	r3, [r0, #12]
 23fdb38:	f001 f972 	bl	23fee20 <__mcmp>
 23fdb3c:	2800      	cmp	r0, #0
 23fdb3e:	da5d      	bge.n	23fdbfc <_strtod_l+0x88c>
 23fdb40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fdb42:	ea53 030a 	orrs.w	r3, r3, sl
 23fdb46:	d17f      	bne.n	23fdc48 <_strtod_l+0x8d8>
 23fdb48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fdb4c:	2b00      	cmp	r3, #0
 23fdb4e:	d17b      	bne.n	23fdc48 <_strtod_l+0x8d8>
 23fdb50:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23fdb54:	0d1b      	lsrs	r3, r3, #20
 23fdb56:	051b      	lsls	r3, r3, #20
 23fdb58:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 23fdb5c:	d974      	bls.n	23fdc48 <_strtod_l+0x8d8>
 23fdb5e:	696b      	ldr	r3, [r5, #20]
 23fdb60:	b913      	cbnz	r3, 23fdb68 <_strtod_l+0x7f8>
 23fdb62:	692b      	ldr	r3, [r5, #16]
 23fdb64:	2b01      	cmp	r3, #1
 23fdb66:	dd6f      	ble.n	23fdc48 <_strtod_l+0x8d8>
 23fdb68:	4629      	mov	r1, r5
 23fdb6a:	2201      	movs	r2, #1
 23fdb6c:	4620      	mov	r0, r4
 23fdb6e:	f001 f8e7 	bl	23fed40 <__lshift>
 23fdb72:	4631      	mov	r1, r6
 23fdb74:	4605      	mov	r5, r0
 23fdb76:	f001 f953 	bl	23fee20 <__mcmp>
 23fdb7a:	2800      	cmp	r0, #0
 23fdb7c:	dd64      	ble.n	23fdc48 <_strtod_l+0x8d8>
 23fdb7e:	9904      	ldr	r1, [sp, #16]
 23fdb80:	465b      	mov	r3, fp
 23fdb82:	4a52      	ldr	r2, [pc, #328]	; (23fdccc <_strtod_l+0x95c>)
 23fdb84:	2900      	cmp	r1, #0
 23fdb86:	d07f      	beq.n	23fdc88 <_strtod_l+0x918>
 23fdb88:	ea02 010b 	and.w	r1, r2, fp
 23fdb8c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 23fdb90:	dc7a      	bgt.n	23fdc88 <_strtod_l+0x918>
 23fdb92:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 23fdb96:	f77f aeac 	ble.w	23fd8f2 <_strtod_l+0x582>
 23fdb9a:	4b4d      	ldr	r3, [pc, #308]	; (23fdcd0 <_strtod_l+0x960>)
 23fdb9c:	4650      	mov	r0, sl
 23fdb9e:	4659      	mov	r1, fp
 23fdba0:	2200      	movs	r2, #0
 23fdba2:	f7f8 f981 	bl	23f5ea8 <__aeabi_dmul>
 23fdba6:	460b      	mov	r3, r1
 23fdba8:	4682      	mov	sl, r0
 23fdbaa:	468b      	mov	fp, r1
 23fdbac:	4303      	orrs	r3, r0
 23fdbae:	bf04      	itt	eq
 23fdbb0:	2322      	moveq	r3, #34	; 0x22
 23fdbb2:	6023      	streq	r3, [r4, #0]
 23fdbb4:	e62f      	b.n	23fd816 <_strtod_l+0x4a6>
 23fdbb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fdbba:	fa02 f303 	lsl.w	r3, r2, r3
 23fdbbe:	ea03 0a0a 	and.w	sl, r3, sl
 23fdbc2:	e6e6      	b.n	23fd992 <_strtod_l+0x622>
 23fdbc4:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 23fdbc8:	910d      	str	r1, [sp, #52]	; 0x34
 23fdbca:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 23fdbce:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 23fdbd2:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 23fdbd6:	fa01 f308 	lsl.w	r3, r1, r8
 23fdbda:	9308      	str	r3, [sp, #32]
 23fdbdc:	e749      	b.n	23fda72 <_strtod_l+0x702>
 23fdbde:	2300      	movs	r3, #0
 23fdbe0:	9308      	str	r3, [sp, #32]
 23fdbe2:	2301      	movs	r3, #1
 23fdbe4:	930d      	str	r3, [sp, #52]	; 0x34
 23fdbe6:	e744      	b.n	23fda72 <_strtod_l+0x702>
 23fdbe8:	4642      	mov	r2, r8
 23fdbea:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fdbec:	4620      	mov	r0, r4
 23fdbee:	f001 f8a7 	bl	23fed40 <__lshift>
 23fdbf2:	9018      	str	r0, [sp, #96]	; 0x60
 23fdbf4:	2800      	cmp	r0, #0
 23fdbf6:	f47f af6e 	bne.w	23fdad6 <_strtod_l+0x766>
 23fdbfa:	e602      	b.n	23fd802 <_strtod_l+0x492>
 23fdbfc:	465f      	mov	r7, fp
 23fdbfe:	d16f      	bne.n	23fdce0 <_strtod_l+0x970>
 23fdc00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fdc02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fdc06:	b342      	cbz	r2, 23fdc5a <_strtod_l+0x8ea>
 23fdc08:	4a32      	ldr	r2, [pc, #200]	; (23fdcd4 <_strtod_l+0x964>)
 23fdc0a:	4293      	cmp	r3, r2
 23fdc0c:	d128      	bne.n	23fdc60 <_strtod_l+0x8f0>
 23fdc0e:	9b04      	ldr	r3, [sp, #16]
 23fdc10:	4651      	mov	r1, sl
 23fdc12:	b1eb      	cbz	r3, 23fdc50 <_strtod_l+0x8e0>
 23fdc14:	4b2d      	ldr	r3, [pc, #180]	; (23fdccc <_strtod_l+0x95c>)
 23fdc16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fdc1a:	403b      	ands	r3, r7
 23fdc1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 23fdc20:	d819      	bhi.n	23fdc56 <_strtod_l+0x8e6>
 23fdc22:	0d1b      	lsrs	r3, r3, #20
 23fdc24:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 23fdc28:	fa02 f303 	lsl.w	r3, r2, r3
 23fdc2c:	4299      	cmp	r1, r3
 23fdc2e:	d117      	bne.n	23fdc60 <_strtod_l+0x8f0>
 23fdc30:	4b29      	ldr	r3, [pc, #164]	; (23fdcd8 <_strtod_l+0x968>)
 23fdc32:	429f      	cmp	r7, r3
 23fdc34:	d102      	bne.n	23fdc3c <_strtod_l+0x8cc>
 23fdc36:	3101      	adds	r1, #1
 23fdc38:	f43f ade3 	beq.w	23fd802 <_strtod_l+0x492>
 23fdc3c:	4b23      	ldr	r3, [pc, #140]	; (23fdccc <_strtod_l+0x95c>)
 23fdc3e:	f04f 0a00 	mov.w	sl, #0
 23fdc42:	403b      	ands	r3, r7
 23fdc44:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 23fdc48:	9b04      	ldr	r3, [sp, #16]
 23fdc4a:	2b00      	cmp	r3, #0
 23fdc4c:	d1a5      	bne.n	23fdb9a <_strtod_l+0x82a>
 23fdc4e:	e5e2      	b.n	23fd816 <_strtod_l+0x4a6>
 23fdc50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fdc54:	e7ea      	b.n	23fdc2c <_strtod_l+0x8bc>
 23fdc56:	4613      	mov	r3, r2
 23fdc58:	e7e8      	b.n	23fdc2c <_strtod_l+0x8bc>
 23fdc5a:	ea53 030a 	orrs.w	r3, r3, sl
 23fdc5e:	d08e      	beq.n	23fdb7e <_strtod_l+0x80e>
 23fdc60:	9b08      	ldr	r3, [sp, #32]
 23fdc62:	b1db      	cbz	r3, 23fdc9c <_strtod_l+0x92c>
 23fdc64:	423b      	tst	r3, r7
 23fdc66:	d0ef      	beq.n	23fdc48 <_strtod_l+0x8d8>
 23fdc68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fdc6a:	4650      	mov	r0, sl
 23fdc6c:	9a04      	ldr	r2, [sp, #16]
 23fdc6e:	4659      	mov	r1, fp
 23fdc70:	b1c3      	cbz	r3, 23fdca4 <_strtod_l+0x934>
 23fdc72:	f7ff fb61 	bl	23fd338 <sulp>
 23fdc76:	4602      	mov	r2, r0
 23fdc78:	460b      	mov	r3, r1
 23fdc7a:	ec51 0b18 	vmov	r0, r1, d8
 23fdc7e:	f7f7 ff5d 	bl	23f5b3c <__adddf3>
 23fdc82:	4682      	mov	sl, r0
 23fdc84:	468b      	mov	fp, r1
 23fdc86:	e7df      	b.n	23fdc48 <_strtod_l+0x8d8>
 23fdc88:	4013      	ands	r3, r2
 23fdc8a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 23fdc8e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 23fdc92:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 23fdc96:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 23fdc9a:	e7d5      	b.n	23fdc48 <_strtod_l+0x8d8>
 23fdc9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23fdc9e:	ea13 0f0a 	tst.w	r3, sl
 23fdca2:	e7e0      	b.n	23fdc66 <_strtod_l+0x8f6>
 23fdca4:	f7ff fb48 	bl	23fd338 <sulp>
 23fdca8:	4602      	mov	r2, r0
 23fdcaa:	460b      	mov	r3, r1
 23fdcac:	ec51 0b18 	vmov	r0, r1, d8
 23fdcb0:	f7f7 ff42 	bl	23f5b38 <__aeabi_dsub>
 23fdcb4:	2200      	movs	r2, #0
 23fdcb6:	2300      	movs	r3, #0
 23fdcb8:	4682      	mov	sl, r0
 23fdcba:	468b      	mov	fp, r1
 23fdcbc:	f7f8 fb5c 	bl	23f6378 <__aeabi_dcmpeq>
 23fdcc0:	2800      	cmp	r0, #0
 23fdcc2:	d0c1      	beq.n	23fdc48 <_strtod_l+0x8d8>
 23fdcc4:	e615      	b.n	23fd8f2 <_strtod_l+0x582>
 23fdcc6:	bf00      	nop
 23fdcc8:	fffffc02 	.word	0xfffffc02
 23fdccc:	7ff00000 	.word	0x7ff00000
 23fdcd0:	39500000 	.word	0x39500000
 23fdcd4:	000fffff 	.word	0x000fffff
 23fdcd8:	7fefffff 	.word	0x7fefffff
 23fdcdc:	023ffcb8 	.word	0x023ffcb8
 23fdce0:	4631      	mov	r1, r6
 23fdce2:	4628      	mov	r0, r5
 23fdce4:	f001 fa1e 	bl	23ff124 <__ratio>
 23fdce8:	2200      	movs	r2, #0
 23fdcea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23fdcee:	ee10 0a10 	vmov	r0, s0
 23fdcf2:	ec59 8b10 	vmov	r8, r9, d0
 23fdcf6:	4649      	mov	r1, r9
 23fdcf8:	f7f8 fb52 	bl	23f63a0 <__aeabi_dcmple>
 23fdcfc:	2800      	cmp	r0, #0
 23fdcfe:	d07a      	beq.n	23fddf6 <_strtod_l+0xa86>
 23fdd00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fdd02:	2b00      	cmp	r3, #0
 23fdd04:	d04a      	beq.n	23fdd9c <_strtod_l+0xa2c>
 23fdd06:	2200      	movs	r2, #0
 23fdd08:	4b93      	ldr	r3, [pc, #588]	; (23fdf58 <_strtod_l+0xbe8>)
 23fdd0a:	f04f 0800 	mov.w	r8, #0
 23fdd0e:	f8df 9248 	ldr.w	r9, [pc, #584]	; 23fdf58 <_strtod_l+0xbe8>
 23fdd12:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fdd16:	4b91      	ldr	r3, [pc, #580]	; (23fdf5c <_strtod_l+0xbec>)
 23fdd18:	403b      	ands	r3, r7
 23fdd1a:	930d      	str	r3, [sp, #52]	; 0x34
 23fdd1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23fdd1e:	4b90      	ldr	r3, [pc, #576]	; (23fdf60 <_strtod_l+0xbf0>)
 23fdd20:	429a      	cmp	r2, r3
 23fdd22:	f040 80b0 	bne.w	23fde86 <_strtod_l+0xb16>
 23fdd26:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 23fdd2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fdd2e:	ec4b ab10 	vmov	d0, sl, fp
 23fdd32:	e9cd 0108 	strd	r0, r1, [sp, #32]
 23fdd36:	f001 f91f 	bl	23fef78 <__ulp>
 23fdd3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fdd3e:	ec53 2b10 	vmov	r2, r3, d0
 23fdd42:	f7f8 f8b1 	bl	23f5ea8 <__aeabi_dmul>
 23fdd46:	4652      	mov	r2, sl
 23fdd48:	465b      	mov	r3, fp
 23fdd4a:	f7f7 fef7 	bl	23f5b3c <__adddf3>
 23fdd4e:	460b      	mov	r3, r1
 23fdd50:	4982      	ldr	r1, [pc, #520]	; (23fdf5c <_strtod_l+0xbec>)
 23fdd52:	4682      	mov	sl, r0
 23fdd54:	4a83      	ldr	r2, [pc, #524]	; (23fdf64 <_strtod_l+0xbf4>)
 23fdd56:	4019      	ands	r1, r3
 23fdd58:	4291      	cmp	r1, r2
 23fdd5a:	d960      	bls.n	23fde1e <_strtod_l+0xaae>
 23fdd5c:	ee18 3a90 	vmov	r3, s17
 23fdd60:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 23fdd64:	4293      	cmp	r3, r2
 23fdd66:	d104      	bne.n	23fdd72 <_strtod_l+0xa02>
 23fdd68:	ee18 3a10 	vmov	r3, s16
 23fdd6c:	3301      	adds	r3, #1
 23fdd6e:	f43f ad48 	beq.w	23fd802 <_strtod_l+0x492>
 23fdd72:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 23fdf70 <_strtod_l+0xc00>
 23fdd76:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 23fdd7a:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fdd7c:	4620      	mov	r0, r4
 23fdd7e:	f000 fdc3 	bl	23fe908 <_Bfree>
 23fdd82:	9905      	ldr	r1, [sp, #20]
 23fdd84:	4620      	mov	r0, r4
 23fdd86:	f000 fdbf 	bl	23fe908 <_Bfree>
 23fdd8a:	4631      	mov	r1, r6
 23fdd8c:	4620      	mov	r0, r4
 23fdd8e:	f000 fdbb 	bl	23fe908 <_Bfree>
 23fdd92:	4629      	mov	r1, r5
 23fdd94:	4620      	mov	r0, r4
 23fdd96:	f000 fdb7 	bl	23fe908 <_Bfree>
 23fdd9a:	e61c      	b.n	23fd9d6 <_strtod_l+0x666>
 23fdd9c:	f1ba 0f00 	cmp.w	sl, #0
 23fdda0:	d11b      	bne.n	23fddda <_strtod_l+0xa6a>
 23fdda2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fdda6:	b9f3      	cbnz	r3, 23fdde6 <_strtod_l+0xa76>
 23fdda8:	2200      	movs	r2, #0
 23fddaa:	4b6b      	ldr	r3, [pc, #428]	; (23fdf58 <_strtod_l+0xbe8>)
 23fddac:	4640      	mov	r0, r8
 23fddae:	4649      	mov	r1, r9
 23fddb0:	f7f8 faec 	bl	23f638c <__aeabi_dcmplt>
 23fddb4:	b9d0      	cbnz	r0, 23fddec <_strtod_l+0xa7c>
 23fddb6:	4640      	mov	r0, r8
 23fddb8:	4649      	mov	r1, r9
 23fddba:	2200      	movs	r2, #0
 23fddbc:	4b6a      	ldr	r3, [pc, #424]	; (23fdf68 <_strtod_l+0xbf8>)
 23fddbe:	f7f8 f873 	bl	23f5ea8 <__aeabi_dmul>
 23fddc2:	4680      	mov	r8, r0
 23fddc4:	4689      	mov	r9, r1
 23fddc6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 23fddca:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 23fddce:	9315      	str	r3, [sp, #84]	; 0x54
 23fddd0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 23fddd4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fddd8:	e79d      	b.n	23fdd16 <_strtod_l+0x9a6>
 23fddda:	f1ba 0f01 	cmp.w	sl, #1
 23fddde:	d102      	bne.n	23fdde6 <_strtod_l+0xa76>
 23fdde0:	2f00      	cmp	r7, #0
 23fdde2:	f43f ad86 	beq.w	23fd8f2 <_strtod_l+0x582>
 23fdde6:	2200      	movs	r2, #0
 23fdde8:	4b60      	ldr	r3, [pc, #384]	; (23fdf6c <_strtod_l+0xbfc>)
 23fddea:	e78e      	b.n	23fdd0a <_strtod_l+0x99a>
 23fddec:	f04f 0800 	mov.w	r8, #0
 23fddf0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 23fdf68 <_strtod_l+0xbf8>
 23fddf4:	e7e7      	b.n	23fddc6 <_strtod_l+0xa56>
 23fddf6:	4b5c      	ldr	r3, [pc, #368]	; (23fdf68 <_strtod_l+0xbf8>)
 23fddf8:	4640      	mov	r0, r8
 23fddfa:	4649      	mov	r1, r9
 23fddfc:	2200      	movs	r2, #0
 23fddfe:	f7f8 f853 	bl	23f5ea8 <__aeabi_dmul>
 23fde02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fde04:	4680      	mov	r8, r0
 23fde06:	4689      	mov	r9, r1
 23fde08:	b933      	cbnz	r3, 23fde18 <_strtod_l+0xaa8>
 23fde0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fde0e:	900e      	str	r0, [sp, #56]	; 0x38
 23fde10:	930f      	str	r3, [sp, #60]	; 0x3c
 23fde12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 23fde16:	e7dd      	b.n	23fddd4 <_strtod_l+0xa64>
 23fde18:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 23fde1c:	e7f9      	b.n	23fde12 <_strtod_l+0xaa2>
 23fde1e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 23fde22:	9b04      	ldr	r3, [sp, #16]
 23fde24:	2b00      	cmp	r3, #0
 23fde26:	d1a8      	bne.n	23fdd7a <_strtod_l+0xa0a>
 23fde28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23fde2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23fde2e:	0d1b      	lsrs	r3, r3, #20
 23fde30:	051b      	lsls	r3, r3, #20
 23fde32:	429a      	cmp	r2, r3
 23fde34:	d1a1      	bne.n	23fdd7a <_strtod_l+0xa0a>
 23fde36:	4640      	mov	r0, r8
 23fde38:	4649      	mov	r1, r9
 23fde3a:	f7f8 fd33 	bl	23f68a4 <__aeabi_d2lz>
 23fde3e:	f7f8 f805 	bl	23f5e4c <__aeabi_l2d>
 23fde42:	4602      	mov	r2, r0
 23fde44:	460b      	mov	r3, r1
 23fde46:	4640      	mov	r0, r8
 23fde48:	4649      	mov	r1, r9
 23fde4a:	f7f7 fe75 	bl	23f5b38 <__aeabi_dsub>
 23fde4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fde52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fde54:	4680      	mov	r8, r0
 23fde56:	ea43 030a 	orr.w	r3, r3, sl
 23fde5a:	4689      	mov	r9, r1
 23fde5c:	4313      	orrs	r3, r2
 23fde5e:	d055      	beq.n	23fdf0c <_strtod_l+0xb9c>
 23fde60:	a335      	add	r3, pc, #212	; (adr r3, 23fdf38 <_strtod_l+0xbc8>)
 23fde62:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fde66:	f7f8 fa91 	bl	23f638c <__aeabi_dcmplt>
 23fde6a:	2800      	cmp	r0, #0
 23fde6c:	f47f acd3 	bne.w	23fd816 <_strtod_l+0x4a6>
 23fde70:	4640      	mov	r0, r8
 23fde72:	4649      	mov	r1, r9
 23fde74:	a332      	add	r3, pc, #200	; (adr r3, 23fdf40 <_strtod_l+0xbd0>)
 23fde76:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fde7a:	f7f8 faa5 	bl	23f63c8 <__aeabi_dcmpgt>
 23fde7e:	2800      	cmp	r0, #0
 23fde80:	f43f af7b 	beq.w	23fdd7a <_strtod_l+0xa0a>
 23fde84:	e4c7      	b.n	23fd816 <_strtod_l+0x4a6>
 23fde86:	9b04      	ldr	r3, [sp, #16]
 23fde88:	b333      	cbz	r3, 23fded8 <_strtod_l+0xb68>
 23fde8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23fde8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 23fde90:	d822      	bhi.n	23fded8 <_strtod_l+0xb68>
 23fde92:	4640      	mov	r0, r8
 23fde94:	4649      	mov	r1, r9
 23fde96:	a32c      	add	r3, pc, #176	; (adr r3, 23fdf48 <_strtod_l+0xbd8>)
 23fde98:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fde9c:	f7f8 fa80 	bl	23f63a0 <__aeabi_dcmple>
 23fdea0:	b1a0      	cbz	r0, 23fdecc <_strtod_l+0xb5c>
 23fdea2:	4649      	mov	r1, r9
 23fdea4:	4640      	mov	r0, r8
 23fdea6:	f7f8 fa99 	bl	23f63dc <__aeabi_d2uiz>
 23fdeaa:	2801      	cmp	r0, #1
 23fdeac:	bf38      	it	cc
 23fdeae:	2001      	movcc	r0, #1
 23fdeb0:	f7f7 ff80 	bl	23f5db4 <__aeabi_ui2d>
 23fdeb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fdeb6:	4680      	mov	r8, r0
 23fdeb8:	4689      	mov	r9, r1
 23fdeba:	bb23      	cbnz	r3, 23fdf06 <_strtod_l+0xb96>
 23fdebc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fdec0:	9010      	str	r0, [sp, #64]	; 0x40
 23fdec2:	9311      	str	r3, [sp, #68]	; 0x44
 23fdec4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 23fdec8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fdecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fdece:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23fded0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 23fded4:	1a9b      	subs	r3, r3, r2
 23fded6:	9309      	str	r3, [sp, #36]	; 0x24
 23fded8:	eeb0 0a48 	vmov.f32	s0, s16
 23fdedc:	eef0 0a68 	vmov.f32	s1, s17
 23fdee0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fdee4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 23fdee8:	f001 f846 	bl	23fef78 <__ulp>
 23fdeec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fdef0:	ec53 2b10 	vmov	r2, r3, d0
 23fdef4:	f7f7 ffd8 	bl	23f5ea8 <__aeabi_dmul>
 23fdef8:	ec53 2b18 	vmov	r2, r3, d8
 23fdefc:	f7f7 fe1e 	bl	23f5b3c <__adddf3>
 23fdf00:	4682      	mov	sl, r0
 23fdf02:	468b      	mov	fp, r1
 23fdf04:	e78d      	b.n	23fde22 <_strtod_l+0xab2>
 23fdf06:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 23fdf0a:	e7db      	b.n	23fdec4 <_strtod_l+0xb54>
 23fdf0c:	a310      	add	r3, pc, #64	; (adr r3, 23fdf50 <_strtod_l+0xbe0>)
 23fdf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fdf12:	f7f8 fa3b 	bl	23f638c <__aeabi_dcmplt>
 23fdf16:	e7b2      	b.n	23fde7e <_strtod_l+0xb0e>
 23fdf18:	2300      	movs	r3, #0
 23fdf1a:	930a      	str	r3, [sp, #40]	; 0x28
 23fdf1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fdf1e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 23fdf20:	6013      	str	r3, [r2, #0]
 23fdf22:	f7ff ba6d 	b.w	23fd400 <_strtod_l+0x90>
 23fdf26:	2a65      	cmp	r2, #101	; 0x65
 23fdf28:	f43f ab61 	beq.w	23fd5ee <_strtod_l+0x27e>
 23fdf2c:	2a45      	cmp	r2, #69	; 0x45
 23fdf2e:	f43f ab5e 	beq.w	23fd5ee <_strtod_l+0x27e>
 23fdf32:	2301      	movs	r3, #1
 23fdf34:	f7ff bb96 	b.w	23fd664 <_strtod_l+0x2f4>
 23fdf38:	94a03595 	.word	0x94a03595
 23fdf3c:	3fdfffff 	.word	0x3fdfffff
 23fdf40:	35afe535 	.word	0x35afe535
 23fdf44:	3fe00000 	.word	0x3fe00000
 23fdf48:	ffc00000 	.word	0xffc00000
 23fdf4c:	41dfffff 	.word	0x41dfffff
 23fdf50:	94a03595 	.word	0x94a03595
 23fdf54:	3fcfffff 	.word	0x3fcfffff
 23fdf58:	3ff00000 	.word	0x3ff00000
 23fdf5c:	7ff00000 	.word	0x7ff00000
 23fdf60:	7fe00000 	.word	0x7fe00000
 23fdf64:	7c9fffff 	.word	0x7c9fffff
 23fdf68:	3fe00000 	.word	0x3fe00000
 23fdf6c:	bff00000 	.word	0xbff00000
 23fdf70:	7fefffff 	.word	0x7fefffff

023fdf74 <strtod>:
 23fdf74:	460a      	mov	r2, r1
 23fdf76:	4601      	mov	r1, r0
 23fdf78:	4802      	ldr	r0, [pc, #8]	; (23fdf84 <strtod+0x10>)
 23fdf7a:	4b03      	ldr	r3, [pc, #12]	; (23fdf88 <strtod+0x14>)
 23fdf7c:	6800      	ldr	r0, [r0, #0]
 23fdf7e:	f7ff b9f7 	b.w	23fd370 <_strtod_l>
 23fdf82:	bf00      	nop
 23fdf84:	1007aae8 	.word	0x1007aae8
 23fdf88:	1007ab54 	.word	0x1007ab54

023fdf8c <_strtol_l.constprop.0>:
 23fdf8c:	2b01      	cmp	r3, #1
 23fdf8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fdf92:	d001      	beq.n	23fdf98 <_strtol_l.constprop.0+0xc>
 23fdf94:	2b24      	cmp	r3, #36	; 0x24
 23fdf96:	d906      	bls.n	23fdfa6 <_strtol_l.constprop.0+0x1a>
 23fdf98:	f7fb ff9e 	bl	23f9ed8 <__errno>
 23fdf9c:	2316      	movs	r3, #22
 23fdf9e:	6003      	str	r3, [r0, #0]
 23fdfa0:	2000      	movs	r0, #0
 23fdfa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fdfa6:	460d      	mov	r5, r1
 23fdfa8:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23fe08c <_strtol_l.constprop.0+0x100>
 23fdfac:	462e      	mov	r6, r5
 23fdfae:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fdfb2:	f814 700c 	ldrb.w	r7, [r4, ip]
 23fdfb6:	f017 0708 	ands.w	r7, r7, #8
 23fdfba:	d1f7      	bne.n	23fdfac <_strtol_l.constprop.0+0x20>
 23fdfbc:	2c2d      	cmp	r4, #45	; 0x2d
 23fdfbe:	d132      	bne.n	23fe026 <_strtol_l.constprop.0+0x9a>
 23fdfc0:	782c      	ldrb	r4, [r5, #0]
 23fdfc2:	2701      	movs	r7, #1
 23fdfc4:	1cb5      	adds	r5, r6, #2
 23fdfc6:	2b00      	cmp	r3, #0
 23fdfc8:	d05b      	beq.n	23fe082 <_strtol_l.constprop.0+0xf6>
 23fdfca:	2b10      	cmp	r3, #16
 23fdfcc:	d109      	bne.n	23fdfe2 <_strtol_l.constprop.0+0x56>
 23fdfce:	2c30      	cmp	r4, #48	; 0x30
 23fdfd0:	d107      	bne.n	23fdfe2 <_strtol_l.constprop.0+0x56>
 23fdfd2:	782c      	ldrb	r4, [r5, #0]
 23fdfd4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23fdfd8:	2c58      	cmp	r4, #88	; 0x58
 23fdfda:	d14d      	bne.n	23fe078 <_strtol_l.constprop.0+0xec>
 23fdfdc:	786c      	ldrb	r4, [r5, #1]
 23fdfde:	2310      	movs	r3, #16
 23fdfe0:	3502      	adds	r5, #2
 23fdfe2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23fdfe6:	f04f 0c00 	mov.w	ip, #0
 23fdfea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fdfee:	4666      	mov	r6, ip
 23fdff0:	fbb8 f9f3 	udiv	r9, r8, r3
 23fdff4:	fb03 8a19 	mls	sl, r3, r9, r8
 23fdff8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23fdffc:	f1be 0f09 	cmp.w	lr, #9
 23fe000:	d816      	bhi.n	23fe030 <_strtol_l.constprop.0+0xa4>
 23fe002:	4674      	mov	r4, lr
 23fe004:	42a3      	cmp	r3, r4
 23fe006:	dd24      	ble.n	23fe052 <_strtol_l.constprop.0+0xc6>
 23fe008:	f1bc 0f00 	cmp.w	ip, #0
 23fe00c:	db1e      	blt.n	23fe04c <_strtol_l.constprop.0+0xc0>
 23fe00e:	45b1      	cmp	r9, r6
 23fe010:	d31c      	bcc.n	23fe04c <_strtol_l.constprop.0+0xc0>
 23fe012:	d101      	bne.n	23fe018 <_strtol_l.constprop.0+0x8c>
 23fe014:	45a2      	cmp	sl, r4
 23fe016:	db19      	blt.n	23fe04c <_strtol_l.constprop.0+0xc0>
 23fe018:	fb06 4603 	mla	r6, r6, r3, r4
 23fe01c:	f04f 0c01 	mov.w	ip, #1
 23fe020:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fe024:	e7e8      	b.n	23fdff8 <_strtol_l.constprop.0+0x6c>
 23fe026:	2c2b      	cmp	r4, #43	; 0x2b
 23fe028:	bf04      	itt	eq
 23fe02a:	782c      	ldrbeq	r4, [r5, #0]
 23fe02c:	1cb5      	addeq	r5, r6, #2
 23fe02e:	e7ca      	b.n	23fdfc6 <_strtol_l.constprop.0+0x3a>
 23fe030:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23fe034:	f1be 0f19 	cmp.w	lr, #25
 23fe038:	d801      	bhi.n	23fe03e <_strtol_l.constprop.0+0xb2>
 23fe03a:	3c37      	subs	r4, #55	; 0x37
 23fe03c:	e7e2      	b.n	23fe004 <_strtol_l.constprop.0+0x78>
 23fe03e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23fe042:	f1be 0f19 	cmp.w	lr, #25
 23fe046:	d804      	bhi.n	23fe052 <_strtol_l.constprop.0+0xc6>
 23fe048:	3c57      	subs	r4, #87	; 0x57
 23fe04a:	e7db      	b.n	23fe004 <_strtol_l.constprop.0+0x78>
 23fe04c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fe050:	e7e6      	b.n	23fe020 <_strtol_l.constprop.0+0x94>
 23fe052:	f1bc 0f00 	cmp.w	ip, #0
 23fe056:	da05      	bge.n	23fe064 <_strtol_l.constprop.0+0xd8>
 23fe058:	2322      	movs	r3, #34	; 0x22
 23fe05a:	4646      	mov	r6, r8
 23fe05c:	6003      	str	r3, [r0, #0]
 23fe05e:	b942      	cbnz	r2, 23fe072 <_strtol_l.constprop.0+0xe6>
 23fe060:	4630      	mov	r0, r6
 23fe062:	e79e      	b.n	23fdfa2 <_strtol_l.constprop.0+0x16>
 23fe064:	b107      	cbz	r7, 23fe068 <_strtol_l.constprop.0+0xdc>
 23fe066:	4276      	negs	r6, r6
 23fe068:	2a00      	cmp	r2, #0
 23fe06a:	d0f9      	beq.n	23fe060 <_strtol_l.constprop.0+0xd4>
 23fe06c:	f1bc 0f00 	cmp.w	ip, #0
 23fe070:	d000      	beq.n	23fe074 <_strtol_l.constprop.0+0xe8>
 23fe072:	1e69      	subs	r1, r5, #1
 23fe074:	6011      	str	r1, [r2, #0]
 23fe076:	e7f3      	b.n	23fe060 <_strtol_l.constprop.0+0xd4>
 23fe078:	2430      	movs	r4, #48	; 0x30
 23fe07a:	2b00      	cmp	r3, #0
 23fe07c:	d1b1      	bne.n	23fdfe2 <_strtol_l.constprop.0+0x56>
 23fe07e:	2308      	movs	r3, #8
 23fe080:	e7af      	b.n	23fdfe2 <_strtol_l.constprop.0+0x56>
 23fe082:	2c30      	cmp	r4, #48	; 0x30
 23fe084:	d0a5      	beq.n	23fdfd2 <_strtol_l.constprop.0+0x46>
 23fe086:	230a      	movs	r3, #10
 23fe088:	e7ab      	b.n	23fdfe2 <_strtol_l.constprop.0+0x56>
 23fe08a:	bf00      	nop
 23fe08c:	023ffce1 	.word	0x023ffce1

023fe090 <strtol>:
 23fe090:	4613      	mov	r3, r2
 23fe092:	460a      	mov	r2, r1
 23fe094:	4601      	mov	r1, r0
 23fe096:	4802      	ldr	r0, [pc, #8]	; (23fe0a0 <strtol+0x10>)
 23fe098:	6800      	ldr	r0, [r0, #0]
 23fe09a:	f7ff bf77 	b.w	23fdf8c <_strtol_l.constprop.0>
 23fe09e:	bf00      	nop
 23fe0a0:	1007aae8 	.word	0x1007aae8

023fe0a4 <tolower>:
 23fe0a4:	4b03      	ldr	r3, [pc, #12]	; (23fe0b4 <tolower+0x10>)
 23fe0a6:	5cc3      	ldrb	r3, [r0, r3]
 23fe0a8:	f003 0303 	and.w	r3, r3, #3
 23fe0ac:	2b01      	cmp	r3, #1
 23fe0ae:	bf08      	it	eq
 23fe0b0:	3020      	addeq	r0, #32
 23fe0b2:	4770      	bx	lr
 23fe0b4:	023ffce1 	.word	0x023ffce1

023fe0b8 <__register_exitproc>:
 23fe0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fe0bc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fe17c <__register_exitproc+0xc4>
 23fe0c0:	4606      	mov	r6, r0
 23fe0c2:	461f      	mov	r7, r3
 23fe0c4:	460d      	mov	r5, r1
 23fe0c6:	f8d8 0000 	ldr.w	r0, [r8]
 23fe0ca:	4691      	mov	r9, r2
 23fe0cc:	f000 fbc6 	bl	23fe85c <__retarget_lock_acquire_recursive>
 23fe0d0:	4b26      	ldr	r3, [pc, #152]	; (23fe16c <__register_exitproc+0xb4>)
 23fe0d2:	681c      	ldr	r4, [r3, #0]
 23fe0d4:	b934      	cbnz	r4, 23fe0e4 <__register_exitproc+0x2c>
 23fe0d6:	4c26      	ldr	r4, [pc, #152]	; (23fe170 <__register_exitproc+0xb8>)
 23fe0d8:	601c      	str	r4, [r3, #0]
 23fe0da:	4b26      	ldr	r3, [pc, #152]	; (23fe174 <__register_exitproc+0xbc>)
 23fe0dc:	b113      	cbz	r3, 23fe0e4 <__register_exitproc+0x2c>
 23fe0de:	681b      	ldr	r3, [r3, #0]
 23fe0e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fe0e4:	6863      	ldr	r3, [r4, #4]
 23fe0e6:	2b1f      	cmp	r3, #31
 23fe0e8:	dd07      	ble.n	23fe0fa <__register_exitproc+0x42>
 23fe0ea:	f8d8 0000 	ldr.w	r0, [r8]
 23fe0ee:	f000 fbb7 	bl	23fe860 <__retarget_lock_release_recursive>
 23fe0f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fe0fa:	b35e      	cbz	r6, 23fe154 <__register_exitproc+0x9c>
 23fe0fc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fe100:	b988      	cbnz	r0, 23fe126 <__register_exitproc+0x6e>
 23fe102:	4b1d      	ldr	r3, [pc, #116]	; (23fe178 <__register_exitproc+0xc0>)
 23fe104:	b923      	cbnz	r3, 23fe110 <__register_exitproc+0x58>
 23fe106:	f8d8 0000 	ldr.w	r0, [r8]
 23fe10a:	f000 fba8 	bl	23fe85e <__retarget_lock_release>
 23fe10e:	e7f0      	b.n	23fe0f2 <__register_exitproc+0x3a>
 23fe110:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fe114:	f7fb fe70 	bl	23f9df8 <malloc>
 23fe118:	2800      	cmp	r0, #0
 23fe11a:	d0f4      	beq.n	23fe106 <__register_exitproc+0x4e>
 23fe11c:	2300      	movs	r3, #0
 23fe11e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fe122:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fe126:	6863      	ldr	r3, [r4, #4]
 23fe128:	2201      	movs	r2, #1
 23fe12a:	2e02      	cmp	r6, #2
 23fe12c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23fe130:	fa02 f203 	lsl.w	r2, r2, r3
 23fe134:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fe138:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fe13c:	ea43 0302 	orr.w	r3, r3, r2
 23fe140:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23fe144:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fe148:	bf02      	ittt	eq
 23fe14a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fe14e:	4313      	orreq	r3, r2
 23fe150:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fe154:	6863      	ldr	r3, [r4, #4]
 23fe156:	f8d8 0000 	ldr.w	r0, [r8]
 23fe15a:	1c5a      	adds	r2, r3, #1
 23fe15c:	3302      	adds	r3, #2
 23fe15e:	6062      	str	r2, [r4, #4]
 23fe160:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fe164:	f000 fb7c 	bl	23fe860 <__retarget_lock_release_recursive>
 23fe168:	2000      	movs	r0, #0
 23fe16a:	e7c4      	b.n	23fe0f6 <__register_exitproc+0x3e>
 23fe16c:	1007afe4 	.word	0x1007afe4
 23fe170:	1007af58 	.word	0x1007af58
 23fe174:	00000000 	.word	0x00000000
 23fe178:	023f9df9 	.word	0x023f9df9
 23fe17c:	1007ab4c 	.word	0x1007ab4c

023fe180 <rshift>:
 23fe180:	6903      	ldr	r3, [r0, #16]
 23fe182:	114a      	asrs	r2, r1, #5
 23fe184:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 23fe188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe18c:	f100 0414 	add.w	r4, r0, #20
 23fe190:	dd45      	ble.n	23fe21e <rshift+0x9e>
 23fe192:	f011 011f 	ands.w	r1, r1, #31
 23fe196:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 23fe19a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 23fe19e:	d10c      	bne.n	23fe1ba <rshift+0x3a>
 23fe1a0:	f100 0710 	add.w	r7, r0, #16
 23fe1a4:	4629      	mov	r1, r5
 23fe1a6:	42b1      	cmp	r1, r6
 23fe1a8:	d334      	bcc.n	23fe214 <rshift+0x94>
 23fe1aa:	1a9b      	subs	r3, r3, r2
 23fe1ac:	1eea      	subs	r2, r5, #3
 23fe1ae:	009b      	lsls	r3, r3, #2
 23fe1b0:	4296      	cmp	r6, r2
 23fe1b2:	bf38      	it	cc
 23fe1b4:	2300      	movcc	r3, #0
 23fe1b6:	4423      	add	r3, r4
 23fe1b8:	e015      	b.n	23fe1e6 <rshift+0x66>
 23fe1ba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 23fe1be:	f1c1 0820 	rsb	r8, r1, #32
 23fe1c2:	f105 0e04 	add.w	lr, r5, #4
 23fe1c6:	46a1      	mov	r9, r4
 23fe1c8:	40cf      	lsrs	r7, r1
 23fe1ca:	4576      	cmp	r6, lr
 23fe1cc:	46f4      	mov	ip, lr
 23fe1ce:	d815      	bhi.n	23fe1fc <rshift+0x7c>
 23fe1d0:	1a9a      	subs	r2, r3, r2
 23fe1d2:	3501      	adds	r5, #1
 23fe1d4:	0092      	lsls	r2, r2, #2
 23fe1d6:	3a04      	subs	r2, #4
 23fe1d8:	42ae      	cmp	r6, r5
 23fe1da:	bf38      	it	cc
 23fe1dc:	2200      	movcc	r2, #0
 23fe1de:	18a3      	adds	r3, r4, r2
 23fe1e0:	50a7      	str	r7, [r4, r2]
 23fe1e2:	b107      	cbz	r7, 23fe1e6 <rshift+0x66>
 23fe1e4:	3304      	adds	r3, #4
 23fe1e6:	1b1a      	subs	r2, r3, r4
 23fe1e8:	42a3      	cmp	r3, r4
 23fe1ea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 23fe1ee:	bf08      	it	eq
 23fe1f0:	2300      	moveq	r3, #0
 23fe1f2:	6102      	str	r2, [r0, #16]
 23fe1f4:	bf08      	it	eq
 23fe1f6:	6143      	streq	r3, [r0, #20]
 23fe1f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fe1fc:	f8dc c000 	ldr.w	ip, [ip]
 23fe200:	fa0c fc08 	lsl.w	ip, ip, r8
 23fe204:	ea4c 0707 	orr.w	r7, ip, r7
 23fe208:	f849 7b04 	str.w	r7, [r9], #4
 23fe20c:	f85e 7b04 	ldr.w	r7, [lr], #4
 23fe210:	40cf      	lsrs	r7, r1
 23fe212:	e7da      	b.n	23fe1ca <rshift+0x4a>
 23fe214:	f851 cb04 	ldr.w	ip, [r1], #4
 23fe218:	f847 cf04 	str.w	ip, [r7, #4]!
 23fe21c:	e7c3      	b.n	23fe1a6 <rshift+0x26>
 23fe21e:	4623      	mov	r3, r4
 23fe220:	e7e1      	b.n	23fe1e6 <rshift+0x66>

023fe222 <__hexdig_fun>:
 23fe222:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fe226:	2b09      	cmp	r3, #9
 23fe228:	d802      	bhi.n	23fe230 <__hexdig_fun+0xe>
 23fe22a:	3820      	subs	r0, #32
 23fe22c:	b2c0      	uxtb	r0, r0
 23fe22e:	4770      	bx	lr
 23fe230:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 23fe234:	2b05      	cmp	r3, #5
 23fe236:	d801      	bhi.n	23fe23c <__hexdig_fun+0x1a>
 23fe238:	3847      	subs	r0, #71	; 0x47
 23fe23a:	e7f7      	b.n	23fe22c <__hexdig_fun+0xa>
 23fe23c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 23fe240:	2b05      	cmp	r3, #5
 23fe242:	d801      	bhi.n	23fe248 <__hexdig_fun+0x26>
 23fe244:	3827      	subs	r0, #39	; 0x27
 23fe246:	e7f1      	b.n	23fe22c <__hexdig_fun+0xa>
 23fe248:	2000      	movs	r0, #0
 23fe24a:	4770      	bx	lr

023fe24c <__gethex>:
 23fe24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe250:	ed2d 8b02 	vpush	{d8}
 23fe254:	b089      	sub	sp, #36	; 0x24
 23fe256:	ee08 0a10 	vmov	s16, r0
 23fe25a:	468b      	mov	fp, r1
 23fe25c:	4690      	mov	r8, r2
 23fe25e:	9304      	str	r3, [sp, #16]
 23fe260:	4bb2      	ldr	r3, [pc, #712]	; (23fe52c <__gethex+0x2e0>)
 23fe262:	681b      	ldr	r3, [r3, #0]
 23fe264:	4618      	mov	r0, r3
 23fe266:	9301      	str	r3, [sp, #4]
 23fe268:	f7f8 fb14 	bl	23f6894 <strlen>
 23fe26c:	9b01      	ldr	r3, [sp, #4]
 23fe26e:	f8db 2000 	ldr.w	r2, [fp]
 23fe272:	4682      	mov	sl, r0
 23fe274:	4403      	add	r3, r0
 23fe276:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 23fe27a:	9305      	str	r3, [sp, #20]
 23fe27c:	1c93      	adds	r3, r2, #2
 23fe27e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 23fe282:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 23fe286:	32fe      	adds	r2, #254	; 0xfe
 23fe288:	18d1      	adds	r1, r2, r3
 23fe28a:	461f      	mov	r7, r3
 23fe28c:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fe290:	9100      	str	r1, [sp, #0]
 23fe292:	2830      	cmp	r0, #48	; 0x30
 23fe294:	d0f8      	beq.n	23fe288 <__gethex+0x3c>
 23fe296:	f7ff ffc4 	bl	23fe222 <__hexdig_fun>
 23fe29a:	4604      	mov	r4, r0
 23fe29c:	2800      	cmp	r0, #0
 23fe29e:	d139      	bne.n	23fe314 <__gethex+0xc8>
 23fe2a0:	4652      	mov	r2, sl
 23fe2a2:	9901      	ldr	r1, [sp, #4]
 23fe2a4:	4638      	mov	r0, r7
 23fe2a6:	f7ff f80c 	bl	23fd2c2 <strncmp>
 23fe2aa:	4605      	mov	r5, r0
 23fe2ac:	2800      	cmp	r0, #0
 23fe2ae:	d167      	bne.n	23fe380 <__gethex+0x134>
 23fe2b0:	f817 000a 	ldrb.w	r0, [r7, sl]
 23fe2b4:	eb07 060a 	add.w	r6, r7, sl
 23fe2b8:	f7ff ffb3 	bl	23fe222 <__hexdig_fun>
 23fe2bc:	2800      	cmp	r0, #0
 23fe2be:	d061      	beq.n	23fe384 <__gethex+0x138>
 23fe2c0:	4633      	mov	r3, r6
 23fe2c2:	7818      	ldrb	r0, [r3, #0]
 23fe2c4:	461f      	mov	r7, r3
 23fe2c6:	3301      	adds	r3, #1
 23fe2c8:	2830      	cmp	r0, #48	; 0x30
 23fe2ca:	d0fa      	beq.n	23fe2c2 <__gethex+0x76>
 23fe2cc:	f7ff ffa9 	bl	23fe222 <__hexdig_fun>
 23fe2d0:	fab0 f480 	clz	r4, r0
 23fe2d4:	2301      	movs	r3, #1
 23fe2d6:	4635      	mov	r5, r6
 23fe2d8:	0964      	lsrs	r4, r4, #5
 23fe2da:	9300      	str	r3, [sp, #0]
 23fe2dc:	463a      	mov	r2, r7
 23fe2de:	4616      	mov	r6, r2
 23fe2e0:	3201      	adds	r2, #1
 23fe2e2:	7830      	ldrb	r0, [r6, #0]
 23fe2e4:	f7ff ff9d 	bl	23fe222 <__hexdig_fun>
 23fe2e8:	2800      	cmp	r0, #0
 23fe2ea:	d1f8      	bne.n	23fe2de <__gethex+0x92>
 23fe2ec:	4652      	mov	r2, sl
 23fe2ee:	9901      	ldr	r1, [sp, #4]
 23fe2f0:	4630      	mov	r0, r6
 23fe2f2:	f7fe ffe6 	bl	23fd2c2 <strncmp>
 23fe2f6:	b980      	cbnz	r0, 23fe31a <__gethex+0xce>
 23fe2f8:	b94d      	cbnz	r5, 23fe30e <__gethex+0xc2>
 23fe2fa:	eb06 050a 	add.w	r5, r6, sl
 23fe2fe:	462a      	mov	r2, r5
 23fe300:	4616      	mov	r6, r2
 23fe302:	3201      	adds	r2, #1
 23fe304:	7830      	ldrb	r0, [r6, #0]
 23fe306:	f7ff ff8c 	bl	23fe222 <__hexdig_fun>
 23fe30a:	2800      	cmp	r0, #0
 23fe30c:	d1f8      	bne.n	23fe300 <__gethex+0xb4>
 23fe30e:	1bad      	subs	r5, r5, r6
 23fe310:	00ad      	lsls	r5, r5, #2
 23fe312:	e004      	b.n	23fe31e <__gethex+0xd2>
 23fe314:	2400      	movs	r4, #0
 23fe316:	4625      	mov	r5, r4
 23fe318:	e7e0      	b.n	23fe2dc <__gethex+0x90>
 23fe31a:	2d00      	cmp	r5, #0
 23fe31c:	d1f7      	bne.n	23fe30e <__gethex+0xc2>
 23fe31e:	7833      	ldrb	r3, [r6, #0]
 23fe320:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 23fe324:	2b50      	cmp	r3, #80	; 0x50
 23fe326:	d13b      	bne.n	23fe3a0 <__gethex+0x154>
 23fe328:	7873      	ldrb	r3, [r6, #1]
 23fe32a:	2b2b      	cmp	r3, #43	; 0x2b
 23fe32c:	d02c      	beq.n	23fe388 <__gethex+0x13c>
 23fe32e:	2b2d      	cmp	r3, #45	; 0x2d
 23fe330:	d02e      	beq.n	23fe390 <__gethex+0x144>
 23fe332:	1c71      	adds	r1, r6, #1
 23fe334:	f04f 0900 	mov.w	r9, #0
 23fe338:	7808      	ldrb	r0, [r1, #0]
 23fe33a:	f7ff ff72 	bl	23fe222 <__hexdig_fun>
 23fe33e:	1e43      	subs	r3, r0, #1
 23fe340:	b2db      	uxtb	r3, r3
 23fe342:	2b18      	cmp	r3, #24
 23fe344:	d82c      	bhi.n	23fe3a0 <__gethex+0x154>
 23fe346:	f1a0 0210 	sub.w	r2, r0, #16
 23fe34a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 23fe34e:	f7ff ff68 	bl	23fe222 <__hexdig_fun>
 23fe352:	1e43      	subs	r3, r0, #1
 23fe354:	b2db      	uxtb	r3, r3
 23fe356:	2b18      	cmp	r3, #24
 23fe358:	d91d      	bls.n	23fe396 <__gethex+0x14a>
 23fe35a:	f1b9 0f00 	cmp.w	r9, #0
 23fe35e:	d000      	beq.n	23fe362 <__gethex+0x116>
 23fe360:	4252      	negs	r2, r2
 23fe362:	4415      	add	r5, r2
 23fe364:	f8cb 1000 	str.w	r1, [fp]
 23fe368:	b1e4      	cbz	r4, 23fe3a4 <__gethex+0x158>
 23fe36a:	9b00      	ldr	r3, [sp, #0]
 23fe36c:	2b00      	cmp	r3, #0
 23fe36e:	bf14      	ite	ne
 23fe370:	2700      	movne	r7, #0
 23fe372:	2706      	moveq	r7, #6
 23fe374:	4638      	mov	r0, r7
 23fe376:	b009      	add	sp, #36	; 0x24
 23fe378:	ecbd 8b02 	vpop	{d8}
 23fe37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fe380:	463e      	mov	r6, r7
 23fe382:	4625      	mov	r5, r4
 23fe384:	2401      	movs	r4, #1
 23fe386:	e7ca      	b.n	23fe31e <__gethex+0xd2>
 23fe388:	f04f 0900 	mov.w	r9, #0
 23fe38c:	1cb1      	adds	r1, r6, #2
 23fe38e:	e7d3      	b.n	23fe338 <__gethex+0xec>
 23fe390:	f04f 0901 	mov.w	r9, #1
 23fe394:	e7fa      	b.n	23fe38c <__gethex+0x140>
 23fe396:	230a      	movs	r3, #10
 23fe398:	fb03 0202 	mla	r2, r3, r2, r0
 23fe39c:	3a10      	subs	r2, #16
 23fe39e:	e7d4      	b.n	23fe34a <__gethex+0xfe>
 23fe3a0:	4631      	mov	r1, r6
 23fe3a2:	e7df      	b.n	23fe364 <__gethex+0x118>
 23fe3a4:	1bf3      	subs	r3, r6, r7
 23fe3a6:	4621      	mov	r1, r4
 23fe3a8:	3b01      	subs	r3, #1
 23fe3aa:	2b07      	cmp	r3, #7
 23fe3ac:	dc0b      	bgt.n	23fe3c6 <__gethex+0x17a>
 23fe3ae:	ee18 0a10 	vmov	r0, s16
 23fe3b2:	f000 fa69 	bl	23fe888 <_Balloc>
 23fe3b6:	4604      	mov	r4, r0
 23fe3b8:	b940      	cbnz	r0, 23fe3cc <__gethex+0x180>
 23fe3ba:	4b5d      	ldr	r3, [pc, #372]	; (23fe530 <__gethex+0x2e4>)
 23fe3bc:	4602      	mov	r2, r0
 23fe3be:	21de      	movs	r1, #222	; 0xde
 23fe3c0:	485c      	ldr	r0, [pc, #368]	; (23fe534 <__gethex+0x2e8>)
 23fe3c2:	f7fb fd97 	bl	23f9ef4 <__assert_func>
 23fe3c6:	3101      	adds	r1, #1
 23fe3c8:	105b      	asrs	r3, r3, #1
 23fe3ca:	e7ee      	b.n	23fe3aa <__gethex+0x15e>
 23fe3cc:	f100 0914 	add.w	r9, r0, #20
 23fe3d0:	f04f 0b00 	mov.w	fp, #0
 23fe3d4:	f1ca 0301 	rsb	r3, sl, #1
 23fe3d8:	f8cd 9008 	str.w	r9, [sp, #8]
 23fe3dc:	f8cd b000 	str.w	fp, [sp]
 23fe3e0:	9306      	str	r3, [sp, #24]
 23fe3e2:	42b7      	cmp	r7, r6
 23fe3e4:	d340      	bcc.n	23fe468 <__gethex+0x21c>
 23fe3e6:	9802      	ldr	r0, [sp, #8]
 23fe3e8:	9b00      	ldr	r3, [sp, #0]
 23fe3ea:	f840 3b04 	str.w	r3, [r0], #4
 23fe3ee:	eba0 0009 	sub.w	r0, r0, r9
 23fe3f2:	1080      	asrs	r0, r0, #2
 23fe3f4:	0146      	lsls	r6, r0, #5
 23fe3f6:	6120      	str	r0, [r4, #16]
 23fe3f8:	4618      	mov	r0, r3
 23fe3fa:	f000 fb39 	bl	23fea70 <__hi0bits>
 23fe3fe:	1a30      	subs	r0, r6, r0
 23fe400:	f8d8 6000 	ldr.w	r6, [r8]
 23fe404:	42b0      	cmp	r0, r6
 23fe406:	dd63      	ble.n	23fe4d0 <__gethex+0x284>
 23fe408:	1b87      	subs	r7, r0, r6
 23fe40a:	4620      	mov	r0, r4
 23fe40c:	4639      	mov	r1, r7
 23fe40e:	f000 fedf 	bl	23ff1d0 <__any_on>
 23fe412:	4682      	mov	sl, r0
 23fe414:	b1a8      	cbz	r0, 23fe442 <__gethex+0x1f6>
 23fe416:	1e7b      	subs	r3, r7, #1
 23fe418:	f04f 0a01 	mov.w	sl, #1
 23fe41c:	1159      	asrs	r1, r3, #5
 23fe41e:	f003 021f 	and.w	r2, r3, #31
 23fe422:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 23fe426:	fa0a f202 	lsl.w	r2, sl, r2
 23fe42a:	420a      	tst	r2, r1
 23fe42c:	d009      	beq.n	23fe442 <__gethex+0x1f6>
 23fe42e:	4553      	cmp	r3, sl
 23fe430:	dd05      	ble.n	23fe43e <__gethex+0x1f2>
 23fe432:	1eb9      	subs	r1, r7, #2
 23fe434:	4620      	mov	r0, r4
 23fe436:	f000 fecb 	bl	23ff1d0 <__any_on>
 23fe43a:	2800      	cmp	r0, #0
 23fe43c:	d145      	bne.n	23fe4ca <__gethex+0x27e>
 23fe43e:	f04f 0a02 	mov.w	sl, #2
 23fe442:	443d      	add	r5, r7
 23fe444:	4639      	mov	r1, r7
 23fe446:	4620      	mov	r0, r4
 23fe448:	f7ff fe9a 	bl	23fe180 <rshift>
 23fe44c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 23fe450:	42ab      	cmp	r3, r5
 23fe452:	da4c      	bge.n	23fe4ee <__gethex+0x2a2>
 23fe454:	4621      	mov	r1, r4
 23fe456:	ee18 0a10 	vmov	r0, s16
 23fe45a:	f000 fa55 	bl	23fe908 <_Bfree>
 23fe45e:	2300      	movs	r3, #0
 23fe460:	9a14      	ldr	r2, [sp, #80]	; 0x50
 23fe462:	27a3      	movs	r7, #163	; 0xa3
 23fe464:	6013      	str	r3, [r2, #0]
 23fe466:	e785      	b.n	23fe374 <__gethex+0x128>
 23fe468:	1e73      	subs	r3, r6, #1
 23fe46a:	9a05      	ldr	r2, [sp, #20]
 23fe46c:	9303      	str	r3, [sp, #12]
 23fe46e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 23fe472:	4293      	cmp	r3, r2
 23fe474:	d019      	beq.n	23fe4aa <__gethex+0x25e>
 23fe476:	f1bb 0f20 	cmp.w	fp, #32
 23fe47a:	d107      	bne.n	23fe48c <__gethex+0x240>
 23fe47c:	9b02      	ldr	r3, [sp, #8]
 23fe47e:	9a00      	ldr	r2, [sp, #0]
 23fe480:	f843 2b04 	str.w	r2, [r3], #4
 23fe484:	9302      	str	r3, [sp, #8]
 23fe486:	2300      	movs	r3, #0
 23fe488:	469b      	mov	fp, r3
 23fe48a:	9300      	str	r3, [sp, #0]
 23fe48c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 23fe490:	f7ff fec7 	bl	23fe222 <__hexdig_fun>
 23fe494:	f000 000f 	and.w	r0, r0, #15
 23fe498:	9b00      	ldr	r3, [sp, #0]
 23fe49a:	fa00 f00b 	lsl.w	r0, r0, fp
 23fe49e:	f10b 0b04 	add.w	fp, fp, #4
 23fe4a2:	4303      	orrs	r3, r0
 23fe4a4:	9300      	str	r3, [sp, #0]
 23fe4a6:	9b03      	ldr	r3, [sp, #12]
 23fe4a8:	e00d      	b.n	23fe4c6 <__gethex+0x27a>
 23fe4aa:	9b03      	ldr	r3, [sp, #12]
 23fe4ac:	9a06      	ldr	r2, [sp, #24]
 23fe4ae:	4413      	add	r3, r2
 23fe4b0:	42bb      	cmp	r3, r7
 23fe4b2:	d3e0      	bcc.n	23fe476 <__gethex+0x22a>
 23fe4b4:	4618      	mov	r0, r3
 23fe4b6:	4652      	mov	r2, sl
 23fe4b8:	9901      	ldr	r1, [sp, #4]
 23fe4ba:	9307      	str	r3, [sp, #28]
 23fe4bc:	f7fe ff01 	bl	23fd2c2 <strncmp>
 23fe4c0:	9b07      	ldr	r3, [sp, #28]
 23fe4c2:	2800      	cmp	r0, #0
 23fe4c4:	d1d7      	bne.n	23fe476 <__gethex+0x22a>
 23fe4c6:	461e      	mov	r6, r3
 23fe4c8:	e78b      	b.n	23fe3e2 <__gethex+0x196>
 23fe4ca:	f04f 0a03 	mov.w	sl, #3
 23fe4ce:	e7b8      	b.n	23fe442 <__gethex+0x1f6>
 23fe4d0:	da0a      	bge.n	23fe4e8 <__gethex+0x29c>
 23fe4d2:	1a37      	subs	r7, r6, r0
 23fe4d4:	4621      	mov	r1, r4
 23fe4d6:	ee18 0a10 	vmov	r0, s16
 23fe4da:	463a      	mov	r2, r7
 23fe4dc:	1bed      	subs	r5, r5, r7
 23fe4de:	f000 fc2f 	bl	23fed40 <__lshift>
 23fe4e2:	4604      	mov	r4, r0
 23fe4e4:	f100 0914 	add.w	r9, r0, #20
 23fe4e8:	f04f 0a00 	mov.w	sl, #0
 23fe4ec:	e7ae      	b.n	23fe44c <__gethex+0x200>
 23fe4ee:	f8d8 0004 	ldr.w	r0, [r8, #4]
 23fe4f2:	42a8      	cmp	r0, r5
 23fe4f4:	dd72      	ble.n	23fe5dc <__gethex+0x390>
 23fe4f6:	1b45      	subs	r5, r0, r5
 23fe4f8:	42ae      	cmp	r6, r5
 23fe4fa:	dc35      	bgt.n	23fe568 <__gethex+0x31c>
 23fe4fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 23fe500:	2b02      	cmp	r3, #2
 23fe502:	d029      	beq.n	23fe558 <__gethex+0x30c>
 23fe504:	2b03      	cmp	r3, #3
 23fe506:	d02b      	beq.n	23fe560 <__gethex+0x314>
 23fe508:	2b01      	cmp	r3, #1
 23fe50a:	d11b      	bne.n	23fe544 <__gethex+0x2f8>
 23fe50c:	42ae      	cmp	r6, r5
 23fe50e:	d119      	bne.n	23fe544 <__gethex+0x2f8>
 23fe510:	2e01      	cmp	r6, #1
 23fe512:	d111      	bne.n	23fe538 <__gethex+0x2ec>
 23fe514:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23fe518:	2762      	movs	r7, #98	; 0x62
 23fe51a:	9a04      	ldr	r2, [sp, #16]
 23fe51c:	6013      	str	r3, [r2, #0]
 23fe51e:	2301      	movs	r3, #1
 23fe520:	6123      	str	r3, [r4, #16]
 23fe522:	f8c9 3000 	str.w	r3, [r9]
 23fe526:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23fe528:	601c      	str	r4, [r3, #0]
 23fe52a:	e723      	b.n	23fe374 <__gethex+0x128>
 23fe52c:	023ffe54 	.word	0x023ffe54
 23fe530:	023ffde1 	.word	0x023ffde1
 23fe534:	023ffdf2 	.word	0x023ffdf2
 23fe538:	1e71      	subs	r1, r6, #1
 23fe53a:	4620      	mov	r0, r4
 23fe53c:	f000 fe48 	bl	23ff1d0 <__any_on>
 23fe540:	2800      	cmp	r0, #0
 23fe542:	d1e7      	bne.n	23fe514 <__gethex+0x2c8>
 23fe544:	4621      	mov	r1, r4
 23fe546:	ee18 0a10 	vmov	r0, s16
 23fe54a:	f000 f9dd 	bl	23fe908 <_Bfree>
 23fe54e:	2300      	movs	r3, #0
 23fe550:	9a14      	ldr	r2, [sp, #80]	; 0x50
 23fe552:	2750      	movs	r7, #80	; 0x50
 23fe554:	6013      	str	r3, [r2, #0]
 23fe556:	e70d      	b.n	23fe374 <__gethex+0x128>
 23fe558:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fe55a:	2b00      	cmp	r3, #0
 23fe55c:	d1f2      	bne.n	23fe544 <__gethex+0x2f8>
 23fe55e:	e7d9      	b.n	23fe514 <__gethex+0x2c8>
 23fe560:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fe562:	2b00      	cmp	r3, #0
 23fe564:	d1d6      	bne.n	23fe514 <__gethex+0x2c8>
 23fe566:	e7ed      	b.n	23fe544 <__gethex+0x2f8>
 23fe568:	1e6f      	subs	r7, r5, #1
 23fe56a:	f1ba 0f00 	cmp.w	sl, #0
 23fe56e:	d132      	bne.n	23fe5d6 <__gethex+0x38a>
 23fe570:	b127      	cbz	r7, 23fe57c <__gethex+0x330>
 23fe572:	4639      	mov	r1, r7
 23fe574:	4620      	mov	r0, r4
 23fe576:	f000 fe2b 	bl	23ff1d0 <__any_on>
 23fe57a:	4682      	mov	sl, r0
 23fe57c:	117b      	asrs	r3, r7, #5
 23fe57e:	2101      	movs	r1, #1
 23fe580:	f007 071f 	and.w	r7, r7, #31
 23fe584:	4620      	mov	r0, r4
 23fe586:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 23fe58a:	1b76      	subs	r6, r6, r5
 23fe58c:	fa01 f707 	lsl.w	r7, r1, r7
 23fe590:	4629      	mov	r1, r5
 23fe592:	421f      	tst	r7, r3
 23fe594:	f04f 0702 	mov.w	r7, #2
 23fe598:	bf18      	it	ne
 23fe59a:	f04a 0a02 	orrne.w	sl, sl, #2
 23fe59e:	f7ff fdef 	bl	23fe180 <rshift>
 23fe5a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 23fe5a6:	f1ba 0f00 	cmp.w	sl, #0
 23fe5aa:	d048      	beq.n	23fe63e <__gethex+0x3f2>
 23fe5ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 23fe5b0:	2b02      	cmp	r3, #2
 23fe5b2:	d015      	beq.n	23fe5e0 <__gethex+0x394>
 23fe5b4:	2b03      	cmp	r3, #3
 23fe5b6:	d017      	beq.n	23fe5e8 <__gethex+0x39c>
 23fe5b8:	2b01      	cmp	r3, #1
 23fe5ba:	d109      	bne.n	23fe5d0 <__gethex+0x384>
 23fe5bc:	f01a 0f02 	tst.w	sl, #2
 23fe5c0:	d006      	beq.n	23fe5d0 <__gethex+0x384>
 23fe5c2:	f8d9 0000 	ldr.w	r0, [r9]
 23fe5c6:	ea4a 0a00 	orr.w	sl, sl, r0
 23fe5ca:	f01a 0f01 	tst.w	sl, #1
 23fe5ce:	d10e      	bne.n	23fe5ee <__gethex+0x3a2>
 23fe5d0:	f047 0710 	orr.w	r7, r7, #16
 23fe5d4:	e033      	b.n	23fe63e <__gethex+0x3f2>
 23fe5d6:	f04f 0a01 	mov.w	sl, #1
 23fe5da:	e7cf      	b.n	23fe57c <__gethex+0x330>
 23fe5dc:	2701      	movs	r7, #1
 23fe5de:	e7e2      	b.n	23fe5a6 <__gethex+0x35a>
 23fe5e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fe5e2:	f1c3 0301 	rsb	r3, r3, #1
 23fe5e6:	9315      	str	r3, [sp, #84]	; 0x54
 23fe5e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fe5ea:	2b00      	cmp	r3, #0
 23fe5ec:	d0f0      	beq.n	23fe5d0 <__gethex+0x384>
 23fe5ee:	f8d4 b010 	ldr.w	fp, [r4, #16]
 23fe5f2:	f104 0314 	add.w	r3, r4, #20
 23fe5f6:	f04f 0c00 	mov.w	ip, #0
 23fe5fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 23fe5fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 23fe602:	4618      	mov	r0, r3
 23fe604:	f853 2b04 	ldr.w	r2, [r3], #4
 23fe608:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 23fe60c:	d01c      	beq.n	23fe648 <__gethex+0x3fc>
 23fe60e:	3201      	adds	r2, #1
 23fe610:	6002      	str	r2, [r0, #0]
 23fe612:	2f02      	cmp	r7, #2
 23fe614:	f104 0314 	add.w	r3, r4, #20
 23fe618:	d13f      	bne.n	23fe69a <__gethex+0x44e>
 23fe61a:	f8d8 2000 	ldr.w	r2, [r8]
 23fe61e:	3a01      	subs	r2, #1
 23fe620:	42b2      	cmp	r2, r6
 23fe622:	d10a      	bne.n	23fe63a <__gethex+0x3ee>
 23fe624:	1171      	asrs	r1, r6, #5
 23fe626:	2201      	movs	r2, #1
 23fe628:	f006 061f 	and.w	r6, r6, #31
 23fe62c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 23fe630:	fa02 f606 	lsl.w	r6, r2, r6
 23fe634:	421e      	tst	r6, r3
 23fe636:	bf18      	it	ne
 23fe638:	4617      	movne	r7, r2
 23fe63a:	f047 0720 	orr.w	r7, r7, #32
 23fe63e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23fe640:	601c      	str	r4, [r3, #0]
 23fe642:	9b04      	ldr	r3, [sp, #16]
 23fe644:	601d      	str	r5, [r3, #0]
 23fe646:	e695      	b.n	23fe374 <__gethex+0x128>
 23fe648:	4299      	cmp	r1, r3
 23fe64a:	f843 cc04 	str.w	ip, [r3, #-4]
 23fe64e:	d8d8      	bhi.n	23fe602 <__gethex+0x3b6>
 23fe650:	68a3      	ldr	r3, [r4, #8]
 23fe652:	459b      	cmp	fp, r3
 23fe654:	db19      	blt.n	23fe68a <__gethex+0x43e>
 23fe656:	6861      	ldr	r1, [r4, #4]
 23fe658:	ee18 0a10 	vmov	r0, s16
 23fe65c:	3101      	adds	r1, #1
 23fe65e:	f000 f913 	bl	23fe888 <_Balloc>
 23fe662:	4681      	mov	r9, r0
 23fe664:	b918      	cbnz	r0, 23fe66e <__gethex+0x422>
 23fe666:	4b1b      	ldr	r3, [pc, #108]	; (23fe6d4 <__gethex+0x488>)
 23fe668:	4602      	mov	r2, r0
 23fe66a:	2184      	movs	r1, #132	; 0x84
 23fe66c:	e6a8      	b.n	23fe3c0 <__gethex+0x174>
 23fe66e:	6922      	ldr	r2, [r4, #16]
 23fe670:	f104 010c 	add.w	r1, r4, #12
 23fe674:	300c      	adds	r0, #12
 23fe676:	3202      	adds	r2, #2
 23fe678:	0092      	lsls	r2, r2, #2
 23fe67a:	f7fe fda5 	bl	23fd1c8 <memcpy>
 23fe67e:	4621      	mov	r1, r4
 23fe680:	464c      	mov	r4, r9
 23fe682:	ee18 0a10 	vmov	r0, s16
 23fe686:	f000 f93f 	bl	23fe908 <_Bfree>
 23fe68a:	6923      	ldr	r3, [r4, #16]
 23fe68c:	1c5a      	adds	r2, r3, #1
 23fe68e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 23fe692:	6122      	str	r2, [r4, #16]
 23fe694:	2201      	movs	r2, #1
 23fe696:	615a      	str	r2, [r3, #20]
 23fe698:	e7bb      	b.n	23fe612 <__gethex+0x3c6>
 23fe69a:	6922      	ldr	r2, [r4, #16]
 23fe69c:	455a      	cmp	r2, fp
 23fe69e:	dd0b      	ble.n	23fe6b8 <__gethex+0x46c>
 23fe6a0:	2101      	movs	r1, #1
 23fe6a2:	4620      	mov	r0, r4
 23fe6a4:	f7ff fd6c 	bl	23fe180 <rshift>
 23fe6a8:	3501      	adds	r5, #1
 23fe6aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 23fe6ae:	42ab      	cmp	r3, r5
 23fe6b0:	f6ff aed0 	blt.w	23fe454 <__gethex+0x208>
 23fe6b4:	2701      	movs	r7, #1
 23fe6b6:	e7c0      	b.n	23fe63a <__gethex+0x3ee>
 23fe6b8:	f016 061f 	ands.w	r6, r6, #31
 23fe6bc:	d0fa      	beq.n	23fe6b4 <__gethex+0x468>
 23fe6be:	4453      	add	r3, sl
 23fe6c0:	f1c6 0620 	rsb	r6, r6, #32
 23fe6c4:	f853 0c04 	ldr.w	r0, [r3, #-4]
 23fe6c8:	f000 f9d2 	bl	23fea70 <__hi0bits>
 23fe6cc:	42b0      	cmp	r0, r6
 23fe6ce:	dbe7      	blt.n	23fe6a0 <__gethex+0x454>
 23fe6d0:	e7f0      	b.n	23fe6b4 <__gethex+0x468>
 23fe6d2:	bf00      	nop
 23fe6d4:	023ffde1 	.word	0x023ffde1

023fe6d8 <L_shift>:
 23fe6d8:	f1c2 0208 	rsb	r2, r2, #8
 23fe6dc:	0092      	lsls	r2, r2, #2
 23fe6de:	b570      	push	{r4, r5, r6, lr}
 23fe6e0:	f1c2 0620 	rsb	r6, r2, #32
 23fe6e4:	6843      	ldr	r3, [r0, #4]
 23fe6e6:	6804      	ldr	r4, [r0, #0]
 23fe6e8:	fa03 f506 	lsl.w	r5, r3, r6
 23fe6ec:	40d3      	lsrs	r3, r2
 23fe6ee:	432c      	orrs	r4, r5
 23fe6f0:	6004      	str	r4, [r0, #0]
 23fe6f2:	f840 3f04 	str.w	r3, [r0, #4]!
 23fe6f6:	4288      	cmp	r0, r1
 23fe6f8:	d3f4      	bcc.n	23fe6e4 <L_shift+0xc>
 23fe6fa:	bd70      	pop	{r4, r5, r6, pc}

023fe6fc <__match>:
 23fe6fc:	6803      	ldr	r3, [r0, #0]
 23fe6fe:	3301      	adds	r3, #1
 23fe700:	b530      	push	{r4, r5, lr}
 23fe702:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fe706:	b914      	cbnz	r4, 23fe70e <__match+0x12>
 23fe708:	6003      	str	r3, [r0, #0]
 23fe70a:	2001      	movs	r0, #1
 23fe70c:	bd30      	pop	{r4, r5, pc}
 23fe70e:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe712:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 23fe716:	2d19      	cmp	r5, #25
 23fe718:	bf98      	it	ls
 23fe71a:	3220      	addls	r2, #32
 23fe71c:	42a2      	cmp	r2, r4
 23fe71e:	d0f0      	beq.n	23fe702 <__match+0x6>
 23fe720:	2000      	movs	r0, #0
 23fe722:	e7f3      	b.n	23fe70c <__match+0x10>

023fe724 <__hexnan>:
 23fe724:	680b      	ldr	r3, [r1, #0]
 23fe726:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe72a:	115e      	asrs	r6, r3, #5
 23fe72c:	f013 031f 	ands.w	r3, r3, #31
 23fe730:	f04f 0500 	mov.w	r5, #0
 23fe734:	b087      	sub	sp, #28
 23fe736:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 23fe73a:	4690      	mov	r8, r2
 23fe73c:	4682      	mov	sl, r0
 23fe73e:	6802      	ldr	r2, [r0, #0]
 23fe740:	bf18      	it	ne
 23fe742:	3604      	addne	r6, #4
 23fe744:	46ab      	mov	fp, r5
 23fe746:	9301      	str	r3, [sp, #4]
 23fe748:	1f37      	subs	r7, r6, #4
 23fe74a:	f846 5c04 	str.w	r5, [r6, #-4]
 23fe74e:	9502      	str	r5, [sp, #8]
 23fe750:	46b9      	mov	r9, r7
 23fe752:	463c      	mov	r4, r7
 23fe754:	1c53      	adds	r3, r2, #1
 23fe756:	7851      	ldrb	r1, [r2, #1]
 23fe758:	9303      	str	r3, [sp, #12]
 23fe75a:	b341      	cbz	r1, 23fe7ae <__hexnan+0x8a>
 23fe75c:	4608      	mov	r0, r1
 23fe75e:	9205      	str	r2, [sp, #20]
 23fe760:	9104      	str	r1, [sp, #16]
 23fe762:	f7ff fd5e 	bl	23fe222 <__hexdig_fun>
 23fe766:	2800      	cmp	r0, #0
 23fe768:	d14f      	bne.n	23fe80a <__hexnan+0xe6>
 23fe76a:	9904      	ldr	r1, [sp, #16]
 23fe76c:	9a05      	ldr	r2, [sp, #20]
 23fe76e:	2920      	cmp	r1, #32
 23fe770:	d818      	bhi.n	23fe7a4 <__hexnan+0x80>
 23fe772:	9b02      	ldr	r3, [sp, #8]
 23fe774:	459b      	cmp	fp, r3
 23fe776:	dd13      	ble.n	23fe7a0 <__hexnan+0x7c>
 23fe778:	454c      	cmp	r4, r9
 23fe77a:	d206      	bcs.n	23fe78a <__hexnan+0x66>
 23fe77c:	2d07      	cmp	r5, #7
 23fe77e:	dc04      	bgt.n	23fe78a <__hexnan+0x66>
 23fe780:	462a      	mov	r2, r5
 23fe782:	4649      	mov	r1, r9
 23fe784:	4620      	mov	r0, r4
 23fe786:	f7ff ffa7 	bl	23fe6d8 <L_shift>
 23fe78a:	4544      	cmp	r4, r8
 23fe78c:	d94f      	bls.n	23fe82e <__hexnan+0x10a>
 23fe78e:	2300      	movs	r3, #0
 23fe790:	f1a4 0904 	sub.w	r9, r4, #4
 23fe794:	f8cd b008 	str.w	fp, [sp, #8]
 23fe798:	f844 3c04 	str.w	r3, [r4, #-4]
 23fe79c:	461d      	mov	r5, r3
 23fe79e:	464c      	mov	r4, r9
 23fe7a0:	9a03      	ldr	r2, [sp, #12]
 23fe7a2:	e7d7      	b.n	23fe754 <__hexnan+0x30>
 23fe7a4:	2929      	cmp	r1, #41	; 0x29
 23fe7a6:	d155      	bne.n	23fe854 <__hexnan+0x130>
 23fe7a8:	3202      	adds	r2, #2
 23fe7aa:	f8ca 2000 	str.w	r2, [sl]
 23fe7ae:	f1bb 0f00 	cmp.w	fp, #0
 23fe7b2:	d04f      	beq.n	23fe854 <__hexnan+0x130>
 23fe7b4:	454c      	cmp	r4, r9
 23fe7b6:	d206      	bcs.n	23fe7c6 <__hexnan+0xa2>
 23fe7b8:	2d07      	cmp	r5, #7
 23fe7ba:	dc04      	bgt.n	23fe7c6 <__hexnan+0xa2>
 23fe7bc:	462a      	mov	r2, r5
 23fe7be:	4649      	mov	r1, r9
 23fe7c0:	4620      	mov	r0, r4
 23fe7c2:	f7ff ff89 	bl	23fe6d8 <L_shift>
 23fe7c6:	4544      	cmp	r4, r8
 23fe7c8:	d933      	bls.n	23fe832 <__hexnan+0x10e>
 23fe7ca:	f1a8 0204 	sub.w	r2, r8, #4
 23fe7ce:	4623      	mov	r3, r4
 23fe7d0:	f853 1b04 	ldr.w	r1, [r3], #4
 23fe7d4:	429f      	cmp	r7, r3
 23fe7d6:	f842 1f04 	str.w	r1, [r2, #4]!
 23fe7da:	d2f9      	bcs.n	23fe7d0 <__hexnan+0xac>
 23fe7dc:	1b3b      	subs	r3, r7, r4
 23fe7de:	3e03      	subs	r6, #3
 23fe7e0:	3401      	adds	r4, #1
 23fe7e2:	2200      	movs	r2, #0
 23fe7e4:	f023 0303 	bic.w	r3, r3, #3
 23fe7e8:	3304      	adds	r3, #4
 23fe7ea:	42b4      	cmp	r4, r6
 23fe7ec:	bf88      	it	hi
 23fe7ee:	2304      	movhi	r3, #4
 23fe7f0:	4443      	add	r3, r8
 23fe7f2:	f843 2b04 	str.w	r2, [r3], #4
 23fe7f6:	429f      	cmp	r7, r3
 23fe7f8:	d2fb      	bcs.n	23fe7f2 <__hexnan+0xce>
 23fe7fa:	683b      	ldr	r3, [r7, #0]
 23fe7fc:	b91b      	cbnz	r3, 23fe806 <__hexnan+0xe2>
 23fe7fe:	4547      	cmp	r7, r8
 23fe800:	d126      	bne.n	23fe850 <__hexnan+0x12c>
 23fe802:	2301      	movs	r3, #1
 23fe804:	603b      	str	r3, [r7, #0]
 23fe806:	2005      	movs	r0, #5
 23fe808:	e025      	b.n	23fe856 <__hexnan+0x132>
 23fe80a:	3501      	adds	r5, #1
 23fe80c:	f10b 0b01 	add.w	fp, fp, #1
 23fe810:	2d08      	cmp	r5, #8
 23fe812:	dd05      	ble.n	23fe820 <__hexnan+0xfc>
 23fe814:	4544      	cmp	r4, r8
 23fe816:	d9c3      	bls.n	23fe7a0 <__hexnan+0x7c>
 23fe818:	2300      	movs	r3, #0
 23fe81a:	3c04      	subs	r4, #4
 23fe81c:	2501      	movs	r5, #1
 23fe81e:	6023      	str	r3, [r4, #0]
 23fe820:	6822      	ldr	r2, [r4, #0]
 23fe822:	f000 000f 	and.w	r0, r0, #15
 23fe826:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 23fe82a:	6022      	str	r2, [r4, #0]
 23fe82c:	e7b8      	b.n	23fe7a0 <__hexnan+0x7c>
 23fe82e:	2508      	movs	r5, #8
 23fe830:	e7b6      	b.n	23fe7a0 <__hexnan+0x7c>
 23fe832:	9b01      	ldr	r3, [sp, #4]
 23fe834:	2b00      	cmp	r3, #0
 23fe836:	d0e0      	beq.n	23fe7fa <__hexnan+0xd6>
 23fe838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fe83c:	f1c3 0320 	rsb	r3, r3, #32
 23fe840:	fa22 f303 	lsr.w	r3, r2, r3
 23fe844:	f856 2c04 	ldr.w	r2, [r6, #-4]
 23fe848:	401a      	ands	r2, r3
 23fe84a:	f846 2c04 	str.w	r2, [r6, #-4]
 23fe84e:	e7d4      	b.n	23fe7fa <__hexnan+0xd6>
 23fe850:	3f04      	subs	r7, #4
 23fe852:	e7d2      	b.n	23fe7fa <__hexnan+0xd6>
 23fe854:	2004      	movs	r0, #4
 23fe856:	b007      	add	sp, #28
 23fe858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fe85c <__retarget_lock_acquire_recursive>:
 23fe85c:	4770      	bx	lr

023fe85e <__retarget_lock_release>:
 23fe85e:	4770      	bx	lr

023fe860 <__retarget_lock_release_recursive>:
 23fe860:	4770      	bx	lr

023fe862 <__ascii_mbtowc>:
 23fe862:	b082      	sub	sp, #8
 23fe864:	b901      	cbnz	r1, 23fe868 <__ascii_mbtowc+0x6>
 23fe866:	a901      	add	r1, sp, #4
 23fe868:	b142      	cbz	r2, 23fe87c <__ascii_mbtowc+0x1a>
 23fe86a:	b14b      	cbz	r3, 23fe880 <__ascii_mbtowc+0x1e>
 23fe86c:	7813      	ldrb	r3, [r2, #0]
 23fe86e:	600b      	str	r3, [r1, #0]
 23fe870:	7812      	ldrb	r2, [r2, #0]
 23fe872:	1e10      	subs	r0, r2, #0
 23fe874:	bf18      	it	ne
 23fe876:	2001      	movne	r0, #1
 23fe878:	b002      	add	sp, #8
 23fe87a:	4770      	bx	lr
 23fe87c:	4610      	mov	r0, r2
 23fe87e:	e7fb      	b.n	23fe878 <__ascii_mbtowc+0x16>
 23fe880:	f06f 0001 	mvn.w	r0, #1
 23fe884:	e7f8      	b.n	23fe878 <__ascii_mbtowc+0x16>
	...

023fe888 <_Balloc>:
 23fe888:	b570      	push	{r4, r5, r6, lr}
 23fe88a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 23fe88c:	4604      	mov	r4, r0
 23fe88e:	460d      	mov	r5, r1
 23fe890:	b976      	cbnz	r6, 23fe8b0 <_Balloc+0x28>
 23fe892:	2010      	movs	r0, #16
 23fe894:	f7fb fab0 	bl	23f9df8 <malloc>
 23fe898:	4602      	mov	r2, r0
 23fe89a:	6260      	str	r0, [r4, #36]	; 0x24
 23fe89c:	b920      	cbnz	r0, 23fe8a8 <_Balloc+0x20>
 23fe89e:	4b18      	ldr	r3, [pc, #96]	; (23fe900 <_Balloc+0x78>)
 23fe8a0:	2166      	movs	r1, #102	; 0x66
 23fe8a2:	4818      	ldr	r0, [pc, #96]	; (23fe904 <_Balloc+0x7c>)
 23fe8a4:	f7fb fb26 	bl	23f9ef4 <__assert_func>
 23fe8a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 23fe8ac:	6006      	str	r6, [r0, #0]
 23fe8ae:	60c6      	str	r6, [r0, #12]
 23fe8b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 23fe8b2:	68f3      	ldr	r3, [r6, #12]
 23fe8b4:	b183      	cbz	r3, 23fe8d8 <_Balloc+0x50>
 23fe8b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fe8b8:	68db      	ldr	r3, [r3, #12]
 23fe8ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 23fe8be:	b9b8      	cbnz	r0, 23fe8f0 <_Balloc+0x68>
 23fe8c0:	2101      	movs	r1, #1
 23fe8c2:	4620      	mov	r0, r4
 23fe8c4:	fa01 f605 	lsl.w	r6, r1, r5
 23fe8c8:	1d72      	adds	r2, r6, #5
 23fe8ca:	0092      	lsls	r2, r2, #2
 23fe8cc:	f000 fca1 	bl	23ff212 <_calloc_r>
 23fe8d0:	b160      	cbz	r0, 23fe8ec <_Balloc+0x64>
 23fe8d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 23fe8d6:	e00e      	b.n	23fe8f6 <_Balloc+0x6e>
 23fe8d8:	2221      	movs	r2, #33	; 0x21
 23fe8da:	2104      	movs	r1, #4
 23fe8dc:	4620      	mov	r0, r4
 23fe8de:	f000 fc98 	bl	23ff212 <_calloc_r>
 23fe8e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fe8e4:	60f0      	str	r0, [r6, #12]
 23fe8e6:	68db      	ldr	r3, [r3, #12]
 23fe8e8:	2b00      	cmp	r3, #0
 23fe8ea:	d1e4      	bne.n	23fe8b6 <_Balloc+0x2e>
 23fe8ec:	2000      	movs	r0, #0
 23fe8ee:	bd70      	pop	{r4, r5, r6, pc}
 23fe8f0:	6802      	ldr	r2, [r0, #0]
 23fe8f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 23fe8f6:	2300      	movs	r3, #0
 23fe8f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 23fe8fc:	e7f7      	b.n	23fe8ee <_Balloc+0x66>
 23fe8fe:	bf00      	nop
 23fe900:	023ffc12 	.word	0x023ffc12
 23fe904:	023ffe68 	.word	0x023ffe68

023fe908 <_Bfree>:
 23fe908:	b570      	push	{r4, r5, r6, lr}
 23fe90a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 23fe90c:	4605      	mov	r5, r0
 23fe90e:	460c      	mov	r4, r1
 23fe910:	b976      	cbnz	r6, 23fe930 <_Bfree+0x28>
 23fe912:	2010      	movs	r0, #16
 23fe914:	f7fb fa70 	bl	23f9df8 <malloc>
 23fe918:	4602      	mov	r2, r0
 23fe91a:	6268      	str	r0, [r5, #36]	; 0x24
 23fe91c:	b920      	cbnz	r0, 23fe928 <_Bfree+0x20>
 23fe91e:	4b09      	ldr	r3, [pc, #36]	; (23fe944 <_Bfree+0x3c>)
 23fe920:	218a      	movs	r1, #138	; 0x8a
 23fe922:	4809      	ldr	r0, [pc, #36]	; (23fe948 <_Bfree+0x40>)
 23fe924:	f7fb fae6 	bl	23f9ef4 <__assert_func>
 23fe928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 23fe92c:	6006      	str	r6, [r0, #0]
 23fe92e:	60c6      	str	r6, [r0, #12]
 23fe930:	b13c      	cbz	r4, 23fe942 <_Bfree+0x3a>
 23fe932:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 23fe934:	6862      	ldr	r2, [r4, #4]
 23fe936:	68db      	ldr	r3, [r3, #12]
 23fe938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 23fe93c:	6021      	str	r1, [r4, #0]
 23fe93e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 23fe942:	bd70      	pop	{r4, r5, r6, pc}
 23fe944:	023ffc12 	.word	0x023ffc12
 23fe948:	023ffe68 	.word	0x023ffe68

023fe94c <__multadd>:
 23fe94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe950:	f101 0c14 	add.w	ip, r1, #20
 23fe954:	4607      	mov	r7, r0
 23fe956:	460c      	mov	r4, r1
 23fe958:	461e      	mov	r6, r3
 23fe95a:	690d      	ldr	r5, [r1, #16]
 23fe95c:	2000      	movs	r0, #0
 23fe95e:	f8dc 3000 	ldr.w	r3, [ip]
 23fe962:	3001      	adds	r0, #1
 23fe964:	b299      	uxth	r1, r3
 23fe966:	4285      	cmp	r5, r0
 23fe968:	fb02 6101 	mla	r1, r2, r1, r6
 23fe96c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 23fe970:	ea4f 4311 	mov.w	r3, r1, lsr #16
 23fe974:	b289      	uxth	r1, r1
 23fe976:	fb02 3306 	mla	r3, r2, r6, r3
 23fe97a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 23fe97e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 23fe982:	f84c 1b04 	str.w	r1, [ip], #4
 23fe986:	dcea      	bgt.n	23fe95e <__multadd+0x12>
 23fe988:	b30e      	cbz	r6, 23fe9ce <__multadd+0x82>
 23fe98a:	68a3      	ldr	r3, [r4, #8]
 23fe98c:	42ab      	cmp	r3, r5
 23fe98e:	dc19      	bgt.n	23fe9c4 <__multadd+0x78>
 23fe990:	6861      	ldr	r1, [r4, #4]
 23fe992:	4638      	mov	r0, r7
 23fe994:	3101      	adds	r1, #1
 23fe996:	f7ff ff77 	bl	23fe888 <_Balloc>
 23fe99a:	4680      	mov	r8, r0
 23fe99c:	b928      	cbnz	r0, 23fe9aa <__multadd+0x5e>
 23fe99e:	4602      	mov	r2, r0
 23fe9a0:	4b0c      	ldr	r3, [pc, #48]	; (23fe9d4 <__multadd+0x88>)
 23fe9a2:	21b5      	movs	r1, #181	; 0xb5
 23fe9a4:	480c      	ldr	r0, [pc, #48]	; (23fe9d8 <__multadd+0x8c>)
 23fe9a6:	f7fb faa5 	bl	23f9ef4 <__assert_func>
 23fe9aa:	6922      	ldr	r2, [r4, #16]
 23fe9ac:	f104 010c 	add.w	r1, r4, #12
 23fe9b0:	300c      	adds	r0, #12
 23fe9b2:	3202      	adds	r2, #2
 23fe9b4:	0092      	lsls	r2, r2, #2
 23fe9b6:	f7fe fc07 	bl	23fd1c8 <memcpy>
 23fe9ba:	4621      	mov	r1, r4
 23fe9bc:	4644      	mov	r4, r8
 23fe9be:	4638      	mov	r0, r7
 23fe9c0:	f7ff ffa2 	bl	23fe908 <_Bfree>
 23fe9c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 23fe9c8:	3501      	adds	r5, #1
 23fe9ca:	615e      	str	r6, [r3, #20]
 23fe9cc:	6125      	str	r5, [r4, #16]
 23fe9ce:	4620      	mov	r0, r4
 23fe9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe9d4:	023ffde1 	.word	0x023ffde1
 23fe9d8:	023ffe68 	.word	0x023ffe68

023fe9dc <__s2b>:
 23fe9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fe9e0:	4615      	mov	r5, r2
 23fe9e2:	461f      	mov	r7, r3
 23fe9e4:	2209      	movs	r2, #9
 23fe9e6:	3308      	adds	r3, #8
 23fe9e8:	460c      	mov	r4, r1
 23fe9ea:	4606      	mov	r6, r0
 23fe9ec:	2100      	movs	r1, #0
 23fe9ee:	fb93 f3f2 	sdiv	r3, r3, r2
 23fe9f2:	2201      	movs	r2, #1
 23fe9f4:	429a      	cmp	r2, r3
 23fe9f6:	db09      	blt.n	23fea0c <__s2b+0x30>
 23fe9f8:	4630      	mov	r0, r6
 23fe9fa:	f7ff ff45 	bl	23fe888 <_Balloc>
 23fe9fe:	b940      	cbnz	r0, 23fea12 <__s2b+0x36>
 23fea00:	4602      	mov	r2, r0
 23fea02:	4b19      	ldr	r3, [pc, #100]	; (23fea68 <__s2b+0x8c>)
 23fea04:	21ce      	movs	r1, #206	; 0xce
 23fea06:	4819      	ldr	r0, [pc, #100]	; (23fea6c <__s2b+0x90>)
 23fea08:	f7fb fa74 	bl	23f9ef4 <__assert_func>
 23fea0c:	0052      	lsls	r2, r2, #1
 23fea0e:	3101      	adds	r1, #1
 23fea10:	e7f0      	b.n	23fe9f4 <__s2b+0x18>
 23fea12:	9b08      	ldr	r3, [sp, #32]
 23fea14:	2d09      	cmp	r5, #9
 23fea16:	6143      	str	r3, [r0, #20]
 23fea18:	f04f 0301 	mov.w	r3, #1
 23fea1c:	6103      	str	r3, [r0, #16]
 23fea1e:	dd16      	ble.n	23fea4e <__s2b+0x72>
 23fea20:	f104 0909 	add.w	r9, r4, #9
 23fea24:	442c      	add	r4, r5
 23fea26:	46c8      	mov	r8, r9
 23fea28:	f818 3b01 	ldrb.w	r3, [r8], #1
 23fea2c:	4601      	mov	r1, r0
 23fea2e:	220a      	movs	r2, #10
 23fea30:	4630      	mov	r0, r6
 23fea32:	3b30      	subs	r3, #48	; 0x30
 23fea34:	f7ff ff8a 	bl	23fe94c <__multadd>
 23fea38:	45a0      	cmp	r8, r4
 23fea3a:	d1f5      	bne.n	23fea28 <__s2b+0x4c>
 23fea3c:	f1a5 0408 	sub.w	r4, r5, #8
 23fea40:	444c      	add	r4, r9
 23fea42:	1b2d      	subs	r5, r5, r4
 23fea44:	1963      	adds	r3, r4, r5
 23fea46:	42bb      	cmp	r3, r7
 23fea48:	db04      	blt.n	23fea54 <__s2b+0x78>
 23fea4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fea4e:	340a      	adds	r4, #10
 23fea50:	2509      	movs	r5, #9
 23fea52:	e7f6      	b.n	23fea42 <__s2b+0x66>
 23fea54:	f814 3b01 	ldrb.w	r3, [r4], #1
 23fea58:	4601      	mov	r1, r0
 23fea5a:	220a      	movs	r2, #10
 23fea5c:	4630      	mov	r0, r6
 23fea5e:	3b30      	subs	r3, #48	; 0x30
 23fea60:	f7ff ff74 	bl	23fe94c <__multadd>
 23fea64:	e7ee      	b.n	23fea44 <__s2b+0x68>
 23fea66:	bf00      	nop
 23fea68:	023ffde1 	.word	0x023ffde1
 23fea6c:	023ffe68 	.word	0x023ffe68

023fea70 <__hi0bits>:
 23fea70:	0c03      	lsrs	r3, r0, #16
 23fea72:	041b      	lsls	r3, r3, #16
 23fea74:	b9d3      	cbnz	r3, 23feaac <__hi0bits+0x3c>
 23fea76:	0400      	lsls	r0, r0, #16
 23fea78:	2310      	movs	r3, #16
 23fea7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 23fea7e:	bf04      	itt	eq
 23fea80:	0200      	lsleq	r0, r0, #8
 23fea82:	3308      	addeq	r3, #8
 23fea84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 23fea88:	bf04      	itt	eq
 23fea8a:	0100      	lsleq	r0, r0, #4
 23fea8c:	3304      	addeq	r3, #4
 23fea8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 23fea92:	bf04      	itt	eq
 23fea94:	0080      	lsleq	r0, r0, #2
 23fea96:	3302      	addeq	r3, #2
 23fea98:	2800      	cmp	r0, #0
 23fea9a:	db05      	blt.n	23feaa8 <__hi0bits+0x38>
 23fea9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 23feaa0:	f103 0301 	add.w	r3, r3, #1
 23feaa4:	bf08      	it	eq
 23feaa6:	2320      	moveq	r3, #32
 23feaa8:	4618      	mov	r0, r3
 23feaaa:	4770      	bx	lr
 23feaac:	2300      	movs	r3, #0
 23feaae:	e7e4      	b.n	23fea7a <__hi0bits+0xa>

023feab0 <__lo0bits>:
 23feab0:	6803      	ldr	r3, [r0, #0]
 23feab2:	4601      	mov	r1, r0
 23feab4:	f013 0207 	ands.w	r2, r3, #7
 23feab8:	d00b      	beq.n	23fead2 <__lo0bits+0x22>
 23feaba:	07da      	lsls	r2, r3, #31
 23feabc:	d423      	bmi.n	23feb06 <__lo0bits+0x56>
 23feabe:	0798      	lsls	r0, r3, #30
 23feac0:	bf47      	ittee	mi
 23feac2:	085b      	lsrmi	r3, r3, #1
 23feac4:	2001      	movmi	r0, #1
 23feac6:	089b      	lsrpl	r3, r3, #2
 23feac8:	2002      	movpl	r0, #2
 23feaca:	bf4c      	ite	mi
 23feacc:	600b      	strmi	r3, [r1, #0]
 23feace:	600b      	strpl	r3, [r1, #0]
 23fead0:	4770      	bx	lr
 23fead2:	b298      	uxth	r0, r3
 23fead4:	b9a8      	cbnz	r0, 23feb02 <__lo0bits+0x52>
 23fead6:	0c1b      	lsrs	r3, r3, #16
 23fead8:	2010      	movs	r0, #16
 23feada:	b2da      	uxtb	r2, r3
 23feadc:	b90a      	cbnz	r2, 23feae2 <__lo0bits+0x32>
 23feade:	3008      	adds	r0, #8
 23feae0:	0a1b      	lsrs	r3, r3, #8
 23feae2:	071a      	lsls	r2, r3, #28
 23feae4:	bf04      	itt	eq
 23feae6:	091b      	lsreq	r3, r3, #4
 23feae8:	3004      	addeq	r0, #4
 23feaea:	079a      	lsls	r2, r3, #30
 23feaec:	bf04      	itt	eq
 23feaee:	089b      	lsreq	r3, r3, #2
 23feaf0:	3002      	addeq	r0, #2
 23feaf2:	07da      	lsls	r2, r3, #31
 23feaf4:	d403      	bmi.n	23feafe <__lo0bits+0x4e>
 23feaf6:	085b      	lsrs	r3, r3, #1
 23feaf8:	f100 0001 	add.w	r0, r0, #1
 23feafc:	d005      	beq.n	23feb0a <__lo0bits+0x5a>
 23feafe:	600b      	str	r3, [r1, #0]
 23feb00:	4770      	bx	lr
 23feb02:	4610      	mov	r0, r2
 23feb04:	e7e9      	b.n	23feada <__lo0bits+0x2a>
 23feb06:	2000      	movs	r0, #0
 23feb08:	4770      	bx	lr
 23feb0a:	2020      	movs	r0, #32
 23feb0c:	4770      	bx	lr
	...

023feb10 <__i2b>:
 23feb10:	b510      	push	{r4, lr}
 23feb12:	460c      	mov	r4, r1
 23feb14:	2101      	movs	r1, #1
 23feb16:	f7ff feb7 	bl	23fe888 <_Balloc>
 23feb1a:	4602      	mov	r2, r0
 23feb1c:	b928      	cbnz	r0, 23feb2a <__i2b+0x1a>
 23feb1e:	4b05      	ldr	r3, [pc, #20]	; (23feb34 <__i2b+0x24>)
 23feb20:	f44f 71a0 	mov.w	r1, #320	; 0x140
 23feb24:	4804      	ldr	r0, [pc, #16]	; (23feb38 <__i2b+0x28>)
 23feb26:	f7fb f9e5 	bl	23f9ef4 <__assert_func>
 23feb2a:	2301      	movs	r3, #1
 23feb2c:	6144      	str	r4, [r0, #20]
 23feb2e:	6103      	str	r3, [r0, #16]
 23feb30:	bd10      	pop	{r4, pc}
 23feb32:	bf00      	nop
 23feb34:	023ffde1 	.word	0x023ffde1
 23feb38:	023ffe68 	.word	0x023ffe68

023feb3c <__multiply>:
 23feb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23feb40:	4691      	mov	r9, r2
 23feb42:	690a      	ldr	r2, [r1, #16]
 23feb44:	460c      	mov	r4, r1
 23feb46:	b085      	sub	sp, #20
 23feb48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 23feb4c:	429a      	cmp	r2, r3
 23feb4e:	bfbe      	ittt	lt
 23feb50:	460b      	movlt	r3, r1
 23feb52:	464c      	movlt	r4, r9
 23feb54:	4699      	movlt	r9, r3
 23feb56:	6927      	ldr	r7, [r4, #16]
 23feb58:	68a3      	ldr	r3, [r4, #8]
 23feb5a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 23feb5e:	6861      	ldr	r1, [r4, #4]
 23feb60:	eb07 060a 	add.w	r6, r7, sl
 23feb64:	42b3      	cmp	r3, r6
 23feb66:	bfb8      	it	lt
 23feb68:	3101      	addlt	r1, #1
 23feb6a:	f7ff fe8d 	bl	23fe888 <_Balloc>
 23feb6e:	b930      	cbnz	r0, 23feb7e <__multiply+0x42>
 23feb70:	4602      	mov	r2, r0
 23feb72:	4b44      	ldr	r3, [pc, #272]	; (23fec84 <__multiply+0x148>)
 23feb74:	f240 115d 	movw	r1, #349	; 0x15d
 23feb78:	4843      	ldr	r0, [pc, #268]	; (23fec88 <__multiply+0x14c>)
 23feb7a:	f7fb f9bb 	bl	23f9ef4 <__assert_func>
 23feb7e:	f100 0514 	add.w	r5, r0, #20
 23feb82:	2200      	movs	r2, #0
 23feb84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 23feb88:	462b      	mov	r3, r5
 23feb8a:	4543      	cmp	r3, r8
 23feb8c:	d321      	bcc.n	23febd2 <__multiply+0x96>
 23feb8e:	f104 0314 	add.w	r3, r4, #20
 23feb92:	f104 0115 	add.w	r1, r4, #21
 23feb96:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 23feb9a:	f109 0314 	add.w	r3, r9, #20
 23feb9e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 23feba2:	9202      	str	r2, [sp, #8]
 23feba4:	1b3a      	subs	r2, r7, r4
 23feba6:	3a15      	subs	r2, #21
 23feba8:	f022 0203 	bic.w	r2, r2, #3
 23febac:	3204      	adds	r2, #4
 23febae:	428f      	cmp	r7, r1
 23febb0:	bf38      	it	cc
 23febb2:	2204      	movcc	r2, #4
 23febb4:	9201      	str	r2, [sp, #4]
 23febb6:	9a02      	ldr	r2, [sp, #8]
 23febb8:	9303      	str	r3, [sp, #12]
 23febba:	429a      	cmp	r2, r3
 23febbc:	d80c      	bhi.n	23febd8 <__multiply+0x9c>
 23febbe:	2e00      	cmp	r6, #0
 23febc0:	dd03      	ble.n	23febca <__multiply+0x8e>
 23febc2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 23febc6:	2b00      	cmp	r3, #0
 23febc8:	d05a      	beq.n	23fec80 <__multiply+0x144>
 23febca:	6106      	str	r6, [r0, #16]
 23febcc:	b005      	add	sp, #20
 23febce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23febd2:	f843 2b04 	str.w	r2, [r3], #4
 23febd6:	e7d8      	b.n	23feb8a <__multiply+0x4e>
 23febd8:	f8b3 a000 	ldrh.w	sl, [r3]
 23febdc:	f1ba 0f00 	cmp.w	sl, #0
 23febe0:	d024      	beq.n	23fec2c <__multiply+0xf0>
 23febe2:	f104 0e14 	add.w	lr, r4, #20
 23febe6:	46a9      	mov	r9, r5
 23febe8:	f04f 0c00 	mov.w	ip, #0
 23febec:	f85e 2b04 	ldr.w	r2, [lr], #4
 23febf0:	f8d9 1000 	ldr.w	r1, [r9]
 23febf4:	fa1f fb82 	uxth.w	fp, r2
 23febf8:	4577      	cmp	r7, lr
 23febfa:	b289      	uxth	r1, r1
 23febfc:	fb0a 110b 	mla	r1, sl, fp, r1
 23fec00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 23fec04:	f8d9 2000 	ldr.w	r2, [r9]
 23fec08:	4461      	add	r1, ip
 23fec0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 23fec0e:	fb0a c20b 	mla	r2, sl, fp, ip
 23fec12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 23fec16:	b289      	uxth	r1, r1
 23fec18:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 23fec1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23fec20:	f849 1b04 	str.w	r1, [r9], #4
 23fec24:	d8e2      	bhi.n	23febec <__multiply+0xb0>
 23fec26:	9a01      	ldr	r2, [sp, #4]
 23fec28:	f845 c002 	str.w	ip, [r5, r2]
 23fec2c:	9a03      	ldr	r2, [sp, #12]
 23fec2e:	3304      	adds	r3, #4
 23fec30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 23fec34:	f1b9 0f00 	cmp.w	r9, #0
 23fec38:	d020      	beq.n	23fec7c <__multiply+0x140>
 23fec3a:	6829      	ldr	r1, [r5, #0]
 23fec3c:	f104 0c14 	add.w	ip, r4, #20
 23fec40:	46ae      	mov	lr, r5
 23fec42:	f04f 0a00 	mov.w	sl, #0
 23fec46:	f8bc b000 	ldrh.w	fp, [ip]
 23fec4a:	b289      	uxth	r1, r1
 23fec4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 23fec50:	fb09 220b 	mla	r2, r9, fp, r2
 23fec54:	4492      	add	sl, r2
 23fec56:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 23fec5a:	f84e 1b04 	str.w	r1, [lr], #4
 23fec5e:	f85c 2b04 	ldr.w	r2, [ip], #4
 23fec62:	f8be 1000 	ldrh.w	r1, [lr]
 23fec66:	0c12      	lsrs	r2, r2, #16
 23fec68:	4567      	cmp	r7, ip
 23fec6a:	fb09 1102 	mla	r1, r9, r2, r1
 23fec6e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 23fec72:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 23fec76:	d8e6      	bhi.n	23fec46 <__multiply+0x10a>
 23fec78:	9a01      	ldr	r2, [sp, #4]
 23fec7a:	50a9      	str	r1, [r5, r2]
 23fec7c:	3504      	adds	r5, #4
 23fec7e:	e79a      	b.n	23febb6 <__multiply+0x7a>
 23fec80:	3e01      	subs	r6, #1
 23fec82:	e79c      	b.n	23febbe <__multiply+0x82>
 23fec84:	023ffde1 	.word	0x023ffde1
 23fec88:	023ffe68 	.word	0x023ffe68

023fec8c <__pow5mult>:
 23fec8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fec90:	4615      	mov	r5, r2
 23fec92:	f012 0203 	ands.w	r2, r2, #3
 23fec96:	4606      	mov	r6, r0
 23fec98:	460f      	mov	r7, r1
 23fec9a:	d007      	beq.n	23fecac <__pow5mult+0x20>
 23fec9c:	3a01      	subs	r2, #1
 23fec9e:	4c25      	ldr	r4, [pc, #148]	; (23fed34 <__pow5mult+0xa8>)
 23feca0:	2300      	movs	r3, #0
 23feca2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 23feca6:	f7ff fe51 	bl	23fe94c <__multadd>
 23fecaa:	4607      	mov	r7, r0
 23fecac:	10ad      	asrs	r5, r5, #2
 23fecae:	d03d      	beq.n	23fed2c <__pow5mult+0xa0>
 23fecb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 23fecb2:	b97c      	cbnz	r4, 23fecd4 <__pow5mult+0x48>
 23fecb4:	2010      	movs	r0, #16
 23fecb6:	f7fb f89f 	bl	23f9df8 <malloc>
 23fecba:	4602      	mov	r2, r0
 23fecbc:	6270      	str	r0, [r6, #36]	; 0x24
 23fecbe:	b928      	cbnz	r0, 23feccc <__pow5mult+0x40>
 23fecc0:	4b1d      	ldr	r3, [pc, #116]	; (23fed38 <__pow5mult+0xac>)
 23fecc2:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 23fecc6:	481d      	ldr	r0, [pc, #116]	; (23fed3c <__pow5mult+0xb0>)
 23fecc8:	f7fb f914 	bl	23f9ef4 <__assert_func>
 23feccc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fecd0:	6004      	str	r4, [r0, #0]
 23fecd2:	60c4      	str	r4, [r0, #12]
 23fecd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 23fecd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 23fecdc:	b94c      	cbnz	r4, 23fecf2 <__pow5mult+0x66>
 23fecde:	f240 2171 	movw	r1, #625	; 0x271
 23fece2:	4630      	mov	r0, r6
 23fece4:	f7ff ff14 	bl	23feb10 <__i2b>
 23fece8:	2300      	movs	r3, #0
 23fecea:	4604      	mov	r4, r0
 23fecec:	f8c8 0008 	str.w	r0, [r8, #8]
 23fecf0:	6003      	str	r3, [r0, #0]
 23fecf2:	f04f 0900 	mov.w	r9, #0
 23fecf6:	07eb      	lsls	r3, r5, #31
 23fecf8:	d50a      	bpl.n	23fed10 <__pow5mult+0x84>
 23fecfa:	4639      	mov	r1, r7
 23fecfc:	4622      	mov	r2, r4
 23fecfe:	4630      	mov	r0, r6
 23fed00:	f7ff ff1c 	bl	23feb3c <__multiply>
 23fed04:	4680      	mov	r8, r0
 23fed06:	4639      	mov	r1, r7
 23fed08:	4630      	mov	r0, r6
 23fed0a:	4647      	mov	r7, r8
 23fed0c:	f7ff fdfc 	bl	23fe908 <_Bfree>
 23fed10:	106d      	asrs	r5, r5, #1
 23fed12:	d00b      	beq.n	23fed2c <__pow5mult+0xa0>
 23fed14:	6820      	ldr	r0, [r4, #0]
 23fed16:	b938      	cbnz	r0, 23fed28 <__pow5mult+0x9c>
 23fed18:	4622      	mov	r2, r4
 23fed1a:	4621      	mov	r1, r4
 23fed1c:	4630      	mov	r0, r6
 23fed1e:	f7ff ff0d 	bl	23feb3c <__multiply>
 23fed22:	6020      	str	r0, [r4, #0]
 23fed24:	f8c0 9000 	str.w	r9, [r0]
 23fed28:	4604      	mov	r4, r0
 23fed2a:	e7e4      	b.n	23fecf6 <__pow5mult+0x6a>
 23fed2c:	4638      	mov	r0, r7
 23fed2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fed32:	bf00      	nop
 23fed34:	023fffb8 	.word	0x023fffb8
 23fed38:	023ffc12 	.word	0x023ffc12
 23fed3c:	023ffe68 	.word	0x023ffe68

023fed40 <__lshift>:
 23fed40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fed44:	460c      	mov	r4, r1
 23fed46:	4607      	mov	r7, r0
 23fed48:	4691      	mov	r9, r2
 23fed4a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 23fed4e:	6923      	ldr	r3, [r4, #16]
 23fed50:	6849      	ldr	r1, [r1, #4]
 23fed52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 23fed56:	68a3      	ldr	r3, [r4, #8]
 23fed58:	f108 0601 	add.w	r6, r8, #1
 23fed5c:	42b3      	cmp	r3, r6
 23fed5e:	db0b      	blt.n	23fed78 <__lshift+0x38>
 23fed60:	4638      	mov	r0, r7
 23fed62:	f7ff fd91 	bl	23fe888 <_Balloc>
 23fed66:	4605      	mov	r5, r0
 23fed68:	b948      	cbnz	r0, 23fed7e <__lshift+0x3e>
 23fed6a:	4602      	mov	r2, r0
 23fed6c:	4b2a      	ldr	r3, [pc, #168]	; (23fee18 <__lshift+0xd8>)
 23fed6e:	f240 11d9 	movw	r1, #473	; 0x1d9
 23fed72:	482a      	ldr	r0, [pc, #168]	; (23fee1c <__lshift+0xdc>)
 23fed74:	f7fb f8be 	bl	23f9ef4 <__assert_func>
 23fed78:	3101      	adds	r1, #1
 23fed7a:	005b      	lsls	r3, r3, #1
 23fed7c:	e7ee      	b.n	23fed5c <__lshift+0x1c>
 23fed7e:	2300      	movs	r3, #0
 23fed80:	f100 0114 	add.w	r1, r0, #20
 23fed84:	f100 0210 	add.w	r2, r0, #16
 23fed88:	4618      	mov	r0, r3
 23fed8a:	4553      	cmp	r3, sl
 23fed8c:	db37      	blt.n	23fedfe <__lshift+0xbe>
 23fed8e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 23fed92:	f104 0314 	add.w	r3, r4, #20
 23fed96:	6920      	ldr	r0, [r4, #16]
 23fed98:	f019 091f 	ands.w	r9, r9, #31
 23fed9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 23feda0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 23feda4:	d02f      	beq.n	23fee06 <__lshift+0xc6>
 23feda6:	f1c9 0e20 	rsb	lr, r9, #32
 23fedaa:	468a      	mov	sl, r1
 23fedac:	f04f 0c00 	mov.w	ip, #0
 23fedb0:	681a      	ldr	r2, [r3, #0]
 23fedb2:	fa02 f209 	lsl.w	r2, r2, r9
 23fedb6:	ea42 020c 	orr.w	r2, r2, ip
 23fedba:	f84a 2b04 	str.w	r2, [sl], #4
 23fedbe:	f853 2b04 	ldr.w	r2, [r3], #4
 23fedc2:	4298      	cmp	r0, r3
 23fedc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 23fedc8:	d8f2      	bhi.n	23fedb0 <__lshift+0x70>
 23fedca:	1b03      	subs	r3, r0, r4
 23fedcc:	f104 0215 	add.w	r2, r4, #21
 23fedd0:	3b15      	subs	r3, #21
 23fedd2:	f023 0303 	bic.w	r3, r3, #3
 23fedd6:	3304      	adds	r3, #4
 23fedd8:	4290      	cmp	r0, r2
 23fedda:	bf38      	it	cc
 23feddc:	2304      	movcc	r3, #4
 23fedde:	f841 c003 	str.w	ip, [r1, r3]
 23fede2:	f1bc 0f00 	cmp.w	ip, #0
 23fede6:	d001      	beq.n	23fedec <__lshift+0xac>
 23fede8:	f108 0602 	add.w	r6, r8, #2
 23fedec:	3e01      	subs	r6, #1
 23fedee:	4638      	mov	r0, r7
 23fedf0:	4621      	mov	r1, r4
 23fedf2:	612e      	str	r6, [r5, #16]
 23fedf4:	f7ff fd88 	bl	23fe908 <_Bfree>
 23fedf8:	4628      	mov	r0, r5
 23fedfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fedfe:	3301      	adds	r3, #1
 23fee00:	f842 0f04 	str.w	r0, [r2, #4]!
 23fee04:	e7c1      	b.n	23fed8a <__lshift+0x4a>
 23fee06:	3904      	subs	r1, #4
 23fee08:	f853 2b04 	ldr.w	r2, [r3], #4
 23fee0c:	4298      	cmp	r0, r3
 23fee0e:	f841 2f04 	str.w	r2, [r1, #4]!
 23fee12:	d8f9      	bhi.n	23fee08 <__lshift+0xc8>
 23fee14:	e7ea      	b.n	23fedec <__lshift+0xac>
 23fee16:	bf00      	nop
 23fee18:	023ffde1 	.word	0x023ffde1
 23fee1c:	023ffe68 	.word	0x023ffe68

023fee20 <__mcmp>:
 23fee20:	6902      	ldr	r2, [r0, #16]
 23fee22:	b530      	push	{r4, r5, lr}
 23fee24:	690c      	ldr	r4, [r1, #16]
 23fee26:	1b12      	subs	r2, r2, r4
 23fee28:	d10e      	bne.n	23fee48 <__mcmp+0x28>
 23fee2a:	f100 0314 	add.w	r3, r0, #20
 23fee2e:	3114      	adds	r1, #20
 23fee30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 23fee34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 23fee38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 23fee3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 23fee40:	42a5      	cmp	r5, r4
 23fee42:	d003      	beq.n	23fee4c <__mcmp+0x2c>
 23fee44:	d305      	bcc.n	23fee52 <__mcmp+0x32>
 23fee46:	2201      	movs	r2, #1
 23fee48:	4610      	mov	r0, r2
 23fee4a:	bd30      	pop	{r4, r5, pc}
 23fee4c:	4283      	cmp	r3, r0
 23fee4e:	d3f3      	bcc.n	23fee38 <__mcmp+0x18>
 23fee50:	e7fa      	b.n	23fee48 <__mcmp+0x28>
 23fee52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fee56:	e7f7      	b.n	23fee48 <__mcmp+0x28>

023fee58 <__mdiff>:
 23fee58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fee5c:	460c      	mov	r4, r1
 23fee5e:	4606      	mov	r6, r0
 23fee60:	4611      	mov	r1, r2
 23fee62:	4692      	mov	sl, r2
 23fee64:	4620      	mov	r0, r4
 23fee66:	f7ff ffdb 	bl	23fee20 <__mcmp>
 23fee6a:	1e05      	subs	r5, r0, #0
 23fee6c:	d110      	bne.n	23fee90 <__mdiff+0x38>
 23fee6e:	4629      	mov	r1, r5
 23fee70:	4630      	mov	r0, r6
 23fee72:	f7ff fd09 	bl	23fe888 <_Balloc>
 23fee76:	b930      	cbnz	r0, 23fee86 <__mdiff+0x2e>
 23fee78:	4b3d      	ldr	r3, [pc, #244]	; (23fef70 <__mdiff+0x118>)
 23fee7a:	4602      	mov	r2, r0
 23fee7c:	f240 2132 	movw	r1, #562	; 0x232
 23fee80:	483c      	ldr	r0, [pc, #240]	; (23fef74 <__mdiff+0x11c>)
 23fee82:	f7fb f837 	bl	23f9ef4 <__assert_func>
 23fee86:	2301      	movs	r3, #1
 23fee88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 23fee8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fee90:	bfa4      	itt	ge
 23fee92:	4653      	movge	r3, sl
 23fee94:	46a2      	movge	sl, r4
 23fee96:	4630      	mov	r0, r6
 23fee98:	bfa8      	it	ge
 23fee9a:	2500      	movge	r5, #0
 23fee9c:	f8da 1004 	ldr.w	r1, [sl, #4]
 23feea0:	bfac      	ite	ge
 23feea2:	461c      	movge	r4, r3
 23feea4:	2501      	movlt	r5, #1
 23feea6:	f7ff fcef 	bl	23fe888 <_Balloc>
 23feeaa:	b920      	cbnz	r0, 23feeb6 <__mdiff+0x5e>
 23feeac:	4b30      	ldr	r3, [pc, #192]	; (23fef70 <__mdiff+0x118>)
 23feeae:	4602      	mov	r2, r0
 23feeb0:	f44f 7110 	mov.w	r1, #576	; 0x240
 23feeb4:	e7e4      	b.n	23fee80 <__mdiff+0x28>
 23feeb6:	f8da 7010 	ldr.w	r7, [sl, #16]
 23feeba:	f104 0914 	add.w	r9, r4, #20
 23feebe:	6926      	ldr	r6, [r4, #16]
 23feec0:	f100 0814 	add.w	r8, r0, #20
 23feec4:	60c5      	str	r5, [r0, #12]
 23feec6:	f10a 0514 	add.w	r5, sl, #20
 23feeca:	f10a 0210 	add.w	r2, sl, #16
 23feece:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 23feed2:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 23feed6:	46c2      	mov	sl, r8
 23feed8:	f04f 0c00 	mov.w	ip, #0
 23feedc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 23feee0:	f859 3b04 	ldr.w	r3, [r9], #4
 23feee4:	fa1f f18b 	uxth.w	r1, fp
 23feee8:	454e      	cmp	r6, r9
 23feeea:	448c      	add	ip, r1
 23feeec:	b299      	uxth	r1, r3
 23feeee:	ea4f 4313 	mov.w	r3, r3, lsr #16
 23feef2:	ebac 0101 	sub.w	r1, ip, r1
 23feef6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 23feefa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 23feefe:	b289      	uxth	r1, r1
 23fef00:	ea4f 4c23 	mov.w	ip, r3, asr #16
 23fef04:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 23fef08:	f84a 3b04 	str.w	r3, [sl], #4
 23fef0c:	d8e6      	bhi.n	23feedc <__mdiff+0x84>
 23fef0e:	1b33      	subs	r3, r6, r4
 23fef10:	3415      	adds	r4, #21
 23fef12:	3b15      	subs	r3, #21
 23fef14:	f023 0303 	bic.w	r3, r3, #3
 23fef18:	3304      	adds	r3, #4
 23fef1a:	42a6      	cmp	r6, r4
 23fef1c:	bf38      	it	cc
 23fef1e:	2304      	movcc	r3, #4
 23fef20:	441d      	add	r5, r3
 23fef22:	4443      	add	r3, r8
 23fef24:	462c      	mov	r4, r5
 23fef26:	461e      	mov	r6, r3
 23fef28:	4574      	cmp	r4, lr
 23fef2a:	d30e      	bcc.n	23fef4a <__mdiff+0xf2>
 23fef2c:	f10e 0203 	add.w	r2, lr, #3
 23fef30:	1b52      	subs	r2, r2, r5
 23fef32:	3d03      	subs	r5, #3
 23fef34:	f022 0203 	bic.w	r2, r2, #3
 23fef38:	45ae      	cmp	lr, r5
 23fef3a:	bf38      	it	cc
 23fef3c:	2200      	movcc	r2, #0
 23fef3e:	441a      	add	r2, r3
 23fef40:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 23fef44:	b18b      	cbz	r3, 23fef6a <__mdiff+0x112>
 23fef46:	6107      	str	r7, [r0, #16]
 23fef48:	e7a0      	b.n	23fee8c <__mdiff+0x34>
 23fef4a:	f854 8b04 	ldr.w	r8, [r4], #4
 23fef4e:	fa1f f288 	uxth.w	r2, r8
 23fef52:	4462      	add	r2, ip
 23fef54:	1411      	asrs	r1, r2, #16
 23fef56:	b292      	uxth	r2, r2
 23fef58:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 23fef5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 23fef60:	ea4f 4c21 	mov.w	ip, r1, asr #16
 23fef64:	f846 2b04 	str.w	r2, [r6], #4
 23fef68:	e7de      	b.n	23fef28 <__mdiff+0xd0>
 23fef6a:	3f01      	subs	r7, #1
 23fef6c:	e7e8      	b.n	23fef40 <__mdiff+0xe8>
 23fef6e:	bf00      	nop
 23fef70:	023ffde1 	.word	0x023ffde1
 23fef74:	023ffe68 	.word	0x023ffe68

023fef78 <__ulp>:
 23fef78:	b082      	sub	sp, #8
 23fef7a:	4913      	ldr	r1, [pc, #76]	; (23fefc8 <__ulp+0x50>)
 23fef7c:	ed8d 0b00 	vstr	d0, [sp]
 23fef80:	9b01      	ldr	r3, [sp, #4]
 23fef82:	4019      	ands	r1, r3
 23fef84:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 23fef88:	2900      	cmp	r1, #0
 23fef8a:	dd05      	ble.n	23fef98 <__ulp+0x20>
 23fef8c:	2200      	movs	r2, #0
 23fef8e:	460b      	mov	r3, r1
 23fef90:	ec43 2b10 	vmov	d0, r2, r3
 23fef94:	b002      	add	sp, #8
 23fef96:	4770      	bx	lr
 23fef98:	4249      	negs	r1, r1
 23fef9a:	2200      	movs	r2, #0
 23fef9c:	2300      	movs	r3, #0
 23fef9e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 23fefa2:	ea4f 5021 	mov.w	r0, r1, asr #20
 23fefa6:	da04      	bge.n	23fefb2 <__ulp+0x3a>
 23fefa8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 23fefac:	fa41 f300 	asr.w	r3, r1, r0
 23fefb0:	e7ee      	b.n	23fef90 <__ulp+0x18>
 23fefb2:	f1a0 0114 	sub.w	r1, r0, #20
 23fefb6:	291e      	cmp	r1, #30
 23fefb8:	bfd6      	itet	le
 23fefba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 23fefbe:	2101      	movgt	r1, #1
 23fefc0:	fa20 f101 	lsrle.w	r1, r0, r1
 23fefc4:	460a      	mov	r2, r1
 23fefc6:	e7e3      	b.n	23fef90 <__ulp+0x18>
 23fefc8:	7ff00000 	.word	0x7ff00000

023fefcc <__b2d>:
 23fefcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fefce:	6905      	ldr	r5, [r0, #16]
 23fefd0:	f100 0714 	add.w	r7, r0, #20
 23fefd4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 23fefd8:	f855 4c04 	ldr.w	r4, [r5, #-4]
 23fefdc:	1f2e      	subs	r6, r5, #4
 23fefde:	4620      	mov	r0, r4
 23fefe0:	f7ff fd46 	bl	23fea70 <__hi0bits>
 23fefe4:	f1c0 0320 	rsb	r3, r0, #32
 23fefe8:	280a      	cmp	r0, #10
 23fefea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 23ff068 <__b2d+0x9c>
 23fefee:	600b      	str	r3, [r1, #0]
 23feff0:	dc15      	bgt.n	23ff01e <__b2d+0x52>
 23feff2:	f1c0 0e0b 	rsb	lr, r0, #11
 23feff6:	42b7      	cmp	r7, r6
 23feff8:	f100 0015 	add.w	r0, r0, #21
 23feffc:	fa24 f10e 	lsr.w	r1, r4, lr
 23ff000:	fa04 f000 	lsl.w	r0, r4, r0
 23ff004:	ea41 030c 	orr.w	r3, r1, ip
 23ff008:	bf34      	ite	cc
 23ff00a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 23ff00e:	2100      	movcs	r1, #0
 23ff010:	fa21 f10e 	lsr.w	r1, r1, lr
 23ff014:	ea40 0201 	orr.w	r2, r0, r1
 23ff018:	ec43 2b10 	vmov	d0, r2, r3
 23ff01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23ff01e:	42b7      	cmp	r7, r6
 23ff020:	bf3a      	itte	cc
 23ff022:	f1a5 0608 	subcc.w	r6, r5, #8
 23ff026:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 23ff02a:	2100      	movcs	r1, #0
 23ff02c:	380b      	subs	r0, #11
 23ff02e:	d017      	beq.n	23ff060 <__b2d+0x94>
 23ff030:	f1c0 0c20 	rsb	ip, r0, #32
 23ff034:	fa04 f500 	lsl.w	r5, r4, r0
 23ff038:	42be      	cmp	r6, r7
 23ff03a:	fa01 f000 	lsl.w	r0, r1, r0
 23ff03e:	fa21 f40c 	lsr.w	r4, r1, ip
 23ff042:	ea45 0504 	orr.w	r5, r5, r4
 23ff046:	bf8c      	ite	hi
 23ff048:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 23ff04c:	2400      	movls	r4, #0
 23ff04e:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 23ff052:	fa24 f40c 	lsr.w	r4, r4, ip
 23ff056:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 23ff05a:	ea40 0204 	orr.w	r2, r0, r4
 23ff05e:	e7db      	b.n	23ff018 <__b2d+0x4c>
 23ff060:	ea44 030c 	orr.w	r3, r4, ip
 23ff064:	460a      	mov	r2, r1
 23ff066:	e7d7      	b.n	23ff018 <__b2d+0x4c>
 23ff068:	3ff00000 	.word	0x3ff00000

023ff06c <__d2b>:
 23ff06c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23ff070:	4689      	mov	r9, r1
 23ff072:	2101      	movs	r1, #1
 23ff074:	4690      	mov	r8, r2
 23ff076:	ec57 6b10 	vmov	r6, r7, d0
 23ff07a:	f7ff fc05 	bl	23fe888 <_Balloc>
 23ff07e:	4604      	mov	r4, r0
 23ff080:	b930      	cbnz	r0, 23ff090 <__d2b+0x24>
 23ff082:	4602      	mov	r2, r0
 23ff084:	4b25      	ldr	r3, [pc, #148]	; (23ff11c <__d2b+0xb0>)
 23ff086:	f240 310a 	movw	r1, #778	; 0x30a
 23ff08a:	4825      	ldr	r0, [pc, #148]	; (23ff120 <__d2b+0xb4>)
 23ff08c:	f7fa ff32 	bl	23f9ef4 <__assert_func>
 23ff090:	f3c7 550a 	ubfx	r5, r7, #20, #11
 23ff094:	f3c7 0313 	ubfx	r3, r7, #0, #20
 23ff098:	bb35      	cbnz	r5, 23ff0e8 <__d2b+0x7c>
 23ff09a:	2e00      	cmp	r6, #0
 23ff09c:	9301      	str	r3, [sp, #4]
 23ff09e:	d028      	beq.n	23ff0f2 <__d2b+0x86>
 23ff0a0:	4668      	mov	r0, sp
 23ff0a2:	9600      	str	r6, [sp, #0]
 23ff0a4:	f7ff fd04 	bl	23feab0 <__lo0bits>
 23ff0a8:	9900      	ldr	r1, [sp, #0]
 23ff0aa:	b300      	cbz	r0, 23ff0ee <__d2b+0x82>
 23ff0ac:	9a01      	ldr	r2, [sp, #4]
 23ff0ae:	f1c0 0320 	rsb	r3, r0, #32
 23ff0b2:	fa02 f303 	lsl.w	r3, r2, r3
 23ff0b6:	40c2      	lsrs	r2, r0
 23ff0b8:	430b      	orrs	r3, r1
 23ff0ba:	9201      	str	r2, [sp, #4]
 23ff0bc:	6163      	str	r3, [r4, #20]
 23ff0be:	9b01      	ldr	r3, [sp, #4]
 23ff0c0:	2b00      	cmp	r3, #0
 23ff0c2:	61a3      	str	r3, [r4, #24]
 23ff0c4:	bf14      	ite	ne
 23ff0c6:	2202      	movne	r2, #2
 23ff0c8:	2201      	moveq	r2, #1
 23ff0ca:	6122      	str	r2, [r4, #16]
 23ff0cc:	b1d5      	cbz	r5, 23ff104 <__d2b+0x98>
 23ff0ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 23ff0d2:	4405      	add	r5, r0
 23ff0d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 23ff0d8:	f8c9 5000 	str.w	r5, [r9]
 23ff0dc:	f8c8 0000 	str.w	r0, [r8]
 23ff0e0:	4620      	mov	r0, r4
 23ff0e2:	b003      	add	sp, #12
 23ff0e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23ff0e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23ff0ec:	e7d5      	b.n	23ff09a <__d2b+0x2e>
 23ff0ee:	6161      	str	r1, [r4, #20]
 23ff0f0:	e7e5      	b.n	23ff0be <__d2b+0x52>
 23ff0f2:	a801      	add	r0, sp, #4
 23ff0f4:	f7ff fcdc 	bl	23feab0 <__lo0bits>
 23ff0f8:	9b01      	ldr	r3, [sp, #4]
 23ff0fa:	2201      	movs	r2, #1
 23ff0fc:	3020      	adds	r0, #32
 23ff0fe:	6163      	str	r3, [r4, #20]
 23ff100:	6122      	str	r2, [r4, #16]
 23ff102:	e7e3      	b.n	23ff0cc <__d2b+0x60>
 23ff104:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 23ff108:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 23ff10c:	f8c9 0000 	str.w	r0, [r9]
 23ff110:	6918      	ldr	r0, [r3, #16]
 23ff112:	f7ff fcad 	bl	23fea70 <__hi0bits>
 23ff116:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 23ff11a:	e7df      	b.n	23ff0dc <__d2b+0x70>
 23ff11c:	023ffde1 	.word	0x023ffde1
 23ff120:	023ffe68 	.word	0x023ffe68

023ff124 <__ratio>:
 23ff124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff128:	4688      	mov	r8, r1
 23ff12a:	4681      	mov	r9, r0
 23ff12c:	4669      	mov	r1, sp
 23ff12e:	f7ff ff4d 	bl	23fefcc <__b2d>
 23ff132:	a901      	add	r1, sp, #4
 23ff134:	4640      	mov	r0, r8
 23ff136:	ec55 4b10 	vmov	r4, r5, d0
 23ff13a:	f7ff ff47 	bl	23fefcc <__b2d>
 23ff13e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 23ff142:	f8d8 2010 	ldr.w	r2, [r8, #16]
 23ff146:	462f      	mov	r7, r5
 23ff148:	eba3 0c02 	sub.w	ip, r3, r2
 23ff14c:	e9dd 3200 	ldrd	r3, r2, [sp]
 23ff150:	ec51 0b10 	vmov	r0, r1, d0
 23ff154:	1a9b      	subs	r3, r3, r2
 23ff156:	468b      	mov	fp, r1
 23ff158:	4620      	mov	r0, r4
 23ff15a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 23ff15e:	2b00      	cmp	r3, #0
 23ff160:	bfd5      	itete	le
 23ff162:	460a      	movle	r2, r1
 23ff164:	462a      	movgt	r2, r5
 23ff166:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 23ff16a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 23ff16e:	bfd8      	it	le
 23ff170:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 23ff174:	ee10 2a10 	vmov	r2, s0
 23ff178:	4639      	mov	r1, r7
 23ff17a:	465b      	mov	r3, fp
 23ff17c:	f7f6 ffbe 	bl	23f60fc <__aeabi_ddiv>
 23ff180:	ec41 0b10 	vmov	d0, r0, r1
 23ff184:	b003      	add	sp, #12
 23ff186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023ff18a <__copybits>:
 23ff18a:	3901      	subs	r1, #1
 23ff18c:	f102 0314 	add.w	r3, r2, #20
 23ff190:	1149      	asrs	r1, r1, #5
 23ff192:	b570      	push	{r4, r5, r6, lr}
 23ff194:	3101      	adds	r1, #1
 23ff196:	6914      	ldr	r4, [r2, #16]
 23ff198:	1f05      	subs	r5, r0, #4
 23ff19a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 23ff19e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 23ff1a2:	42a3      	cmp	r3, r4
 23ff1a4:	d30c      	bcc.n	23ff1c0 <__copybits+0x36>
 23ff1a6:	1aa3      	subs	r3, r4, r2
 23ff1a8:	3211      	adds	r2, #17
 23ff1aa:	3b11      	subs	r3, #17
 23ff1ac:	f023 0303 	bic.w	r3, r3, #3
 23ff1b0:	42a2      	cmp	r2, r4
 23ff1b2:	bf88      	it	hi
 23ff1b4:	2300      	movhi	r3, #0
 23ff1b6:	4418      	add	r0, r3
 23ff1b8:	2300      	movs	r3, #0
 23ff1ba:	4288      	cmp	r0, r1
 23ff1bc:	d305      	bcc.n	23ff1ca <__copybits+0x40>
 23ff1be:	bd70      	pop	{r4, r5, r6, pc}
 23ff1c0:	f853 6b04 	ldr.w	r6, [r3], #4
 23ff1c4:	f845 6f04 	str.w	r6, [r5, #4]!
 23ff1c8:	e7eb      	b.n	23ff1a2 <__copybits+0x18>
 23ff1ca:	f840 3b04 	str.w	r3, [r0], #4
 23ff1ce:	e7f4      	b.n	23ff1ba <__copybits+0x30>

023ff1d0 <__any_on>:
 23ff1d0:	f100 0214 	add.w	r2, r0, #20
 23ff1d4:	114b      	asrs	r3, r1, #5
 23ff1d6:	6900      	ldr	r0, [r0, #16]
 23ff1d8:	4298      	cmp	r0, r3
 23ff1da:	b510      	push	{r4, lr}
 23ff1dc:	db11      	blt.n	23ff202 <__any_on+0x32>
 23ff1de:	dd0a      	ble.n	23ff1f6 <__any_on+0x26>
 23ff1e0:	f011 011f 	ands.w	r1, r1, #31
 23ff1e4:	d007      	beq.n	23ff1f6 <__any_on+0x26>
 23ff1e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 23ff1ea:	fa24 f001 	lsr.w	r0, r4, r1
 23ff1ee:	fa00 f101 	lsl.w	r1, r0, r1
 23ff1f2:	428c      	cmp	r4, r1
 23ff1f4:	d10b      	bne.n	23ff20e <__any_on+0x3e>
 23ff1f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 23ff1fa:	4293      	cmp	r3, r2
 23ff1fc:	d803      	bhi.n	23ff206 <__any_on+0x36>
 23ff1fe:	2000      	movs	r0, #0
 23ff200:	bd10      	pop	{r4, pc}
 23ff202:	4603      	mov	r3, r0
 23ff204:	e7f7      	b.n	23ff1f6 <__any_on+0x26>
 23ff206:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 23ff20a:	2900      	cmp	r1, #0
 23ff20c:	d0f5      	beq.n	23ff1fa <__any_on+0x2a>
 23ff20e:	2001      	movs	r0, #1
 23ff210:	e7f6      	b.n	23ff200 <__any_on+0x30>

023ff212 <_calloc_r>:
 23ff212:	434a      	muls	r2, r1
 23ff214:	b513      	push	{r0, r1, r4, lr}
 23ff216:	4611      	mov	r1, r2
 23ff218:	9201      	str	r2, [sp, #4]
 23ff21a:	f7fa fe4f 	bl	23f9ebc <_malloc_r>
 23ff21e:	4604      	mov	r4, r0
 23ff220:	b118      	cbz	r0, 23ff22a <_calloc_r+0x18>
 23ff222:	9a01      	ldr	r2, [sp, #4]
 23ff224:	2100      	movs	r1, #0
 23ff226:	f7fd fff6 	bl	23fd216 <memset>
 23ff22a:	4620      	mov	r0, r4
 23ff22c:	b002      	add	sp, #8
 23ff22e:	bd10      	pop	{r4, pc}

023ff230 <__ascii_wctomb>:
 23ff230:	b149      	cbz	r1, 23ff246 <__ascii_wctomb+0x16>
 23ff232:	2aff      	cmp	r2, #255	; 0xff
 23ff234:	bf8d      	iteet	hi
 23ff236:	238a      	movhi	r3, #138	; 0x8a
 23ff238:	2001      	movls	r0, #1
 23ff23a:	700a      	strbls	r2, [r1, #0]
 23ff23c:	6003      	strhi	r3, [r0, #0]
 23ff23e:	bf88      	it	hi
 23ff240:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 23ff244:	4770      	bx	lr
 23ff246:	4608      	mov	r0, r1
 23ff248:	4770      	bx	lr
	...

023ff24c <link_const_data_start>:
 23ff24c:	514d0400 	.word	0x514d0400
 23ff250:	00045454 	.word	0x00045454
 23ff254:	49514d06 	.word	0x49514d06
 23ff258:	03706473 	.word	0x03706473

023ff25c <dynalib_user>:
 23ff25c:	023f68d5 023f68fd 023f6901 00000000     .h?..h?..i?.....
 23ff26c:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23ff27c:	6c617574 32393100 3836312e 332e302e     tual.192.168.0.3
 23ff28c:	65420033 74614264 77410068 00656b61     3.BedBath.Awake.
 23ff29c:	006c6c41 74736554 00000000              All.Test....

023ff2a8 <_ZTVN5spark10LogHandlerE>:
	...
 23ff2b8:	023f6921 023f6949                       !i?.Ii?.

023ff2c0 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ff2c8:	023f694d 023f6981 023fb255 023fb3fd     Mi?..i?.U.?...?.
 23ff2d8:	2074756f 6d20666f 726f6d65 636f2079     out of memory oc
 23ff2e8:	72727563 73206465 3d657a69 50006425     curred size=%d.P
 23ff2f8:	69747261 2e656c63 73206f69 63736275     article.io subsc
 23ff308:	65626972 63657220 65766965 61642064     ribe received da
 23ff318:	203a6174 2c270027 6c002720 7300676f     ta: '.', '.log.s
 23ff328:	69547465 6f7a656d 203a656e 67654200     etTimezone: .Beg
 23ff338:	44206e69 53005453 69747465 7420676e     in DST.Setting t
 23ff348:	7a656d69 20656e6f 00206f74 69766544     imezone to .Devi
 23ff358:	00736563 63656843 73696c6b 74530074     ces.Checklist.St
 23ff368:	73757461 74617000 746f6972 74657300     atus.patriot.set
 23ff378:	44495353 74732f00 73757461 66664f00     SSID./status.Off
 23ff388:	656e696c 00644900 6e6e6f43 69746365     line.Id.Connecti
 23ff398:	7420676e 514d206f 4d005454 20545451     ng to MQTT.MQTT 
 23ff3a8:	20676f6c 646e6168 2072656c 65646461     log handler adde
 23ff3b8:	65520064 746f6f62 2e676e69 6d002e2e     d.Rebooting....m
 23ff3c8:	20747471 6e6e6f63 65746365 73202c64     qtt connected, s
 23ff3d8:	63736275 69626972 2e2e676e 0023002e     ubscribing....#.
 23ff3e8:	5454514d 6d695420 74756f65 514d002e     MQTT Timeout..MQ
 23ff3f8:	6e205454 6320746f 656e6e6f 64657463     TT not connected
 23ff408:	6572202c 2e797274 57002e2e 20694669     , retry....WiFi 
 23ff418:	20544f4e 64616572 75700079 73696c62     NOT ready.publis
 23ff428:	68772068 20656c69 5454514d 746f6e20     h while MQTT not
 23ff438:	6e6f6320 7463656e 203a6465 00202c00      connected: ., .
 23ff448:	25206125 4d253a48 6c612f00 2f657669     %a %H:%M./alive/
 23ff458:	63612f00 6e002f6b 00656e6f 6f727265     ./ack/.none.erro
 23ff468:	61770072 77006e72 696e7261 6900676e     r.warn.warning.i
 23ff478:	006f666e 63617274 6c610065 6361006c     nfo.trace.all.ac
 23ff488:	6c61006b 00657669 6e6f7266 6e617074     k.alive.frontpan
 23ff498:	6c006c65 73746665 6564696c 61657200     el.leftslide.rea
 23ff4a8:	6e617072 62006c65 68676972 73656e74     rpanel.brightnes
 23ff4b8:	616c0073 6e6f6c74 203a0067 646c6f68     s.latlong.: hold
 23ff4c8:	00300020 2f74616c 676e6f6c 00203d20      .0.lat/long = .
 23ff4d8:	6553002c 6e697474 616c2067 6f6c2f74     ,.Setting lat/lo
 23ff4e8:	203a676e 676f6c00 6576656c 7320006c     ng: .loglevel. s
 23ff4f8:	69747465 6c20676e 654c676f 206c6576     etting logLevel 
 23ff508:	6d00203d 726f6d65 203a0079 65657266     = .memory.: free
 23ff518:	6d656d20 2079726f 6425203d 65757100      memory = %d.que
 23ff528:	3a007972 63657220 65766965 75712064     ry.: received qu
 23ff538:	20797265 72646461 65737365 6f742064     ery addressed to
 23ff548:	00737520 65736572 203a0074 65736572      us.reset.: rese
 23ff558:	64612074 73657264 20646573 75206f74     t addressed to u
 23ff568:	65740073 74007473 00657572 0066666f     s.test.true.off.
 23ff578:	736c6166 716d0065 3a007474 73657420     false.mqtt.: tes
 23ff588:	69642074 6c626173 514d2065 3a005454     t disable MQTT.:
 23ff598:	63657220 65766965 69742064 6f7a656d      received timezo
 23ff5a8:	3d20656e 203a0020 74746573 20676e69     ne = .: setting 
 23ff5b8:	656d6974 656e6f7a 3a6f7420 6e490020     timezone to: .In
 23ff5c8:	696c6176 69742064 6f7a656d 6800656e     valid timezone.h
 23ff5d8:	00646c6f 2f676f6c 28003a00 00203a29     old.log/.:.(): .
 23ff5e8:	63005b20 2065646f 7025203d 74656400      [.code = %p.det
 23ff5f8:	736c6961 00203d20                       ails = .

023ff600 <_ZTV11MQTTManager>:
	...
 23ff608:	023f73b5 023f73dd 023f8055 023f6949     .s?..s?.U.?.Ii?.
 23ff618:	69766544 20736563 69726176 656c6261     Devices variable
 23ff628:	20736920 206f6f74 676e6f6c 654e202e      is too long. Ne
 23ff638:	74206465 7865206f 646e6574 206f7420     ed to extend to 
 23ff648:	6e322061 61762064 62616972 3d00656c     a 2nd variable.=
 23ff658:	61745300 20737574 69726176 656c6261     .Status variable
 23ff668:	20736920 206f6f74 676e6f6c 654e202e      is too long. Ne
 23ff678:	74206465 7865206f 646e6574 206f7420     ed to extend to 
 23ff688:	6e322061 61762064 62616972 4400656c     a 2nd variable.D
 23ff698:	63697665 20002065 56746573 65756c61     evice . setValue
 23ff6a8:	202c0020 20736177 74657300 44495353      ., was .setSSID
 23ff6b8:	666e6920 6e69206f 72726f63 3a746365      info incorrect:
 23ff6c8:	65530020 6e697474 53532067 702f4449      .Setting SSID/p
 23ff6d8:	77737361 3a64726f 68430020 6c6b6365     assword: .Checkl
 23ff6e8:	20747369 69726176 656c6261 20736920     ist variable is 
 23ff6f8:	206f6f74 676e6f6c 654e202e 74206465     too long. Need t
 23ff708:	7865206f 646e6574 206f7420 6e322061     o extend to a 2n
 23ff718:	61762064 62616972 4e00656c 6863206f     d variable.No ch
 23ff728:	6c6b6365 20747369 6d657469 64610073     ecklist items.ad
 23ff738:	76654464 20656369 656d616e 2000203a     dDevice name: . 
 23ff748:	72696620 64207473 63697665 72450065      first device.Er
 23ff758:	3a726f72 616e5520 20656c62 65206f74     ror: Unable to e
 23ff768:	736f7078 20002065 636e7566 6e6f6974     xpose . function
 23ff778:	61747300 002f6574                       .state/.

023ff780 <_ZTV6Device>:
	...
 23ff788:	023f82d9 023f82a1 023f82b9 023f82ab     ..?...?...?...?.
 23ff798:	023f82c7 023f82a3 023f8521 023f82d7     ..?...?.!.?...?.
 23ff7a8:	023f82a7 023f83a1 023f82dd 023f82ef     ..?...?...?...?.
 23ff7b8:	023f82db 023f82f1                       ..?...?.

023ff7c0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

023ff7c8 <_ZTVN5spark13EthernetClassE>:
	...
 23ff7d0:	023fa0a1 023fa097 023fa08d 023fa083     ..?...?...?...?.
 23ff7e0:	023fa077 023fa06b 023fb5e9 023fb5f1     w.?.k.?...?...?.
 23ff7f0:	023fa05f 023fa057 023fa04d 023fa043     _.?.W.?.M.?.C.?.
 23ff800:	023fb719 023fb621 023fb629              ..?.!.?.).?.

023ff80c <_ZTV7TwoWire>:
	...
 23ff814:	023fa0c1 023fa10b 023fa0e3 023fa0c3     ..?...?...?...?.
 23ff824:	023fa0eb 023fa0f3 023fa0fb 023fa103     ..?...?...?...?.

023ff834 <_ZTV9IPAddress>:
	...
 23ff83c:	023fa165 023fa155 023fa157 75007525     e.?.U.?.W.?.%u.u
 23ff84c:	78343025 75616200 65530064 6c616972     %04x.baud.Serial
 23ff85c:	72655300 316c6169 4f534a00 7274534e     .Serial1.JSONStr
 23ff86c:	4c6d6165 6148676f 656c646e 70610072     eamLogHandler.ap
 23ff87c:	30250070 20753031 00205d00 65646f63     p.%010u .] .code
 23ff88c:	00203d20 0d006925 006d000a 66006e6c      = .%i....m.ln.f
 23ff89c:	6f63006e 64006564 69617465 0000006c     n.code.detail...

023ff8ac <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ff8b4:	023fa63d 023fa663 023fa621 023fa29f     =.?.c.?.!.?...?.

023ff8c4 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ff8cc:	023fab01 023fab19 023fb255 023fb3fd     ..?...?.U.?...?.

023ff8dc <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ff8e4:	023fab2d 023fab41 023fb435 023fa629     -.?.A.?.5.?.).?.

023ff8f4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ff8fc:	023fa63b 023fa671 023fb1b9 023fa62b     ;.?.q.?...?.+.?.

023ff90c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ff914:	023fa639 023fa67f 023faa69 023fa6a1     9.?...?.i.?...?.

023ff924 <CSWTCH.109>:
 23ff924:	1007ae08 1007aed0 1007ae48              ........H...

023ff930 <_ZTVN5spark12NetworkClassE>:
	...
 23ff938:	023fb5a9 023fb5b3 023fb5bd 023fb5c7     ..?...?...?...?.
 23ff948:	023fb5d1 023fb5dd 023fb5e9 023fb5f1     ..?...?...?...?.
 23ff958:	023fb5f9 023fb605 023fb60d 023fb617     ..?...?...?...?.
 23ff968:	023fb719 023fb621 023fb629 69726977     ..?.!.?.).?.wiri
 23ff978:	7200676e 20766365 6f727265 203d2072     ng.recv error = 
 23ff988:	00006425                                %d..

023ff98c <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ff994:	023fbec1 023fbee5 023fc417 023fbef3     ..?...?...?...?.
 23ff9a4:	023fbec5                                ..?.

023ff9a8 <_ZTV9TCPClient>:
	...
 23ff9b0:	023fbf71 023fbfa5 023fbe3d 023fbe57     q.?...?.=.?.W.?.
 23ff9c0:	023fc2ad 023fbe81 023fc123 023fbeb5     ..?...?.#.?...?.
 23ff9d0:	023fc1b5 023fbff5 023fc151 023fc361     ..?...?.Q.?.a.?.
 23ff9e0:	023fc0f1 023fbeb7 023fbe69 023fbef9     ..?...?.i.?...?.
 23ff9f0:	023fbfd5 2b25005a 3a643330 75323025     ..?.Z.%+03d:%02u
 23ffa00:	2d592500 252d6d25 48255464 3a4d253a     .%Y-%m-%dT%H:%M:
 23ffa10:	7a255325 63736100 656d6974 00000000     %S%z.asctime....

023ffa20 <_ZTV11USARTSerial>:
	...
 23ffa28:	023fc7b5 023fc821 023fc7f9 023fb741     ..?.!.?...?.A.?.
 23ffa38:	023fc7c9 023fc7e5 023fc7d7 023fc7f3     ..?...?...?...?.
 23ffa48:	023fc7b7 023fc7bb                       ..?...?.

023ffa50 <_ZTV9USBSerial>:
	...
 23ffa58:	023fc879 023fc8e1 023fc8b7 023fb741     y.?...?...?.A.?.
 23ffa68:	023fc8a9 023fc87b 023fc88b 023fc8db     ..?.{.?...?...?.
 23ffa78:	023fc89b 023fc873                       ..?.s.?.

023ffa80 <_ZTVN5spark9WiFiClassE>:
	...
 23ffa88:	023fc9f9 023fc9ef 023fc9e5 023f73f1     ..?...?...?..s?.
 23ffa98:	023fc9d9 023fc9cd 023fb5e9 023fb5f1     ..?...?...?...?.
 23ffaa8:	023fc9c1 023fc9b9 023fc9af 023fc9a5     ..?...?...?...?.
 23ffab8:	023fb719 023fb621 023fb629              ..?.!.?.).?.

023ffac4 <_ZSt7nothrow>:
	...

023ffac5 <_ZTSSt19_Sp_make_shared_tag>:
 23ffac5:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 23ffad5:	5f646572 00676174                        red_tag....

023ffae0 <_ZTISt19_Sp_make_shared_tag>:
 23ffae0:	023ffb20 023ffac5                        .?...?.

023ffae8 <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffae8:	023ffb80 023ffaf4 023ffba4              ..?...?...?.

023ffaf4 <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffaf4:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 23ffb04:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 23ffb14:	00000045                                E...

023ffb18 <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffb18:	00000000 023ffae8 023fcf59 023fcf6d     ......?.Y.?.m.?.
 23ffb28:	023fd101 023fd101 023fcfd7 023fcf19     ..?...?...?...?.
 23ffb38:	023fcfbf 023fcf81 023fcf4b              ..?...?.K.?.

023ffb44 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffb44:	023ffb80 023ffb50 023ffae8              ..?.P.?...?.

023ffb50 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffb50:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 23ffb60:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 23ffb70:	456f666e 00000000                       nfoE....

023ffb78 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffb78:	00000000 023ffb44 023fd001 023fd015     ....D.?...?...?.
 23ffb88:	023fd101 023fd101 023fcfd7 023fcf19     ..?...?...?...?.
 23ffb98:	023fd0d5 023fd061 023fd029              ..?.a.?.).?.

023ffba4 <_ZTISt9type_info>:
 23ffba4:	023ffb20 023ffbac                        .?...?.

023ffbac <_ZTSSt9type_info>:
 23ffbac:	74397453 5f657079 6f666e69 332e2500     St9type_info.%.3
 23ffbbc:	2e252073 33257333 2e252064 253a6432     s %.3s%3d %.2d:%
 23ffbcc:	3a64322e 64322e25 0a642520               .2d:%.2d %d..

023ffbd9 <day_name.1>:
 23ffbd9:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
 23ffbe9:	61536972                                 riSat

023ffbee <mon_name.0>:
 23ffbee:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
 23ffbfe:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
 23ffc0e:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
 23ffc1e:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
 23ffc2e:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
 23ffc3e:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
 23ffc4e:	5f343231 36303631 36303831 732f3933     124_1606180639/s
 23ffc5e:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
 23ffc6e:	62696c2f 74732f63 62696c64 6e61722f     /libc/stdlib/ran
 23ffc7e:	00632e64 6900666e 7974696e 006e6100     d.c.nf.inity.an.
	...

023ffc90 <fpi.1>:
 23ffc90:	00000035 fffffbce 000003cb 00000001     5...............
 23ffca0:	00000000                                ....

023ffca4 <fpinan.0>:
 23ffca4:	00000034 fffffbce 000003cb 00000001     4...............
 23ffcb4:	00000000                                ....

023ffcb8 <tinytens>:
 23ffcb8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 23ffcc8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 23ffcd8:	64ac6f43 11680628                       Co.d(.h.

023ffce0 <_ctype_>:
 23ffce0:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffcf0:	20202020 20202020 20202020 20202020                     
 23ffd00:	10108820 10101010 10101010 10101010      ...............
 23ffd10:	04040410 04040404 10040404 10101010     ................
 23ffd20:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23ffd30:	01010101 01010101 01010101 10101010     ................
 23ffd40:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23ffd50:	02020202 02020202 02020202 10101010     ................
 23ffd60:	00000020 00000000 00000000 00000000      ...............
	...
 23ffde0:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
 23ffdf0:	742f0064 6a2f706d 696b6e65 472d736e     d./tmp/jenkins-G
 23ffe00:	312d4343 69702d30 696c6570 342d656e     CC-10-pipeline-4
 23ffe10:	30325f38 31313032 315f3432 31363036     8_20201124_16061
 23ffe20:	33363038 72732f39 656e2f63 62696c77     80639/src/newlib
 23ffe30:	77656e2f 2f62696c 6362696c 6474732f     /newlib/libc/std
 23ffe40:	2f62696c 6f746467 65672d61 78656874     lib/gdtoa-gethex
 23ffe50:	0000632e                                .c..

023ffe54 <_C_numeric_locale>:
 23ffe54:	023ff3e4 023ff895 1007ab50 4f500043     ..?...?.P...C.PO
 23ffe64:	00584953 706d742f 6e656a2f 736e696b     SIX./tmp/jenkins
 23ffe74:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
 23ffe84:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
 23ffe94:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
 23ffea4:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
 23ffeb4:	696c6474 706d2f62 2e636572 00000063     tdlib/mprec.c...
 23ffec4:	00000000                                ....

023ffec8 <__mprec_bigtens>:
 23ffec8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 23ffed8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 23ffee8:	7f73bf3c 75154fdd                       <.s..O.u

023ffef0 <__mprec_tens>:
 23ffef0:	00000000 3ff00000 00000000 40240000     .......?......$@
 23fff00:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 23fff10:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 23fff20:	00000000 412e8480 00000000 416312d0     .......A......cA
 23fff30:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 23fff40:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 23fff50:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 23fff60:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 23fff70:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 23fff80:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 23fff90:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 23fffa0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 23fffb0:	79d99db4 44ea7843                       ...yCx.D

023fffb8 <p05.0>:
 23fffb8:	00000005 00000019 0000007d              ........}...

023fffc4 <link_const_data_end>:
 23fffc4:	023f6b31 	.word	0x023f6b31
 23fffc8:	023f735d 	.word	0x023f735d
 23fffcc:	023f8241 	.word	0x023f8241
 23fffd0:	023f8ab1 	.word	0x023f8ab1
 23fffd4:	023f9fe5 	.word	0x023f9fe5
 23fffd8:	023fa0ad 	.word	0x023fa0ad
 23fffdc:	023fb245 	.word	0x023fb245
 23fffe0:	023fb72d 	.word	0x023fb72d
 23fffe4:	023fb7d5 	.word	0x023fb7d5
 23fffe8:	023fbe19 	.word	0x023fbe19
 23fffec:	023fc7a1 	.word	0x023fc7a1
 23ffff0:	023fca05 	.word	0x023fca05
