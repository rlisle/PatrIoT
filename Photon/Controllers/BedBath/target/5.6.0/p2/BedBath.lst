
/Users/ronlisle/GitRepos/Patriot/Photon/Controllers/BedBath/target/5.6.0/p2/BedBath.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085f5000  085f5000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085f5018  085f5018  00005018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  085f50a4  085f50a4  000050a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynalib      00000008  023f5d88  085f50b0  00005d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .psram_text   0000a264  023f5d90  085f50b8  00005d90  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  5 .data_alt     00000000  023ffff4  023ffff4  00020000  2**0
                  CONTENTS
  6 .bss_alt      00000000  023ffff4  023ffff4  00020000  2**0
                  CONTENTS
  7 .data         000001f8  1007aac8  085ff31c  0001aac8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000032c  1007acc0  1007acc0  0002acc0  2**3
                  ALLOC
  9 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
 10 .backup       00000004  1007b400  085ff514  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .module_info_suffix_align 00000aa0  085ff518  085ff518  0001f518  2**0
                  ALLOC
 12 .module_info_product 00000006  085fffb8  085fffb8  0001f518  2**0
                  ALLOC
 13 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   001b5df5  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0001b62d  00000000  00000000  001d5df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    0005129a  00000000  00000000  001f1422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003c38  00000000  00000000  002426bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 0000e838  00000000  00000000  002462f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002b1ad  00000000  00000000  00254b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00054831  00000000  00000000  0027fcd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000e2959  00000000  00000000  002d450a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000b800  00000000  00000000  003b6e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085f5018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f5018:	4813      	ldr	r0, [pc, #76]	; (85f5068 <module_user_pre_init+0x50>)
 85f501a:	4914      	ldr	r1, [pc, #80]	; (85f506c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85f501c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f501e:	4288      	cmp	r0, r1
 85f5020:	d005      	beq.n	85f502e <module_user_pre_init+0x16>
 85f5022:	4a13      	ldr	r2, [pc, #76]	; (85f5070 <module_user_pre_init+0x58>)
 85f5024:	4282      	cmp	r2, r0
 85f5026:	d002      	beq.n	85f502e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85f5028:	4b12      	ldr	r3, [pc, #72]	; (85f5074 <module_user_pre_init+0x5c>)
 85f502a:	1a12      	subs	r2, r2, r0
 85f502c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85f502e:	4812      	ldr	r0, [pc, #72]	; (85f5078 <module_user_pre_init+0x60>)
 85f5030:	4a12      	ldr	r2, [pc, #72]	; (85f507c <module_user_pre_init+0x64>)
 85f5032:	2100      	movs	r1, #0
 85f5034:	4b12      	ldr	r3, [pc, #72]	; (85f5080 <module_user_pre_init+0x68>)
 85f5036:	1a12      	subs	r2, r2, r0
 85f5038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85f503a:	4812      	ldr	r0, [pc, #72]	; (85f5084 <module_user_pre_init+0x6c>)
 85f503c:	4912      	ldr	r1, [pc, #72]	; (85f5088 <module_user_pre_init+0x70>)
 85f503e:	4288      	cmp	r0, r1
 85f5040:	d005      	beq.n	85f504e <module_user_pre_init+0x36>
 85f5042:	4a12      	ldr	r2, [pc, #72]	; (85f508c <module_user_pre_init+0x74>)
 85f5044:	4282      	cmp	r2, r0
 85f5046:	d002      	beq.n	85f504e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85f5048:	4b0a      	ldr	r3, [pc, #40]	; (85f5074 <module_user_pre_init+0x5c>)
 85f504a:	1a12      	subs	r2, r2, r0
 85f504c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85f504e:	4810      	ldr	r0, [pc, #64]	; (85f5090 <module_user_pre_init+0x78>)
 85f5050:	4910      	ldr	r1, [pc, #64]	; (85f5094 <module_user_pre_init+0x7c>)
 85f5052:	4288      	cmp	r0, r1
 85f5054:	d005      	beq.n	85f5062 <module_user_pre_init+0x4a>
 85f5056:	4a10      	ldr	r2, [pc, #64]	; (85f5098 <module_user_pre_init+0x80>)
 85f5058:	4282      	cmp	r2, r0
 85f505a:	d002      	beq.n	85f5062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85f505c:	4b05      	ldr	r3, [pc, #20]	; (85f5074 <module_user_pre_init+0x5c>)
 85f505e:	1a12      	subs	r2, r2, r0
 85f5060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85f5062:	4801      	ldr	r0, [pc, #4]	; (85f5068 <module_user_pre_init+0x50>)
 85f5064:	bd08      	pop	{r3, pc}
 85f5066:	bf00      	nop
 85f5068:	1007aac8 	.word	0x1007aac8
 85f506c:	085ff31c 	.word	0x085ff31c
 85f5070:	1007acc0 	.word	0x1007acc0
 85f5074:	10110d2d 	.word	0x10110d2d
 85f5078:	1007acc0 	.word	0x1007acc0
 85f507c:	1007afec 	.word	0x1007afec
 85f5080:	10110ea1 	.word	0x10110ea1
 85f5084:	023f5d88 	.word	0x023f5d88
 85f5088:	085f50b0 	.word	0x085f50b0
 85f508c:	023f5d90 	.word	0x023f5d90
 85f5090:	023f5d90 	.word	0x023f5d90
 85f5094:	085f50b8 	.word	0x085f50b8
 85f5098:	023ffff4 	.word	0x023ffff4

085f509c <dynalib_preinit>:
 85f509c:	085f5019 00000000                       .P_.....

Disassembly of section .psram_text:

023f5d90 <__aeabi_drsub>:
 23f5d90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23f5d94:	e002      	b.n	23f5d9c <__adddf3>
 23f5d96:	bf00      	nop

023f5d98 <__aeabi_dsub>:
 23f5d98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023f5d9c <__adddf3>:
 23f5d9c:	b530      	push	{r4, r5, lr}
 23f5d9e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23f5da2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23f5da6:	ea94 0f05 	teq	r4, r5
 23f5daa:	bf08      	it	eq
 23f5dac:	ea90 0f02 	teqeq	r0, r2
 23f5db0:	bf1f      	itttt	ne
 23f5db2:	ea54 0c00 	orrsne.w	ip, r4, r0
 23f5db6:	ea55 0c02 	orrsne.w	ip, r5, r2
 23f5dba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23f5dbe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f5dc2:	f000 80e2 	beq.w	23f5f8a <__adddf3+0x1ee>
 23f5dc6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23f5dca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23f5dce:	bfb8      	it	lt
 23f5dd0:	426d      	neglt	r5, r5
 23f5dd2:	dd0c      	ble.n	23f5dee <__adddf3+0x52>
 23f5dd4:	442c      	add	r4, r5
 23f5dd6:	ea80 0202 	eor.w	r2, r0, r2
 23f5dda:	ea81 0303 	eor.w	r3, r1, r3
 23f5dde:	ea82 0000 	eor.w	r0, r2, r0
 23f5de2:	ea83 0101 	eor.w	r1, r3, r1
 23f5de6:	ea80 0202 	eor.w	r2, r0, r2
 23f5dea:	ea81 0303 	eor.w	r3, r1, r3
 23f5dee:	2d36      	cmp	r5, #54	; 0x36
 23f5df0:	bf88      	it	hi
 23f5df2:	bd30      	pophi	{r4, r5, pc}
 23f5df4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23f5df8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23f5dfc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23f5e00:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23f5e04:	d002      	beq.n	23f5e0c <__adddf3+0x70>
 23f5e06:	4240      	negs	r0, r0
 23f5e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f5e0c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23f5e10:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23f5e14:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23f5e18:	d002      	beq.n	23f5e20 <__adddf3+0x84>
 23f5e1a:	4252      	negs	r2, r2
 23f5e1c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23f5e20:	ea94 0f05 	teq	r4, r5
 23f5e24:	f000 80a7 	beq.w	23f5f76 <__adddf3+0x1da>
 23f5e28:	f1a4 0401 	sub.w	r4, r4, #1
 23f5e2c:	f1d5 0e20 	rsbs	lr, r5, #32
 23f5e30:	db0d      	blt.n	23f5e4e <__adddf3+0xb2>
 23f5e32:	fa02 fc0e 	lsl.w	ip, r2, lr
 23f5e36:	fa22 f205 	lsr.w	r2, r2, r5
 23f5e3a:	1880      	adds	r0, r0, r2
 23f5e3c:	f141 0100 	adc.w	r1, r1, #0
 23f5e40:	fa03 f20e 	lsl.w	r2, r3, lr
 23f5e44:	1880      	adds	r0, r0, r2
 23f5e46:	fa43 f305 	asr.w	r3, r3, r5
 23f5e4a:	4159      	adcs	r1, r3
 23f5e4c:	e00e      	b.n	23f5e6c <__adddf3+0xd0>
 23f5e4e:	f1a5 0520 	sub.w	r5, r5, #32
 23f5e52:	f10e 0e20 	add.w	lr, lr, #32
 23f5e56:	2a01      	cmp	r2, #1
 23f5e58:	fa03 fc0e 	lsl.w	ip, r3, lr
 23f5e5c:	bf28      	it	cs
 23f5e5e:	f04c 0c02 	orrcs.w	ip, ip, #2
 23f5e62:	fa43 f305 	asr.w	r3, r3, r5
 23f5e66:	18c0      	adds	r0, r0, r3
 23f5e68:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23f5e6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f5e70:	d507      	bpl.n	23f5e82 <__adddf3+0xe6>
 23f5e72:	f04f 0e00 	mov.w	lr, #0
 23f5e76:	f1dc 0c00 	rsbs	ip, ip, #0
 23f5e7a:	eb7e 0000 	sbcs.w	r0, lr, r0
 23f5e7e:	eb6e 0101 	sbc.w	r1, lr, r1
 23f5e82:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23f5e86:	d31b      	bcc.n	23f5ec0 <__adddf3+0x124>
 23f5e88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23f5e8c:	d30c      	bcc.n	23f5ea8 <__adddf3+0x10c>
 23f5e8e:	0849      	lsrs	r1, r1, #1
 23f5e90:	ea5f 0030 	movs.w	r0, r0, rrx
 23f5e94:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23f5e98:	f104 0401 	add.w	r4, r4, #1
 23f5e9c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23f5ea0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23f5ea4:	f080 809a 	bcs.w	23f5fdc <__adddf3+0x240>
 23f5ea8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23f5eac:	bf08      	it	eq
 23f5eae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23f5eb2:	f150 0000 	adcs.w	r0, r0, #0
 23f5eb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f5eba:	ea41 0105 	orr.w	r1, r1, r5
 23f5ebe:	bd30      	pop	{r4, r5, pc}
 23f5ec0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23f5ec4:	4140      	adcs	r0, r0
 23f5ec6:	eb41 0101 	adc.w	r1, r1, r1
 23f5eca:	3c01      	subs	r4, #1
 23f5ecc:	bf28      	it	cs
 23f5ece:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23f5ed2:	d2e9      	bcs.n	23f5ea8 <__adddf3+0x10c>
 23f5ed4:	f091 0f00 	teq	r1, #0
 23f5ed8:	bf04      	itt	eq
 23f5eda:	4601      	moveq	r1, r0
 23f5edc:	2000      	moveq	r0, #0
 23f5ede:	fab1 f381 	clz	r3, r1
 23f5ee2:	bf08      	it	eq
 23f5ee4:	3320      	addeq	r3, #32
 23f5ee6:	f1a3 030b 	sub.w	r3, r3, #11
 23f5eea:	f1b3 0220 	subs.w	r2, r3, #32
 23f5eee:	da0c      	bge.n	23f5f0a <__adddf3+0x16e>
 23f5ef0:	320c      	adds	r2, #12
 23f5ef2:	dd08      	ble.n	23f5f06 <__adddf3+0x16a>
 23f5ef4:	f102 0c14 	add.w	ip, r2, #20
 23f5ef8:	f1c2 020c 	rsb	r2, r2, #12
 23f5efc:	fa01 f00c 	lsl.w	r0, r1, ip
 23f5f00:	fa21 f102 	lsr.w	r1, r1, r2
 23f5f04:	e00c      	b.n	23f5f20 <__adddf3+0x184>
 23f5f06:	f102 0214 	add.w	r2, r2, #20
 23f5f0a:	bfd8      	it	le
 23f5f0c:	f1c2 0c20 	rsble	ip, r2, #32
 23f5f10:	fa01 f102 	lsl.w	r1, r1, r2
 23f5f14:	fa20 fc0c 	lsr.w	ip, r0, ip
 23f5f18:	bfdc      	itt	le
 23f5f1a:	ea41 010c 	orrle.w	r1, r1, ip
 23f5f1e:	4090      	lslle	r0, r2
 23f5f20:	1ae4      	subs	r4, r4, r3
 23f5f22:	bfa2      	ittt	ge
 23f5f24:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23f5f28:	4329      	orrge	r1, r5
 23f5f2a:	bd30      	popge	{r4, r5, pc}
 23f5f2c:	ea6f 0404 	mvn.w	r4, r4
 23f5f30:	3c1f      	subs	r4, #31
 23f5f32:	da1c      	bge.n	23f5f6e <__adddf3+0x1d2>
 23f5f34:	340c      	adds	r4, #12
 23f5f36:	dc0e      	bgt.n	23f5f56 <__adddf3+0x1ba>
 23f5f38:	f104 0414 	add.w	r4, r4, #20
 23f5f3c:	f1c4 0220 	rsb	r2, r4, #32
 23f5f40:	fa20 f004 	lsr.w	r0, r0, r4
 23f5f44:	fa01 f302 	lsl.w	r3, r1, r2
 23f5f48:	ea40 0003 	orr.w	r0, r0, r3
 23f5f4c:	fa21 f304 	lsr.w	r3, r1, r4
 23f5f50:	ea45 0103 	orr.w	r1, r5, r3
 23f5f54:	bd30      	pop	{r4, r5, pc}
 23f5f56:	f1c4 040c 	rsb	r4, r4, #12
 23f5f5a:	f1c4 0220 	rsb	r2, r4, #32
 23f5f5e:	fa20 f002 	lsr.w	r0, r0, r2
 23f5f62:	fa01 f304 	lsl.w	r3, r1, r4
 23f5f66:	ea40 0003 	orr.w	r0, r0, r3
 23f5f6a:	4629      	mov	r1, r5
 23f5f6c:	bd30      	pop	{r4, r5, pc}
 23f5f6e:	fa21 f004 	lsr.w	r0, r1, r4
 23f5f72:	4629      	mov	r1, r5
 23f5f74:	bd30      	pop	{r4, r5, pc}
 23f5f76:	f094 0f00 	teq	r4, #0
 23f5f7a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23f5f7e:	bf06      	itte	eq
 23f5f80:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23f5f84:	3401      	addeq	r4, #1
 23f5f86:	3d01      	subne	r5, #1
 23f5f88:	e74e      	b.n	23f5e28 <__adddf3+0x8c>
 23f5f8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f5f8e:	bf18      	it	ne
 23f5f90:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f5f94:	d029      	beq.n	23f5fea <__adddf3+0x24e>
 23f5f96:	ea94 0f05 	teq	r4, r5
 23f5f9a:	bf08      	it	eq
 23f5f9c:	ea90 0f02 	teqeq	r0, r2
 23f5fa0:	d005      	beq.n	23f5fae <__adddf3+0x212>
 23f5fa2:	ea54 0c00 	orrs.w	ip, r4, r0
 23f5fa6:	bf04      	itt	eq
 23f5fa8:	4619      	moveq	r1, r3
 23f5faa:	4610      	moveq	r0, r2
 23f5fac:	bd30      	pop	{r4, r5, pc}
 23f5fae:	ea91 0f03 	teq	r1, r3
 23f5fb2:	bf1e      	ittt	ne
 23f5fb4:	2100      	movne	r1, #0
 23f5fb6:	2000      	movne	r0, #0
 23f5fb8:	bd30      	popne	{r4, r5, pc}
 23f5fba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23f5fbe:	d105      	bne.n	23f5fcc <__adddf3+0x230>
 23f5fc0:	0040      	lsls	r0, r0, #1
 23f5fc2:	4149      	adcs	r1, r1
 23f5fc4:	bf28      	it	cs
 23f5fc6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23f5fca:	bd30      	pop	{r4, r5, pc}
 23f5fcc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23f5fd0:	bf3c      	itt	cc
 23f5fd2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23f5fd6:	bd30      	popcc	{r4, r5, pc}
 23f5fd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f5fdc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23f5fe0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23f5fe4:	f04f 0000 	mov.w	r0, #0
 23f5fe8:	bd30      	pop	{r4, r5, pc}
 23f5fea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f5fee:	bf1a      	itte	ne
 23f5ff0:	4619      	movne	r1, r3
 23f5ff2:	4610      	movne	r0, r2
 23f5ff4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23f5ff8:	bf1c      	itt	ne
 23f5ffa:	460b      	movne	r3, r1
 23f5ffc:	4602      	movne	r2, r0
 23f5ffe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23f6002:	bf06      	itte	eq
 23f6004:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23f6008:	ea91 0f03 	teqeq	r1, r3
 23f600c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23f6010:	bd30      	pop	{r4, r5, pc}
 23f6012:	bf00      	nop

023f6014 <__aeabi_ui2d>:
 23f6014:	f090 0f00 	teq	r0, #0
 23f6018:	bf04      	itt	eq
 23f601a:	2100      	moveq	r1, #0
 23f601c:	4770      	bxeq	lr
 23f601e:	b530      	push	{r4, r5, lr}
 23f6020:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f6024:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f6028:	f04f 0500 	mov.w	r5, #0
 23f602c:	f04f 0100 	mov.w	r1, #0
 23f6030:	e750      	b.n	23f5ed4 <__adddf3+0x138>
 23f6032:	bf00      	nop

023f6034 <__aeabi_i2d>:
 23f6034:	f090 0f00 	teq	r0, #0
 23f6038:	bf04      	itt	eq
 23f603a:	2100      	moveq	r1, #0
 23f603c:	4770      	bxeq	lr
 23f603e:	b530      	push	{r4, r5, lr}
 23f6040:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f6044:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f6048:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23f604c:	bf48      	it	mi
 23f604e:	4240      	negmi	r0, r0
 23f6050:	f04f 0100 	mov.w	r1, #0
 23f6054:	e73e      	b.n	23f5ed4 <__adddf3+0x138>
 23f6056:	bf00      	nop

023f6058 <__aeabi_f2d>:
 23f6058:	0042      	lsls	r2, r0, #1
 23f605a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23f605e:	ea4f 0131 	mov.w	r1, r1, rrx
 23f6062:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23f6066:	bf1f      	itttt	ne
 23f6068:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23f606c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23f6070:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23f6074:	4770      	bxne	lr
 23f6076:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23f607a:	bf08      	it	eq
 23f607c:	4770      	bxeq	lr
 23f607e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23f6082:	bf04      	itt	eq
 23f6084:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23f6088:	4770      	bxeq	lr
 23f608a:	b530      	push	{r4, r5, lr}
 23f608c:	f44f 7460 	mov.w	r4, #896	; 0x380
 23f6090:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f6094:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f6098:	e71c      	b.n	23f5ed4 <__adddf3+0x138>
 23f609a:	bf00      	nop

023f609c <__aeabi_ul2d>:
 23f609c:	ea50 0201 	orrs.w	r2, r0, r1
 23f60a0:	bf08      	it	eq
 23f60a2:	4770      	bxeq	lr
 23f60a4:	b530      	push	{r4, r5, lr}
 23f60a6:	f04f 0500 	mov.w	r5, #0
 23f60aa:	e00a      	b.n	23f60c2 <__aeabi_l2d+0x16>

023f60ac <__aeabi_l2d>:
 23f60ac:	ea50 0201 	orrs.w	r2, r0, r1
 23f60b0:	bf08      	it	eq
 23f60b2:	4770      	bxeq	lr
 23f60b4:	b530      	push	{r4, r5, lr}
 23f60b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23f60ba:	d502      	bpl.n	23f60c2 <__aeabi_l2d+0x16>
 23f60bc:	4240      	negs	r0, r0
 23f60be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f60c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f60c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f60ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23f60ce:	f43f aed8 	beq.w	23f5e82 <__adddf3+0xe6>
 23f60d2:	f04f 0203 	mov.w	r2, #3
 23f60d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f60da:	bf18      	it	ne
 23f60dc:	3203      	addne	r2, #3
 23f60de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f60e2:	bf18      	it	ne
 23f60e4:	3203      	addne	r2, #3
 23f60e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23f60ea:	f1c2 0320 	rsb	r3, r2, #32
 23f60ee:	fa00 fc03 	lsl.w	ip, r0, r3
 23f60f2:	fa20 f002 	lsr.w	r0, r0, r2
 23f60f6:	fa01 fe03 	lsl.w	lr, r1, r3
 23f60fa:	ea40 000e 	orr.w	r0, r0, lr
 23f60fe:	fa21 f102 	lsr.w	r1, r1, r2
 23f6102:	4414      	add	r4, r2
 23f6104:	e6bd      	b.n	23f5e82 <__adddf3+0xe6>
 23f6106:	bf00      	nop

023f6108 <__aeabi_dmul>:
 23f6108:	b570      	push	{r4, r5, r6, lr}
 23f610a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23f610e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23f6112:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23f6116:	bf1d      	ittte	ne
 23f6118:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23f611c:	ea94 0f0c 	teqne	r4, ip
 23f6120:	ea95 0f0c 	teqne	r5, ip
 23f6124:	f000 f8de 	bleq	23f62e4 <__aeabi_dmul+0x1dc>
 23f6128:	442c      	add	r4, r5
 23f612a:	ea81 0603 	eor.w	r6, r1, r3
 23f612e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23f6132:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23f6136:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23f613a:	bf18      	it	ne
 23f613c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23f6140:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f6144:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23f6148:	d038      	beq.n	23f61bc <__aeabi_dmul+0xb4>
 23f614a:	fba0 ce02 	umull	ip, lr, r0, r2
 23f614e:	f04f 0500 	mov.w	r5, #0
 23f6152:	fbe1 e502 	umlal	lr, r5, r1, r2
 23f6156:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23f615a:	fbe0 e503 	umlal	lr, r5, r0, r3
 23f615e:	f04f 0600 	mov.w	r6, #0
 23f6162:	fbe1 5603 	umlal	r5, r6, r1, r3
 23f6166:	f09c 0f00 	teq	ip, #0
 23f616a:	bf18      	it	ne
 23f616c:	f04e 0e01 	orrne.w	lr, lr, #1
 23f6170:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23f6174:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23f6178:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23f617c:	d204      	bcs.n	23f6188 <__aeabi_dmul+0x80>
 23f617e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23f6182:	416d      	adcs	r5, r5
 23f6184:	eb46 0606 	adc.w	r6, r6, r6
 23f6188:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23f618c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23f6190:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23f6194:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23f6198:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23f619c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23f61a0:	bf88      	it	hi
 23f61a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23f61a6:	d81e      	bhi.n	23f61e6 <__aeabi_dmul+0xde>
 23f61a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23f61ac:	bf08      	it	eq
 23f61ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23f61b2:	f150 0000 	adcs.w	r0, r0, #0
 23f61b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f61ba:	bd70      	pop	{r4, r5, r6, pc}
 23f61bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23f61c0:	ea46 0101 	orr.w	r1, r6, r1
 23f61c4:	ea40 0002 	orr.w	r0, r0, r2
 23f61c8:	ea81 0103 	eor.w	r1, r1, r3
 23f61cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23f61d0:	bfc2      	ittt	gt
 23f61d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 23f61d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23f61da:	bd70      	popgt	{r4, r5, r6, pc}
 23f61dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f61e0:	f04f 0e00 	mov.w	lr, #0
 23f61e4:	3c01      	subs	r4, #1
 23f61e6:	f300 80ab 	bgt.w	23f6340 <__aeabi_dmul+0x238>
 23f61ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23f61ee:	bfde      	ittt	le
 23f61f0:	2000      	movle	r0, #0
 23f61f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23f61f6:	bd70      	pople	{r4, r5, r6, pc}
 23f61f8:	f1c4 0400 	rsb	r4, r4, #0
 23f61fc:	3c20      	subs	r4, #32
 23f61fe:	da35      	bge.n	23f626c <__aeabi_dmul+0x164>
 23f6200:	340c      	adds	r4, #12
 23f6202:	dc1b      	bgt.n	23f623c <__aeabi_dmul+0x134>
 23f6204:	f104 0414 	add.w	r4, r4, #20
 23f6208:	f1c4 0520 	rsb	r5, r4, #32
 23f620c:	fa00 f305 	lsl.w	r3, r0, r5
 23f6210:	fa20 f004 	lsr.w	r0, r0, r4
 23f6214:	fa01 f205 	lsl.w	r2, r1, r5
 23f6218:	ea40 0002 	orr.w	r0, r0, r2
 23f621c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23f6220:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f6224:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23f6228:	fa21 f604 	lsr.w	r6, r1, r4
 23f622c:	eb42 0106 	adc.w	r1, r2, r6
 23f6230:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f6234:	bf08      	it	eq
 23f6236:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f623a:	bd70      	pop	{r4, r5, r6, pc}
 23f623c:	f1c4 040c 	rsb	r4, r4, #12
 23f6240:	f1c4 0520 	rsb	r5, r4, #32
 23f6244:	fa00 f304 	lsl.w	r3, r0, r4
 23f6248:	fa20 f005 	lsr.w	r0, r0, r5
 23f624c:	fa01 f204 	lsl.w	r2, r1, r4
 23f6250:	ea40 0002 	orr.w	r0, r0, r2
 23f6254:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f6258:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23f625c:	f141 0100 	adc.w	r1, r1, #0
 23f6260:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f6264:	bf08      	it	eq
 23f6266:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f626a:	bd70      	pop	{r4, r5, r6, pc}
 23f626c:	f1c4 0520 	rsb	r5, r4, #32
 23f6270:	fa00 f205 	lsl.w	r2, r0, r5
 23f6274:	ea4e 0e02 	orr.w	lr, lr, r2
 23f6278:	fa20 f304 	lsr.w	r3, r0, r4
 23f627c:	fa01 f205 	lsl.w	r2, r1, r5
 23f6280:	ea43 0302 	orr.w	r3, r3, r2
 23f6284:	fa21 f004 	lsr.w	r0, r1, r4
 23f6288:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f628c:	fa21 f204 	lsr.w	r2, r1, r4
 23f6290:	ea20 0002 	bic.w	r0, r0, r2
 23f6294:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23f6298:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f629c:	bf08      	it	eq
 23f629e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f62a2:	bd70      	pop	{r4, r5, r6, pc}
 23f62a4:	f094 0f00 	teq	r4, #0
 23f62a8:	d10f      	bne.n	23f62ca <__aeabi_dmul+0x1c2>
 23f62aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23f62ae:	0040      	lsls	r0, r0, #1
 23f62b0:	eb41 0101 	adc.w	r1, r1, r1
 23f62b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f62b8:	bf08      	it	eq
 23f62ba:	3c01      	subeq	r4, #1
 23f62bc:	d0f7      	beq.n	23f62ae <__aeabi_dmul+0x1a6>
 23f62be:	ea41 0106 	orr.w	r1, r1, r6
 23f62c2:	f095 0f00 	teq	r5, #0
 23f62c6:	bf18      	it	ne
 23f62c8:	4770      	bxne	lr
 23f62ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23f62ce:	0052      	lsls	r2, r2, #1
 23f62d0:	eb43 0303 	adc.w	r3, r3, r3
 23f62d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23f62d8:	bf08      	it	eq
 23f62da:	3d01      	subeq	r5, #1
 23f62dc:	d0f7      	beq.n	23f62ce <__aeabi_dmul+0x1c6>
 23f62de:	ea43 0306 	orr.w	r3, r3, r6
 23f62e2:	4770      	bx	lr
 23f62e4:	ea94 0f0c 	teq	r4, ip
 23f62e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23f62ec:	bf18      	it	ne
 23f62ee:	ea95 0f0c 	teqne	r5, ip
 23f62f2:	d00c      	beq.n	23f630e <__aeabi_dmul+0x206>
 23f62f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f62f8:	bf18      	it	ne
 23f62fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f62fe:	d1d1      	bne.n	23f62a4 <__aeabi_dmul+0x19c>
 23f6300:	ea81 0103 	eor.w	r1, r1, r3
 23f6304:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f6308:	f04f 0000 	mov.w	r0, #0
 23f630c:	bd70      	pop	{r4, r5, r6, pc}
 23f630e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f6312:	bf06      	itte	eq
 23f6314:	4610      	moveq	r0, r2
 23f6316:	4619      	moveq	r1, r3
 23f6318:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f631c:	d019      	beq.n	23f6352 <__aeabi_dmul+0x24a>
 23f631e:	ea94 0f0c 	teq	r4, ip
 23f6322:	d102      	bne.n	23f632a <__aeabi_dmul+0x222>
 23f6324:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23f6328:	d113      	bne.n	23f6352 <__aeabi_dmul+0x24a>
 23f632a:	ea95 0f0c 	teq	r5, ip
 23f632e:	d105      	bne.n	23f633c <__aeabi_dmul+0x234>
 23f6330:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23f6334:	bf1c      	itt	ne
 23f6336:	4610      	movne	r0, r2
 23f6338:	4619      	movne	r1, r3
 23f633a:	d10a      	bne.n	23f6352 <__aeabi_dmul+0x24a>
 23f633c:	ea81 0103 	eor.w	r1, r1, r3
 23f6340:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f6344:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23f6348:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23f634c:	f04f 0000 	mov.w	r0, #0
 23f6350:	bd70      	pop	{r4, r5, r6, pc}
 23f6352:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23f6356:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23f635a:	bd70      	pop	{r4, r5, r6, pc}

023f635c <__aeabi_ddiv>:
 23f635c:	b570      	push	{r4, r5, r6, lr}
 23f635e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23f6362:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23f6366:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23f636a:	bf1d      	ittte	ne
 23f636c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23f6370:	ea94 0f0c 	teqne	r4, ip
 23f6374:	ea95 0f0c 	teqne	r5, ip
 23f6378:	f000 f8a7 	bleq	23f64ca <__aeabi_ddiv+0x16e>
 23f637c:	eba4 0405 	sub.w	r4, r4, r5
 23f6380:	ea81 0e03 	eor.w	lr, r1, r3
 23f6384:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23f6388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23f638c:	f000 8088 	beq.w	23f64a0 <__aeabi_ddiv+0x144>
 23f6390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23f6394:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23f6398:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23f639c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23f63a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23f63a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23f63a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23f63ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23f63b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23f63b4:	429d      	cmp	r5, r3
 23f63b6:	bf08      	it	eq
 23f63b8:	4296      	cmpeq	r6, r2
 23f63ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23f63be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23f63c2:	d202      	bcs.n	23f63ca <__aeabi_ddiv+0x6e>
 23f63c4:	085b      	lsrs	r3, r3, #1
 23f63c6:	ea4f 0232 	mov.w	r2, r2, rrx
 23f63ca:	1ab6      	subs	r6, r6, r2
 23f63cc:	eb65 0503 	sbc.w	r5, r5, r3
 23f63d0:	085b      	lsrs	r3, r3, #1
 23f63d2:	ea4f 0232 	mov.w	r2, r2, rrx
 23f63d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23f63da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23f63de:	ebb6 0e02 	subs.w	lr, r6, r2
 23f63e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f63e6:	bf22      	ittt	cs
 23f63e8:	1ab6      	subcs	r6, r6, r2
 23f63ea:	4675      	movcs	r5, lr
 23f63ec:	ea40 000c 	orrcs.w	r0, r0, ip
 23f63f0:	085b      	lsrs	r3, r3, #1
 23f63f2:	ea4f 0232 	mov.w	r2, r2, rrx
 23f63f6:	ebb6 0e02 	subs.w	lr, r6, r2
 23f63fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f63fe:	bf22      	ittt	cs
 23f6400:	1ab6      	subcs	r6, r6, r2
 23f6402:	4675      	movcs	r5, lr
 23f6404:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23f6408:	085b      	lsrs	r3, r3, #1
 23f640a:	ea4f 0232 	mov.w	r2, r2, rrx
 23f640e:	ebb6 0e02 	subs.w	lr, r6, r2
 23f6412:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f6416:	bf22      	ittt	cs
 23f6418:	1ab6      	subcs	r6, r6, r2
 23f641a:	4675      	movcs	r5, lr
 23f641c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23f6420:	085b      	lsrs	r3, r3, #1
 23f6422:	ea4f 0232 	mov.w	r2, r2, rrx
 23f6426:	ebb6 0e02 	subs.w	lr, r6, r2
 23f642a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f642e:	bf22      	ittt	cs
 23f6430:	1ab6      	subcs	r6, r6, r2
 23f6432:	4675      	movcs	r5, lr
 23f6434:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23f6438:	ea55 0e06 	orrs.w	lr, r5, r6
 23f643c:	d018      	beq.n	23f6470 <__aeabi_ddiv+0x114>
 23f643e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23f6442:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23f6446:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23f644a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23f644e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23f6452:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23f6456:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23f645a:	d1c0      	bne.n	23f63de <__aeabi_ddiv+0x82>
 23f645c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f6460:	d10b      	bne.n	23f647a <__aeabi_ddiv+0x11e>
 23f6462:	ea41 0100 	orr.w	r1, r1, r0
 23f6466:	f04f 0000 	mov.w	r0, #0
 23f646a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23f646e:	e7b6      	b.n	23f63de <__aeabi_ddiv+0x82>
 23f6470:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f6474:	bf04      	itt	eq
 23f6476:	4301      	orreq	r1, r0
 23f6478:	2000      	moveq	r0, #0
 23f647a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23f647e:	bf88      	it	hi
 23f6480:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23f6484:	f63f aeaf 	bhi.w	23f61e6 <__aeabi_dmul+0xde>
 23f6488:	ebb5 0c03 	subs.w	ip, r5, r3
 23f648c:	bf04      	itt	eq
 23f648e:	ebb6 0c02 	subseq.w	ip, r6, r2
 23f6492:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23f6496:	f150 0000 	adcs.w	r0, r0, #0
 23f649a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f649e:	bd70      	pop	{r4, r5, r6, pc}
 23f64a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23f64a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23f64a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23f64ac:	bfc2      	ittt	gt
 23f64ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 23f64b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23f64b6:	bd70      	popgt	{r4, r5, r6, pc}
 23f64b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f64bc:	f04f 0e00 	mov.w	lr, #0
 23f64c0:	3c01      	subs	r4, #1
 23f64c2:	e690      	b.n	23f61e6 <__aeabi_dmul+0xde>
 23f64c4:	ea45 0e06 	orr.w	lr, r5, r6
 23f64c8:	e68d      	b.n	23f61e6 <__aeabi_dmul+0xde>
 23f64ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23f64ce:	ea94 0f0c 	teq	r4, ip
 23f64d2:	bf08      	it	eq
 23f64d4:	ea95 0f0c 	teqeq	r5, ip
 23f64d8:	f43f af3b 	beq.w	23f6352 <__aeabi_dmul+0x24a>
 23f64dc:	ea94 0f0c 	teq	r4, ip
 23f64e0:	d10a      	bne.n	23f64f8 <__aeabi_ddiv+0x19c>
 23f64e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23f64e6:	f47f af34 	bne.w	23f6352 <__aeabi_dmul+0x24a>
 23f64ea:	ea95 0f0c 	teq	r5, ip
 23f64ee:	f47f af25 	bne.w	23f633c <__aeabi_dmul+0x234>
 23f64f2:	4610      	mov	r0, r2
 23f64f4:	4619      	mov	r1, r3
 23f64f6:	e72c      	b.n	23f6352 <__aeabi_dmul+0x24a>
 23f64f8:	ea95 0f0c 	teq	r5, ip
 23f64fc:	d106      	bne.n	23f650c <__aeabi_ddiv+0x1b0>
 23f64fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23f6502:	f43f aefd 	beq.w	23f6300 <__aeabi_dmul+0x1f8>
 23f6506:	4610      	mov	r0, r2
 23f6508:	4619      	mov	r1, r3
 23f650a:	e722      	b.n	23f6352 <__aeabi_dmul+0x24a>
 23f650c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f6510:	bf18      	it	ne
 23f6512:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f6516:	f47f aec5 	bne.w	23f62a4 <__aeabi_dmul+0x19c>
 23f651a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23f651e:	f47f af0d 	bne.w	23f633c <__aeabi_dmul+0x234>
 23f6522:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23f6526:	f47f aeeb 	bne.w	23f6300 <__aeabi_dmul+0x1f8>
 23f652a:	e712      	b.n	23f6352 <__aeabi_dmul+0x24a>

023f652c <__gedf2>:
 23f652c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23f6530:	e006      	b.n	23f6540 <__cmpdf2+0x4>
 23f6532:	bf00      	nop

023f6534 <__ledf2>:
 23f6534:	f04f 0c01 	mov.w	ip, #1
 23f6538:	e002      	b.n	23f6540 <__cmpdf2+0x4>
 23f653a:	bf00      	nop

023f653c <__cmpdf2>:
 23f653c:	f04f 0c01 	mov.w	ip, #1
 23f6540:	f84d cd04 	str.w	ip, [sp, #-4]!
 23f6544:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f6548:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f654c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f6550:	bf18      	it	ne
 23f6552:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23f6556:	d01b      	beq.n	23f6590 <__cmpdf2+0x54>
 23f6558:	b001      	add	sp, #4
 23f655a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23f655e:	bf0c      	ite	eq
 23f6560:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23f6564:	ea91 0f03 	teqne	r1, r3
 23f6568:	bf02      	ittt	eq
 23f656a:	ea90 0f02 	teqeq	r0, r2
 23f656e:	2000      	moveq	r0, #0
 23f6570:	4770      	bxeq	lr
 23f6572:	f110 0f00 	cmn.w	r0, #0
 23f6576:	ea91 0f03 	teq	r1, r3
 23f657a:	bf58      	it	pl
 23f657c:	4299      	cmppl	r1, r3
 23f657e:	bf08      	it	eq
 23f6580:	4290      	cmpeq	r0, r2
 23f6582:	bf2c      	ite	cs
 23f6584:	17d8      	asrcs	r0, r3, #31
 23f6586:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23f658a:	f040 0001 	orr.w	r0, r0, #1
 23f658e:	4770      	bx	lr
 23f6590:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f6594:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f6598:	d102      	bne.n	23f65a0 <__cmpdf2+0x64>
 23f659a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23f659e:	d107      	bne.n	23f65b0 <__cmpdf2+0x74>
 23f65a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f65a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f65a8:	d1d6      	bne.n	23f6558 <__cmpdf2+0x1c>
 23f65aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23f65ae:	d0d3      	beq.n	23f6558 <__cmpdf2+0x1c>
 23f65b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 23f65b4:	4770      	bx	lr
 23f65b6:	bf00      	nop

023f65b8 <__aeabi_cdrcmple>:
 23f65b8:	4684      	mov	ip, r0
 23f65ba:	4610      	mov	r0, r2
 23f65bc:	4662      	mov	r2, ip
 23f65be:	468c      	mov	ip, r1
 23f65c0:	4619      	mov	r1, r3
 23f65c2:	4663      	mov	r3, ip
 23f65c4:	e000      	b.n	23f65c8 <__aeabi_cdcmpeq>
 23f65c6:	bf00      	nop

023f65c8 <__aeabi_cdcmpeq>:
 23f65c8:	b501      	push	{r0, lr}
 23f65ca:	f7ff ffb7 	bl	23f653c <__cmpdf2>
 23f65ce:	2800      	cmp	r0, #0
 23f65d0:	bf48      	it	mi
 23f65d2:	f110 0f00 	cmnmi.w	r0, #0
 23f65d6:	bd01      	pop	{r0, pc}

023f65d8 <__aeabi_dcmpeq>:
 23f65d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f65dc:	f7ff fff4 	bl	23f65c8 <__aeabi_cdcmpeq>
 23f65e0:	bf0c      	ite	eq
 23f65e2:	2001      	moveq	r0, #1
 23f65e4:	2000      	movne	r0, #0
 23f65e6:	f85d fb08 	ldr.w	pc, [sp], #8
 23f65ea:	bf00      	nop

023f65ec <__aeabi_dcmplt>:
 23f65ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f65f0:	f7ff ffea 	bl	23f65c8 <__aeabi_cdcmpeq>
 23f65f4:	bf34      	ite	cc
 23f65f6:	2001      	movcc	r0, #1
 23f65f8:	2000      	movcs	r0, #0
 23f65fa:	f85d fb08 	ldr.w	pc, [sp], #8
 23f65fe:	bf00      	nop

023f6600 <__aeabi_dcmple>:
 23f6600:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f6604:	f7ff ffe0 	bl	23f65c8 <__aeabi_cdcmpeq>
 23f6608:	bf94      	ite	ls
 23f660a:	2001      	movls	r0, #1
 23f660c:	2000      	movhi	r0, #0
 23f660e:	f85d fb08 	ldr.w	pc, [sp], #8
 23f6612:	bf00      	nop

023f6614 <__aeabi_dcmpge>:
 23f6614:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f6618:	f7ff ffce 	bl	23f65b8 <__aeabi_cdrcmple>
 23f661c:	bf94      	ite	ls
 23f661e:	2001      	movls	r0, #1
 23f6620:	2000      	movhi	r0, #0
 23f6622:	f85d fb08 	ldr.w	pc, [sp], #8
 23f6626:	bf00      	nop

023f6628 <__aeabi_dcmpgt>:
 23f6628:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f662c:	f7ff ffc4 	bl	23f65b8 <__aeabi_cdrcmple>
 23f6630:	bf34      	ite	cc
 23f6632:	2001      	movcc	r0, #1
 23f6634:	2000      	movcs	r0, #0
 23f6636:	f85d fb08 	ldr.w	pc, [sp], #8
 23f663a:	bf00      	nop

023f663c <__aeabi_d2uiz>:
 23f663c:	004a      	lsls	r2, r1, #1
 23f663e:	d211      	bcs.n	23f6664 <__aeabi_d2uiz+0x28>
 23f6640:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23f6644:	d211      	bcs.n	23f666a <__aeabi_d2uiz+0x2e>
 23f6646:	d50d      	bpl.n	23f6664 <__aeabi_d2uiz+0x28>
 23f6648:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23f664c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23f6650:	d40e      	bmi.n	23f6670 <__aeabi_d2uiz+0x34>
 23f6652:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23f6656:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23f665a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23f665e:	fa23 f002 	lsr.w	r0, r3, r2
 23f6662:	4770      	bx	lr
 23f6664:	f04f 0000 	mov.w	r0, #0
 23f6668:	4770      	bx	lr
 23f666a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23f666e:	d102      	bne.n	23f6676 <__aeabi_d2uiz+0x3a>
 23f6670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f6674:	4770      	bx	lr
 23f6676:	f04f 0000 	mov.w	r0, #0
 23f667a:	4770      	bx	lr

023f667c <__aeabi_d2f>:
 23f667c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23f6680:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23f6684:	bf24      	itt	cs
 23f6686:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23f668a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23f668e:	d90d      	bls.n	23f66ac <__aeabi_d2f+0x30>
 23f6690:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23f6694:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23f6698:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23f669c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23f66a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23f66a4:	bf08      	it	eq
 23f66a6:	f020 0001 	biceq.w	r0, r0, #1
 23f66aa:	4770      	bx	lr
 23f66ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23f66b0:	d121      	bne.n	23f66f6 <__aeabi_d2f+0x7a>
 23f66b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23f66b6:	bfbc      	itt	lt
 23f66b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23f66bc:	4770      	bxlt	lr
 23f66be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f66c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23f66c6:	f1c2 0218 	rsb	r2, r2, #24
 23f66ca:	f1c2 0c20 	rsb	ip, r2, #32
 23f66ce:	fa10 f30c 	lsls.w	r3, r0, ip
 23f66d2:	fa20 f002 	lsr.w	r0, r0, r2
 23f66d6:	bf18      	it	ne
 23f66d8:	f040 0001 	orrne.w	r0, r0, #1
 23f66dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23f66e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23f66e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 23f66e8:	ea40 000c 	orr.w	r0, r0, ip
 23f66ec:	fa23 f302 	lsr.w	r3, r3, r2
 23f66f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23f66f4:	e7cc      	b.n	23f6690 <__aeabi_d2f+0x14>
 23f66f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23f66fa:	d107      	bne.n	23f670c <__aeabi_d2f+0x90>
 23f66fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23f6700:	bf1e      	ittt	ne
 23f6702:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23f6706:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23f670a:	4770      	bxne	lr
 23f670c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23f6710:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23f6714:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23f6718:	4770      	bx	lr
 23f671a:	bf00      	nop

023f671c <__aeabi_uldivmod>:
 23f671c:	b953      	cbnz	r3, 23f6734 <__aeabi_uldivmod+0x18>
 23f671e:	b94a      	cbnz	r2, 23f6734 <__aeabi_uldivmod+0x18>
 23f6720:	2900      	cmp	r1, #0
 23f6722:	bf08      	it	eq
 23f6724:	2800      	cmpeq	r0, #0
 23f6726:	bf1c      	itt	ne
 23f6728:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 23f672c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23f6730:	f000 b9d4 	b.w	23f6adc <__aeabi_idiv0>
 23f6734:	f1ad 0c08 	sub.w	ip, sp, #8
 23f6738:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23f673c:	f000 f858 	bl	23f67f0 <__udivmoddi4>
 23f6740:	f8dd e004 	ldr.w	lr, [sp, #4]
 23f6744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23f6748:	b004      	add	sp, #16
 23f674a:	4770      	bx	lr

023f674c <__aeabi_f2lz>:
 23f674c:	ee07 0a90 	vmov	s15, r0
 23f6750:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23f6754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f6758:	d401      	bmi.n	23f675e <__aeabi_f2lz+0x12>
 23f675a:	f000 b80b 	b.w	23f6774 <__aeabi_f2ulz>
 23f675e:	eef1 7a67 	vneg.f32	s15, s15
 23f6762:	b508      	push	{r3, lr}
 23f6764:	ee17 0a90 	vmov	r0, s15
 23f6768:	f000 f804 	bl	23f6774 <__aeabi_f2ulz>
 23f676c:	4240      	negs	r0, r0
 23f676e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f6772:	bd08      	pop	{r3, pc}

023f6774 <__aeabi_f2ulz>:
 23f6774:	b5d0      	push	{r4, r6, r7, lr}
 23f6776:	f7ff fc6f 	bl	23f6058 <__aeabi_f2d>
 23f677a:	2200      	movs	r2, #0
 23f677c:	4b0b      	ldr	r3, [pc, #44]	; (23f67ac <__aeabi_f2ulz+0x38>)
 23f677e:	4606      	mov	r6, r0
 23f6780:	460f      	mov	r7, r1
 23f6782:	f7ff fcc1 	bl	23f6108 <__aeabi_dmul>
 23f6786:	f7ff ff59 	bl	23f663c <__aeabi_d2uiz>
 23f678a:	4604      	mov	r4, r0
 23f678c:	f7ff fc42 	bl	23f6014 <__aeabi_ui2d>
 23f6790:	2200      	movs	r2, #0
 23f6792:	4b07      	ldr	r3, [pc, #28]	; (23f67b0 <__aeabi_f2ulz+0x3c>)
 23f6794:	f7ff fcb8 	bl	23f6108 <__aeabi_dmul>
 23f6798:	4602      	mov	r2, r0
 23f679a:	460b      	mov	r3, r1
 23f679c:	4630      	mov	r0, r6
 23f679e:	4639      	mov	r1, r7
 23f67a0:	f7ff fafa 	bl	23f5d98 <__aeabi_dsub>
 23f67a4:	f7ff ff4a 	bl	23f663c <__aeabi_d2uiz>
 23f67a8:	4621      	mov	r1, r4
 23f67aa:	bdd0      	pop	{r4, r6, r7, pc}
 23f67ac:	3df00000 	.word	0x3df00000
 23f67b0:	41f00000 	.word	0x41f00000

023f67b4 <__aeabi_d2ulz>:
 23f67b4:	b5d0      	push	{r4, r6, r7, lr}
 23f67b6:	2200      	movs	r2, #0
 23f67b8:	4b0b      	ldr	r3, [pc, #44]	; (23f67e8 <__aeabi_d2ulz+0x34>)
 23f67ba:	4606      	mov	r6, r0
 23f67bc:	460f      	mov	r7, r1
 23f67be:	f7ff fca3 	bl	23f6108 <__aeabi_dmul>
 23f67c2:	f7ff ff3b 	bl	23f663c <__aeabi_d2uiz>
 23f67c6:	4604      	mov	r4, r0
 23f67c8:	f7ff fc24 	bl	23f6014 <__aeabi_ui2d>
 23f67cc:	2200      	movs	r2, #0
 23f67ce:	4b07      	ldr	r3, [pc, #28]	; (23f67ec <__aeabi_d2ulz+0x38>)
 23f67d0:	f7ff fc9a 	bl	23f6108 <__aeabi_dmul>
 23f67d4:	4602      	mov	r2, r0
 23f67d6:	460b      	mov	r3, r1
 23f67d8:	4630      	mov	r0, r6
 23f67da:	4639      	mov	r1, r7
 23f67dc:	f7ff fadc 	bl	23f5d98 <__aeabi_dsub>
 23f67e0:	f7ff ff2c 	bl	23f663c <__aeabi_d2uiz>
 23f67e4:	4621      	mov	r1, r4
 23f67e6:	bdd0      	pop	{r4, r6, r7, pc}
 23f67e8:	3df00000 	.word	0x3df00000
 23f67ec:	41f00000 	.word	0x41f00000

023f67f0 <__udivmoddi4>:
 23f67f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f67f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23f67f6:	4604      	mov	r4, r0
 23f67f8:	460f      	mov	r7, r1
 23f67fa:	2b00      	cmp	r3, #0
 23f67fc:	d148      	bne.n	23f6890 <__udivmoddi4+0xa0>
 23f67fe:	428a      	cmp	r2, r1
 23f6800:	4694      	mov	ip, r2
 23f6802:	d961      	bls.n	23f68c8 <__udivmoddi4+0xd8>
 23f6804:	fab2 f382 	clz	r3, r2
 23f6808:	b143      	cbz	r3, 23f681c <__udivmoddi4+0x2c>
 23f680a:	f1c3 0120 	rsb	r1, r3, #32
 23f680e:	409f      	lsls	r7, r3
 23f6810:	fa02 fc03 	lsl.w	ip, r2, r3
 23f6814:	409c      	lsls	r4, r3
 23f6816:	fa20 f101 	lsr.w	r1, r0, r1
 23f681a:	430f      	orrs	r7, r1
 23f681c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 23f6820:	fa1f fe8c 	uxth.w	lr, ip
 23f6824:	0c22      	lsrs	r2, r4, #16
 23f6826:	fbb7 f6f1 	udiv	r6, r7, r1
 23f682a:	fb01 7716 	mls	r7, r1, r6, r7
 23f682e:	fb06 f00e 	mul.w	r0, r6, lr
 23f6832:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 23f6836:	4290      	cmp	r0, r2
 23f6838:	d908      	bls.n	23f684c <__udivmoddi4+0x5c>
 23f683a:	eb1c 0202 	adds.w	r2, ip, r2
 23f683e:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 23f6842:	d202      	bcs.n	23f684a <__udivmoddi4+0x5a>
 23f6844:	4290      	cmp	r0, r2
 23f6846:	f200 8137 	bhi.w	23f6ab8 <__udivmoddi4+0x2c8>
 23f684a:	463e      	mov	r6, r7
 23f684c:	1a12      	subs	r2, r2, r0
 23f684e:	b2a4      	uxth	r4, r4
 23f6850:	fbb2 f0f1 	udiv	r0, r2, r1
 23f6854:	fb01 2210 	mls	r2, r1, r0, r2
 23f6858:	fb00 fe0e 	mul.w	lr, r0, lr
 23f685c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 23f6860:	45a6      	cmp	lr, r4
 23f6862:	d908      	bls.n	23f6876 <__udivmoddi4+0x86>
 23f6864:	eb1c 0404 	adds.w	r4, ip, r4
 23f6868:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 23f686c:	d202      	bcs.n	23f6874 <__udivmoddi4+0x84>
 23f686e:	45a6      	cmp	lr, r4
 23f6870:	f200 811c 	bhi.w	23f6aac <__udivmoddi4+0x2bc>
 23f6874:	4610      	mov	r0, r2
 23f6876:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 23f687a:	eba4 040e 	sub.w	r4, r4, lr
 23f687e:	2600      	movs	r6, #0
 23f6880:	b11d      	cbz	r5, 23f688a <__udivmoddi4+0x9a>
 23f6882:	40dc      	lsrs	r4, r3
 23f6884:	2300      	movs	r3, #0
 23f6886:	e9c5 4300 	strd	r4, r3, [r5]
 23f688a:	4631      	mov	r1, r6
 23f688c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f6890:	428b      	cmp	r3, r1
 23f6892:	d909      	bls.n	23f68a8 <__udivmoddi4+0xb8>
 23f6894:	2d00      	cmp	r5, #0
 23f6896:	f000 80fd 	beq.w	23f6a94 <__udivmoddi4+0x2a4>
 23f689a:	2600      	movs	r6, #0
 23f689c:	e9c5 0100 	strd	r0, r1, [r5]
 23f68a0:	4630      	mov	r0, r6
 23f68a2:	4631      	mov	r1, r6
 23f68a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f68a8:	fab3 f683 	clz	r6, r3
 23f68ac:	2e00      	cmp	r6, #0
 23f68ae:	d14b      	bne.n	23f6948 <__udivmoddi4+0x158>
 23f68b0:	428b      	cmp	r3, r1
 23f68b2:	f0c0 80f2 	bcc.w	23f6a9a <__udivmoddi4+0x2aa>
 23f68b6:	4282      	cmp	r2, r0
 23f68b8:	f240 80ef 	bls.w	23f6a9a <__udivmoddi4+0x2aa>
 23f68bc:	4630      	mov	r0, r6
 23f68be:	2d00      	cmp	r5, #0
 23f68c0:	d0e3      	beq.n	23f688a <__udivmoddi4+0x9a>
 23f68c2:	e9c5 4700 	strd	r4, r7, [r5]
 23f68c6:	e7e0      	b.n	23f688a <__udivmoddi4+0x9a>
 23f68c8:	b902      	cbnz	r2, 23f68cc <__udivmoddi4+0xdc>
 23f68ca:	deff      	udf	#255	; 0xff
 23f68cc:	fab2 f382 	clz	r3, r2
 23f68d0:	2b00      	cmp	r3, #0
 23f68d2:	f040 809d 	bne.w	23f6a10 <__udivmoddi4+0x220>
 23f68d6:	1a89      	subs	r1, r1, r2
 23f68d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 23f68dc:	b297      	uxth	r7, r2
 23f68de:	2601      	movs	r6, #1
 23f68e0:	0c20      	lsrs	r0, r4, #16
 23f68e2:	fbb1 f2fe 	udiv	r2, r1, lr
 23f68e6:	fb0e 1112 	mls	r1, lr, r2, r1
 23f68ea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23f68ee:	fb07 f002 	mul.w	r0, r7, r2
 23f68f2:	4288      	cmp	r0, r1
 23f68f4:	d90f      	bls.n	23f6916 <__udivmoddi4+0x126>
 23f68f6:	eb1c 0101 	adds.w	r1, ip, r1
 23f68fa:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 23f68fe:	bf2c      	ite	cs
 23f6900:	f04f 0901 	movcs.w	r9, #1
 23f6904:	f04f 0900 	movcc.w	r9, #0
 23f6908:	4288      	cmp	r0, r1
 23f690a:	d903      	bls.n	23f6914 <__udivmoddi4+0x124>
 23f690c:	f1b9 0f00 	cmp.w	r9, #0
 23f6910:	f000 80cf 	beq.w	23f6ab2 <__udivmoddi4+0x2c2>
 23f6914:	4642      	mov	r2, r8
 23f6916:	1a09      	subs	r1, r1, r0
 23f6918:	b2a4      	uxth	r4, r4
 23f691a:	fbb1 f0fe 	udiv	r0, r1, lr
 23f691e:	fb0e 1110 	mls	r1, lr, r0, r1
 23f6922:	fb00 f707 	mul.w	r7, r0, r7
 23f6926:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 23f692a:	42a7      	cmp	r7, r4
 23f692c:	d908      	bls.n	23f6940 <__udivmoddi4+0x150>
 23f692e:	eb1c 0404 	adds.w	r4, ip, r4
 23f6932:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 23f6936:	d202      	bcs.n	23f693e <__udivmoddi4+0x14e>
 23f6938:	42a7      	cmp	r7, r4
 23f693a:	f200 80b4 	bhi.w	23f6aa6 <__udivmoddi4+0x2b6>
 23f693e:	4608      	mov	r0, r1
 23f6940:	1be4      	subs	r4, r4, r7
 23f6942:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 23f6946:	e79b      	b.n	23f6880 <__udivmoddi4+0x90>
 23f6948:	f1c6 0720 	rsb	r7, r6, #32
 23f694c:	40b3      	lsls	r3, r6
 23f694e:	fa01 f406 	lsl.w	r4, r1, r6
 23f6952:	fa22 fc07 	lsr.w	ip, r2, r7
 23f6956:	40f9      	lsrs	r1, r7
 23f6958:	40b2      	lsls	r2, r6
 23f695a:	ea4c 0c03 	orr.w	ip, ip, r3
 23f695e:	fa20 f307 	lsr.w	r3, r0, r7
 23f6962:	ea4f 491c 	mov.w	r9, ip, lsr #16
 23f6966:	431c      	orrs	r4, r3
 23f6968:	fa1f fe8c 	uxth.w	lr, ip
 23f696c:	fa00 f306 	lsl.w	r3, r0, r6
 23f6970:	0c20      	lsrs	r0, r4, #16
 23f6972:	fbb1 f8f9 	udiv	r8, r1, r9
 23f6976:	fb09 1118 	mls	r1, r9, r8, r1
 23f697a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23f697e:	fb08 f00e 	mul.w	r0, r8, lr
 23f6982:	4288      	cmp	r0, r1
 23f6984:	d90f      	bls.n	23f69a6 <__udivmoddi4+0x1b6>
 23f6986:	eb1c 0101 	adds.w	r1, ip, r1
 23f698a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 23f698e:	bf2c      	ite	cs
 23f6990:	f04f 0b01 	movcs.w	fp, #1
 23f6994:	f04f 0b00 	movcc.w	fp, #0
 23f6998:	4288      	cmp	r0, r1
 23f699a:	d903      	bls.n	23f69a4 <__udivmoddi4+0x1b4>
 23f699c:	f1bb 0f00 	cmp.w	fp, #0
 23f69a0:	f000 808d 	beq.w	23f6abe <__udivmoddi4+0x2ce>
 23f69a4:	46d0      	mov	r8, sl
 23f69a6:	1a09      	subs	r1, r1, r0
 23f69a8:	b2a4      	uxth	r4, r4
 23f69aa:	fbb1 f0f9 	udiv	r0, r1, r9
 23f69ae:	fb09 1110 	mls	r1, r9, r0, r1
 23f69b2:	fb00 fe0e 	mul.w	lr, r0, lr
 23f69b6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 23f69ba:	458e      	cmp	lr, r1
 23f69bc:	d907      	bls.n	23f69ce <__udivmoddi4+0x1de>
 23f69be:	eb1c 0101 	adds.w	r1, ip, r1
 23f69c2:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 23f69c6:	d201      	bcs.n	23f69cc <__udivmoddi4+0x1dc>
 23f69c8:	458e      	cmp	lr, r1
 23f69ca:	d87f      	bhi.n	23f6acc <__udivmoddi4+0x2dc>
 23f69cc:	4620      	mov	r0, r4
 23f69ce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 23f69d2:	eba1 010e 	sub.w	r1, r1, lr
 23f69d6:	fba0 9802 	umull	r9, r8, r0, r2
 23f69da:	4541      	cmp	r1, r8
 23f69dc:	464c      	mov	r4, r9
 23f69de:	46c6      	mov	lr, r8
 23f69e0:	d302      	bcc.n	23f69e8 <__udivmoddi4+0x1f8>
 23f69e2:	d106      	bne.n	23f69f2 <__udivmoddi4+0x202>
 23f69e4:	454b      	cmp	r3, r9
 23f69e6:	d204      	bcs.n	23f69f2 <__udivmoddi4+0x202>
 23f69e8:	3801      	subs	r0, #1
 23f69ea:	ebb9 0402 	subs.w	r4, r9, r2
 23f69ee:	eb68 0e0c 	sbc.w	lr, r8, ip
 23f69f2:	2d00      	cmp	r5, #0
 23f69f4:	d070      	beq.n	23f6ad8 <__udivmoddi4+0x2e8>
 23f69f6:	1b1a      	subs	r2, r3, r4
 23f69f8:	eb61 010e 	sbc.w	r1, r1, lr
 23f69fc:	fa22 f306 	lsr.w	r3, r2, r6
 23f6a00:	fa01 f707 	lsl.w	r7, r1, r7
 23f6a04:	40f1      	lsrs	r1, r6
 23f6a06:	2600      	movs	r6, #0
 23f6a08:	431f      	orrs	r7, r3
 23f6a0a:	e9c5 7100 	strd	r7, r1, [r5]
 23f6a0e:	e73c      	b.n	23f688a <__udivmoddi4+0x9a>
 23f6a10:	fa02 fc03 	lsl.w	ip, r2, r3
 23f6a14:	f1c3 0020 	rsb	r0, r3, #32
 23f6a18:	fa01 f203 	lsl.w	r2, r1, r3
 23f6a1c:	fa21 f600 	lsr.w	r6, r1, r0
 23f6a20:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 23f6a24:	fa24 f100 	lsr.w	r1, r4, r0
 23f6a28:	fa1f f78c 	uxth.w	r7, ip
 23f6a2c:	409c      	lsls	r4, r3
 23f6a2e:	4311      	orrs	r1, r2
 23f6a30:	fbb6 f0fe 	udiv	r0, r6, lr
 23f6a34:	0c0a      	lsrs	r2, r1, #16
 23f6a36:	fb0e 6610 	mls	r6, lr, r0, r6
 23f6a3a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 23f6a3e:	fb00 f607 	mul.w	r6, r0, r7
 23f6a42:	4296      	cmp	r6, r2
 23f6a44:	d90e      	bls.n	23f6a64 <__udivmoddi4+0x274>
 23f6a46:	eb1c 0202 	adds.w	r2, ip, r2
 23f6a4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 23f6a4e:	bf2c      	ite	cs
 23f6a50:	f04f 0901 	movcs.w	r9, #1
 23f6a54:	f04f 0900 	movcc.w	r9, #0
 23f6a58:	4296      	cmp	r6, r2
 23f6a5a:	d902      	bls.n	23f6a62 <__udivmoddi4+0x272>
 23f6a5c:	f1b9 0f00 	cmp.w	r9, #0
 23f6a60:	d031      	beq.n	23f6ac6 <__udivmoddi4+0x2d6>
 23f6a62:	4640      	mov	r0, r8
 23f6a64:	1b92      	subs	r2, r2, r6
 23f6a66:	b289      	uxth	r1, r1
 23f6a68:	fbb2 f6fe 	udiv	r6, r2, lr
 23f6a6c:	fb0e 2216 	mls	r2, lr, r6, r2
 23f6a70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23f6a74:	fb06 f207 	mul.w	r2, r6, r7
 23f6a78:	428a      	cmp	r2, r1
 23f6a7a:	d907      	bls.n	23f6a8c <__udivmoddi4+0x29c>
 23f6a7c:	eb1c 0101 	adds.w	r1, ip, r1
 23f6a80:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 23f6a84:	d201      	bcs.n	23f6a8a <__udivmoddi4+0x29a>
 23f6a86:	428a      	cmp	r2, r1
 23f6a88:	d823      	bhi.n	23f6ad2 <__udivmoddi4+0x2e2>
 23f6a8a:	4646      	mov	r6, r8
 23f6a8c:	1a89      	subs	r1, r1, r2
 23f6a8e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 23f6a92:	e725      	b.n	23f68e0 <__udivmoddi4+0xf0>
 23f6a94:	462e      	mov	r6, r5
 23f6a96:	4628      	mov	r0, r5
 23f6a98:	e6f7      	b.n	23f688a <__udivmoddi4+0x9a>
 23f6a9a:	1a84      	subs	r4, r0, r2
 23f6a9c:	eb61 0303 	sbc.w	r3, r1, r3
 23f6aa0:	2001      	movs	r0, #1
 23f6aa2:	461f      	mov	r7, r3
 23f6aa4:	e70b      	b.n	23f68be <__udivmoddi4+0xce>
 23f6aa6:	4464      	add	r4, ip
 23f6aa8:	3802      	subs	r0, #2
 23f6aaa:	e749      	b.n	23f6940 <__udivmoddi4+0x150>
 23f6aac:	4464      	add	r4, ip
 23f6aae:	3802      	subs	r0, #2
 23f6ab0:	e6e1      	b.n	23f6876 <__udivmoddi4+0x86>
 23f6ab2:	3a02      	subs	r2, #2
 23f6ab4:	4461      	add	r1, ip
 23f6ab6:	e72e      	b.n	23f6916 <__udivmoddi4+0x126>
 23f6ab8:	3e02      	subs	r6, #2
 23f6aba:	4462      	add	r2, ip
 23f6abc:	e6c6      	b.n	23f684c <__udivmoddi4+0x5c>
 23f6abe:	f1a8 0802 	sub.w	r8, r8, #2
 23f6ac2:	4461      	add	r1, ip
 23f6ac4:	e76f      	b.n	23f69a6 <__udivmoddi4+0x1b6>
 23f6ac6:	3802      	subs	r0, #2
 23f6ac8:	4462      	add	r2, ip
 23f6aca:	e7cb      	b.n	23f6a64 <__udivmoddi4+0x274>
 23f6acc:	3802      	subs	r0, #2
 23f6ace:	4461      	add	r1, ip
 23f6ad0:	e77d      	b.n	23f69ce <__udivmoddi4+0x1de>
 23f6ad2:	3e02      	subs	r6, #2
 23f6ad4:	4461      	add	r1, ip
 23f6ad6:	e7d9      	b.n	23f6a8c <__udivmoddi4+0x29c>
 23f6ad8:	462e      	mov	r6, r5
 23f6ada:	e6d6      	b.n	23f688a <__udivmoddi4+0x9a>

023f6adc <__aeabi_idiv0>:
 23f6adc:	4770      	bx	lr
 23f6ade:	bf00      	nop

023f6ae0 <strcmp>:
 23f6ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 23f6ae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 23f6ae8:	2a01      	cmp	r2, #1
 23f6aea:	bf28      	it	cs
 23f6aec:	429a      	cmpcs	r2, r3
 23f6aee:	d0f7      	beq.n	23f6ae0 <strcmp>
 23f6af0:	1ad0      	subs	r0, r2, r3
 23f6af2:	4770      	bx	lr

023f6af4 <strlen>:
 23f6af4:	4603      	mov	r3, r0
 23f6af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f6afa:	2a00      	cmp	r2, #0
 23f6afc:	d1fb      	bne.n	23f6af6 <strlen+0x2>
 23f6afe:	1a18      	subs	r0, r3, r0
 23f6b00:	3801      	subs	r0, #1
 23f6b02:	4770      	bx	lr

023f6b04 <__aeabi_d2lz>:
 23f6b04:	b538      	push	{r3, r4, r5, lr}
 23f6b06:	2200      	movs	r2, #0
 23f6b08:	2300      	movs	r3, #0
 23f6b0a:	4604      	mov	r4, r0
 23f6b0c:	460d      	mov	r5, r1
 23f6b0e:	f7ff fd6d 	bl	23f65ec <__aeabi_dcmplt>
 23f6b12:	b928      	cbnz	r0, 23f6b20 <__aeabi_d2lz+0x1c>
 23f6b14:	4620      	mov	r0, r4
 23f6b16:	4629      	mov	r1, r5
 23f6b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f6b1c:	f7ff be4a 	b.w	23f67b4 <__aeabi_d2ulz>
 23f6b20:	4620      	mov	r0, r4
 23f6b22:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 23f6b26:	f7ff fe45 	bl	23f67b4 <__aeabi_d2ulz>
 23f6b2a:	4240      	negs	r0, r0
 23f6b2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f6b30:	bd38      	pop	{r3, r4, r5, pc}
 23f6b32:	bf00      	nop

023f6b34 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23f6b34:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23f6b36:	f006 f873 	bl	23fcc20 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f6b3a:	2500      	movs	r5, #0
 23f6b3c:	4e05      	ldr	r6, [pc, #20]	; (23f6b54 <module_user_init+0x20>)
 23f6b3e:	4c06      	ldr	r4, [pc, #24]	; (23f6b58 <module_user_init+0x24>)
 23f6b40:	1ba4      	subs	r4, r4, r6
 23f6b42:	08a4      	lsrs	r4, r4, #2
 23f6b44:	42ac      	cmp	r4, r5
 23f6b46:	d100      	bne.n	23f6b4a <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23f6b48:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23f6b4a:	f856 3b04 	ldr.w	r3, [r6], #4
 23f6b4e:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f6b50:	3501      	adds	r5, #1
 23f6b52:	e7f7      	b.n	23f6b44 <module_user_init+0x10>
 23f6b54:	023fffc4 	.word	0x023fffc4
 23f6b58:	023ffff4 	.word	0x023ffff4

023f6b5c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23f6b5c:	f000 b84a 	b.w	23f6bf4 <setup>

023f6b60 <module_user_loop>:
}

void module_user_loop() {
 23f6b60:	b508      	push	{r3, lr}
    loop();
 23f6b62:	f000 f867 	bl	23f6c34 <loop>
    _post_loop();
}
 23f6b66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23f6b6a:	f006 b811 	b.w	23fcb90 <_post_loop>

023f6b6e <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23f6b6e:	f003 b985 	b.w	23f9e7c <malloc>

023f6b72 <_Znaj>:
 23f6b72:	f003 b983 	b.w	23f9e7c <malloc>

023f6b76 <_ZdaPv>:
 23f6b76:	f003 b98f 	b.w	23f9e98 <free>

023f6b7a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23f6b7a:	f003 b98d 	b.w	23f9e98 <free>
	...

023f6b80 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f6b80:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23f6b82:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f6b84:	4a02      	ldr	r2, [pc, #8]	; (23f6b90 <__cxa_pure_virtual+0x10>)
 23f6b86:	4903      	ldr	r1, [pc, #12]	; (23f6b94 <__cxa_pure_virtual+0x14>)
 23f6b88:	f002 ff80 	bl	23f9a8c <panic_>
  while (1);
 23f6b8c:	e7fe      	b.n	23f6b8c <__cxa_pure_virtual+0xc>
 23f6b8e:	bf00      	nop
 23f6b90:	023f94a5 	.word	0x023f94a5
 23f6b94:	023ff2f4 	.word	0x023ff2f4

023f6b98 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23f6b98:	7800      	ldrb	r0, [r0, #0]
 23f6b9a:	fab0 f080 	clz	r0, r0
 23f6b9e:	0940      	lsrs	r0, r0, #5
 23f6ba0:	4770      	bx	lr

023f6ba2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23f6ba2:	2301      	movs	r3, #1
 23f6ba4:	7003      	strb	r3, [r0, #0]
 23f6ba6:	4770      	bx	lr

023f6ba8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23f6ba8:	4770      	bx	lr
	...

023f6bac <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23f6bac:	b510      	push	{r4, lr}
 23f6bae:	4604      	mov	r4, r0
 23f6bb0:	4b09      	ldr	r3, [pc, #36]	; (23f6bd8 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23f6bb2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23f6bb4:	f003 ff06 	bl	23fa9c4 <_ZN5spark10LogManager8instanceEv>
 23f6bb8:	4621      	mov	r1, r4
 23f6bba:	f004 f93d 	bl	23fae38 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23f6bbe:	f005 fefd 	bl	23fc9bc <_Z16_fetch_usbserialv>
 23f6bc2:	f005 feef 	bl	23fc9a4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23f6bc6:	4620      	mov	r0, r4
 23f6bc8:	4b04      	ldr	r3, [pc, #16]	; (23f6bdc <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23f6bca:	f840 3b04 	str.w	r3, [r0], #4
 23f6bce:	f003 ffcf 	bl	23fab70 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23f6bd2:	4620      	mov	r0, r4
 23f6bd4:	bd10      	pop	{r4, pc}
 23f6bd6:	bf00      	nop
 23f6bd8:	023ff340 	.word	0x023ff340
 23f6bdc:	023ff328 	.word	0x023ff328

023f6be0 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23f6be0:	b510      	push	{r4, lr}
 23f6be2:	4604      	mov	r4, r0
    }
 23f6be4:	f7ff ffe2 	bl	23f6bac <_ZN5spark16SerialLogHandlerD1Ev>
 23f6be8:	4620      	mov	r0, r4
 23f6bea:	2124      	movs	r1, #36	; 0x24
 23f6bec:	f7ff ffc5 	bl	23f6b7a <_ZdlPvj>
 23f6bf0:	4620      	mov	r0, r4
 23f6bf2:	bd10      	pop	{r4, pc}

023f6bf4 <setup>:
#define MQTT_LOGGING false
// or show system, cloud connectivity, and application logs over USB
// View logs with CLI using 'particle serial monitor --follow'
SerialLogHandler logHandler(LOG_LEVEL_INFO);

void setup() {
 23f6bf4:	b500      	push	{lr}
    int scan(void (*handler)(WiFiAccessPoint* ap, T* instance), T* instance) {
        return scan((wlan_scan_result_t)handler, (void*)instance);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 23f6bf6:	2000      	movs	r0, #0
 23f6bf8:	b089      	sub	sp, #36	; 0x24
 23f6bfa:	f002 ff39 	bl	23f9a70 <wlan_select_antenna>
//  WiFi.setCredentials(WIFI_SSID, WIFI_PASSWORD);
  WiFi.selectAntenna(ANT_INTERNAL);
  //WiFi.useDynamicIP();

  IoT::begin(MQTT_BROKER, CONTROLLER_NAME, MQTT_LOGGING);
 23f6bfe:	4668      	mov	r0, sp
 23f6c00:	490a      	ldr	r1, [pc, #40]	; (23f6c2c <setup+0x38>)
 23f6c02:	f004 fee4 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
 23f6c06:	490a      	ldr	r1, [pc, #40]	; (23f6c30 <setup+0x3c>)
 23f6c08:	a804      	add	r0, sp, #16
 23f6c0a:	f004 fee0 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
 23f6c0e:	2200      	movs	r2, #0
 23f6c10:	a904      	add	r1, sp, #16
 23f6c12:	4668      	mov	r0, sp
 23f6c14:	f000 fbd0 	bl	23f73b8 <_ZN3IoT5beginE6StringS0_b>
 23f6c18:	a804      	add	r0, sp, #16
 23f6c1a:	f004 fe8d 	bl	23fb938 <_ZN6StringD1Ev>
 23f6c1e:	4668      	mov	r0, sp
 23f6c20:	f004 fe8a 	bl	23fb938 <_ZN6StringD1Ev>
}
 23f6c24:	b009      	add	sp, #36	; 0x24
 23f6c26:	f85d fb04 	ldr.w	pc, [sp], #4
 23f6c2a:	bf00      	nop
 23f6c2c:	023ff309 	.word	0x023ff309
 23f6c30:	023ff316 	.word	0x023ff316

023f6c34 <loop>:

void loop() {
  IoT::loop();
 23f6c34:	f000 b9a2 	b.w	23f6f7c <_ZN3IoT4loopEv>

023f6c38 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f6c38:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f6c3a:	2614      	movs	r6, #20
 23f6c3c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f6c40:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f6c42:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f6c46:	42ae      	cmp	r6, r5
 23f6c48:	d004      	beq.n	23f6c54 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23f6c4a:	4628      	mov	r0, r5
 23f6c4c:	f004 fe74 	bl	23fb938 <_ZN6StringD1Ev>
 23f6c50:	3514      	adds	r5, #20
 23f6c52:	e7f8      	b.n	23f6c46 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f6c54:	6820      	ldr	r0, [r4, #0]
 23f6c56:	f003 f91f 	bl	23f9e98 <free>
    AllocatorT::free(data_);
}
 23f6c5a:	4620      	mov	r0, r4
 23f6c5c:	bd70      	pop	{r4, r5, r6, pc}

023f6c5e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f6c5e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f6c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f6c62:	4604      	mov	r4, r0
 23f6c64:	460d      	mov	r5, r1
 23f6c66:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f6c68:	d916      	bls.n	23f6c98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23f6c6a:	4290      	cmp	r0, r2
 23f6c6c:	d215      	bcs.n	23f6c9a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23f6c6e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f6c72:	1a75      	subs	r5, r6, r1
 23f6c74:	f1a1 0714 	sub.w	r7, r1, #20
 23f6c78:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f6c7a:	42b7      	cmp	r7, r6
 23f6c7c:	d01c      	beq.n	23f6cb8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23f6c7e:	b12c      	cbz	r4, 23f6c8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23f6c80:	4631      	mov	r1, r6
 23f6c82:	4620      	mov	r0, r4
 23f6c84:	f004 fed5 	bl	23fba32 <_ZN6StringC1EOS_>
 23f6c88:	7c33      	ldrb	r3, [r6, #16]
 23f6c8a:	7423      	strb	r3, [r4, #16]
 23f6c8c:	4630      	mov	r0, r6
 23f6c8e:	f004 fe53 	bl	23fb938 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f6c92:	3e14      	subs	r6, #20
 23f6c94:	3c14      	subs	r4, #20
 23f6c96:	e7f0      	b.n	23f6c7a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f6c98:	d00e      	beq.n	23f6cb8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23f6c9a:	42b5      	cmp	r5, r6
 23f6c9c:	d00c      	beq.n	23f6cb8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23f6c9e:	b12c      	cbz	r4, 23f6cac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23f6ca0:	4629      	mov	r1, r5
 23f6ca2:	4620      	mov	r0, r4
 23f6ca4:	f004 fec5 	bl	23fba32 <_ZN6StringC1EOS_>
 23f6ca8:	7c2b      	ldrb	r3, [r5, #16]
 23f6caa:	7423      	strb	r3, [r4, #16]
 23f6cac:	4628      	mov	r0, r5
 23f6cae:	f004 fe43 	bl	23fb938 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f6cb2:	3514      	adds	r5, #20
 23f6cb4:	3414      	adds	r4, #20
 23f6cb6:	e7f0      	b.n	23f6c9a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23f6cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f6cba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23f6cba:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f6cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23f6cc0:	e9c0 3300 	strd	r3, r3, [r0]
 23f6cc4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f6cc6:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f6cc8:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f6cca:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f6ccc:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f6cce:	dd24      	ble.n	23f6d1a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23f6cd0:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23f6cd4:	fb08 f007 	mul.w	r0, r8, r7
 23f6cd8:	f003 f8d0 	bl	23f9e7c <malloc>
            if (!d) {
 23f6cdc:	4605      	mov	r5, r0
 23f6cde:	b1e0      	cbz	r0, 23f6d1a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23f6ce0:	e9d4 1200 	ldrd	r1, r2, [r4]
 23f6ce4:	fb08 1202 	mla	r2, r8, r2, r1
 23f6ce8:	f7ff ffb9 	bl	23f6c5e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f6cec:	6820      	ldr	r0, [r4, #0]
 23f6cee:	f003 f8d3 	bl	23f9e98 <free>
        data_ = d;
 23f6cf2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23f6cf4:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f6cf6:	e9d6 7300 	ldrd	r7, r3, [r6]
 23f6cfa:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23f6cfe:	45b8      	cmp	r8, r7
 23f6d00:	d009      	beq.n	23f6d16 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23f6d02:	4639      	mov	r1, r7
 23f6d04:	4628      	mov	r0, r5
 23f6d06:	f004 feae 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f6d0a:	7c3b      	ldrb	r3, [r7, #16]
 23f6d0c:	3514      	adds	r5, #20
 23f6d0e:	f805 3c04 	strb.w	r3, [r5, #-4]
 23f6d12:	3714      	adds	r7, #20
 23f6d14:	e7f3      	b.n	23f6cfe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23f6d16:	6873      	ldr	r3, [r6, #4]
 23f6d18:	6063      	str	r3, [r4, #4]
}
 23f6d1a:	4620      	mov	r0, r4
 23f6d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f6d20 <_GLOBAL__sub_I_SystemMode>:
}
 23f6d20:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23f6d22:	2400      	movs	r4, #0
 23f6d24:	4b23      	ldr	r3, [pc, #140]	; (23f6db4 <_GLOBAL__sub_I_SystemMode+0x94>)
    SleepResult() {}
 23f6d26:	4a24      	ldr	r2, [pc, #144]	; (23f6db8 <_GLOBAL__sub_I_SystemMode+0x98>)
 23f6d28:	b08c      	sub	sp, #48	; 0x30
 23f6d2a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
 23f6d2c:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23f6d30:	2001      	movs	r0, #1
 23f6d32:	f002 feff 	bl	23f9b34 <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23f6d36:	4621      	mov	r1, r4
 23f6d38:	2001      	movs	r0, #1
 23f6d3a:	f002 ff25 	bl	23f9b88 <system_thread_set_state>
        capacity_(0) {
 23f6d3e:	e9cd 4400 	strd	r4, r4, [sp]
 23f6d42:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23f6d44:	f005 fe3a 	bl	23fc9bc <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23f6d48:	4c1c      	ldr	r4, [pc, #112]	; (23f6dbc <_GLOBAL__sub_I_SystemMode+0x9c>)
 23f6d4a:	4605      	mov	r5, r0
 23f6d4c:	4626      	mov	r6, r4
 23f6d4e:	4669      	mov	r1, sp
 23f6d50:	a803      	add	r0, sp, #12
 23f6d52:	f7ff ffb2 	bl	23f6cba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 23f6d56:	a903      	add	r1, sp, #12
 23f6d58:	a806      	add	r0, sp, #24
 23f6d5a:	f7ff ffae 	bl	23f6cba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f6d5e:	4b18      	ldr	r3, [pc, #96]	; (23f6dc0 <_GLOBAL__sub_I_SystemMode+0xa0>)
 23f6d60:	a906      	add	r1, sp, #24
 23f6d62:	f846 3b04 	str.w	r3, [r6], #4
 23f6d66:	a809      	add	r0, sp, #36	; 0x24
 23f6d68:	f7ff ffa7 	bl	23f6cba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f6d6c:	aa09      	add	r2, sp, #36	; 0x24
 23f6d6e:	211e      	movs	r1, #30
 23f6d70:	4630      	mov	r0, r6
 23f6d72:	f004 f943 	bl	23faffc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f6d76:	a809      	add	r0, sp, #36	; 0x24
 23f6d78:	f7ff ff5e 	bl	23f6c38 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f6d7c:	a806      	add	r0, sp, #24
 23f6d7e:	f7ff ff5b 	bl	23f6c38 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f6d82:	4b10      	ldr	r3, [pc, #64]	; (23f6dc4 <_GLOBAL__sub_I_SystemMode+0xa4>)
 23f6d84:	6225      	str	r5, [r4, #32]
 23f6d86:	6023      	str	r3, [r4, #0]
 23f6d88:	a803      	add	r0, sp, #12
 23f6d8a:	f7ff ff55 	bl	23f6c38 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f6d8e:	4b0e      	ldr	r3, [pc, #56]	; (23f6dc8 <_GLOBAL__sub_I_SystemMode+0xa8>)
 23f6d90:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23f6d92:	f005 fe13 	bl	23fc9bc <_Z16_fetch_usbserialv>
 23f6d96:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f6d9a:	f005 fdff 	bl	23fc99c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23f6d9e:	f003 fe11 	bl	23fa9c4 <_ZN5spark10LogManager8instanceEv>
 23f6da2:	4621      	mov	r1, r4
 23f6da4:	f004 f802 	bl	23fadac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
 23f6da8:	4668      	mov	r0, sp
 23f6daa:	f7ff ff45 	bl	23f6c38 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23f6dae:	b00c      	add	sp, #48	; 0x30
 23f6db0:	bd70      	pop	{r4, r5, r6, pc}
 23f6db2:	bf00      	nop
 23f6db4:	1007acc0 	.word	0x1007acc0
 23f6db8:	ffff0000 	.word	0xffff0000
 23f6dbc:	1007accc 	.word	0x1007accc
 23f6dc0:	023ff328 	.word	0x023ff328
 23f6dc4:	023ff8cc 	.word	0x023ff8cc
 23f6dc8:	023ff340 	.word	0x023ff340

023f6dcc <_Z18outOfMemoryHandleryi>:
MQTTManager* IoT::_mqttManager = NULL;

int          outOfMemory = -1;

void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
 23f6dcc:	4b01      	ldr	r3, [pc, #4]	; (23f6dd4 <_Z18outOfMemoryHandleryi+0x8>)
 23f6dce:	601a      	str	r2, [r3, #0]
}
 23f6dd0:	4770      	bx	lr
 23f6dd2:	bf00      	nop
 23f6dd4:	1007aacc 	.word	0x1007aacc

023f6dd8 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
 23f6dd8:	b530      	push	{r4, r5, lr}
 23f6dda:	b085      	sub	sp, #20
 23f6ddc:	4604      	mov	r4, r0
 23f6dde:	9808      	ldr	r0, [sp, #32]
        if (!context) {
 23f6de0:	b160      	cbz	r0, 23f6dfc <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
 23f6de2:	6840      	ldr	r0, [r0, #4]
 23f6de4:	b150      	cbz	r0, 23f6dfc <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
 23f6de6:	6885      	ldr	r5, [r0, #8]
 23f6de8:	b145      	cbz	r5, 23f6dfc <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
 23f6dea:	e9cd 4102 	strd	r4, r1, [sp, #8]
 23f6dee:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f6df2:	68c4      	ldr	r4, [r0, #12]
 23f6df4:	466a      	mov	r2, sp
 23f6df6:	ab01      	add	r3, sp, #4
 23f6df8:	a902      	add	r1, sp, #8
 23f6dfa:	47a0      	blx	r4
    }
 23f6dfc:	b005      	add	sp, #20
 23f6dfe:	bd30      	pop	{r4, r5, pc}

023f6e00 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f6e00:	b530      	push	{r4, r5, lr}
 23f6e02:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 23f6e04:	6800      	ldr	r0, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f6e06:	b085      	sub	sp, #20
 23f6e08:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 23f6e0a:	6883      	ldr	r3, [r0, #8]
 23f6e0c:	e9d1 4500 	ldrd	r4, r5, [r1]
 23f6e10:	e9cd 4502 	strd	r4, r5, [sp, #8]
 23f6e14:	b90b      	cbnz	r3, 23f6e1a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
 23f6e16:	f006 f8b7 	bl	23fcf88 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f6e1a:	68c3      	ldr	r3, [r0, #12]
 23f6e1c:	aa01      	add	r2, sp, #4
 23f6e1e:	a902      	add	r1, sp, #8
 23f6e20:	4798      	blx	r3
      }
 23f6e22:	b005      	add	sp, #20
 23f6e24:	bd30      	pop	{r4, r5, pc}

023f6e26 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 23f6e26:	2a01      	cmp	r2, #1
 23f6e28:	d102      	bne.n	23f6e30 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f6e2a:	6001      	str	r1, [r0, #0]
      }
 23f6e2c:	2000      	movs	r0, #0
 23f6e2e:	4770      	bx	lr
	  switch (__op)
 23f6e30:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f6e32:	bf04      	itt	eq
 23f6e34:	680b      	ldreq	r3, [r1, #0]
 23f6e36:	6003      	streq	r3, [r0, #0]
	      break;
 23f6e38:	e7f8      	b.n	23f6e2c <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

023f6e3a <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23f6e3a:	6803      	ldr	r3, [r0, #0]
 23f6e3c:	6812      	ldr	r2, [r2, #0]
 23f6e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f6e42:	4718      	bx	r3

023f6e44 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23f6e44:	b510      	push	{r4, lr}
      if (_M_manager)
 23f6e46:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23f6e48:	4604      	mov	r4, r0
      if (_M_manager)
 23f6e4a:	b113      	cbz	r3, 23f6e52 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f6e4c:	2203      	movs	r2, #3
 23f6e4e:	4601      	mov	r1, r0
 23f6e50:	4798      	blx	r3
    }
 23f6e52:	4620      	mov	r0, r4
 23f6e54:	bd10      	pop	{r4, pc}

023f6e56 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
 23f6e56:	b510      	push	{r4, lr}
            delete callableWrapper;
 23f6e58:	4604      	mov	r4, r0
 23f6e5a:	b138      	cbz	r0, 23f6e6c <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
 23f6e5c:	f7ff fff2 	bl	23f6e44 <_ZNSt14_Function_baseD1Ev>
 23f6e60:	4620      	mov	r0, r4
        };
 23f6e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
 23f6e66:	2110      	movs	r1, #16
 23f6e68:	f7ff be87 	b.w	23f6b7a <_ZdlPvj>
        };
 23f6e6c:	bd10      	pop	{r4, pc}
	...

023f6e70 <__tcf_1>:
     * @brief Get the hardware watchdog instance.
     * 
     * @return The hardware watchdog singlton.
     */
    static WatchdogClass& getInstance() {
        static WatchdogClass watchdog;
 23f6e70:	b508      	push	{r3, lr}
 23f6e72:	4802      	ldr	r0, [pc, #8]	; (23f6e7c <__tcf_1+0xc>)
 23f6e74:	f7ff ffe6 	bl	23f6e44 <_ZNSt14_Function_baseD1Ev>
 23f6e78:	bd08      	pop	{r3, pc}
 23f6e7a:	bf00      	nop
 23f6e7c:	1007acf4 	.word	0x1007acf4

023f6e80 <_ZN8particle13WatchdogClass11getInstanceEv>:
    static WatchdogClass& getInstance() {
 23f6e80:	b538      	push	{r3, r4, r5, lr}
        static WatchdogClass watchdog;
 23f6e82:	4d0a      	ldr	r5, [pc, #40]	; (23f6eac <_ZN8particle13WatchdogClass11getInstanceEv+0x2c>)
 23f6e84:	e8d5 4f8f 	ldab	r4, [r5]
 23f6e88:	f014 0401 	ands.w	r4, r4, #1
 23f6e8c:	d10c      	bne.n	23f6ea8 <_ZN8particle13WatchdogClass11getInstanceEv+0x28>
 23f6e8e:	4628      	mov	r0, r5
 23f6e90:	f7ff fe82 	bl	23f6b98 <__cxa_guard_acquire>
 23f6e94:	b140      	cbz	r0, 23f6ea8 <_ZN8particle13WatchdogClass11getInstanceEv+0x28>
    _Function_base() : _M_manager(nullptr) { }
 23f6e96:	4b06      	ldr	r3, [pc, #24]	; (23f6eb0 <_ZN8particle13WatchdogClass11getInstanceEv+0x30>)
 23f6e98:	4628      	mov	r0, r5
 23f6e9a:	609c      	str	r4, [r3, #8]
    }

private:
    WatchdogClass()
            : callback_(nullptr),
              instance_(HAL_WATCHDOG_INSTANCE1) {
 23f6e9c:	741c      	strb	r4, [r3, #16]
        static WatchdogClass watchdog;
 23f6e9e:	f7ff fe80 	bl	23f6ba2 <__cxa_guard_release>
 23f6ea2:	4804      	ldr	r0, [pc, #16]	; (23f6eb4 <_ZN8particle13WatchdogClass11getInstanceEv+0x34>)
 23f6ea4:	f006 f9b6 	bl	23fd214 <atexit>
    }
 23f6ea8:	4801      	ldr	r0, [pc, #4]	; (23f6eb0 <_ZN8particle13WatchdogClass11getInstanceEv+0x30>)
 23f6eaa:	bd38      	pop	{r3, r4, r5, pc}
 23f6eac:	1007acf0 	.word	0x1007acf0
 23f6eb0:	1007acf4 	.word	0x1007acf4
 23f6eb4:	023f6e71 	.word	0x023f6e71

023f6eb8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23f6eb8:	b510      	push	{r4, lr}
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23f6eba:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23f6ebe:	4604      	mov	r4, r0
 23f6ec0:	4608      	mov	r0, r1
    attr.flags = 0;
 23f6ec2:	2100      	movs	r1, #0
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23f6ec4:	b08a      	sub	sp, #40	; 0x28
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f6ec6:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
 23f6eca:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f6ece:	460b      	mov	r3, r1
 23f6ed0:	aa02      	add	r2, sp, #8
 23f6ed2:	6821      	ldr	r1, [r4, #0]
 23f6ed4:	f002 fdf6 	bl	23f9ac4 <log_message_v>
}
 23f6ed8:	b00a      	add	sp, #40	; 0x28
 23f6eda:	bd10      	pop	{r4, pc}

023f6edc <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
 23f6edc:	b40e      	push	{r1, r2, r3}
 23f6ede:	b503      	push	{r0, r1, lr}
 23f6ee0:	ab03      	add	r3, sp, #12
 23f6ee2:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_ERROR, fmt, args);
 23f6ee6:	2132      	movs	r1, #50	; 0x32
    va_start(args, fmt);
 23f6ee8:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
 23f6eea:	f7ff ffe5 	bl	23f6eb8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f6eee:	b002      	add	sp, #8
 23f6ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 23f6ef4:	b003      	add	sp, #12
 23f6ef6:	4770      	bx	lr

023f6ef8 <_ZNK5spark6Logger4infoEPKcz>:
inline void spark::Logger::info(const char *fmt, ...) const {
 23f6ef8:	b40e      	push	{r1, r2, r3}
 23f6efa:	b503      	push	{r0, r1, lr}
 23f6efc:	ab03      	add	r3, sp, #12
 23f6efe:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_INFO, fmt, args);
 23f6f02:	211e      	movs	r1, #30
    va_start(args, fmt);
 23f6f04:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_INFO, fmt, args);
 23f6f06:	f7ff ffd7 	bl	23f6eb8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f6f0a:	b002      	add	sp, #8
 23f6f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 23f6f10:	b003      	add	sp, #12
 23f6f12:	4770      	bx	lr

023f6f14 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
 23f6f14:	b40e      	push	{r1, r2, r3}
 23f6f16:	b503      	push	{r0, r1, lr}
 23f6f18:	ab03      	add	r3, sp, #12
 23f6f1a:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_TRACE, fmt, args);
 23f6f1e:	2101      	movs	r1, #1
    va_start(args, fmt);
 23f6f20:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
 23f6f22:	f7ff ffc9 	bl	23f6eb8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f6f26:	b002      	add	sp, #8
 23f6f28:	f85d eb04 	ldr.w	lr, [sp], #4
 23f6f2c:	b003      	add	sp, #12
 23f6f2e:	4770      	bx	lr

023f6f30 <_ZN3IoT13startWatchdogEv>:

/**
 * Hardware Watchdog
 */
void IoT::startWatchdog()
{
 23f6f30:	b500      	push	{lr}
            : info_{} {
 23f6f32:	4b0f      	ldr	r3, [pc, #60]	; (23f6f70 <_ZN3IoT13startWatchdogEv+0x40>)
 23f6f34:	b097      	sub	sp, #92	; 0x5c
 23f6f36:	2220      	movs	r2, #32
 23f6f38:	2100      	movs	r1, #0
 23f6f3a:	a80e      	add	r0, sp, #56	; 0x38
 23f6f3c:	930d      	str	r3, [sp, #52]	; 0x34
 23f6f3e:	f006 f9ae 	bl	23fd29e <memset>
    // Getting capabiltiies
    WatchdogInfo info;
    Watchdog.getInfo(info);
 23f6f42:	f7ff ff9d 	bl	23f6e80 <_ZN8particle13WatchdogClass11getInstanceEv>
 23f6f46:	a904      	add	r1, sp, #16
 23f6f48:	f005 fd69 	bl	23fca1e <_ZN8particle13WatchdogClass7getInfoERNS_12WatchdogInfoE>
    WatchdogCaps mandatoryCaps = info.mandatoryCapabilities();

    // Get the capabilities that can be turned off
    WatchdogCaps optionalCaps = info.capabilities();
    
    Watchdog.init(WatchdogConfiguration().timeout(300s));
 23f6f4c:	f7ff ff98 	bl	23f6e80 <_ZN8particle13WatchdogClass11getInstanceEv>
        config_.timeout_ms = ms;
 23f6f50:	4a08      	ldr	r2, [pc, #32]	; (23f6f74 <_ZN3IoT13startWatchdogEv+0x44>)
 23f6f52:	4b09      	ldr	r3, [pc, #36]	; (23f6f78 <_ZN3IoT13startWatchdogEv+0x48>)
 23f6f54:	a901      	add	r1, sp, #4
 23f6f56:	e9cd 2301 	strd	r2, r3, [sp, #4]
        config_.enable_caps = HAL_WATCHDOG_CAPS_RESET | HAL_WATCHDOG_CAPS_SLEEP_RUNNING;
 23f6f5a:	2321      	movs	r3, #33	; 0x21
 23f6f5c:	9303      	str	r3, [sp, #12]
 23f6f5e:	f005 fd51 	bl	23fca04 <_ZN8particle13WatchdogClass4initERKNS_21WatchdogConfigurationE>
    Watchdog.start();
 23f6f62:	f7ff ff8d 	bl	23f6e80 <_ZN8particle13WatchdogClass11getInstanceEv>
 23f6f66:	f005 fd52 	bl	23fca0e <_ZN8particle13WatchdogClass5startEv>
}
 23f6f6a:	b017      	add	sp, #92	; 0x5c
 23f6f6c:	f85d fb04 	ldr.w	pc, [sp], #4
 23f6f70:	00010024 	.word	0x00010024
 23f6f74:	0001000c 	.word	0x0001000c
 23f6f78:	000493e0 	.word	0x000493e0

023f6f7c <_ZN3IoT4loopEv>:
/**
 * Loop method must be called periodically,
 * typically from the sketch loop() method.
 */
void IoT::loop()
{
 23f6f7c:	b508      	push	{r3, lr}
    Device::loopAll();
 23f6f7e:	f001 fc73 	bl	23f8868 <_ZN6Device7loopAllEv>
    _mqttManager->loop();
 23f6f82:	4b0c      	ldr	r3, [pc, #48]	; (23f6fb4 <_ZN3IoT4loopEv+0x38>)
 23f6f84:	6818      	ldr	r0, [r3, #0]
 23f6f86:	f001 fa43 	bl	23f8410 <_ZN11MQTTManager4loopEv>

    //TODO: enable only for Photon 2
    if (outOfMemory >= 0) {
 23f6f8a:	4b0b      	ldr	r3, [pc, #44]	; (23f6fb8 <_ZN3IoT4loopEv+0x3c>)
 23f6f8c:	681a      	ldr	r2, [r3, #0]
 23f6f8e:	2a00      	cmp	r2, #0
 23f6f90:	db09      	blt.n	23f6fa6 <_ZN3IoT4loopEv+0x2a>
        // An out of memory condition occurred - reset device.
        Log.error("out of memory occurred size=%d", outOfMemory);
 23f6f92:	490a      	ldr	r1, [pc, #40]	; (23f6fbc <_ZN3IoT4loopEv+0x40>)
 23f6f94:	480a      	ldr	r0, [pc, #40]	; (23f6fc0 <_ZN3IoT4loopEv+0x44>)
 23f6f96:	f7ff ffa1 	bl	23f6edc <_ZNK5spark6Logger5errorEPKcz>
        delay(2000);
 23f6f9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23f6f9e:	f003 f823 	bl	23f9fe8 <delay>
        System.reset();
 23f6fa2:	f004 ff67 	bl	23fbe74 <_ZN11SystemClass5resetEv>
//        Log.info("Performing daily reboot");
//        delay(500);
//        System.reset();
//    }
    
    Watchdog.refresh();
 23f6fa6:	f7ff ff6b 	bl	23f6e80 <_ZN8particle13WatchdogClass11getInstanceEv>
    
}
 23f6faa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Watchdog.refresh();
 23f6fae:	f005 bd32 	b.w	23fca16 <_ZN8particle13WatchdogClass7refreshEv>
 23f6fb2:	bf00      	nop
 23f6fb4:	1007ad58 	.word	0x1007ad58
 23f6fb8:	1007aacc 	.word	0x1007aacc
 23f6fbc:	023ff350 	.word	0x023ff350
 23f6fc0:	1007ae1c 	.word	0x1007ae1c

023f6fc4 <_ZN3IoT16subscribeHandlerEPKcS1_>:
 * Particle.io Subscribe Handler
 * t:patriot m:<device>:<value>
 * This method handles commands from Particle Cloud (was Alexa)
 */
void IoT::subscribeHandler(const char *eventName, const char *rawData)
{
 23f6fc4:	b510      	push	{r4, lr}
 23f6fc6:	b090      	sub	sp, #64	; 0x40
 23f6fc8:	4604      	mov	r4, r0
    String data = String(rawData).trim();
 23f6fca:	a80c      	add	r0, sp, #48	; 0x30
 23f6fcc:	f004 fcff 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
 23f6fd0:	a80c      	add	r0, sp, #48	; 0x30
 23f6fd2:	f004 fed6 	bl	23fbd82 <_ZN6String4trimEv>
 23f6fd6:	4601      	mov	r1, r0
 23f6fd8:	4668      	mov	r0, sp
 23f6fda:	f004 fd44 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f6fde:	a80c      	add	r0, sp, #48	; 0x30
 23f6fe0:	f004 fcaa 	bl	23fb938 <_ZN6StringD1Ev>
    String event(eventName);
 23f6fe4:	4621      	mov	r1, r4
 23f6fe6:	a804      	add	r0, sp, #16
 23f6fe8:	f004 fcf1 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>

class StringSumHelper : public String
{
public:
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
 23f6fec:	491d      	ldr	r1, [pc, #116]	; (23f7064 <_ZN3IoT16subscribeHandlerEPKcS1_+0xa0>)
 23f6fee:	a80c      	add	r0, sp, #48	; 0x30
 23f6ff0:	f004 fced 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
    
    Log.info("Particle.io subscribe received data: '"+event+"', '"+data+"'");
 23f6ff4:	a904      	add	r1, sp, #16
 23f6ff6:	a80c      	add	r0, sp, #48	; 0x30
 23f6ff8:	f004 fde0 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f6ffc:	491a      	ldr	r1, [pc, #104]	; (23f7068 <_ZN3IoT16subscribeHandlerEPKcS1_+0xa4>)
 23f6ffe:	f004 fde9 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f7002:	4669      	mov	r1, sp
 23f7004:	f004 fdda 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f7008:	4918      	ldr	r1, [pc, #96]	; (23f706c <_ZN3IoT16subscribeHandlerEPKcS1_+0xa8>)
 23f700a:	f004 fde3 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f700e:	6801      	ldr	r1, [r0, #0]
 23f7010:	4817      	ldr	r0, [pc, #92]	; (23f7070 <_ZN3IoT16subscribeHandlerEPKcS1_+0xac>)
 23f7012:	f7ff ff71 	bl	23f6ef8 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f7016:	a80c      	add	r0, sp, #48	; 0x30
 23f7018:	f004 fc8e 	bl	23fb938 <_ZN6StringD1Ev>
    
    _mqttManager->parsePatriotMessage(event.toLowerCase(), data.toLowerCase());
 23f701c:	4b15      	ldr	r3, [pc, #84]	; (23f7074 <_ZN3IoT16subscribeHandlerEPKcS1_+0xb0>)
 23f701e:	a804      	add	r0, sp, #16
 23f7020:	681c      	ldr	r4, [r3, #0]
 23f7022:	f004 fea0 	bl	23fbd66 <_ZN6String11toLowerCaseEv>
 23f7026:	4601      	mov	r1, r0
 23f7028:	a808      	add	r0, sp, #32
 23f702a:	f004 fd1c 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f702e:	4668      	mov	r0, sp
 23f7030:	f004 fe99 	bl	23fbd66 <_ZN6String11toLowerCaseEv>
 23f7034:	4601      	mov	r1, r0
 23f7036:	a80c      	add	r0, sp, #48	; 0x30
 23f7038:	f004 fd15 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f703c:	aa0c      	add	r2, sp, #48	; 0x30
 23f703e:	a908      	add	r1, sp, #32
 23f7040:	4620      	mov	r0, r4
 23f7042:	f000 fd19 	bl	23f7a78 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_>
 23f7046:	a80c      	add	r0, sp, #48	; 0x30
 23f7048:	f004 fc76 	bl	23fb938 <_ZN6StringD1Ev>
 23f704c:	a808      	add	r0, sp, #32
 23f704e:	f004 fc73 	bl	23fb938 <_ZN6StringD1Ev>
    String event(eventName);
 23f7052:	a804      	add	r0, sp, #16
 23f7054:	f004 fc70 	bl	23fb938 <_ZN6StringD1Ev>
    String data = String(rawData).trim();
 23f7058:	4668      	mov	r0, sp
 23f705a:	f004 fc6d 	bl	23fb938 <_ZN6StringD1Ev>
}
 23f705e:	b010      	add	sp, #64	; 0x40
 23f7060:	bd10      	pop	{r4, pc}
 23f7062:	bf00      	nop
 23f7064:	023ff36f 	.word	0x023ff36f
 23f7068:	023ff396 	.word	0x023ff396
 23f706c:	023ff399 	.word	0x023ff399
 23f7070:	1007ae1c 	.word	0x1007ae1c
 23f7074:	1007ad58 	.word	0x1007ad58

023f7078 <_ZN3IoT11mqttHandlerEPcPhj>:

/**
 MQTT Subscribe Handler
 */
void IoT::mqttHandler(char* rawTopic, byte* payload, unsigned int length)
{
 23f7078:	b5f0      	push	{r4, r5, r6, r7, lr}
    char p[length + 1];
 23f707a:	f102 0308 	add.w	r3, r2, #8
{
 23f707e:	b099      	sub	sp, #100	; 0x64
    char p[length + 1];
 23f7080:	f023 0307 	bic.w	r3, r3, #7

    if(topic.startsWith("log")) {
        return;
    }
    _mqttManager->parseMQTTMessage(lcTopic, lcMessage);
    Device::mqttAll(lcTopic, lcMessage);
 23f7084:	466e      	mov	r6, sp
{
 23f7086:	af00      	add	r7, sp, #0
    char p[length + 1];
 23f7088:	ebad 0d03 	sub.w	sp, sp, r3
{
 23f708c:	4605      	mov	r5, r0
    memcpy(p, payload, length);
 23f708e:	4668      	mov	r0, sp
{
 23f7090:	4614      	mov	r4, r2
    memcpy(p, payload, length);
 23f7092:	f006 f8dd 	bl	23fd250 <memcpy>
    p[length] = 0;
 23f7096:	2300      	movs	r3, #0
    String message(p);
 23f7098:	4669      	mov	r1, sp
    p[length] = 0;
 23f709a:	f80d 3004 	strb.w	r3, [sp, r4]
    String message(p);
 23f709e:	4638      	mov	r0, r7
 23f70a0:	f004 fc95 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
    String lcMessage = message.toLowerCase();
 23f70a4:	4638      	mov	r0, r7
 23f70a6:	f004 fe5e 	bl	23fbd66 <_ZN6String11toLowerCaseEv>
 23f70aa:	4601      	mov	r1, r0
 23f70ac:	f107 0010 	add.w	r0, r7, #16
 23f70b0:	f004 fcd9 	bl	23fba66 <_ZN6StringC1ERKS_>
    String topic(rawTopic);
 23f70b4:	4629      	mov	r1, r5
 23f70b6:	f107 0020 	add.w	r0, r7, #32
 23f70ba:	f004 fc88 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
    String lcTopic = topic.toLowerCase();
 23f70be:	f107 0020 	add.w	r0, r7, #32
 23f70c2:	f004 fe50 	bl	23fbd66 <_ZN6String11toLowerCaseEv>
 23f70c6:	4601      	mov	r1, r0
 23f70c8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 23f70cc:	f004 fccb 	bl	23fba66 <_ZN6StringC1ERKS_>
    if(topic.startsWith("log")) {
 23f70d0:	492d      	ldr	r1, [pc, #180]	; (23f7188 <_ZN3IoT11mqttHandlerEPcPhj+0x110>)
 23f70d2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 23f70d6:	f004 fc7a 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
 23f70da:	f107 0150 	add.w	r1, r7, #80	; 0x50
 23f70de:	f107 0020 	add.w	r0, r7, #32
 23f70e2:	f004 fdf1 	bl	23fbcc8 <_ZNK6String10startsWithERKS_>
 23f70e6:	4604      	mov	r4, r0
 23f70e8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 23f70ec:	f004 fc24 	bl	23fb938 <_ZN6StringD1Ev>
 23f70f0:	b194      	cbz	r4, 23f7118 <_ZN3IoT11mqttHandlerEPcPhj+0xa0>
    String lcTopic = topic.toLowerCase();
 23f70f2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 23f70f6:	f004 fc1f 	bl	23fb938 <_ZN6StringD1Ev>
    String topic(rawTopic);
 23f70fa:	f107 0020 	add.w	r0, r7, #32
 23f70fe:	f004 fc1b 	bl	23fb938 <_ZN6StringD1Ev>
    String lcMessage = message.toLowerCase();
 23f7102:	f107 0010 	add.w	r0, r7, #16
 23f7106:	f004 fc17 	bl	23fb938 <_ZN6StringD1Ev>
    String message(p);
 23f710a:	4638      	mov	r0, r7
 23f710c:	f004 fc14 	bl	23fb938 <_ZN6StringD1Ev>
 23f7110:	46b5      	mov	sp, r6
}
 23f7112:	3764      	adds	r7, #100	; 0x64
 23f7114:	46bd      	mov	sp, r7
 23f7116:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _mqttManager->parseMQTTMessage(lcTopic, lcMessage);
 23f7118:	4b1c      	ldr	r3, [pc, #112]	; (23f718c <_ZN3IoT11mqttHandlerEPcPhj+0x114>)
 23f711a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 23f711e:	681c      	ldr	r4, [r3, #0]
 23f7120:	f107 0040 	add.w	r0, r7, #64	; 0x40
 23f7124:	f004 fc9f 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f7128:	f107 0110 	add.w	r1, r7, #16
 23f712c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 23f7130:	f004 fc99 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f7134:	f107 0250 	add.w	r2, r7, #80	; 0x50
 23f7138:	f107 0140 	add.w	r1, r7, #64	; 0x40
 23f713c:	4620      	mov	r0, r4
 23f713e:	f000 ffe7 	bl	23f8110 <_ZN11MQTTManager16parseMQTTMessageE6StringS0_>
 23f7142:	f107 0050 	add.w	r0, r7, #80	; 0x50
 23f7146:	f004 fbf7 	bl	23fb938 <_ZN6StringD1Ev>
 23f714a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 23f714e:	f004 fbf3 	bl	23fb938 <_ZN6StringD1Ev>
    Device::mqttAll(lcTopic, lcMessage);
 23f7152:	f107 0130 	add.w	r1, r7, #48	; 0x30
 23f7156:	f107 0040 	add.w	r0, r7, #64	; 0x40
 23f715a:	f004 fc84 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f715e:	f107 0110 	add.w	r1, r7, #16
 23f7162:	f107 0050 	add.w	r0, r7, #80	; 0x50
 23f7166:	f004 fc7e 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f716a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 23f716e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 23f7172:	f001 fbd3 	bl	23f891c <_ZN6Device7mqttAllE6StringS0_>
 23f7176:	f107 0050 	add.w	r0, r7, #80	; 0x50
 23f717a:	f004 fbdd 	bl	23fb938 <_ZN6StringD1Ev>
 23f717e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 23f7182:	f004 fbd9 	bl	23fb938 <_ZN6StringD1Ev>
 23f7186:	e7b4      	b.n	23f70f2 <_ZN3IoT11mqttHandlerEPcPhj+0x7a>
 23f7188:	023ff39b 	.word	0x023ff39b
 23f718c:	1007ad58 	.word	0x1007ad58

023f7190 <_ZN3IoT11publishMQTTE6StringS0_b>:

/**
 * Publish an MQTT message
 */
void IoT::publishMQTT(String subtopic, String message, bool retain)
{
 23f7190:	b570      	push	{r4, r5, r6, lr}
 23f7192:	4605      	mov	r5, r0
 23f7194:	b08e      	sub	sp, #56	; 0x38
 23f7196:	9201      	str	r2, [sp, #4]
    _mqttManager->publish(kPublishName+"/"+subtopic, message, retain);
 23f7198:	4a13      	ldr	r2, [pc, #76]	; (23f71e8 <_ZN3IoT11publishMQTTE6StringS0_b+0x58>)
{
 23f719a:	460c      	mov	r4, r1
    StringSumHelper(const String &s) : String(s) {}
 23f719c:	a802      	add	r0, sp, #8
 23f719e:	4913      	ldr	r1, [pc, #76]	; (23f71ec <_ZN3IoT11publishMQTTE6StringS0_b+0x5c>)
    _mqttManager->publish(kPublishName+"/"+subtopic, message, retain);
 23f71a0:	6816      	ldr	r6, [r2, #0]
 23f71a2:	f004 fc60 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f71a6:	4912      	ldr	r1, [pc, #72]	; (23f71f0 <_ZN3IoT11publishMQTTE6StringS0_b+0x60>)
 23f71a8:	a802      	add	r0, sp, #8
 23f71aa:	f004 fd13 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f71ae:	4629      	mov	r1, r5
 23f71b0:	f004 fd04 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f71b4:	4601      	mov	r1, r0
 23f71b6:	a806      	add	r0, sp, #24
 23f71b8:	f004 fc55 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f71bc:	4621      	mov	r1, r4
 23f71be:	a80a      	add	r0, sp, #40	; 0x28
 23f71c0:	f004 fc51 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f71c4:	9b01      	ldr	r3, [sp, #4]
 23f71c6:	aa0a      	add	r2, sp, #40	; 0x28
 23f71c8:	a906      	add	r1, sp, #24
 23f71ca:	4630      	mov	r0, r6
 23f71cc:	f000 fb56 	bl	23f787c <_ZN11MQTTManager7publishE6StringS0_b>
 23f71d0:	a80a      	add	r0, sp, #40	; 0x28
 23f71d2:	f004 fbb1 	bl	23fb938 <_ZN6StringD1Ev>
 23f71d6:	a806      	add	r0, sp, #24
 23f71d8:	f004 fbae 	bl	23fb938 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f71dc:	a802      	add	r0, sp, #8
 23f71de:	f004 fbab 	bl	23fb938 <_ZN6StringD1Ev>
}
 23f71e2:	b00e      	add	sp, #56	; 0x38
 23f71e4:	bd70      	pop	{r4, r5, r6, pc}
 23f71e6:	bf00      	nop
 23f71e8:	1007ad58 	.word	0x1007ad58
 23f71ec:	1007ad08 	.word	0x1007ad08
 23f71f0:	023ff7bc 	.word	0x023ff7bc

023f71f4 <_ZN3IoT10setLatLongEff>:

// LATITUDE/LONGITUDE
//
void IoT::setLatLong(float latitude, float longitude) {
    // Currently only PartOfDay cares about (and persists) this.
    Device::setAllLatLong(latitude, longitude);
 23f71f4:	f001 bb72 	b.w	23f88dc <_ZN6Device13setAllLatLongEff>

023f71f8 <_ZN3IoT11setTimezoneEi>:
}

// TIMEZONE
//
void IoT::setTimezone(int timezone) {
 23f71f8:	b510      	push	{r4, lr}
 23f71fa:	4604      	mov	r4, r0
 23f71fc:	b088      	sub	sp, #32
    StringSumHelper(const char *p) : String(p) {}
 23f71fe:	4914      	ldr	r1, [pc, #80]	; (23f7250 <_ZN3IoT11setTimezoneEi+0x58>)
 23f7200:	a804      	add	r0, sp, #16
 23f7202:	f004 fbe4 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
    Log.trace("setTimezone: "+String(timezone));
 23f7206:	220a      	movs	r2, #10
 23f7208:	4621      	mov	r1, r4
 23f720a:	4668      	mov	r0, sp
 23f720c:	f004 fc61 	bl	23fbad2 <_ZN6StringC1Eih>
 23f7210:	4669      	mov	r1, sp
 23f7212:	a804      	add	r0, sp, #16
 23f7214:	f004 fcd2 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f7218:	6801      	ldr	r1, [r0, #0]
 23f721a:	480e      	ldr	r0, [pc, #56]	; (23f7254 <_ZN3IoT11setTimezoneEi+0x5c>)
 23f721c:	f7ff fe7a 	bl	23f6f14 <_ZNK5spark6Logger5traceEPKcz>
 23f7220:	4668      	mov	r0, sp
 23f7222:	f004 fb89 	bl	23fb938 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f7226:	a804      	add	r0, sp, #16
 23f7228:	f004 fb86 	bl	23fb938 <_ZN6StringD1Ev>
    int8_t tz = timezone;
    Time.zone(float(timezone));
 23f722c:	ee07 4a90 	vmov	s15, r4
 23f7230:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    int8_t tz = timezone;
 23f7234:	f88d 4010 	strb.w	r4, [sp, #16]
    Time.zone(float(timezone));
 23f7238:	f005 f98a 	bl	23fc550 <_ZN9TimeClass4zoneEf>
    // Persist this value across reboots
    EEPROM.put(TIMEZONE_ADDR, tz);
 23f723c:	f005 fd8a 	bl	23fcd54 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 23f7240:	2201      	movs	r2, #1
 23f7242:	a904      	add	r1, sp, #16
 23f7244:	4610      	mov	r0, r2
 23f7246:	f002 f965 	bl	23f9514 <HAL_EEPROM_Put>
}
 23f724a:	b008      	add	sp, #32
 23f724c:	bd10      	pop	{r4, pc}
 23f724e:	bf00      	nop
 23f7250:	023ff39f 	.word	0x023ff39f
 23f7254:	1007ae1c 	.word	0x1007ae1c

023f7258 <_ZN3IoT14handleDSTMarchEv>:
    } else if(month == 11) {
        handleDSTNovember();
    }
}

void IoT::handleDSTMarch() {
 23f7258:	b538      	push	{r3, r4, r5, lr}
    int weekday = Time.weekday();
 23f725a:	f005 fad3 	bl	23fc804 <_ZN9TimeClass7weekdayEv>
 23f725e:	4605      	mov	r5, r0
    int day = Time.day();
 23f7260:	f005 fac4 	bl	23fc7ec <_ZN9TimeClass3dayEv>
 23f7264:	4604      	mov	r4, r0
    int hour = Time.hour();
 23f7266:	f005 fab5 	bl	23fc7d4 <_ZN9TimeClass4hourEv>

    if(day <= 7) return;
 23f726a:	2c07      	cmp	r4, #7
 23f726c:	dd1f      	ble.n	23f72ae <_ZN3IoT14handleDSTMarchEv+0x56>

    switch(weekday) {
 23f726e:	1e6b      	subs	r3, r5, #1
 23f7270:	2b05      	cmp	r3, #5
 23f7272:	d81a      	bhi.n	23f72aa <_ZN3IoT14handleDSTMarchEv+0x52>
 23f7274:	e8df f003 	tbb	[pc, r3]
 23f7278:	13110f03 	.word	0x13110f03
 23f727c:	1715      	.short	0x1715
        case 1:     // Sunday
            if(day == 8 && hour < 2) return;
 23f727e:	2c08      	cmp	r4, #8
 23f7280:	d101      	bne.n	23f7286 <_ZN3IoT14handleDSTMarchEv+0x2e>
 23f7282:	2801      	cmp	r0, #1
            if(day < 12) return;
        case 6:
            if(day < 13) return;
        case 7:     // Saturday
        default:
            if(day < 14) return;
 23f7284:	dd13      	ble.n	23f72ae <_ZN3IoT14handleDSTMarchEv+0x56>
    }
    Log.trace("Begin DST");
 23f7286:	490a      	ldr	r1, [pc, #40]	; (23f72b0 <_ZN3IoT14handleDSTMarchEv+0x58>)
 23f7288:	480a      	ldr	r0, [pc, #40]	; (23f72b4 <_ZN3IoT14handleDSTMarchEv+0x5c>)
 23f728a:	f7ff fe43 	bl	23f6f14 <_ZNK5spark6Logger5traceEPKcz>
    Time.beginDST();
}
 23f728e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Time.beginDST();
 23f7292:	f005 b97d 	b.w	23fc590 <_ZN9TimeClass8beginDSTEv>
            if(day < 9) return;
 23f7296:	2c08      	cmp	r4, #8
 23f7298:	d009      	beq.n	23f72ae <_ZN3IoT14handleDSTMarchEv+0x56>
            if(day < 10) return;
 23f729a:	2c09      	cmp	r4, #9
 23f729c:	dd07      	ble.n	23f72ae <_ZN3IoT14handleDSTMarchEv+0x56>
            if(day < 11) return;
 23f729e:	2c0a      	cmp	r4, #10
 23f72a0:	dd05      	ble.n	23f72ae <_ZN3IoT14handleDSTMarchEv+0x56>
            if(day < 12) return;
 23f72a2:	2c0b      	cmp	r4, #11
 23f72a4:	dd03      	ble.n	23f72ae <_ZN3IoT14handleDSTMarchEv+0x56>
            if(day < 13) return;
 23f72a6:	2c0c      	cmp	r4, #12
 23f72a8:	dd01      	ble.n	23f72ae <_ZN3IoT14handleDSTMarchEv+0x56>
            if(day < 14) return;
 23f72aa:	2c0d      	cmp	r4, #13
 23f72ac:	e7ea      	b.n	23f7284 <_ZN3IoT14handleDSTMarchEv+0x2c>
}
 23f72ae:	bd38      	pop	{r3, r4, r5, pc}
 23f72b0:	023ff3ad 	.word	0x023ff3ad
 23f72b4:	1007ae1c 	.word	0x1007ae1c

023f72b8 <_ZN3IoT17handleDSTNovemberEv>:

void IoT::handleDSTNovember() {
 23f72b8:	b538      	push	{r3, r4, r5, lr}
    int weekday = Time.weekday();
 23f72ba:	f005 faa3 	bl	23fc804 <_ZN9TimeClass7weekdayEv>
 23f72be:	4605      	mov	r5, r0
    int day = Time.day();
 23f72c0:	f005 fa94 	bl	23fc7ec <_ZN9TimeClass3dayEv>
 23f72c4:	4604      	mov	r4, r0
    int hour = Time.hour();
 23f72c6:	f005 fa85 	bl	23fc7d4 <_ZN9TimeClass4hourEv>

    if(day > 7) return;
 23f72ca:	2c07      	cmp	r4, #7
 23f72cc:	dc0b      	bgt.n	23f72e6 <_ZN3IoT17handleDSTNovemberEv+0x2e>

    switch(weekday) {
 23f72ce:	1e6b      	subs	r3, r5, #1
 23f72d0:	2b05      	cmp	r3, #5
 23f72d2:	d813      	bhi.n	23f72fc <_ZN3IoT17handleDSTNovemberEv+0x44>
 23f72d4:	e8df f003 	tbb	[pc, r3]
 23f72d8:	0c0a0803 	.word	0x0c0a0803
 23f72dc:	100e      	.short	0x100e
        case 1:     // Sunday
            if(day == 1 && hour >= 2) return;
 23f72de:	2c01      	cmp	r4, #1
 23f72e0:	d10c      	bne.n	23f72fc <_ZN3IoT17handleDSTNovemberEv+0x44>
 23f72e2:	2801      	cmp	r0, #1
            break;
        case 4:
            if(day > 4) return;
            break;
        case 5:
            if(day > 5) return;
 23f72e4:	dd0a      	ble.n	23f72fc <_ZN3IoT17handleDSTNovemberEv+0x44>
        default:
            if(day > 7) return;
    }
    Log.trace("Begin DST");
    Time.beginDST();
}
 23f72e6:	bd38      	pop	{r3, r4, r5, pc}
            if(day > 2) return;
 23f72e8:	2c02      	cmp	r4, #2
 23f72ea:	e7fb      	b.n	23f72e4 <_ZN3IoT17handleDSTNovemberEv+0x2c>
            if(day > 3) return;
 23f72ec:	2c03      	cmp	r4, #3
 23f72ee:	e7f9      	b.n	23f72e4 <_ZN3IoT17handleDSTNovemberEv+0x2c>
            if(day > 4) return;
 23f72f0:	2c04      	cmp	r4, #4
 23f72f2:	e7f7      	b.n	23f72e4 <_ZN3IoT17handleDSTNovemberEv+0x2c>
            if(day > 5) return;
 23f72f4:	2c05      	cmp	r4, #5
 23f72f6:	e7f5      	b.n	23f72e4 <_ZN3IoT17handleDSTNovemberEv+0x2c>
            if(day > 6) return;
 23f72f8:	2c07      	cmp	r4, #7
 23f72fa:	d0f4      	beq.n	23f72e6 <_ZN3IoT17handleDSTNovemberEv+0x2e>
    Log.trace("Begin DST");
 23f72fc:	4903      	ldr	r1, [pc, #12]	; (23f730c <_ZN3IoT17handleDSTNovemberEv+0x54>)
 23f72fe:	4804      	ldr	r0, [pc, #16]	; (23f7310 <_ZN3IoT17handleDSTNovemberEv+0x58>)
 23f7300:	f7ff fe08 	bl	23f6f14 <_ZNK5spark6Logger5traceEPKcz>
}
 23f7304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Time.beginDST();
 23f7308:	f005 b942 	b.w	23fc590 <_ZN9TimeClass8beginDSTEv>
 23f730c:	023ff3ad 	.word	0x023ff3ad
 23f7310:	1007ae1c 	.word	0x1007ae1c

023f7314 <_ZN3IoT21handleDaylightSavingsEv>:
void IoT::handleDaylightSavings() {
 23f7314:	b500      	push	{lr}
 23f7316:	b08b      	sub	sp, #44	; 0x2c
    EEPROM.get(TIMEZONE_ADDR, timezone);    // Photon2 uses a file on the Flash file system
 23f7318:	f005 fd1c 	bl	23fcd54 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23f731c:	2201      	movs	r2, #1
 23f731e:	f10d 0107 	add.w	r1, sp, #7
 23f7322:	4610      	mov	r0, r2
 23f7324:	f002 f8e8 	bl	23f94f8 <HAL_EEPROM_Get>
    StringSumHelper(const char *p) : String(p) {}
 23f7328:	4919      	ldr	r1, [pc, #100]	; (23f7390 <_ZN3IoT21handleDaylightSavingsEv+0x7c>)
 23f732a:	a806      	add	r0, sp, #24
 23f732c:	f004 fb4f 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
    Log.trace("Setting timezone to "+String(timezone));
 23f7330:	220a      	movs	r2, #10
 23f7332:	f99d 1007 	ldrsb.w	r1, [sp, #7]
 23f7336:	a802      	add	r0, sp, #8
 23f7338:	f004 fbcb 	bl	23fbad2 <_ZN6StringC1Eih>
 23f733c:	a902      	add	r1, sp, #8
 23f733e:	a806      	add	r0, sp, #24
 23f7340:	f004 fc3c 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f7344:	6801      	ldr	r1, [r0, #0]
 23f7346:	4813      	ldr	r0, [pc, #76]	; (23f7394 <_ZN3IoT21handleDaylightSavingsEv+0x80>)
 23f7348:	f7ff fde4 	bl	23f6f14 <_ZNK5spark6Logger5traceEPKcz>
 23f734c:	a802      	add	r0, sp, #8
 23f734e:	f004 faf3 	bl	23fb938 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f7352:	a806      	add	r0, sp, #24
 23f7354:	f004 faf0 	bl	23fb938 <_ZN6StringD1Ev>
    Time.zone(float(timezone));
 23f7358:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 23f735c:	ee00 3a10 	vmov	s0, r3
 23f7360:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 23f7364:	f005 f8f4 	bl	23fc550 <_ZN9TimeClass4zoneEf>
    int month = Time.month();
 23f7368:	f005 fa54 	bl	23fc814 <_ZN9TimeClass5monthEv>
    if(month > 3 && month < 11) {
 23f736c:	1f03      	subs	r3, r0, #4
 23f736e:	2b06      	cmp	r3, #6
 23f7370:	d804      	bhi.n	23f737c <_ZN3IoT21handleDaylightSavingsEv+0x68>
        Time.beginDST();
 23f7372:	f005 f90d 	bl	23fc590 <_ZN9TimeClass8beginDSTEv>
}
 23f7376:	b00b      	add	sp, #44	; 0x2c
 23f7378:	f85d fb04 	ldr.w	pc, [sp], #4
    } else if(month == 3) {
 23f737c:	2803      	cmp	r0, #3
 23f737e:	d102      	bne.n	23f7386 <_ZN3IoT21handleDaylightSavingsEv+0x72>
        handleDSTMarch();
 23f7380:	f7ff ff6a 	bl	23f7258 <_ZN3IoT14handleDSTMarchEv>
 23f7384:	e7f7      	b.n	23f7376 <_ZN3IoT21handleDaylightSavingsEv+0x62>
    } else if(month == 11) {
 23f7386:	280b      	cmp	r0, #11
 23f7388:	d1f5      	bne.n	23f7376 <_ZN3IoT21handleDaylightSavingsEv+0x62>
        handleDSTNovember();
 23f738a:	f7ff ff95 	bl	23f72b8 <_ZN3IoT17handleDSTNovemberEv>
}
 23f738e:	e7f2      	b.n	23f7376 <_ZN3IoT21handleDaylightSavingsEv+0x62>
 23f7390:	023ff3b7 	.word	0x023ff3b7
 23f7394:	1007ae1c 	.word	0x1007ae1c

023f7398 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 23f7398:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f739a:	2300      	movs	r3, #0
 23f739c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23f739e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23f73a0:	4604      	mov	r4, r0
 23f73a2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23f73a4:	b12b      	cbz	r3, 23f73b2 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f73a6:	2202      	movs	r2, #2
 23f73a8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f73aa:	68eb      	ldr	r3, [r5, #12]
 23f73ac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f73ae:	68ab      	ldr	r3, [r5, #8]
 23f73b0:	60a3      	str	r3, [r4, #8]
    }
 23f73b2:	4620      	mov	r0, r4
 23f73b4:	bd38      	pop	{r3, r4, r5, pc}
	...

023f73b8 <_ZN3IoT5beginE6StringS0_b>:
{
 23f73b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f73bc:	f04f 0a00 	mov.w	sl, #0
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23f73c0:	4b47      	ldr	r3, [pc, #284]	; (23f74e0 <_ZN3IoT5beginE6StringS0_b+0x128>)
 23f73c2:	b098      	sub	sp, #96	; 0x60
 23f73c4:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23f73c6:	4b47      	ldr	r3, [pc, #284]	; (23f74e4 <_ZN3IoT5beginE6StringS0_b+0x12c>)
 23f73c8:	4680      	mov	r8, r0
 23f73ca:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 23f73cc:	4b46      	ldr	r3, [pc, #280]	; (23f74e8 <_ZN3IoT5beginE6StringS0_b+0x130>)
 23f73ce:	4689      	mov	r9, r1
        };
 23f73d0:	a808      	add	r0, sp, #32
 23f73d2:	a904      	add	r1, sp, #16
 23f73d4:	4617      	mov	r7, r2
 23f73d6:	9306      	str	r3, [sp, #24]
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f73d8:	ad10      	add	r5, sp, #64	; 0x40
        };
 23f73da:	f7ff ffdd 	bl	23f7398 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f73de:	a908      	add	r1, sp, #32
 23f73e0:	a80c      	add	r0, sp, #48	; 0x30
 23f73e2:	f7ff ffd9 	bl	23f7398 <_ZNSt8functionIFvyiEEC1ERKS1_>
 23f73e6:	a90c      	add	r1, sp, #48	; 0x30
 23f73e8:	4628      	mov	r0, r5
 23f73ea:	f7ff ffd5 	bl	23f7398 <_ZNSt8functionIFvyiEEC1ERKS1_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f73ee:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 23f73f0:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f73f4:	f7ff fbbb 	bl	23f6b6e <_Znwj>
 23f73f8:	4604      	mov	r4, r0
 23f73fa:	b1a0      	cbz	r0, 23f7426 <_ZN3IoT5beginE6StringS0_b+0x6e>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f73fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 23f7400:	ae01      	add	r6, sp, #4
 23f7402:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f7406:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f740a:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f740e:	e896 0003 	ldmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7412:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
 23f7414:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7416:	60a3      	str	r3, [r4, #8]
 23f7418:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f741c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 23f741e:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 23f7422:	9213      	str	r2, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
 23f7424:	60e3      	str	r3, [r4, #12]
        SystemEventContext context = {};
 23f7426:	2600      	movs	r6, #0
	    _M_invoker = &_My_handler::_M_invoke;
 23f7428:	4b30      	ldr	r3, [pc, #192]	; (23f74ec <_ZN3IoT5beginE6StringS0_b+0x134>)
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
 23f742a:	2010      	movs	r0, #16
 23f742c:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
 23f742e:	4b30      	ldr	r3, [pc, #192]	; (23f74f0 <_ZN3IoT5beginE6StringS0_b+0x138>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f7430:	9414      	str	r4, [sp, #80]	; 0x50
	    _M_manager = &_My_handler::_M_manager;
 23f7432:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
 23f7434:	4b2f      	ldr	r3, [pc, #188]	; (23f74f4 <_ZN3IoT5beginE6StringS0_b+0x13c>)
 23f7436:	9603      	str	r6, [sp, #12]
 23f7438:	e9cd 3601 	strd	r3, r6, [sp, #4]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
 23f743c:	f7ff fb97 	bl	23f6b6e <_Znwj>
 23f7440:	4604      	mov	r4, r0
 23f7442:	b1d8      	cbz	r0, 23f747c <_ZN3IoT5beginE6StringS0_b+0xc4>
    bool _M_empty() const { return !_M_manager; }
 23f7444:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
 23f7446:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
 23f7448:	b133      	cbz	r3, 23f7458 <_ZN3IoT5beginE6StringS0_b+0xa0>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f744a:	2202      	movs	r2, #2
 23f744c:	a914      	add	r1, sp, #80	; 0x50
 23f744e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f7450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23f7452:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f7454:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23f7456:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
 23f7458:	4b27      	ldr	r3, [pc, #156]	; (23f74f8 <_ZN3IoT5beginE6StringS0_b+0x140>)
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f745a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
        context.destructor = [](void* callable) -> void {
 23f745e:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f7460:	2100      	movs	r1, #0
 23f7462:	4a26      	ldr	r2, [pc, #152]	; (23f74fc <_ZN3IoT5beginE6StringS0_b+0x144>)
 23f7464:	ab01      	add	r3, sp, #4
        context.callable = wrapper;
 23f7466:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f7468:	f002 fb80 	bl	23f9b6c <system_subscribe_event>
        if (r) {
 23f746c:	b130      	cbz	r0, 23f747c <_ZN3IoT5beginE6StringS0_b+0xc4>
    class function<_Res(_ArgTypes...)>
 23f746e:	4620      	mov	r0, r4
 23f7470:	f7ff fce8 	bl	23f6e44 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
 23f7474:	2110      	movs	r1, #16
 23f7476:	4620      	mov	r0, r4
 23f7478:	f7ff fb7f 	bl	23f6b7a <_ZdlPvj>
 23f747c:	a814      	add	r0, sp, #80	; 0x50
 23f747e:	f7ff fce1 	bl	23f6e44 <_ZNSt14_Function_baseD1Ev>
 23f7482:	4628      	mov	r0, r5
 23f7484:	f7ff fcde 	bl	23f6e44 <_ZNSt14_Function_baseD1Ev>
 23f7488:	a80c      	add	r0, sp, #48	; 0x30
 23f748a:	f7ff fcdb 	bl	23f6e44 <_ZNSt14_Function_baseD1Ev>
 23f748e:	a808      	add	r0, sp, #32
 23f7490:	f7ff fcd8 	bl	23f6e44 <_ZNSt14_Function_baseD1Ev>
 23f7494:	a804      	add	r0, sp, #16
 23f7496:	f7ff fcd5 	bl	23f6e44 <_ZNSt14_Function_baseD1Ev>
    handleDaylightSavings();    // Set isDST appropriately
 23f749a:	f7ff ff3b 	bl	23f7314 <_ZN3IoT21handleDaylightSavingsEv>
    Device::expose();
 23f749e:	f001 fa63 	bl	23f8968 <_ZN6Device6exposeEv>
    startWatchdog();
 23f74a2:	f7ff fd45 	bl	23f6f30 <_ZN3IoT13startWatchdogEv>
    _mqttManager = new MQTTManager(brokerIP, controllerName, mqttLogging);
 23f74a6:	4641      	mov	r1, r8
 23f74a8:	4628      	mov	r0, r5
 23f74aa:	f004 fadc 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f74ae:	4649      	mov	r1, r9
 23f74b0:	a814      	add	r0, sp, #80	; 0x50
 23f74b2:	f004 fad8 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f74b6:	2068      	movs	r0, #104	; 0x68
 23f74b8:	f7ff fb59 	bl	23f6b6e <_Znwj>
 23f74bc:	4604      	mov	r4, r0
 23f74be:	b120      	cbz	r0, 23f74ca <_ZN3IoT5beginE6StringS0_b+0x112>
 23f74c0:	463b      	mov	r3, r7
 23f74c2:	4629      	mov	r1, r5
 23f74c4:	aa14      	add	r2, sp, #80	; 0x50
 23f74c6:	f000 f8ef 	bl	23f76a8 <_ZN11MQTTManagerC1E6StringS0_b>
 23f74ca:	4b0d      	ldr	r3, [pc, #52]	; (23f7500 <_ZN3IoT5beginE6StringS0_b+0x148>)
 23f74cc:	a814      	add	r0, sp, #80	; 0x50
 23f74ce:	601c      	str	r4, [r3, #0]
 23f74d0:	f004 fa32 	bl	23fb938 <_ZN6StringD1Ev>
 23f74d4:	4628      	mov	r0, r5
 23f74d6:	f004 fa2f 	bl	23fb938 <_ZN6StringD1Ev>
}
 23f74da:	b018      	add	sp, #96	; 0x60
 23f74dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f74e0:	023f6dcd 	.word	0x023f6dcd
 23f74e4:	023f6e3b 	.word	0x023f6e3b
 23f74e8:	023f6e27 	.word	0x023f6e27
 23f74ec:	023f6e01 	.word	0x023f6e01
 23f74f0:	023f7505 	.word	0x023f7505
 23f74f4:	000c0002 	.word	0x000c0002
 23f74f8:	023f6e57 	.word	0x023f6e57
 23f74fc:	023f6dd9 	.word	0x023f6dd9
 23f7500:	1007ad58 	.word	0x1007ad58

023f7504 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
 23f7504:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23f7506:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f7508:	4604      	mov	r4, r0
	switch (__op)
 23f750a:	d104      	bne.n	23f7516 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
 23f750c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f750e:	6003      	str	r3, [r0, #0]
      }
 23f7510:	2000      	movs	r0, #0
 23f7512:	b003      	add	sp, #12
 23f7514:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
 23f7516:	2a02      	cmp	r2, #2
 23f7518:	d00c      	beq.n	23f7534 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
 23f751a:	2a03      	cmp	r2, #3
 23f751c:	d1f8      	bne.n	23f7510 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23f751e:	6804      	ldr	r4, [r0, #0]
 23f7520:	2c00      	cmp	r4, #0
 23f7522:	d0f5      	beq.n	23f7510 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23f7524:	4620      	mov	r0, r4
 23f7526:	f7ff fc8d 	bl	23f6e44 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23f752a:	2110      	movs	r1, #16
 23f752c:	4620      	mov	r0, r4
 23f752e:	f7ff fb24 	bl	23f6b7a <_ZdlPvj>
 23f7532:	e7ed      	b.n	23f7510 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
 23f7534:	6809      	ldr	r1, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f7536:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 23f7538:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f753a:	f7ff fb18 	bl	23f6b6e <_Znwj>
 23f753e:	4605      	mov	r5, r0
 23f7540:	b110      	cbz	r0, 23f7548 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f7542:	9901      	ldr	r1, [sp, #4]
 23f7544:	f7ff ff28 	bl	23f7398 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
 23f7548:	6025      	str	r5, [r4, #0]
	}
 23f754a:	e7e1      	b.n	23f7510 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

023f754c <_GLOBAL__sub_I__ZN6Device8_devicesE>:
}
 23f754c:	b508      	push	{r3, lr}
#define TIMEZONE_ADDR 1     // 1 byte signed, -127 to +128 offset from GMT
#define LATITUDE_ADDR 4     // 4 byte float
#define LONGITUDE_ADDR 8    // 4 byte float

static const int    kMaxVariableStringLength   = 864; // was 622 < v3.0.0
static const String kDevicesVariableName       = "Devices";
 23f754e:	490b      	ldr	r1, [pc, #44]	; (23f757c <_GLOBAL__sub_I__ZN6Device8_devicesE+0x30>)
 23f7550:	480b      	ldr	r0, [pc, #44]	; (23f7580 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x34>)
 23f7552:	f004 fa3c 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
static const String kChecklistVariableName     = "Checklist";
 23f7556:	490b      	ldr	r1, [pc, #44]	; (23f7584 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x38>)
 23f7558:	480b      	ldr	r0, [pc, #44]	; (23f7588 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x3c>)
 23f755a:	f004 fa38 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
static const String kStatusVariableName        = "Status";
 23f755e:	490b      	ldr	r1, [pc, #44]	; (23f758c <_GLOBAL__sub_I__ZN6Device8_devicesE+0x40>)
 23f7560:	480b      	ldr	r0, [pc, #44]	; (23f7590 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x44>)
 23f7562:	f004 fa34 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
static const String kPublishName               = "patriot";
 23f7566:	490b      	ldr	r1, [pc, #44]	; (23f7594 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x48>)
 23f7568:	480b      	ldr	r0, [pc, #44]	; (23f7598 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x4c>)
 23f756a:	f004 fa30 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
 23f756e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
static const String kSSIDFunctionName          = "setSSID";
 23f7572:	490a      	ldr	r1, [pc, #40]	; (23f759c <_GLOBAL__sub_I__ZN6Device8_devicesE+0x50>)
 23f7574:	480a      	ldr	r0, [pc, #40]	; (23f75a0 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x54>)
 23f7576:	f004 ba2a 	b.w	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
 23f757a:	bf00      	nop
 23f757c:	023ff3cc 	.word	0x023ff3cc
 23f7580:	1007ad38 	.word	0x1007ad38
 23f7584:	023ff3d4 	.word	0x023ff3d4
 23f7588:	1007ad48 	.word	0x1007ad48
 23f758c:	023ff3de 	.word	0x023ff3de
 23f7590:	1007ad28 	.word	0x1007ad28
 23f7594:	023ff3e5 	.word	0x023ff3e5
 23f7598:	1007ad08 	.word	0x1007ad08
 23f759c:	023ff3ed 	.word	0x023ff3ed
 23f75a0:	1007ad18 	.word	0x1007ad18

023f75a4 <_ZN11MQTTManagerD1Ev>:
 */
#pragma once
#include "Particle.h"
#include "MQTT.h"

class MQTTManager : public LogHandler
 23f75a4:	b510      	push	{r4, lr}
 23f75a6:	4604      	mov	r4, r0
 23f75a8:	4b06      	ldr	r3, [pc, #24]	; (23f75c4 <_ZN11MQTTManagerD1Ev+0x20>)
 23f75aa:	f840 3b28 	str.w	r3, [r0], #40
 23f75ae:	f004 f9c3 	bl	23fb938 <_ZN6StringD1Ev>
    virtual ~LogHandler() = default;
 23f75b2:	4620      	mov	r0, r4
 23f75b4:	4b04      	ldr	r3, [pc, #16]	; (23f75c8 <_ZN11MQTTManagerD1Ev+0x24>)
 23f75b6:	f840 3b04 	str.w	r3, [r0], #4
 23f75ba:	f003 fad9 	bl	23fab70 <_ZN5spark6detail9LogFilterD1Ev>
 23f75be:	4620      	mov	r0, r4
 23f75c0:	bd10      	pop	{r4, pc}
 23f75c2:	bf00      	nop
 23f75c4:	023ff680 	.word	0x023ff680
 23f75c8:	023ff328 	.word	0x023ff328

023f75cc <_ZN11MQTTManagerD0Ev>:
 23f75cc:	b510      	push	{r4, lr}
 23f75ce:	4604      	mov	r4, r0
 23f75d0:	f7ff ffe8 	bl	23f75a4 <_ZN11MQTTManagerD1Ev>
 23f75d4:	4620      	mov	r0, r4
 23f75d6:	2168      	movs	r1, #104	; 0x68
 23f75d8:	f7ff facf 	bl	23f6b7a <_ZdlPvj>
 23f75dc:	4620      	mov	r0, r4
 23f75de:	bd10      	pop	{r4, pc}

023f75e0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23f75e0:	2200      	movs	r2, #0
 23f75e2:	6840      	ldr	r0, [r0, #4]
 23f75e4:	4611      	mov	r1, r2
 23f75e6:	f002 bba1 	b.w	23f9d2c <network_ready>

023f75ea <_ZNK5spark6Logger4warnEPKcz>:
inline void spark::Logger::warn(const char *fmt, ...) const {
 23f75ea:	b40e      	push	{r1, r2, r3}
 23f75ec:	b503      	push	{r0, r1, lr}
 23f75ee:	ab03      	add	r3, sp, #12
 23f75f0:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_WARN, fmt, args);
 23f75f4:	2128      	movs	r1, #40	; 0x28
    va_start(args, fmt);
 23f75f6:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_WARN, fmt, args);
 23f75f8:	f7ff fc5e 	bl	23f6eb8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f75fc:	b002      	add	sp, #8
 23f75fe:	f85d eb04 	ldr.w	lr, [sp], #4
 23f7602:	b003      	add	sp, #12
 23f7604:	4770      	bx	lr

023f7606 <_ZN11MQTTManager13mqttConnectedEv>:
bool MQTTManager::wifiConnected() {
    return WiFi.ready();
}

bool MQTTManager::mqttConnected() {
    return _mqtt->isConnected();
 23f7606:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23f7608:	f001 bbd0 	b.w	23f8dac <_ZN4MQTT11isConnectedEv>

023f760c <_ZN11MQTTManager11connectMQTTEv>:

bool MQTTManager::cloudConnected() {
    return Particle.connected();
}

void MQTTManager::connectMQTT() {
 23f760c:	b570      	push	{r4, r5, r6, lr}
 23f760e:	4604      	mov	r4, r0
 23f7610:	b092      	sub	sp, #72	; 0x48
    StringSumHelper(const String &s) : String(s) {}
 23f7612:	4920      	ldr	r1, [pc, #128]	; (23f7694 <_ZN11MQTTManager11connectMQTTEv+0x88>)
 23f7614:	a80e      	add	r0, sp, #56	; 0x38
 23f7616:	f004 fa26 	bl	23fba66 <_ZN6StringC1ERKS_>
    const char *user = NULL;
    const char *pw = NULL;
    String willTopic = kPublishName + "/" + _controllerName + "/status";
 23f761a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 23f761e:	491e      	ldr	r1, [pc, #120]	; (23f7698 <_ZN11MQTTManager11connectMQTTEv+0x8c>)
 23f7620:	a80e      	add	r0, sp, #56	; 0x38
 23f7622:	f004 fad7 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f7626:	4629      	mov	r1, r5
 23f7628:	f004 fac8 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f762c:	491b      	ldr	r1, [pc, #108]	; (23f769c <_ZN11MQTTManager11connectMQTTEv+0x90>)
 23f762e:	f004 fad1 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f7632:	4601      	mov	r1, r0
 23f7634:	a806      	add	r0, sp, #24
 23f7636:	f004 fa16 	bl	23fba66 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 23f763a:	a80e      	add	r0, sp, #56	; 0x38
 23f763c:	f004 f97c 	bl	23fb938 <_ZN6StringD1Ev>
    MQTT::EMQTT_QOS willQoS = MQTT::QOS0;
    uint8_t willRetain = 0;
    String willMessage = "Offline";
 23f7640:	4917      	ldr	r1, [pc, #92]	; (23f76a0 <_ZN11MQTTManager11connectMQTTEv+0x94>)
 23f7642:	a80a      	add	r0, sp, #40	; 0x28
 23f7644:	f004 f9c3 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
    StringSumHelper(const String &s) : String(s) {}
 23f7648:	4629      	mov	r1, r5
 23f764a:	a80e      	add	r0, sp, #56	; 0x38
    bool clean = false;
    _mqtt->connect(_controllerName + "Id", user, pw, willTopic, willQoS, willRetain, willMessage, clean);
 23f764c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 23f764e:	f004 fa0a 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f7652:	4914      	ldr	r1, [pc, #80]	; (23f76a4 <_ZN11MQTTManager11connectMQTTEv+0x98>)
 23f7654:	a80e      	add	r0, sp, #56	; 0x38
 23f7656:	f004 fabd 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f765a:	2300      	movs	r3, #0
 23f765c:	2204      	movs	r2, #4
 23f765e:	e9cd 3204 	strd	r3, r2, [sp, #16]
 23f7662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23f7664:	9301      	str	r3, [sp, #4]
 23f7666:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f766a:	9a06      	ldr	r2, [sp, #24]
 23f766c:	9200      	str	r2, [sp, #0]
 23f766e:	6801      	ldr	r1, [r0, #0]
 23f7670:	461a      	mov	r2, r3
 23f7672:	4630      	mov	r0, r6
 23f7674:	f001 fba8 	bl	23f8dc8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
class StringSumHelper : public String
 23f7678:	a80e      	add	r0, sp, #56	; 0x38
 23f767a:	f004 f95d 	bl	23fb938 <_ZN6StringD1Ev>
    _lastMQTTtime = Time.now();
 23f767e:	f005 f898 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
 23f7682:	63a0      	str	r0, [r4, #56]	; 0x38
    String willMessage = "Offline";
 23f7684:	a80a      	add	r0, sp, #40	; 0x28
 23f7686:	f004 f957 	bl	23fb938 <_ZN6StringD1Ev>
    String willTopic = kPublishName + "/" + _controllerName + "/status";
 23f768a:	a806      	add	r0, sp, #24
 23f768c:	f004 f954 	bl	23fb938 <_ZN6StringD1Ev>
}
 23f7690:	b012      	add	sp, #72	; 0x48
 23f7692:	bd70      	pop	{r4, r5, r6, pc}
 23f7694:	1007ad60 	.word	0x1007ad60
 23f7698:	023ff7bc 	.word	0x023ff7bc
 23f769c:	023ff3f5 	.word	0x023ff3f5
 23f76a0:	023ff3fd 	.word	0x023ff3fd
 23f76a4:	023ff405 	.word	0x023ff405

023f76a8 <_ZN11MQTTManagerC1E6StringS0_b>:
MQTTManager::MQTTManager(String brokerIP, String controllerName, bool mqttLogging)
 23f76a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f76ac:	4604      	mov	r4, r0
 23f76ae:	4625      	mov	r5, r4
 23f76b0:	4690      	mov	r8, r2
 23f76b2:	461f      	mov	r7, r3
        filter_(level) {
 23f76b4:	4b32      	ldr	r3, [pc, #200]	; (23f7780 <_ZN11MQTTManagerC1E6StringS0_b+0xd8>)
 23f76b6:	460e      	mov	r6, r1
 23f76b8:	f840 3b04 	str.w	r3, [r0], #4
 23f76bc:	211e      	movs	r1, #30
 23f76be:	f003 f881 	bl	23fa7c4 <_ZN5spark6detail9LogFilterC1E8LogLevel>
 23f76c2:	4b30      	ldr	r3, [pc, #192]	; (23f7784 <_ZN11MQTTManagerC1E6StringS0_b+0xdc>)
 23f76c4:	4930      	ldr	r1, [pc, #192]	; (23f7788 <_ZN11MQTTManagerC1E6StringS0_b+0xe0>)
 23f76c6:	f845 3b28 	str.w	r3, [r5], #40
 23f76ca:	4628      	mov	r0, r5
 23f76cc:	f004 f97f 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
    _controllerName = controllerName.toLowerCase();
 23f76d0:	4640      	mov	r0, r8
 23f76d2:	f004 fb48 	bl	23fbd66 <_ZN6String11toLowerCaseEv>
 23f76d6:	4601      	mov	r1, r0
 23f76d8:	4628      	mov	r0, r5
 23f76da:	f004 f9b5 	bl	23fba48 <_ZN6StringaSERKS_>
    _logging = 0;
 23f76de:	2500      	movs	r5, #0
    _logLevel = LOG_LEVEL_ALL;     // See particle doc for options
 23f76e0:	2101      	movs	r1, #1
    pinMode(D7, OUTPUT);    // Blue LED
 23f76e2:	2007      	movs	r0, #7
    _logLevel = LOG_LEVEL_ALL;     // See particle doc for options
 23f76e4:	f884 1020 	strb.w	r1, [r4, #32]
    _blinkPhase = 0;
 23f76e8:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
    _logging = 0;
 23f76ec:	64e5      	str	r5, [r4, #76]	; 0x4c
    pinMode(D7, OUTPUT);    // Blue LED
 23f76ee:	f005 fb07 	bl	23fcd00 <pinMode>
    digitalWrite(D7, LOW);
 23f76f2:	4629      	mov	r1, r5
 23f76f4:	2007      	movs	r0, #7
 23f76f6:	f005 fb14 	bl	23fcd22 <digitalWrite>
    Log.info("Connecting to MQTT");
 23f76fa:	4924      	ldr	r1, [pc, #144]	; (23f778c <_ZN11MQTTManagerC1E6StringS0_b+0xe4>)
 23f76fc:	4824      	ldr	r0, [pc, #144]	; (23f7790 <_ZN11MQTTManagerC1E6StringS0_b+0xe8>)
 23f76fe:	f7ff fbfb 	bl	23f6ef8 <_ZNK5spark6Logger4infoEPKcz>
    const char * c_str() const { return buffer; }
 23f7702:	6831      	ldr	r1, [r6, #0]
    _mqtt =  new MQTT((char *)brokerIP.c_str(), 1883, IoT::mqttHandler);
 23f7704:	2060      	movs	r0, #96	; 0x60
    _mqttSubscribed = false;
 23f7706:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
 23f770a:	9103      	str	r1, [sp, #12]
    _mqtt =  new MQTT((char *)brokerIP.c_str(), 1883, IoT::mqttHandler);
 23f770c:	f7ff fa2f 	bl	23f6b6e <_Znwj>
 23f7710:	4606      	mov	r6, r0
 23f7712:	b130      	cbz	r0, 23f7722 <_ZN11MQTTManagerC1E6StringS0_b+0x7a>
 23f7714:	f240 725b 	movw	r2, #1883	; 0x75b
 23f7718:	4b1e      	ldr	r3, [pc, #120]	; (23f7794 <_ZN11MQTTManagerC1E6StringS0_b+0xec>)
 23f771a:	9903      	ldr	r1, [sp, #12]
 23f771c:	9500      	str	r5, [sp, #0]
 23f771e:	f001 fa6b 	bl	23f8bf8 <_ZN4MQTTC1EPKctPFvPcPhjEb>
    connectMQTT();
 23f7722:	4620      	mov	r0, r4
    _mqtt =  new MQTT((char *)brokerIP.c_str(), 1883, IoT::mqttHandler);
 23f7724:	6266      	str	r6, [r4, #36]	; 0x24
    connectMQTT();
 23f7726:	f7ff ff71 	bl	23f760c <_ZN11MQTTManager11connectMQTTEv>
    if(mqttLogging) {
 23f772a:	b147      	cbz	r7, 23f773e <_ZN11MQTTManagerC1E6StringS0_b+0x96>
        LogManager::instance()->addHandler(this);
 23f772c:	f003 f94a 	bl	23fa9c4 <_ZN5spark10LogManager8instanceEv>
 23f7730:	4621      	mov	r1, r4
 23f7732:	f003 fb3b 	bl	23fadac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
        Log.info("MQTT log handler added");
 23f7736:	4918      	ldr	r1, [pc, #96]	; (23f7798 <_ZN11MQTTManagerC1E6StringS0_b+0xf0>)
 23f7738:	4815      	ldr	r0, [pc, #84]	; (23f7790 <_ZN11MQTTManagerC1E6StringS0_b+0xe8>)
 23f773a:	f7ff fbdd 	bl	23f6ef8 <_ZNK5spark6Logger4infoEPKcz>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 23f773e:	2300      	movs	r3, #0
 23f7740:	e9cd 3300 	strd	r3, r3, [sp]
 23f7744:	4815      	ldr	r0, [pc, #84]	; (23f779c <_ZN11MQTTManagerC1E6StringS0_b+0xf4>)
 23f7746:	461a      	mov	r2, r3
 23f7748:	4915      	ldr	r1, [pc, #84]	; (23f77a0 <_ZN11MQTTManagerC1E6StringS0_b+0xf8>)
 23f774a:	6800      	ldr	r0, [r0, #0]
 23f774c:	f002 fa9a 	bl	23f9c84 <spark_subscribe>
    _lastAliveTime = Time.now() - MQTT_ALIVE_SECONDS;
 23f7750:	f005 f82f 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
 23f7754:	38b4      	subs	r0, #180	; 0xb4
 23f7756:	63e0      	str	r0, [r4, #60]	; 0x3c
    _lastAliveFrontPanel = Time.now();
 23f7758:	f005 f82b 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
 23f775c:	6520      	str	r0, [r4, #80]	; 0x50
    _lastAliveLeftSlide = Time.now();
 23f775e:	f005 f828 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
 23f7762:	6560      	str	r0, [r4, #84]	; 0x54
    _lastAliveRearPanel = Time.now();
 23f7764:	f005 f825 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
 23f7768:	65a0      	str	r0, [r4, #88]	; 0x58
    _lastAliveRonTest = Time.now();
 23f776a:	f005 f822 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
 23f776e:	65e0      	str	r0, [r4, #92]	; 0x5c
    _lastCheckTime = Time.now();
 23f7770:	f005 f81f 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
 23f7774:	6420      	str	r0, [r4, #64]	; 0x40
}
 23f7776:	4620      	mov	r0, r4
 23f7778:	b004      	add	sp, #16
 23f777a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f777e:	bf00      	nop
 23f7780:	023ff328 	.word	0x023ff328
 23f7784:	023ff680 	.word	0x023ff680
 23f7788:	023ff895 	.word	0x023ff895
 23f778c:	023ff408 	.word	0x023ff408
 23f7790:	1007ae1c 	.word	0x1007ae1c
 23f7794:	023f7079 	.word	0x023f7079
 23f7798:	023ff41b 	.word	0x023ff41b
 23f779c:	1007ad60 	.word	0x1007ad60
 23f77a0:	023f6fc5 	.word	0x023f6fc5

023f77a4 <_ZN11MQTTManager8doRebootEv>:
        String time = Time.format(Time.now(), "%a %H:%M");
        publish(kPublishName+"/alive/"+_controllerName, time, false);
    }
}

void MQTTManager::doReboot() {
 23f77a4:	b508      	push	{r3, lr}
    Log.warn("Rebooting...");
 23f77a6:	4907      	ldr	r1, [pc, #28]	; (23f77c4 <_ZN11MQTTManager8doRebootEv+0x20>)
 23f77a8:	4807      	ldr	r0, [pc, #28]	; (23f77c8 <_ZN11MQTTManager8doRebootEv+0x24>)
 23f77aa:	f7ff ff1e 	bl	23f75ea <_ZNK5spark6Logger4warnEPKcz>
    Device::resetAll();
 23f77ae:	f001 f84d 	bl	23f884c <_ZN6Device8resetAllEv>
    delay(200);
 23f77b2:	20c8      	movs	r0, #200	; 0xc8
 23f77b4:	f002 fc18 	bl	23f9fe8 <delay>
    System.reset(RESET_NO_WAIT);
 23f77b8:	4b04      	ldr	r3, [pc, #16]	; (23f77cc <_ZN11MQTTManager8doRebootEv+0x28>)
 23f77ba:	6818      	ldr	r0, [r3, #0]
}
 23f77bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    System.reset(RESET_NO_WAIT);
 23f77c0:	f004 bb54 	b.w	23fbe6c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
 23f77c4:	023ff432 	.word	0x023ff432
 23f77c8:	1007ae1c 	.word	0x1007ae1c
 23f77cc:	1007ad70 	.word	0x1007ad70

023f77d0 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv>:
{
 23f77d0:	b510      	push	{r4, lr}
 23f77d2:	4604      	mov	r4, r0
    if(Time.now() > _lastCheckTime + CHECK_STATUS_SECONDS) {
 23f77d4:	f004 ffed 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
 23f77d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 23f77da:	333c      	adds	r3, #60	; 0x3c
 23f77dc:	4298      	cmp	r0, r3
 23f77de:	dd1b      	ble.n	23f7818 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x48>
        _lastCheckTime = Time.now();
 23f77e0:	f004 ffe7 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
 23f77e4:	6420      	str	r0, [r4, #64]	; 0x40
        if(WiFi.ready()) {
 23f77e6:	481e      	ldr	r0, [pc, #120]	; (23f7860 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x90>)
 23f77e8:	f7ff fefa 	bl	23f75e0 <_ZN5spark9WiFiClass5readyEv>
 23f77ec:	b390      	cbz	r0, 23f7854 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x84>
            if(_mqtt->isConnected()) {
 23f77ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f77f0:	f001 fadc 	bl	23f8dac <_ZN4MQTT11isConnectedEv>
 23f77f4:	b328      	cbz	r0, 23f7842 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x72>
                if(_mqttSubscribed == false) {
 23f77f6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 23f77fa:	b973      	cbnz	r3, 23f781a <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x4a>
                    Log.info("mqtt connected, subscribing...");
 23f77fc:	4919      	ldr	r1, [pc, #100]	; (23f7864 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x94>)
 23f77fe:	481a      	ldr	r0, [pc, #104]	; (23f7868 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x98>)
 23f7800:	f7ff fb7a 	bl	23f6ef8 <_ZNK5spark6Logger4infoEPKcz>
                    _lastMQTTtime = Time.now();
 23f7804:	f004 ffd5 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
                    _mqtt->subscribe("#");
 23f7808:	4918      	ldr	r1, [pc, #96]	; (23f786c <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x9c>)
                    _lastMQTTtime = Time.now();
 23f780a:	63a0      	str	r0, [r4, #56]	; 0x38
                    _mqtt->subscribe("#");
 23f780c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f780e:	f001 fdc8 	bl	23f93a2 <_ZN4MQTT9subscribeEPKc>
                    _mqttSubscribed = true;
 23f7812:	2301      	movs	r3, #1
 23f7814:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
}
 23f7818:	bd10      	pop	{r4, pc}
                    if(Time.now() > _lastMQTTtime + MQTT_TIMEOUT_SECONDS) {
 23f781a:	f004 ffca 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
 23f781e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23f7820:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 23f7824:	4298      	cmp	r0, r3
 23f7826:	ddf7      	ble.n	23f7818 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x48>
                        Log.error("MQTT Timeout.");
 23f7828:	4911      	ldr	r1, [pc, #68]	; (23f7870 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0xa0>)
 23f782a:	480f      	ldr	r0, [pc, #60]	; (23f7868 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x98>)
 23f782c:	f7ff fb56 	bl	23f6edc <_ZNK5spark6Logger5errorEPKcz>

#ifdef __cplusplus
}
#endif

static inline void delay(std::chrono::milliseconds ms) { ::delay(ms.count()); }
 23f7830:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23f7834:	f002 fbd8 	bl	23f9fe8 <delay>
                        doReboot();
 23f7838:	4620      	mov	r0, r4
}
 23f783a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                        doReboot();
 23f783e:	f7ff bfb1 	b.w	23f77a4 <_ZN11MQTTManager8doRebootEv>
                Log.info("MQTT not connected, retry...");
 23f7842:	4809      	ldr	r0, [pc, #36]	; (23f7868 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x98>)
 23f7844:	490b      	ldr	r1, [pc, #44]	; (23f7874 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0xa4>)
 23f7846:	f7ff fb57 	bl	23f6ef8 <_ZNK5spark6Logger4infoEPKcz>
                connectMQTT();
 23f784a:	4620      	mov	r0, r4
}
 23f784c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                connectMQTT();
 23f7850:	f7ff bedc 	b.w	23f760c <_ZN11MQTTManager11connectMQTTEv>
            Log.info("WiFi NOT ready");
 23f7854:	4908      	ldr	r1, [pc, #32]	; (23f7878 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0xa8>)
 23f7856:	4804      	ldr	r0, [pc, #16]	; (23f7868 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x98>)
 23f7858:	f7ff fb4e 	bl	23f6ef8 <_ZNK5spark6Logger4infoEPKcz>
}
 23f785c:	e7dc      	b.n	23f7818 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x48>
 23f785e:	bf00      	nop
 23f7860:	1007aed0 	.word	0x1007aed0
 23f7864:	023ff43f 	.word	0x023ff43f
 23f7868:	1007ae1c 	.word	0x1007ae1c
 23f786c:	023ff45e 	.word	0x023ff45e
 23f7870:	023ff460 	.word	0x023ff460
 23f7874:	023ff46e 	.word	0x023ff46e
 23f7878:	023ff48b 	.word	0x023ff48b

023f787c <_ZN11MQTTManager7publishE6StringS0_b>:

/**
 * Send MQTT data
 */
bool MQTTManager::publish(String topic, String message, bool retain) {
 23f787c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f7880:	4607      	mov	r7, r0
 23f7882:	b088      	sub	sp, #32
    if(_mqtt->isConnected() && WiFi.ready()) {
 23f7884:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool MQTTManager::publish(String topic, String message, bool retain) {
 23f7886:	460e      	mov	r6, r1
 23f7888:	4615      	mov	r5, r2
 23f788a:	4698      	mov	r8, r3
    if(_mqtt->isConnected() && WiFi.ready()) {
 23f788c:	f001 fa8e 	bl	23f8dac <_ZN4MQTT11isConnectedEv>
 23f7890:	b198      	cbz	r0, 23f78ba <_ZN11MQTTManager7publishE6StringS0_b+0x3e>
 23f7892:	4815      	ldr	r0, [pc, #84]	; (23f78e8 <_ZN11MQTTManager7publishE6StringS0_b+0x6c>)
 23f7894:	f7ff fea4 	bl	23f75e0 <_ZN5spark9WiFiClass5readyEv>
 23f7898:	4604      	mov	r4, r0
 23f789a:	b170      	cbz	r0, 23f78ba <_ZN11MQTTManager7publishE6StringS0_b+0x3e>
        _mqtt->publish(topic, (const uint8_t*)message.c_str(), message.length(), retain, retain ? MQTT::QOS1 : MQTT::QOS0);
 23f789c:	2300      	movs	r3, #0
 23f789e:	682a      	ldr	r2, [r5, #0]
 23f78a0:	e9cd 8301 	strd	r8, r3, [sp, #4]
 23f78a4:	6831      	ldr	r1, [r6, #0]
 23f78a6:	68ab      	ldr	r3, [r5, #8]
 23f78a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 23f78aa:	f8cd 8000 	str.w	r8, [sp]
 23f78ae:	f001 fbd9 	bl	23f9064 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
        return true;
    } else {
        Log.warn("publish while MQTT not connected: " + topic + ", " + message);
    }
    return false;
}
 23f78b2:	4620      	mov	r0, r4
 23f78b4:	b008      	add	sp, #32
 23f78b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    StringSumHelper(const char *p) : String(p) {}
 23f78ba:	490c      	ldr	r1, [pc, #48]	; (23f78ec <_ZN11MQTTManager7publishE6StringS0_b+0x70>)
 23f78bc:	a804      	add	r0, sp, #16
 23f78be:	f004 f886 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
        Log.warn("publish while MQTT not connected: " + topic + ", " + message);
 23f78c2:	4631      	mov	r1, r6
 23f78c4:	a804      	add	r0, sp, #16
 23f78c6:	f004 f979 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f78ca:	4909      	ldr	r1, [pc, #36]	; (23f78f0 <_ZN11MQTTManager7publishE6StringS0_b+0x74>)
 23f78cc:	f004 f982 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f78d0:	4629      	mov	r1, r5
 23f78d2:	f004 f973 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f78d6:	6801      	ldr	r1, [r0, #0]
 23f78d8:	4806      	ldr	r0, [pc, #24]	; (23f78f4 <_ZN11MQTTManager7publishE6StringS0_b+0x78>)
 23f78da:	f7ff fe86 	bl	23f75ea <_ZNK5spark6Logger4warnEPKcz>
class StringSumHelper : public String
 23f78de:	a804      	add	r0, sp, #16
 23f78e0:	f004 f82a 	bl	23fb938 <_ZN6StringD1Ev>
    return false;
 23f78e4:	2400      	movs	r4, #0
 23f78e6:	e7e4      	b.n	23f78b2 <_ZN11MQTTManager7publishE6StringS0_b+0x36>
 23f78e8:	1007aed0 	.word	0x1007aed0
 23f78ec:	023ff49a 	.word	0x023ff49a
 23f78f0:	023ff4bd 	.word	0x023ff4bd
 23f78f4:	1007ae1c 	.word	0x1007ae1c

023f78f8 <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv>:
void MQTTManager::sendAliveMsgPeriodically() {
 23f78f8:	b510      	push	{r4, lr}
 23f78fa:	4604      	mov	r4, r0
 23f78fc:	b092      	sub	sp, #72	; 0x48
    if(Time.now() > _lastAliveTime + MQTT_ALIVE_SECONDS) {
 23f78fe:	f004 ff58 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
 23f7902:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f7904:	33b4      	adds	r3, #180	; 0xb4
 23f7906:	4298      	cmp	r0, r3
 23f7908:	dd32      	ble.n	23f7970 <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv+0x78>
        _lastAliveTime = Time.now();
 23f790a:	f004 ff52 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
 23f790e:	63e0      	str	r0, [r4, #60]	; 0x3c
        String time = Time.format(Time.now(), "%a %H:%M");
 23f7910:	f004 ff4f 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
 23f7914:	4b17      	ldr	r3, [pc, #92]	; (23f7974 <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv+0x7c>)
 23f7916:	4602      	mov	r2, r0
 23f7918:	4917      	ldr	r1, [pc, #92]	; (23f7978 <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv+0x80>)
 23f791a:	9300      	str	r3, [sp, #0]
 23f791c:	17c3      	asrs	r3, r0, #31
 23f791e:	a802      	add	r0, sp, #8
 23f7920:	f004 fee8 	bl	23fc6f4 <_ZN9TimeClass6formatExPKc>
    StringSumHelper(const String &s) : String(s) {}
 23f7924:	4915      	ldr	r1, [pc, #84]	; (23f797c <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv+0x84>)
 23f7926:	a80a      	add	r0, sp, #40	; 0x28
 23f7928:	f004 f89d 	bl	23fba66 <_ZN6StringC1ERKS_>
        publish(kPublishName+"/alive/"+_controllerName, time, false);
 23f792c:	4914      	ldr	r1, [pc, #80]	; (23f7980 <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv+0x88>)
 23f792e:	a80a      	add	r0, sp, #40	; 0x28
 23f7930:	f004 f950 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f7934:	f104 0128 	add.w	r1, r4, #40	; 0x28
 23f7938:	f004 f940 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f793c:	4601      	mov	r1, r0
 23f793e:	a806      	add	r0, sp, #24
 23f7940:	f004 f891 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f7944:	a902      	add	r1, sp, #8
 23f7946:	a80e      	add	r0, sp, #56	; 0x38
 23f7948:	f004 f88d 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f794c:	2300      	movs	r3, #0
 23f794e:	aa0e      	add	r2, sp, #56	; 0x38
 23f7950:	a906      	add	r1, sp, #24
 23f7952:	4620      	mov	r0, r4
 23f7954:	f7ff ff92 	bl	23f787c <_ZN11MQTTManager7publishE6StringS0_b>
 23f7958:	a80e      	add	r0, sp, #56	; 0x38
 23f795a:	f003 ffed 	bl	23fb938 <_ZN6StringD1Ev>
 23f795e:	a806      	add	r0, sp, #24
 23f7960:	f003 ffea 	bl	23fb938 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f7964:	a80a      	add	r0, sp, #40	; 0x28
 23f7966:	f003 ffe7 	bl	23fb938 <_ZN6StringD1Ev>
        String time = Time.format(Time.now(), "%a %H:%M");
 23f796a:	a802      	add	r0, sp, #8
 23f796c:	f003 ffe4 	bl	23fb938 <_ZN6StringD1Ev>
}
 23f7970:	b012      	add	sp, #72	; 0x48
 23f7972:	bd10      	pop	{r4, pc}
 23f7974:	023ff4c0 	.word	0x023ff4c0
 23f7978:	1007ae70 	.word	0x1007ae70
 23f797c:	1007ad60 	.word	0x1007ad60
 23f7980:	023ff4c9 	.word	0x023ff4c9

023f7984 <_ZN11MQTTManager7sendAckE6StringS0_S0_>:
            }
        }
    }
}

void MQTTManager::sendAck(String deviceName, String command, String message) {
 23f7984:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f7986:	460f      	mov	r7, r1
 23f7988:	4616      	mov	r6, r2
 23f798a:	b08d      	sub	sp, #52	; 0x34
 23f798c:	4604      	mov	r4, r0
    StringSumHelper(const String &s) : String(s) {}
 23f798e:	4915      	ldr	r1, [pc, #84]	; (23f79e4 <_ZN11MQTTManager7sendAckE6StringS0_S0_+0x60>)
 23f7990:	4668      	mov	r0, sp
 23f7992:	461d      	mov	r5, r3
 23f7994:	f004 f867 	bl	23fba66 <_ZN6StringC1ERKS_>
    publish(kPublishName + "/ack/" + deviceName + "/" + command, message);
 23f7998:	4668      	mov	r0, sp
 23f799a:	4913      	ldr	r1, [pc, #76]	; (23f79e8 <_ZN11MQTTManager7sendAckE6StringS0_S0_+0x64>)
 23f799c:	f004 f91a 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f79a0:	4639      	mov	r1, r7
 23f79a2:	f004 f90b 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f79a6:	4911      	ldr	r1, [pc, #68]	; (23f79ec <_ZN11MQTTManager7sendAckE6StringS0_S0_+0x68>)
 23f79a8:	f004 f914 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f79ac:	4631      	mov	r1, r6
 23f79ae:	f004 f905 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f79b2:	4601      	mov	r1, r0
 23f79b4:	a804      	add	r0, sp, #16
 23f79b6:	f004 f856 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f79ba:	4629      	mov	r1, r5
 23f79bc:	a808      	add	r0, sp, #32
 23f79be:	f004 f852 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f79c2:	2300      	movs	r3, #0
 23f79c4:	aa08      	add	r2, sp, #32
 23f79c6:	a904      	add	r1, sp, #16
 23f79c8:	4620      	mov	r0, r4
 23f79ca:	f7ff ff57 	bl	23f787c <_ZN11MQTTManager7publishE6StringS0_b>
 23f79ce:	a808      	add	r0, sp, #32
 23f79d0:	f003 ffb2 	bl	23fb938 <_ZN6StringD1Ev>
 23f79d4:	a804      	add	r0, sp, #16
 23f79d6:	f003 ffaf 	bl	23fb938 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f79da:	4668      	mov	r0, sp
 23f79dc:	f003 ffac 	bl	23fb938 <_ZN6StringD1Ev>
}
 23f79e0:	b00d      	add	sp, #52	; 0x34
 23f79e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f79e4:	1007ad60 	.word	0x1007ad60
 23f79e8:	023ff4d1 	.word	0x023ff4d1
 23f79ec:	023ff7bc 	.word	0x023ff7bc

023f79f0 <_ZN11MQTTManager13parseLogLevelE6String>:
    String deviceName = subtopic.substring(slashIndex+1);
    
    return deviceName;
}

void MQTTManager::parseLogLevel(String lcMessage) {
 23f79f0:	b538      	push	{r3, r4, r5, lr}
 23f79f2:	460c      	mov	r4, r1
 23f79f4:	4605      	mov	r5, r0
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f79f6:	4919      	ldr	r1, [pc, #100]	; (23f7a5c <_ZN11MQTTManager13parseLogLevelE6String+0x6c>)
 23f79f8:	4620      	mov	r0, r4
 23f79fa:	f004 f922 	bl	23fbc42 <_ZNK6String6equalsEPKc>
    LogLevel level = LOG_LEVEL_WARN;
    if (lcMessage == "none") level = LOG_LEVEL_NONE;         // 70
 23f79fe:	bb30      	cbnz	r0, 23f7a4e <_ZN11MQTTManager13parseLogLevelE6String+0x5e>
 23f7a00:	4620      	mov	r0, r4
 23f7a02:	4917      	ldr	r1, [pc, #92]	; (23f7a60 <_ZN11MQTTManager13parseLogLevelE6String+0x70>)
 23f7a04:	f004 f91d 	bl	23fbc42 <_ZNK6String6equalsEPKc>
    else if (lcMessage == "error") level = LOG_LEVEL_ERROR;  // 50
 23f7a08:	bb18      	cbnz	r0, 23f7a52 <_ZN11MQTTManager13parseLogLevelE6String+0x62>
 23f7a0a:	4620      	mov	r0, r4
 23f7a0c:	4915      	ldr	r1, [pc, #84]	; (23f7a64 <_ZN11MQTTManager13parseLogLevelE6String+0x74>)
 23f7a0e:	f004 f918 	bl	23fbc42 <_ZNK6String6equalsEPKc>
    else if (lcMessage == "warn" || lcMessage == "warning") level = LOG_LEVEL_WARN;    // 40
 23f7a12:	b118      	cbz	r0, 23f7a1c <_ZN11MQTTManager13parseLogLevelE6String+0x2c>
 23f7a14:	2328      	movs	r3, #40	; 0x28
    else if (lcMessage == "info") level = LOG_LEVEL_INFO;    // 30
    else if (lcMessage == "trace") level = LOG_LEVEL_TRACE;  // 1
    else if (lcMessage == "all") level = LOG_LEVEL_ALL;      // 1
    else return;
    
    _logLevel = level;
 23f7a16:	f885 3020 	strb.w	r3, [r5, #32]
 23f7a1a:	e017      	b.n	23f7a4c <_ZN11MQTTManager13parseLogLevelE6String+0x5c>
 23f7a1c:	4620      	mov	r0, r4
 23f7a1e:	4912      	ldr	r1, [pc, #72]	; (23f7a68 <_ZN11MQTTManager13parseLogLevelE6String+0x78>)
 23f7a20:	f004 f90f 	bl	23fbc42 <_ZNK6String6equalsEPKc>
    else if (lcMessage == "warn" || lcMessage == "warning") level = LOG_LEVEL_WARN;    // 40
 23f7a24:	2800      	cmp	r0, #0
 23f7a26:	d1f5      	bne.n	23f7a14 <_ZN11MQTTManager13parseLogLevelE6String+0x24>
 23f7a28:	4620      	mov	r0, r4
 23f7a2a:	4910      	ldr	r1, [pc, #64]	; (23f7a6c <_ZN11MQTTManager13parseLogLevelE6String+0x7c>)
 23f7a2c:	f004 f909 	bl	23fbc42 <_ZNK6String6equalsEPKc>
    else if (lcMessage == "info") level = LOG_LEVEL_INFO;    // 30
 23f7a30:	b988      	cbnz	r0, 23f7a56 <_ZN11MQTTManager13parseLogLevelE6String+0x66>
 23f7a32:	4620      	mov	r0, r4
 23f7a34:	490e      	ldr	r1, [pc, #56]	; (23f7a70 <_ZN11MQTTManager13parseLogLevelE6String+0x80>)
 23f7a36:	f004 f904 	bl	23fbc42 <_ZNK6String6equalsEPKc>
    else if (lcMessage == "trace") level = LOG_LEVEL_TRACE;  // 1
 23f7a3a:	b108      	cbz	r0, 23f7a40 <_ZN11MQTTManager13parseLogLevelE6String+0x50>
 23f7a3c:	2301      	movs	r3, #1
 23f7a3e:	e7ea      	b.n	23f7a16 <_ZN11MQTTManager13parseLogLevelE6String+0x26>
 23f7a40:	4620      	mov	r0, r4
 23f7a42:	490c      	ldr	r1, [pc, #48]	; (23f7a74 <_ZN11MQTTManager13parseLogLevelE6String+0x84>)
 23f7a44:	f004 f8fd 	bl	23fbc42 <_ZNK6String6equalsEPKc>
    else if (lcMessage == "all") level = LOG_LEVEL_ALL;      // 1
 23f7a48:	2800      	cmp	r0, #0
 23f7a4a:	d1f7      	bne.n	23f7a3c <_ZN11MQTTManager13parseLogLevelE6String+0x4c>
}
 23f7a4c:	bd38      	pop	{r3, r4, r5, pc}
    if (lcMessage == "none") level = LOG_LEVEL_NONE;         // 70
 23f7a4e:	2346      	movs	r3, #70	; 0x46
 23f7a50:	e7e1      	b.n	23f7a16 <_ZN11MQTTManager13parseLogLevelE6String+0x26>
    else if (lcMessage == "error") level = LOG_LEVEL_ERROR;  // 50
 23f7a52:	2332      	movs	r3, #50	; 0x32
 23f7a54:	e7df      	b.n	23f7a16 <_ZN11MQTTManager13parseLogLevelE6String+0x26>
    else if (lcMessage == "info") level = LOG_LEVEL_INFO;    // 30
 23f7a56:	231e      	movs	r3, #30
 23f7a58:	e7dd      	b.n	23f7a16 <_ZN11MQTTManager13parseLogLevelE6String+0x26>
 23f7a5a:	bf00      	nop
 23f7a5c:	023ff4d7 	.word	0x023ff4d7
 23f7a60:	023ff4dc 	.word	0x023ff4dc
 23f7a64:	023ff4e2 	.word	0x023ff4e2
 23f7a68:	023ff4e7 	.word	0x023ff4e7
 23f7a6c:	023ff4ef 	.word	0x023ff4ef
 23f7a70:	023ff4f4 	.word	0x023ff4f4
 23f7a74:	023ff4fa 	.word	0x023ff4fa

023f7a78 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_>:
{
 23f7a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f7a7c:	ed2d 8b02 	vpush	{d8}
 23f7a80:	4604      	mov	r4, r0
 23f7a82:	4688      	mov	r8, r1
 23f7a84:	4615      	mov	r5, r2
 23f7a86:	2600      	movs	r6, #0
    String subtopics[5];
 23f7a88:	4fb2      	ldr	r7, [pc, #712]	; (23f7d54 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2dc>)
{
 23f7a8a:	b0aa      	sub	sp, #168	; 0xa8
    String subtopics[5];
 23f7a8c:	ab16      	add	r3, sp, #88	; 0x58
 23f7a8e:	1998      	adds	r0, r3, r6
 23f7a90:	4639      	mov	r1, r7
 23f7a92:	3610      	adds	r6, #16
 23f7a94:	f003 ff9b 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
 23f7a98:	2e50      	cmp	r6, #80	; 0x50
 23f7a9a:	d1f7      	bne.n	23f7a8c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x14>
    int numTopics = 0;
 23f7a9c:	2600      	movs	r6, #0
    int end = lcTopic.indexOf('/');
 23f7a9e:	212f      	movs	r1, #47	; 0x2f
 23f7aa0:	4640      	mov	r0, r8
 23f7aa2:	f004 f933 	bl	23fbd0c <_ZNK6String7indexOfEc>
    int start = 0;
 23f7aa6:	4632      	mov	r2, r6
    if(end > 0) { // Might be -1 if only 1 subtopic
 23f7aa8:	1e07      	subs	r7, r0, #0
 23f7aaa:	dd1a      	ble.n	23f7ae2 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x6a>
            subtopics[numTopics] = lcTopic.substring(start, end);
 23f7aac:	463b      	mov	r3, r7
 23f7aae:	4641      	mov	r1, r8
 23f7ab0:	a812      	add	r0, sp, #72	; 0x48
 23f7ab2:	f004 f92f 	bl	23fbd14 <_ZNK6String9substringEjj>
 23f7ab6:	ab16      	add	r3, sp, #88	; 0x58
 23f7ab8:	eb03 1006 	add.w	r0, r3, r6, lsl #4
 23f7abc:	a912      	add	r1, sp, #72	; 0x48
 23f7abe:	f003 ffdd 	bl	23fba7c <_ZN6StringaSEOS_>
 23f7ac2:	a812      	add	r0, sp, #72	; 0x48
 23f7ac4:	f003 ff38 	bl	23fb938 <_ZN6StringD1Ev>
            start = end+1;
 23f7ac8:	1c7a      	adds	r2, r7, #1
            end = lcTopic.indexOf('/', start);
 23f7aca:	212f      	movs	r1, #47	; 0x2f
 23f7acc:	4640      	mov	r0, r8
 23f7ace:	9201      	str	r2, [sp, #4]
 23f7ad0:	f004 f90e 	bl	23fbcf0 <_ZNK6String7indexOfEcj>
            numTopics++;
 23f7ad4:	3601      	adds	r6, #1
        } while(numTopics < 4 && end > 0);
 23f7ad6:	2e04      	cmp	r6, #4
            end = lcTopic.indexOf('/', start);
 23f7ad8:	4607      	mov	r7, r0
        } while(numTopics < 4 && end > 0);
 23f7ada:	9a01      	ldr	r2, [sp, #4]
 23f7adc:	d001      	beq.n	23f7ae2 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x6a>
 23f7ade:	2800      	cmp	r0, #0
 23f7ae0:	e7e3      	b.n	23f7aaa <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x32>
    subtopics[numTopics++] = lcTopic.substring(start);  // Last one
 23f7ae2:	4641      	mov	r1, r8
 23f7ae4:	a812      	add	r0, sp, #72	; 0x48
 23f7ae6:	f004 f937 	bl	23fbd58 <_ZNK6String9substringEj>
 23f7aea:	ab16      	add	r3, sp, #88	; 0x58
 23f7aec:	a912      	add	r1, sp, #72	; 0x48
 23f7aee:	eb03 1006 	add.w	r0, r3, r6, lsl #4
 23f7af2:	f003 ffc3 	bl	23fba7c <_ZN6StringaSEOS_>
 23f7af6:	a812      	add	r0, sp, #72	; 0x48
 23f7af8:	f003 ff1e 	bl	23fb938 <_ZN6StringD1Ev>
 23f7afc:	4996      	ldr	r1, [pc, #600]	; (23f7d58 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2e0>)
 23f7afe:	a816      	add	r0, sp, #88	; 0x58
 23f7b00:	f004 f89f 	bl	23fbc42 <_ZNK6String6equalsEPKc>
        if(subtopics[0] == "ack") {                         // patriot/ack/<device>/<command>
 23f7b04:	2800      	cmp	r0, #0
 23f7b06:	d14b      	bne.n	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f7b08:	4994      	ldr	r1, [pc, #592]	; (23f7d5c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2e4>)
 23f7b0a:	a816      	add	r0, sp, #88	; 0x58
    subtopics[numTopics++] = lcTopic.substring(start);  // Last one
 23f7b0c:	3601      	adds	r6, #1
 23f7b0e:	f004 f898 	bl	23fbc42 <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "alive" && numTopics > 1) {                // patriot/alive/<controller>
 23f7b12:	b188      	cbz	r0, 23f7b38 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0xc0>
 23f7b14:	2e01      	cmp	r6, #1
 23f7b16:	d011      	beq.n	23f7b3c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0xc4>
 23f7b18:	4991      	ldr	r1, [pc, #580]	; (23f7d60 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2e8>)
 23f7b1a:	a81a      	add	r0, sp, #104	; 0x68
 23f7b1c:	f004 f891 	bl	23fbc42 <_ZNK6String6equalsEPKc>
            if(subtopics[1] == "frontpanel") {
 23f7b20:	2800      	cmp	r0, #0
 23f7b22:	d13a      	bne.n	23f7b9a <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x122>
 23f7b24:	498f      	ldr	r1, [pc, #572]	; (23f7d64 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2ec>)
 23f7b26:	a81a      	add	r0, sp, #104	; 0x68
 23f7b28:	f004 f88b 	bl	23fbc42 <_ZNK6String6equalsEPKc>
            } else if(subtopics[1] == "leftslide") {
 23f7b2c:	2800      	cmp	r0, #0
 23f7b2e:	d044      	beq.n	23f7bba <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x142>
                _lastAliveLeftSlide = Time.now();
 23f7b30:	f004 fe3f 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
 23f7b34:	6560      	str	r0, [r4, #84]	; 0x54
 23f7b36:	e033      	b.n	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
        } else if(numTopics > 1 && subtopics[1] == "brightness") {           // patriot/<device>/brightness value
 23f7b38:	2e01      	cmp	r6, #1
 23f7b3a:	d148      	bne.n	23f7bce <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x156>
 23f7b3c:	498a      	ldr	r1, [pc, #552]	; (23f7d68 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2f0>)
 23f7b3e:	a816      	add	r0, sp, #88	; 0x58
 23f7b40:	f004 f87f 	bl	23fbc42 <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "latlong") {                                  // patriot/latlong lat,long
 23f7b44:	2800      	cmp	r0, #0
 23f7b46:	f040 8083 	bne.w	23f7c50 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x1d8>
 23f7b4a:	4988      	ldr	r1, [pc, #544]	; (23f7d6c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2f4>)
 23f7b4c:	a816      	add	r0, sp, #88	; 0x58
 23f7b4e:	f004 f878 	bl	23fbc42 <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "loglevel") {
 23f7b52:	2800      	cmp	r0, #0
 23f7b54:	f000 8129 	beq.w	23f7daa <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x332>
            if(numTopics == 1 || subtopics[1] == _controllerName || subtopics[1] == "all" ) {
 23f7b58:	2e01      	cmp	r6, #1
                Log.info(_controllerName + ": hold " + subtopics[0]);
 23f7b5a:	f104 0728 	add.w	r7, r4, #40	; 0x28
            if(numTopics == 1 || subtopics[1] == _controllerName || subtopics[1] == "all" ) {
 23f7b5e:	f040 8115 	bne.w	23f7d8c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x314>
    StringSumHelper(const String &s) : String(s) {}
 23f7b62:	4639      	mov	r1, r7
 23f7b64:	a812      	add	r0, sp, #72	; 0x48
 23f7b66:	f003 ff7e 	bl	23fba66 <_ZN6StringC1ERKS_>
                Log.warn(_controllerName + " setting logLevel = " + lcMessage);
 23f7b6a:	4981      	ldr	r1, [pc, #516]	; (23f7d70 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2f8>)
 23f7b6c:	a812      	add	r0, sp, #72	; 0x48
 23f7b6e:	f004 f831 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f7b72:	4629      	mov	r1, r5
 23f7b74:	f004 f822 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f7b78:	6801      	ldr	r1, [r0, #0]
 23f7b7a:	487e      	ldr	r0, [pc, #504]	; (23f7d74 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2fc>)
 23f7b7c:	f7ff fd35 	bl	23f75ea <_ZNK5spark6Logger4warnEPKcz>
class StringSumHelper : public String
 23f7b80:	a812      	add	r0, sp, #72	; 0x48
 23f7b82:	f003 fed9 	bl	23fb938 <_ZN6StringD1Ev>
                parseLogLevel(lcMessage);
 23f7b86:	4629      	mov	r1, r5
 23f7b88:	a812      	add	r0, sp, #72	; 0x48
 23f7b8a:	f003 ff6c 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f7b8e:	4620      	mov	r0, r4
 23f7b90:	a912      	add	r1, sp, #72	; 0x48
 23f7b92:	f7ff ff2d 	bl	23f79f0 <_ZN11MQTTManager13parseLogLevelE6String>
 23f7b96:	a812      	add	r0, sp, #72	; 0x48
 23f7b98:	e057      	b.n	23f7c4a <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x1d2>
                _lastAliveFrontPanel = Time.now();
 23f7b9a:	f004 fe0a 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
 23f7b9e:	6520      	str	r0, [r4, #80]	; 0x50
                else if(lcMessage == "off" || lcMessage == "false") value = 0;
 23f7ba0:	2404      	movs	r4, #4
    String subtopics[5];
 23f7ba2:	ab16      	add	r3, sp, #88	; 0x58
 23f7ba4:	eb03 1004 	add.w	r0, r3, r4, lsl #4
 23f7ba8:	f003 fec6 	bl	23fb938 <_ZN6StringD1Ev>
 23f7bac:	3c01      	subs	r4, #1
 23f7bae:	d2f8      	bcs.n	23f7ba2 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x12a>
}
 23f7bb0:	b02a      	add	sp, #168	; 0xa8
 23f7bb2:	ecbd 8b02 	vpop	{d8}
 23f7bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f7bba:	496f      	ldr	r1, [pc, #444]	; (23f7d78 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x300>)
 23f7bbc:	a81a      	add	r0, sp, #104	; 0x68
 23f7bbe:	f004 f840 	bl	23fbc42 <_ZNK6String6equalsEPKc>
            } else if(subtopics[1] == "rearpanel") {
 23f7bc2:	2800      	cmp	r0, #0
 23f7bc4:	d0ec      	beq.n	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
                _lastAliveRearPanel = Time.now();
 23f7bc6:	f004 fdf4 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
 23f7bca:	65a0      	str	r0, [r4, #88]	; 0x58
 23f7bcc:	e7e8      	b.n	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f7bce:	496b      	ldr	r1, [pc, #428]	; (23f7d7c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x304>)
 23f7bd0:	a81a      	add	r0, sp, #104	; 0x68
 23f7bd2:	f004 f836 	bl	23fbc42 <_ZNK6String6equalsEPKc>
        } else if(numTopics > 1 && subtopics[1] == "brightness") {           // patriot/<device>/brightness value
 23f7bd6:	2800      	cmp	r0, #0
 23f7bd8:	f000 825e 	beq.w	23f8098 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x620>
            int value = lcMessage.toInt();
 23f7bdc:	4628      	mov	r0, r5
 23f7bde:	f004 f8f9 	bl	23fbdd4 <_ZNK6String5toIntEv>
            String deviceName = subtopics[0];
 23f7be2:	a916      	add	r1, sp, #88	; 0x58
            int value = lcMessage.toInt();
 23f7be4:	4607      	mov	r7, r0
            String deviceName = subtopics[0];
 23f7be6:	a806      	add	r0, sp, #24
 23f7be8:	f003 ff3d 	bl	23fba66 <_ZN6StringC1ERKS_>
            Device *device = Device::get(deviceName);
 23f7bec:	a906      	add	r1, sp, #24
 23f7bee:	a812      	add	r0, sp, #72	; 0x48
 23f7bf0:	f003 ff39 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f7bf4:	a812      	add	r0, sp, #72	; 0x48
 23f7bf6:	f000 fe4f 	bl	23f8898 <_ZN6Device3getE6String>
 23f7bfa:	4606      	mov	r6, r0
 23f7bfc:	a812      	add	r0, sp, #72	; 0x48
 23f7bfe:	f003 fe9b 	bl	23fb938 <_ZN6StringD1Ev>
            if( device != NULL && value > 0) {
 23f7c02:	b30e      	cbz	r6, 23f7c48 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x1d0>
 23f7c04:	2f00      	cmp	r7, #0
 23f7c06:	dd1f      	ble.n	23f7c48 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x1d0>
                device->setBrightness(value);
 23f7c08:	6833      	ldr	r3, [r6, #0]
 23f7c0a:	4639      	mov	r1, r7
 23f7c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f7c0e:	4630      	mov	r0, r6
 23f7c10:	4798      	blx	r3
                sendAck(deviceName, "brightness", lcMessage);
 23f7c12:	a906      	add	r1, sp, #24
 23f7c14:	a80a      	add	r0, sp, #40	; 0x28
 23f7c16:	f003 ff26 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f7c1a:	4958      	ldr	r1, [pc, #352]	; (23f7d7c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x304>)
 23f7c1c:	a80e      	add	r0, sp, #56	; 0x38
 23f7c1e:	f003 fed6 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
 23f7c22:	4629      	mov	r1, r5
 23f7c24:	a812      	add	r0, sp, #72	; 0x48
 23f7c26:	f003 ff1e 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f7c2a:	ab12      	add	r3, sp, #72	; 0x48
 23f7c2c:	aa0e      	add	r2, sp, #56	; 0x38
 23f7c2e:	a90a      	add	r1, sp, #40	; 0x28
 23f7c30:	4620      	mov	r0, r4
 23f7c32:	f7ff fea7 	bl	23f7984 <_ZN11MQTTManager7sendAckE6StringS0_S0_>
 23f7c36:	a812      	add	r0, sp, #72	; 0x48
 23f7c38:	f003 fe7e 	bl	23fb938 <_ZN6StringD1Ev>
 23f7c3c:	a80e      	add	r0, sp, #56	; 0x38
 23f7c3e:	f003 fe7b 	bl	23fb938 <_ZN6StringD1Ev>
 23f7c42:	a80a      	add	r0, sp, #40	; 0x28
 23f7c44:	f003 fe78 	bl	23fb938 <_ZN6StringD1Ev>
            String deviceName = subtopics[0];
 23f7c48:	a806      	add	r0, sp, #24
            String latString = lcMessage.substring(0, commaIndex-1);
 23f7c4a:	f003 fe75 	bl	23fb938 <_ZN6StringD1Ev>
 23f7c4e:	e7a7      	b.n	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
            int commaIndex = lcMessage.indexOf(',');
 23f7c50:	212c      	movs	r1, #44	; 0x2c
 23f7c52:	4628      	mov	r0, r5
 23f7c54:	f004 f85a 	bl	23fbd0c <_ZNK6String7indexOfEc>
            if(commaIndex < 0) return;
 23f7c58:	1e04      	subs	r4, r0, #0
 23f7c5a:	dba1      	blt.n	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
            String latString = lcMessage.substring(0, commaIndex-1);
 23f7c5c:	1e63      	subs	r3, r4, #1
 23f7c5e:	2200      	movs	r2, #0
 23f7c60:	4629      	mov	r1, r5
 23f7c62:	a802      	add	r0, sp, #8
 23f7c64:	f004 f856 	bl	23fbd14 <_ZNK6String9substringEjj>
            String lonString = lcMessage.substring(commaIndex+1);
 23f7c68:	1c62      	adds	r2, r4, #1
 23f7c6a:	4629      	mov	r1, r5
 23f7c6c:	a806      	add	r0, sp, #24
 23f7c6e:	f004 f873 	bl	23fbd58 <_ZNK6String9substringEj>
            float latitude = latString.toFloat();
 23f7c72:	a802      	add	r0, sp, #8
 23f7c74:	f004 f8b4 	bl	23fbde0 <_ZNK6String7toFloatEv>
            float longitude = lonString.toFloat();
 23f7c78:	a806      	add	r0, sp, #24
            float latitude = latString.toFloat();
 23f7c7a:	eeb0 8a40 	vmov.f32	s16, s0
            float longitude = lonString.toFloat();
 23f7c7e:	f004 f8af 	bl	23fbde0 <_ZNK6String7toFloatEv>
    StringSumHelper(const char *p) : String(p) {}
 23f7c82:	493f      	ldr	r1, [pc, #252]	; (23f7d80 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x308>)
 23f7c84:	a80e      	add	r0, sp, #56	; 0x38
 23f7c86:	eef0 8a40 	vmov.f32	s17, s0
 23f7c8a:	f003 fea0 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("lat/long = " + String(latitude) + "," + String(longitude));
 23f7c8e:	eeb0 0a48 	vmov.f32	s0, s16
 23f7c92:	2106      	movs	r1, #6
 23f7c94:	a80a      	add	r0, sp, #40	; 0x28
 23f7c96:	f003 ff37 	bl	23fbb08 <_ZN6StringC1Efi>
 23f7c9a:	a90a      	add	r1, sp, #40	; 0x28
 23f7c9c:	a80e      	add	r0, sp, #56	; 0x38
 23f7c9e:	f003 ff8d 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f7ca2:	4938      	ldr	r1, [pc, #224]	; (23f7d84 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x30c>)
 23f7ca4:	f003 ff96 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f7ca8:	4604      	mov	r4, r0
 23f7caa:	eeb0 0a68 	vmov.f32	s0, s17
 23f7cae:	2106      	movs	r1, #6
 23f7cb0:	a812      	add	r0, sp, #72	; 0x48
 23f7cb2:	f003 ff29 	bl	23fbb08 <_ZN6StringC1Efi>
 23f7cb6:	a912      	add	r1, sp, #72	; 0x48
 23f7cb8:	4620      	mov	r0, r4
 23f7cba:	f003 ff7f 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f7cbe:	6801      	ldr	r1, [r0, #0]
 23f7cc0:	482c      	ldr	r0, [pc, #176]	; (23f7d74 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2fc>)
 23f7cc2:	f7ff f919 	bl	23f6ef8 <_ZNK5spark6Logger4infoEPKcz>
 23f7cc6:	a812      	add	r0, sp, #72	; 0x48
 23f7cc8:	f003 fe36 	bl	23fb938 <_ZN6StringD1Ev>
 23f7ccc:	a80a      	add	r0, sp, #40	; 0x28
 23f7cce:	f003 fe33 	bl	23fb938 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f7cd2:	a80e      	add	r0, sp, #56	; 0x38
 23f7cd4:	f003 fe30 	bl	23fb938 <_ZN6StringD1Ev>
            if(latitude != 0 && longitude != 0) {
 23f7cd8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 23f7cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f7ce0:	d033      	beq.n	23f7d4a <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2d2>
 23f7ce2:	eef5 8a40 	vcmp.f32	s17, #0.0
 23f7ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f7cea:	d02e      	beq.n	23f7d4a <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2d2>
    StringSumHelper(const char *p) : String(p) {}
 23f7cec:	4926      	ldr	r1, [pc, #152]	; (23f7d88 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x310>)
 23f7cee:	a80e      	add	r0, sp, #56	; 0x38
 23f7cf0:	f003 fe6d 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
                Log.trace("Setting lat/long: " + String(latitude) + "," + String(longitude));
 23f7cf4:	eeb0 0a48 	vmov.f32	s0, s16
 23f7cf8:	2106      	movs	r1, #6
 23f7cfa:	a80a      	add	r0, sp, #40	; 0x28
 23f7cfc:	f003 ff04 	bl	23fbb08 <_ZN6StringC1Efi>
 23f7d00:	a90a      	add	r1, sp, #40	; 0x28
 23f7d02:	a80e      	add	r0, sp, #56	; 0x38
 23f7d04:	f003 ff5a 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f7d08:	491e      	ldr	r1, [pc, #120]	; (23f7d84 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x30c>)
 23f7d0a:	f003 ff63 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f7d0e:	4604      	mov	r4, r0
 23f7d10:	eeb0 0a68 	vmov.f32	s0, s17
 23f7d14:	2106      	movs	r1, #6
 23f7d16:	a812      	add	r0, sp, #72	; 0x48
 23f7d18:	f003 fef6 	bl	23fbb08 <_ZN6StringC1Efi>
 23f7d1c:	a912      	add	r1, sp, #72	; 0x48
 23f7d1e:	4620      	mov	r0, r4
 23f7d20:	f003 ff4c 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f7d24:	6801      	ldr	r1, [r0, #0]
 23f7d26:	4813      	ldr	r0, [pc, #76]	; (23f7d74 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2fc>)
 23f7d28:	f7ff f8f4 	bl	23f6f14 <_ZNK5spark6Logger5traceEPKcz>
 23f7d2c:	a812      	add	r0, sp, #72	; 0x48
 23f7d2e:	f003 fe03 	bl	23fb938 <_ZN6StringD1Ev>
 23f7d32:	a80a      	add	r0, sp, #40	; 0x28
 23f7d34:	f003 fe00 	bl	23fb938 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f7d38:	a80e      	add	r0, sp, #56	; 0x38
 23f7d3a:	f003 fdfd 	bl	23fb938 <_ZN6StringD1Ev>
                IoT::setLatLong(latitude,longitude);
 23f7d3e:	eef0 0a68 	vmov.f32	s1, s17
 23f7d42:	eeb0 0a48 	vmov.f32	s0, s16
 23f7d46:	f7ff fa55 	bl	23f71f4 <_ZN3IoT10setLatLongEff>
            String lonString = lcMessage.substring(commaIndex+1);
 23f7d4a:	a806      	add	r0, sp, #24
 23f7d4c:	f003 fdf4 	bl	23fb938 <_ZN6StringD1Ev>
            String latString = lcMessage.substring(0, commaIndex-1);
 23f7d50:	a802      	add	r0, sp, #8
 23f7d52:	e77a      	b.n	23f7c4a <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x1d2>
 23f7d54:	023ff895 	.word	0x023ff895
 23f7d58:	023ff4fe 	.word	0x023ff4fe
 23f7d5c:	023ff502 	.word	0x023ff502
 23f7d60:	023ff508 	.word	0x023ff508
 23f7d64:	023ff513 	.word	0x023ff513
 23f7d68:	023ff532 	.word	0x023ff532
 23f7d6c:	023ff565 	.word	0x023ff565
 23f7d70:	023ff56e 	.word	0x023ff56e
 23f7d74:	1007ae1c 	.word	0x1007ae1c
 23f7d78:	023ff51d 	.word	0x023ff51d
 23f7d7c:	023ff527 	.word	0x023ff527
 23f7d80:	023ff544 	.word	0x023ff544
 23f7d84:	023ff550 	.word	0x023ff550
 23f7d88:	023ff552 	.word	0x023ff552
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23f7d8c:	4639      	mov	r1, r7
 23f7d8e:	a81a      	add	r0, sp, #104	; 0x68
 23f7d90:	f003 ff4a 	bl	23fbc28 <_ZNK6String6equalsERKS_>
            if(numTopics == 1 || subtopics[1] == _controllerName || subtopics[1] == "all" ) {
 23f7d94:	2800      	cmp	r0, #0
 23f7d96:	f47f aee4 	bne.w	23f7b62 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0xea>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f7d9a:	49aa      	ldr	r1, [pc, #680]	; (23f8044 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5cc>)
 23f7d9c:	a81a      	add	r0, sp, #104	; 0x68
 23f7d9e:	f003 ff50 	bl	23fbc42 <_ZNK6String6equalsEPKc>
 23f7da2:	2800      	cmp	r0, #0
 23f7da4:	f47f aedd 	bne.w	23f7b62 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0xea>
 23f7da8:	e6fa      	b.n	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f7daa:	49a7      	ldr	r1, [pc, #668]	; (23f8048 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d0>)
 23f7dac:	a816      	add	r0, sp, #88	; 0x58
 23f7dae:	f003 ff48 	bl	23fbc42 <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "memory") {
 23f7db2:	b308      	cbz	r0, 23f7df8 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x380>
            if(lcMessage == _controllerName || lcMessage == "all") {
 23f7db4:	3428      	adds	r4, #40	; 0x28
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23f7db6:	4621      	mov	r1, r4
 23f7db8:	4628      	mov	r0, r5
 23f7dba:	f003 ff35 	bl	23fbc28 <_ZNK6String6equalsERKS_>
 23f7dbe:	b1a0      	cbz	r0, 23f7dea <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x372>
    StringSumHelper(const String &s) : String(s) {}
 23f7dc0:	4621      	mov	r1, r4
 23f7dc2:	a812      	add	r0, sp, #72	; 0x48
 23f7dc4:	f003 fe4f 	bl	23fba66 <_ZN6StringC1ERKS_>
                Log.info(_controllerName + ": free memory = %d", System.freeMemory());
 23f7dc8:	49a0      	ldr	r1, [pc, #640]	; (23f804c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d4>)
 23f7dca:	a812      	add	r0, sp, #72	; 0x48
 23f7dcc:	f003 ff02 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
    const char * c_str() const { return buffer; }
 23f7dd0:	6801      	ldr	r1, [r0, #0]
 23f7dd2:	9101      	str	r1, [sp, #4]
 23f7dd4:	f004 f851 	bl	23fbe7a <_ZN11SystemClass10freeMemoryEv>
 23f7dd8:	9901      	ldr	r1, [sp, #4]
 23f7dda:	4602      	mov	r2, r0
 23f7ddc:	489c      	ldr	r0, [pc, #624]	; (23f8050 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f7dde:	f7ff f88b 	bl	23f6ef8 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f7de2:	a812      	add	r0, sp, #72	; 0x48
 23f7de4:	f003 fda8 	bl	23fb938 <_ZN6StringD1Ev>
 23f7de8:	e6da      	b.n	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f7dea:	4628      	mov	r0, r5
 23f7dec:	4995      	ldr	r1, [pc, #596]	; (23f8044 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5cc>)
 23f7dee:	f003 ff28 	bl	23fbc42 <_ZNK6String6equalsEPKc>
            if(lcMessage == _controllerName || lcMessage == "all") {
 23f7df2:	2800      	cmp	r0, #0
 23f7df4:	d1e4      	bne.n	23f7dc0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x348>
 23f7df6:	e6d3      	b.n	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f7df8:	4996      	ldr	r1, [pc, #600]	; (23f8054 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5dc>)
 23f7dfa:	a816      	add	r0, sp, #88	; 0x58
 23f7dfc:	f003 ff21 	bl	23fbc42 <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "query") {
 23f7e00:	b1f0      	cbz	r0, 23f7e40 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x3c8>
            if(lcMessage == _controllerName || lcMessage == "all") {
 23f7e02:	3428      	adds	r4, #40	; 0x28
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23f7e04:	4621      	mov	r1, r4
 23f7e06:	4628      	mov	r0, r5
 23f7e08:	f003 ff0e 	bl	23fbc28 <_ZNK6String6equalsERKS_>
 23f7e0c:	b188      	cbz	r0, 23f7e32 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x3ba>
    StringSumHelper(const String &s) : String(s) {}
 23f7e0e:	4621      	mov	r1, r4
 23f7e10:	a812      	add	r0, sp, #72	; 0x48
 23f7e12:	f003 fe28 	bl	23fba66 <_ZN6StringC1ERKS_>
                Log.info(_controllerName + ": received query addressed to us");
 23f7e16:	4990      	ldr	r1, [pc, #576]	; (23f8058 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5e0>)
 23f7e18:	a812      	add	r0, sp, #72	; 0x48
 23f7e1a:	f003 fedb 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f7e1e:	6801      	ldr	r1, [r0, #0]
 23f7e20:	488b      	ldr	r0, [pc, #556]	; (23f8050 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f7e22:	f7ff f869 	bl	23f6ef8 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f7e26:	a812      	add	r0, sp, #72	; 0x48
 23f7e28:	f003 fd86 	bl	23fb938 <_ZN6StringD1Ev>
                Device::publishStates();
 23f7e2c:	f000 fe1a 	bl	23f8a64 <_ZN6Device13publishStatesEv>
 23f7e30:	e6b6      	b.n	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f7e32:	4628      	mov	r0, r5
 23f7e34:	4983      	ldr	r1, [pc, #524]	; (23f8044 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5cc>)
 23f7e36:	f003 ff04 	bl	23fbc42 <_ZNK6String6equalsEPKc>
            if(lcMessage == _controllerName || lcMessage == "all") {
 23f7e3a:	2800      	cmp	r0, #0
 23f7e3c:	d1e7      	bne.n	23f7e0e <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x396>
 23f7e3e:	e6af      	b.n	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f7e40:	4986      	ldr	r1, [pc, #536]	; (23f805c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5e4>)
 23f7e42:	a816      	add	r0, sp, #88	; 0x58
 23f7e44:	f003 fefd 	bl	23fbc42 <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "reset") {
 23f7e48:	b310      	cbz	r0, 23f7e90 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x418>
            if(lcMessage == _controllerName || lcMessage == "all") {
 23f7e4a:	3428      	adds	r4, #40	; 0x28
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23f7e4c:	4621      	mov	r1, r4
 23f7e4e:	4628      	mov	r0, r5
 23f7e50:	f003 feea 	bl	23fbc28 <_ZNK6String6equalsERKS_>
 23f7e54:	b1a8      	cbz	r0, 23f7e82 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x40a>
    StringSumHelper(const String &s) : String(s) {}
 23f7e56:	4621      	mov	r1, r4
 23f7e58:	a812      	add	r0, sp, #72	; 0x48
 23f7e5a:	f003 fe04 	bl	23fba66 <_ZN6StringC1ERKS_>
                Log.info(_controllerName + ": reset addressed to us");
 23f7e5e:	4980      	ldr	r1, [pc, #512]	; (23f8060 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5e8>)
 23f7e60:	a812      	add	r0, sp, #72	; 0x48
 23f7e62:	f003 feb7 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f7e66:	6801      	ldr	r1, [r0, #0]
 23f7e68:	4879      	ldr	r0, [pc, #484]	; (23f8050 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f7e6a:	f7ff f845 	bl	23f6ef8 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f7e6e:	a812      	add	r0, sp, #72	; 0x48
 23f7e70:	f003 fd62 	bl	23fb938 <_ZN6StringD1Ev>
                Device::resetAll();
 23f7e74:	f000 fcea 	bl	23f884c <_ZN6Device8resetAllEv>
                System.reset(RESET_NO_WAIT);
 23f7e78:	4b7a      	ldr	r3, [pc, #488]	; (23f8064 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5ec>)
 23f7e7a:	6818      	ldr	r0, [r3, #0]
 23f7e7c:	f003 fff6 	bl	23fbe6c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
 23f7e80:	e68e      	b.n	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f7e82:	4628      	mov	r0, r5
 23f7e84:	496f      	ldr	r1, [pc, #444]	; (23f8044 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5cc>)
 23f7e86:	f003 fedc 	bl	23fbc42 <_ZNK6String6equalsEPKc>
            if(lcMessage == _controllerName || lcMessage == "all") {
 23f7e8a:	2800      	cmp	r0, #0
 23f7e8c:	d1e3      	bne.n	23f7e56 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x3de>
 23f7e8e:	e687      	b.n	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
        } else if(numTopics > 1 && subtopics[1] == "set") {             // patriot/<device>/set value
 23f7e90:	2e01      	cmp	r6, #1
 23f7e92:	d157      	bne.n	23f7f44 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x4cc>
 23f7e94:	4974      	ldr	r1, [pc, #464]	; (23f8068 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5f0>)
 23f7e96:	a816      	add	r0, sp, #88	; 0x58
 23f7e98:	f003 fed3 	bl	23fbc42 <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "test") {
 23f7e9c:	4607      	mov	r7, r0
 23f7e9e:	2800      	cmp	r0, #0
 23f7ea0:	f040 80a2 	bne.w	23f7fe8 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x570>
 23f7ea4:	4971      	ldr	r1, [pc, #452]	; (23f806c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5f4>)
 23f7ea6:	a816      	add	r0, sp, #88	; 0x58
 23f7ea8:	f003 fecb 	bl	23fbc42 <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "timezone") {
 23f7eac:	2800      	cmp	r0, #0
 23f7eae:	f43f ae77 	beq.w	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
            Log.info(_controllerName + ": received timezone = " + lcMessage);
 23f7eb2:	3428      	adds	r4, #40	; 0x28
    StringSumHelper(const String &s) : String(s) {}
 23f7eb4:	4621      	mov	r1, r4
 23f7eb6:	a812      	add	r0, sp, #72	; 0x48
 23f7eb8:	f003 fdd5 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f7ebc:	496c      	ldr	r1, [pc, #432]	; (23f8070 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5f8>)
 23f7ebe:	a812      	add	r0, sp, #72	; 0x48
 23f7ec0:	f003 fe88 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f7ec4:	4629      	mov	r1, r5
 23f7ec6:	f003 fe79 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f7eca:	6801      	ldr	r1, [r0, #0]
 23f7ecc:	4860      	ldr	r0, [pc, #384]	; (23f8050 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f7ece:	f7ff f813 	bl	23f6ef8 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f7ed2:	a812      	add	r0, sp, #72	; 0x48
 23f7ed4:	f003 fd30 	bl	23fb938 <_ZN6StringD1Ev>
            if(lcMessage.charAt(0) == '-') {
 23f7ed8:	4639      	mov	r1, r7
 23f7eda:	4628      	mov	r0, r5
 23f7edc:	f003 ff06 	bl	23fbcec <_ZNK6String6charAtEj>
 23f7ee0:	282d      	cmp	r0, #45	; 0x2d
 23f7ee2:	f040 80a5 	bne.w	23f8030 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5b8>
                timezone = 0 - lcMessage.substring(1).toInt();
 23f7ee6:	4629      	mov	r1, r5
 23f7ee8:	2201      	movs	r2, #1
 23f7eea:	a812      	add	r0, sp, #72	; 0x48
 23f7eec:	f003 ff34 	bl	23fbd58 <_ZNK6String9substringEj>
 23f7ef0:	a812      	add	r0, sp, #72	; 0x48
 23f7ef2:	f003 ff6f 	bl	23fbdd4 <_ZNK6String5toIntEv>
 23f7ef6:	4245      	negs	r5, r0
 23f7ef8:	a812      	add	r0, sp, #72	; 0x48
 23f7efa:	f003 fd1d 	bl	23fb938 <_ZN6StringD1Ev>
            if(timezone != 0) {
 23f7efe:	2d00      	cmp	r5, #0
 23f7f00:	f000 809b 	beq.w	23f803a <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5c2>
    StringSumHelper(const String &s) : String(s) {}
 23f7f04:	4621      	mov	r1, r4
 23f7f06:	a80e      	add	r0, sp, #56	; 0x38
 23f7f08:	f003 fdad 	bl	23fba66 <_ZN6StringC1ERKS_>
                Log.info(_controllerName + ": setting timezone to: " + String(timezone));
 23f7f0c:	4959      	ldr	r1, [pc, #356]	; (23f8074 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5fc>)
 23f7f0e:	a80e      	add	r0, sp, #56	; 0x38
 23f7f10:	f003 fe60 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f7f14:	4604      	mov	r4, r0
 23f7f16:	220a      	movs	r2, #10
 23f7f18:	4629      	mov	r1, r5
 23f7f1a:	a812      	add	r0, sp, #72	; 0x48
 23f7f1c:	f003 fdd9 	bl	23fbad2 <_ZN6StringC1Eih>
 23f7f20:	a912      	add	r1, sp, #72	; 0x48
 23f7f22:	4620      	mov	r0, r4
 23f7f24:	f003 fe4a 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f7f28:	6801      	ldr	r1, [r0, #0]
 23f7f2a:	4849      	ldr	r0, [pc, #292]	; (23f8050 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f7f2c:	f7fe ffe4 	bl	23f6ef8 <_ZNK5spark6Logger4infoEPKcz>
 23f7f30:	a812      	add	r0, sp, #72	; 0x48
 23f7f32:	f003 fd01 	bl	23fb938 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f7f36:	a80e      	add	r0, sp, #56	; 0x38
 23f7f38:	f003 fcfe 	bl	23fb938 <_ZN6StringD1Ev>
                IoT::setTimezone(timezone);
 23f7f3c:	4628      	mov	r0, r5
 23f7f3e:	f7ff f95b 	bl	23f71f8 <_ZN3IoT11setTimezoneEi>
 23f7f42:	e62d      	b.n	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f7f44:	494c      	ldr	r1, [pc, #304]	; (23f8078 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x600>)
 23f7f46:	a81a      	add	r0, sp, #104	; 0x68
 23f7f48:	f003 fe7b 	bl	23fbc42 <_ZNK6String6equalsEPKc>
        } else if(numTopics > 1 && subtopics[1] == "set") {             // patriot/<device>/set value
 23f7f4c:	2800      	cmp	r0, #0
 23f7f4e:	d0a1      	beq.n	23f7e94 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x41c>
            Device *device = Device::get(subtopics[0]);
 23f7f50:	a916      	add	r1, sp, #88	; 0x58
 23f7f52:	a812      	add	r0, sp, #72	; 0x48
 23f7f54:	f003 fd87 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f7f58:	a812      	add	r0, sp, #72	; 0x48
 23f7f5a:	f000 fc9d 	bl	23f8898 <_ZN6Device3getE6String>
 23f7f5e:	4606      	mov	r6, r0
 23f7f60:	a812      	add	r0, sp, #72	; 0x48
 23f7f62:	f003 fce9 	bl	23fb938 <_ZN6StringD1Ev>
            if( device != NULL) {
 23f7f66:	2e00      	cmp	r6, #0
 23f7f68:	f43f ae1a 	beq.w	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
                int value = lcMessage.toInt();  // 0 if not numerical
 23f7f6c:	4628      	mov	r0, r5
 23f7f6e:	f003 ff31 	bl	23fbdd4 <_ZNK6String5toIntEv>
 23f7f72:	4942      	ldr	r1, [pc, #264]	; (23f807c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x604>)
 23f7f74:	4607      	mov	r7, r0
 23f7f76:	4628      	mov	r0, r5
 23f7f78:	f003 fe63 	bl	23fbc42 <_ZNK6String6equalsEPKc>
                if(lcMessage == "on" || lcMessage == "true") value = device->brightness();
 23f7f7c:	b980      	cbnz	r0, 23f7fa0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x528>
 23f7f7e:	4628      	mov	r0, r5
 23f7f80:	493f      	ldr	r1, [pc, #252]	; (23f8080 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x608>)
 23f7f82:	f003 fe5e 	bl	23fbc42 <_ZNK6String6equalsEPKc>
 23f7f86:	b958      	cbnz	r0, 23f7fa0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x528>
 23f7f88:	4628      	mov	r0, r5
 23f7f8a:	493e      	ldr	r1, [pc, #248]	; (23f8084 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x60c>)
 23f7f8c:	f003 fe59 	bl	23fbc42 <_ZNK6String6equalsEPKc>
                else if(lcMessage == "off" || lcMessage == "false") value = 0;
 23f7f90:	b920      	cbnz	r0, 23f7f9c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x524>
 23f7f92:	4628      	mov	r0, r5
 23f7f94:	493c      	ldr	r1, [pc, #240]	; (23f8088 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x610>)
 23f7f96:	f003 fe54 	bl	23fbc42 <_ZNK6String6equalsEPKc>
 23f7f9a:	b130      	cbz	r0, 23f7faa <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x532>
 23f7f9c:	2700      	movs	r7, #0
 23f7f9e:	e004      	b.n	23f7faa <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x532>
                if(lcMessage == "on" || lcMessage == "true") value = device->brightness();
 23f7fa0:	6833      	ldr	r3, [r6, #0]
 23f7fa2:	4630      	mov	r0, r6
 23f7fa4:	6a1b      	ldr	r3, [r3, #32]
 23f7fa6:	4798      	blx	r3
 23f7fa8:	4607      	mov	r7, r0
                device->setValue(value);
 23f7faa:	6833      	ldr	r3, [r6, #0]
 23f7fac:	4639      	mov	r1, r7
 23f7fae:	699b      	ldr	r3, [r3, #24]
 23f7fb0:	4630      	mov	r0, r6
 23f7fb2:	4798      	blx	r3
                sendAck(subtopics[0], "set", lcMessage);
 23f7fb4:	a916      	add	r1, sp, #88	; 0x58
 23f7fb6:	a80a      	add	r0, sp, #40	; 0x28
 23f7fb8:	f003 fd55 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f7fbc:	492e      	ldr	r1, [pc, #184]	; (23f8078 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x600>)
 23f7fbe:	a80e      	add	r0, sp, #56	; 0x38
 23f7fc0:	f003 fd05 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
 23f7fc4:	4629      	mov	r1, r5
 23f7fc6:	a812      	add	r0, sp, #72	; 0x48
 23f7fc8:	f003 fd4d 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f7fcc:	ab12      	add	r3, sp, #72	; 0x48
 23f7fce:	aa0e      	add	r2, sp, #56	; 0x38
 23f7fd0:	a90a      	add	r1, sp, #40	; 0x28
 23f7fd2:	4620      	mov	r0, r4
 23f7fd4:	f7ff fcd6 	bl	23f7984 <_ZN11MQTTManager7sendAckE6StringS0_S0_>
 23f7fd8:	a812      	add	r0, sp, #72	; 0x48
 23f7fda:	f003 fcad 	bl	23fb938 <_ZN6StringD1Ev>
 23f7fde:	a80e      	add	r0, sp, #56	; 0x38
 23f7fe0:	f003 fcaa 	bl	23fb938 <_ZN6StringD1Ev>
 23f7fe4:	a80a      	add	r0, sp, #40	; 0x28
 23f7fe6:	e630      	b.n	23f7c4a <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x1d2>
            if(numTopics > 1 && (subtopics[1] == _controllerName || subtopics[1] == "all")) {
 23f7fe8:	2e01      	cmp	r6, #1
 23f7fea:	f43f add9 	beq.w	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f7fee:	3428      	adds	r4, #40	; 0x28
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23f7ff0:	4621      	mov	r1, r4
 23f7ff2:	a81a      	add	r0, sp, #104	; 0x68
 23f7ff4:	f003 fe18 	bl	23fbc28 <_ZNK6String6equalsERKS_>
 23f7ff8:	b198      	cbz	r0, 23f8022 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5aa>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f7ffa:	4628      	mov	r0, r5
 23f7ffc:	4923      	ldr	r1, [pc, #140]	; (23f808c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x614>)
 23f7ffe:	f003 fe20 	bl	23fbc42 <_ZNK6String6equalsEPKc>
                if(lcMessage == "mqtt") {
 23f8002:	2800      	cmp	r0, #0
 23f8004:	f43f adcc 	beq.w	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
    StringSumHelper(const String &s) : String(s) {}
 23f8008:	4621      	mov	r1, r4
 23f800a:	a812      	add	r0, sp, #72	; 0x48
 23f800c:	f003 fd2b 	bl	23fba66 <_ZN6StringC1ERKS_>
                    Log.info(_controllerName + ": test disable MQTT");
 23f8010:	491f      	ldr	r1, [pc, #124]	; (23f8090 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x618>)
 23f8012:	a812      	add	r0, sp, #72	; 0x48
 23f8014:	f003 fdde 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f8018:	6801      	ldr	r1, [r0, #0]
 23f801a:	480d      	ldr	r0, [pc, #52]	; (23f8050 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f801c:	f7fe ff6c 	bl	23f6ef8 <_ZNK5spark6Logger4infoEPKcz>
 23f8020:	e6df      	b.n	23f7de2 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x36a>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f8022:	4908      	ldr	r1, [pc, #32]	; (23f8044 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5cc>)
 23f8024:	a81a      	add	r0, sp, #104	; 0x68
 23f8026:	f003 fe0c 	bl	23fbc42 <_ZNK6String6equalsEPKc>
            if(numTopics > 1 && (subtopics[1] == _controllerName || subtopics[1] == "all")) {
 23f802a:	2800      	cmp	r0, #0
 23f802c:	d1e5      	bne.n	23f7ffa <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x582>
 23f802e:	e5b7      	b.n	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
                timezone = lcMessage.toInt();
 23f8030:	4628      	mov	r0, r5
 23f8032:	f003 fecf 	bl	23fbdd4 <_ZNK6String5toIntEv>
 23f8036:	4605      	mov	r5, r0
 23f8038:	e761      	b.n	23f7efe <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x486>
                Log.error("Invalid timezone");
 23f803a:	4916      	ldr	r1, [pc, #88]	; (23f8094 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x61c>)
 23f803c:	4804      	ldr	r0, [pc, #16]	; (23f8050 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f803e:	f7fe ff4d 	bl	23f6edc <_ZNK5spark6Logger5errorEPKcz>
 23f8042:	e5ad      	b.n	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f8044:	023ff4fa 	.word	0x023ff4fa
 23f8048:	023ff583 	.word	0x023ff583
 23f804c:	023ff58a 	.word	0x023ff58a
 23f8050:	1007ae1c 	.word	0x1007ae1c
 23f8054:	023ff59d 	.word	0x023ff59d
 23f8058:	023ff5a3 	.word	0x023ff5a3
 23f805c:	023ff5c4 	.word	0x023ff5c4
 23f8060:	023ff5ca 	.word	0x023ff5ca
 23f8064:	1007ad70 	.word	0x1007ad70
 23f8068:	023ff5e2 	.word	0x023ff5e2
 23f806c:	023ff646 	.word	0x023ff646
 23f8070:	023ff60f 	.word	0x023ff60f
 23f8074:	023ff626 	.word	0x023ff626
 23f8078:	023ff5c6 	.word	0x023ff5c6
 23f807c:	023ff7b4 	.word	0x023ff7b4
 23f8080:	023ff5e7 	.word	0x023ff5e7
 23f8084:	023ff5ec 	.word	0x023ff5ec
 23f8088:	023ff5f0 	.word	0x023ff5f0
 23f808c:	023ff5f6 	.word	0x023ff5f6
 23f8090:	023ff5fb 	.word	0x023ff5fb
 23f8094:	023ff63e 	.word	0x023ff63e
 23f8098:	4919      	ldr	r1, [pc, #100]	; (23f8100 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x688>)
 23f809a:	a81a      	add	r0, sp, #104	; 0x68
 23f809c:	f003 fdd1 	bl	23fbc42 <_ZNK6String6equalsEPKc>
        } else if(numTopics > 1 && subtopics[1] == "hold") {             // patriot/<device>/hold n/a
 23f80a0:	2800      	cmp	r0, #0
 23f80a2:	f43f ad4b 	beq.w	23f7b3c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0xc4>
            Device *device = Device::get(subtopics[0]);
 23f80a6:	a916      	add	r1, sp, #88	; 0x58
 23f80a8:	a812      	add	r0, sp, #72	; 0x48
 23f80aa:	f003 fcdc 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f80ae:	a812      	add	r0, sp, #72	; 0x48
 23f80b0:	f000 fbf2 	bl	23f8898 <_ZN6Device3getE6String>
 23f80b4:	4606      	mov	r6, r0
 23f80b6:	a812      	add	r0, sp, #72	; 0x48
 23f80b8:	f003 fc3e 	bl	23fb938 <_ZN6StringD1Ev>
            if( device != NULL) {
 23f80bc:	2e00      	cmp	r6, #0
 23f80be:	f43f ad6f 	beq.w	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
    StringSumHelper(const String &s) : String(s) {}
 23f80c2:	f104 0128 	add.w	r1, r4, #40	; 0x28
 23f80c6:	a812      	add	r0, sp, #72	; 0x48
 23f80c8:	f003 fccd 	bl	23fba66 <_ZN6StringC1ERKS_>
                Log.info(_controllerName + ": hold " + subtopics[0]);
 23f80cc:	490d      	ldr	r1, [pc, #52]	; (23f8104 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x68c>)
 23f80ce:	a812      	add	r0, sp, #72	; 0x48
 23f80d0:	f003 fd80 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f80d4:	a916      	add	r1, sp, #88	; 0x58
 23f80d6:	f003 fd71 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f80da:	6801      	ldr	r1, [r0, #0]
 23f80dc:	480a      	ldr	r0, [pc, #40]	; (23f8108 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x690>)
 23f80de:	f7fe ff0b 	bl	23f6ef8 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f80e2:	a812      	add	r0, sp, #72	; 0x48
 23f80e4:	f003 fc28 	bl	23fb938 <_ZN6StringD1Ev>
                device->setHold(lcMessage != "0"); // not sure what message will be
 23f80e8:	6833      	ldr	r3, [r6, #0]
    unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 23f80ea:	4628      	mov	r0, r5
 23f80ec:	4907      	ldr	r1, [pc, #28]	; (23f810c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x694>)
 23f80ee:	69dc      	ldr	r4, [r3, #28]
 23f80f0:	f003 fda7 	bl	23fbc42 <_ZNK6String6equalsEPKc>
 23f80f4:	fab0 f180 	clz	r1, r0
 23f80f8:	4630      	mov	r0, r6
 23f80fa:	0949      	lsrs	r1, r1, #5
 23f80fc:	47a0      	blx	r4
 23f80fe:	e54f      	b.n	23f7ba0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f8100:	023ff64f 	.word	0x023ff64f
 23f8104:	023ff53a 	.word	0x023ff53a
 23f8108:	1007ae1c 	.word	0x1007ae1c
 23f810c:	023ff542 	.word	0x023ff542

023f8110 <_ZN11MQTTManager16parseMQTTMessageE6StringS0_>:
{
 23f8110:	b570      	push	{r4, r5, r6, lr}
 23f8112:	b08c      	sub	sp, #48	; 0x30
 23f8114:	460d      	mov	r5, r1
 23f8116:	4604      	mov	r4, r0
 23f8118:	4616      	mov	r6, r2
    _lastMQTTtime = Time.now();
 23f811a:	f004 fb4a 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
    if(lcTopic.startsWith(kPublishName)) {
 23f811e:	4912      	ldr	r1, [pc, #72]	; (23f8168 <_ZN11MQTTManager16parseMQTTMessageE6StringS0_+0x58>)
    _lastMQTTtime = Time.now();
 23f8120:	63a0      	str	r0, [r4, #56]	; 0x38
    if(lcTopic.startsWith(kPublishName)) {
 23f8122:	4628      	mov	r0, r5
 23f8124:	f003 fdd0 	bl	23fbcc8 <_ZNK6String10startsWithERKS_>
 23f8128:	b1e0      	cbz	r0, 23f8164 <_ZN11MQTTManager16parseMQTTMessageE6StringS0_+0x54>
        String subtopics = lcTopic.substring(8);                    // Skip over "patriot/"
 23f812a:	2208      	movs	r2, #8
 23f812c:	4629      	mov	r1, r5
 23f812e:	4668      	mov	r0, sp
 23f8130:	f003 fe12 	bl	23fbd58 <_ZNK6String9substringEj>
        if(subtopics.length() > 0) {                                // Must have at least 1 subtopic
 23f8134:	9b02      	ldr	r3, [sp, #8]
 23f8136:	b193      	cbz	r3, 23f815e <_ZN11MQTTManager16parseMQTTMessageE6StringS0_+0x4e>
            parsePatriotMessage(subtopics, lcMessage);
 23f8138:	4669      	mov	r1, sp
 23f813a:	a804      	add	r0, sp, #16
 23f813c:	f003 fc93 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f8140:	4631      	mov	r1, r6
 23f8142:	a808      	add	r0, sp, #32
 23f8144:	f003 fc8f 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f8148:	4620      	mov	r0, r4
 23f814a:	aa08      	add	r2, sp, #32
 23f814c:	a904      	add	r1, sp, #16
 23f814e:	f7ff fc93 	bl	23f7a78 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_>
 23f8152:	a808      	add	r0, sp, #32
 23f8154:	f003 fbf0 	bl	23fb938 <_ZN6StringD1Ev>
 23f8158:	a804      	add	r0, sp, #16
 23f815a:	f003 fbed 	bl	23fb938 <_ZN6StringD1Ev>
        String subtopics = lcTopic.substring(8);                    // Skip over "patriot/"
 23f815e:	4668      	mov	r0, sp
 23f8160:	f003 fbea 	bl	23fb938 <_ZN6StringD1Ev>
}
 23f8164:	b00c      	add	sp, #48	; 0x30
 23f8166:	bd70      	pop	{r4, r5, r6, pc}
 23f8168:	1007ad60 	.word	0x1007ad60

023f816c <_ZN11MQTTManager15extractFileNameEPKc>:

// The following methods are taken from Particle FW, specifically spark::StreamLogHandler.
// See https://github.com/spark/firmware/blob/develop/wiring/src/spark_wiring_logging.cpp
const char* MQTTManager::extractFileName(const char *s) {
 23f816c:	b510      	push	{r4, lr}
 23f816e:	460c      	mov	r4, r1
    const char *s1 = strrchr(s, '/');
 23f8170:	212f      	movs	r1, #47	; 0x2f
 23f8172:	4620      	mov	r0, r4
 23f8174:	f005 f910 	bl	23fd398 <strrchr>
    if (s1) {
 23f8178:	b100      	cbz	r0, 23f817c <_ZN11MQTTManager15extractFileNameEPKc+0x10>
        return s1 + 1;
 23f817a:	1c44      	adds	r4, r0, #1
    }
    return s;
}
 23f817c:	4620      	mov	r0, r4
 23f817e:	bd10      	pop	{r4, pc}

023f8180 <_ZN11MQTTManager15extractFuncNameEPKcPj>:

const char* MQTTManager::extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
 23f8180:	460b      	mov	r3, r1
const char* MQTTManager::extractFuncName(const char *s, size_t *size) {
 23f8182:	b510      	push	{r4, lr}
 23f8184:	4618      	mov	r0, r3
    for (; *s; ++s) {
 23f8186:	f813 4b01 	ldrb.w	r4, [r3], #1
 23f818a:	b12c      	cbz	r4, 23f8198 <_ZN11MQTTManager15extractFuncNameEPKcPj+0x18>
        if (*s == ' ') {
 23f818c:	2c20      	cmp	r4, #32
 23f818e:	d101      	bne.n	23f8194 <_ZN11MQTTManager15extractFuncNameEPKcPj+0x14>
            s1 = s + 1;                                                                                                                         // Skip return type
 23f8190:	4619      	mov	r1, r3
 23f8192:	e7f7      	b.n	23f8184 <_ZN11MQTTManager15extractFuncNameEPKcPj+0x4>
        } else if (*s == '(') {
 23f8194:	2c28      	cmp	r4, #40	; 0x28
 23f8196:	d1f5      	bne.n	23f8184 <_ZN11MQTTManager15extractFuncNameEPKcPj+0x4>
            break;                                                                                                                         // Skip argument types
        }
    }
    *size = s - s1;
 23f8198:	1a40      	subs	r0, r0, r1
 23f819a:	6010      	str	r0, [r2, #0]
    return s1;
}
 23f819c:	4608      	mov	r0, r1
 23f819e:	bd10      	pop	{r4, pc}

023f81a0 <_ZN11MQTTManager3logEPKc6String>:
    //    Serial.println(s);
    log(category, s);
}

// This is our formatter. We can format messages however we want.
void MQTTManager::log(const char *category, String message) {
 23f81a0:	b570      	push	{r4, r5, r6, lr}
 23f81a2:	b096      	sub	sp, #88	; 0x58
 23f81a4:	4604      	mov	r4, r0
 23f81a6:	4615      	mov	r5, r2
         */
        String format(time_t t, const char* format_spec=NULL);

        inline String format(const char* format_spec=NULL)
        {
            return format(now(), format_spec);
 23f81a8:	f004 fb03 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
 23f81ac:	4b21      	ldr	r3, [pc, #132]	; (23f8234 <_ZN11MQTTManager3logEPKc6String+0x94>)
 23f81ae:	4602      	mov	r2, r0
 23f81b0:	9300      	str	r3, [sp, #0]
 23f81b2:	4921      	ldr	r1, [pc, #132]	; (23f8238 <_ZN11MQTTManager3logEPKc6String+0x98>)
 23f81b4:	17c3      	asrs	r3, r0, #31
 23f81b6:	a802      	add	r0, sp, #8
 23f81b8:	f004 fa9c 	bl	23fc6f4 <_ZN9TimeClass6formatExPKc>
    // As recommended by ScruffR, don't pass time argument
    String time = Time.format("%a %H:%M");
    
    if(!_logging) {
 23f81bc:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 23f81be:	2e00      	cmp	r6, #0
 23f81c0:	d132      	bne.n	23f8228 <_ZN11MQTTManager3logEPKc6String+0x88>
        _logging++;
 23f81c2:	2301      	movs	r3, #1
    StringSumHelper(const char *p) : String(p) {}
 23f81c4:	491d      	ldr	r1, [pc, #116]	; (23f823c <_ZN11MQTTManager3logEPKc6String+0x9c>)
 23f81c6:	64e3      	str	r3, [r4, #76]	; 0x4c
 23f81c8:	a806      	add	r0, sp, #24
 23f81ca:	f003 fc00 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
        // Separate topic now, allows logging patriot/ messages without causing a loop
        publish("log/"+_controllerName, time + " " + message, false);
 23f81ce:	f104 0128 	add.w	r1, r4, #40	; 0x28
 23f81d2:	a806      	add	r0, sp, #24
 23f81d4:	f003 fcf2 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f81d8:	4601      	mov	r1, r0
 23f81da:	a80e      	add	r0, sp, #56	; 0x38
 23f81dc:	f003 fc43 	bl	23fba66 <_ZN6StringC1ERKS_>
    StringSumHelper(const String &s) : String(s) {}
 23f81e0:	a902      	add	r1, sp, #8
 23f81e2:	a80a      	add	r0, sp, #40	; 0x28
 23f81e4:	f003 fc3f 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f81e8:	4915      	ldr	r1, [pc, #84]	; (23f8240 <_ZN11MQTTManager3logEPKc6String+0xa0>)
 23f81ea:	a80a      	add	r0, sp, #40	; 0x28
 23f81ec:	f003 fcf2 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f81f0:	4629      	mov	r1, r5
 23f81f2:	f003 fce3 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f81f6:	4601      	mov	r1, r0
 23f81f8:	a812      	add	r0, sp, #72	; 0x48
 23f81fa:	f003 fc34 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f81fe:	4633      	mov	r3, r6
 23f8200:	aa12      	add	r2, sp, #72	; 0x48
 23f8202:	a90e      	add	r1, sp, #56	; 0x38
 23f8204:	4620      	mov	r0, r4
 23f8206:	f7ff fb39 	bl	23f787c <_ZN11MQTTManager7publishE6StringS0_b>
 23f820a:	a812      	add	r0, sp, #72	; 0x48
 23f820c:	f003 fb94 	bl	23fb938 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f8210:	a80a      	add	r0, sp, #40	; 0x28
 23f8212:	f003 fb91 	bl	23fb938 <_ZN6StringD1Ev>
 23f8216:	a80e      	add	r0, sp, #56	; 0x38
 23f8218:	f003 fb8e 	bl	23fb938 <_ZN6StringD1Ev>
 23f821c:	a806      	add	r0, sp, #24
 23f821e:	f003 fb8b 	bl	23fb938 <_ZN6StringD1Ev>
        _logging--;
 23f8222:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 23f8224:	3b01      	subs	r3, #1
 23f8226:	64e3      	str	r3, [r4, #76]	; 0x4c
    String time = Time.format("%a %H:%M");
 23f8228:	a802      	add	r0, sp, #8
 23f822a:	f003 fb85 	bl	23fb938 <_ZN6StringD1Ev>
    }
}
 23f822e:	b016      	add	sp, #88	; 0x58
 23f8230:	bd70      	pop	{r4, r5, r6, pc}
 23f8232:	bf00      	nop
 23f8234:	023ff4c0 	.word	0x023ff4c0
 23f8238:	1007ae70 	.word	0x1007ae70
 23f823c:	023ff654 	.word	0x023ff654
 23f8240:	023ff4be 	.word	0x023ff4be

023f8244 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes>:
void MQTTManager::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f8244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f8248:	4605      	mov	r5, r0
 23f824a:	4617      	mov	r7, r2
 23f824c:	b088      	sub	sp, #32
 23f824e:	460e      	mov	r6, r1
    String s;
 23f8250:	4668      	mov	r0, sp
 23f8252:	494c      	ldr	r1, [pc, #304]	; (23f8384 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x140>)
void MQTTManager::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f8254:	4698      	mov	r8, r3
 23f8256:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    String s;
 23f8258:	f003 fbb9 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
    if (level < _logLevel) {
 23f825c:	f895 3020 	ldrb.w	r3, [r5, #32]
 23f8260:	42bb      	cmp	r3, r7
 23f8262:	d905      	bls.n	23f8270 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x2c>
    String s;
 23f8264:	4668      	mov	r0, sp
 23f8266:	f003 fb67 	bl	23fb938 <_ZN6StringD1Ev>
}
 23f826a:	b008      	add	sp, #32
 23f826c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (attr.has_file) {
 23f8270:	7923      	ldrb	r3, [r4, #4]
 23f8272:	07d9      	lsls	r1, r3, #31
 23f8274:	d526      	bpl.n	23f82c4 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x80>
        s = extractFileName(attr.file);                                                                                 // Strip directory path
 23f8276:	68a1      	ldr	r1, [r4, #8]
 23f8278:	4628      	mov	r0, r5
 23f827a:	f7ff ff77 	bl	23f816c <_ZN11MQTTManager15extractFileNameEPKc>
 23f827e:	4601      	mov	r1, r0
 23f8280:	4668      	mov	r0, sp
 23f8282:	f003 fc03 	bl	23fba8c <_ZN6StringaSEPKc>
        s.concat(s);                                                                                 // File name
 23f8286:	4669      	mov	r1, sp
 23f8288:	4668      	mov	r0, sp
 23f828a:	f003 fc75 	bl	23fbb78 <_ZN6String6concatERKS_>
        if (attr.has_line) {
 23f828e:	7923      	ldrb	r3, [r4, #4]
 23f8290:	079a      	lsls	r2, r3, #30
 23f8292:	d50f      	bpl.n	23f82b4 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x70>
            s.concat(":");
 23f8294:	493c      	ldr	r1, [pc, #240]	; (23f8388 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x144>)
 23f8296:	4668      	mov	r0, sp
 23f8298:	f003 fc72 	bl	23fbb80 <_ZN6String6concatEPKc>
            s.concat(String(attr.line));                                                                                                                         // Line number
 23f829c:	220a      	movs	r2, #10
 23f829e:	68e1      	ldr	r1, [r4, #12]
 23f82a0:	a804      	add	r0, sp, #16
 23f82a2:	f003 fc16 	bl	23fbad2 <_ZN6StringC1Eih>
 23f82a6:	4668      	mov	r0, sp
 23f82a8:	a904      	add	r1, sp, #16
 23f82aa:	f003 fc65 	bl	23fbb78 <_ZN6String6concatERKS_>
 23f82ae:	a804      	add	r0, sp, #16
 23f82b0:	f003 fb42 	bl	23fb938 <_ZN6StringD1Ev>
        if (attr.has_function) {
 23f82b4:	7923      	ldrb	r3, [r4, #4]
            s.concat(": ");
 23f82b6:	4668      	mov	r0, sp
        if (attr.has_function) {
 23f82b8:	075b      	lsls	r3, r3, #29
            s.concat(", ");
 23f82ba:	bf4c      	ite	mi
 23f82bc:	4933      	ldrmi	r1, [pc, #204]	; (23f838c <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x148>)
            s.concat(": ");
 23f82be:	4934      	ldrpl	r1, [pc, #208]	; (23f8390 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x14c>)
 23f82c0:	f003 fc5e 	bl	23fbb80 <_ZN6String6concatEPKc>
    if (attr.has_function) {
 23f82c4:	7923      	ldrb	r3, [r4, #4]
 23f82c6:	0758      	lsls	r0, r3, #29
 23f82c8:	d512      	bpl.n	23f82f0 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0xac>
        size_t n = 0;
 23f82ca:	2300      	movs	r3, #0
        s = extractFuncName(attr.function, &n);                                                                                 // Strip argument and return types
 23f82cc:	aa04      	add	r2, sp, #16
 23f82ce:	6921      	ldr	r1, [r4, #16]
 23f82d0:	4628      	mov	r0, r5
        size_t n = 0;
 23f82d2:	9304      	str	r3, [sp, #16]
        s = extractFuncName(attr.function, &n);                                                                                 // Strip argument and return types
 23f82d4:	f7ff ff54 	bl	23f8180 <_ZN11MQTTManager15extractFuncNameEPKcPj>
 23f82d8:	4601      	mov	r1, r0
 23f82da:	4668      	mov	r0, sp
 23f82dc:	f003 fbd6 	bl	23fba8c <_ZN6StringaSEPKc>
        s.concat(s);
 23f82e0:	4669      	mov	r1, sp
 23f82e2:	4668      	mov	r0, sp
 23f82e4:	f003 fc48 	bl	23fbb78 <_ZN6String6concatERKS_>
        s.concat("(): ");
 23f82e8:	4668      	mov	r0, sp
 23f82ea:	492a      	ldr	r1, [pc, #168]	; (23f8394 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x150>)
 23f82ec:	f003 fc48 	bl	23fbb80 <_ZN6String6concatEPKc>
    return log_level_name(level, nullptr);
 23f82f0:	2100      	movs	r1, #0
 23f82f2:	4638      	mov	r0, r7
 23f82f4:	f001 fbf4 	bl	23f9ae0 <log_level_name>
 23f82f8:	4601      	mov	r1, r0
    s.concat(levelName(level));
 23f82fa:	4668      	mov	r0, sp
 23f82fc:	f003 fc40 	bl	23fbb80 <_ZN6String6concatEPKc>
    s.concat(": ");
 23f8300:	4668      	mov	r0, sp
 23f8302:	4923      	ldr	r1, [pc, #140]	; (23f8390 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x14c>)
 23f8304:	f003 fc3c 	bl	23fbb80 <_ZN6String6concatEPKc>
    if (msg) {
 23f8308:	b11e      	cbz	r6, 23f8312 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0xce>
        s.concat(msg);
 23f830a:	4631      	mov	r1, r6
 23f830c:	4668      	mov	r0, sp
 23f830e:	f003 fc37 	bl	23fbb80 <_ZN6String6concatEPKc>
    if (attr.has_code || attr.has_details) {
 23f8312:	7923      	ldrb	r3, [r4, #4]
 23f8314:	f013 0f30 	tst.w	r3, #48	; 0x30
 23f8318:	d027      	beq.n	23f836a <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x126>
        s.concat(" [");
 23f831a:	491f      	ldr	r1, [pc, #124]	; (23f8398 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x154>)
 23f831c:	4668      	mov	r0, sp
 23f831e:	f003 fc2f 	bl	23fbb80 <_ZN6String6concatEPKc>
        if (attr.has_code) {
 23f8322:	7923      	ldrb	r3, [r4, #4]
 23f8324:	06d9      	lsls	r1, r3, #27
 23f8326:	d50b      	bpl.n	23f8340 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0xfc>
            s.concat(String::format("code = %p", (intptr_t)attr.code));
 23f8328:	69a2      	ldr	r2, [r4, #24]
 23f832a:	491c      	ldr	r1, [pc, #112]	; (23f839c <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x158>)
 23f832c:	a804      	add	r0, sp, #16
 23f832e:	f003 fd69 	bl	23fbe04 <_ZN6String6formatEPKcz>
 23f8332:	4668      	mov	r0, sp
 23f8334:	a904      	add	r1, sp, #16
 23f8336:	f003 fc1f 	bl	23fbb78 <_ZN6String6concatERKS_>
 23f833a:	a804      	add	r0, sp, #16
 23f833c:	f003 fafc 	bl	23fb938 <_ZN6StringD1Ev>
        if (attr.has_details) {
 23f8340:	7923      	ldrb	r3, [r4, #4]
 23f8342:	069a      	lsls	r2, r3, #26
 23f8344:	d50d      	bpl.n	23f8362 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x11e>
            if (attr.has_code) {
 23f8346:	06db      	lsls	r3, r3, #27
 23f8348:	d503      	bpl.n	23f8352 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x10e>
                s.concat(", ");
 23f834a:	4668      	mov	r0, sp
 23f834c:	490f      	ldr	r1, [pc, #60]	; (23f838c <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x148>)
 23f834e:	f003 fc17 	bl	23fbb80 <_ZN6String6concatEPKc>
            s.concat("details = ");
 23f8352:	4913      	ldr	r1, [pc, #76]	; (23f83a0 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x15c>)
 23f8354:	4668      	mov	r0, sp
 23f8356:	f003 fc13 	bl	23fbb80 <_ZN6String6concatEPKc>
            s.concat(attr.details);
 23f835a:	4668      	mov	r0, sp
 23f835c:	69e1      	ldr	r1, [r4, #28]
 23f835e:	f003 fc0f 	bl	23fbb80 <_ZN6String6concatEPKc>
        s.concat(']');
 23f8362:	215d      	movs	r1, #93	; 0x5d
 23f8364:	4668      	mov	r0, sp
 23f8366:	f003 fc1c 	bl	23fbba2 <_ZN6String6concatEc>
    log(category, s);
 23f836a:	4669      	mov	r1, sp
 23f836c:	a804      	add	r0, sp, #16
 23f836e:	f003 fb7a 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f8372:	4628      	mov	r0, r5
 23f8374:	4641      	mov	r1, r8
 23f8376:	aa04      	add	r2, sp, #16
 23f8378:	f7ff ff12 	bl	23f81a0 <_ZN11MQTTManager3logEPKc6String>
 23f837c:	a804      	add	r0, sp, #16
 23f837e:	f003 fadb 	bl	23fb938 <_ZN6StringD1Ev>
 23f8382:	e76f      	b.n	23f8264 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x20>
 23f8384:	023ff895 	.word	0x023ff895
 23f8388:	023ff659 	.word	0x023ff659
 23f838c:	023ff4bd 	.word	0x023ff4bd
 23f8390:	023ff65d 	.word	0x023ff65d
 23f8394:	023ff65b 	.word	0x023ff65b
 23f8398:	023ff660 	.word	0x023ff660
 23f839c:	023ff663 	.word	0x023ff663
 23f83a0:	023ff66d 	.word	0x023ff66d

023f83a4 <_ZN11MQTTManager14blinkStatusLedEv>:
// Off: WiFi not connected
// 3 blinks: WiFi and/or MQTT not connected
// 2 blinks: MQTT connecting
// 1 blink: MQTT connected and subscribed
//
void MQTTManager::blinkStatusLed() {
 23f83a4:	b510      	push	{r4, lr}
 23f83a6:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f83a8:	f001 f88a 	bl	23f94c0 <HAL_Timer_Get_Milli_Seconds>
    
    if(millis() >= _lastBlinkTimeMs + BLINK_INTERVAL) {
 23f83ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 23f83ae:	33fa      	adds	r3, #250	; 0xfa
 23f83b0:	4283      	cmp	r3, r0
 23f83b2:	d82a      	bhi.n	23f840a <_ZN11MQTTManager14blinkStatusLedEv+0x66>
 23f83b4:	f001 f884 	bl	23f94c0 <HAL_Timer_Get_Milli_Seconds>
        
        _lastBlinkTimeMs = millis();
        _blinkPhase++;
 23f83b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        _lastBlinkTimeMs = millis();
 23f83ba:	6460      	str	r0, [r4, #68]	; 0x44
        _blinkPhase++;
 23f83bc:	3301      	adds	r3, #1
    return WiFi.ready();
 23f83be:	4813      	ldr	r0, [pc, #76]	; (23f840c <_ZN11MQTTManager14blinkStatusLedEv+0x68>)
        _blinkPhase++;
 23f83c0:	64a3      	str	r3, [r4, #72]	; 0x48
    return WiFi.ready();
 23f83c2:	f7ff f90d 	bl	23f75e0 <_ZN5spark9WiFiClass5readyEv>
        
        int nextLed = LOW;
        
        // 3 short blinks = WiFi and/or MQTT Not Connected
        if(!wifiConnected() || !mqttConnected()) {
 23f83c6:	b950      	cbnz	r0, 23f83de <_ZN11MQTTManager14blinkStatusLedEv+0x3a>
            if(_blinkPhase == 1 || _blinkPhase == 3 || _blinkPhase == 5) {
 23f83c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 23f83ca:	f023 0202 	bic.w	r2, r3, #2
 23f83ce:	2a01      	cmp	r2, #1
 23f83d0:	d112      	bne.n	23f83f8 <_ZN11MQTTManager14blinkStatusLedEv+0x54>
                nextLed = HIGH;
 23f83d2:	2101      	movs	r1, #1
                _blinkPhase = 0;
            }
        }
        digitalWrite(D7, nextLed);
    }
}
 23f83d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(D7, nextLed);
 23f83d8:	2007      	movs	r0, #7
 23f83da:	f004 bca2 	b.w	23fcd22 <digitalWrite>
        if(!wifiConnected() || !mqttConnected()) {
 23f83de:	4620      	mov	r0, r4
 23f83e0:	f7ff f911 	bl	23f7606 <_ZN11MQTTManager13mqttConnectedEv>
 23f83e4:	2800      	cmp	r0, #0
 23f83e6:	d0ef      	beq.n	23f83c8 <_ZN11MQTTManager14blinkStatusLedEv+0x24>
        } else if(_mqttSubscribed == false) {
 23f83e8:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
            if(_blinkPhase == 1 || _blinkPhase == 3) {
 23f83ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        } else if(_mqttSubscribed == false) {
 23f83ee:	b952      	cbnz	r2, 23f8406 <_ZN11MQTTManager14blinkStatusLedEv+0x62>
            if(_blinkPhase == 1 || _blinkPhase == 3) {
 23f83f0:	f023 0202 	bic.w	r2, r3, #2
 23f83f4:	2a01      	cmp	r2, #1
 23f83f6:	e000      	b.n	23f83fa <_ZN11MQTTManager14blinkStatusLedEv+0x56>
            if(_blinkPhase == 1 || _blinkPhase == 3 || _blinkPhase == 5) {
 23f83f8:	2b05      	cmp	r3, #5
 23f83fa:	d0ea      	beq.n	23f83d2 <_ZN11MQTTManager14blinkStatusLedEv+0x2e>
                _blinkPhase = 0;
 23f83fc:	2100      	movs	r1, #0
            } else if(_blinkPhase > 8) {
 23f83fe:	2b08      	cmp	r3, #8
                _blinkPhase = 0;
 23f8400:	bfc8      	it	gt
 23f8402:	64a1      	strgt	r1, [r4, #72]	; 0x48
 23f8404:	e7e6      	b.n	23f83d4 <_ZN11MQTTManager14blinkStatusLedEv+0x30>
            if(_blinkPhase == 1) {
 23f8406:	2b01      	cmp	r3, #1
 23f8408:	e7f7      	b.n	23f83fa <_ZN11MQTTManager14blinkStatusLedEv+0x56>
}
 23f840a:	bd10      	pop	{r4, pc}
 23f840c:	1007aed0 	.word	0x1007aed0

023f8410 <_ZN11MQTTManager4loopEv>:
{
 23f8410:	b510      	push	{r4, lr}
 23f8412:	4604      	mov	r4, r0
    _mqtt->loop();
 23f8414:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23f8416:	f000 fe7c 	bl	23f9112 <_ZN4MQTT4loopEv>
    checkNetworkStatusPeriodically();
 23f841a:	4620      	mov	r0, r4
 23f841c:	f7ff f9d8 	bl	23f77d0 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv>
    sendAliveMsgPeriodically();
 23f8420:	4620      	mov	r0, r4
 23f8422:	f7ff fa69 	bl	23f78f8 <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv>
    blinkStatusLed();
 23f8426:	4620      	mov	r0, r4
}
 23f8428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    blinkStatusLed();
 23f842c:	f7ff bfba 	b.w	23f83a4 <_ZN11MQTTManager14blinkStatusLedEv>

023f8430 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23f8430:	2201      	movs	r2, #1
}
 23f8432:	b508      	push	{r3, lr}
 23f8434:	4b0b      	ldr	r3, [pc, #44]	; (23f8464 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x34>)
static const String kDevicesVariableName       = "Devices";
 23f8436:	490c      	ldr	r1, [pc, #48]	; (23f8468 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x38>)
 23f8438:	601a      	str	r2, [r3, #0]
 23f843a:	480c      	ldr	r0, [pc, #48]	; (23f846c <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x3c>)
 23f843c:	f003 fac7 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
static const String kChecklistVariableName     = "Checklist";
 23f8440:	490b      	ldr	r1, [pc, #44]	; (23f8470 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x40>)
 23f8442:	480c      	ldr	r0, [pc, #48]	; (23f8474 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x44>)
 23f8444:	f003 fac3 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
static const String kStatusVariableName        = "Status";
 23f8448:	490b      	ldr	r1, [pc, #44]	; (23f8478 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x48>)
 23f844a:	480c      	ldr	r0, [pc, #48]	; (23f847c <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x4c>)
 23f844c:	f003 fabf 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
static const String kPublishName               = "patriot";
 23f8450:	490b      	ldr	r1, [pc, #44]	; (23f8480 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x50>)
 23f8452:	480c      	ldr	r0, [pc, #48]	; (23f8484 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x54>)
 23f8454:	f003 fabb 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
 23f8458:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
static const String kSSIDFunctionName          = "setSSID";
 23f845c:	490a      	ldr	r1, [pc, #40]	; (23f8488 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x58>)
 23f845e:	480b      	ldr	r0, [pc, #44]	; (23f848c <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x5c>)
 23f8460:	f003 bab5 	b.w	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
 23f8464:	1007ad70 	.word	0x1007ad70
 23f8468:	023ff3cc 	.word	0x023ff3cc
 23f846c:	1007ad94 	.word	0x1007ad94
 23f8470:	023ff3d4 	.word	0x023ff3d4
 23f8474:	1007ada4 	.word	0x1007ada4
 23f8478:	023ff3de 	.word	0x023ff3de
 23f847c:	1007ad84 	.word	0x1007ad84
 23f8480:	023ff3e5 	.word	0x023ff3e5
 23f8484:	1007ad60 	.word	0x1007ad60
 23f8488:	023ff3ed 	.word	0x023ff3ed
 23f848c:	1007ad74 	.word	0x1007ad74

023f8490 <_ZN6Device16calculateDevicesEv>:

// The Devices variable is used by Alexa discovery and ReportState and iOS app.
// It is a comma delimited list of <T>:<Name>
// Note: Alexa skill hasn't been updated to support @<room>, so removing it for now.
String Device::calculateDevices()
{
 23f8490:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f8492:	b08d      	sub	sp, #52	; 0x34
 23f8494:	4605      	mov	r5, r0
    String devices = "";
 23f8496:	4924      	ldr	r1, [pc, #144]	; (23f8528 <_ZN6Device16calculateDevicesEv+0x98>)
 23f8498:	4668      	mov	r0, sp
 23f849a:	f003 fa98 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
    
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f849e:	4b23      	ldr	r3, [pc, #140]	; (23f852c <_ZN6Device16calculateDevicesEv+0x9c>)

        if(ptr->_type != 'X') {     // Ignore Checklist items
            devices += String(ptr->_type)+":";
 23f84a0:	4e23      	ldr	r6, [pc, #140]	; (23f8530 <_ZN6Device16calculateDevicesEv+0xa0>)
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f84a2:	681c      	ldr	r4, [r3, #0]
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23f84a4:	4f23      	ldr	r7, [pc, #140]	; (23f8534 <_ZN6Device16calculateDevicesEv+0xa4>)
 23f84a6:	b364      	cbz	r4, 23f8502 <_ZN6Device16calculateDevicesEv+0x72>
        if(ptr->_type != 'X') {     // Ignore Checklist items
 23f84a8:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 23f84ac:	2958      	cmp	r1, #88	; 0x58
 23f84ae:	d026      	beq.n	23f84fe <_ZN6Device16calculateDevicesEv+0x6e>
            devices += String(ptr->_type)+":";
 23f84b0:	a804      	add	r0, sp, #16
 23f84b2:	f003 fafd 	bl	23fbab0 <_ZN6StringC1Ec>
    StringSumHelper(const String &s) : String(s) {}
 23f84b6:	a904      	add	r1, sp, #16
 23f84b8:	a808      	add	r0, sp, #32
 23f84ba:	f003 fad4 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f84be:	4631      	mov	r1, r6
 23f84c0:	a808      	add	r0, sp, #32
 23f84c2:	f003 fb87 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f84c6:	4601      	mov	r1, r0
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f84c8:	4668      	mov	r0, sp
 23f84ca:	f003 fb55 	bl	23fbb78 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 23f84ce:	a808      	add	r0, sp, #32
 23f84d0:	f003 fa32 	bl	23fb938 <_ZN6StringD1Ev>
 23f84d4:	a804      	add	r0, sp, #16
 23f84d6:	f003 fa2f 	bl	23fb938 <_ZN6StringD1Ev>
            devices += String(ptr->_name);
 23f84da:	f104 0108 	add.w	r1, r4, #8
 23f84de:	a808      	add	r0, sp, #32
 23f84e0:	f003 fac1 	bl	23fba66 <_ZN6StringC1ERKS_>
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f84e4:	a908      	add	r1, sp, #32
 23f84e6:	4668      	mov	r0, sp
 23f84e8:	f003 fb46 	bl	23fbb78 <_ZN6String6concatERKS_>
 23f84ec:	a808      	add	r0, sp, #32
 23f84ee:	f003 fa23 	bl	23fb938 <_ZN6StringD1Ev>
            if (ptr->_next != NULL) {
 23f84f2:	6863      	ldr	r3, [r4, #4]
 23f84f4:	b11b      	cbz	r3, 23f84fe <_ZN6Device16calculateDevicesEv+0x6e>
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23f84f6:	4639      	mov	r1, r7
 23f84f8:	4668      	mov	r0, sp
 23f84fa:	f003 fb41 	bl	23fbb80 <_ZN6String6concatEPKc>
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f84fe:	6864      	ldr	r4, [r4, #4]
 23f8500:	e7d1      	b.n	23f84a6 <_ZN6Device16calculateDevicesEv+0x16>
                devices += ",";
            }
        }
    }
    if(devices.length() >= particle::protocol:: MAX_VARIABLE_VALUE_LENGTH) {
 23f8502:	9b02      	ldr	r3, [sp, #8]
 23f8504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 23f8508:	d309      	bcc.n	23f851e <_ZN6Device16calculateDevicesEv+0x8e>
        return("Devices variable is too long. Need to extend to a 2nd variable");
 23f850a:	4628      	mov	r0, r5
 23f850c:	490a      	ldr	r1, [pc, #40]	; (23f8538 <_ZN6Device16calculateDevicesEv+0xa8>)
 23f850e:	f003 fa5e 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
    String devices = "";
 23f8512:	4668      	mov	r0, sp
 23f8514:	f003 fa10 	bl	23fb938 <_ZN6StringD1Ev>
    }
    return devices;
}
 23f8518:	4628      	mov	r0, r5
 23f851a:	b00d      	add	sp, #52	; 0x34
 23f851c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return devices;
 23f851e:	4669      	mov	r1, sp
 23f8520:	4628      	mov	r0, r5
 23f8522:	f003 fa86 	bl	23fba32 <_ZN6StringC1EOS_>
 23f8526:	e7f4      	b.n	23f8512 <_ZN6Device16calculateDevicesEv+0x82>
 23f8528:	023ff895 	.word	0x023ff895
 23f852c:	1007ad5c 	.word	0x1007ad5c
 23f8530:	023ff659 	.word	0x023ff659
 23f8534:	023ff550 	.word	0x023ff550
 23f8538:	023ff690 	.word	0x023ff690

023f853c <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
 23f853c:	b530      	push	{r4, r5, lr}
 23f853e:	4614      	mov	r4, r2
 23f8540:	b085      	sub	sp, #20
 23f8542:	4603      	mov	r3, r0
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
 23f8544:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
 23f8546:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
 23f8548:	4798      	blx	r3
    inline unsigned int length(void) const {return len;}
 23f854a:	9802      	ldr	r0, [sp, #8]
        size = str.length();
 23f854c:	6020      	str	r0, [r4, #0]
        data = malloc(size);
 23f854e:	f001 fc95 	bl	23f9e7c <malloc>
 23f8552:	6028      	str	r0, [r5, #0]
        if (!data) {
 23f8554:	b150      	cbz	r0, 23f856c <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
 23f8556:	6822      	ldr	r2, [r4, #0]
 23f8558:	9900      	ldr	r1, [sp, #0]
 23f855a:	f004 fe79 	bl	23fd250 <memcpy>
        return 0;
 23f855e:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
 23f8560:	4668      	mov	r0, sp
 23f8562:	f003 f9e9 	bl	23fb938 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
 23f8566:	4620      	mov	r0, r4
 23f8568:	b005      	add	sp, #20
 23f856a:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
 23f856c:	4c00      	ldr	r4, [pc, #0]	; (23f8570 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
 23f856e:	e7f7      	b.n	23f8560 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
 23f8570:	fffffefc 	.word	0xfffffefc

023f8574 <_ZN10CloudClass8variableI6StringJRFS1_vEEEEbRKT_DpOT0_.isra.0>:
    static inline bool variable(const T &name, ArgsT&&... args)
 23f8574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        spark_variable_t extra = {};
 23f8576:	2300      	movs	r3, #0
 23f8578:	e9cd 3301 	strd	r3, r3, [sp, #4]
        extra.size = sizeof(extra);
 23f857c:	230c      	movs	r3, #12
 23f857e:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.copy = [](const void* var, void** data, size_t* size) {
 23f8582:	4b04      	ldr	r3, [pc, #16]	; (23f8594 <_ZN10CloudClass8variableI6StringJRFS1_vEEEEbRKT_DpOT0_.isra.0+0x20>)
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
 23f8584:	2204      	movs	r2, #4
        extra.copy = [](const void* var, void** data, size_t* size) {
 23f8586:	9303      	str	r3, [sp, #12]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
 23f8588:	ab01      	add	r3, sp, #4
 23f858a:	f001 fb43 	bl	23f9c14 <spark_variable>
    }
 23f858e:	b005      	add	sp, #20
 23f8590:	f85d fb04 	ldr.w	pc, [sp], #4
 23f8594:	023f853d 	.word	0x023f853d

023f8598 <_ZN6Device15calculateStatusEv>:
String Device::calculateStatus() {
 23f8598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f859c:	b08c      	sub	sp, #48	; 0x30
 23f859e:	4605      	mov	r5, r0
                return timeStr(now());
 23f85a0:	f004 f907 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
 23f85a4:	17c3      	asrs	r3, r0, #31
 23f85a6:	4602      	mov	r2, r0
 23f85a8:	a804      	add	r0, sp, #16
 23f85aa:	f003 fffd 	bl	23fc5a8 <_ZN9TimeClass7timeStrEx>
    StringSumHelper(const String &s) : String(s) {}
 23f85ae:	a904      	add	r1, sp, #16
 23f85b0:	a808      	add	r0, sp, #32
 23f85b2:	f003 fa58 	bl	23fba66 <_ZN6StringC1ERKS_>
    String status = Time.timeStr() + ": ";
 23f85b6:	4937      	ldr	r1, [pc, #220]	; (23f8694 <_ZN6Device15calculateStatusEv+0xfc>)
 23f85b8:	a808      	add	r0, sp, #32
 23f85ba:	f003 fb0b 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f85be:	4601      	mov	r1, r0
 23f85c0:	4668      	mov	r0, sp
 23f85c2:	f003 fa50 	bl	23fba66 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 23f85c6:	a808      	add	r0, sp, #32
 23f85c8:	f003 f9b6 	bl	23fb938 <_ZN6StringD1Ev>
 23f85cc:	a804      	add	r0, sp, #16
 23f85ce:	f003 f9b3 	bl	23fb938 <_ZN6StringD1Ev>
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f85d2:	4b31      	ldr	r3, [pc, #196]	; (23f8698 <_ZN6Device15calculateStatusEv+0x100>)
            status += String(ptr->_type)+":";
 23f85d4:	4e31      	ldr	r6, [pc, #196]	; (23f869c <_ZN6Device15calculateStatusEv+0x104>)
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f85d6:	681c      	ldr	r4, [r3, #0]
    StringSumHelper(const char *p) : String(p) {}
 23f85d8:	4f31      	ldr	r7, [pc, #196]	; (23f86a0 <_ZN6Device15calculateStatusEv+0x108>)
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23f85da:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 23f86a8 <_ZN6Device15calculateStatusEv+0x110>
 23f85de:	2c00      	cmp	r4, #0
 23f85e0:	d043      	beq.n	23f866a <_ZN6Device15calculateStatusEv+0xd2>
        if(ptr->_type != 'X') {     // Ignore checklist items
 23f85e2:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 23f85e6:	2958      	cmp	r1, #88	; 0x58
 23f85e8:	d03d      	beq.n	23f8666 <_ZN6Device15calculateStatusEv+0xce>
            status += String(ptr->_type)+":";
 23f85ea:	a804      	add	r0, sp, #16
 23f85ec:	f003 fa60 	bl	23fbab0 <_ZN6StringC1Ec>
    StringSumHelper(const String &s) : String(s) {}
 23f85f0:	a904      	add	r1, sp, #16
 23f85f2:	a808      	add	r0, sp, #32
 23f85f4:	f003 fa37 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f85f8:	4631      	mov	r1, r6
 23f85fa:	a808      	add	r0, sp, #32
 23f85fc:	f003 faea 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f8600:	4601      	mov	r1, r0
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f8602:	4668      	mov	r0, sp
 23f8604:	f003 fab8 	bl	23fbb78 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 23f8608:	a808      	add	r0, sp, #32
 23f860a:	f003 f995 	bl	23fb938 <_ZN6StringD1Ev>
 23f860e:	a804      	add	r0, sp, #16
 23f8610:	f003 f992 	bl	23fb938 <_ZN6StringD1Ev>
            status += String(ptr->_name);
 23f8614:	f104 0108 	add.w	r1, r4, #8
 23f8618:	a808      	add	r0, sp, #32
 23f861a:	f003 fa24 	bl	23fba66 <_ZN6StringC1ERKS_>
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f861e:	a908      	add	r1, sp, #32
 23f8620:	4668      	mov	r0, sp
 23f8622:	f003 faa9 	bl	23fbb78 <_ZN6String6concatERKS_>
 23f8626:	a808      	add	r0, sp, #32
 23f8628:	f003 f986 	bl	23fb938 <_ZN6StringD1Ev>
    StringSumHelper(const char *p) : String(p) {}
 23f862c:	4639      	mov	r1, r7
 23f862e:	a808      	add	r0, sp, #32
 23f8630:	f003 f9cd 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
            status += "="+String(ptr->_value);
 23f8634:	220a      	movs	r2, #10
 23f8636:	69a1      	ldr	r1, [r4, #24]
 23f8638:	a804      	add	r0, sp, #16
 23f863a:	f003 fa4a 	bl	23fbad2 <_ZN6StringC1Eih>
 23f863e:	a904      	add	r1, sp, #16
 23f8640:	a808      	add	r0, sp, #32
 23f8642:	f003 fabb 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f8646:	4601      	mov	r1, r0
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f8648:	4668      	mov	r0, sp
 23f864a:	f003 fa95 	bl	23fbb78 <_ZN6String6concatERKS_>
 23f864e:	a804      	add	r0, sp, #16
 23f8650:	f003 f972 	bl	23fb938 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f8654:	a808      	add	r0, sp, #32
 23f8656:	f003 f96f 	bl	23fb938 <_ZN6StringD1Ev>
            if (ptr->_next != NULL) {
 23f865a:	6863      	ldr	r3, [r4, #4]
 23f865c:	b11b      	cbz	r3, 23f8666 <_ZN6Device15calculateStatusEv+0xce>
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23f865e:	4641      	mov	r1, r8
 23f8660:	4668      	mov	r0, sp
 23f8662:	f003 fa8d 	bl	23fbb80 <_ZN6String6concatEPKc>
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f8666:	6864      	ldr	r4, [r4, #4]
 23f8668:	e7b9      	b.n	23f85de <_ZN6Device15calculateStatusEv+0x46>
    if(status.length() >= particle::protocol:: MAX_VARIABLE_VALUE_LENGTH) {
 23f866a:	9b02      	ldr	r3, [sp, #8]
 23f866c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 23f8670:	d30a      	bcc.n	23f8688 <_ZN6Device15calculateStatusEv+0xf0>
        return("Status variable is too long. Need to extend to a 2nd variable");
 23f8672:	4628      	mov	r0, r5
 23f8674:	490b      	ldr	r1, [pc, #44]	; (23f86a4 <_ZN6Device15calculateStatusEv+0x10c>)
 23f8676:	f003 f9aa 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
    String status = Time.timeStr() + ": ";
 23f867a:	4668      	mov	r0, sp
 23f867c:	f003 f95c 	bl	23fb938 <_ZN6StringD1Ev>
}
 23f8680:	4628      	mov	r0, r5
 23f8682:	b00c      	add	sp, #48	; 0x30
 23f8684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return status;
 23f8688:	4669      	mov	r1, sp
 23f868a:	4628      	mov	r0, r5
 23f868c:	f003 f9d1 	bl	23fba32 <_ZN6StringC1EOS_>
 23f8690:	e7f3      	b.n	23f867a <_ZN6Device15calculateStatusEv+0xe2>
 23f8692:	bf00      	nop
 23f8694:	023ff65d 	.word	0x023ff65d
 23f8698:	1007ad5c 	.word	0x1007ad5c
 23f869c:	023ff659 	.word	0x023ff659
 23f86a0:	023ff6cf 	.word	0x023ff6cf
 23f86a4:	023ff6d1 	.word	0x023ff6d1
 23f86a8:	023ff550 	.word	0x023ff550

023f86ac <_ZN6Device7setSSIDE6String>:
int Device::setSSID(String info) {
 23f86ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    int comma = info.indexOf(',');
 23f86ae:	212c      	movs	r1, #44	; 0x2c
int Device::setSSID(String info) {
 23f86b0:	b09d      	sub	sp, #116	; 0x74
 23f86b2:	4604      	mov	r4, r0
    int comma = info.indexOf(',');
 23f86b4:	f003 fb2a 	bl	23fbd0c <_ZNK6String7indexOfEc>
    if(comma <= 0) {  // -1 if comma missing
 23f86b8:	1e05      	subs	r5, r0, #0
 23f86ba:	dc13      	bgt.n	23f86e4 <_ZN6Device7setSSIDE6String+0x38>
    StringSumHelper(const char *p) : String(p) {}
 23f86bc:	4931      	ldr	r1, [pc, #196]	; (23f8784 <_ZN6Device7setSSIDE6String+0xd8>)
 23f86be:	a809      	add	r0, sp, #36	; 0x24
 23f86c0:	f003 f985 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
        Log.error("setSSID info incorrect: " + info);
 23f86c4:	4621      	mov	r1, r4
 23f86c6:	a809      	add	r0, sp, #36	; 0x24
 23f86c8:	f003 fa78 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f86cc:	6801      	ldr	r1, [r0, #0]
 23f86ce:	482e      	ldr	r0, [pc, #184]	; (23f8788 <_ZN6Device7setSSIDE6String+0xdc>)
 23f86d0:	f7fe fc04 	bl	23f6edc <_ZNK5spark6Logger5errorEPKcz>
class StringSumHelper : public String
 23f86d4:	a809      	add	r0, sp, #36	; 0x24
 23f86d6:	f003 f92f 	bl	23fb938 <_ZN6StringD1Ev>
        return -1;
 23f86da:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 23f86de:	4620      	mov	r0, r4
 23f86e0:	b01d      	add	sp, #116	; 0x74
 23f86e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    String ssid = info.substring(start, comma);
 23f86e4:	462b      	mov	r3, r5
 23f86e6:	2200      	movs	r2, #0
 23f86e8:	4621      	mov	r1, r4
 23f86ea:	a801      	add	r0, sp, #4
 23f86ec:	f003 fb12 	bl	23fbd14 <_ZNK6String9substringEjj>
    String password = info.substring(comma+1);
 23f86f0:	1c6a      	adds	r2, r5, #1
 23f86f2:	4621      	mov	r1, r4
 23f86f4:	a805      	add	r0, sp, #20
 23f86f6:	f003 fb2f 	bl	23fbd58 <_ZNK6String9substringEj>
    StringSumHelper(const char *p) : String(p) {}
 23f86fa:	4924      	ldr	r1, [pc, #144]	; (23f878c <_ZN6Device7setSSIDE6String+0xe0>)
 23f86fc:	a809      	add	r0, sp, #36	; 0x24
 23f86fe:	f003 f966 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("Setting SSID/password: " + ssid + ", " + password);
 23f8702:	a901      	add	r1, sp, #4
 23f8704:	a809      	add	r0, sp, #36	; 0x24
 23f8706:	f003 fa59 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f870a:	4921      	ldr	r1, [pc, #132]	; (23f8790 <_ZN6Device7setSSIDE6String+0xe4>)
 23f870c:	f003 fa62 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f8710:	a905      	add	r1, sp, #20
 23f8712:	f003 fa53 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f8716:	6801      	ldr	r1, [r0, #0]
 23f8718:	481b      	ldr	r0, [pc, #108]	; (23f8788 <_ZN6Device7setSSIDE6String+0xdc>)
 23f871a:	f7fe fbed 	bl	23f6ef8 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f871e:	a809      	add	r0, sp, #36	; 0x24
 23f8720:	f003 f90a 	bl	23fb938 <_ZN6StringD1Ev>
    const char * c_str() const { return buffer; }
 23f8724:	9f01      	ldr	r7, [sp, #4]
 23f8726:	9d05      	ldr	r5, [sp, #20]
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
 23f8728:	b347      	cbz	r7, 23f877c <_ZN6Device7setSSIDE6String+0xd0>
 23f872a:	4638      	mov	r0, r7
 23f872c:	f7fe f9e2 	bl	23f6af4 <strlen>
 23f8730:	4606      	mov	r6, r0
 23f8732:	b32d      	cbz	r5, 23f8780 <_ZN6Device7setSSIDE6String+0xd4>
 23f8734:	4628      	mov	r0, r5
 23f8736:	f7fe f9dd 	bl	23f6af4 <strlen>
 23f873a:	4604      	mov	r4, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
 23f873c:	2238      	movs	r2, #56	; 0x38
 23f873e:	2100      	movs	r1, #0
 23f8740:	eb0d 0002 	add.w	r0, sp, r2
 23f8744:	f004 fdab 	bl	23fd29e <memset>
        creds.size = sizeof(creds);
 23f8748:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
 23f874a:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
 23f874e:	2303      	movs	r3, #3
 23f8750:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 23f8754:	2300      	movs	r3, #0
 23f8756:	480f      	ldr	r0, [pc, #60]	; (23f8794 <_ZN6Device7setSSIDE6String+0xe8>)
 23f8758:	4619      	mov	r1, r3
 23f875a:	aa09      	add	r2, sp, #36	; 0x24
 23f875c:	6840      	ldr	r0, [r0, #4]
        creds.password_len = passwordLen;
 23f875e:	940d      	str	r4, [sp, #52]	; 0x34
        creds.password = password;
 23f8760:	e9cd 650b 	strd	r6, r5, [sp, #44]	; 0x2c
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 23f8764:	f001 fb28 	bl	23f9db8 <network_set_credentials>
 23f8768:	fab0 f480 	clz	r4, r0
    String password = info.substring(comma+1);
 23f876c:	a805      	add	r0, sp, #20
 23f876e:	f003 f8e3 	bl	23fb938 <_ZN6StringD1Ev>
    String ssid = info.substring(start, comma);
 23f8772:	a801      	add	r0, sp, #4
 23f8774:	0964      	lsrs	r4, r4, #5
 23f8776:	f003 f8df 	bl	23fb938 <_ZN6StringD1Ev>
 23f877a:	e7b0      	b.n	23f86de <_ZN6Device7setSSIDE6String+0x32>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
 23f877c:	463e      	mov	r6, r7
 23f877e:	e7d8      	b.n	23f8732 <_ZN6Device7setSSIDE6String+0x86>
 23f8780:	462c      	mov	r4, r5
 23f8782:	e7db      	b.n	23f873c <_ZN6Device7setSSIDE6String+0x90>
 23f8784:	023ff70f 	.word	0x023ff70f
 23f8788:	1007ae1c 	.word	0x1007ae1c
 23f878c:	023ff728 	.word	0x023ff728
 23f8790:	023ff4bd 	.word	0x023ff4bd
 23f8794:	1007aed0 	.word	0x1007aed0

023f8798 <_ZN6Device18calculateChecklistEv>:

// The Checklist variable is used by the Checklist iOS app.
// It is a comma delimited list of <Name>=0|1
String Device::calculateChecklist()
{
 23f8798:	b5f0      	push	{r4, r5, r6, r7, lr}
    String newChecklist = "";
 23f879a:	4925      	ldr	r1, [pc, #148]	; (23f8830 <_ZN6Device18calculateChecklistEv+0x98>)
{
 23f879c:	b089      	sub	sp, #36	; 0x24
 23f879e:	4604      	mov	r4, r0
    String newChecklist = "";
 23f87a0:	f003 f915 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
    
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f87a4:	4b23      	ldr	r3, [pc, #140]	; (23f8834 <_ZN6Device18calculateChecklistEv+0x9c>)
    StringSumHelper(const char *p) : String(p) {}
 23f87a6:	4e24      	ldr	r6, [pc, #144]	; (23f8838 <_ZN6Device18calculateChecklistEv+0xa0>)
 23f87a8:	681d      	ldr	r5, [r3, #0]
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23f87aa:	4f24      	ldr	r7, [pc, #144]	; (23f883c <_ZN6Device18calculateChecklistEv+0xa4>)
 23f87ac:	b375      	cbz	r5, 23f880c <_ZN6Device18calculateChecklistEv+0x74>
        if(ptr->_type == 'X') {
 23f87ae:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 23f87b2:	2b58      	cmp	r3, #88	; 0x58
 23f87b4:	d128      	bne.n	23f8808 <_ZN6Device18calculateChecklistEv+0x70>
            newChecklist += String(ptr->_name);
 23f87b6:	f105 0108 	add.w	r1, r5, #8
 23f87ba:	a804      	add	r0, sp, #16
 23f87bc:	f003 f953 	bl	23fba66 <_ZN6StringC1ERKS_>
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f87c0:	a904      	add	r1, sp, #16
 23f87c2:	4620      	mov	r0, r4
 23f87c4:	f003 f9d8 	bl	23fbb78 <_ZN6String6concatERKS_>
 23f87c8:	a804      	add	r0, sp, #16
 23f87ca:	f003 f8b5 	bl	23fb938 <_ZN6StringD1Ev>
    StringSumHelper(const char *p) : String(p) {}
 23f87ce:	4631      	mov	r1, r6
 23f87d0:	a804      	add	r0, sp, #16
 23f87d2:	f003 f8fc 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
            newChecklist += "="+String(ptr->_value);
 23f87d6:	220a      	movs	r2, #10
 23f87d8:	69a9      	ldr	r1, [r5, #24]
 23f87da:	4668      	mov	r0, sp
 23f87dc:	f003 f979 	bl	23fbad2 <_ZN6StringC1Eih>
 23f87e0:	4669      	mov	r1, sp
 23f87e2:	a804      	add	r0, sp, #16
 23f87e4:	f003 f9ea 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f87e8:	4601      	mov	r1, r0
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f87ea:	4620      	mov	r0, r4
 23f87ec:	f003 f9c4 	bl	23fbb78 <_ZN6String6concatERKS_>
 23f87f0:	4668      	mov	r0, sp
 23f87f2:	f003 f8a1 	bl	23fb938 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f87f6:	a804      	add	r0, sp, #16
 23f87f8:	f003 f89e 	bl	23fb938 <_ZN6StringD1Ev>
            if (ptr->_next != NULL) {
 23f87fc:	686b      	ldr	r3, [r5, #4]
 23f87fe:	b11b      	cbz	r3, 23f8808 <_ZN6Device18calculateChecklistEv+0x70>
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23f8800:	4639      	mov	r1, r7
 23f8802:	4620      	mov	r0, r4
 23f8804:	f003 f9bc 	bl	23fbb80 <_ZN6String6concatEPKc>
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f8808:	686d      	ldr	r5, [r5, #4]
 23f880a:	e7cf      	b.n	23f87ac <_ZN6Device18calculateChecklistEv+0x14>
                newChecklist += ",";
            }
        }
    }
    if(newChecklist.length() >= particle::protocol:: MAX_VARIABLE_VALUE_LENGTH) {
 23f880c:	68a3      	ldr	r3, [r4, #8]
 23f880e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 23f8812:	d303      	bcc.n	23f881c <_ZN6Device18calculateChecklistEv+0x84>
        Log.error("Checklist variable is too long. Need to extend to a 2nd variable");
 23f8814:	490a      	ldr	r1, [pc, #40]	; (23f8840 <_ZN6Device18calculateChecklistEv+0xa8>)
 23f8816:	480b      	ldr	r0, [pc, #44]	; (23f8844 <_ZN6Device18calculateChecklistEv+0xac>)
 23f8818:	f7fe fb60 	bl	23f6edc <_ZNK5spark6Logger5errorEPKcz>
    }
    if(newChecklist.length() == 0) { Log.info("No checklist items"); }
 23f881c:	68a3      	ldr	r3, [r4, #8]
 23f881e:	b91b      	cbnz	r3, 23f8828 <_ZN6Device18calculateChecklistEv+0x90>
 23f8820:	4909      	ldr	r1, [pc, #36]	; (23f8848 <_ZN6Device18calculateChecklistEv+0xb0>)
 23f8822:	4808      	ldr	r0, [pc, #32]	; (23f8844 <_ZN6Device18calculateChecklistEv+0xac>)
 23f8824:	f7fe fb68 	bl	23f6ef8 <_ZNK5spark6Logger4infoEPKcz>
    return newChecklist;
}
 23f8828:	4620      	mov	r0, r4
 23f882a:	b009      	add	sp, #36	; 0x24
 23f882c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f882e:	bf00      	nop
 23f8830:	023ff895 	.word	0x023ff895
 23f8834:	1007ad5c 	.word	0x1007ad5c
 23f8838:	023ff6cf 	.word	0x023ff6cf
 23f883c:	023ff550 	.word	0x023ff550
 23f8840:	023ff740 	.word	0x023ff740
 23f8844:	1007ae1c 	.word	0x1007ae1c
 23f8848:	023ff781 	.word	0x023ff781

023f884c <_ZN6Device8resetAllEv>:
{
 23f884c:	b510      	push	{r4, lr}
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f884e:	4b05      	ldr	r3, [pc, #20]	; (23f8864 <_ZN6Device8resetAllEv+0x18>)
 23f8850:	681c      	ldr	r4, [r3, #0]
 23f8852:	b12c      	cbz	r4, 23f8860 <_ZN6Device8resetAllEv+0x14>
        ptr->reset();
 23f8854:	6823      	ldr	r3, [r4, #0]
 23f8856:	4620      	mov	r0, r4
 23f8858:	685b      	ldr	r3, [r3, #4]
 23f885a:	4798      	blx	r3
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f885c:	6864      	ldr	r4, [r4, #4]
 23f885e:	e7f8      	b.n	23f8852 <_ZN6Device8resetAllEv+0x6>
}
 23f8860:	bd10      	pop	{r4, pc}
 23f8862:	bf00      	nop
 23f8864:	1007ad5c 	.word	0x1007ad5c

023f8868 <_ZN6Device7loopAllEv>:
{
 23f8868:	b510      	push	{r4, lr}
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f886a:	4b05      	ldr	r3, [pc, #20]	; (23f8880 <_ZN6Device7loopAllEv+0x18>)
 23f886c:	681c      	ldr	r4, [r3, #0]
 23f886e:	b12c      	cbz	r4, 23f887c <_ZN6Device7loopAllEv+0x14>
        ptr->loop();
 23f8870:	6823      	ldr	r3, [r4, #0]
 23f8872:	4620      	mov	r0, r4
 23f8874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f8876:	4798      	blx	r3
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f8878:	6864      	ldr	r4, [r4, #4]
 23f887a:	e7f8      	b.n	23f886e <_ZN6Device7loopAllEv+0x6>
}
 23f887c:	bd10      	pop	{r4, pc}
 23f887e:	bf00      	nop
 23f8880:	1007ad5c 	.word	0x1007ad5c

023f8884 <_ZN6Device5countEv>:
    int i = 0;
 23f8884:	2000      	movs	r0, #0
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next) i++;
 23f8886:	4b03      	ldr	r3, [pc, #12]	; (23f8894 <_ZN6Device5countEv+0x10>)
 23f8888:	681b      	ldr	r3, [r3, #0]
 23f888a:	b113      	cbz	r3, 23f8892 <_ZN6Device5countEv+0xe>
 23f888c:	685b      	ldr	r3, [r3, #4]
 23f888e:	3001      	adds	r0, #1
 23f8890:	e7fb      	b.n	23f888a <_ZN6Device5countEv+0x6>
}
 23f8892:	4770      	bx	lr
 23f8894:	1007ad5c 	.word	0x1007ad5c

023f8898 <_ZN6Device3getE6String>:
{
 23f8898:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f889a:	4606      	mov	r6, r0
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f889c:	2500      	movs	r5, #0
    Device *ptr = _devices;
 23f889e:	4b0e      	ldr	r3, [pc, #56]	; (23f88d8 <_ZN6Device3getE6String+0x40>)
{
 23f88a0:	b085      	sub	sp, #20
    Device *ptr = _devices;
 23f88a2:	681c      	ldr	r4, [r3, #0]
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f88a4:	f7ff ffee 	bl	23f8884 <_ZN6Device5countEv>
 23f88a8:	42a8      	cmp	r0, r5
 23f88aa:	dd11      	ble.n	23f88d0 <_ZN6Device3getE6String+0x38>
 23f88ac:	b18c      	cbz	r4, 23f88d2 <_ZN6Device3getE6String+0x3a>
        if (ptr->name().equalsIgnoreCase(name)) {
 23f88ae:	6823      	ldr	r3, [r4, #0]
 23f88b0:	4621      	mov	r1, r4
 23f88b2:	4668      	mov	r0, sp
 23f88b4:	689b      	ldr	r3, [r3, #8]
 23f88b6:	4798      	blx	r3
 23f88b8:	4631      	mov	r1, r6
 23f88ba:	4668      	mov	r0, sp
 23f88bc:	f003 f9d3 	bl	23fbc66 <_ZNK6String16equalsIgnoreCaseERKS_>
 23f88c0:	4607      	mov	r7, r0
 23f88c2:	4668      	mov	r0, sp
 23f88c4:	f003 f838 	bl	23fb938 <_ZN6StringD1Ev>
 23f88c8:	b91f      	cbnz	r7, 23f88d2 <_ZN6Device3getE6String+0x3a>
        ptr = ptr->_next;
 23f88ca:	6864      	ldr	r4, [r4, #4]
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f88cc:	3501      	adds	r5, #1
 23f88ce:	e7e9      	b.n	23f88a4 <_ZN6Device3getE6String+0xc>
    return NULL;
 23f88d0:	2400      	movs	r4, #0
}
 23f88d2:	4620      	mov	r0, r4
 23f88d4:	b005      	add	sp, #20
 23f88d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f88d8:	1007ad5c 	.word	0x1007ad5c

023f88dc <_ZN6Device13setAllLatLongEff>:
void Device::setAllLatLong(float latitude, float longitude) {
 23f88dc:	b538      	push	{r3, r4, r5, lr}
 23f88de:	ed2d 8b02 	vpush	{d8}
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f88e2:	2500      	movs	r5, #0
void Device::setAllLatLong(float latitude, float longitude) {
 23f88e4:	eeb0 8a40 	vmov.f32	s16, s0
 23f88e8:	eef0 8a60 	vmov.f32	s17, s1
    Device *ptr = _devices;
 23f88ec:	4b0a      	ldr	r3, [pc, #40]	; (23f8918 <_ZN6Device13setAllLatLongEff+0x3c>)
 23f88ee:	681c      	ldr	r4, [r3, #0]
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f88f0:	f7ff ffc8 	bl	23f8884 <_ZN6Device5countEv>
 23f88f4:	42a8      	cmp	r0, r5
 23f88f6:	dd0b      	ble.n	23f8910 <_ZN6Device13setAllLatLongEff+0x34>
 23f88f8:	b154      	cbz	r4, 23f8910 <_ZN6Device13setAllLatLongEff+0x34>
        ptr->setLatLong(latitude,longitude);
 23f88fa:	6823      	ldr	r3, [r4, #0]
 23f88fc:	4620      	mov	r0, r4
 23f88fe:	eef0 0a68 	vmov.f32	s1, s17
 23f8902:	eeb0 0a48 	vmov.f32	s0, s16
 23f8906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f8908:	4798      	blx	r3
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f890a:	3501      	adds	r5, #1
        ptr = ptr->_next;
 23f890c:	6864      	ldr	r4, [r4, #4]
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f890e:	e7ef      	b.n	23f88f0 <_ZN6Device13setAllLatLongEff+0x14>
}
 23f8910:	ecbd 8b02 	vpop	{d8}
 23f8914:	bd38      	pop	{r3, r4, r5, pc}
 23f8916:	bf00      	nop
 23f8918:	1007ad5c 	.word	0x1007ad5c

023f891c <_ZN6Device7mqttAllE6StringS0_>:
{
 23f891c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f891e:	4605      	mov	r5, r0
 23f8920:	460e      	mov	r6, r1
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f8922:	4b10      	ldr	r3, [pc, #64]	; (23f8964 <_ZN6Device7mqttAllE6StringS0_+0x48>)
{
 23f8924:	b089      	sub	sp, #36	; 0x24
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f8926:	681c      	ldr	r4, [r3, #0]
 23f8928:	b1cc      	cbz	r4, 23f895e <_ZN6Device7mqttAllE6StringS0_+0x42>
        if(ptr->_type == 'W') {
 23f892a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 23f892e:	2b57      	cmp	r3, #87	; 0x57
 23f8930:	d113      	bne.n	23f895a <_ZN6Device7mqttAllE6StringS0_+0x3e>
            ptr->mqtt(topic, message);
 23f8932:	6823      	ldr	r3, [r4, #0]
 23f8934:	4629      	mov	r1, r5
 23f8936:	4668      	mov	r0, sp
 23f8938:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 23f893a:	f003 f894 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f893e:	4631      	mov	r1, r6
 23f8940:	a804      	add	r0, sp, #16
 23f8942:	f003 f890 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f8946:	4669      	mov	r1, sp
 23f8948:	4620      	mov	r0, r4
 23f894a:	aa04      	add	r2, sp, #16
 23f894c:	47b8      	blx	r7
 23f894e:	a804      	add	r0, sp, #16
 23f8950:	f002 fff2 	bl	23fb938 <_ZN6StringD1Ev>
 23f8954:	4668      	mov	r0, sp
 23f8956:	f002 ffef 	bl	23fb938 <_ZN6StringD1Ev>
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f895a:	6864      	ldr	r4, [r4, #4]
 23f895c:	e7e4      	b.n	23f8928 <_ZN6Device7mqttAllE6StringS0_+0xc>
}
 23f895e:	b009      	add	sp, #36	; 0x24
 23f8960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f8962:	bf00      	nop
 23f8964:	1007ad5c 	.word	0x1007ad5c

023f8968 <_ZN6Device6exposeEv>:
{
 23f8968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(!Particle.variable(kDevicesVariableName, calculateDevices))
 23f896a:	4c31      	ldr	r4, [pc, #196]	; (23f8a30 <_ZN6Device6exposeEv+0xc8>)
 23f896c:	4931      	ldr	r1, [pc, #196]	; (23f8a34 <_ZN6Device6exposeEv+0xcc>)
 23f896e:	6820      	ldr	r0, [r4, #0]
 23f8970:	f7ff fe00 	bl	23f8574 <_ZN10CloudClass8variableI6StringJRFS1_vEEEEbRKT_DpOT0_.isra.0>
 23f8974:	b988      	cbnz	r0, 23f899a <_ZN6Device6exposeEv+0x32>
    StringSumHelper(const char *p) : String(p) {}
 23f8976:	4930      	ldr	r1, [pc, #192]	; (23f8a38 <_ZN6Device6exposeEv+0xd0>)
 23f8978:	4668      	mov	r0, sp
 23f897a:	f003 f828 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
        Log.error("Error: Unable to expose " + kDevicesVariableName + " variable");
 23f897e:	4621      	mov	r1, r4
 23f8980:	4668      	mov	r0, sp
 23f8982:	f003 f91b 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f8986:	492d      	ldr	r1, [pc, #180]	; (23f8a3c <_ZN6Device6exposeEv+0xd4>)
 23f8988:	f003 f924 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f898c:	6801      	ldr	r1, [r0, #0]
 23f898e:	482c      	ldr	r0, [pc, #176]	; (23f8a40 <_ZN6Device6exposeEv+0xd8>)
 23f8990:	f7fe faa4 	bl	23f6edc <_ZNK5spark6Logger5errorEPKcz>
class StringSumHelper : public String
 23f8994:	4668      	mov	r0, sp
 23f8996:	f002 ffcf 	bl	23fb938 <_ZN6StringD1Ev>
    if(!Particle.variable(kChecklistVariableName, calculateChecklist))
 23f899a:	4c2a      	ldr	r4, [pc, #168]	; (23f8a44 <_ZN6Device6exposeEv+0xdc>)
 23f899c:	492a      	ldr	r1, [pc, #168]	; (23f8a48 <_ZN6Device6exposeEv+0xe0>)
 23f899e:	6820      	ldr	r0, [r4, #0]
 23f89a0:	f7ff fde8 	bl	23f8574 <_ZN10CloudClass8variableI6StringJRFS1_vEEEEbRKT_DpOT0_.isra.0>
 23f89a4:	b988      	cbnz	r0, 23f89ca <_ZN6Device6exposeEv+0x62>
    StringSumHelper(const char *p) : String(p) {}
 23f89a6:	4924      	ldr	r1, [pc, #144]	; (23f8a38 <_ZN6Device6exposeEv+0xd0>)
 23f89a8:	4668      	mov	r0, sp
 23f89aa:	f003 f810 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
        Log.error("Error: Unable to expose " + kChecklistVariableName + " variable");
 23f89ae:	4621      	mov	r1, r4
 23f89b0:	4668      	mov	r0, sp
 23f89b2:	f003 f903 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f89b6:	4921      	ldr	r1, [pc, #132]	; (23f8a3c <_ZN6Device6exposeEv+0xd4>)
 23f89b8:	f003 f90c 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f89bc:	6801      	ldr	r1, [r0, #0]
 23f89be:	4820      	ldr	r0, [pc, #128]	; (23f8a40 <_ZN6Device6exposeEv+0xd8>)
 23f89c0:	f7fe fa8c 	bl	23f6edc <_ZNK5spark6Logger5errorEPKcz>
class StringSumHelper : public String
 23f89c4:	4668      	mov	r0, sp
 23f89c6:	f002 ffb7 	bl	23fb938 <_ZN6StringD1Ev>
    if(!Particle.variable(kStatusVariableName, Device::calculateStatus))
 23f89ca:	4c20      	ldr	r4, [pc, #128]	; (23f8a4c <_ZN6Device6exposeEv+0xe4>)
 23f89cc:	4920      	ldr	r1, [pc, #128]	; (23f8a50 <_ZN6Device6exposeEv+0xe8>)
 23f89ce:	6820      	ldr	r0, [r4, #0]
 23f89d0:	f7ff fdd0 	bl	23f8574 <_ZN10CloudClass8variableI6StringJRFS1_vEEEEbRKT_DpOT0_.isra.0>
 23f89d4:	b988      	cbnz	r0, 23f89fa <_ZN6Device6exposeEv+0x92>
    StringSumHelper(const char *p) : String(p) {}
 23f89d6:	4918      	ldr	r1, [pc, #96]	; (23f8a38 <_ZN6Device6exposeEv+0xd0>)
 23f89d8:	4668      	mov	r0, sp
 23f89da:	f002 fff8 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
        Log.error("Error: Unable to expose " + kStatusVariableName + " variable");
 23f89de:	4621      	mov	r1, r4
 23f89e0:	4668      	mov	r0, sp
 23f89e2:	f003 f8eb 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f89e6:	4915      	ldr	r1, [pc, #84]	; (23f8a3c <_ZN6Device6exposeEv+0xd4>)
 23f89e8:	f003 f8f4 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f89ec:	6801      	ldr	r1, [r0, #0]
 23f89ee:	4814      	ldr	r0, [pc, #80]	; (23f8a40 <_ZN6Device6exposeEv+0xd8>)
 23f89f0:	f7fe fa74 	bl	23f6edc <_ZNK5spark6Logger5errorEPKcz>
class StringSumHelper : public String
 23f89f4:	4668      	mov	r0, sp
 23f89f6:	f002 ff9f 	bl	23fb938 <_ZN6StringD1Ev>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 23f89fa:	4c16      	ldr	r4, [pc, #88]	; (23f8a54 <_ZN6Device6exposeEv+0xec>)
 23f89fc:	4916      	ldr	r1, [pc, #88]	; (23f8a58 <_ZN6Device6exposeEv+0xf0>)
 23f89fe:	6822      	ldr	r2, [r4, #0]
 23f8a00:	4816      	ldr	r0, [pc, #88]	; (23f8a5c <_ZN6Device6exposeEv+0xf4>)
 23f8a02:	f001 fb4f 	bl	23fa0a4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    if(!Particle.function(kSSIDFunctionName, Device::setSSID))
 23f8a06:	b988      	cbnz	r0, 23f8a2c <_ZN6Device6exposeEv+0xc4>
    StringSumHelper(const char *p) : String(p) {}
 23f8a08:	490b      	ldr	r1, [pc, #44]	; (23f8a38 <_ZN6Device6exposeEv+0xd0>)
 23f8a0a:	4668      	mov	r0, sp
 23f8a0c:	f002 ffdf 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
        Log.error("Error: Unable to expose " + kSSIDFunctionName + " function");
 23f8a10:	4621      	mov	r1, r4
 23f8a12:	4668      	mov	r0, sp
 23f8a14:	f003 f8d2 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f8a18:	4911      	ldr	r1, [pc, #68]	; (23f8a60 <_ZN6Device6exposeEv+0xf8>)
 23f8a1a:	f003 f8db 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f8a1e:	6801      	ldr	r1, [r0, #0]
 23f8a20:	4807      	ldr	r0, [pc, #28]	; (23f8a40 <_ZN6Device6exposeEv+0xd8>)
 23f8a22:	f7fe fa5b 	bl	23f6edc <_ZNK5spark6Logger5errorEPKcz>
class StringSumHelper : public String
 23f8a26:	4668      	mov	r0, sp
 23f8a28:	f002 ff86 	bl	23fb938 <_ZN6StringD1Ev>
}
 23f8a2c:	b004      	add	sp, #16
 23f8a2e:	bd10      	pop	{r4, pc}
 23f8a30:	1007ade4 	.word	0x1007ade4
 23f8a34:	023f8491 	.word	0x023f8491
 23f8a38:	023ff794 	.word	0x023ff794
 23f8a3c:	023ff6c5 	.word	0x023ff6c5
 23f8a40:	1007ae1c 	.word	0x1007ae1c
 23f8a44:	1007adf4 	.word	0x1007adf4
 23f8a48:	023f8799 	.word	0x023f8799
 23f8a4c:	1007add4 	.word	0x1007add4
 23f8a50:	023f8599 	.word	0x023f8599
 23f8a54:	1007adc4 	.word	0x1007adc4
 23f8a58:	023f86ad 	.word	0x023f86ad
 23f8a5c:	023fa079 	.word	0x023fa079
 23f8a60:	023ff7ad 	.word	0x023ff7ad

023f8a64 <_ZN6Device13publishStatesEv>:


// Publish each device name and its value in response to patriot/query
// New format: patriot/state/<room>/<T>/<name>
void Device::publishStates() {
 23f8a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f8a66:	4b29      	ldr	r3, [pc, #164]	; (23f8b0c <_ZN6Device13publishStatesEv+0xa8>)
    StringSumHelper(const char *p) : String(p) {}
 23f8a68:	4f29      	ldr	r7, [pc, #164]	; (23f8b10 <_ZN6Device13publishStatesEv+0xac>)
 23f8a6a:	681c      	ldr	r4, [r3, #0]
        IoT::publishMQTT("state/"+ptr->room()+"/"+ptr->type()+"/"+ptr->name(), String(ptr->_value));
 23f8a6c:	4e29      	ldr	r6, [pc, #164]	; (23f8b14 <_ZN6Device13publishStatesEv+0xb0>)
void Device::publishStates() {
 23f8a6e:	b099      	sub	sp, #100	; 0x64
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f8a70:	2c00      	cmp	r4, #0
 23f8a72:	d048      	beq.n	23f8b06 <_ZN6Device13publishStatesEv+0xa2>
 23f8a74:	4639      	mov	r1, r7
 23f8a76:	a804      	add	r0, sp, #16
 23f8a78:	f002 ffa9 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
        IoT::publishMQTT("state/"+ptr->room()+"/"+ptr->type()+"/"+ptr->name(), String(ptr->_value));
 23f8a7c:	6823      	ldr	r3, [r4, #0]
 23f8a7e:	4621      	mov	r1, r4
 23f8a80:	68db      	ldr	r3, [r3, #12]
 23f8a82:	4668      	mov	r0, sp
 23f8a84:	4798      	blx	r3
 23f8a86:	4669      	mov	r1, sp
 23f8a88:	a804      	add	r0, sp, #16
 23f8a8a:	f003 f897 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f8a8e:	4631      	mov	r1, r6
 23f8a90:	f003 f8a0 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f8a94:	4605      	mov	r5, r0
 23f8a96:	6823      	ldr	r3, [r4, #0]
 23f8a98:	4621      	mov	r1, r4
 23f8a9a:	691b      	ldr	r3, [r3, #16]
 23f8a9c:	a808      	add	r0, sp, #32
 23f8a9e:	4798      	blx	r3
 23f8aa0:	4628      	mov	r0, r5
 23f8aa2:	a908      	add	r1, sp, #32
 23f8aa4:	f003 f88a 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f8aa8:	4631      	mov	r1, r6
 23f8aaa:	f003 f893 	bl	23fbbd4 <_ZplRK15StringSumHelperPKc>
 23f8aae:	4605      	mov	r5, r0
 23f8ab0:	6823      	ldr	r3, [r4, #0]
 23f8ab2:	4621      	mov	r1, r4
 23f8ab4:	689b      	ldr	r3, [r3, #8]
 23f8ab6:	a80c      	add	r0, sp, #48	; 0x30
 23f8ab8:	4798      	blx	r3
 23f8aba:	a90c      	add	r1, sp, #48	; 0x30
 23f8abc:	4628      	mov	r0, r5
 23f8abe:	f003 f87d 	bl	23fbbbc <_ZplRK15StringSumHelperRK6String>
 23f8ac2:	4601      	mov	r1, r0
 23f8ac4:	a814      	add	r0, sp, #80	; 0x50
 23f8ac6:	f002 ffce 	bl	23fba66 <_ZN6StringC1ERKS_>
 23f8aca:	69a1      	ldr	r1, [r4, #24]
 23f8acc:	220a      	movs	r2, #10
 23f8ace:	a810      	add	r0, sp, #64	; 0x40
 23f8ad0:	f002 ffff 	bl	23fbad2 <_ZN6StringC1Eih>
 23f8ad4:	2200      	movs	r2, #0
 23f8ad6:	a910      	add	r1, sp, #64	; 0x40
 23f8ad8:	a814      	add	r0, sp, #80	; 0x50
 23f8ada:	f7fe fb59 	bl	23f7190 <_ZN3IoT11publishMQTTE6StringS0_b>
 23f8ade:	a810      	add	r0, sp, #64	; 0x40
 23f8ae0:	f002 ff2a 	bl	23fb938 <_ZN6StringD1Ev>
 23f8ae4:	a814      	add	r0, sp, #80	; 0x50
 23f8ae6:	f002 ff27 	bl	23fb938 <_ZN6StringD1Ev>
 23f8aea:	a80c      	add	r0, sp, #48	; 0x30
 23f8aec:	f002 ff24 	bl	23fb938 <_ZN6StringD1Ev>
 23f8af0:	a808      	add	r0, sp, #32
 23f8af2:	f002 ff21 	bl	23fb938 <_ZN6StringD1Ev>
 23f8af6:	4668      	mov	r0, sp
 23f8af8:	f002 ff1e 	bl	23fb938 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f8afc:	a804      	add	r0, sp, #16
 23f8afe:	f002 ff1b 	bl	23fb938 <_ZN6StringD1Ev>
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f8b02:	6864      	ldr	r4, [r4, #4]
 23f8b04:	e7b4      	b.n	23f8a70 <_ZN6Device13publishStatesEv+0xc>
    }
}
 23f8b06:	b019      	add	sp, #100	; 0x64
 23f8b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f8b0a:	bf00      	nop
 23f8b0c:	1007ad5c 	.word	0x1007ad5c
 23f8b10:	023ff7b7 	.word	0x023ff7b7
 23f8b14:	023ff7bc 	.word	0x023ff7bc

023f8b18 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c>:
 23f8b18:	b508      	push	{r3, lr}
static const String kDevicesVariableName       = "Devices";
 23f8b1a:	490b      	ldr	r1, [pc, #44]	; (23f8b48 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x30>)
 23f8b1c:	480b      	ldr	r0, [pc, #44]	; (23f8b4c <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x34>)
 23f8b1e:	f002 ff56 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
static const String kChecklistVariableName     = "Checklist";
 23f8b22:	490b      	ldr	r1, [pc, #44]	; (23f8b50 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x38>)
 23f8b24:	480b      	ldr	r0, [pc, #44]	; (23f8b54 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x3c>)
 23f8b26:	f002 ff52 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
static const String kStatusVariableName        = "Status";
 23f8b2a:	490b      	ldr	r1, [pc, #44]	; (23f8b58 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x40>)
 23f8b2c:	480b      	ldr	r0, [pc, #44]	; (23f8b5c <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x44>)
 23f8b2e:	f002 ff4e 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
static const String kPublishName               = "patriot";
 23f8b32:	490b      	ldr	r1, [pc, #44]	; (23f8b60 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x48>)
 23f8b34:	480b      	ldr	r0, [pc, #44]	; (23f8b64 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x4c>)
 23f8b36:	f002 ff4a 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
 23f8b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
static const String kSSIDFunctionName          = "setSSID";
 23f8b3e:	490a      	ldr	r1, [pc, #40]	; (23f8b68 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x50>)
 23f8b40:	480a      	ldr	r0, [pc, #40]	; (23f8b6c <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x54>)
 23f8b42:	f002 bf44 	b.w	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
 23f8b46:	bf00      	nop
 23f8b48:	023ff3cc 	.word	0x023ff3cc
 23f8b4c:	1007ade4 	.word	0x1007ade4
 23f8b50:	023ff3d4 	.word	0x023ff3d4
 23f8b54:	1007adf4 	.word	0x1007adf4
 23f8b58:	023ff3de 	.word	0x023ff3de
 23f8b5c:	1007add4 	.word	0x1007add4
 23f8b60:	023ff3e5 	.word	0x023ff3e5
 23f8b64:	1007adb4 	.word	0x1007adb4
 23f8b68:	023ff3ed 	.word	0x023ff3ed
 23f8b6c:	1007adc4 	.word	0x1007adc4

023f8b70 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
 23f8b70:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
 23f8b74:	b510      	push	{r4, lr}
 23f8b76:	4604      	mov	r4, r0
            this->mqtt = mqtt;
 23f8b78:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
 23f8b7a:	b113      	cbz	r3, 23f8b82 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
 23f8b7c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 23f8b7e:	f000 fc21 	bl	23f93c4 <os_mutex_lock>
#endif
#endif
#endif
        }
 23f8b82:	4620      	mov	r0, r4
 23f8b84:	bd10      	pop	{r4, pc}

023f8b86 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
 23f8b86:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
 23f8b88:	6803      	ldr	r3, [r0, #0]
        ~MutexLocker() {
 23f8b8a:	4604      	mov	r4, r0
            if (mqtt->thread)
 23f8b8c:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 23f8b90:	b112      	cbz	r2, 23f8b98 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
 23f8b92:	6d98      	ldr	r0, [r3, #88]	; 0x58
 23f8b94:	f000 fc24 	bl	23f93e0 <os_mutex_unlock>
#endif
#endif
#endif
        }
 23f8b98:	4620      	mov	r0, r4
 23f8b9a:	bd10      	pop	{r4, pc}

023f8b9c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
 23f8b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f8b9e:	461f      	mov	r7, r3
 23f8ba0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 23f8ba4:	4604      	mov	r4, r0
 23f8ba6:	460d      	mov	r5, r1
 23f8ba8:	4616      	mov	r6, r2
    if (thread) {
 23f8baa:	b123      	cbz	r3, 23f8bb6 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1a>
        this->thread = true;
 23f8bac:	2301      	movs	r3, #1
        os_mutex_create(&mutex_lock);
 23f8bae:	3058      	adds	r0, #88	; 0x58
        this->thread = true;
 23f8bb0:	7103      	strb	r3, [r0, #4]
        os_mutex_create(&mutex_lock);
 23f8bb2:	f000 fbf9 	bl	23f93a8 <os_mutex_create>
    }
    this->callback = callback;
 23f8bb6:	9b08      	ldr	r3, [sp, #32]
 23f8bb8:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
 23f8bba:	2300      	movs	r3, #0
 23f8bbc:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
 23f8bbe:	b106      	cbz	r6, 23f8bc2 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x26>
        this->ip = ip;
 23f8bc0:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
 23f8bc2:	b125      	cbz	r5, 23f8bce <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x32>
        this->domain = domain;
 23f8bc4:	4629      	mov	r1, r5
 23f8bc6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 23f8bca:	f002 ff5f 	bl	23fba8c <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 23f8bce:	9b06      	ldr	r3, [sp, #24]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 23f8bd0:	69e0      	ldr	r0, [r4, #28]
    this->keepalive = keepalive;
 23f8bd2:	6523      	str	r3, [r4, #80]	; 0x50
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 23f8bd4:	9b07      	ldr	r3, [sp, #28]
    this->port = port;
 23f8bd6:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 23f8bda:	2bff      	cmp	r3, #255	; 0xff
 23f8bdc:	bfb8      	it	lt
 23f8bde:	23ff      	movlt	r3, #255	; 0xff
 23f8be0:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 23f8be4:	b108      	cbz	r0, 23f8bea <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x4e>
      delete[] buffer;
 23f8be6:	f7fd ffc6 	bl	23f6b76 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 23f8bea:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 23f8bee:	f7fd ffc0 	bl	23f6b72 <_Znaj>
 23f8bf2:	61e0      	str	r0, [r4, #28]
}
 23f8bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

023f8bf8 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
 23f8bf8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f8bfc:	4604      	mov	r4, r0
            bool thread) {
 23f8bfe:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
 23f8c00:	4698      	mov	r8, r3
 23f8c02:	4617      	mov	r7, r2
 23f8c04:	460e      	mov	r6, r1
            bool thread) {
 23f8c06:	f003 fc37 	bl	23fc478 <_ZN9TCPClientC1Ev>
 23f8c0a:	490d      	ldr	r1, [pc, #52]	; (23f8c40 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
 23f8c0c:	61e5      	str	r5, [r4, #28]
 23f8c0e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 23f8c12:	f002 fedc 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
 23f8c16:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 23f8c1a:	22ff      	movs	r2, #255	; 0xff
 23f8c1c:	e9cd 8302 	strd	r8, r3, [sp, #8]
 23f8c20:	230f      	movs	r3, #15
 23f8c22:	4620      	mov	r0, r4
 23f8c24:	e9cd 3200 	strd	r3, r2, [sp]
 23f8c28:	4631      	mov	r1, r6
 23f8c2a:	463b      	mov	r3, r7
 23f8c2c:	462a      	mov	r2, r5
            bool thread) {
 23f8c2e:	64a5      	str	r5, [r4, #72]	; 0x48
 23f8c30:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
 23f8c34:	f7ff ffb2 	bl	23f8b9c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
 23f8c38:	4620      	mov	r0, r4
 23f8c3a:	b004      	add	sp, #16
 23f8c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f8c40:	023ff895 	.word	0x023ff895

023f8c44 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 23f8c44:	b510      	push	{r4, lr}
 23f8c46:	4604      	mov	r4, r0
    while(!_client.available()) {}
 23f8c48:	4620      	mov	r0, r4
 23f8c4a:	f003 fb71 	bl	23fc330 <_ZN9TCPClient9availableEv>
 23f8c4e:	2800      	cmp	r0, #0
 23f8c50:	d0fa      	beq.n	23f8c48 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 23f8c52:	4620      	mov	r0, r4
 23f8c54:	f003 f956 	bl	23fbf04 <_ZN9TCPClient4readEv>
}
 23f8c58:	b2c0      	uxtb	r0, r0
 23f8c5a:	bd10      	pop	{r4, pc}

023f8c5c <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 23f8c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t len = 0;
    buffer[len++] = readByte();
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 23f8c60:	f04f 0901 	mov.w	r9, #1
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 23f8c64:	4605      	mov	r5, r0
 23f8c66:	4688      	mov	r8, r1
    buffer[len++] = readByte();
 23f8c68:	f7ff ffec 	bl	23f8c44 <_ZN4MQTT8readByteEv>
    uint16_t length = 0;
 23f8c6c:	2700      	movs	r7, #0
    buffer[len++] = readByte();
 23f8c6e:	464c      	mov	r4, r9
 23f8c70:	69eb      	ldr	r3, [r5, #28]
 23f8c72:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 23f8c74:	69eb      	ldr	r3, [r5, #28]
 23f8c76:	f893 a000 	ldrb.w	sl, [r3]
 23f8c7a:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 23f8c7e:	4628      	mov	r0, r5
 23f8c80:	f7ff ffe0 	bl	23f8c44 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 23f8c84:	4626      	mov	r6, r4
 23f8c86:	69eb      	ldr	r3, [r5, #28]
 23f8c88:	3401      	adds	r4, #1
 23f8c8a:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 23f8c8c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 23f8c90:	fb13 f309 	smulbb	r3, r3, r9
 23f8c94:	441f      	add	r7, r3
        multiplier *= 128;
    } while ((digit & 128) != 0);
 23f8c96:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
 23f8c98:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 23f8c9a:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 23f8c9c:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
 23f8ca0:	d4ed      	bmi.n	23f8c7e <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
 23f8ca2:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 23f8ca4:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
 23f8ca8:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
 23f8cac:	d11e      	bne.n	23f8cec <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 23f8cae:	4628      	mov	r0, r5
 23f8cb0:	f7ff ffc8 	bl	23f8c44 <_ZN4MQTT8readByteEv>
 23f8cb4:	69eb      	ldr	r3, [r5, #28]
 23f8cb6:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
 23f8cb8:	4628      	mov	r0, r5
 23f8cba:	f7ff ffc3 	bl	23f8c44 <_ZN4MQTT8readByteEv>
 23f8cbe:	1cf4      	adds	r4, r6, #3
 23f8cc0:	69eb      	ldr	r3, [r5, #28]
        buffer[len++] = readByte();
 23f8cc2:	3602      	adds	r6, #2
        buffer[len++] = readByte();
 23f8cc4:	b2b6      	uxth	r6, r6
 23f8cc6:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 23f8cc8:	2602      	movs	r6, #2
        buffer[len++] = readByte();
 23f8cca:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 23f8ccc:	b2b6      	uxth	r6, r6
 23f8cce:	42be      	cmp	r6, r7
 23f8cd0:	d20e      	bcs.n	23f8cf0 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
 23f8cd2:	4628      	mov	r0, r5
 23f8cd4:	f7ff ffb6 	bl	23f8c44 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 23f8cd8:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
    for (uint16_t i = start;i<length;i++) {
 23f8cdc:	3601      	adds	r6, #1
        if (len < this->maxpacketsize) {
 23f8cde:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 23f8ce0:	bf84      	itt	hi
 23f8ce2:	69eb      	ldrhi	r3, [r5, #28]
 23f8ce4:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 23f8ce6:	3401      	adds	r4, #1
 23f8ce8:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
 23f8cea:	e7ef      	b.n	23f8ccc <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
 23f8cec:	2600      	movs	r6, #0
 23f8cee:	e7ed      	b.n	23f8ccc <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
 23f8cf0:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 23f8cf4:	42a3      	cmp	r3, r4
 23f8cf6:	bf2c      	ite	cs
 23f8cf8:	4620      	movcs	r0, r4
 23f8cfa:	2000      	movcc	r0, #0
 23f8cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023f8d00 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 23f8d00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f8d04:	4615      	mov	r5, r2
 23f8d06:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 23f8d08:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 23f8d0a:	4607      	mov	r7, r0
    uint8_t llen = 0;
 23f8d0c:	2300      	movs	r3, #0
    do {
        digit = len % 128;
 23f8d0e:	4696      	mov	lr, r2
 23f8d10:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
 23f8d14:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 23f8d18:	a802      	add	r0, sp, #8
            digit |= 0x80;
 23f8d1a:	bf88      	it	hi
 23f8d1c:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        lenBuf[pos++] = digit;
 23f8d20:	1c5c      	adds	r4, r3, #1
        llen++;
    } while(len > 0);
 23f8d22:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
 23f8d26:	4403      	add	r3, r0
        len = len / 128;
 23f8d28:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
 23f8d2c:	b2e4      	uxtb	r4, r4
 23f8d2e:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
 23f8d32:	d81e      	bhi.n	23f8d72 <_ZN4MQTT5writeEhPht+0x72>

    buf[4-llen] = header;
 23f8d34:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
 23f8d38:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
 23f8d3c:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
 23f8d3e:	4622      	mov	r2, r4
 23f8d40:	a901      	add	r1, sp, #4
 23f8d42:	4428      	add	r0, r5
    buf[4-llen] = header;
 23f8d44:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
 23f8d48:	f004 fa82 	bl	23fd250 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 23f8d4c:	1c72      	adds	r2, r6, #1
 23f8d4e:	4422      	add	r2, r4
 23f8d50:	4641      	mov	r1, r8
 23f8d52:	4638      	mov	r0, r7
 23f8d54:	f003 f8c1 	bl	23fbeda <_ZN9TCPClient5writeEPKhj>
 23f8d58:	4605      	mov	r5, r0
 23f8d5a:	f000 fbb1 	bl	23f94c0 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 23f8d5e:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
 23f8d60:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 23f8d62:	4432      	add	r2, r6
 23f8d64:	b2a8      	uxth	r0, r5
}
 23f8d66:	1a13      	subs	r3, r2, r0
 23f8d68:	4258      	negs	r0, r3
 23f8d6a:	4158      	adcs	r0, r3
 23f8d6c:	b002      	add	sp, #8
 23f8d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
 23f8d72:	4623      	mov	r3, r4
 23f8d74:	e7cb      	b.n	23f8d0e <_ZN4MQTT5writeEhPht+0xe>

023f8d76 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 23f8d76:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 23f8d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f8d7a:	4605      	mov	r5, r0
    pos += 2;
 23f8d7c:	b298      	uxth	r0, r3
 23f8d7e:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
 23f8d80:	5cce      	ldrb	r6, [r1, r3]
 23f8d82:	b29c      	uxth	r4, r3
 23f8d84:	b14e      	cbz	r6, 23f8d9a <_ZN4MQTT11writeStringEPKcPht+0x24>
 23f8d86:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
 23f8d8a:	1c5f      	adds	r7, r3, #1
 23f8d8c:	4584      	cmp	ip, r0
 23f8d8e:	d904      	bls.n	23f8d9a <_ZN4MQTT11writeStringEPKcPht+0x24>
        buf[pos++] = *idp++;
 23f8d90:	1c44      	adds	r4, r0, #1
 23f8d92:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
 23f8d94:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
 23f8d96:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
 23f8d98:	e7f2      	b.n	23f8d80 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 23f8d9a:	b299      	uxth	r1, r3
 23f8d9c:	1a41      	subs	r1, r0, r1
 23f8d9e:	440a      	add	r2, r1
 23f8da0:	0a21      	lsrs	r1, r4, #8
 23f8da2:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 23f8da6:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
 23f8daa:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f8dac <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 23f8dac:	b538      	push	{r3, r4, r5, lr}
 23f8dae:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
 23f8db0:	f003 f9e0 	bl	23fc174 <_ZN9TCPClient9connectedEv>
 23f8db4:	2800      	cmp	r0, #0
 23f8db6:	bf14      	ite	ne
 23f8db8:	2501      	movne	r5, #1
 23f8dba:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
 23f8dbc:	d102      	bne.n	23f8dc4 <_ZN4MQTT11isConnectedEv+0x18>
 23f8dbe:	4620      	mov	r0, r4
 23f8dc0:	f003 fb10 	bl	23fc3e4 <_ZN9TCPClient4stopEv>
    return rc;
}
 23f8dc4:	4628      	mov	r0, r5
 23f8dc6:	bd38      	pop	{r3, r4, r5, pc}

023f8dc8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 23f8dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f8dcc:	b088      	sub	sp, #32
 23f8dce:	4604      	mov	r4, r0
 23f8dd0:	4689      	mov	r9, r1
 23f8dd2:	4617      	mov	r7, r2
 23f8dd4:	461e      	mov	r6, r3
 23f8dd6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 23f8dda:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    if (!isConnected()) {
 23f8dde:	f7ff ffe5 	bl	23f8dac <_ZN4MQTT11isConnectedEv>
 23f8de2:	4605      	mov	r5, r0
 23f8de4:	2800      	cmp	r0, #0
 23f8de6:	f040 80cd 	bne.w	23f8f84 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
 23f8dea:	4621      	mov	r1, r4
 23f8dec:	a801      	add	r0, sp, #4
 23f8dee:	f7ff febf 	bl	23f8b70 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
 23f8df2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f8df4:	2900      	cmp	r1, #0
 23f8df6:	f040 8088 	bne.w	23f8f0a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
 23f8dfa:	462b      	mov	r3, r5
 23f8dfc:	4620      	mov	r0, r4
 23f8dfe:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 23f8e02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 23f8e04:	f003 f938 	bl	23fc078 <_ZN9TCPClient7connectEPKctm>
        if (result) {
 23f8e08:	2800      	cmp	r0, #0
 23f8e0a:	d07a      	beq.n	23f8f02 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
 23f8e0c:	2301      	movs	r3, #1
 23f8e0e:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
 23f8e10:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 23f8e14:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
 23f8e16:	2b04      	cmp	r3, #4
 23f8e18:	4b5b      	ldr	r3, [pc, #364]	; (23f8f88 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
 23f8e1a:	f040 8081 	bne.w	23f8f20 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 23f8e1e:	6818      	ldr	r0, [r3, #0]
 23f8e20:	8899      	ldrh	r1, [r3, #4]
 23f8e22:	799b      	ldrb	r3, [r3, #6]
 23f8e24:	f8ad 100c 	strh.w	r1, [sp, #12]
 23f8e28:	f88d 300e 	strb.w	r3, [sp, #14]
 23f8e2c:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 23f8e2e:	f8c2 0005 	str.w	r0, [r2, #5]
 23f8e32:	f89d 300e 	ldrb.w	r3, [sp, #14]
 23f8e36:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 23f8e3a:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
 23f8e3c:	230c      	movs	r3, #12
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 23f8e3e:	f8a2 1009 	strh.w	r1, [r2, #9]
            if (willTopic) {
 23f8e42:	f1b8 0f00 	cmp.w	r8, #0
 23f8e46:	f000 8081 	beq.w	23f8f4c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 23f8e4a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 23f8e4e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 23f8e52:	0140      	lsls	r0, r0, #5
 23f8e54:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 23f8e58:	f040 0006 	orr.w	r0, r0, #6
 23f8e5c:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
 23f8e5e:	f1ba 0f00 	cmp.w	sl, #0
 23f8e62:	d101      	bne.n	23f8e68 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
 23f8e64:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
 23f8e68:	b11f      	cbz	r7, 23f8e72 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
 23f8e6a:	2e00      	cmp	r6, #0
 23f8e6c:	d170      	bne.n	23f8f50 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
 23f8e6e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
 23f8e72:	69e2      	ldr	r2, [r4, #28]
 23f8e74:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
 23f8e76:	6d22      	ldr	r2, [r4, #80]	; 0x50
 23f8e78:	69e1      	ldr	r1, [r4, #28]
 23f8e7a:	1c58      	adds	r0, r3, #1
 23f8e7c:	1212      	asrs	r2, r2, #8
 23f8e7e:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 23f8e80:	69e1      	ldr	r1, [r4, #28]
 23f8e82:	6d20      	ldr	r0, [r4, #80]	; 0x50
 23f8e84:	1c9a      	adds	r2, r3, #2
 23f8e86:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 23f8e88:	3303      	adds	r3, #3
 23f8e8a:	4649      	mov	r1, r9
 23f8e8c:	4620      	mov	r0, r4
 23f8e8e:	69e2      	ldr	r2, [r4, #28]
 23f8e90:	f7ff ff71 	bl	23f8d76 <_ZN4MQTT11writeStringEPKcPht>
 23f8e94:	4603      	mov	r3, r0
            if (willTopic) {
 23f8e96:	f1b8 0f00 	cmp.w	r8, #0
 23f8e9a:	d00b      	beq.n	23f8eb4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
 23f8e9c:	4641      	mov	r1, r8
 23f8e9e:	69e2      	ldr	r2, [r4, #28]
 23f8ea0:	4620      	mov	r0, r4
 23f8ea2:	f7ff ff68 	bl	23f8d76 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 23f8ea6:	69e2      	ldr	r2, [r4, #28]
                length = writeString(willTopic, buffer, length);
 23f8ea8:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
 23f8eaa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 23f8eac:	4620      	mov	r0, r4
 23f8eae:	f7ff ff62 	bl	23f8d76 <_ZN4MQTT11writeStringEPKcPht>
 23f8eb2:	4603      	mov	r3, r0
            if(user != NULL) {
 23f8eb4:	b167      	cbz	r7, 23f8ed0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
 23f8eb6:	4639      	mov	r1, r7
 23f8eb8:	4620      	mov	r0, r4
 23f8eba:	69e2      	ldr	r2, [r4, #28]
 23f8ebc:	f7ff ff5b 	bl	23f8d76 <_ZN4MQTT11writeStringEPKcPht>
 23f8ec0:	4603      	mov	r3, r0
                if(pass != NULL) {
 23f8ec2:	b12e      	cbz	r6, 23f8ed0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
 23f8ec4:	4631      	mov	r1, r6
 23f8ec6:	4620      	mov	r0, r4
 23f8ec8:	69e2      	ldr	r2, [r4, #28]
 23f8eca:	f7ff ff54 	bl	23f8d76 <_ZN4MQTT11writeStringEPKcPht>
 23f8ece:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
 23f8ed0:	3b05      	subs	r3, #5
 23f8ed2:	2110      	movs	r1, #16
 23f8ed4:	69e2      	ldr	r2, [r4, #28]
 23f8ed6:	b29b      	uxth	r3, r3
 23f8ed8:	4620      	mov	r0, r4
 23f8eda:	f7ff ff11 	bl	23f8d00 <_ZN4MQTT5writeEhPht>
 23f8ede:	f000 faef 	bl	23f94c0 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 23f8ee2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            lastInActivity = lastOutActivity = millis();
 23f8ee6:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
            while (!_client.available()) {
 23f8eea:	4620      	mov	r0, r4
 23f8eec:	f003 fa20 	bl	23fc330 <_ZN9TCPClient9availableEv>
 23f8ef0:	bb88      	cbnz	r0, 23f8f56 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
 23f8ef2:	f000 fae5 	bl	23f94c0 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 23f8ef6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23f8ef8:	1ac0      	subs	r0, r0, r3
 23f8efa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 23f8efc:	4373      	muls	r3, r6
 23f8efe:	4298      	cmp	r0, r3
 23f8f00:	d9f3      	bls.n	23f8eea <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
 23f8f02:	4620      	mov	r0, r4
 23f8f04:	f003 fa6e 	bl	23fc3e4 <_ZN9TCPClient4stopEv>
 23f8f08:	e035      	b.n	23f8f76 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
 23f8f0a:	a802      	add	r0, sp, #8
 23f8f0c:	f001 f9e2 	bl	23fa2d4 <_ZN9IPAddressC1EPKh>
 23f8f10:	462b      	mov	r3, r5
 23f8f12:	4620      	mov	r0, r4
 23f8f14:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 23f8f18:	a902      	add	r1, sp, #8
 23f8f1a:	f003 f98d 	bl	23fc238 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23f8f1e:	e773      	b.n	23f8e08 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 23f8f20:	f8d3 0007 	ldr.w	r0, [r3, #7]
 23f8f24:	f8d3 100b 	ldr.w	r1, [r3, #11]
 23f8f28:	f10d 0c08 	add.w	ip, sp, #8
 23f8f2c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 23f8f30:	7bdb      	ldrb	r3, [r3, #15]
 23f8f32:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 23f8f36:	ab02      	add	r3, sp, #8
 23f8f38:	cb03      	ldmia	r3!, {r0, r1}
 23f8f3a:	f8c2 0005 	str.w	r0, [r2, #5]
 23f8f3e:	f8c2 1009 	str.w	r1, [r2, #9]
 23f8f42:	f89c 3000 	ldrb.w	r3, [ip]
 23f8f46:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 23f8f48:	230e      	movs	r3, #14
 23f8f4a:	e77a      	b.n	23f8e42 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
 23f8f4c:	2002      	movs	r0, #2
 23f8f4e:	e786      	b.n	23f8e5e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
 23f8f50:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 23f8f54:	e78d      	b.n	23f8e72 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
 23f8f56:	4620      	mov	r0, r4
 23f8f58:	a902      	add	r1, sp, #8
 23f8f5a:	f7ff fe7f 	bl	23f8c5c <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
 23f8f5e:	2804      	cmp	r0, #4
 23f8f60:	d1cf      	bne.n	23f8f02 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
 23f8f62:	69e3      	ldr	r3, [r4, #28]
 23f8f64:	78de      	ldrb	r6, [r3, #3]
 23f8f66:	2e00      	cmp	r6, #0
 23f8f68:	d1cb      	bne.n	23f8f02 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
 23f8f6a:	f000 faa9 	bl	23f94c0 <HAL_Timer_Get_Milli_Seconds>
                    return true;
 23f8f6e:	2501      	movs	r5, #1
                    lastInActivity = millis();
 23f8f70:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 23f8f72:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
 23f8f76:	a801      	add	r0, sp, #4
 23f8f78:	f7ff fe05 	bl	23f8b86 <_ZN4MQTT11MutexLockerD1Ev>
}
 23f8f7c:	4628      	mov	r0, r5
 23f8f7e:	b008      	add	sp, #32
 23f8f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
 23f8f84:	2500      	movs	r5, #0
 23f8f86:	e7f9      	b.n	23f8f7c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
 23f8f88:	023ff2d4 	.word	0x023ff2d4

023f8f8c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 23f8f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f8f90:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 23f8f94:	4604      	mov	r4, r0
 23f8f96:	468b      	mov	fp, r1
 23f8f98:	4616      	mov	r6, r2
 23f8f9a:	461f      	mov	r7, r3
 23f8f9c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 23f8fa0:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    if (isConnected()) {
 23f8fa4:	f7ff ff02 	bl	23f8dac <_ZN4MQTT11isConnectedEv>
 23f8fa8:	4682      	mov	sl, r0
 23f8faa:	2800      	cmp	r0, #0
 23f8fac:	d051      	beq.n	23f9052 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
 23f8fae:	4621      	mov	r1, r4
 23f8fb0:	a801      	add	r0, sp, #4
 23f8fb2:	f7ff fddd 	bl	23f8b70 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
 23f8fb6:	2100      	movs	r1, #0
 23f8fb8:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 23f8fbc:	69e0      	ldr	r0, [r4, #28]
 23f8fbe:	f004 f96e 	bl	23fd29e <memset>
        length = writeString(topic, buffer, length);
 23f8fc2:	2305      	movs	r3, #5
 23f8fc4:	4659      	mov	r1, fp
 23f8fc6:	4620      	mov	r0, r4
 23f8fc8:	69e2      	ldr	r2, [r4, #28]
 23f8fca:	f7ff fed4 	bl	23f8d76 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
 23f8fce:	1e6b      	subs	r3, r5, #1
 23f8fd0:	2b01      	cmp	r3, #1
 23f8fd2:	d815      	bhi.n	23f9000 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
 23f8fd4:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 23f8fd6:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
 23f8fd8:	3101      	adds	r1, #1
 23f8fda:	b289      	uxth	r1, r1
 23f8fdc:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 23f8fde:	0a09      	lsrs	r1, r1, #8
 23f8fe0:	5419      	strb	r1, [r3, r0]
 23f8fe2:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 23f8fe4:	69e3      	ldr	r3, [r4, #28]
 23f8fe6:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 23f8fe8:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
 23f8fea:	3002      	adds	r0, #2
 23f8fec:	b280      	uxth	r0, r0
 23f8fee:	5499      	strb	r1, [r3, r2]
            if (messageid != NULL)
 23f8ff0:	f1b8 0f00 	cmp.w	r8, #0
 23f8ff4:	d004      	beq.n	23f9000 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
 23f8ff6:	8c23      	ldrh	r3, [r4, #32]
 23f8ff8:	1c5a      	adds	r2, r3, #1
 23f8ffa:	8422      	strh	r2, [r4, #32]
 23f8ffc:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 23f9000:	2100      	movs	r1, #0
 23f9002:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 23f9004:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
 23f9006:	69e2      	ldr	r2, [r4, #28]
 23f9008:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 23f900a:	d90a      	bls.n	23f9022 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
 23f900c:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
 23f9010:	459c      	cmp	ip, r3
 23f9012:	d906      	bls.n	23f9022 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
 23f9014:	f816 c001 	ldrb.w	ip, [r6, r1]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 23f9018:	3101      	adds	r1, #1
            buffer[length++] = payload[i];
 23f901a:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 23f901e:	b289      	uxth	r1, r1
 23f9020:	e7ef      	b.n	23f9002 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
 23f9022:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 23f9026:	2900      	cmp	r1, #0
 23f9028:	bf0c      	ite	eq
 23f902a:	2130      	moveq	r1, #48	; 0x30
 23f902c:	2131      	movne	r1, #49	; 0x31
        if (dup) {
 23f902e:	f1b9 0f00 	cmp.w	r9, #0
 23f9032:	d001      	beq.n	23f9038 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
 23f9034:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
 23f9038:	2d02      	cmp	r5, #2
 23f903a:	d10e      	bne.n	23f905a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
 23f903c:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
 23f9040:	3b05      	subs	r3, #5
 23f9042:	4620      	mov	r0, r4
 23f9044:	b29b      	uxth	r3, r3
 23f9046:	f7ff fe5b 	bl	23f8d00 <_ZN4MQTT5writeEhPht>
 23f904a:	4682      	mov	sl, r0
        MutexLocker lock(this);
 23f904c:	a801      	add	r0, sp, #4
 23f904e:	f7ff fd9a 	bl	23f8b86 <_ZN4MQTT11MutexLockerD1Ev>
}
 23f9052:	4650      	mov	r0, sl
 23f9054:	b003      	add	sp, #12
 23f9056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
 23f905a:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 23f905c:	bf08      	it	eq
 23f905e:	f041 0102 	orreq.w	r1, r1, #2
 23f9062:	e7ed      	b.n	23f9040 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

023f9064 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 23f9064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 23f9066:	9c08      	ldr	r4, [sp, #32]
 23f9068:	9403      	str	r4, [sp, #12]
 23f906a:	2400      	movs	r4, #0
 23f906c:	9402      	str	r4, [sp, #8]
 23f906e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 23f9072:	9401      	str	r4, [sp, #4]
 23f9074:	f89d 4018 	ldrb.w	r4, [sp, #24]
 23f9078:	9400      	str	r4, [sp, #0]
 23f907a:	f7ff ff87 	bl	23f8f8c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 23f907e:	b004      	add	sp, #16
 23f9080:	bd10      	pop	{r4, pc}

023f9082 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
 23f9082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f9084:	4604      	mov	r4, r0
 23f9086:	460e      	mov	r6, r1
    if (isConnected()) {
 23f9088:	f7ff fe90 	bl	23f8dac <_ZN4MQTT11isConnectedEv>
 23f908c:	4605      	mov	r5, r0
 23f908e:	b1c8      	cbz	r0, 23f90c4 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
 23f9090:	4621      	mov	r1, r4
 23f9092:	a801      	add	r0, sp, #4
 23f9094:	f7ff fd6c 	bl	23f8b70 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 23f9098:	2262      	movs	r2, #98	; 0x62
 23f909a:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 23f909c:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 23f909e:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 23f90a0:	2202      	movs	r2, #2
 23f90a2:	69e3      	ldr	r3, [r4, #28]
 23f90a4:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 23f90a6:	69e3      	ldr	r3, [r4, #28]
 23f90a8:	0a32      	lsrs	r2, r6, #8
 23f90aa:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 23f90ac:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 23f90ae:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 23f90b0:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
 23f90b2:	69e1      	ldr	r1, [r4, #28]
 23f90b4:	f002 ff11 	bl	23fbeda <_ZN9TCPClient5writeEPKhj>
 23f90b8:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
 23f90ba:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
 23f90bc:	bf18      	it	ne
 23f90be:	2501      	movne	r5, #1
        MutexLocker lock(this);
 23f90c0:	f7ff fd61 	bl	23f8b86 <_ZN4MQTT11MutexLockerD1Ev>
}
 23f90c4:	4628      	mov	r0, r5
 23f90c6:	b002      	add	sp, #8
 23f90c8:	bd70      	pop	{r4, r5, r6, pc}

023f90ca <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
 23f90ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f90cc:	4604      	mov	r4, r0
 23f90ce:	460e      	mov	r6, r1
    if (isConnected()) {
 23f90d0:	f7ff fe6c 	bl	23f8dac <_ZN4MQTT11isConnectedEv>
 23f90d4:	4605      	mov	r5, r0
 23f90d6:	b1c8      	cbz	r0, 23f910c <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
 23f90d8:	4621      	mov	r1, r4
 23f90da:	a801      	add	r0, sp, #4
 23f90dc:	f7ff fd48 	bl	23f8b70 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 23f90e0:	2272      	movs	r2, #114	; 0x72
 23f90e2:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 23f90e4:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 23f90e6:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 23f90e8:	2202      	movs	r2, #2
 23f90ea:	69e3      	ldr	r3, [r4, #28]
 23f90ec:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 23f90ee:	69e3      	ldr	r3, [r4, #28]
 23f90f0:	0a32      	lsrs	r2, r6, #8
 23f90f2:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 23f90f4:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 23f90f6:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 23f90f8:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
 23f90fa:	69e1      	ldr	r1, [r4, #28]
 23f90fc:	f002 feed 	bl	23fbeda <_ZN9TCPClient5writeEPKhj>
 23f9100:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
 23f9102:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
 23f9104:	bf18      	it	ne
 23f9106:	2501      	movne	r5, #1
        MutexLocker lock(this);
 23f9108:	f7ff fd3d 	bl	23f8b86 <_ZN4MQTT11MutexLockerD1Ev>
}
 23f910c:	4628      	mov	r0, r5
 23f910e:	b002      	add	sp, #8
 23f9110:	bd70      	pop	{r4, r5, r6, pc}

023f9112 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
 23f9112:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f9116:	ed2d 8b02 	vpush	{d8}
 23f911a:	b087      	sub	sp, #28
 23f911c:	af00      	add	r7, sp, #0
 23f911e:	4604      	mov	r4, r0
    if (isConnected()) {
 23f9120:	f7ff fe44 	bl	23f8dac <_ZN4MQTT11isConnectedEv>
 23f9124:	4681      	mov	r9, r0
 23f9126:	b1f8      	cbz	r0, 23f9168 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
 23f9128:	4621      	mov	r1, r4
 23f912a:	f107 0014 	add.w	r0, r7, #20
 23f912e:	f7ff fd1f 	bl	23f8b70 <_ZN4MQTT11MutexLockerC1EPS_>
 23f9132:	f000 f9c5 	bl	23f94c0 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 23f9136:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23f913a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 23f913c:	4606      	mov	r6, r0
 23f913e:	4353      	muls	r3, r2
 23f9140:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 23f9142:	1a82      	subs	r2, r0, r2
 23f9144:	429a      	cmp	r2, r3
 23f9146:	d803      	bhi.n	23f9150 <_ZN4MQTT4loopEv+0x3e>
 23f9148:	6a62      	ldr	r2, [r4, #36]	; 0x24
 23f914a:	1a82      	subs	r2, r0, r2
 23f914c:	4293      	cmp	r3, r2
 23f914e:	d221      	bcs.n	23f9194 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
 23f9150:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 23f9154:	b17b      	cbz	r3, 23f9176 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
 23f9156:	4620      	mov	r0, r4
 23f9158:	f003 f944 	bl	23fc3e4 <_ZN9TCPClient4stopEv>
                return false;
 23f915c:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
 23f9160:	f107 0014 	add.w	r0, r7, #20
 23f9164:	f7ff fd0f 	bl	23f8b86 <_ZN4MQTT11MutexLockerD1Ev>
}
 23f9168:	4648      	mov	r0, r9
 23f916a:	371c      	adds	r7, #28
 23f916c:	46bd      	mov	sp, r7
 23f916e:	ecbd 8b02 	vpop	{d8}
 23f9172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
 23f9176:	21c0      	movs	r1, #192	; 0xc0
 23f9178:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 23f917a:	4620      	mov	r0, r4
                buffer[0] = MQTTPINGREQ;
 23f917c:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 23f917e:	69e2      	ldr	r2, [r4, #28]
 23f9180:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 23f9182:	69e1      	ldr	r1, [r4, #28]
 23f9184:	2202      	movs	r2, #2
 23f9186:	f002 fea8 	bl	23fbeda <_ZN9TCPClient5writeEPKhj>
                pingOutstanding = true;
 23f918a:	2301      	movs	r3, #1
                lastInActivity = t;
 23f918c:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
 23f9190:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
 23f9194:	4620      	mov	r0, r4
 23f9196:	f003 f8cb 	bl	23fc330 <_ZN9TCPClient9availableEv>
 23f919a:	2800      	cmp	r0, #0
 23f919c:	d0e0      	beq.n	23f9160 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
 23f919e:	4620      	mov	r0, r4
 23f91a0:	f107 0113 	add.w	r1, r7, #19
 23f91a4:	f7ff fd5a 	bl	23f8c5c <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
 23f91a8:	4683      	mov	fp, r0
 23f91aa:	2800      	cmp	r0, #0
 23f91ac:	d0d8      	beq.n	23f9160 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
 23f91ae:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
 23f91b0:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 23f91b2:	7819      	ldrb	r1, [r3, #0]
 23f91b4:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 23f91b8:	2a30      	cmp	r2, #48	; 0x30
 23f91ba:	d17f      	bne.n	23f92bc <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
 23f91bc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 23f91c0:	f1ba 0f00 	cmp.w	sl, #0
 23f91c4:	d0cc      	beq.n	23f9160 <_ZN4MQTT4loopEv+0x4e>
                        }
 23f91c6:	466a      	mov	r2, sp
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 23f91c8:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
 23f91cc:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 23f91d0:	eb03 020c 	add.w	r2, r3, ip
 23f91d4:	7851      	ldrb	r1, [r2, #1]
 23f91d6:	7895      	ldrb	r5, [r2, #2]
 23f91d8:	eb05 2501 	add.w	r5, r5, r1, lsl #8
                        char topic[tl+1];
 23f91dc:	4669      	mov	r1, sp
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 23f91de:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
 23f91e0:	f105 0208 	add.w	r2, r5, #8
 23f91e4:	08d2      	lsrs	r2, r2, #3
 23f91e6:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
 23f91ea:	4695      	mov	sp, r2
 23f91ec:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
 23f91ee:	f10c 0203 	add.w	r2, ip, #3
 23f91f2:	60fa      	str	r2, [r7, #12]
 23f91f4:	eb03 0e02 	add.w	lr, r3, r2
 23f91f8:	eb0d 0205 	add.w	r2, sp, r5
 23f91fc:	f8c7 d008 	str.w	sp, [r7, #8]
 23f9200:	607a      	str	r2, [r7, #4]
 23f9202:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
 23f9206:	428a      	cmp	r2, r1
 23f9208:	d006      	beq.n	23f9218 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
 23f920a:	460a      	mov	r2, r1
 23f920c:	f81e 8b01 	ldrb.w	r8, [lr], #1
 23f9210:	f802 8b01 	strb.w	r8, [r2], #1
 23f9214:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
 23f9216:	e7f4      	b.n	23f9202 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
 23f9218:	2200      	movs	r2, #0
 23f921a:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 23f921c:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 23f9220:	68f9      	ldr	r1, [r7, #12]
 23f9222:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
 23f9226:	ebab 020c 	sub.w	r2, fp, ip
 23f922a:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 23f922c:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
 23f9230:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 23f9234:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 23f9236:	d125      	bne.n	23f9284 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 23f9238:	f813 e001 	ldrb.w	lr, [r3, r1]
 23f923c:	4419      	add	r1, r3
 23f923e:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
 23f9242:	f10c 0105 	add.w	r1, ip, #5
 23f9246:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
 23f9248:	3a02      	subs	r2, #2
 23f924a:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 23f924c:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
 23f9250:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 23f9252:	2240      	movs	r2, #64	; 0x40
 23f9254:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 23f9256:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 23f925a:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 23f925c:	69e3      	ldr	r3, [r4, #28]
 23f925e:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
 23f9262:	69e3      	ldr	r3, [r4, #28]
 23f9264:	ea4f 221b 	mov.w	r2, fp, lsr #8
 23f9268:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 23f926a:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 23f926c:	2204      	movs	r2, #4
                            buffer[3] = (msgId & 0xFF);
 23f926e:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
 23f9272:	4620      	mov	r0, r4
 23f9274:	69e1      	ldr	r1, [r4, #28]
 23f9276:	f002 fe30 	bl	23fbeda <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
 23f927a:	6266      	str	r6, [r4, #36]	; 0x24
 23f927c:	ee18 3a10 	vmov	r3, s16
 23f9280:	469d      	mov	sp, r3
 23f9282:	e76d      	b.n	23f9160 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 23f9284:	f1b8 0f04 	cmp.w	r8, #4
 23f9288:	d115      	bne.n	23f92b6 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 23f928a:	f813 e001 	ldrb.w	lr, [r3, r1]
 23f928e:	4419      	add	r1, r3
 23f9290:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
 23f9294:	f10c 0105 	add.w	r1, ip, #5
 23f9298:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
 23f929a:	3a02      	subs	r2, #2
 23f929c:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 23f929e:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
 23f92a2:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
 23f92a4:	2250      	movs	r2, #80	; 0x50
 23f92a6:	69e3      	ldr	r3, [r4, #28]
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 23f92a8:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
 23f92ac:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
 23f92ae:	2202      	movs	r2, #2
 23f92b0:	69e3      	ldr	r3, [r4, #28]
 23f92b2:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
 23f92b4:	e7d5      	b.n	23f9262 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
 23f92b6:	4419      	add	r1, r3
 23f92b8:	47d0      	blx	sl
 23f92ba:	e7df      	b.n	23f927c <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
 23f92bc:	2a50      	cmp	r2, #80	; 0x50
 23f92be:	d108      	bne.n	23f92d2 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
 23f92c0:	789a      	ldrb	r2, [r3, #2]
 23f92c2:	78d9      	ldrb	r1, [r3, #3]
                    this->publishRelease(msgId);
 23f92c4:	4620      	mov	r0, r4
                    msgId = (buffer[2] << 8) + buffer[3];
 23f92c6:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
 23f92ca:	b289      	uxth	r1, r1
 23f92cc:	f7ff fed9 	bl	23f9082 <_ZN4MQTT14publishReleaseEt>
 23f92d0:	e746      	b.n	23f9160 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
 23f92d2:	2a40      	cmp	r2, #64	; 0x40
 23f92d4:	d112      	bne.n	23f92fc <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
 23f92d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 23f92d8:	2a00      	cmp	r2, #0
 23f92da:	f43f af41 	beq.w	23f9160 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 23f92de:	f1bb 0f04 	cmp.w	fp, #4
 23f92e2:	f47f af3d 	bne.w	23f9160 <_ZN4MQTT4loopEv+0x4e>
 23f92e6:	f011 0f06 	tst.w	r1, #6
 23f92ea:	f47f af39 	bne.w	23f9160 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
 23f92ee:	7899      	ldrb	r1, [r3, #2]
 23f92f0:	78d8      	ldrb	r0, [r3, #3]
 23f92f2:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
 23f92f6:	b280      	uxth	r0, r0
 23f92f8:	4790      	blx	r2
 23f92fa:	e731      	b.n	23f9160 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
 23f92fc:	2a60      	cmp	r2, #96	; 0x60
 23f92fe:	d108      	bne.n	23f9312 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
 23f9300:	789a      	ldrb	r2, [r3, #2]
 23f9302:	78d9      	ldrb	r1, [r3, #3]
                this->publishComplete(msgId);
 23f9304:	4620      	mov	r0, r4
                msgId = (buffer[2] << 8) + buffer[3];
 23f9306:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
 23f930a:	b289      	uxth	r1, r1
 23f930c:	f7ff fedd 	bl	23f90ca <_ZN4MQTT15publishCompleteEt>
 23f9310:	e726      	b.n	23f9160 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
 23f9312:	2a70      	cmp	r2, #112	; 0x70
 23f9314:	d0df      	beq.n	23f92d6 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
 23f9316:	2a90      	cmp	r2, #144	; 0x90
 23f9318:	f43f af22 	beq.w	23f9160 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
 23f931c:	2ac0      	cmp	r2, #192	; 0xc0
 23f931e:	d10a      	bne.n	23f9336 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
 23f9320:	22d0      	movs	r2, #208	; 0xd0
 23f9322:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 23f9324:	2200      	movs	r2, #0
 23f9326:	69e3      	ldr	r3, [r4, #28]
                    _client.write(buffer,2);
 23f9328:	4620      	mov	r0, r4
                    buffer[1] = 0;
 23f932a:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 23f932c:	69e1      	ldr	r1, [r4, #28]
 23f932e:	2202      	movs	r2, #2
 23f9330:	f002 fdd3 	bl	23fbeda <_ZN9TCPClient5writeEPKhj>
 23f9334:	e714      	b.n	23f9160 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
 23f9336:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
 23f9338:	bf04      	itt	eq
 23f933a:	2300      	moveq	r3, #0
 23f933c:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
 23f9340:	e70e      	b.n	23f9160 <_ZN4MQTT4loopEv+0x4e>

023f9342 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 23f9342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f9344:	4604      	mov	r4, r0
 23f9346:	460f      	mov	r7, r1
 23f9348:	4616      	mov	r6, r2
    if (isConnected()) {
 23f934a:	f7ff fd2f 	bl	23f8dac <_ZN4MQTT11isConnectedEv>
 23f934e:	4605      	mov	r5, r0
 23f9350:	b310      	cbz	r0, 23f9398 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
 23f9352:	4621      	mov	r1, r4
 23f9354:	a801      	add	r0, sp, #4
 23f9356:	f7ff fc0b 	bl	23f8b70 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
 23f935a:	8c23      	ldrh	r3, [r4, #32]
 23f935c:	3301      	adds	r3, #1
 23f935e:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 23f9360:	b1eb      	cbz	r3, 23f939e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
 23f9362:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
 23f9364:	8c23      	ldrh	r3, [r4, #32]
 23f9366:	69e2      	ldr	r2, [r4, #28]
 23f9368:	0a1b      	lsrs	r3, r3, #8
 23f936a:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 23f936c:	69e3      	ldr	r3, [r4, #28]
 23f936e:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 23f9370:	4639      	mov	r1, r7
        buffer[length++] = (nextMsgId & 0xFF);
 23f9372:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 23f9374:	69e2      	ldr	r2, [r4, #28]
 23f9376:	2307      	movs	r3, #7
 23f9378:	4620      	mov	r0, r4
 23f937a:	f7ff fcfc 	bl	23f8d76 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 23f937e:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 23f9380:	2182      	movs	r1, #130	; 0x82
        buffer[length++] = qos;
 23f9382:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 23f9384:	3804      	subs	r0, #4
 23f9386:	b283      	uxth	r3, r0
 23f9388:	69e2      	ldr	r2, [r4, #28]
 23f938a:	4620      	mov	r0, r4
 23f938c:	f7ff fcb8 	bl	23f8d00 <_ZN4MQTT5writeEhPht>
 23f9390:	4605      	mov	r5, r0
        MutexLocker lock(this);
 23f9392:	a801      	add	r0, sp, #4
 23f9394:	f7ff fbf7 	bl	23f8b86 <_ZN4MQTT11MutexLockerD1Ev>
}
 23f9398:	4628      	mov	r0, r5
 23f939a:	b003      	add	sp, #12
 23f939c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
 23f939e:	2301      	movs	r3, #1
 23f93a0:	e7df      	b.n	23f9362 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

023f93a2 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
 23f93a2:	2200      	movs	r2, #0
 23f93a4:	f7ff bfcd 	b.w	23f9342 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

023f93a8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 23f93a8:	b509      	push	{r0, r3, lr}
 23f93aa:	4804      	ldr	r0, [pc, #16]	; (23f93bc <os_mutex_create+0x14>)
 23f93ac:	6800      	ldr	r0, [r0, #0]
 23f93ae:	4b04      	ldr	r3, [pc, #16]	; (23f93c0 <os_mutex_create+0x18>)
 23f93b0:	4403      	add	r3, r0
 23f93b2:	681b      	ldr	r3, [r3, #0]
 23f93b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f93b6:	9302      	str	r3, [sp, #8]
 23f93b8:	bd09      	pop	{r0, r3, pc}
 23f93ba:	0000      	.short	0x0000
 23f93bc:	1007aac8 	.word	0x1007aac8
 23f93c0:	00000030 	.word	0x00000030

023f93c4 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 23f93c4:	b509      	push	{r0, r3, lr}
 23f93c6:	4804      	ldr	r0, [pc, #16]	; (23f93d8 <os_mutex_lock+0x14>)
 23f93c8:	6800      	ldr	r0, [r0, #0]
 23f93ca:	4b04      	ldr	r3, [pc, #16]	; (23f93dc <os_mutex_lock+0x18>)
 23f93cc:	4403      	add	r3, r0
 23f93ce:	681b      	ldr	r3, [r3, #0]
 23f93d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23f93d2:	9302      	str	r3, [sp, #8]
 23f93d4:	bd09      	pop	{r0, r3, pc}
 23f93d6:	0000      	.short	0x0000
 23f93d8:	1007aac8 	.word	0x1007aac8
 23f93dc:	00000030 	.word	0x00000030

023f93e0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 23f93e0:	b509      	push	{r0, r3, lr}
 23f93e2:	4804      	ldr	r0, [pc, #16]	; (23f93f4 <os_mutex_unlock+0x14>)
 23f93e4:	6800      	ldr	r0, [r0, #0]
 23f93e6:	4b04      	ldr	r3, [pc, #16]	; (23f93f8 <os_mutex_unlock+0x18>)
 23f93e8:	4403      	add	r3, r0
 23f93ea:	681b      	ldr	r3, [r3, #0]
 23f93ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f93ee:	9302      	str	r3, [sp, #8]
 23f93f0:	bd09      	pop	{r0, r3, pc}
 23f93f2:	0000      	.short	0x0000
 23f93f4:	1007aac8 	.word	0x1007aac8
 23f93f8:	00000030 	.word	0x00000030

023f93fc <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23f93fc:	b509      	push	{r0, r3, lr}
 23f93fe:	4804      	ldr	r0, [pc, #16]	; (23f9410 <os_mutex_recursive_create+0x14>)
 23f9400:	6800      	ldr	r0, [r0, #0]
 23f9402:	4b04      	ldr	r3, [pc, #16]	; (23f9414 <os_mutex_recursive_create+0x18>)
 23f9404:	4403      	add	r3, r0
 23f9406:	681b      	ldr	r3, [r3, #0]
 23f9408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f940a:	9302      	str	r3, [sp, #8]
 23f940c:	bd09      	pop	{r0, r3, pc}
 23f940e:	0000      	.short	0x0000
 23f9410:	1007aac8 	.word	0x1007aac8
 23f9414:	00000030 	.word	0x00000030

023f9418 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23f9418:	b509      	push	{r0, r3, lr}
 23f941a:	4804      	ldr	r0, [pc, #16]	; (23f942c <os_mutex_recursive_destroy+0x14>)
 23f941c:	6800      	ldr	r0, [r0, #0]
 23f941e:	4b04      	ldr	r3, [pc, #16]	; (23f9430 <os_mutex_recursive_destroy+0x18>)
 23f9420:	4403      	add	r3, r0
 23f9422:	681b      	ldr	r3, [r3, #0]
 23f9424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f9426:	9302      	str	r3, [sp, #8]
 23f9428:	bd09      	pop	{r0, r3, pc}
 23f942a:	0000      	.short	0x0000
 23f942c:	1007aac8 	.word	0x1007aac8
 23f9430:	00000030 	.word	0x00000030

023f9434 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23f9434:	b509      	push	{r0, r3, lr}
 23f9436:	4804      	ldr	r0, [pc, #16]	; (23f9448 <os_mutex_recursive_lock+0x14>)
 23f9438:	6800      	ldr	r0, [r0, #0]
 23f943a:	4b04      	ldr	r3, [pc, #16]	; (23f944c <os_mutex_recursive_lock+0x18>)
 23f943c:	4403      	add	r3, r0
 23f943e:	681b      	ldr	r3, [r3, #0]
 23f9440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f9442:	9302      	str	r3, [sp, #8]
 23f9444:	bd09      	pop	{r0, r3, pc}
 23f9446:	0000      	.short	0x0000
 23f9448:	1007aac8 	.word	0x1007aac8
 23f944c:	00000030 	.word	0x00000030

023f9450 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23f9450:	b509      	push	{r0, r3, lr}
 23f9452:	4804      	ldr	r0, [pc, #16]	; (23f9464 <os_mutex_recursive_unlock+0x14>)
 23f9454:	6800      	ldr	r0, [r0, #0]
 23f9456:	4b04      	ldr	r3, [pc, #16]	; (23f9468 <os_mutex_recursive_unlock+0x18>)
 23f9458:	4403      	add	r3, r0
 23f945a:	681b      	ldr	r3, [r3, #0]
 23f945c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f945e:	9302      	str	r3, [sp, #8]
 23f9460:	bd09      	pop	{r0, r3, pc}
 23f9462:	0000      	.short	0x0000
 23f9464:	1007aac8 	.word	0x1007aac8
 23f9468:	00000030 	.word	0x00000030

023f946c <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, hal_watchdog_reset_flagged_deprecated, bool(void))
DYNALIB_FN(17, hal_core, hal_watchdog_refresh_deprecated, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
 23f946c:	b509      	push	{r0, r3, lr}
 23f946e:	4804      	ldr	r0, [pc, #16]	; (23f9480 <HAL_Core_Runtime_Info+0x14>)
 23f9470:	6800      	ldr	r0, [r0, #0]
 23f9472:	4b04      	ldr	r3, [pc, #16]	; (23f9484 <HAL_Core_Runtime_Info+0x18>)
 23f9474:	4403      	add	r3, r0
 23f9476:	681b      	ldr	r3, [r3, #0]
 23f9478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f947a:	9302      	str	r3, [sp, #8]
 23f947c:	bd09      	pop	{r0, r3, pc}
 23f947e:	0000      	.short	0x0000
 23f9480:	1007aac8 	.word	0x1007aac8
 23f9484:	0000001c 	.word	0x0000001c

023f9488 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23f9488:	b509      	push	{r0, r3, lr}
 23f948a:	4804      	ldr	r0, [pc, #16]	; (23f949c <HAL_RNG_GetRandomNumber+0x14>)
 23f948c:	6800      	ldr	r0, [r0, #0]
 23f948e:	4b04      	ldr	r3, [pc, #16]	; (23f94a0 <HAL_RNG_GetRandomNumber+0x18>)
 23f9490:	4403      	add	r3, r0
 23f9492:	681b      	ldr	r3, [r3, #0]
 23f9494:	685b      	ldr	r3, [r3, #4]
 23f9496:	9302      	str	r3, [sp, #8]
 23f9498:	bd09      	pop	{r0, r3, pc}
 23f949a:	0000      	.short	0x0000
 23f949c:	1007aac8 	.word	0x1007aac8
 23f94a0:	00000000 	.word	0x00000000

023f94a4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23f94a4:	b509      	push	{r0, r3, lr}
 23f94a6:	4804      	ldr	r0, [pc, #16]	; (23f94b8 <HAL_Delay_Microseconds+0x14>)
 23f94a8:	6800      	ldr	r0, [r0, #0]
 23f94aa:	4b04      	ldr	r3, [pc, #16]	; (23f94bc <HAL_Delay_Microseconds+0x18>)
 23f94ac:	4403      	add	r3, r0
 23f94ae:	681b      	ldr	r3, [r3, #0]
 23f94b0:	68db      	ldr	r3, [r3, #12]
 23f94b2:	9302      	str	r3, [sp, #8]
 23f94b4:	bd09      	pop	{r0, r3, pc}
 23f94b6:	0000      	.short	0x0000
 23f94b8:	1007aac8 	.word	0x1007aac8
 23f94bc:	00000000 	.word	0x00000000

023f94c0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23f94c0:	b509      	push	{r0, r3, lr}
 23f94c2:	4804      	ldr	r0, [pc, #16]	; (23f94d4 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23f94c4:	6800      	ldr	r0, [r0, #0]
 23f94c6:	4b04      	ldr	r3, [pc, #16]	; (23f94d8 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23f94c8:	4403      	add	r3, r0
 23f94ca:	681b      	ldr	r3, [r3, #0]
 23f94cc:	695b      	ldr	r3, [r3, #20]
 23f94ce:	9302      	str	r3, [sp, #8]
 23f94d0:	bd09      	pop	{r0, r3, pc}
 23f94d2:	0000      	.short	0x0000
 23f94d4:	1007aac8 	.word	0x1007aac8
 23f94d8:	00000000 	.word	0x00000000

023f94dc <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 23f94dc:	b509      	push	{r0, r3, lr}
 23f94de:	4804      	ldr	r0, [pc, #16]	; (23f94f0 <HAL_EEPROM_Init+0x14>)
 23f94e0:	6800      	ldr	r0, [r0, #0]
 23f94e2:	4b04      	ldr	r3, [pc, #16]	; (23f94f4 <HAL_EEPROM_Init+0x18>)
 23f94e4:	4403      	add	r3, r0
 23f94e6:	681b      	ldr	r3, [r3, #0]
 23f94e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f94ea:	9302      	str	r3, [sp, #8]
 23f94ec:	bd09      	pop	{r0, r3, pc}
 23f94ee:	0000      	.short	0x0000
 23f94f0:	1007aac8 	.word	0x1007aac8
 23f94f4:	00000000 	.word	0x00000000

023f94f8 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 23f94f8:	b509      	push	{r0, r3, lr}
 23f94fa:	4804      	ldr	r0, [pc, #16]	; (23f950c <HAL_EEPROM_Get+0x14>)
 23f94fc:	6800      	ldr	r0, [r0, #0]
 23f94fe:	4b04      	ldr	r3, [pc, #16]	; (23f9510 <HAL_EEPROM_Get+0x18>)
 23f9500:	4403      	add	r3, r0
 23f9502:	681b      	ldr	r3, [r3, #0]
 23f9504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f9506:	9302      	str	r3, [sp, #8]
 23f9508:	bd09      	pop	{r0, r3, pc}
 23f950a:	0000      	.short	0x0000
 23f950c:	1007aac8 	.word	0x1007aac8
 23f9510:	00000000 	.word	0x00000000

023f9514 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 23f9514:	b509      	push	{r0, r3, lr}
 23f9516:	4804      	ldr	r0, [pc, #16]	; (23f9528 <HAL_EEPROM_Put+0x14>)
 23f9518:	6800      	ldr	r0, [r0, #0]
 23f951a:	4b04      	ldr	r3, [pc, #16]	; (23f952c <HAL_EEPROM_Put+0x18>)
 23f951c:	4403      	add	r3, r0
 23f951e:	681b      	ldr	r3, [r3, #0]
 23f9520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f9522:	9302      	str	r3, [sp, #8]
 23f9524:	bd09      	pop	{r0, r3, pc}
 23f9526:	0000      	.short	0x0000
 23f9528:	1007aac8 	.word	0x1007aac8
 23f952c:	00000000 	.word	0x00000000

023f9530 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 23f9530:	b509      	push	{r0, r3, lr}
 23f9532:	4804      	ldr	r0, [pc, #16]	; (23f9544 <hal_rtc_time_is_valid+0x14>)
 23f9534:	6800      	ldr	r0, [r0, #0]
 23f9536:	4b04      	ldr	r3, [pc, #16]	; (23f9548 <hal_rtc_time_is_valid+0x18>)
 23f9538:	4403      	add	r3, r0
 23f953a:	681b      	ldr	r3, [r3, #0]
 23f953c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f953e:	9302      	str	r3, [sp, #8]
 23f9540:	bd09      	pop	{r0, r3, pc}
 23f9542:	0000      	.short	0x0000
 23f9544:	1007aac8 	.word	0x1007aac8
 23f9548:	00000000 	.word	0x00000000

023f954c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 23f954c:	b509      	push	{r0, r3, lr}
 23f954e:	4804      	ldr	r0, [pc, #16]	; (23f9560 <hal_rtc_get_time+0x14>)
 23f9550:	6800      	ldr	r0, [r0, #0]
 23f9552:	4b04      	ldr	r3, [pc, #16]	; (23f9564 <hal_rtc_get_time+0x18>)
 23f9554:	4403      	add	r3, r0
 23f9556:	681b      	ldr	r3, [r3, #0]
 23f9558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 23f955a:	9302      	str	r3, [sp, #8]
 23f955c:	bd09      	pop	{r0, r3, pc}
 23f955e:	0000      	.short	0x0000
 23f9560:	1007aac8 	.word	0x1007aac8
 23f9564:	00000000 	.word	0x00000000

023f9568 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23f9568:	b509      	push	{r0, r3, lr}
 23f956a:	4804      	ldr	r0, [pc, #16]	; (23f957c <hal_gpio_mode+0x14>)
 23f956c:	6800      	ldr	r0, [r0, #0]
 23f956e:	4b04      	ldr	r3, [pc, #16]	; (23f9580 <hal_gpio_mode+0x18>)
 23f9570:	4403      	add	r3, r0
 23f9572:	681b      	ldr	r3, [r3, #0]
 23f9574:	689b      	ldr	r3, [r3, #8]
 23f9576:	9302      	str	r3, [sp, #8]
 23f9578:	bd09      	pop	{r0, r3, pc}
 23f957a:	0000      	.short	0x0000
 23f957c:	1007aac8 	.word	0x1007aac8
 23f9580:	00000014 	.word	0x00000014

023f9584 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23f9584:	b509      	push	{r0, r3, lr}
 23f9586:	4804      	ldr	r0, [pc, #16]	; (23f9598 <hal_gpio_get_mode+0x14>)
 23f9588:	6800      	ldr	r0, [r0, #0]
 23f958a:	4b04      	ldr	r3, [pc, #16]	; (23f959c <hal_gpio_get_mode+0x18>)
 23f958c:	4403      	add	r3, r0
 23f958e:	681b      	ldr	r3, [r3, #0]
 23f9590:	68db      	ldr	r3, [r3, #12]
 23f9592:	9302      	str	r3, [sp, #8]
 23f9594:	bd09      	pop	{r0, r3, pc}
 23f9596:	0000      	.short	0x0000
 23f9598:	1007aac8 	.word	0x1007aac8
 23f959c:	00000014 	.word	0x00000014

023f95a0 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23f95a0:	b509      	push	{r0, r3, lr}
 23f95a2:	4804      	ldr	r0, [pc, #16]	; (23f95b4 <hal_gpio_write+0x14>)
 23f95a4:	6800      	ldr	r0, [r0, #0]
 23f95a6:	4b04      	ldr	r3, [pc, #16]	; (23f95b8 <hal_gpio_write+0x18>)
 23f95a8:	4403      	add	r3, r0
 23f95aa:	681b      	ldr	r3, [r3, #0]
 23f95ac:	691b      	ldr	r3, [r3, #16]
 23f95ae:	9302      	str	r3, [sp, #8]
 23f95b0:	bd09      	pop	{r0, r3, pc}
 23f95b2:	0000      	.short	0x0000
 23f95b4:	1007aac8 	.word	0x1007aac8
 23f95b8:	00000014 	.word	0x00000014

023f95bc <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23f95bc:	b509      	push	{r0, r3, lr}
 23f95be:	4804      	ldr	r0, [pc, #16]	; (23f95d0 <hal_i2c_write+0x14>)
 23f95c0:	6800      	ldr	r0, [r0, #0]
 23f95c2:	4b04      	ldr	r3, [pc, #16]	; (23f95d4 <hal_i2c_write+0x18>)
 23f95c4:	4403      	add	r3, r0
 23f95c6:	681b      	ldr	r3, [r3, #0]
 23f95c8:	6a1b      	ldr	r3, [r3, #32]
 23f95ca:	9302      	str	r3, [sp, #8]
 23f95cc:	bd09      	pop	{r0, r3, pc}
 23f95ce:	0000      	.short	0x0000
 23f95d0:	1007aac8 	.word	0x1007aac8
 23f95d4:	00000010 	.word	0x00000010

023f95d8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23f95d8:	b509      	push	{r0, r3, lr}
 23f95da:	4804      	ldr	r0, [pc, #16]	; (23f95ec <hal_i2c_available+0x14>)
 23f95dc:	6800      	ldr	r0, [r0, #0]
 23f95de:	4b04      	ldr	r3, [pc, #16]	; (23f95f0 <hal_i2c_available+0x18>)
 23f95e0:	4403      	add	r3, r0
 23f95e2:	681b      	ldr	r3, [r3, #0]
 23f95e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f95e6:	9302      	str	r3, [sp, #8]
 23f95e8:	bd09      	pop	{r0, r3, pc}
 23f95ea:	0000      	.short	0x0000
 23f95ec:	1007aac8 	.word	0x1007aac8
 23f95f0:	00000010 	.word	0x00000010

023f95f4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23f95f4:	b509      	push	{r0, r3, lr}
 23f95f6:	4804      	ldr	r0, [pc, #16]	; (23f9608 <hal_i2c_read+0x14>)
 23f95f8:	6800      	ldr	r0, [r0, #0]
 23f95fa:	4b04      	ldr	r3, [pc, #16]	; (23f960c <hal_i2c_read+0x18>)
 23f95fc:	4403      	add	r3, r0
 23f95fe:	681b      	ldr	r3, [r3, #0]
 23f9600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f9602:	9302      	str	r3, [sp, #8]
 23f9604:	bd09      	pop	{r0, r3, pc}
 23f9606:	0000      	.short	0x0000
 23f9608:	1007aac8 	.word	0x1007aac8
 23f960c:	00000010 	.word	0x00000010

023f9610 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23f9610:	b509      	push	{r0, r3, lr}
 23f9612:	4804      	ldr	r0, [pc, #16]	; (23f9624 <hal_i2c_peek+0x14>)
 23f9614:	6800      	ldr	r0, [r0, #0]
 23f9616:	4b04      	ldr	r3, [pc, #16]	; (23f9628 <hal_i2c_peek+0x18>)
 23f9618:	4403      	add	r3, r0
 23f961a:	681b      	ldr	r3, [r3, #0]
 23f961c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f961e:	9302      	str	r3, [sp, #8]
 23f9620:	bd09      	pop	{r0, r3, pc}
 23f9622:	0000      	.short	0x0000
 23f9624:	1007aac8 	.word	0x1007aac8
 23f9628:	00000010 	.word	0x00000010

023f962c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23f962c:	b509      	push	{r0, r3, lr}
 23f962e:	4804      	ldr	r0, [pc, #16]	; (23f9640 <hal_i2c_flush+0x14>)
 23f9630:	6800      	ldr	r0, [r0, #0]
 23f9632:	4b04      	ldr	r3, [pc, #16]	; (23f9644 <hal_i2c_flush+0x18>)
 23f9634:	4403      	add	r3, r0
 23f9636:	681b      	ldr	r3, [r3, #0]
 23f9638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f963a:	9302      	str	r3, [sp, #8]
 23f963c:	bd09      	pop	{r0, r3, pc}
 23f963e:	0000      	.short	0x0000
 23f9640:	1007aac8 	.word	0x1007aac8
 23f9644:	00000010 	.word	0x00000010

023f9648 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23f9648:	b509      	push	{r0, r3, lr}
 23f964a:	4804      	ldr	r0, [pc, #16]	; (23f965c <hal_i2c_is_enabled+0x14>)
 23f964c:	6800      	ldr	r0, [r0, #0]
 23f964e:	4b04      	ldr	r3, [pc, #16]	; (23f9660 <hal_i2c_is_enabled+0x18>)
 23f9650:	4403      	add	r3, r0
 23f9652:	681b      	ldr	r3, [r3, #0]
 23f9654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f9656:	9302      	str	r3, [sp, #8]
 23f9658:	bd09      	pop	{r0, r3, pc}
 23f965a:	0000      	.short	0x0000
 23f965c:	1007aac8 	.word	0x1007aac8
 23f9660:	00000010 	.word	0x00000010

023f9664 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23f9664:	b509      	push	{r0, r3, lr}
 23f9666:	4804      	ldr	r0, [pc, #16]	; (23f9678 <hal_i2c_init+0x14>)
 23f9668:	6800      	ldr	r0, [r0, #0]
 23f966a:	4b04      	ldr	r3, [pc, #16]	; (23f967c <hal_i2c_init+0x18>)
 23f966c:	4403      	add	r3, r0
 23f966e:	681b      	ldr	r3, [r3, #0]
 23f9670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f9672:	9302      	str	r3, [sp, #8]
 23f9674:	bd09      	pop	{r0, r3, pc}
 23f9676:	0000      	.short	0x0000
 23f9678:	1007aac8 	.word	0x1007aac8
 23f967c:	00000010 	.word	0x00000010

023f9680 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
 23f9680:	b509      	push	{r0, r3, lr}
 23f9682:	4804      	ldr	r0, [pc, #16]	; (23f9694 <if_index_to_name+0x14>)
 23f9684:	6800      	ldr	r0, [r0, #0]
 23f9686:	4b04      	ldr	r3, [pc, #16]	; (23f9698 <if_index_to_name+0x18>)
 23f9688:	4403      	add	r3, r0
 23f968a:	681b      	ldr	r3, [r3, #0]
 23f968c:	695b      	ldr	r3, [r3, #20]
 23f968e:	9302      	str	r3, [sp, #8]
 23f9690:	bd09      	pop	{r0, r3, pc}
 23f9692:	0000      	.short	0x0000
 23f9694:	1007aac8 	.word	0x1007aac8
 23f9698:	00000054 	.word	0x00000054

023f969c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23f969c:	b509      	push	{r0, r3, lr}
 23f969e:	4804      	ldr	r0, [pc, #16]	; (23f96b0 <inet_inet_ntop+0x14>)
 23f96a0:	6800      	ldr	r0, [r0, #0]
 23f96a2:	4b04      	ldr	r3, [pc, #16]	; (23f96b4 <inet_inet_ntop+0x18>)
 23f96a4:	4403      	add	r3, r0
 23f96a6:	681b      	ldr	r3, [r3, #0]
 23f96a8:	695b      	ldr	r3, [r3, #20]
 23f96aa:	9302      	str	r3, [sp, #8]
 23f96ac:	bd09      	pop	{r0, r3, pc}
 23f96ae:	0000      	.short	0x0000
 23f96b0:	1007aac8 	.word	0x1007aac8
 23f96b4:	0000004c 	.word	0x0000004c

023f96b8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
 23f96b8:	b509      	push	{r0, r3, lr}
 23f96ba:	4804      	ldr	r0, [pc, #16]	; (23f96cc <inet_htonl+0x14>)
 23f96bc:	6800      	ldr	r0, [r0, #0]
 23f96be:	4b04      	ldr	r3, [pc, #16]	; (23f96d0 <inet_htonl+0x18>)
 23f96c0:	4403      	add	r3, r0
 23f96c2:	681b      	ldr	r3, [r3, #0]
 23f96c4:	6a1b      	ldr	r3, [r3, #32]
 23f96c6:	9302      	str	r3, [sp, #8]
 23f96c8:	bd09      	pop	{r0, r3, pc}
 23f96ca:	0000      	.short	0x0000
 23f96cc:	1007aac8 	.word	0x1007aac8
 23f96d0:	0000004c 	.word	0x0000004c

023f96d4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
 23f96d4:	b509      	push	{r0, r3, lr}
 23f96d6:	4804      	ldr	r0, [pc, #16]	; (23f96e8 <inet_htons+0x14>)
 23f96d8:	6800      	ldr	r0, [r0, #0]
 23f96da:	4b04      	ldr	r3, [pc, #16]	; (23f96ec <inet_htons+0x18>)
 23f96dc:	4403      	add	r3, r0
 23f96de:	681b      	ldr	r3, [r3, #0]
 23f96e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f96e2:	9302      	str	r3, [sp, #8]
 23f96e4:	bd09      	pop	{r0, r3, pc}
 23f96e6:	0000      	.short	0x0000
 23f96e8:	1007aac8 	.word	0x1007aac8
 23f96ec:	0000004c 	.word	0x0000004c

023f96f0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23f96f0:	b509      	push	{r0, r3, lr}
 23f96f2:	4804      	ldr	r0, [pc, #16]	; (23f9704 <netdb_freeaddrinfo+0x14>)
 23f96f4:	6800      	ldr	r0, [r0, #0]
 23f96f6:	4b04      	ldr	r3, [pc, #16]	; (23f9708 <netdb_freeaddrinfo+0x18>)
 23f96f8:	4403      	add	r3, r0
 23f96fa:	681b      	ldr	r3, [r3, #0]
 23f96fc:	689b      	ldr	r3, [r3, #8]
 23f96fe:	9302      	str	r3, [sp, #8]
 23f9700:	bd09      	pop	{r0, r3, pc}
 23f9702:	0000      	.short	0x0000
 23f9704:	1007aac8 	.word	0x1007aac8
 23f9708:	00000050 	.word	0x00000050

023f970c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23f970c:	b509      	push	{r0, r3, lr}
 23f970e:	4804      	ldr	r0, [pc, #16]	; (23f9720 <netdb_getaddrinfo+0x14>)
 23f9710:	6800      	ldr	r0, [r0, #0]
 23f9712:	4b04      	ldr	r3, [pc, #16]	; (23f9724 <netdb_getaddrinfo+0x18>)
 23f9714:	4403      	add	r3, r0
 23f9716:	681b      	ldr	r3, [r3, #0]
 23f9718:	68db      	ldr	r3, [r3, #12]
 23f971a:	9302      	str	r3, [sp, #8]
 23f971c:	bd09      	pop	{r0, r3, pc}
 23f971e:	0000      	.short	0x0000
 23f9720:	1007aac8 	.word	0x1007aac8
 23f9724:	00000050 	.word	0x00000050

023f9728 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
 23f9728:	b509      	push	{r0, r3, lr}
 23f972a:	4804      	ldr	r0, [pc, #16]	; (23f973c <sock_setsockopt+0x14>)
 23f972c:	6800      	ldr	r0, [r0, #0]
 23f972e:	4b04      	ldr	r3, [pc, #16]	; (23f9740 <sock_setsockopt+0x18>)
 23f9730:	4403      	add	r3, r0
 23f9732:	681b      	ldr	r3, [r3, #0]
 23f9734:	699b      	ldr	r3, [r3, #24]
 23f9736:	9302      	str	r3, [sp, #8]
 23f9738:	bd09      	pop	{r0, r3, pc}
 23f973a:	0000      	.short	0x0000
 23f973c:	1007aac8 	.word	0x1007aac8
 23f9740:	00000020 	.word	0x00000020

023f9744 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
 23f9744:	b509      	push	{r0, r3, lr}
 23f9746:	4804      	ldr	r0, [pc, #16]	; (23f9758 <sock_close+0x14>)
 23f9748:	6800      	ldr	r0, [r0, #0]
 23f974a:	4b04      	ldr	r3, [pc, #16]	; (23f975c <sock_close+0x18>)
 23f974c:	4403      	add	r3, r0
 23f974e:	681b      	ldr	r3, [r3, #0]
 23f9750:	69db      	ldr	r3, [r3, #28]
 23f9752:	9302      	str	r3, [sp, #8]
 23f9754:	bd09      	pop	{r0, r3, pc}
 23f9756:	0000      	.short	0x0000
 23f9758:	1007aac8 	.word	0x1007aac8
 23f975c:	00000020 	.word	0x00000020

023f9760 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
 23f9760:	b509      	push	{r0, r3, lr}
 23f9762:	4804      	ldr	r0, [pc, #16]	; (23f9774 <sock_connect+0x14>)
 23f9764:	6800      	ldr	r0, [r0, #0]
 23f9766:	4b04      	ldr	r3, [pc, #16]	; (23f9778 <sock_connect+0x18>)
 23f9768:	4403      	add	r3, r0
 23f976a:	681b      	ldr	r3, [r3, #0]
 23f976c:	6a1b      	ldr	r3, [r3, #32]
 23f976e:	9302      	str	r3, [sp, #8]
 23f9770:	bd09      	pop	{r0, r3, pc}
 23f9772:	0000      	.short	0x0000
 23f9774:	1007aac8 	.word	0x1007aac8
 23f9778:	00000020 	.word	0x00000020

023f977c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
 23f977c:	b509      	push	{r0, r3, lr}
 23f977e:	4804      	ldr	r0, [pc, #16]	; (23f9790 <sock_recv+0x14>)
 23f9780:	6800      	ldr	r0, [r0, #0]
 23f9782:	4b04      	ldr	r3, [pc, #16]	; (23f9794 <sock_recv+0x18>)
 23f9784:	4403      	add	r3, r0
 23f9786:	681b      	ldr	r3, [r3, #0]
 23f9788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f978a:	9302      	str	r3, [sp, #8]
 23f978c:	bd09      	pop	{r0, r3, pc}
 23f978e:	0000      	.short	0x0000
 23f9790:	1007aac8 	.word	0x1007aac8
 23f9794:	00000020 	.word	0x00000020

023f9798 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
 23f9798:	b509      	push	{r0, r3, lr}
 23f979a:	4804      	ldr	r0, [pc, #16]	; (23f97ac <sock_send+0x14>)
 23f979c:	6800      	ldr	r0, [r0, #0]
 23f979e:	4b04      	ldr	r3, [pc, #16]	; (23f97b0 <sock_send+0x18>)
 23f97a0:	4403      	add	r3, r0
 23f97a2:	681b      	ldr	r3, [r3, #0]
 23f97a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f97a6:	9302      	str	r3, [sp, #8]
 23f97a8:	bd09      	pop	{r0, r3, pc}
 23f97aa:	0000      	.short	0x0000
 23f97ac:	1007aac8 	.word	0x1007aac8
 23f97b0:	00000020 	.word	0x00000020

023f97b4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
 23f97b4:	b509      	push	{r0, r3, lr}
 23f97b6:	4804      	ldr	r0, [pc, #16]	; (23f97c8 <sock_socket+0x14>)
 23f97b8:	6800      	ldr	r0, [r0, #0]
 23f97ba:	4b04      	ldr	r3, [pc, #16]	; (23f97cc <sock_socket+0x18>)
 23f97bc:	4403      	add	r3, r0
 23f97be:	681b      	ldr	r3, [r3, #0]
 23f97c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23f97c2:	9302      	str	r3, [sp, #8]
 23f97c4:	bd09      	pop	{r0, r3, pc}
 23f97c6:	0000      	.short	0x0000
 23f97c8:	1007aac8 	.word	0x1007aac8
 23f97cc:	00000020 	.word	0x00000020

023f97d0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23f97d0:	b509      	push	{r0, r3, lr}
 23f97d2:	4804      	ldr	r0, [pc, #16]	; (23f97e4 <hal_spi_init+0x14>)
 23f97d4:	6800      	ldr	r0, [r0, #0]
 23f97d6:	4b04      	ldr	r3, [pc, #16]	; (23f97e8 <hal_spi_init+0x18>)
 23f97d8:	4403      	add	r3, r0
 23f97da:	681b      	ldr	r3, [r3, #0]
 23f97dc:	69db      	ldr	r3, [r3, #28]
 23f97de:	9302      	str	r3, [sp, #8]
 23f97e0:	bd09      	pop	{r0, r3, pc}
 23f97e2:	0000      	.short	0x0000
 23f97e4:	1007aac8 	.word	0x1007aac8
 23f97e8:	00000018 	.word	0x00000018

023f97ec <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23f97ec:	b509      	push	{r0, r3, lr}
 23f97ee:	4804      	ldr	r0, [pc, #16]	; (23f9800 <hal_spi_is_enabled+0x14>)
 23f97f0:	6800      	ldr	r0, [r0, #0]
 23f97f2:	4b04      	ldr	r3, [pc, #16]	; (23f9804 <hal_spi_is_enabled+0x18>)
 23f97f4:	4403      	add	r3, r0
 23f97f6:	681b      	ldr	r3, [r3, #0]
 23f97f8:	6a1b      	ldr	r3, [r3, #32]
 23f97fa:	9302      	str	r3, [sp, #8]
 23f97fc:	bd09      	pop	{r0, r3, pc}
 23f97fe:	0000      	.short	0x0000
 23f9800:	1007aac8 	.word	0x1007aac8
 23f9804:	00000018 	.word	0x00000018

023f9808 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23f9808:	b509      	push	{r0, r3, lr}
 23f980a:	4804      	ldr	r0, [pc, #16]	; (23f981c <hal_usart_end+0x14>)
 23f980c:	6800      	ldr	r0, [r0, #0]
 23f980e:	4b04      	ldr	r3, [pc, #16]	; (23f9820 <hal_usart_end+0x18>)
 23f9810:	4403      	add	r3, r0
 23f9812:	681b      	ldr	r3, [r3, #0]
 23f9814:	689b      	ldr	r3, [r3, #8]
 23f9816:	9302      	str	r3, [sp, #8]
 23f9818:	bd09      	pop	{r0, r3, pc}
 23f981a:	0000      	.short	0x0000
 23f981c:	1007aac8 	.word	0x1007aac8
 23f9820:	00000024 	.word	0x00000024

023f9824 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23f9824:	b509      	push	{r0, r3, lr}
 23f9826:	4804      	ldr	r0, [pc, #16]	; (23f9838 <hal_usart_write+0x14>)
 23f9828:	6800      	ldr	r0, [r0, #0]
 23f982a:	4b04      	ldr	r3, [pc, #16]	; (23f983c <hal_usart_write+0x18>)
 23f982c:	4403      	add	r3, r0
 23f982e:	681b      	ldr	r3, [r3, #0]
 23f9830:	68db      	ldr	r3, [r3, #12]
 23f9832:	9302      	str	r3, [sp, #8]
 23f9834:	bd09      	pop	{r0, r3, pc}
 23f9836:	0000      	.short	0x0000
 23f9838:	1007aac8 	.word	0x1007aac8
 23f983c:	00000024 	.word	0x00000024

023f9840 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23f9840:	b509      	push	{r0, r3, lr}
 23f9842:	4804      	ldr	r0, [pc, #16]	; (23f9854 <hal_usart_available+0x14>)
 23f9844:	6800      	ldr	r0, [r0, #0]
 23f9846:	4b04      	ldr	r3, [pc, #16]	; (23f9858 <hal_usart_available+0x18>)
 23f9848:	4403      	add	r3, r0
 23f984a:	681b      	ldr	r3, [r3, #0]
 23f984c:	691b      	ldr	r3, [r3, #16]
 23f984e:	9302      	str	r3, [sp, #8]
 23f9850:	bd09      	pop	{r0, r3, pc}
 23f9852:	0000      	.short	0x0000
 23f9854:	1007aac8 	.word	0x1007aac8
 23f9858:	00000024 	.word	0x00000024

023f985c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23f985c:	b509      	push	{r0, r3, lr}
 23f985e:	4804      	ldr	r0, [pc, #16]	; (23f9870 <hal_usart_read+0x14>)
 23f9860:	6800      	ldr	r0, [r0, #0]
 23f9862:	4b04      	ldr	r3, [pc, #16]	; (23f9874 <hal_usart_read+0x18>)
 23f9864:	4403      	add	r3, r0
 23f9866:	681b      	ldr	r3, [r3, #0]
 23f9868:	695b      	ldr	r3, [r3, #20]
 23f986a:	9302      	str	r3, [sp, #8]
 23f986c:	bd09      	pop	{r0, r3, pc}
 23f986e:	0000      	.short	0x0000
 23f9870:	1007aac8 	.word	0x1007aac8
 23f9874:	00000024 	.word	0x00000024

023f9878 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23f9878:	b509      	push	{r0, r3, lr}
 23f987a:	4804      	ldr	r0, [pc, #16]	; (23f988c <hal_usart_peek+0x14>)
 23f987c:	6800      	ldr	r0, [r0, #0]
 23f987e:	4b04      	ldr	r3, [pc, #16]	; (23f9890 <hal_usart_peek+0x18>)
 23f9880:	4403      	add	r3, r0
 23f9882:	681b      	ldr	r3, [r3, #0]
 23f9884:	699b      	ldr	r3, [r3, #24]
 23f9886:	9302      	str	r3, [sp, #8]
 23f9888:	bd09      	pop	{r0, r3, pc}
 23f988a:	0000      	.short	0x0000
 23f988c:	1007aac8 	.word	0x1007aac8
 23f9890:	00000024 	.word	0x00000024

023f9894 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23f9894:	b509      	push	{r0, r3, lr}
 23f9896:	4804      	ldr	r0, [pc, #16]	; (23f98a8 <hal_usart_flush+0x14>)
 23f9898:	6800      	ldr	r0, [r0, #0]
 23f989a:	4b04      	ldr	r3, [pc, #16]	; (23f98ac <hal_usart_flush+0x18>)
 23f989c:	4403      	add	r3, r0
 23f989e:	681b      	ldr	r3, [r3, #0]
 23f98a0:	69db      	ldr	r3, [r3, #28]
 23f98a2:	9302      	str	r3, [sp, #8]
 23f98a4:	bd09      	pop	{r0, r3, pc}
 23f98a6:	0000      	.short	0x0000
 23f98a8:	1007aac8 	.word	0x1007aac8
 23f98ac:	00000024 	.word	0x00000024

023f98b0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23f98b0:	b509      	push	{r0, r3, lr}
 23f98b2:	4804      	ldr	r0, [pc, #16]	; (23f98c4 <hal_usart_is_enabled+0x14>)
 23f98b4:	6800      	ldr	r0, [r0, #0]
 23f98b6:	4b04      	ldr	r3, [pc, #16]	; (23f98c8 <hal_usart_is_enabled+0x18>)
 23f98b8:	4403      	add	r3, r0
 23f98ba:	681b      	ldr	r3, [r3, #0]
 23f98bc:	6a1b      	ldr	r3, [r3, #32]
 23f98be:	9302      	str	r3, [sp, #8]
 23f98c0:	bd09      	pop	{r0, r3, pc}
 23f98c2:	0000      	.short	0x0000
 23f98c4:	1007aac8 	.word	0x1007aac8
 23f98c8:	00000024 	.word	0x00000024

023f98cc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23f98cc:	b509      	push	{r0, r3, lr}
 23f98ce:	4804      	ldr	r0, [pc, #16]	; (23f98e0 <hal_usart_available_data_for_write+0x14>)
 23f98d0:	6800      	ldr	r0, [r0, #0]
 23f98d2:	4b04      	ldr	r3, [pc, #16]	; (23f98e4 <hal_usart_available_data_for_write+0x18>)
 23f98d4:	4403      	add	r3, r0
 23f98d6:	681b      	ldr	r3, [r3, #0]
 23f98d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f98da:	9302      	str	r3, [sp, #8]
 23f98dc:	bd09      	pop	{r0, r3, pc}
 23f98de:	0000      	.short	0x0000
 23f98e0:	1007aac8 	.word	0x1007aac8
 23f98e4:	00000024 	.word	0x00000024

023f98e8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23f98e8:	b509      	push	{r0, r3, lr}
 23f98ea:	4804      	ldr	r0, [pc, #16]	; (23f98fc <hal_usart_begin_config+0x14>)
 23f98ec:	6800      	ldr	r0, [r0, #0]
 23f98ee:	4b04      	ldr	r3, [pc, #16]	; (23f9900 <hal_usart_begin_config+0x18>)
 23f98f0:	4403      	add	r3, r0
 23f98f2:	681b      	ldr	r3, [r3, #0]
 23f98f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f98f6:	9302      	str	r3, [sp, #8]
 23f98f8:	bd09      	pop	{r0, r3, pc}
 23f98fa:	0000      	.short	0x0000
 23f98fc:	1007aac8 	.word	0x1007aac8
 23f9900:	00000024 	.word	0x00000024

023f9904 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23f9904:	b509      	push	{r0, r3, lr}
 23f9906:	4804      	ldr	r0, [pc, #16]	; (23f9918 <hal_usart_init_ex+0x14>)
 23f9908:	6800      	ldr	r0, [r0, #0]
 23f990a:	4b04      	ldr	r3, [pc, #16]	; (23f991c <hal_usart_init_ex+0x18>)
 23f990c:	4403      	add	r3, r0
 23f990e:	681b      	ldr	r3, [r3, #0]
 23f9910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f9912:	9302      	str	r3, [sp, #8]
 23f9914:	bd09      	pop	{r0, r3, pc}
 23f9916:	0000      	.short	0x0000
 23f9918:	1007aac8 	.word	0x1007aac8
 23f991c:	00000024 	.word	0x00000024

023f9920 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23f9920:	b509      	push	{r0, r3, lr}
 23f9922:	4804      	ldr	r0, [pc, #16]	; (23f9934 <HAL_USB_USART_Init+0x14>)
 23f9924:	6800      	ldr	r0, [r0, #0]
 23f9926:	4b04      	ldr	r3, [pc, #16]	; (23f9938 <HAL_USB_USART_Init+0x18>)
 23f9928:	4403      	add	r3, r0
 23f992a:	681b      	ldr	r3, [r3, #0]
 23f992c:	681b      	ldr	r3, [r3, #0]
 23f992e:	9302      	str	r3, [sp, #8]
 23f9930:	bd09      	pop	{r0, r3, pc}
 23f9932:	0000      	.short	0x0000
 23f9934:	1007aac8 	.word	0x1007aac8
 23f9938:	00000034 	.word	0x00000034

023f993c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23f993c:	b509      	push	{r0, r3, lr}
 23f993e:	4804      	ldr	r0, [pc, #16]	; (23f9950 <HAL_USB_USART_Begin+0x14>)
 23f9940:	6800      	ldr	r0, [r0, #0]
 23f9942:	4b04      	ldr	r3, [pc, #16]	; (23f9954 <HAL_USB_USART_Begin+0x18>)
 23f9944:	4403      	add	r3, r0
 23f9946:	681b      	ldr	r3, [r3, #0]
 23f9948:	685b      	ldr	r3, [r3, #4]
 23f994a:	9302      	str	r3, [sp, #8]
 23f994c:	bd09      	pop	{r0, r3, pc}
 23f994e:	0000      	.short	0x0000
 23f9950:	1007aac8 	.word	0x1007aac8
 23f9954:	00000034 	.word	0x00000034

023f9958 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23f9958:	b509      	push	{r0, r3, lr}
 23f995a:	4804      	ldr	r0, [pc, #16]	; (23f996c <HAL_USB_USART_End+0x14>)
 23f995c:	6800      	ldr	r0, [r0, #0]
 23f995e:	4b04      	ldr	r3, [pc, #16]	; (23f9970 <HAL_USB_USART_End+0x18>)
 23f9960:	4403      	add	r3, r0
 23f9962:	681b      	ldr	r3, [r3, #0]
 23f9964:	689b      	ldr	r3, [r3, #8]
 23f9966:	9302      	str	r3, [sp, #8]
 23f9968:	bd09      	pop	{r0, r3, pc}
 23f996a:	0000      	.short	0x0000
 23f996c:	1007aac8 	.word	0x1007aac8
 23f9970:	00000034 	.word	0x00000034

023f9974 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23f9974:	b509      	push	{r0, r3, lr}
 23f9976:	4804      	ldr	r0, [pc, #16]	; (23f9988 <HAL_USB_USART_Available_Data+0x14>)
 23f9978:	6800      	ldr	r0, [r0, #0]
 23f997a:	4b04      	ldr	r3, [pc, #16]	; (23f998c <HAL_USB_USART_Available_Data+0x18>)
 23f997c:	4403      	add	r3, r0
 23f997e:	681b      	ldr	r3, [r3, #0]
 23f9980:	691b      	ldr	r3, [r3, #16]
 23f9982:	9302      	str	r3, [sp, #8]
 23f9984:	bd09      	pop	{r0, r3, pc}
 23f9986:	0000      	.short	0x0000
 23f9988:	1007aac8 	.word	0x1007aac8
 23f998c:	00000034 	.word	0x00000034

023f9990 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23f9990:	b509      	push	{r0, r3, lr}
 23f9992:	4804      	ldr	r0, [pc, #16]	; (23f99a4 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23f9994:	6800      	ldr	r0, [r0, #0]
 23f9996:	4b04      	ldr	r3, [pc, #16]	; (23f99a8 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23f9998:	4403      	add	r3, r0
 23f999a:	681b      	ldr	r3, [r3, #0]
 23f999c:	695b      	ldr	r3, [r3, #20]
 23f999e:	9302      	str	r3, [sp, #8]
 23f99a0:	bd09      	pop	{r0, r3, pc}
 23f99a2:	0000      	.short	0x0000
 23f99a4:	1007aac8 	.word	0x1007aac8
 23f99a8:	00000034 	.word	0x00000034

023f99ac <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f99ac:	b509      	push	{r0, r3, lr}
 23f99ae:	4804      	ldr	r0, [pc, #16]	; (23f99c0 <HAL_USB_USART_Receive_Data+0x14>)
 23f99b0:	6800      	ldr	r0, [r0, #0]
 23f99b2:	4b04      	ldr	r3, [pc, #16]	; (23f99c4 <HAL_USB_USART_Receive_Data+0x18>)
 23f99b4:	4403      	add	r3, r0
 23f99b6:	681b      	ldr	r3, [r3, #0]
 23f99b8:	699b      	ldr	r3, [r3, #24]
 23f99ba:	9302      	str	r3, [sp, #8]
 23f99bc:	bd09      	pop	{r0, r3, pc}
 23f99be:	0000      	.short	0x0000
 23f99c0:	1007aac8 	.word	0x1007aac8
 23f99c4:	00000034 	.word	0x00000034

023f99c8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f99c8:	b509      	push	{r0, r3, lr}
 23f99ca:	4804      	ldr	r0, [pc, #16]	; (23f99dc <HAL_USB_USART_Send_Data+0x14>)
 23f99cc:	6800      	ldr	r0, [r0, #0]
 23f99ce:	4b04      	ldr	r3, [pc, #16]	; (23f99e0 <HAL_USB_USART_Send_Data+0x18>)
 23f99d0:	4403      	add	r3, r0
 23f99d2:	681b      	ldr	r3, [r3, #0]
 23f99d4:	69db      	ldr	r3, [r3, #28]
 23f99d6:	9302      	str	r3, [sp, #8]
 23f99d8:	bd09      	pop	{r0, r3, pc}
 23f99da:	0000      	.short	0x0000
 23f99dc:	1007aac8 	.word	0x1007aac8
 23f99e0:	00000034 	.word	0x00000034

023f99e4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23f99e4:	b509      	push	{r0, r3, lr}
 23f99e6:	4804      	ldr	r0, [pc, #16]	; (23f99f8 <HAL_USB_USART_Flush_Data+0x14>)
 23f99e8:	6800      	ldr	r0, [r0, #0]
 23f99ea:	4b04      	ldr	r3, [pc, #16]	; (23f99fc <HAL_USB_USART_Flush_Data+0x18>)
 23f99ec:	4403      	add	r3, r0
 23f99ee:	681b      	ldr	r3, [r3, #0]
 23f99f0:	6a1b      	ldr	r3, [r3, #32]
 23f99f2:	9302      	str	r3, [sp, #8]
 23f99f4:	bd09      	pop	{r0, r3, pc}
 23f99f6:	0000      	.short	0x0000
 23f99f8:	1007aac8 	.word	0x1007aac8
 23f99fc:	00000034 	.word	0x00000034

023f9a00 <hal_watchdog_set_config>:

#if HAL_PLATFORM_HW_WATCHDOG

DYNALIB_BEGIN(hal_watchdog)

DYNALIB_FN(0, hal_watchdog, hal_watchdog_set_config, int(hal_watchdog_instance_t, const hal_watchdog_config_t*, void*))
 23f9a00:	b509      	push	{r0, r3, lr}
 23f9a02:	4804      	ldr	r0, [pc, #16]	; (23f9a14 <hal_watchdog_set_config+0x14>)
 23f9a04:	6800      	ldr	r0, [r0, #0]
 23f9a06:	4b04      	ldr	r3, [pc, #16]	; (23f9a18 <hal_watchdog_set_config+0x18>)
 23f9a08:	4403      	add	r3, r0
 23f9a0a:	681b      	ldr	r3, [r3, #0]
 23f9a0c:	681b      	ldr	r3, [r3, #0]
 23f9a0e:	9302      	str	r3, [sp, #8]
 23f9a10:	bd09      	pop	{r0, r3, pc}
 23f9a12:	0000      	.short	0x0000
 23f9a14:	1007aac8 	.word	0x1007aac8
 23f9a18:	0000006c 	.word	0x0000006c

023f9a1c <hal_watchdog_start>:
DYNALIB_FN(1, hal_watchdog, hal_watchdog_on_expired_callback, int(hal_watchdog_instance_t, hal_watchdog_on_expired_callback_t, void*, void*))
DYNALIB_FN(2, hal_watchdog, hal_watchdog_start, int(hal_watchdog_instance_t, void*))
 23f9a1c:	b509      	push	{r0, r3, lr}
 23f9a1e:	4804      	ldr	r0, [pc, #16]	; (23f9a30 <hal_watchdog_start+0x14>)
 23f9a20:	6800      	ldr	r0, [r0, #0]
 23f9a22:	4b04      	ldr	r3, [pc, #16]	; (23f9a34 <hal_watchdog_start+0x18>)
 23f9a24:	4403      	add	r3, r0
 23f9a26:	681b      	ldr	r3, [r3, #0]
 23f9a28:	689b      	ldr	r3, [r3, #8]
 23f9a2a:	9302      	str	r3, [sp, #8]
 23f9a2c:	bd09      	pop	{r0, r3, pc}
 23f9a2e:	0000      	.short	0x0000
 23f9a30:	1007aac8 	.word	0x1007aac8
 23f9a34:	0000006c 	.word	0x0000006c

023f9a38 <hal_watchdog_refresh>:
DYNALIB_FN(3, hal_watchdog, hal_watchdog_stop, int(hal_watchdog_instance_t, void*))
DYNALIB_FN(4, hal_watchdog, hal_watchdog_refresh, int(hal_watchdog_instance_t, void*))
 23f9a38:	b509      	push	{r0, r3, lr}
 23f9a3a:	4804      	ldr	r0, [pc, #16]	; (23f9a4c <hal_watchdog_refresh+0x14>)
 23f9a3c:	6800      	ldr	r0, [r0, #0]
 23f9a3e:	4b04      	ldr	r3, [pc, #16]	; (23f9a50 <hal_watchdog_refresh+0x18>)
 23f9a40:	4403      	add	r3, r0
 23f9a42:	681b      	ldr	r3, [r3, #0]
 23f9a44:	691b      	ldr	r3, [r3, #16]
 23f9a46:	9302      	str	r3, [sp, #8]
 23f9a48:	bd09      	pop	{r0, r3, pc}
 23f9a4a:	0000      	.short	0x0000
 23f9a4c:	1007aac8 	.word	0x1007aac8
 23f9a50:	0000006c 	.word	0x0000006c

023f9a54 <hal_watchdog_get_info>:
DYNALIB_FN(5, hal_watchdog, hal_watchdog_get_info, int(hal_watchdog_instance_t, hal_watchdog_info_t*, void*))
 23f9a54:	b509      	push	{r0, r3, lr}
 23f9a56:	4804      	ldr	r0, [pc, #16]	; (23f9a68 <hal_watchdog_get_info+0x14>)
 23f9a58:	6800      	ldr	r0, [r0, #0]
 23f9a5a:	4b04      	ldr	r3, [pc, #16]	; (23f9a6c <hal_watchdog_get_info+0x18>)
 23f9a5c:	4403      	add	r3, r0
 23f9a5e:	681b      	ldr	r3, [r3, #0]
 23f9a60:	695b      	ldr	r3, [r3, #20]
 23f9a62:	9302      	str	r3, [sp, #8]
 23f9a64:	bd09      	pop	{r0, r3, pc}
 23f9a66:	0000      	.short	0x0000
 23f9a68:	1007aac8 	.word	0x1007aac8
 23f9a6c:	0000006c 	.word	0x0000006c

023f9a70 <wlan_select_antenna>:
#else
DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
#endif
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 23f9a70:	b509      	push	{r0, r3, lr}
 23f9a72:	4804      	ldr	r0, [pc, #16]	; (23f9a84 <wlan_select_antenna+0x14>)
 23f9a74:	6800      	ldr	r0, [r0, #0]
 23f9a76:	4b04      	ldr	r3, [pc, #16]	; (23f9a88 <wlan_select_antenna+0x18>)
 23f9a78:	4403      	add	r3, r0
 23f9a7a:	681b      	ldr	r3, [r3, #0]
 23f9a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f9a7e:	9302      	str	r3, [sp, #8]
 23f9a80:	bd09      	pop	{r0, r3, pc}
 23f9a82:	0000      	.short	0x0000
 23f9a84:	1007aac8 	.word	0x1007aac8
 23f9a88:	0000005c 	.word	0x0000005c

023f9a8c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23f9a8c:	b509      	push	{r0, r3, lr}
 23f9a8e:	4804      	ldr	r0, [pc, #16]	; (23f9aa0 <panic_+0x14>)
 23f9a90:	6800      	ldr	r0, [r0, #0]
 23f9a92:	4b04      	ldr	r3, [pc, #16]	; (23f9aa4 <panic_+0x18>)
 23f9a94:	4403      	add	r3, r0
 23f9a96:	681b      	ldr	r3, [r3, #0]
 23f9a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f9a9a:	9302      	str	r3, [sp, #8]
 23f9a9c:	bd09      	pop	{r0, r3, pc}
 23f9a9e:	0000      	.short	0x0000
 23f9aa0:	1007aac8 	.word	0x1007aac8
 23f9aa4:	00000048 	.word	0x00000048

023f9aa8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23f9aa8:	b509      	push	{r0, r3, lr}
 23f9aaa:	4804      	ldr	r0, [pc, #16]	; (23f9abc <log_message+0x14>)
 23f9aac:	6800      	ldr	r0, [r0, #0]
 23f9aae:	4b04      	ldr	r3, [pc, #16]	; (23f9ac0 <log_message+0x18>)
 23f9ab0:	4403      	add	r3, r0
 23f9ab2:	681b      	ldr	r3, [r3, #0]
 23f9ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f9ab6:	9302      	str	r3, [sp, #8]
 23f9ab8:	bd09      	pop	{r0, r3, pc}
 23f9aba:	0000      	.short	0x0000
 23f9abc:	1007aac8 	.word	0x1007aac8
 23f9ac0:	00000048 	.word	0x00000048

023f9ac4 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23f9ac4:	b509      	push	{r0, r3, lr}
 23f9ac6:	4804      	ldr	r0, [pc, #16]	; (23f9ad8 <log_message_v+0x14>)
 23f9ac8:	6800      	ldr	r0, [r0, #0]
 23f9aca:	4b04      	ldr	r3, [pc, #16]	; (23f9adc <log_message_v+0x18>)
 23f9acc:	4403      	add	r3, r0
 23f9ace:	681b      	ldr	r3, [r3, #0]
 23f9ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f9ad2:	9302      	str	r3, [sp, #8]
 23f9ad4:	bd09      	pop	{r0, r3, pc}
 23f9ad6:	0000      	.short	0x0000
 23f9ad8:	1007aac8 	.word	0x1007aac8
 23f9adc:	00000048 	.word	0x00000048

023f9ae0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23f9ae0:	b509      	push	{r0, r3, lr}
 23f9ae2:	4804      	ldr	r0, [pc, #16]	; (23f9af4 <log_level_name+0x14>)
 23f9ae4:	6800      	ldr	r0, [r0, #0]
 23f9ae6:	4b04      	ldr	r3, [pc, #16]	; (23f9af8 <log_level_name+0x18>)
 23f9ae8:	4403      	add	r3, r0
 23f9aea:	681b      	ldr	r3, [r3, #0]
 23f9aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23f9aee:	9302      	str	r3, [sp, #8]
 23f9af0:	bd09      	pop	{r0, r3, pc}
 23f9af2:	0000      	.short	0x0000
 23f9af4:	1007aac8 	.word	0x1007aac8
 23f9af8:	00000048 	.word	0x00000048

023f9afc <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23f9afc:	b509      	push	{r0, r3, lr}
 23f9afe:	4804      	ldr	r0, [pc, #16]	; (23f9b10 <log_set_callbacks+0x14>)
 23f9b00:	6800      	ldr	r0, [r0, #0]
 23f9b02:	4b04      	ldr	r3, [pc, #16]	; (23f9b14 <log_set_callbacks+0x18>)
 23f9b04:	4403      	add	r3, r0
 23f9b06:	681b      	ldr	r3, [r3, #0]
 23f9b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23f9b0a:	9302      	str	r3, [sp, #8]
 23f9b0c:	bd09      	pop	{r0, r3, pc}
 23f9b0e:	0000      	.short	0x0000
 23f9b10:	1007aac8 	.word	0x1007aac8
 23f9b14:	00000048 	.word	0x00000048

023f9b18 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 23f9b18:	b509      	push	{r0, r3, lr}
 23f9b1a:	4804      	ldr	r0, [pc, #16]	; (23f9b2c <system_mode+0x14>)
 23f9b1c:	6800      	ldr	r0, [r0, #0]
 23f9b1e:	4b04      	ldr	r3, [pc, #16]	; (23f9b30 <system_mode+0x18>)
 23f9b20:	4403      	add	r3, r0
 23f9b22:	681b      	ldr	r3, [r3, #0]
 23f9b24:	681b      	ldr	r3, [r3, #0]
 23f9b26:	9302      	str	r3, [sp, #8]
 23f9b28:	bd09      	pop	{r0, r3, pc}
 23f9b2a:	0000      	.short	0x0000
 23f9b2c:	1007aac8 	.word	0x1007aac8
 23f9b30:	00000008 	.word	0x00000008

023f9b34 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23f9b34:	b509      	push	{r0, r3, lr}
 23f9b36:	4804      	ldr	r0, [pc, #16]	; (23f9b48 <set_system_mode+0x14>)
 23f9b38:	6800      	ldr	r0, [r0, #0]
 23f9b3a:	4b04      	ldr	r3, [pc, #16]	; (23f9b4c <set_system_mode+0x18>)
 23f9b3c:	4403      	add	r3, r0
 23f9b3e:	681b      	ldr	r3, [r3, #0]
 23f9b40:	685b      	ldr	r3, [r3, #4]
 23f9b42:	9302      	str	r3, [sp, #8]
 23f9b44:	bd09      	pop	{r0, r3, pc}
 23f9b46:	0000      	.short	0x0000
 23f9b48:	1007aac8 	.word	0x1007aac8
 23f9b4c:	00000008 	.word	0x00000008

023f9b50 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23f9b50:	b509      	push	{r0, r3, lr}
 23f9b52:	4804      	ldr	r0, [pc, #16]	; (23f9b64 <system_delay_ms+0x14>)
 23f9b54:	6800      	ldr	r0, [r0, #0]
 23f9b56:	4b04      	ldr	r3, [pc, #16]	; (23f9b68 <system_delay_ms+0x18>)
 23f9b58:	4403      	add	r3, r0
 23f9b5a:	681b      	ldr	r3, [r3, #0]
 23f9b5c:	695b      	ldr	r3, [r3, #20]
 23f9b5e:	9302      	str	r3, [sp, #8]
 23f9b60:	bd09      	pop	{r0, r3, pc}
 23f9b62:	0000      	.short	0x0000
 23f9b64:	1007aac8 	.word	0x1007aac8
 23f9b68:	00000008 	.word	0x00000008

023f9b6c <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
 23f9b6c:	b509      	push	{r0, r3, lr}
 23f9b6e:	4804      	ldr	r0, [pc, #16]	; (23f9b80 <system_subscribe_event+0x14>)
 23f9b70:	6800      	ldr	r0, [r0, #0]
 23f9b72:	4b04      	ldr	r3, [pc, #16]	; (23f9b84 <system_subscribe_event+0x18>)
 23f9b74:	4403      	add	r3, r0
 23f9b76:	681b      	ldr	r3, [r3, #0]
 23f9b78:	6a1b      	ldr	r3, [r3, #32]
 23f9b7a:	9302      	str	r3, [sp, #8]
 23f9b7c:	bd09      	pop	{r0, r3, pc}
 23f9b7e:	0000      	.short	0x0000
 23f9b80:	1007aac8 	.word	0x1007aac8
 23f9b84:	00000008 	.word	0x00000008

023f9b88 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23f9b88:	b509      	push	{r0, r3, lr}
 23f9b8a:	4804      	ldr	r0, [pc, #16]	; (23f9b9c <system_thread_set_state+0x14>)
 23f9b8c:	6800      	ldr	r0, [r0, #0]
 23f9b8e:	4b04      	ldr	r3, [pc, #16]	; (23f9ba0 <system_thread_set_state+0x18>)
 23f9b90:	4403      	add	r3, r0
 23f9b92:	681b      	ldr	r3, [r3, #0]
 23f9b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f9b96:	9302      	str	r3, [sp, #8]
 23f9b98:	bd09      	pop	{r0, r3, pc}
 23f9b9a:	0000      	.short	0x0000
 23f9b9c:	1007aac8 	.word	0x1007aac8
 23f9ba0:	00000008 	.word	0x00000008

023f9ba4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 23f9ba4:	b509      	push	{r0, r3, lr}
 23f9ba6:	4804      	ldr	r0, [pc, #16]	; (23f9bb8 <system_thread_get_state+0x14>)
 23f9ba8:	6800      	ldr	r0, [r0, #0]
 23f9baa:	4b04      	ldr	r3, [pc, #16]	; (23f9bbc <system_thread_get_state+0x18>)
 23f9bac:	4403      	add	r3, r0
 23f9bae:	681b      	ldr	r3, [r3, #0]
 23f9bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f9bb2:	9302      	str	r3, [sp, #8]
 23f9bb4:	bd09      	pop	{r0, r3, pc}
 23f9bb6:	0000      	.short	0x0000
 23f9bb8:	1007aac8 	.word	0x1007aac8
 23f9bbc:	00000008 	.word	0x00000008

023f9bc0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23f9bc0:	b509      	push	{r0, r3, lr}
 23f9bc2:	4804      	ldr	r0, [pc, #16]	; (23f9bd4 <system_ctrl_set_app_request_handler+0x14>)
 23f9bc4:	6800      	ldr	r0, [r0, #0]
 23f9bc6:	4b04      	ldr	r3, [pc, #16]	; (23f9bd8 <system_ctrl_set_app_request_handler+0x18>)
 23f9bc8:	4403      	add	r3, r0
 23f9bca:	681b      	ldr	r3, [r3, #0]
 23f9bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23f9bd0:	9302      	str	r3, [sp, #8]
 23f9bd2:	bd09      	pop	{r0, r3, pc}
 23f9bd4:	1007aac8 	.word	0x1007aac8
 23f9bd8:	00000008 	.word	0x00000008

023f9bdc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23f9bdc:	b509      	push	{r0, r3, lr}
 23f9bde:	4804      	ldr	r0, [pc, #16]	; (23f9bf0 <system_ctrl_set_result+0x14>)
 23f9be0:	6800      	ldr	r0, [r0, #0]
 23f9be2:	4b04      	ldr	r3, [pc, #16]	; (23f9bf4 <system_ctrl_set_result+0x18>)
 23f9be4:	4403      	add	r3, r0
 23f9be6:	681b      	ldr	r3, [r3, #0]
 23f9be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23f9bec:	9302      	str	r3, [sp, #8]
 23f9bee:	bd09      	pop	{r0, r3, pc}
 23f9bf0:	1007aac8 	.word	0x1007aac8
 23f9bf4:	00000008 	.word	0x00000008

023f9bf8 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 23f9bf8:	b509      	push	{r0, r3, lr}
 23f9bfa:	4804      	ldr	r0, [pc, #16]	; (23f9c0c <system_reset+0x14>)
 23f9bfc:	6800      	ldr	r0, [r0, #0]
 23f9bfe:	4b04      	ldr	r3, [pc, #16]	; (23f9c10 <system_reset+0x18>)
 23f9c00:	4403      	add	r3, r0
 23f9c02:	681b      	ldr	r3, [r3, #0]
 23f9c04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 23f9c08:	9302      	str	r3, [sp, #8]
 23f9c0a:	bd09      	pop	{r0, r3, pc}
 23f9c0c:	1007aac8 	.word	0x1007aac8
 23f9c10:	00000008 	.word	0x00000008

023f9c14 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 23f9c14:	b509      	push	{r0, r3, lr}
 23f9c16:	4804      	ldr	r0, [pc, #16]	; (23f9c28 <spark_variable+0x14>)
 23f9c18:	6800      	ldr	r0, [r0, #0]
 23f9c1a:	4b04      	ldr	r3, [pc, #16]	; (23f9c2c <spark_variable+0x18>)
 23f9c1c:	4403      	add	r3, r0
 23f9c1e:	681b      	ldr	r3, [r3, #0]
 23f9c20:	681b      	ldr	r3, [r3, #0]
 23f9c22:	9302      	str	r3, [sp, #8]
 23f9c24:	bd09      	pop	{r0, r3, pc}
 23f9c26:	0000      	.short	0x0000
 23f9c28:	1007aac8 	.word	0x1007aac8
 23f9c2c:	0000002c 	.word	0x0000002c

023f9c30 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 23f9c30:	b509      	push	{r0, r3, lr}
 23f9c32:	4804      	ldr	r0, [pc, #16]	; (23f9c44 <spark_function+0x14>)
 23f9c34:	6800      	ldr	r0, [r0, #0]
 23f9c36:	4b04      	ldr	r3, [pc, #16]	; (23f9c48 <spark_function+0x18>)
 23f9c38:	4403      	add	r3, r0
 23f9c3a:	681b      	ldr	r3, [r3, #0]
 23f9c3c:	685b      	ldr	r3, [r3, #4]
 23f9c3e:	9302      	str	r3, [sp, #8]
 23f9c40:	bd09      	pop	{r0, r3, pc}
 23f9c42:	0000      	.short	0x0000
 23f9c44:	1007aac8 	.word	0x1007aac8
 23f9c48:	0000002c 	.word	0x0000002c

023f9c4c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23f9c4c:	b509      	push	{r0, r3, lr}
 23f9c4e:	4804      	ldr	r0, [pc, #16]	; (23f9c60 <spark_process+0x14>)
 23f9c50:	6800      	ldr	r0, [r0, #0]
 23f9c52:	4b04      	ldr	r3, [pc, #16]	; (23f9c64 <spark_process+0x18>)
 23f9c54:	4403      	add	r3, r0
 23f9c56:	681b      	ldr	r3, [r3, #0]
 23f9c58:	689b      	ldr	r3, [r3, #8]
 23f9c5a:	9302      	str	r3, [sp, #8]
 23f9c5c:	bd09      	pop	{r0, r3, pc}
 23f9c5e:	0000      	.short	0x0000
 23f9c60:	1007aac8 	.word	0x1007aac8
 23f9c64:	0000002c 	.word	0x0000002c

023f9c68 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23f9c68:	b509      	push	{r0, r3, lr}
 23f9c6a:	4804      	ldr	r0, [pc, #16]	; (23f9c7c <spark_cloud_flag_connected+0x14>)
 23f9c6c:	6800      	ldr	r0, [r0, #0]
 23f9c6e:	4b04      	ldr	r3, [pc, #16]	; (23f9c80 <spark_cloud_flag_connected+0x18>)
 23f9c70:	4403      	add	r3, r0
 23f9c72:	681b      	ldr	r3, [r3, #0]
 23f9c74:	695b      	ldr	r3, [r3, #20]
 23f9c76:	9302      	str	r3, [sp, #8]
 23f9c78:	bd09      	pop	{r0, r3, pc}
 23f9c7a:	0000      	.short	0x0000
 23f9c7c:	1007aac8 	.word	0x1007aac8
 23f9c80:	0000002c 	.word	0x0000002c

023f9c84 <spark_subscribe>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 23f9c84:	b509      	push	{r0, r3, lr}
 23f9c86:	4804      	ldr	r0, [pc, #16]	; (23f9c98 <spark_subscribe+0x14>)
 23f9c88:	6800      	ldr	r0, [r0, #0]
 23f9c8a:	4b04      	ldr	r3, [pc, #16]	; (23f9c9c <spark_subscribe+0x18>)
 23f9c8c:	4403      	add	r3, r0
 23f9c8e:	681b      	ldr	r3, [r3, #0]
 23f9c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f9c92:	9302      	str	r3, [sp, #8]
 23f9c94:	bd09      	pop	{r0, r3, pc}
 23f9c96:	0000      	.short	0x0000
 23f9c98:	1007aac8 	.word	0x1007aac8
 23f9c9c:	0000002c 	.word	0x0000002c

023f9ca0 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 23f9ca0:	b509      	push	{r0, r3, lr}
 23f9ca2:	4804      	ldr	r0, [pc, #16]	; (23f9cb4 <spark_sync_time_pending+0x14>)
 23f9ca4:	6800      	ldr	r0, [r0, #0]
 23f9ca6:	4b04      	ldr	r3, [pc, #16]	; (23f9cb8 <spark_sync_time_pending+0x18>)
 23f9ca8:	4403      	add	r3, r0
 23f9caa:	681b      	ldr	r3, [r3, #0]
 23f9cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f9cae:	9302      	str	r3, [sp, #8]
 23f9cb0:	bd09      	pop	{r0, r3, pc}
 23f9cb2:	0000      	.short	0x0000
 23f9cb4:	1007aac8 	.word	0x1007aac8
 23f9cb8:	0000002c 	.word	0x0000002c

023f9cbc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23f9cbc:	b509      	push	{r0, r3, lr}
 23f9cbe:	4804      	ldr	r0, [pc, #16]	; (23f9cd0 <spark_set_random_seed_from_cloud_handler+0x14>)
 23f9cc0:	6800      	ldr	r0, [r0, #0]
 23f9cc2:	4b04      	ldr	r3, [pc, #16]	; (23f9cd4 <spark_set_random_seed_from_cloud_handler+0x18>)
 23f9cc4:	4403      	add	r3, r0
 23f9cc6:	681b      	ldr	r3, [r3, #0]
 23f9cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f9cca:	9302      	str	r3, [sp, #8]
 23f9ccc:	bd09      	pop	{r0, r3, pc}
 23f9cce:	0000      	.short	0x0000
 23f9cd0:	1007aac8 	.word	0x1007aac8
 23f9cd4:	0000002c 	.word	0x0000002c

023f9cd8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23f9cd8:	b509      	push	{r0, r3, lr}
 23f9cda:	4804      	ldr	r0, [pc, #16]	; (23f9cec <network_connect+0x14>)
 23f9cdc:	6800      	ldr	r0, [r0, #0]
 23f9cde:	4b04      	ldr	r3, [pc, #16]	; (23f9cf0 <network_connect+0x18>)
 23f9ce0:	4403      	add	r3, r0
 23f9ce2:	681b      	ldr	r3, [r3, #0]
 23f9ce4:	685b      	ldr	r3, [r3, #4]
 23f9ce6:	9302      	str	r3, [sp, #8]
 23f9ce8:	bd09      	pop	{r0, r3, pc}
 23f9cea:	0000      	.short	0x0000
 23f9cec:	1007aac8 	.word	0x1007aac8
 23f9cf0:	00000028 	.word	0x00000028

023f9cf4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23f9cf4:	b509      	push	{r0, r3, lr}
 23f9cf6:	4804      	ldr	r0, [pc, #16]	; (23f9d08 <network_connecting+0x14>)
 23f9cf8:	6800      	ldr	r0, [r0, #0]
 23f9cfa:	4b04      	ldr	r3, [pc, #16]	; (23f9d0c <network_connecting+0x18>)
 23f9cfc:	4403      	add	r3, r0
 23f9cfe:	681b      	ldr	r3, [r3, #0]
 23f9d00:	689b      	ldr	r3, [r3, #8]
 23f9d02:	9302      	str	r3, [sp, #8]
 23f9d04:	bd09      	pop	{r0, r3, pc}
 23f9d06:	0000      	.short	0x0000
 23f9d08:	1007aac8 	.word	0x1007aac8
 23f9d0c:	00000028 	.word	0x00000028

023f9d10 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23f9d10:	b509      	push	{r0, r3, lr}
 23f9d12:	4804      	ldr	r0, [pc, #16]	; (23f9d24 <network_disconnect+0x14>)
 23f9d14:	6800      	ldr	r0, [r0, #0]
 23f9d16:	4b04      	ldr	r3, [pc, #16]	; (23f9d28 <network_disconnect+0x18>)
 23f9d18:	4403      	add	r3, r0
 23f9d1a:	681b      	ldr	r3, [r3, #0]
 23f9d1c:	68db      	ldr	r3, [r3, #12]
 23f9d1e:	9302      	str	r3, [sp, #8]
 23f9d20:	bd09      	pop	{r0, r3, pc}
 23f9d22:	0000      	.short	0x0000
 23f9d24:	1007aac8 	.word	0x1007aac8
 23f9d28:	00000028 	.word	0x00000028

023f9d2c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23f9d2c:	b509      	push	{r0, r3, lr}
 23f9d2e:	4804      	ldr	r0, [pc, #16]	; (23f9d40 <network_ready+0x14>)
 23f9d30:	6800      	ldr	r0, [r0, #0]
 23f9d32:	4b04      	ldr	r3, [pc, #16]	; (23f9d44 <network_ready+0x18>)
 23f9d34:	4403      	add	r3, r0
 23f9d36:	681b      	ldr	r3, [r3, #0]
 23f9d38:	691b      	ldr	r3, [r3, #16]
 23f9d3a:	9302      	str	r3, [sp, #8]
 23f9d3c:	bd09      	pop	{r0, r3, pc}
 23f9d3e:	0000      	.short	0x0000
 23f9d40:	1007aac8 	.word	0x1007aac8
 23f9d44:	00000028 	.word	0x00000028

023f9d48 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23f9d48:	b509      	push	{r0, r3, lr}
 23f9d4a:	4804      	ldr	r0, [pc, #16]	; (23f9d5c <network_on+0x14>)
 23f9d4c:	6800      	ldr	r0, [r0, #0]
 23f9d4e:	4b04      	ldr	r3, [pc, #16]	; (23f9d60 <network_on+0x18>)
 23f9d50:	4403      	add	r3, r0
 23f9d52:	681b      	ldr	r3, [r3, #0]
 23f9d54:	695b      	ldr	r3, [r3, #20]
 23f9d56:	9302      	str	r3, [sp, #8]
 23f9d58:	bd09      	pop	{r0, r3, pc}
 23f9d5a:	0000      	.short	0x0000
 23f9d5c:	1007aac8 	.word	0x1007aac8
 23f9d60:	00000028 	.word	0x00000028

023f9d64 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23f9d64:	b509      	push	{r0, r3, lr}
 23f9d66:	4804      	ldr	r0, [pc, #16]	; (23f9d78 <network_off+0x14>)
 23f9d68:	6800      	ldr	r0, [r0, #0]
 23f9d6a:	4b04      	ldr	r3, [pc, #16]	; (23f9d7c <network_off+0x18>)
 23f9d6c:	4403      	add	r3, r0
 23f9d6e:	681b      	ldr	r3, [r3, #0]
 23f9d70:	699b      	ldr	r3, [r3, #24]
 23f9d72:	9302      	str	r3, [sp, #8]
 23f9d74:	bd09      	pop	{r0, r3, pc}
 23f9d76:	0000      	.short	0x0000
 23f9d78:	1007aac8 	.word	0x1007aac8
 23f9d7c:	00000028 	.word	0x00000028

023f9d80 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23f9d80:	b509      	push	{r0, r3, lr}
 23f9d82:	4804      	ldr	r0, [pc, #16]	; (23f9d94 <network_listen+0x14>)
 23f9d84:	6800      	ldr	r0, [r0, #0]
 23f9d86:	4b04      	ldr	r3, [pc, #16]	; (23f9d98 <network_listen+0x18>)
 23f9d88:	4403      	add	r3, r0
 23f9d8a:	681b      	ldr	r3, [r3, #0]
 23f9d8c:	69db      	ldr	r3, [r3, #28]
 23f9d8e:	9302      	str	r3, [sp, #8]
 23f9d90:	bd09      	pop	{r0, r3, pc}
 23f9d92:	0000      	.short	0x0000
 23f9d94:	1007aac8 	.word	0x1007aac8
 23f9d98:	00000028 	.word	0x00000028

023f9d9c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23f9d9c:	b509      	push	{r0, r3, lr}
 23f9d9e:	4804      	ldr	r0, [pc, #16]	; (23f9db0 <network_listening+0x14>)
 23f9da0:	6800      	ldr	r0, [r0, #0]
 23f9da2:	4b04      	ldr	r3, [pc, #16]	; (23f9db4 <network_listening+0x18>)
 23f9da4:	4403      	add	r3, r0
 23f9da6:	681b      	ldr	r3, [r3, #0]
 23f9da8:	6a1b      	ldr	r3, [r3, #32]
 23f9daa:	9302      	str	r3, [sp, #8]
 23f9dac:	bd09      	pop	{r0, r3, pc}
 23f9dae:	0000      	.short	0x0000
 23f9db0:	1007aac8 	.word	0x1007aac8
 23f9db4:	00000028 	.word	0x00000028

023f9db8 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
 23f9db8:	b509      	push	{r0, r3, lr}
 23f9dba:	4804      	ldr	r0, [pc, #16]	; (23f9dcc <network_set_credentials+0x14>)
 23f9dbc:	6800      	ldr	r0, [r0, #0]
 23f9dbe:	4b04      	ldr	r3, [pc, #16]	; (23f9dd0 <network_set_credentials+0x18>)
 23f9dc0:	4403      	add	r3, r0
 23f9dc2:	681b      	ldr	r3, [r3, #0]
 23f9dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f9dc6:	9302      	str	r3, [sp, #8]
 23f9dc8:	bd09      	pop	{r0, r3, pc}
 23f9dca:	0000      	.short	0x0000
 23f9dcc:	1007aac8 	.word	0x1007aac8
 23f9dd0:	00000028 	.word	0x00000028

023f9dd4 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23f9dd4:	b509      	push	{r0, r3, lr}
 23f9dd6:	4804      	ldr	r0, [pc, #16]	; (23f9de8 <network_set_listen_timeout+0x14>)
 23f9dd8:	6800      	ldr	r0, [r0, #0]
 23f9dda:	4b04      	ldr	r3, [pc, #16]	; (23f9dec <network_set_listen_timeout+0x18>)
 23f9ddc:	4403      	add	r3, r0
 23f9dde:	681b      	ldr	r3, [r3, #0]
 23f9de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f9de2:	9302      	str	r3, [sp, #8]
 23f9de4:	bd09      	pop	{r0, r3, pc}
 23f9de6:	0000      	.short	0x0000
 23f9de8:	1007aac8 	.word	0x1007aac8
 23f9dec:	00000028 	.word	0x00000028

023f9df0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23f9df0:	b509      	push	{r0, r3, lr}
 23f9df2:	4804      	ldr	r0, [pc, #16]	; (23f9e04 <network_get_listen_timeout+0x14>)
 23f9df4:	6800      	ldr	r0, [r0, #0]
 23f9df6:	4b04      	ldr	r3, [pc, #16]	; (23f9e08 <network_get_listen_timeout+0x18>)
 23f9df8:	4403      	add	r3, r0
 23f9dfa:	681b      	ldr	r3, [r3, #0]
 23f9dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f9dfe:	9302      	str	r3, [sp, #8]
 23f9e00:	bd09      	pop	{r0, r3, pc}
 23f9e02:	0000      	.short	0x0000
 23f9e04:	1007aac8 	.word	0x1007aac8
 23f9e08:	00000028 	.word	0x00000028

023f9e0c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23f9e0c:	b509      	push	{r0, r3, lr}
 23f9e0e:	4804      	ldr	r0, [pc, #16]	; (23f9e20 <network_is_on+0x14>)
 23f9e10:	6800      	ldr	r0, [r0, #0]
 23f9e12:	4b04      	ldr	r3, [pc, #16]	; (23f9e24 <network_is_on+0x18>)
 23f9e14:	4403      	add	r3, r0
 23f9e16:	681b      	ldr	r3, [r3, #0]
 23f9e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f9e1a:	9302      	str	r3, [sp, #8]
 23f9e1c:	bd09      	pop	{r0, r3, pc}
 23f9e1e:	0000      	.short	0x0000
 23f9e20:	1007aac8 	.word	0x1007aac8
 23f9e24:	00000028 	.word	0x00000028

023f9e28 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23f9e28:	b509      	push	{r0, r3, lr}
 23f9e2a:	4804      	ldr	r0, [pc, #16]	; (23f9e3c <network_is_off+0x14>)
 23f9e2c:	6800      	ldr	r0, [r0, #0]
 23f9e2e:	4b04      	ldr	r3, [pc, #16]	; (23f9e40 <network_is_off+0x18>)
 23f9e30:	4403      	add	r3, r0
 23f9e32:	681b      	ldr	r3, [r3, #0]
 23f9e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f9e36:	9302      	str	r3, [sp, #8]
 23f9e38:	bd09      	pop	{r0, r3, pc}
 23f9e3a:	0000      	.short	0x0000
 23f9e3c:	1007aac8 	.word	0x1007aac8
 23f9e40:	00000028 	.word	0x00000028

023f9e44 <network_preferred>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_preferred, network_handle_t(network_handle_t, bool, void*))
 23f9e44:	b509      	push	{r0, r3, lr}
 23f9e46:	4804      	ldr	r0, [pc, #16]	; (23f9e58 <network_preferred+0x14>)
 23f9e48:	6800      	ldr	r0, [r0, #0]
 23f9e4a:	4b04      	ldr	r3, [pc, #16]	; (23f9e5c <network_preferred+0x18>)
 23f9e4c:	4403      	add	r3, r0
 23f9e4e:	681b      	ldr	r3, [r3, #0]
 23f9e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f9e52:	9302      	str	r3, [sp, #8]
 23f9e54:	bd09      	pop	{r0, r3, pc}
 23f9e56:	0000      	.short	0x0000
 23f9e58:	1007aac8 	.word	0x1007aac8
 23f9e5c:	00000028 	.word	0x00000028

023f9e60 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23f9e60:	b509      	push	{r0, r3, lr}
 23f9e62:	4804      	ldr	r0, [pc, #16]	; (23f9e74 <network_is_preferred+0x14>)
 23f9e64:	6800      	ldr	r0, [r0, #0]
 23f9e66:	4b04      	ldr	r3, [pc, #16]	; (23f9e78 <network_is_preferred+0x18>)
 23f9e68:	4403      	add	r3, r0
 23f9e6a:	681b      	ldr	r3, [r3, #0]
 23f9e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f9e6e:	9302      	str	r3, [sp, #8]
 23f9e70:	bd09      	pop	{r0, r3, pc}
 23f9e72:	0000      	.short	0x0000
 23f9e74:	1007aac8 	.word	0x1007aac8
 23f9e78:	00000028 	.word	0x00000028

023f9e7c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23f9e7c:	b509      	push	{r0, r3, lr}
 23f9e7e:	4804      	ldr	r0, [pc, #16]	; (23f9e90 <malloc+0x14>)
 23f9e80:	6800      	ldr	r0, [r0, #0]
 23f9e82:	4b04      	ldr	r3, [pc, #16]	; (23f9e94 <malloc+0x18>)
 23f9e84:	4403      	add	r3, r0
 23f9e86:	681b      	ldr	r3, [r3, #0]
 23f9e88:	681b      	ldr	r3, [r3, #0]
 23f9e8a:	9302      	str	r3, [sp, #8]
 23f9e8c:	bd09      	pop	{r0, r3, pc}
 23f9e8e:	0000      	.short	0x0000
 23f9e90:	1007aac8 	.word	0x1007aac8
 23f9e94:	00000004 	.word	0x00000004

023f9e98 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23f9e98:	b509      	push	{r0, r3, lr}
 23f9e9a:	4804      	ldr	r0, [pc, #16]	; (23f9eac <free+0x14>)
 23f9e9c:	6800      	ldr	r0, [r0, #0]
 23f9e9e:	4b04      	ldr	r3, [pc, #16]	; (23f9eb0 <free+0x18>)
 23f9ea0:	4403      	add	r3, r0
 23f9ea2:	681b      	ldr	r3, [r3, #0]
 23f9ea4:	685b      	ldr	r3, [r3, #4]
 23f9ea6:	9302      	str	r3, [sp, #8]
 23f9ea8:	bd09      	pop	{r0, r3, pc}
 23f9eaa:	0000      	.short	0x0000
 23f9eac:	1007aac8 	.word	0x1007aac8
 23f9eb0:	00000004 	.word	0x00000004

023f9eb4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23f9eb4:	b509      	push	{r0, r3, lr}
 23f9eb6:	4804      	ldr	r0, [pc, #16]	; (23f9ec8 <realloc+0x14>)
 23f9eb8:	6800      	ldr	r0, [r0, #0]
 23f9eba:	4b04      	ldr	r3, [pc, #16]	; (23f9ecc <realloc+0x18>)
 23f9ebc:	4403      	add	r3, r0
 23f9ebe:	681b      	ldr	r3, [r3, #0]
 23f9ec0:	689b      	ldr	r3, [r3, #8]
 23f9ec2:	9302      	str	r3, [sp, #8]
 23f9ec4:	bd09      	pop	{r0, r3, pc}
 23f9ec6:	0000      	.short	0x0000
 23f9ec8:	1007aac8 	.word	0x1007aac8
 23f9ecc:	00000004 	.word	0x00000004

023f9ed0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 23f9ed0:	b509      	push	{r0, r3, lr}
 23f9ed2:	4804      	ldr	r0, [pc, #16]	; (23f9ee4 <siprintf+0x14>)
 23f9ed4:	6800      	ldr	r0, [r0, #0]
 23f9ed6:	4b04      	ldr	r3, [pc, #16]	; (23f9ee8 <siprintf+0x18>)
 23f9ed8:	4403      	add	r3, r0
 23f9eda:	681b      	ldr	r3, [r3, #0]
 23f9edc:	691b      	ldr	r3, [r3, #16]
 23f9ede:	9302      	str	r3, [sp, #8]
 23f9ee0:	bd09      	pop	{r0, r3, pc}
 23f9ee2:	0000      	.short	0x0000
 23f9ee4:	1007aac8 	.word	0x1007aac8
 23f9ee8:	00000004 	.word	0x00000004

023f9eec <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 23f9eec:	b509      	push	{r0, r3, lr}
 23f9eee:	4804      	ldr	r0, [pc, #16]	; (23f9f00 <snprintf+0x14>)
 23f9ef0:	6800      	ldr	r0, [r0, #0]
 23f9ef2:	4b04      	ldr	r3, [pc, #16]	; (23f9f04 <snprintf+0x18>)
 23f9ef4:	4403      	add	r3, r0
 23f9ef6:	681b      	ldr	r3, [r3, #0]
 23f9ef8:	69db      	ldr	r3, [r3, #28]
 23f9efa:	9302      	str	r3, [sp, #8]
 23f9efc:	bd09      	pop	{r0, r3, pc}
 23f9efe:	0000      	.short	0x0000
 23f9f00:	1007aac8 	.word	0x1007aac8
 23f9f04:	00000004 	.word	0x00000004

023f9f08 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23f9f08:	b509      	push	{r0, r3, lr}
 23f9f0a:	4804      	ldr	r0, [pc, #16]	; (23f9f1c <vsnprintf+0x14>)
 23f9f0c:	6800      	ldr	r0, [r0, #0]
 23f9f0e:	4b04      	ldr	r3, [pc, #16]	; (23f9f20 <vsnprintf+0x18>)
 23f9f10:	4403      	add	r3, r0
 23f9f12:	681b      	ldr	r3, [r3, #0]
 23f9f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f9f16:	9302      	str	r3, [sp, #8]
 23f9f18:	bd09      	pop	{r0, r3, pc}
 23f9f1a:	0000      	.short	0x0000
 23f9f1c:	1007aac8 	.word	0x1007aac8
 23f9f20:	00000004 	.word	0x00000004

023f9f24 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23f9f24:	b509      	push	{r0, r3, lr}
 23f9f26:	4804      	ldr	r0, [pc, #16]	; (23f9f38 <abort+0x14>)
 23f9f28:	6800      	ldr	r0, [r0, #0]
 23f9f2a:	4b04      	ldr	r3, [pc, #16]	; (23f9f3c <abort+0x18>)
 23f9f2c:	4403      	add	r3, r0
 23f9f2e:	681b      	ldr	r3, [r3, #0]
 23f9f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f9f32:	9302      	str	r3, [sp, #8]
 23f9f34:	bd09      	pop	{r0, r3, pc}
 23f9f36:	0000      	.short	0x0000
 23f9f38:	1007aac8 	.word	0x1007aac8
 23f9f3c:	00000004 	.word	0x00000004

023f9f40 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23f9f40:	b509      	push	{r0, r3, lr}
 23f9f42:	4804      	ldr	r0, [pc, #16]	; (23f9f54 <_malloc_r+0x14>)
 23f9f44:	6800      	ldr	r0, [r0, #0]
 23f9f46:	4b04      	ldr	r3, [pc, #16]	; (23f9f58 <_malloc_r+0x18>)
 23f9f48:	4403      	add	r3, r0
 23f9f4a:	681b      	ldr	r3, [r3, #0]
 23f9f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f9f4e:	9302      	str	r3, [sp, #8]
 23f9f50:	bd09      	pop	{r0, r3, pc}
 23f9f52:	0000      	.short	0x0000
 23f9f54:	1007aac8 	.word	0x1007aac8
 23f9f58:	00000004 	.word	0x00000004

023f9f5c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23f9f5c:	b509      	push	{r0, r3, lr}
 23f9f5e:	4804      	ldr	r0, [pc, #16]	; (23f9f70 <__errno+0x14>)
 23f9f60:	6800      	ldr	r0, [r0, #0]
 23f9f62:	4b04      	ldr	r3, [pc, #16]	; (23f9f74 <__errno+0x18>)
 23f9f64:	4403      	add	r3, r0
 23f9f66:	681b      	ldr	r3, [r3, #0]
 23f9f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f9f6a:	9302      	str	r3, [sp, #8]
 23f9f6c:	bd09      	pop	{r0, r3, pc}
 23f9f6e:	0000      	.short	0x0000
 23f9f70:	1007aac8 	.word	0x1007aac8
 23f9f74:	00000004 	.word	0x00000004

023f9f78 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23f9f78:	b509      	push	{r0, r3, lr}
 23f9f7a:	4804      	ldr	r0, [pc, #16]	; (23f9f8c <__assert_func+0x14>)
 23f9f7c:	6800      	ldr	r0, [r0, #0]
 23f9f7e:	4b04      	ldr	r3, [pc, #16]	; (23f9f90 <__assert_func+0x18>)
 23f9f80:	4403      	add	r3, r0
 23f9f82:	681b      	ldr	r3, [r3, #0]
 23f9f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f9f86:	9302      	str	r3, [sp, #8]
 23f9f88:	bd09      	pop	{r0, r3, pc}
 23f9f8a:	0000      	.short	0x0000
 23f9f8c:	1007aac8 	.word	0x1007aac8
 23f9f90:	00000004 	.word	0x00000004

023f9f94 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23f9f94:	b509      	push	{r0, r3, lr}
 23f9f96:	4804      	ldr	r0, [pc, #16]	; (23f9fa8 <newlib_impure_ptr_callback+0x14>)
 23f9f98:	6800      	ldr	r0, [r0, #0]
 23f9f9a:	4b04      	ldr	r3, [pc, #16]	; (23f9fac <newlib_impure_ptr_callback+0x18>)
 23f9f9c:	4403      	add	r3, r0
 23f9f9e:	681b      	ldr	r3, [r3, #0]
 23f9fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f9fa2:	9302      	str	r3, [sp, #8]
 23f9fa4:	bd09      	pop	{r0, r3, pc}
 23f9fa6:	0000      	.short	0x0000
 23f9fa8:	1007aac8 	.word	0x1007aac8
 23f9fac:	00000004 	.word	0x00000004

023f9fb0 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 23f9fb0:	b509      	push	{r0, r3, lr}
 23f9fb2:	4804      	ldr	r0, [pc, #16]	; (23f9fc4 <strftime+0x14>)
 23f9fb4:	6800      	ldr	r0, [r0, #0]
 23f9fb6:	4b04      	ldr	r3, [pc, #16]	; (23f9fc8 <strftime+0x18>)
 23f9fb8:	4403      	add	r3, r0
 23f9fba:	681b      	ldr	r3, [r3, #0]
 23f9fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f9fbe:	9302      	str	r3, [sp, #8]
 23f9fc0:	bd09      	pop	{r0, r3, pc}
 23f9fc2:	0000      	.short	0x0000
 23f9fc4:	1007aac8 	.word	0x1007aac8
 23f9fc8:	00000004 	.word	0x00000004

023f9fcc <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
 23f9fcc:	b509      	push	{r0, r3, lr}
 23f9fce:	4804      	ldr	r0, [pc, #16]	; (23f9fe0 <localtime_r+0x14>)
 23f9fd0:	6800      	ldr	r0, [r0, #0]
 23f9fd2:	4b04      	ldr	r3, [pc, #16]	; (23f9fe4 <localtime_r+0x18>)
 23f9fd4:	4403      	add	r3, r0
 23f9fd6:	681b      	ldr	r3, [r3, #0]
 23f9fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f9fda:	9302      	str	r3, [sp, #8]
 23f9fdc:	bd09      	pop	{r0, r3, pc}
 23f9fde:	0000      	.short	0x0000
 23f9fe0:	1007aac8 	.word	0x1007aac8
 23f9fe4:	00000004 	.word	0x00000004

023f9fe8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23f9fe8:	2100      	movs	r1, #0
 23f9fea:	f7ff bdb1 	b.w	23f9b50 <system_delay_ms>

023f9fee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23f9fee:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23f9ff0:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23f9ff2:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23f9ff4:	b17c      	cbz	r4, 23fa016 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23f9ff6:	6863      	ldr	r3, [r4, #4]
 23f9ff8:	3b01      	subs	r3, #1
 23f9ffa:	6063      	str	r3, [r4, #4]
 23f9ffc:	b95b      	cbnz	r3, 23fa016 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23f9ffe:	6823      	ldr	r3, [r4, #0]
 23fa000:	4620      	mov	r0, r4
 23fa002:	689b      	ldr	r3, [r3, #8]
 23fa004:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fa006:	68a3      	ldr	r3, [r4, #8]
 23fa008:	3b01      	subs	r3, #1
 23fa00a:	60a3      	str	r3, [r4, #8]
 23fa00c:	b91b      	cbnz	r3, 23fa016 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fa00e:	6823      	ldr	r3, [r4, #0]
 23fa010:	4620      	mov	r0, r4
 23fa012:	68db      	ldr	r3, [r3, #12]
 23fa014:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fa016:	4628      	mov	r0, r5
 23fa018:	bd38      	pop	{r3, r4, r5, pc}

023fa01a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fa01a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fa01c:	6843      	ldr	r3, [r0, #4]
    {
 23fa01e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fa020:	3b01      	subs	r3, #1
 23fa022:	6043      	str	r3, [r0, #4]
 23fa024:	b963      	cbnz	r3, 23fa040 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fa026:	6803      	ldr	r3, [r0, #0]
 23fa028:	689b      	ldr	r3, [r3, #8]
 23fa02a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fa02c:	68a3      	ldr	r3, [r4, #8]
 23fa02e:	3b01      	subs	r3, #1
 23fa030:	60a3      	str	r3, [r4, #8]
 23fa032:	b92b      	cbnz	r3, 23fa040 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fa034:	6823      	ldr	r3, [r4, #0]
 23fa036:	4620      	mov	r0, r4
    }
 23fa038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fa03c:	68db      	ldr	r3, [r3, #12]
 23fa03e:	4718      	bx	r3
    }
 23fa040:	bd10      	pop	{r4, pc}

023fa042 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fa042:	b570      	push	{r4, r5, r6, lr}
 23fa044:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fa046:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fa04a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fa04e:	42ae      	cmp	r6, r5
 23fa050:	d004      	beq.n	23fa05c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fa052:	4628      	mov	r0, r5
 23fa054:	f001 fc70 	bl	23fb938 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fa058:	3510      	adds	r5, #16
 23fa05a:	e7f8      	b.n	23fa04e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fa05c:	6820      	ldr	r0, [r4, #0]
 23fa05e:	f7ff ff1b 	bl	23f9e98 <free>
    AllocatorT::free(data_);
}
 23fa062:	4620      	mov	r0, r4
 23fa064:	bd70      	pop	{r4, r5, r6, pc}
	...

023fa068 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fa068:	2300      	movs	r3, #0
 23fa06a:	4802      	ldr	r0, [pc, #8]	; (23fa074 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fa06c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fa06e:	f7ff b9c5 	b.w	23f93fc <os_mutex_recursive_create>
 23fa072:	bf00      	nop
 23fa074:	1007ae04 	.word	0x1007ae04

023fa078 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 23fa078:	b510      	push	{r4, lr}
 23fa07a:	b088      	sub	sp, #32
 23fa07c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 23fa07e:	4668      	mov	r0, sp
 23fa080:	f001 fca5 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 23fa084:	4669      	mov	r1, sp
 23fa086:	a804      	add	r0, sp, #16
 23fa088:	f001 fced 	bl	23fba66 <_ZN6StringC1ERKS_>
 23fa08c:	a804      	add	r0, sp, #16
 23fa08e:	47a0      	blx	r4
 23fa090:	4604      	mov	r4, r0
 23fa092:	a804      	add	r0, sp, #16
 23fa094:	f001 fc50 	bl	23fb938 <_ZN6StringD1Ev>
    String p(param);
 23fa098:	4668      	mov	r0, sp
 23fa09a:	f001 fc4d 	bl	23fb938 <_ZN6StringD1Ev>
}
 23fa09e:	4620      	mov	r0, r4
 23fa0a0:	b008      	add	sp, #32
 23fa0a2:	bd10      	pop	{r4, pc}

023fa0a4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 23fa0a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 23fa0a6:	2300      	movs	r3, #0
         size = sizeof(*this);
 23fa0a8:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 23fa0aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 23fa0ae:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 23fa0b0:	4669      	mov	r1, sp
 23fa0b2:	461a      	mov	r2, r3
 23fa0b4:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 23fa0b6:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 23fa0ba:	f8ad 4000 	strh.w	r4, [sp]
 23fa0be:	f7ff fdb7 	bl	23f9c30 <spark_function>
}
 23fa0c2:	b004      	add	sp, #16
 23fa0c4:	bd10      	pop	{r4, pc}

023fa0c6 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fa0c6:	2200      	movs	r2, #0
 23fa0c8:	6840      	ldr	r0, [r0, #4]
 23fa0ca:	4611      	mov	r1, r2
 23fa0cc:	f7ff be66 	b.w	23f9d9c <network_listening>

023fa0d0 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fa0d0:	2200      	movs	r2, #0
 23fa0d2:	6840      	ldr	r0, [r0, #4]
 23fa0d4:	4611      	mov	r1, r2
 23fa0d6:	f7ff be8b 	b.w	23f9df0 <network_get_listen_timeout>

023fa0da <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fa0da:	2200      	movs	r2, #0
 23fa0dc:	6840      	ldr	r0, [r0, #4]
 23fa0de:	f7ff be79 	b.w	23f9dd4 <network_set_listen_timeout>

023fa0e2 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fa0e2:	2200      	movs	r2, #0
 23fa0e4:	6840      	ldr	r0, [r0, #4]
 23fa0e6:	f081 0101 	eor.w	r1, r1, #1
 23fa0ea:	f7ff be49 	b.w	23f9d80 <network_listen>

023fa0ee <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fa0ee:	2300      	movs	r3, #0
 23fa0f0:	6840      	ldr	r0, [r0, #4]
 23fa0f2:	461a      	mov	r2, r3
 23fa0f4:	4619      	mov	r1, r3
 23fa0f6:	f7ff be35 	b.w	23f9d64 <network_off>

023fa0fa <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fa0fa:	2300      	movs	r3, #0
 23fa0fc:	6840      	ldr	r0, [r0, #4]
 23fa0fe:	461a      	mov	r2, r3
 23fa100:	4619      	mov	r1, r3
 23fa102:	f7ff be21 	b.w	23f9d48 <network_on>

023fa106 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fa106:	2200      	movs	r2, #0
 23fa108:	6840      	ldr	r0, [r0, #4]
 23fa10a:	4611      	mov	r1, r2
 23fa10c:	f7ff be0e 	b.w	23f9d2c <network_ready>

023fa110 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fa110:	2200      	movs	r2, #0
 23fa112:	6840      	ldr	r0, [r0, #4]
 23fa114:	4611      	mov	r1, r2
 23fa116:	f7ff bded 	b.w	23f9cf4 <network_connecting>

023fa11a <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fa11a:	2200      	movs	r2, #0
 23fa11c:	2102      	movs	r1, #2
 23fa11e:	6840      	ldr	r0, [r0, #4]
 23fa120:	f7ff bdf6 	b.w	23f9d10 <network_disconnect>

023fa124 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fa124:	2300      	movs	r3, #0
 23fa126:	6840      	ldr	r0, [r0, #4]
 23fa128:	461a      	mov	r2, r3
 23fa12a:	f7ff bdd5 	b.w	23f9cd8 <network_connect>
	...

023fa130 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fa130:	2203      	movs	r2, #3
 23fa132:	4b02      	ldr	r3, [pc, #8]	; (23fa13c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fa134:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fa136:	4a02      	ldr	r2, [pc, #8]	; (23fa140 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fa138:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fa13a:	4770      	bx	lr
 23fa13c:	1007ae08 	.word	0x1007ae08
 23fa140:	023ff7d0 	.word	0x023ff7d0

023fa144 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fa144:	4770      	bx	lr

023fa146 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fa146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fa148:	4606      	mov	r6, r0
 23fa14a:	4615      	mov	r5, r2
 23fa14c:	460c      	mov	r4, r1
 23fa14e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fa150:	42bc      	cmp	r4, r7
 23fa152:	d006      	beq.n	23fa162 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fa154:	6833      	ldr	r3, [r6, #0]
 23fa156:	4630      	mov	r0, r6
 23fa158:	689b      	ldr	r3, [r3, #8]
 23fa15a:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fa15e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fa160:	e7f6      	b.n	23fa150 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fa162:	4628      	mov	r0, r5
 23fa164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fa166 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fa166:	2200      	movs	r2, #0
 23fa168:	7c00      	ldrb	r0, [r0, #16]
 23fa16a:	f7ff ba27 	b.w	23f95bc <hal_i2c_write>

023fa16e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fa16e:	2100      	movs	r1, #0
 23fa170:	7c00      	ldrb	r0, [r0, #16]
 23fa172:	f7ff ba31 	b.w	23f95d8 <hal_i2c_available>

023fa176 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fa176:	2100      	movs	r1, #0
 23fa178:	7c00      	ldrb	r0, [r0, #16]
 23fa17a:	f7ff ba3b 	b.w	23f95f4 <hal_i2c_read>

023fa17e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fa17e:	2100      	movs	r1, #0
 23fa180:	7c00      	ldrb	r0, [r0, #16]
 23fa182:	f7ff ba45 	b.w	23f9610 <hal_i2c_peek>

023fa186 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fa186:	2100      	movs	r1, #0
 23fa188:	7c00      	ldrb	r0, [r0, #16]
 23fa18a:	f7ff ba4f 	b.w	23f962c <hal_i2c_flush>

023fa18e <_ZN7TwoWireD0Ev>:
 23fa18e:	b510      	push	{r4, lr}
 23fa190:	4604      	mov	r4, r0
 23fa192:	2114      	movs	r1, #20
 23fa194:	f7fc fcf1 	bl	23f6b7a <_ZdlPvj>
 23fa198:	4620      	mov	r0, r4
 23fa19a:	bd10      	pop	{r4, pc}

023fa19c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fa19c:	b538      	push	{r3, r4, r5, lr}
 23fa19e:	4604      	mov	r4, r0
 23fa1a0:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fa1a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fa1a6:	2200      	movs	r2, #0
 23fa1a8:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fa1ac:	4b09      	ldr	r3, [pc, #36]	; (23fa1d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fa1ae:	4608      	mov	r0, r1
  _i2c = i2c;
 23fa1b0:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fa1b2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fa1b4:	4629      	mov	r1, r5
 23fa1b6:	f7ff fa55 	bl	23f9664 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fa1ba:	30bf      	adds	r0, #191	; 0xbf
 23fa1bc:	d108      	bne.n	23fa1d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fa1be:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fa1c0:	07db      	lsls	r3, r3, #31
 23fa1c2:	d505      	bpl.n	23fa1d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fa1c4:	6868      	ldr	r0, [r5, #4]
 23fa1c6:	f7ff fe67 	bl	23f9e98 <free>
    free(conf.tx_buffer);
 23fa1ca:	68e8      	ldr	r0, [r5, #12]
 23fa1cc:	f7ff fe64 	bl	23f9e98 <free>
}
 23fa1d0:	4620      	mov	r0, r4
 23fa1d2:	bd38      	pop	{r3, r4, r5, pc}
 23fa1d4:	023ff814 	.word	0x023ff814

023fa1d8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fa1d8:	4770      	bx	lr

023fa1da <_ZN9IPAddressD0Ev>:
 23fa1da:	b510      	push	{r4, lr}
 23fa1dc:	4604      	mov	r4, r0
 23fa1de:	2118      	movs	r1, #24
 23fa1e0:	f7fc fccb 	bl	23f6b7a <_ZdlPvj>
 23fa1e4:	4620      	mov	r0, r4
 23fa1e6:	bd10      	pop	{r4, pc}

023fa1e8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fa1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fa1ea:	7d03      	ldrb	r3, [r0, #20]
{
 23fa1ec:	460e      	mov	r6, r1
	if (address.v==6) {
 23fa1ee:	2b06      	cmp	r3, #6
 23fa1f0:	f04f 0400 	mov.w	r4, #0
{
 23fa1f4:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fa1f6:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fa1fa:	d012      	beq.n	23fa222 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fa1fc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fa200:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fa204:	220a      	movs	r2, #10
 23fa206:	4630      	mov	r0, r6
 23fa208:	f001 fb07 	bl	23fb81a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fa20c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fa20e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fa210:	d019      	beq.n	23fa246 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fa212:	2c00      	cmp	r4, #0
 23fa214:	d0f4      	beq.n	23fa200 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fa216:	212e      	movs	r1, #46	; 0x2e
 23fa218:	4630      	mov	r0, r6
 23fa21a:	f001 fafb 	bl	23fb814 <_ZN5Print5printEc>
 23fa21e:	4404      	add	r4, r0
 23fa220:	e7ee      	b.n	23fa200 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fa222:	232f      	movs	r3, #47	; 0x2f
 23fa224:	466a      	mov	r2, sp
 23fa226:	4639      	mov	r1, r7
 23fa228:	200a      	movs	r0, #10
		buf[0] = 0;
 23fa22a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fa22e:	f7ff fa35 	bl	23f969c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fa232:	4668      	mov	r0, sp
 23fa234:	f7fc fc5e 	bl	23f6af4 <strlen>
 23fa238:	6833      	ldr	r3, [r6, #0]
 23fa23a:	4602      	mov	r2, r0
 23fa23c:	4669      	mov	r1, sp
 23fa23e:	4630      	mov	r0, r6
 23fa240:	68db      	ldr	r3, [r3, #12]
 23fa242:	4798      	blx	r3
 23fa244:	4604      	mov	r4, r0
    }
    return n;
}
 23fa246:	4620      	mov	r0, r4
 23fa248:	b00d      	add	sp, #52	; 0x34
 23fa24a:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fa24c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fa24c:	b510      	push	{r4, lr}
 23fa24e:	4604      	mov	r4, r0
 23fa250:	4b04      	ldr	r3, [pc, #16]	; (23fa264 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fa252:	2211      	movs	r2, #17
 23fa254:	2100      	movs	r1, #0
 23fa256:	f840 3b04 	str.w	r3, [r0], #4
 23fa25a:	f003 f820 	bl	23fd29e <memset>
}
 23fa25e:	4620      	mov	r0, r4
 23fa260:	bd10      	pop	{r4, pc}
 23fa262:	bf00      	nop
 23fa264:	023ff83c 	.word	0x023ff83c

023fa268 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fa268:	4603      	mov	r3, r0
 23fa26a:	4a07      	ldr	r2, [pc, #28]	; (23fa288 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fa26c:	b510      	push	{r4, lr}
 23fa26e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fa272:	f101 0210 	add.w	r2, r1, #16
 23fa276:	f851 4b04 	ldr.w	r4, [r1], #4
 23fa27a:	4291      	cmp	r1, r2
 23fa27c:	f843 4b04 	str.w	r4, [r3], #4
 23fa280:	d1f9      	bne.n	23fa276 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fa282:	780a      	ldrb	r2, [r1, #0]
 23fa284:	701a      	strb	r2, [r3, #0]
}
 23fa286:	bd10      	pop	{r4, pc}
 23fa288:	023ff83c 	.word	0x023ff83c

023fa28c <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
 23fa28c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
 23fa28e:	2b04      	cmp	r3, #4
 23fa290:	d104      	bne.n	23fa29c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
 23fa292:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23fa294:	3800      	subs	r0, #0
 23fa296:	bf18      	it	ne
 23fa298:	2001      	movne	r0, #1
 23fa29a:	4770      	bx	lr
    } else if (version() == 6) {
 23fa29c:	2b06      	cmp	r3, #6
 23fa29e:	d107      	bne.n	23fa2b0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23fa2a0:	6843      	ldr	r3, [r0, #4]
 23fa2a2:	b93b      	cbnz	r3, 23fa2b4 <_ZNK9IPAddresscvbEv+0x28>
 23fa2a4:	6883      	ldr	r3, [r0, #8]
 23fa2a6:	b92b      	cbnz	r3, 23fa2b4 <_ZNK9IPAddresscvbEv+0x28>
 23fa2a8:	68c3      	ldr	r3, [r0, #12]
 23fa2aa:	b91b      	cbnz	r3, 23fa2b4 <_ZNK9IPAddresscvbEv+0x28>
 23fa2ac:	6900      	ldr	r0, [r0, #16]
 23fa2ae:	e7f1      	b.n	23fa294 <_ZNK9IPAddresscvbEv+0x8>
        return false;
 23fa2b0:	2000      	movs	r0, #0
 23fa2b2:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23fa2b4:	2001      	movs	r0, #1
}
 23fa2b6:	4770      	bx	lr

023fa2b8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fa2b8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fa2ba:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fa2be:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fa2c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fa2c6:	2304      	movs	r3, #4
 23fa2c8:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fa2cc:	6041      	str	r1, [r0, #4]
 23fa2ce:	7503      	strb	r3, [r0, #20]
}
 23fa2d0:	bd10      	pop	{r4, pc}
	...

023fa2d4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fa2d4:	b507      	push	{r0, r1, r2, lr}
 23fa2d6:	4b06      	ldr	r3, [pc, #24]	; (23fa2f0 <_ZN9IPAddressC1EPKh+0x1c>)
 23fa2d8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fa2da:	78cb      	ldrb	r3, [r1, #3]
 23fa2dc:	9300      	str	r3, [sp, #0]
 23fa2de:	788b      	ldrb	r3, [r1, #2]
 23fa2e0:	784a      	ldrb	r2, [r1, #1]
 23fa2e2:	7809      	ldrb	r1, [r1, #0]
 23fa2e4:	f7ff ffe8 	bl	23fa2b8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fa2e8:	b003      	add	sp, #12
 23fa2ea:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa2ee:	bf00      	nop
 23fa2f0:	023ff83c 	.word	0x023ff83c

023fa2f4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fa2f4:	2201      	movs	r2, #1
 23fa2f6:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fa2fa:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fa2fe:	4618      	mov	r0, r3
 23fa300:	2901      	cmp	r1, #1
 23fa302:	d108      	bne.n	23fa316 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fa304:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fa308:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fa30c:	3a01      	subs	r2, #1
 23fa30e:	f103 0310 	add.w	r3, r3, #16
 23fa312:	d1f2      	bne.n	23fa2fa <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fa314:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fa316:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fa318:	bf04      	itt	eq
 23fa31a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fa31e:	1852      	addeq	r2, r2, r1
 23fa320:	e7f4      	b.n	23fa30c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fa322 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fa322:	b40e      	push	{r1, r2, r3}
 23fa324:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fa326:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa328:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fa32a:	af00      	add	r7, sp, #0
 23fa32c:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fa330:	f855 2b04 	ldr.w	r2, [r5], #4
 23fa334:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa336:	462b      	mov	r3, r5
 23fa338:	1878      	adds	r0, r7, r1
 23fa33a:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fa33c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa33e:	f7ff fde3 	bl	23f9f08 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fa342:	280f      	cmp	r0, #15
 23fa344:	687a      	ldr	r2, [r7, #4]
 23fa346:	d91a      	bls.n	23fa37e <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fa348:	f100 0308 	add.w	r3, r0, #8
 23fa34c:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fa350:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fa352:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa356:	1c41      	adds	r1, r0, #1
 23fa358:	462b      	mov	r3, r5
 23fa35a:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fa35c:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa35e:	f7ff fdd3 	bl	23f9f08 <vsnprintf>
        if (n > 0) {
 23fa362:	1e02      	subs	r2, r0, #0
 23fa364:	dd04      	ble.n	23fa370 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fa366:	6823      	ldr	r3, [r4, #0]
 23fa368:	4669      	mov	r1, sp
 23fa36a:	4620      	mov	r0, r4
 23fa36c:	689b      	ldr	r3, [r3, #8]
 23fa36e:	4798      	blx	r3
 23fa370:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fa372:	3720      	adds	r7, #32
 23fa374:	46bd      	mov	sp, r7
 23fa376:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fa37a:	b003      	add	sp, #12
 23fa37c:	4770      	bx	lr
    } else if (n > 0) {
 23fa37e:	2800      	cmp	r0, #0
 23fa380:	d0f7      	beq.n	23fa372 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fa382:	6823      	ldr	r3, [r4, #0]
 23fa384:	4602      	mov	r2, r0
 23fa386:	689b      	ldr	r3, [r3, #8]
 23fa388:	4620      	mov	r0, r4
 23fa38a:	f107 0110 	add.w	r1, r7, #16
 23fa38e:	4798      	blx	r3
}
 23fa390:	e7ef      	b.n	23fa372 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fa392 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fa392:	b538      	push	{r3, r4, r5, lr}
 23fa394:	680b      	ldr	r3, [r1, #0]
 23fa396:	4604      	mov	r4, r0
 23fa398:	6003      	str	r3, [r0, #0]
 23fa39a:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fa39c:	6843      	ldr	r3, [r0, #4]
 23fa39e:	429d      	cmp	r5, r3
 23fa3a0:	d008      	beq.n	23fa3b4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fa3a2:	b115      	cbz	r5, 23fa3aa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fa3a4:	686b      	ldr	r3, [r5, #4]
 23fa3a6:	3301      	adds	r3, #1
 23fa3a8:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fa3aa:	6860      	ldr	r0, [r4, #4]
 23fa3ac:	b108      	cbz	r0, 23fa3b2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fa3ae:	f7ff fe34 	bl	23fa01a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fa3b2:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fa3b4:	bd38      	pop	{r3, r4, r5, pc}

023fa3b6 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fa3b6:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fa3b8:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fa3ba:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fa3be:	2201      	movs	r2, #1
 23fa3c0:	689b      	ldr	r3, [r3, #8]
 23fa3c2:	f10d 0107 	add.w	r1, sp, #7
 23fa3c6:	4798      	blx	r3
}
 23fa3c8:	b003      	add	sp, #12
 23fa3ca:	f85d fb04 	ldr.w	pc, [sp], #4

023fa3ce <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fa3ce:	460b      	mov	r3, r1
 23fa3d0:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fa3d2:	2200      	movs	r2, #0
 23fa3d4:	b510      	push	{r4, lr}
 23fa3d6:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fa3d8:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fa3dc:	6083      	str	r3, [r0, #8]
    if (t) {
 23fa3de:	b90b      	cbnz	r3, 23fa3e4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fa3e0:	4620      	mov	r0, r4
 23fa3e2:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fa3e4:	f7ff ffd5 	bl	23fa392 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fa3e8:	e7fa      	b.n	23fa3e0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fa3ea <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fa3ea:	6883      	ldr	r3, [r0, #8]
 23fa3ec:	b1eb      	cbz	r3, 23fa42a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fa3ee:	781a      	ldrb	r2, [r3, #0]
 23fa3f0:	2a03      	cmp	r2, #3
 23fa3f2:	d81a      	bhi.n	23fa42a <_ZNK5spark9JSONValue4typeEv+0x40>
 23fa3f4:	e8df f002 	tbb	[pc, r2]
 23fa3f8:	1b021704 	.word	0x1b021704
 23fa3fc:	2005      	movs	r0, #5
 23fa3fe:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fa400:	6802      	ldr	r2, [r0, #0]
 23fa402:	685b      	ldr	r3, [r3, #4]
 23fa404:	6852      	ldr	r2, [r2, #4]
 23fa406:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fa408:	282d      	cmp	r0, #45	; 0x2d
 23fa40a:	d012      	beq.n	23fa432 <_ZNK5spark9JSONValue4typeEv+0x48>
 23fa40c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fa410:	2b09      	cmp	r3, #9
 23fa412:	d90e      	bls.n	23fa432 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fa414:	2874      	cmp	r0, #116	; 0x74
 23fa416:	d00e      	beq.n	23fa436 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fa418:	2866      	cmp	r0, #102	; 0x66
 23fa41a:	d00c      	beq.n	23fa436 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fa41c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fa420:	4258      	negs	r0, r3
 23fa422:	4158      	adcs	r0, r3
 23fa424:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fa426:	2006      	movs	r0, #6
 23fa428:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fa42a:	2000      	movs	r0, #0
 23fa42c:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fa42e:	2004      	movs	r0, #4
 23fa430:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fa432:	2003      	movs	r0, #3
 23fa434:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fa436:	2002      	movs	r0, #2
}
 23fa438:	4770      	bx	lr

023fa43a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fa43a:	b510      	push	{r4, lr}
 23fa43c:	4604      	mov	r4, r0
    switch (type()) {
 23fa43e:	f7ff ffd4 	bl	23fa3ea <_ZNK5spark9JSONValue4typeEv>
 23fa442:	2802      	cmp	r0, #2
 23fa444:	d00e      	beq.n	23fa464 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fa446:	1ec3      	subs	r3, r0, #3
 23fa448:	b2db      	uxtb	r3, r3
 23fa44a:	2b01      	cmp	r3, #1
 23fa44c:	d814      	bhi.n	23fa478 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fa44e:	6822      	ldr	r2, [r4, #0]
 23fa450:	68a3      	ldr	r3, [r4, #8]
 23fa452:	6850      	ldr	r0, [r2, #4]
 23fa454:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fa456:	220a      	movs	r2, #10
}
 23fa458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fa45c:	2100      	movs	r1, #0
 23fa45e:	4418      	add	r0, r3
 23fa460:	f003 be5a 	b.w	23fe118 <strtol>
        const char* const s = d_->json + t_->start;
 23fa464:	6822      	ldr	r2, [r4, #0]
 23fa466:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fa468:	6852      	ldr	r2, [r2, #4]
 23fa46a:	685b      	ldr	r3, [r3, #4]
 23fa46c:	5cd0      	ldrb	r0, [r2, r3]
 23fa46e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fa472:	4258      	negs	r0, r3
 23fa474:	4158      	adcs	r0, r3
}
 23fa476:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fa478:	2000      	movs	r0, #0
 23fa47a:	e7fc      	b.n	23fa476 <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fa47c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fa47c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fa47e:	2300      	movs	r3, #0
 23fa480:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fa482:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fa486:	480e      	ldr	r0, [pc, #56]	; (23fa4c0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fa488:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fa48c:	b1a9      	cbz	r1, 23fa4ba <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fa48e:	780b      	ldrb	r3, [r1, #0]
 23fa490:	2b03      	cmp	r3, #3
 23fa492:	d006      	beq.n	23fa4a2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fa494:	b98b      	cbnz	r3, 23fa4ba <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fa496:	6813      	ldr	r3, [r2, #0]
 23fa498:	6858      	ldr	r0, [r3, #4]
 23fa49a:	684b      	ldr	r3, [r1, #4]
 23fa49c:	5cc3      	ldrb	r3, [r0, r3]
 23fa49e:	2b6e      	cmp	r3, #110	; 0x6e
 23fa4a0:	d007      	beq.n	23fa4b2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fa4a2:	6813      	ldr	r3, [r2, #0]
 23fa4a4:	684d      	ldr	r5, [r1, #4]
 23fa4a6:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fa4a8:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fa4aa:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fa4ac:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fa4ae:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fa4b0:	60e3      	str	r3, [r4, #12]
 23fa4b2:	4611      	mov	r1, r2
 23fa4b4:	4620      	mov	r0, r4
 23fa4b6:	f7ff ff6c 	bl	23fa392 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fa4ba:	4620      	mov	r0, r4
 23fa4bc:	bd38      	pop	{r3, r4, r5, pc}
 23fa4be:	bf00      	nop
 23fa4c0:	023ff895 	.word	0x023ff895

023fa4c4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fa4c4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fa4c6:	2500      	movs	r5, #0
 23fa4c8:	460b      	mov	r3, r1
 23fa4ca:	4604      	mov	r4, r0
 23fa4cc:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fa4ce:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fa4d2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fa4d6:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fa4da:	b14b      	cbz	r3, 23fa4f0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fa4dc:	781a      	ldrb	r2, [r3, #0]
 23fa4de:	2a01      	cmp	r2, #1
 23fa4e0:	d106      	bne.n	23fa4f0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fa4e2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fa4e6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fa4e8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fa4ea:	6143      	str	r3, [r0, #20]
 23fa4ec:	f7ff ff51 	bl	23fa392 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fa4f0:	4620      	mov	r0, r4
 23fa4f2:	bd38      	pop	{r3, r4, r5, pc}

023fa4f4 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fa4f4:	b510      	push	{r4, lr}
    if (!n_) {
 23fa4f6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fa4f8:	4604      	mov	r4, r0
    if (!n_) {
 23fa4fa:	b163      	cbz	r3, 23fa516 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fa4fc:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fa4fe:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fa500:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fa502:	3010      	adds	r0, #16
 23fa504:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fa506:	6120      	str	r0, [r4, #16]
    --n_;
 23fa508:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fa50a:	b113      	cbz	r3, 23fa512 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fa50c:	f7ff fef2 	bl	23fa2f4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fa510:	60a0      	str	r0, [r4, #8]
    return true;
 23fa512:	2001      	movs	r0, #1
 23fa514:	e000      	b.n	23fa518 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fa516:	4618      	mov	r0, r3
}
 23fa518:	bd10      	pop	{r4, pc}

023fa51a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fa51a:	b510      	push	{r4, lr}
    write('}');
 23fa51c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fa51e:	4604      	mov	r4, r0
    write('}');
 23fa520:	f7ff ff49 	bl	23fa3b6 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fa524:	2301      	movs	r3, #1
}
 23fa526:	4620      	mov	r0, r4
    state_ = NEXT;
 23fa528:	7123      	strb	r3, [r4, #4]
}
 23fa52a:	bd10      	pop	{r4, pc}

023fa52c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fa52c:	b508      	push	{r3, lr}
    switch (state_) {
 23fa52e:	7903      	ldrb	r3, [r0, #4]
 23fa530:	2b01      	cmp	r3, #1
 23fa532:	d002      	beq.n	23fa53a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fa534:	2b02      	cmp	r3, #2
 23fa536:	d004      	beq.n	23fa542 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fa538:	bd08      	pop	{r3, pc}
        write(',');
 23fa53a:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fa53c:	f7ff ff3b 	bl	23fa3b6 <_ZN5spark10JSONWriter5writeEc>
}
 23fa540:	e7fa      	b.n	23fa538 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fa542:	213a      	movs	r1, #58	; 0x3a
 23fa544:	e7fa      	b.n	23fa53c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fa546 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fa546:	b510      	push	{r4, lr}
 23fa548:	4604      	mov	r4, r0
    writeSeparator();
 23fa54a:	f7ff ffef 	bl	23fa52c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fa54e:	4620      	mov	r0, r4
 23fa550:	217b      	movs	r1, #123	; 0x7b
 23fa552:	f7ff ff30 	bl	23fa3b6 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fa556:	2300      	movs	r3, #0
}
 23fa558:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fa55a:	7123      	strb	r3, [r4, #4]
}
 23fa55c:	bd10      	pop	{r4, pc}
	...

023fa560 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fa560:	b513      	push	{r0, r1, r4, lr}
 23fa562:	4604      	mov	r4, r0
 23fa564:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fa566:	f7ff ffe1 	bl	23fa52c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fa56a:	6823      	ldr	r3, [r4, #0]
 23fa56c:	4620      	mov	r0, r4
 23fa56e:	68db      	ldr	r3, [r3, #12]
 23fa570:	9a01      	ldr	r2, [sp, #4]
 23fa572:	4903      	ldr	r1, [pc, #12]	; (23fa580 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fa574:	4798      	blx	r3
    state_ = NEXT;
 23fa576:	2301      	movs	r3, #1
}
 23fa578:	4620      	mov	r0, r4
    state_ = NEXT;
 23fa57a:	7123      	strb	r3, [r4, #4]
}
 23fa57c:	b002      	add	sp, #8
 23fa57e:	bd10      	pop	{r4, pc}
 23fa580:	023ff988 	.word	0x023ff988

023fa584 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fa584:	b513      	push	{r0, r1, r4, lr}
 23fa586:	4604      	mov	r4, r0
 23fa588:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fa58a:	f7ff ffcf 	bl	23fa52c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fa58e:	6823      	ldr	r3, [r4, #0]
 23fa590:	4620      	mov	r0, r4
 23fa592:	68db      	ldr	r3, [r3, #12]
 23fa594:	9a01      	ldr	r2, [sp, #4]
 23fa596:	4903      	ldr	r1, [pc, #12]	; (23fa5a4 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fa598:	4798      	blx	r3
    state_ = NEXT;
 23fa59a:	2301      	movs	r3, #1
}
 23fa59c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fa59e:	7123      	strb	r3, [r4, #4]
}
 23fa5a0:	b002      	add	sp, #8
 23fa5a2:	bd10      	pop	{r4, pc}
 23fa5a4:	023ff848 	.word	0x023ff848

023fa5a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fa5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fa5ac:	460d      	mov	r5, r1
 23fa5ae:	4690      	mov	r8, r2
    write('"');
 23fa5b0:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fa5b2:	4604      	mov	r4, r0
 23fa5b4:	462f      	mov	r7, r5
    write('"');
 23fa5b6:	f7ff fefe 	bl	23fa3b6 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fa5ba:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fa660 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fa5be:	44a8      	add	r8, r5
    while (s != end) {
 23fa5c0:	4547      	cmp	r7, r8
 23fa5c2:	46ba      	mov	sl, r7
 23fa5c4:	d03d      	beq.n	23fa642 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fa5c6:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fa5ca:	2e22      	cmp	r6, #34	; 0x22
 23fa5cc:	d006      	beq.n	23fa5dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fa5ce:	2e5c      	cmp	r6, #92	; 0x5c
 23fa5d0:	d004      	beq.n	23fa5dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fa5d2:	4630      	mov	r0, r6
 23fa5d4:	f002 fe2c 	bl	23fd230 <isprint>
 23fa5d8:	2800      	cmp	r0, #0
 23fa5da:	d1f1      	bne.n	23fa5c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fa5dc:	6823      	ldr	r3, [r4, #0]
 23fa5de:	4629      	mov	r1, r5
 23fa5e0:	4620      	mov	r0, r4
 23fa5e2:	689b      	ldr	r3, [r3, #8]
 23fa5e4:	ebaa 0205 	sub.w	r2, sl, r5
 23fa5e8:	4798      	blx	r3
            write('\\');
 23fa5ea:	215c      	movs	r1, #92	; 0x5c
 23fa5ec:	4620      	mov	r0, r4
 23fa5ee:	f7ff fee2 	bl	23fa3b6 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fa5f2:	2e0d      	cmp	r6, #13
 23fa5f4:	d80a      	bhi.n	23fa60c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fa5f6:	2e07      	cmp	r6, #7
 23fa5f8:	d91c      	bls.n	23fa634 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fa5fa:	f1a6 0308 	sub.w	r3, r6, #8
 23fa5fe:	2b05      	cmp	r3, #5
 23fa600:	d818      	bhi.n	23fa634 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fa602:	e8df f003 	tbb	[pc, r3]
 23fa606:	0f0d      	.short	0x0f0d
 23fa608:	15131711 	.word	0x15131711
 23fa60c:	2e22      	cmp	r6, #34	; 0x22
 23fa60e:	d001      	beq.n	23fa614 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fa610:	2e5c      	cmp	r6, #92	; 0x5c
 23fa612:	d10f      	bne.n	23fa634 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fa614:	4631      	mov	r1, r6
                write('b');
 23fa616:	4620      	mov	r0, r4
 23fa618:	f7ff fecd 	bl	23fa3b6 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fa61c:	463d      	mov	r5, r7
    while (s != end) {
 23fa61e:	e7cf      	b.n	23fa5c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fa620:	2162      	movs	r1, #98	; 0x62
 23fa622:	e7f8      	b.n	23fa616 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fa624:	2174      	movs	r1, #116	; 0x74
 23fa626:	e7f6      	b.n	23fa616 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fa628:	216e      	movs	r1, #110	; 0x6e
 23fa62a:	e7f4      	b.n	23fa616 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fa62c:	2166      	movs	r1, #102	; 0x66
 23fa62e:	e7f2      	b.n	23fa616 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fa630:	2172      	movs	r1, #114	; 0x72
 23fa632:	e7f0      	b.n	23fa616 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fa634:	6823      	ldr	r3, [r4, #0]
 23fa636:	4632      	mov	r2, r6
 23fa638:	4649      	mov	r1, r9
 23fa63a:	4620      	mov	r0, r4
 23fa63c:	68db      	ldr	r3, [r3, #12]
 23fa63e:	4798      	blx	r3
                break;
 23fa640:	e7ec      	b.n	23fa61c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fa642:	42bd      	cmp	r5, r7
 23fa644:	d005      	beq.n	23fa652 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fa646:	6823      	ldr	r3, [r4, #0]
 23fa648:	4629      	mov	r1, r5
 23fa64a:	4620      	mov	r0, r4
 23fa64c:	689b      	ldr	r3, [r3, #8]
 23fa64e:	1b7a      	subs	r2, r7, r5
 23fa650:	4798      	blx	r3
    }
    write('"');
 23fa652:	2122      	movs	r1, #34	; 0x22
 23fa654:	4620      	mov	r0, r4
 23fa656:	f7ff feae 	bl	23fa3b6 <_ZN5spark10JSONWriter5writeEc>
}
 23fa65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fa65e:	bf00      	nop
 23fa660:	023ff84b 	.word	0x023ff84b

023fa664 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fa664:	b513      	push	{r0, r1, r4, lr}
 23fa666:	4604      	mov	r4, r0
 23fa668:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fa66c:	f7ff ff5e 	bl	23fa52c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fa670:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fa674:	4620      	mov	r0, r4
 23fa676:	f7ff ff97 	bl	23fa5a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fa67a:	2302      	movs	r3, #2
}
 23fa67c:	4620      	mov	r0, r4
    state_ = VALUE;
 23fa67e:	7123      	strb	r3, [r4, #4]
}
 23fa680:	b002      	add	sp, #8
 23fa682:	bd10      	pop	{r4, pc}

023fa684 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fa684:	b513      	push	{r0, r1, r4, lr}
 23fa686:	4604      	mov	r4, r0
 23fa688:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fa68c:	f7ff ff4e 	bl	23fa52c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fa690:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fa694:	4620      	mov	r0, r4
 23fa696:	f7ff ff87 	bl	23fa5a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fa69a:	2301      	movs	r3, #1
}
 23fa69c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fa69e:	7123      	strb	r3, [r4, #4]
}
 23fa6a0:	b002      	add	sp, #8
 23fa6a2:	bd10      	pop	{r4, pc}

023fa6a4 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fa6a4:	6880      	ldr	r0, [r0, #8]
 23fa6a6:	6803      	ldr	r3, [r0, #0]
 23fa6a8:	68db      	ldr	r3, [r3, #12]
 23fa6aa:	4718      	bx	r3

023fa6ac <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fa6ac:	4770      	bx	lr

023fa6ae <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fa6ae:	4608      	mov	r0, r1
 23fa6b0:	b111      	cbz	r1, 23fa6b8 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fa6b2:	680b      	ldr	r3, [r1, #0]
 23fa6b4:	685b      	ldr	r3, [r3, #4]
 23fa6b6:	4718      	bx	r3
}
 23fa6b8:	4770      	bx	lr

023fa6ba <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fa6ba:	4770      	bx	lr

023fa6bc <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fa6bc:	4770      	bx	lr

023fa6be <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fa6be:	4770      	bx	lr

023fa6c0 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fa6c0:	4770      	bx	lr

023fa6c2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fa6c2:	b538      	push	{r3, r4, r5, lr}
 23fa6c4:	4604      	mov	r4, r0
 23fa6c6:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fa6c8:	6800      	ldr	r0, [r0, #0]
 23fa6ca:	212e      	movs	r1, #46	; 0x2e
 23fa6cc:	f002 fe2b 	bl	23fd326 <strchrnul>
    size = s - category;
 23fa6d0:	6823      	ldr	r3, [r4, #0]
 23fa6d2:	1ac3      	subs	r3, r0, r3
 23fa6d4:	602b      	str	r3, [r5, #0]
    if (size) {
 23fa6d6:	b123      	cbz	r3, 23fa6e2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fa6d8:	7803      	ldrb	r3, [r0, #0]
 23fa6da:	b103      	cbz	r3, 23fa6de <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fa6dc:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
 23fa6de:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fa6e0:	6020      	str	r0, [r4, #0]
}
 23fa6e2:	4618      	mov	r0, r3
 23fa6e4:	bd38      	pop	{r3, r4, r5, pc}

023fa6e6 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fa6e6:	b510      	push	{r4, lr}
 23fa6e8:	4604      	mov	r4, r0
 23fa6ea:	210c      	movs	r1, #12
 23fa6ec:	f7fc fa45 	bl	23f6b7a <_ZdlPvj>
 23fa6f0:	4620      	mov	r0, r4
 23fa6f2:	bd10      	pop	{r4, pc}

023fa6f4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fa6f4:	b510      	push	{r4, lr}
 23fa6f6:	4604      	mov	r4, r0
 23fa6f8:	2104      	movs	r1, #4
 23fa6fa:	f7fc fa3e 	bl	23f6b7a <_ZdlPvj>
 23fa6fe:	4620      	mov	r0, r4
 23fa700:	bd10      	pop	{r4, pc}

023fa702 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fa702:	b510      	push	{r4, lr}
 23fa704:	4604      	mov	r4, r0
 23fa706:	2104      	movs	r1, #4
 23fa708:	f7fc fa37 	bl	23f6b7a <_ZdlPvj>
 23fa70c:	4620      	mov	r0, r4
 23fa70e:	bd10      	pop	{r4, pc}

023fa710 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fa710:	f7fe be90 	b.w	23f9434 <os_mutex_recursive_lock>

023fa714 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fa714:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fa716:	f7fc f9e3 	bl	23f6ae0 <strcmp>
}
 23fa71a:	fab0 f080 	clz	r0, r0
 23fa71e:	0940      	lsrs	r0, r0, #5
 23fa720:	bd08      	pop	{r3, pc}

023fa722 <__tcf_1>:
 23fa722:	4770      	bx	lr

023fa724 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fa724:	b510      	push	{r4, lr}
 23fa726:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fa728:	f002 f948 	bl	23fc9bc <_Z16_fetch_usbserialv>
 23fa72c:	4284      	cmp	r4, r0
 23fa72e:	d105      	bne.n	23fa73c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fa730:	f002 f944 	bl	23fc9bc <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fa734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fa738:	f002 b934 	b.w	23fc9a4 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fa73c:	f002 fb90 	bl	23fce60 <_Z22__fetch_global_Serial1v>
 23fa740:	4284      	cmp	r4, r0
 23fa742:	d105      	bne.n	23fa750 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fa744:	f002 fb8c 	bl	23fce60 <_Z22__fetch_global_Serial1v>
}
 23fa748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fa74c:	f002 b8cd 	b.w	23fc8ea <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fa750:	b12c      	cbz	r4, 23fa75e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fa752:	6823      	ldr	r3, [r4, #0]
 23fa754:	4620      	mov	r0, r4
}
 23fa756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fa75a:	685b      	ldr	r3, [r3, #4]
 23fa75c:	4718      	bx	r3
 23fa75e:	bd10      	pop	{r4, pc}

023fa760 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fa760:	680b      	ldr	r3, [r1, #0]
 23fa762:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fa764:	684b      	ldr	r3, [r1, #4]
 23fa766:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fa768:	b113      	cbz	r3, 23fa770 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fa76a:	685a      	ldr	r2, [r3, #4]
 23fa76c:	3201      	adds	r2, #1
 23fa76e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fa770:	4770      	bx	lr

023fa772 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fa772:	b513      	push	{r0, r1, r4, lr}
 23fa774:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fa776:	4608      	mov	r0, r1
 23fa778:	9101      	str	r1, [sp, #4]
 23fa77a:	f7fc f9bb 	bl	23f6af4 <strlen>
 23fa77e:	4602      	mov	r2, r0
 23fa780:	4620      	mov	r0, r4
 23fa782:	9901      	ldr	r1, [sp, #4]
}
 23fa784:	b002      	add	sp, #8
 23fa786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fa78a:	f7ff bf7b 	b.w	23fa684 <_ZN5spark10JSONWriter5valueEPKcj>

023fa78e <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fa78e:	b513      	push	{r0, r1, r4, lr}
 23fa790:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fa792:	4608      	mov	r0, r1
 23fa794:	9101      	str	r1, [sp, #4]
 23fa796:	f7fc f9ad 	bl	23f6af4 <strlen>
 23fa79a:	4602      	mov	r2, r0
 23fa79c:	4620      	mov	r0, r4
 23fa79e:	6823      	ldr	r3, [r4, #0]
 23fa7a0:	9901      	ldr	r1, [sp, #4]
 23fa7a2:	68db      	ldr	r3, [r3, #12]
}
 23fa7a4:	b002      	add	sp, #8
 23fa7a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fa7aa:	4718      	bx	r3

023fa7ac <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fa7ac:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fa7ae:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fa7b0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fa7b4:	2201      	movs	r2, #1
 23fa7b6:	68db      	ldr	r3, [r3, #12]
 23fa7b8:	f10d 0107 	add.w	r1, sp, #7
 23fa7bc:	4798      	blx	r3
}
 23fa7be:	b003      	add	sp, #12
 23fa7c0:	f85d fb04 	ldr.w	pc, [sp], #4

023fa7c4 <_ZN5spark6detail9LogFilterC1E8LogLevel>:
        capacity_(0) {
 23fa7c4:	2200      	movs	r2, #0
        level_(level) {
 23fa7c6:	7601      	strb	r1, [r0, #24]
 23fa7c8:	e9c0 2200 	strd	r2, r2, [r0]
 23fa7cc:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fa7d0:	e9c0 2204 	strd	r2, r2, [r0, #16]
}
 23fa7d4:	4770      	bx	lr

023fa7d6 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fa7d6:	680a      	ldr	r2, [r1, #0]
 23fa7d8:	b510      	push	{r4, lr}
 23fa7da:	6002      	str	r2, [r0, #0]
 23fa7dc:	684a      	ldr	r2, [r1, #4]
 23fa7de:	6042      	str	r2, [r0, #4]
 23fa7e0:	2200      	movs	r2, #0
 23fa7e2:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fa7e6:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fa7e8:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fa7ea:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fa7ec:	6084      	str	r4, [r0, #8]
 23fa7ee:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fa7f0:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fa7f2:	60c4      	str	r4, [r0, #12]
 23fa7f4:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fa7f6:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fa7f8:	6104      	str	r4, [r0, #16]
 23fa7fa:	bd10      	pop	{r4, pc}

023fa7fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fa7fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fa800:	f04f 0a14 	mov.w	sl, #20
 23fa804:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fa808:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fa80a:	4645      	mov	r5, r8
 23fa80c:	fb0a f404 	mul.w	r4, sl, r4
 23fa810:	9300      	str	r3, [sp, #0]
 23fa812:	4b17      	ldr	r3, [pc, #92]	; (23fa870 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fa814:	10a4      	asrs	r4, r4, #2
 23fa816:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fa818:	2c00      	cmp	r4, #0
 23fa81a:	dd21      	ble.n	23fa860 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fa81c:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fa81e:	fb0a f006 	mul.w	r0, sl, r6
 23fa822:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fa826:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fa82a:	463a      	mov	r2, r7
 23fa82c:	455f      	cmp	r7, fp
 23fa82e:	bf28      	it	cs
 23fa830:	465a      	movcs	r2, fp
 23fa832:	5828      	ldr	r0, [r5, r0]
 23fa834:	9101      	str	r1, [sp, #4]
 23fa836:	f002 fd88 	bl	23fd34a <strncmp>
                if (cmp == 0) {
 23fa83a:	2800      	cmp	r0, #0
 23fa83c:	f04f 0301 	mov.w	r3, #1
 23fa840:	9901      	ldr	r1, [sp, #4]
 23fa842:	d10b      	bne.n	23fa85c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fa844:	455f      	cmp	r7, fp
 23fa846:	d103      	bne.n	23fa850 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fa848:	9a00      	ldr	r2, [sp, #0]
 23fa84a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fa84c:	4634      	mov	r4, r6
 23fa84e:	e7e3      	b.n	23fa818 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fa850:	d9fc      	bls.n	23fa84c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fa852:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fa854:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fa858:	3e01      	subs	r6, #1
 23fa85a:	e7f7      	b.n	23fa84c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fa85c:	dbf9      	blt.n	23fa852 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fa85e:	e7f5      	b.n	23fa84c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fa860:	eba5 0508 	sub.w	r5, r5, r8
}
 23fa864:	4802      	ldr	r0, [pc, #8]	; (23fa870 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fa866:	10ad      	asrs	r5, r5, #2
 23fa868:	4368      	muls	r0, r5
 23fa86a:	b003      	add	sp, #12
 23fa86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa870:	cccccccd 	.word	0xcccccccd

023fa874 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fa874:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fa876:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fa878:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fa87a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fa87c:	b303      	cbz	r3, 23fa8c0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fa87e:	b1f9      	cbz	r1, 23fa8c0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fa880:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fa882:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fa886:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fa888:	a903      	add	r1, sp, #12
 23fa88a:	a801      	add	r0, sp, #4
 23fa88c:	f7ff ff19 	bl	23fa6c2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fa890:	4601      	mov	r1, r0
 23fa892:	b1a8      	cbz	r0, 23fa8c0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fa894:	f10d 030b 	add.w	r3, sp, #11
 23fa898:	4620      	mov	r0, r4
 23fa89a:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fa89c:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fa8a0:	f7ff ffac 	bl	23fa7fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fa8a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fa8a8:	b153      	cbz	r3, 23fa8c0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fa8aa:	6823      	ldr	r3, [r4, #0]
 23fa8ac:	2414      	movs	r4, #20
 23fa8ae:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fa8b2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fa8b6:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fa8b8:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fa8ba:	bfa8      	it	ge
 23fa8bc:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fa8be:	e7e3      	b.n	23fa888 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fa8c0:	4628      	mov	r0, r5
 23fa8c2:	b004      	add	sp, #16
 23fa8c4:	bd70      	pop	{r4, r5, r6, pc}

023fa8c6 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fa8c6:	b40e      	push	{r1, r2, r3}
 23fa8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fa8ca:	b08c      	sub	sp, #48	; 0x30
 23fa8cc:	af00      	add	r7, sp, #0
 23fa8ce:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fa8d2:	f855 2b04 	ldr.w	r2, [r5], #4
 23fa8d6:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa8d8:	462b      	mov	r3, r5
 23fa8da:	2120      	movs	r1, #32
 23fa8dc:	f107 0010 	add.w	r0, r7, #16
 23fa8e0:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fa8e2:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa8e4:	f7ff fb10 	bl	23f9f08 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fa8e8:	281f      	cmp	r0, #31
 23fa8ea:	687a      	ldr	r2, [r7, #4]
 23fa8ec:	d91a      	bls.n	23fa924 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fa8ee:	f100 0308 	add.w	r3, r0, #8
 23fa8f2:	f023 0307 	bic.w	r3, r3, #7
        }
 23fa8f6:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fa8f8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa8fc:	1c41      	adds	r1, r0, #1
 23fa8fe:	462b      	mov	r3, r5
 23fa900:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fa902:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa904:	f7ff fb00 	bl	23f9f08 <vsnprintf>
        if (n > 0) {
 23fa908:	1e02      	subs	r2, r0, #0
 23fa90a:	dd04      	ble.n	23fa916 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fa90c:	6823      	ldr	r3, [r4, #0]
 23fa90e:	4669      	mov	r1, sp
 23fa910:	4620      	mov	r0, r4
 23fa912:	68db      	ldr	r3, [r3, #12]
 23fa914:	4798      	blx	r3
 23fa916:	46b5      	mov	sp, r6
}
 23fa918:	3730      	adds	r7, #48	; 0x30
 23fa91a:	46bd      	mov	sp, r7
 23fa91c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fa920:	b003      	add	sp, #12
 23fa922:	4770      	bx	lr
    } else if (n > 0) {
 23fa924:	2800      	cmp	r0, #0
 23fa926:	d0f7      	beq.n	23fa918 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fa928:	6823      	ldr	r3, [r4, #0]
 23fa92a:	4602      	mov	r2, r0
 23fa92c:	68db      	ldr	r3, [r3, #12]
 23fa92e:	4620      	mov	r0, r4
 23fa930:	f107 0110 	add.w	r1, r7, #16
 23fa934:	4798      	blx	r3
}
 23fa936:	e7ef      	b.n	23fa918 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fa938 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fa938:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fa93a:	4c08      	ldr	r4, [pc, #32]	; (23fa95c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fa93c:	e8d4 3f8f 	ldab	r3, [r4]
 23fa940:	07db      	lsls	r3, r3, #31
 23fa942:	d409      	bmi.n	23fa958 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fa944:	4620      	mov	r0, r4
 23fa946:	f7fc f927 	bl	23f6b98 <__cxa_guard_acquire>
 23fa94a:	b128      	cbz	r0, 23fa958 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fa94c:	4620      	mov	r0, r4
 23fa94e:	f7fc f928 	bl	23f6ba2 <__cxa_guard_release>
 23fa952:	4803      	ldr	r0, [pc, #12]	; (23fa960 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fa954:	f002 fc5e 	bl	23fd214 <atexit>
}
 23fa958:	4802      	ldr	r0, [pc, #8]	; (23fa964 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fa95a:	bd10      	pop	{r4, pc}
 23fa95c:	1007ae14 	.word	0x1007ae14
 23fa960:	023fa6bb 	.word	0x023fa6bb
 23fa964:	1007aad0 	.word	0x1007aad0

023fa968 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fa968:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fa96a:	4c08      	ldr	r4, [pc, #32]	; (23fa98c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fa96c:	e8d4 3f8f 	ldab	r3, [r4]
 23fa970:	07db      	lsls	r3, r3, #31
 23fa972:	d409      	bmi.n	23fa988 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fa974:	4620      	mov	r0, r4
 23fa976:	f7fc f90f 	bl	23f6b98 <__cxa_guard_acquire>
 23fa97a:	b128      	cbz	r0, 23fa988 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fa97c:	4620      	mov	r0, r4
 23fa97e:	f7fc f910 	bl	23f6ba2 <__cxa_guard_release>
 23fa982:	4803      	ldr	r0, [pc, #12]	; (23fa990 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fa984:	f002 fc46 	bl	23fd214 <atexit>
    return &factory;
}
 23fa988:	4802      	ldr	r0, [pc, #8]	; (23fa994 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fa98a:	bd10      	pop	{r4, pc}
 23fa98c:	1007ae18 	.word	0x1007ae18
 23fa990:	023fa723 	.word	0x023fa723
 23fa994:	1007aad4 	.word	0x1007aad4

023fa998 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fa998:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fa99a:	2500      	movs	r5, #0
 23fa99c:	4604      	mov	r4, r0
 23fa99e:	e9c0 5500 	strd	r5, r5, [r0]
 23fa9a2:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fa9a6:	6085      	str	r5, [r0, #8]
 23fa9a8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fa9aa:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fa9ae:	f7fe fd25 	bl	23f93fc <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fa9b2:	f7ff ffc1 	bl	23fa938 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fa9b6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fa9b8:	f7ff ffd6 	bl	23fa968 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fa9bc:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fa9be:	6220      	str	r0, [r4, #32]
}
 23fa9c0:	4620      	mov	r0, r4
 23fa9c2:	bd38      	pop	{r3, r4, r5, pc}

023fa9c4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fa9c4:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fa9c6:	4c0a      	ldr	r4, [pc, #40]	; (23fa9f0 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fa9c8:	e8d4 3f8f 	ldab	r3, [r4]
 23fa9cc:	07db      	lsls	r3, r3, #31
 23fa9ce:	d40c      	bmi.n	23fa9ea <_ZN5spark10LogManager8instanceEv+0x26>
 23fa9d0:	4620      	mov	r0, r4
 23fa9d2:	f7fc f8e1 	bl	23f6b98 <__cxa_guard_acquire>
 23fa9d6:	b140      	cbz	r0, 23fa9ea <_ZN5spark10LogManager8instanceEv+0x26>
 23fa9d8:	4806      	ldr	r0, [pc, #24]	; (23fa9f4 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fa9da:	f7ff ffdd 	bl	23fa998 <_ZN5spark10LogManagerC1Ev>
 23fa9de:	4620      	mov	r0, r4
 23fa9e0:	f7fc f8df 	bl	23f6ba2 <__cxa_guard_release>
 23fa9e4:	4804      	ldr	r0, [pc, #16]	; (23fa9f8 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fa9e6:	f002 fc15 	bl	23fd214 <atexit>
    return &mgr;
}
 23fa9ea:	4802      	ldr	r0, [pc, #8]	; (23fa9f4 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fa9ec:	bd10      	pop	{r4, pc}
 23fa9ee:	bf00      	nop
 23fa9f0:	1007ae10 	.word	0x1007ae10
 23fa9f4:	1007ae20 	.word	0x1007ae20
 23fa9f8:	023faf15 	.word	0x023faf15

023fa9fc <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fa9fc:	2300      	movs	r3, #0
 23fa9fe:	4a02      	ldr	r2, [pc, #8]	; (23faa08 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23faa00:	4902      	ldr	r1, [pc, #8]	; (23faa0c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23faa02:	4803      	ldr	r0, [pc, #12]	; (23faa10 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23faa04:	f7ff b87a 	b.w	23f9afc <log_set_callbacks>
 23faa08:	023facfd 	.word	0x023facfd
 23faa0c:	023fac89 	.word	0x023fac89
 23faa10:	023fac09 	.word	0x023fac09

023faa14 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23faa14:	2300      	movs	r3, #0
 23faa16:	461a      	mov	r2, r3
 23faa18:	4619      	mov	r1, r3
 23faa1a:	4618      	mov	r0, r3
 23faa1c:	f7ff b86e 	b.w	23f9afc <log_set_callbacks>

023faa20 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23faa20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23faa22:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23faa24:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23faa26:	4668      	mov	r0, sp
 23faa28:	f7ff fe9a 	bl	23fa760 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23faa2c:	466a      	mov	r2, sp
 23faa2e:	4629      	mov	r1, r5
 23faa30:	4620      	mov	r0, r4
 23faa32:	f7ff fd47 	bl	23fa4c4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23faa36:	a801      	add	r0, sp, #4
 23faa38:	f7ff fad9 	bl	23f9fee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23faa3c:	4620      	mov	r0, r4
 23faa3e:	b003      	add	sp, #12
 23faa40:	bd30      	pop	{r4, r5, pc}

023faa42 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23faa42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23faa44:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23faa46:	68cd      	ldr	r5, [r1, #12]
 23faa48:	4668      	mov	r0, sp
 23faa4a:	f7ff fe89 	bl	23fa760 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23faa4e:	466a      	mov	r2, sp
 23faa50:	4629      	mov	r1, r5
 23faa52:	4620      	mov	r0, r4
 23faa54:	f7ff fd12 	bl	23fa47c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23faa58:	a801      	add	r0, sp, #4
 23faa5a:	f7ff fac8 	bl	23f9fee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23faa5e:	4620      	mov	r0, r4
 23faa60:	b003      	add	sp, #12
 23faa62:	bd30      	pop	{r4, r5, pc}

023faa64 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23faa64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23faa66:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23faa68:	690d      	ldr	r5, [r1, #16]
 23faa6a:	4668      	mov	r0, sp
 23faa6c:	f7ff fe78 	bl	23fa760 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23faa70:	466a      	mov	r2, sp
 23faa72:	4629      	mov	r1, r5
 23faa74:	4620      	mov	r0, r4
 23faa76:	f7ff fcaa 	bl	23fa3ce <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23faa7a:	a801      	add	r0, sp, #4
 23faa7c:	f7ff fab7 	bl	23f9fee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23faa80:	4620      	mov	r0, r4
 23faa82:	b003      	add	sp, #12
 23faa84:	bd30      	pop	{r4, r5, pc}
	...

023faa88 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23faa88:	b570      	push	{r4, r5, r6, lr}
 23faa8a:	b08a      	sub	sp, #40	; 0x28
 23faa8c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23faa8e:	4601      	mov	r1, r0
 23faa90:	a804      	add	r0, sp, #16
 23faa92:	f7ff ffc5 	bl	23faa20 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23faa96:	4e14      	ldr	r6, [pc, #80]	; (23faae8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23faa98:	a804      	add	r0, sp, #16
 23faa9a:	f7ff fd2b 	bl	23fa4f4 <_ZN5spark18JSONObjectIterator4nextEv>
 23faa9e:	b1e8      	cbz	r0, 23faadc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23faaa0:	4668      	mov	r0, sp
 23faaa2:	a904      	add	r1, sp, #16
 23faaa4:	f7ff ffcd 	bl	23faa42 <_ZNK5spark18JSONObjectIterator4nameEv>
 23faaa8:	4631      	mov	r1, r6
 23faaaa:	9802      	ldr	r0, [sp, #8]
 23faaac:	f7ff fe32 	bl	23fa714 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23faab0:	4604      	mov	r4, r0
 23faab2:	b110      	cbz	r0, 23faaba <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23faab4:	1e2c      	subs	r4, r5, #0
 23faab6:	bf18      	it	ne
 23faab8:	2401      	movne	r4, #1
 23faaba:	a801      	add	r0, sp, #4
 23faabc:	f7ff fa97 	bl	23f9fee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23faac0:	2c00      	cmp	r4, #0
 23faac2:	d0e9      	beq.n	23faa98 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23faac4:	4668      	mov	r0, sp
 23faac6:	a904      	add	r1, sp, #16
 23faac8:	f7ff ffcc 	bl	23faa64 <_ZNK5spark18JSONObjectIterator5valueEv>
 23faacc:	4668      	mov	r0, sp
 23faace:	f7ff fcb4 	bl	23fa43a <_ZNK5spark9JSONValue5toIntEv>
 23faad2:	6028      	str	r0, [r5, #0]
 23faad4:	a801      	add	r0, sp, #4
 23faad6:	f7ff fa8a 	bl	23f9fee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23faada:	e7dd      	b.n	23faa98 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23faadc:	a805      	add	r0, sp, #20
 23faade:	f7ff fa86 	bl	23f9fee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23faae2:	b00a      	add	sp, #40	; 0x28
 23faae4:	bd70      	pop	{r4, r5, r6, pc}
 23faae6:	bf00      	nop
 23faae8:	023ff851 	.word	0x023ff851

023faaec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23faaec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23faaee:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23faaf0:	4913      	ldr	r1, [pc, #76]	; (23fab40 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23faaf2:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23faaf4:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23faaf6:	f7fb fff3 	bl	23f6ae0 <strcmp>
 23faafa:	b950      	cbnz	r0, 23fab12 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23faafc:	f001 ff5e 	bl	23fc9bc <_Z16_fetch_usbserialv>
 23fab00:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fab04:	f001 ff4a 	bl	23fc99c <_ZN9USBSerial5beginEl>
}
 23fab08:	b003      	add	sp, #12
 23fab0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fab0e:	f001 bf55 	b.w	23fc9bc <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fab12:	4620      	mov	r0, r4
 23fab14:	490b      	ldr	r1, [pc, #44]	; (23fab44 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fab16:	f7fb ffe3 	bl	23f6ae0 <strcmp>
 23fab1a:	b978      	cbnz	r0, 23fab3c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fab1c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fab20:	a901      	add	r1, sp, #4
 23fab22:	4628      	mov	r0, r5
        int baud = 9600;
 23fab24:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fab26:	f7ff ffaf 	bl	23faa88 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fab2a:	f002 f999 	bl	23fce60 <_Z22__fetch_global_Serial1v>
 23fab2e:	9901      	ldr	r1, [sp, #4]
 23fab30:	f001 fed8 	bl	23fc8e4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fab34:	f002 f994 	bl	23fce60 <_Z22__fetch_global_Serial1v>
}
 23fab38:	b003      	add	sp, #12
 23fab3a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fab3c:	2000      	movs	r0, #0
 23fab3e:	e7fb      	b.n	23fab38 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fab40:	023ff856 	.word	0x023ff856
 23fab44:	023ff85d 	.word	0x023ff85d

023fab48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fab48:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fab4a:	2614      	movs	r6, #20
 23fab4c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fab50:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fab52:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fab56:	42ae      	cmp	r6, r5
 23fab58:	d005      	beq.n	23fab66 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fab5a:	f105 0008 	add.w	r0, r5, #8
 23fab5e:	f7ff fff3 	bl	23fab48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fab62:	3514      	adds	r5, #20
 23fab64:	e7f7      	b.n	23fab56 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fab66:	6820      	ldr	r0, [r4, #0]
 23fab68:	f7ff f996 	bl	23f9e98 <free>
}
 23fab6c:	4620      	mov	r0, r4
 23fab6e:	bd70      	pop	{r4, r5, r6, pc}

023fab70 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fab70:	b510      	push	{r4, lr}
 23fab72:	4604      	mov	r4, r0
 23fab74:	300c      	adds	r0, #12
 23fab76:	f7ff ffe7 	bl	23fab48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fab7a:	4620      	mov	r0, r4
 23fab7c:	f7ff fa61 	bl	23fa042 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fab80:	4620      	mov	r0, r4
 23fab82:	bd10      	pop	{r4, pc}

023fab84 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fab84:	b510      	push	{r4, lr}
 23fab86:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fab88:	4b03      	ldr	r3, [pc, #12]	; (23fab98 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fab8a:	f840 3b04 	str.w	r3, [r0], #4
 23fab8e:	f7ff ffef 	bl	23fab70 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fab92:	4620      	mov	r0, r4
 23fab94:	bd10      	pop	{r4, pc}
 23fab96:	bf00      	nop
 23fab98:	023ff328 	.word	0x023ff328

023fab9c <_ZN5spark16StreamLogHandlerD0Ev>:
 23fab9c:	b510      	push	{r4, lr}
 23fab9e:	4604      	mov	r4, r0
 23faba0:	f7ff fff0 	bl	23fab84 <_ZN5spark16StreamLogHandlerD1Ev>
 23faba4:	4620      	mov	r0, r4
 23faba6:	2124      	movs	r1, #36	; 0x24
 23faba8:	f7fb ffe7 	bl	23f6b7a <_ZdlPvj>
 23fabac:	4620      	mov	r0, r4
 23fabae:	bd10      	pop	{r4, pc}

023fabb0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fabb0:	b510      	push	{r4, lr}
 23fabb2:	4604      	mov	r4, r0
 23fabb4:	4b02      	ldr	r3, [pc, #8]	; (23fabc0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fabb6:	6003      	str	r3, [r0, #0]
 23fabb8:	f7ff ffe4 	bl	23fab84 <_ZN5spark16StreamLogHandlerD1Ev>
 23fabbc:	4620      	mov	r0, r4
 23fabbe:	bd10      	pop	{r4, pc}
 23fabc0:	023ff8e4 	.word	0x023ff8e4

023fabc4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fabc4:	b510      	push	{r4, lr}
 23fabc6:	4604      	mov	r4, r0
 23fabc8:	f7ff fff2 	bl	23fabb0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fabcc:	4620      	mov	r0, r4
 23fabce:	2124      	movs	r1, #36	; 0x24
 23fabd0:	f7fb ffd3 	bl	23f6b7a <_ZdlPvj>
 23fabd4:	4620      	mov	r0, r4
 23fabd6:	bd10      	pop	{r4, pc}

023fabd8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fabd8:	2200      	movs	r2, #0
 23fabda:	e9c0 2200 	strd	r2, r2, [r0]
 23fabde:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fabe0:	b510      	push	{r4, lr}
 23fabe2:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fabe4:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fabe6:	6004      	str	r4, [r0, #0]
 23fabe8:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fabea:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fabec:	6044      	str	r4, [r0, #4]
 23fabee:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fabf0:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fabf2:	6084      	str	r4, [r0, #8]
}
 23fabf4:	bd10      	pop	{r4, pc}

023fabf6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fabf6:	b510      	push	{r4, lr}
 23fabf8:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fabfa:	6803      	ldr	r3, [r0, #0]
 23fabfc:	6818      	ldr	r0, [r3, #0]
 23fabfe:	f7fe fc27 	bl	23f9450 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fac02:	4620      	mov	r0, r4
 23fac04:	bd10      	pop	{r4, pc}
	...

023fac08 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fac08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fac0c:	b087      	sub	sp, #28
 23fac0e:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fac10:	4b1c      	ldr	r3, [pc, #112]	; (23fac84 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fac12:	4680      	mov	r8, r0
 23fac14:	685b      	ldr	r3, [r3, #4]
 23fac16:	4689      	mov	r9, r1
 23fac18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fac1c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fac1e:	b96b      	cbnz	r3, 23fac3c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fac20:	f7ff fed0 	bl	23fa9c4 <_ZN5spark10LogManager8instanceEv>
 23fac24:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fac26:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fac2a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fac2c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fac2e:	f7ff fd6f 	bl	23fa710 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fac32:	7b23      	ldrb	r3, [r4, #12]
 23fac34:	b12b      	cbz	r3, 23fac42 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fac36:	a805      	add	r0, sp, #20
 23fac38:	f7ff ffdd 	bl	23fabf6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fac3c:	b007      	add	sp, #28
 23fac3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fac42:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fac44:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fac48:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fac4a:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fac4e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fac52:	45aa      	cmp	sl, r5
 23fac54:	d012      	beq.n	23fac7c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fac56:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fac5a:	4631      	mov	r1, r6
 23fac5c:	1d38      	adds	r0, r7, #4
 23fac5e:	f7ff fe09 	bl	23fa874 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fac62:	4581      	cmp	r9, r0
 23fac64:	d3f5      	bcc.n	23fac52 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fac66:	9a03      	ldr	r2, [sp, #12]
 23fac68:	683b      	ldr	r3, [r7, #0]
 23fac6a:	9200      	str	r2, [sp, #0]
 23fac6c:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fac70:	464a      	mov	r2, r9
 23fac72:	4633      	mov	r3, r6
 23fac74:	4641      	mov	r1, r8
 23fac76:	4638      	mov	r0, r7
 23fac78:	47d8      	blx	fp
 23fac7a:	e7ea      	b.n	23fac52 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fac7c:	2300      	movs	r3, #0
 23fac7e:	7323      	strb	r3, [r4, #12]
 23fac80:	e7d9      	b.n	23fac36 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fac82:	bf00      	nop
 23fac84:	e000ed00 	.word	0xe000ed00

023fac88 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fac88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fac8c:	469b      	mov	fp, r3
 23fac8e:	4b1a      	ldr	r3, [pc, #104]	; (23facf8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fac90:	4680      	mov	r8, r0
 23fac92:	685b      	ldr	r3, [r3, #4]
 23fac94:	4689      	mov	r9, r1
 23fac96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fac9a:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fac9c:	b96b      	cbnz	r3, 23facba <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fac9e:	f7ff fe91 	bl	23fa9c4 <_ZN5spark10LogManager8instanceEv>
 23faca2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23faca4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23faca8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23facaa:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23facac:	f7ff fd30 	bl	23fa710 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23facb0:	7b23      	ldrb	r3, [r4, #12]
 23facb2:	b12b      	cbz	r3, 23facc0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23facb4:	a801      	add	r0, sp, #4
 23facb6:	f7ff ff9e 	bl	23fabf6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23facba:	b003      	add	sp, #12
 23facbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23facc0:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23facc2:	b2f6      	uxtb	r6, r6
 23facc4:	7323      	strb	r3, [r4, #12]
 23facc6:	e9d4 5300 	ldrd	r5, r3, [r4]
 23facca:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23facce:	4555      	cmp	r5, sl
 23facd0:	d00e      	beq.n	23facf0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23facd2:	f855 7b04 	ldr.w	r7, [r5], #4
 23facd6:	4659      	mov	r1, fp
 23facd8:	1d38      	adds	r0, r7, #4
 23facda:	f7ff fdcb 	bl	23fa874 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23facde:	4286      	cmp	r6, r0
 23face0:	d3f5      	bcc.n	23facce <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23face2:	683b      	ldr	r3, [r7, #0]
 23face4:	464a      	mov	r2, r9
 23face6:	4641      	mov	r1, r8
 23face8:	4638      	mov	r0, r7
 23facea:	68db      	ldr	r3, [r3, #12]
 23facec:	4798      	blx	r3
 23facee:	e7ee      	b.n	23facce <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23facf0:	2300      	movs	r3, #0
 23facf2:	7323      	strb	r3, [r4, #12]
 23facf4:	e7de      	b.n	23facb4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23facf6:	bf00      	nop
 23facf8:	e000ed00 	.word	0xe000ed00

023facfc <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23facfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fad00:	4b16      	ldr	r3, [pc, #88]	; (23fad5c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fad02:	4605      	mov	r5, r0
 23fad04:	685b      	ldr	r3, [r3, #4]
 23fad06:	460f      	mov	r7, r1
 23fad08:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fad0c:	bb1b      	cbnz	r3, 23fad56 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fad0e:	f7ff fe59 	bl	23fa9c4 <_ZN5spark10LogManager8instanceEv>
 23fad12:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fad14:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fad18:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fad1a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fad1c:	f7ff fcf8 	bl	23fa710 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fad20:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fad24:	2446      	movs	r4, #70	; 0x46
 23fad26:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fad2a:	45b0      	cmp	r8, r6
 23fad2c:	d109      	bne.n	23fad42 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fad2e:	a801      	add	r0, sp, #4
 23fad30:	f7ff ff61 	bl	23fabf6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fad34:	42a5      	cmp	r5, r4
 23fad36:	bfb4      	ite	lt
 23fad38:	2000      	movlt	r0, #0
 23fad3a:	2001      	movge	r0, #1
}
 23fad3c:	b002      	add	sp, #8
 23fad3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fad42:	f856 0b04 	ldr.w	r0, [r6], #4
 23fad46:	4639      	mov	r1, r7
 23fad48:	3004      	adds	r0, #4
 23fad4a:	f7ff fd93 	bl	23fa874 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fad4e:	4284      	cmp	r4, r0
 23fad50:	bfa8      	it	ge
 23fad52:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fad54:	e7e9      	b.n	23fad2a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fad56:	2000      	movs	r0, #0
 23fad58:	e7f0      	b.n	23fad3c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fad5a:	bf00      	nop
 23fad5c:	e000ed00 	.word	0xe000ed00

023fad60 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fad60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fad62:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fad66:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fad68:	4604      	mov	r4, r0
 23fad6a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fad6c:	db0d      	blt.n	23fad8a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fad6e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fad70:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fad72:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fad74:	dd04      	ble.n	23fad80 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fad76:	00b9      	lsls	r1, r7, #2
 23fad78:	f7ff f89c 	bl	23f9eb4 <realloc>
            if (!d) {
 23fad7c:	b918      	cbnz	r0, 23fad86 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fad7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fad80:	f7ff f88a 	bl	23f9e98 <free>
        T* d = nullptr;
 23fad84:	2000      	movs	r0, #0
        data_ = d;
 23fad86:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fad88:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fad8a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fad8c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fad8e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fad92:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fad94:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fad98:	1d08      	adds	r0, r1, #4
 23fad9a:	f002 fa66 	bl	23fd26a <memmove>
    new(p) T(std::move(value));
 23fad9e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fada2:	6863      	ldr	r3, [r4, #4]
    return true;
 23fada4:	2001      	movs	r0, #1
    ++size_;
 23fada6:	3301      	adds	r3, #1
 23fada8:	6063      	str	r3, [r4, #4]
    return true;
 23fadaa:	e7e8      	b.n	23fad7e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fadac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fadac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fadae:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fadb0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fadb4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fadb6:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fadb8:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fadba:	f7ff fca9 	bl	23fa710 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fadbe:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fadc2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fadc6:	4293      	cmp	r3, r2
 23fadc8:	4619      	mov	r1, r3
 23fadca:	d00a      	beq.n	23fade2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fadcc:	6809      	ldr	r1, [r1, #0]
 23fadce:	3304      	adds	r3, #4
 23fadd0:	42a9      	cmp	r1, r5
 23fadd2:	d1f8      	bne.n	23fadc6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fadd4:	a801      	add	r0, sp, #4
 23fadd6:	f7ff ff0e 	bl	23fabf6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fadda:	2500      	movs	r5, #0
}
 23faddc:	4628      	mov	r0, r5
 23fadde:	b003      	add	sp, #12
 23fade0:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fade2:	4629      	mov	r1, r5
 23fade4:	4620      	mov	r0, r4
 23fade6:	f7ff ffbb 	bl	23fad60 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fadea:	4605      	mov	r5, r0
 23fadec:	2800      	cmp	r0, #0
 23fadee:	d0f1      	beq.n	23fadd4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fadf0:	6863      	ldr	r3, [r4, #4]
 23fadf2:	2b01      	cmp	r3, #1
 23fadf4:	d101      	bne.n	23fadfa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fadf6:	f7ff fe01 	bl	23fa9fc <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fadfa:	a801      	add	r0, sp, #4
 23fadfc:	f7ff fefb 	bl	23fabf6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fae00:	e7ec      	b.n	23faddc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fae02 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fae02:	460b      	mov	r3, r1
 23fae04:	b570      	push	{r4, r5, r6, lr}
 23fae06:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fae08:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fae0c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fae10:	4282      	cmp	r2, r0
 23fae12:	d00f      	beq.n	23fae34 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fae14:	4601      	mov	r1, r0
            if (*p == value) {
 23fae16:	681d      	ldr	r5, [r3, #0]
 23fae18:	f851 6b04 	ldr.w	r6, [r1], #4
 23fae1c:	42ae      	cmp	r6, r5
 23fae1e:	d107      	bne.n	23fae30 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fae20:	1a52      	subs	r2, r2, r1
 23fae22:	f002 fa22 	bl	23fd26a <memmove>
    return true;
 23fae26:	2001      	movs	r0, #1
    --size_;
 23fae28:	6863      	ldr	r3, [r4, #4]
 23fae2a:	3b01      	subs	r3, #1
 23fae2c:	6063      	str	r3, [r4, #4]
}
 23fae2e:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fae30:	4608      	mov	r0, r1
 23fae32:	e7ed      	b.n	23fae10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fae34:	2000      	movs	r0, #0
 23fae36:	e7fa      	b.n	23fae2e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fae38 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fae38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fae3a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fae3c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fae40:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fae42:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fae44:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fae46:	f7ff fc63 	bl	23fa710 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fae4a:	4620      	mov	r0, r4
 23fae4c:	a901      	add	r1, sp, #4
 23fae4e:	f7ff ffd8 	bl	23fae02 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fae52:	b118      	cbz	r0, 23fae5c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fae54:	6863      	ldr	r3, [r4, #4]
 23fae56:	b90b      	cbnz	r3, 23fae5c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fae58:	f7ff fddc 	bl	23faa14 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fae5c:	a803      	add	r0, sp, #12
 23fae5e:	f7ff feca 	bl	23fabf6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fae62:	b004      	add	sp, #16
 23fae64:	bd10      	pop	{r4, pc}

023fae66 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fae66:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fae68:	b570      	push	{r4, r5, r6, lr}
 23fae6a:	4604      	mov	r4, r0
 23fae6c:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fae70:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fae74:	42ae      	cmp	r6, r5
 23fae76:	d015      	beq.n	23faea4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fae78:	4620      	mov	r0, r4
 23fae7a:	f105 0110 	add.w	r1, r5, #16
 23fae7e:	f7ff ffc0 	bl	23fae02 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fae82:	6863      	ldr	r3, [r4, #4]
 23fae84:	b90b      	cbnz	r3, 23fae8a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fae86:	f7ff fdc5 	bl	23faa14 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fae8a:	69e0      	ldr	r0, [r4, #28]
 23fae8c:	6929      	ldr	r1, [r5, #16]
 23fae8e:	6803      	ldr	r3, [r0, #0]
 23fae90:	68db      	ldr	r3, [r3, #12]
 23fae92:	4798      	blx	r3
        if (h.stream) {
 23fae94:	6969      	ldr	r1, [r5, #20]
 23fae96:	b119      	cbz	r1, 23faea0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fae98:	6a20      	ldr	r0, [r4, #32]
 23fae9a:	6803      	ldr	r3, [r0, #0]
 23fae9c:	68db      	ldr	r3, [r3, #12]
 23fae9e:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23faea0:	3518      	adds	r5, #24
 23faea2:	e7e7      	b.n	23fae74 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23faea4:	2618      	movs	r6, #24
 23faea6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23faeaa:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23faeae:	42ae      	cmp	r6, r5
 23faeb0:	d004      	beq.n	23faebc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23faeb2:	4628      	mov	r0, r5
 23faeb4:	f000 fd40 	bl	23fb938 <_ZN6StringD1Ev>
 23faeb8:	3518      	adds	r5, #24
 23faeba:	e7f8      	b.n	23faeae <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23faebc:	2300      	movs	r3, #0
 23faebe:	6163      	str	r3, [r4, #20]
}
 23faec0:	bd70      	pop	{r4, r5, r6, pc}

023faec2 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23faec2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23faec4:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23faec6:	f7ff fda5 	bl	23faa14 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23faeca:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23faece:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23faed0:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23faed2:	f7ff fc1d 	bl	23fa710 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23faed6:	4620      	mov	r0, r4
 23faed8:	f7ff ffc5 	bl	23fae66 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23faedc:	a801      	add	r0, sp, #4
 23faede:	f7ff fe8a 	bl	23fabf6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23faee2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23faee4:	b108      	cbz	r0, 23faeea <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23faee6:	f7fe fa97 	bl	23f9418 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23faeea:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23faeee:	2618      	movs	r6, #24
 23faef0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23faef4:	42ae      	cmp	r6, r5
 23faef6:	d004      	beq.n	23faf02 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23faef8:	4628      	mov	r0, r5
 23faefa:	f000 fd1d 	bl	23fb938 <_ZN6StringD1Ev>
 23faefe:	3518      	adds	r5, #24
 23faf00:	e7f8      	b.n	23faef4 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23faf02:	6920      	ldr	r0, [r4, #16]
 23faf04:	f7fe ffc8 	bl	23f9e98 <free>
 23faf08:	6820      	ldr	r0, [r4, #0]
 23faf0a:	f7fe ffc5 	bl	23f9e98 <free>
}
 23faf0e:	4620      	mov	r0, r4
 23faf10:	b002      	add	sp, #8
 23faf12:	bd70      	pop	{r4, r5, r6, pc}

023faf14 <__tcf_2>:
    static LogManager mgr;
 23faf14:	4801      	ldr	r0, [pc, #4]	; (23faf1c <__tcf_2+0x8>)
 23faf16:	f7ff bfd4 	b.w	23faec2 <_ZN5spark10LogManagerD1Ev>
 23faf1a:	bf00      	nop
 23faf1c:	1007ae20 	.word	0x1007ae20

023faf20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23faf20:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23faf22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23faf24:	4604      	mov	r4, r0
 23faf26:	460d      	mov	r5, r1
 23faf28:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23faf2a:	d915      	bls.n	23faf58 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23faf2c:	4290      	cmp	r0, r2
 23faf2e:	d214      	bcs.n	23faf5a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23faf30:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23faf34:	1a75      	subs	r5, r6, r1
 23faf36:	f1a1 0714 	sub.w	r7, r1, #20
 23faf3a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23faf3c:	42b7      	cmp	r7, r6
 23faf3e:	d01a      	beq.n	23faf76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23faf40:	b11c      	cbz	r4, 23faf4a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23faf42:	4631      	mov	r1, r6
 23faf44:	4620      	mov	r0, r4
 23faf46:	f7ff fc46 	bl	23fa7d6 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23faf4a:	f106 0008 	add.w	r0, r6, #8
 23faf4e:	f7ff fdfb 	bl	23fab48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23faf52:	3e14      	subs	r6, #20
 23faf54:	3c14      	subs	r4, #20
 23faf56:	e7f1      	b.n	23faf3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23faf58:	d00d      	beq.n	23faf76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23faf5a:	42b5      	cmp	r5, r6
 23faf5c:	d00b      	beq.n	23faf76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23faf5e:	b11c      	cbz	r4, 23faf68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23faf60:	4629      	mov	r1, r5
 23faf62:	4620      	mov	r0, r4
 23faf64:	f7ff fc37 	bl	23fa7d6 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23faf68:	f105 0008 	add.w	r0, r5, #8
 23faf6c:	f7ff fdec 	bl	23fab48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23faf70:	3514      	adds	r5, #20
 23faf72:	3414      	adds	r4, #20
 23faf74:	e7f1      	b.n	23faf5a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23faf76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023faf78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23faf78:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23faf7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23faf7c:	4604      	mov	r4, r0
 23faf7e:	460d      	mov	r5, r1
 23faf80:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23faf82:	d914      	bls.n	23fafae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23faf84:	4290      	cmp	r0, r2
 23faf86:	d213      	bcs.n	23fafb0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23faf88:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23faf8c:	1a75      	subs	r5, r6, r1
 23faf8e:	f1a1 0710 	sub.w	r7, r1, #16
 23faf92:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23faf94:	42b7      	cmp	r7, r6
 23faf96:	d018      	beq.n	23fafca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23faf98:	b11c      	cbz	r4, 23fafa2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23faf9a:	4631      	mov	r1, r6
 23faf9c:	4620      	mov	r0, r4
 23faf9e:	f000 fd48 	bl	23fba32 <_ZN6StringC1EOS_>
                end->~T();
 23fafa2:	4630      	mov	r0, r6
 23fafa4:	f000 fcc8 	bl	23fb938 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fafa8:	3e10      	subs	r6, #16
 23fafaa:	3c10      	subs	r4, #16
 23fafac:	e7f2      	b.n	23faf94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fafae:	d00c      	beq.n	23fafca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fafb0:	42b5      	cmp	r5, r6
 23fafb2:	d00a      	beq.n	23fafca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fafb4:	b11c      	cbz	r4, 23fafbe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fafb6:	4629      	mov	r1, r5
 23fafb8:	4620      	mov	r0, r4
 23fafba:	f000 fd3a 	bl	23fba32 <_ZN6StringC1EOS_>
                p->~T();
 23fafbe:	4628      	mov	r0, r5
 23fafc0:	f000 fcba 	bl	23fb938 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fafc4:	3510      	adds	r5, #16
 23fafc6:	3410      	adds	r4, #16
 23fafc8:	e7f2      	b.n	23fafb0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fafca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fafcc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fafcc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fafce:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fafd0:	4605      	mov	r5, r0
        if (n > 0) {
 23fafd2:	dd11      	ble.n	23faff8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fafd4:	0130      	lsls	r0, r6, #4
 23fafd6:	f7fe ff51 	bl	23f9e7c <malloc>
            if (!d) {
 23fafda:	4604      	mov	r4, r0
 23fafdc:	b158      	cbz	r0, 23faff6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fafde:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fafe2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fafe6:	f7ff ffc7 	bl	23faf78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fafea:	6828      	ldr	r0, [r5, #0]
 23fafec:	f7fe ff54 	bl	23f9e98 <free>
        return true;
 23faff0:	2001      	movs	r0, #1
        data_ = d;
 23faff2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23faff4:	60ae      	str	r6, [r5, #8]
    }
 23faff6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23faff8:	2400      	movs	r4, #0
 23faffa:	e7f6      	b.n	23fafea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023faffc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23faffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb000:	4690      	mov	r8, r2
        capacity_(0) {
 23fb002:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fb004:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fb006:	b095      	sub	sp, #84	; 0x54
 23fb008:	9103      	str	r1, [sp, #12]
    return size_;
 23fb00a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fb00e:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fb010:	4299      	cmp	r1, r3
        capacity_(0) {
 23fb012:	e9c0 3300 	strd	r3, r3, [r0]
 23fb016:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fb01a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fb01e:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fb022:	7602      	strb	r2, [r0, #24]
 23fb024:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fb026:	dc23      	bgt.n	23fb070 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fb028:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fb02c:	2314      	movs	r3, #20
 23fb02e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fb032:	42af      	cmp	r7, r5
 23fb034:	d03b      	beq.n	23fb0ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fb036:	4629      	mov	r1, r5
 23fb038:	a80b      	add	r0, sp, #44	; 0x2c
 23fb03a:	f000 fcfa 	bl	23fba32 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fb03e:	a90b      	add	r1, sp, #44	; 0x2c
 23fb040:	a80f      	add	r0, sp, #60	; 0x3c
 23fb042:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fb044:	f000 fcf5 	bl	23fba32 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb048:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fb04c:	4299      	cmp	r1, r3
 23fb04e:	da1b      	bge.n	23fb088 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fb050:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fb052:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fb054:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fb058:	4631      	mov	r1, r6
 23fb05a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fb05e:	f106 0010 	add.w	r0, r6, #16
 23fb062:	f7ff ff89 	bl	23faf78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fb066:	b9ee      	cbnz	r6, 23fb0a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fb068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fb06a:	3301      	adds	r3, #1
 23fb06c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fb06e:	e011      	b.n	23fb094 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fb070:	a808      	add	r0, sp, #32
 23fb072:	f7ff ffab 	bl	23fafcc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fb076:	2800      	cmp	r0, #0
 23fb078:	d1d6      	bne.n	23fb028 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fb07a:	a808      	add	r0, sp, #32
 23fb07c:	f7fe ffe1 	bl	23fa042 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fb080:	4620      	mov	r0, r4
 23fb082:	b015      	add	sp, #84	; 0x54
 23fb084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb088:	3101      	adds	r1, #1
 23fb08a:	a808      	add	r0, sp, #32
 23fb08c:	f7ff ff9e 	bl	23fafcc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fb090:	2800      	cmp	r0, #0
 23fb092:	d1dd      	bne.n	23fb050 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fb094:	a80f      	add	r0, sp, #60	; 0x3c
 23fb096:	f000 fc4f 	bl	23fb938 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fb09a:	a80b      	add	r0, sp, #44	; 0x2c
 23fb09c:	f000 fc4c 	bl	23fb938 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fb0a0:	3514      	adds	r5, #20
 23fb0a2:	e7c6      	b.n	23fb032 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fb0a4:	4630      	mov	r0, r6
 23fb0a6:	a90f      	add	r1, sp, #60	; 0x3c
 23fb0a8:	f000 fcc3 	bl	23fba32 <_ZN6StringC1EOS_>
 23fb0ac:	e7dc      	b.n	23fb068 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fb0ae:	2600      	movs	r6, #0
 23fb0b0:	f04f 0914 	mov.w	r9, #20
 23fb0b4:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fb0b8:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fb0ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fb0be:	429e      	cmp	r6, r3
 23fb0c0:	da7c      	bge.n	23fb1bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23fb0c2:	0133      	lsls	r3, r6, #4
 23fb0c4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fb0c6:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fb0c8:	b90b      	cbnz	r3, 23fb0ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fb0ca:	3601      	adds	r6, #1
 23fb0cc:	e7f5      	b.n	23fb0ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fb0ce:	2300      	movs	r3, #0
 23fb0d0:	9307      	str	r3, [sp, #28]
 23fb0d2:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fb0d6:	ad0b      	add	r5, sp, #44	; 0x2c
 23fb0d8:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fb0da:	a907      	add	r1, sp, #28
 23fb0dc:	a806      	add	r0, sp, #24
 23fb0de:	f7ff faf0 	bl	23fa6c2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fb0e2:	4682      	mov	sl, r0
 23fb0e4:	2800      	cmp	r0, #0
 23fb0e6:	d0f0      	beq.n	23fb0ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fb0e8:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fb0ec:	4601      	mov	r1, r0
            bool found = false;
 23fb0ee:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fb0f2:	4628      	mov	r0, r5
 23fb0f4:	9a07      	ldr	r2, [sp, #28]
 23fb0f6:	f10d 0317 	add.w	r3, sp, #23
 23fb0fa:	f7ff fb7f 	bl	23fa7fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fb0fe:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fb102:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fb104:	2f00      	cmp	r7, #0
 23fb106:	d14a      	bne.n	23fb19e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fb108:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fb10c:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fb110:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fb114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fb118:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fb11c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fb120:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb122:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fb126:	4293      	cmp	r3, r2
 23fb128:	db17      	blt.n	23fb15a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fb12a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fb12e:	f1ba 0f00 	cmp.w	sl, #0
 23fb132:	dd30      	ble.n	23fb196 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fb134:	fb09 f00a 	mul.w	r0, r9, sl
 23fb138:	f7fe fea0 	bl	23f9e7c <malloc>
            if (!d) {
 23fb13c:	4683      	mov	fp, r0
 23fb13e:	b360      	cbz	r0, 23fb19a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fb140:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fb144:	fb09 1202 	mla	r2, r9, r2, r1
 23fb148:	f7ff feea 	bl	23faf20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fb14c:	6828      	ldr	r0, [r5, #0]
 23fb14e:	f7fe fea3 	bl	23f9e98 <free>
        data_ = d;
 23fb152:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fb156:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fb15a:	682b      	ldr	r3, [r5, #0]
 23fb15c:	9a01      	ldr	r2, [sp, #4]
 23fb15e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fb162:	686a      	ldr	r2, [r5, #4]
 23fb164:	4651      	mov	r1, sl
 23fb166:	fb09 3202 	mla	r2, r9, r2, r3
 23fb16a:	f10a 0014 	add.w	r0, sl, #20
 23fb16e:	f7ff fed7 	bl	23faf20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fb172:	f1ba 0f00 	cmp.w	sl, #0
 23fb176:	d003      	beq.n	23fb180 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fb178:	4650      	mov	r0, sl
 23fb17a:	a90f      	add	r1, sp, #60	; 0x3c
 23fb17c:	f7ff fb2b 	bl	23fa7d6 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fb180:	686b      	ldr	r3, [r5, #4]
 23fb182:	3301      	adds	r3, #1
 23fb184:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fb186:	a811      	add	r0, sp, #68	; 0x44
 23fb188:	f7ff fcde 	bl	23fab48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fb18c:	b13f      	cbz	r7, 23fb19e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fb18e:	a80b      	add	r0, sp, #44	; 0x2c
 23fb190:	f7ff fcda 	bl	23fab48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fb194:	e771      	b.n	23fb07a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fb196:	46bb      	mov	fp, r7
 23fb198:	e7d8      	b.n	23fb14c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fb19a:	2701      	movs	r7, #1
 23fb19c:	e7f3      	b.n	23fb186 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fb19e:	9b01      	ldr	r3, [sp, #4]
 23fb1a0:	682d      	ldr	r5, [r5, #0]
 23fb1a2:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fb1a6:	9b06      	ldr	r3, [sp, #24]
 23fb1a8:	781b      	ldrb	r3, [r3, #0]
 23fb1aa:	b92b      	cbnz	r3, 23fb1b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fb1ac:	f8d8 3000 	ldr.w	r3, [r8]
 23fb1b0:	9a02      	ldr	r2, [sp, #8]
 23fb1b2:	4413      	add	r3, r2
 23fb1b4:	7c1b      	ldrb	r3, [r3, #16]
 23fb1b6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fb1b8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fb1ba:	e78e      	b.n	23fb0da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb1bc:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb1be:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb1c0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fb1c2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb1c4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb1c6:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fb1c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fb1ca:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb1cc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fb1ce:	60a2      	str	r2, [r4, #8]
 23fb1d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fb1d2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb1d4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fb1d6:	60e2      	str	r2, [r4, #12]
 23fb1d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fb1da:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb1dc:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fb1de:	6122      	str	r2, [r4, #16]
 23fb1e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fb1e2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fb1e4:	9b03      	ldr	r3, [sp, #12]
 23fb1e6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fb1e8:	6162      	str	r2, [r4, #20]
 23fb1ea:	7623      	strb	r3, [r4, #24]
 23fb1ec:	e7cf      	b.n	23fb18e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fb1f0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fb1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fb1f2:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fb1f4:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fb1f6:	4617      	mov	r7, r2
 23fb1f8:	b087      	sub	sp, #28
 23fb1fa:	460d      	mov	r5, r1
        stream_(&stream) {
 23fb1fc:	4668      	mov	r0, sp
 23fb1fe:	4619      	mov	r1, r3
 23fb200:	f7fb fd5b 	bl	23f6cba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fb204:	4b0b      	ldr	r3, [pc, #44]	; (23fb234 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fb206:	4669      	mov	r1, sp
 23fb208:	f846 3b04 	str.w	r3, [r6], #4
 23fb20c:	a803      	add	r0, sp, #12
 23fb20e:	f7fb fd54 	bl	23f6cba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fb212:	4639      	mov	r1, r7
 23fb214:	aa03      	add	r2, sp, #12
 23fb216:	4630      	mov	r0, r6
 23fb218:	f7ff fef0 	bl	23faffc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fb21c:	a803      	add	r0, sp, #12
 23fb21e:	f7fb fd0b 	bl	23f6c38 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fb222:	4668      	mov	r0, sp
 23fb224:	f7fb fd08 	bl	23f6c38 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fb228:	4620      	mov	r0, r4
        stream_(&stream) {
 23fb22a:	4b03      	ldr	r3, [pc, #12]	; (23fb238 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fb22c:	6225      	str	r5, [r4, #32]
 23fb22e:	6023      	str	r3, [r4, #0]
}
 23fb230:	b007      	add	sp, #28
 23fb232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fb234:	023ff328 	.word	0x023ff328
 23fb238:	023ff8cc 	.word	0x023ff8cc

023fb23c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fb23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fb23e:	460f      	mov	r7, r1
 23fb240:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fb242:	4638      	mov	r0, r7
 23fb244:	491c      	ldr	r1, [pc, #112]	; (23fb2b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fb246:	4616      	mov	r6, r2
 23fb248:	461d      	mov	r5, r3
 23fb24a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fb24c:	f7fb fc48 	bl	23f6ae0 <strcmp>
 23fb250:	b9c0      	cbnz	r0, 23fb284 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fb252:	b1a4      	cbz	r4, 23fb27e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fb254:	4629      	mov	r1, r5
 23fb256:	a801      	add	r0, sp, #4
 23fb258:	f7ff fcbe 	bl	23fabd8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fb25c:	2024      	movs	r0, #36	; 0x24
 23fb25e:	4917      	ldr	r1, [pc, #92]	; (23fb2bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fb260:	f001 fe8e 	bl	23fcf80 <_ZnwjRKSt9nothrow_t>
 23fb264:	4605      	mov	r5, r0
 23fb266:	b130      	cbz	r0, 23fb276 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fb268:	ab01      	add	r3, sp, #4
 23fb26a:	4632      	mov	r2, r6
 23fb26c:	4621      	mov	r1, r4
 23fb26e:	f7ff ffbf 	bl	23fb1f0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fb272:	4b13      	ldr	r3, [pc, #76]	; (23fb2c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fb274:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fb276:	a801      	add	r0, sp, #4
 23fb278:	f7fb fcde 	bl	23f6c38 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fb27c:	462c      	mov	r4, r5
}
 23fb27e:	4620      	mov	r0, r4
 23fb280:	b005      	add	sp, #20
 23fb282:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fb284:	4638      	mov	r0, r7
 23fb286:	490f      	ldr	r1, [pc, #60]	; (23fb2c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fb288:	f7fb fc2a 	bl	23f6ae0 <strcmp>
 23fb28c:	b990      	cbnz	r0, 23fb2b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fb28e:	2c00      	cmp	r4, #0
 23fb290:	d0f5      	beq.n	23fb27e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fb292:	4629      	mov	r1, r5
 23fb294:	a801      	add	r0, sp, #4
 23fb296:	f7ff fc9f 	bl	23fabd8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fb29a:	2024      	movs	r0, #36	; 0x24
 23fb29c:	4907      	ldr	r1, [pc, #28]	; (23fb2bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fb29e:	f001 fe6f 	bl	23fcf80 <_ZnwjRKSt9nothrow_t>
 23fb2a2:	4605      	mov	r5, r0
 23fb2a4:	2800      	cmp	r0, #0
 23fb2a6:	d0e6      	beq.n	23fb276 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fb2a8:	4632      	mov	r2, r6
 23fb2aa:	4621      	mov	r1, r4
 23fb2ac:	ab01      	add	r3, sp, #4
 23fb2ae:	f7ff ff9f 	bl	23fb1f0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fb2b2:	e7e0      	b.n	23fb276 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fb2b4:	2400      	movs	r4, #0
 23fb2b6:	e7e2      	b.n	23fb27e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fb2b8:	023ff865 	.word	0x023ff865
 23fb2bc:	023ffac4 	.word	0x023ffac4
 23fb2c0:	023ff8e4 	.word	0x023ff8e4
 23fb2c4:	023ff869 	.word	0x023ff869

023fb2c8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fb2c8:	4b01      	ldr	r3, [pc, #4]	; (23fb2d0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fb2ca:	4a02      	ldr	r2, [pc, #8]	; (23fb2d4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fb2cc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fb2ce:	4770      	bx	lr
 23fb2d0:	1007ae1c 	.word	0x1007ae1c
 23fb2d4:	023ff87a 	.word	0x023ff87a

023fb2d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fb2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fb2dc:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fb2de:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fb2e2:	4604      	mov	r4, r0
 23fb2e4:	460e      	mov	r6, r1
 23fb2e6:	4617      	mov	r7, r2
 23fb2e8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fb2ea:	f001 fb67 	bl	23fc9bc <_Z16_fetch_usbserialv>
 23fb2ee:	4581      	cmp	r9, r0
 23fb2f0:	d04d      	beq.n	23fb38e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fb2f2:	792b      	ldrb	r3, [r5, #4]
 23fb2f4:	0719      	lsls	r1, r3, #28
 23fb2f6:	d504      	bpl.n	23fb302 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fb2f8:	4620      	mov	r0, r4
 23fb2fa:	696a      	ldr	r2, [r5, #20]
 23fb2fc:	4954      	ldr	r1, [pc, #336]	; (23fb450 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fb2fe:	f7ff fae2 	bl	23fa8c6 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fb302:	f1b8 0f00 	cmp.w	r8, #0
 23fb306:	d00d      	beq.n	23fb324 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fb308:	215b      	movs	r1, #91	; 0x5b
 23fb30a:	4620      	mov	r0, r4
 23fb30c:	f7ff fa4e 	bl	23fa7ac <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fb310:	4641      	mov	r1, r8
 23fb312:	4620      	mov	r0, r4
 23fb314:	f7ff fa3b 	bl	23fa78e <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fb318:	6823      	ldr	r3, [r4, #0]
 23fb31a:	2202      	movs	r2, #2
 23fb31c:	4620      	mov	r0, r4
 23fb31e:	68db      	ldr	r3, [r3, #12]
 23fb320:	494c      	ldr	r1, [pc, #304]	; (23fb454 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fb322:	4798      	blx	r3
    if (attr.has_file) {
 23fb324:	792b      	ldrb	r3, [r5, #4]
 23fb326:	07da      	lsls	r2, r3, #31
 23fb328:	d524      	bpl.n	23fb374 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fb32a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fb32e:	212f      	movs	r1, #47	; 0x2f
 23fb330:	4640      	mov	r0, r8
 23fb332:	f002 f831 	bl	23fd398 <strrchr>
    if (s1) {
 23fb336:	b108      	cbz	r0, 23fb33c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fb338:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fb33c:	4641      	mov	r1, r8
 23fb33e:	4620      	mov	r0, r4
 23fb340:	f7ff fa25 	bl	23fa78e <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fb344:	792b      	ldrb	r3, [r5, #4]
 23fb346:	079b      	lsls	r3, r3, #30
 23fb348:	d508      	bpl.n	23fb35c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fb34a:	213a      	movs	r1, #58	; 0x3a
 23fb34c:	4620      	mov	r0, r4
 23fb34e:	f7ff fa2d 	bl	23fa7ac <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fb352:	4620      	mov	r0, r4
 23fb354:	68ea      	ldr	r2, [r5, #12]
 23fb356:	4940      	ldr	r1, [pc, #256]	; (23fb458 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fb358:	f7ff fab5 	bl	23fa8c6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fb35c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fb35e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fb360:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fb364:	4620      	mov	r0, r4
            write(", ", 2);
 23fb366:	f04f 0202 	mov.w	r2, #2
 23fb36a:	68db      	ldr	r3, [r3, #12]
 23fb36c:	bf14      	ite	ne
 23fb36e:	493b      	ldrne	r1, [pc, #236]	; (23fb45c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fb370:	493b      	ldreq	r1, [pc, #236]	; (23fb460 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fb372:	4798      	blx	r3
    if (attr.has_function) {
 23fb374:	792b      	ldrb	r3, [r5, #4]
 23fb376:	0758      	lsls	r0, r3, #29
 23fb378:	d51d      	bpl.n	23fb3b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fb37a:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fb37c:	460b      	mov	r3, r1
 23fb37e:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fb380:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fb384:	b160      	cbz	r0, 23fb3a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fb386:	2820      	cmp	r0, #32
 23fb388:	d108      	bne.n	23fb39c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fb38a:	4619      	mov	r1, r3
 23fb38c:	e7f7      	b.n	23fb37e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fb38e:	4835      	ldr	r0, [pc, #212]	; (23fb464 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fb390:	f000 f983 	bl	23fb69a <_ZN5spark12NetworkClass9listeningEv>
 23fb394:	2800      	cmp	r0, #0
 23fb396:	d0ac      	beq.n	23fb2f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fb398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fb39c:	2828      	cmp	r0, #40	; 0x28
 23fb39e:	d1ee      	bne.n	23fb37e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fb3a0:	6823      	ldr	r3, [r4, #0]
 23fb3a2:	1a52      	subs	r2, r2, r1
 23fb3a4:	4620      	mov	r0, r4
 23fb3a6:	68db      	ldr	r3, [r3, #12]
 23fb3a8:	4798      	blx	r3
        write("(): ", 4);
 23fb3aa:	6823      	ldr	r3, [r4, #0]
 23fb3ac:	2204      	movs	r2, #4
 23fb3ae:	4620      	mov	r0, r4
 23fb3b0:	68db      	ldr	r3, [r3, #12]
 23fb3b2:	492d      	ldr	r1, [pc, #180]	; (23fb468 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fb3b4:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fb3b6:	2100      	movs	r1, #0
 23fb3b8:	4638      	mov	r0, r7
 23fb3ba:	f7fe fb91 	bl	23f9ae0 <log_level_name>
 23fb3be:	4601      	mov	r1, r0
    write(s);
 23fb3c0:	4620      	mov	r0, r4
 23fb3c2:	f7ff f9e4 	bl	23fa78e <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fb3c6:	6823      	ldr	r3, [r4, #0]
 23fb3c8:	2202      	movs	r2, #2
 23fb3ca:	4620      	mov	r0, r4
 23fb3cc:	68db      	ldr	r3, [r3, #12]
 23fb3ce:	4924      	ldr	r1, [pc, #144]	; (23fb460 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fb3d0:	4798      	blx	r3
    if (msg) {
 23fb3d2:	b11e      	cbz	r6, 23fb3dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fb3d4:	4631      	mov	r1, r6
 23fb3d6:	4620      	mov	r0, r4
 23fb3d8:	f7ff f9d9 	bl	23fa78e <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fb3dc:	792b      	ldrb	r3, [r5, #4]
 23fb3de:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fb3e2:	d02c      	beq.n	23fb43e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fb3e4:	6823      	ldr	r3, [r4, #0]
 23fb3e6:	4921      	ldr	r1, [pc, #132]	; (23fb46c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fb3e8:	68db      	ldr	r3, [r3, #12]
 23fb3ea:	2202      	movs	r2, #2
 23fb3ec:	4620      	mov	r0, r4
 23fb3ee:	4798      	blx	r3
        if (attr.has_code) {
 23fb3f0:	792b      	ldrb	r3, [r5, #4]
 23fb3f2:	06d9      	lsls	r1, r3, #27
 23fb3f4:	d50a      	bpl.n	23fb40c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fb3f6:	6823      	ldr	r3, [r4, #0]
 23fb3f8:	2207      	movs	r2, #7
 23fb3fa:	4620      	mov	r0, r4
 23fb3fc:	491c      	ldr	r1, [pc, #112]	; (23fb470 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fb3fe:	68db      	ldr	r3, [r3, #12]
 23fb400:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fb402:	4620      	mov	r0, r4
 23fb404:	69aa      	ldr	r2, [r5, #24]
 23fb406:	491b      	ldr	r1, [pc, #108]	; (23fb474 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fb408:	f7ff fa5d 	bl	23fa8c6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fb40c:	792b      	ldrb	r3, [r5, #4]
 23fb40e:	069a      	lsls	r2, r3, #26
 23fb410:	d511      	bpl.n	23fb436 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fb412:	06db      	lsls	r3, r3, #27
 23fb414:	d505      	bpl.n	23fb422 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fb416:	6823      	ldr	r3, [r4, #0]
 23fb418:	2202      	movs	r2, #2
 23fb41a:	4620      	mov	r0, r4
 23fb41c:	68db      	ldr	r3, [r3, #12]
 23fb41e:	490f      	ldr	r1, [pc, #60]	; (23fb45c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fb420:	4798      	blx	r3
            write("details = ", 10);
 23fb422:	6823      	ldr	r3, [r4, #0]
 23fb424:	4620      	mov	r0, r4
 23fb426:	4914      	ldr	r1, [pc, #80]	; (23fb478 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fb428:	220a      	movs	r2, #10
 23fb42a:	68db      	ldr	r3, [r3, #12]
 23fb42c:	4798      	blx	r3
            write(attr.details);
 23fb42e:	4620      	mov	r0, r4
 23fb430:	69e9      	ldr	r1, [r5, #28]
 23fb432:	f7ff f9ac 	bl	23fa78e <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fb436:	215d      	movs	r1, #93	; 0x5d
 23fb438:	4620      	mov	r0, r4
 23fb43a:	f7ff f9b7 	bl	23fa7ac <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fb43e:	6823      	ldr	r3, [r4, #0]
 23fb440:	4620      	mov	r0, r4
}
 23fb442:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fb446:	2202      	movs	r2, #2
 23fb448:	68db      	ldr	r3, [r3, #12]
 23fb44a:	490c      	ldr	r1, [pc, #48]	; (23fb47c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fb44c:	4718      	bx	r3
 23fb44e:	bf00      	nop
 23fb450:	023ff87e 	.word	0x023ff87e
 23fb454:	023ff885 	.word	0x023ff885
 23fb458:	023ff988 	.word	0x023ff988
 23fb45c:	023ff4bd 	.word	0x023ff4bd
 23fb460:	023ff65d 	.word	0x023ff65d
 23fb464:	1007ae48 	.word	0x1007ae48
 23fb468:	023ff65b 	.word	0x023ff65b
 23fb46c:	023ff660 	.word	0x023ff660
 23fb470:	023ff888 	.word	0x023ff888
 23fb474:	023ff890 	.word	0x023ff890
 23fb478:	023ff66d 	.word	0x023ff66d
 23fb47c:	023ff893 	.word	0x023ff893

023fb480 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fb480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb484:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fb486:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fb488:	460d      	mov	r5, r1
 23fb48a:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fb48c:	f001 fa96 	bl	23fc9bc <_Z16_fetch_usbserialv>
 23fb490:	4287      	cmp	r7, r0
 23fb492:	d007      	beq.n	23fb4a4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fb494:	6a20      	ldr	r0, [r4, #32]
 23fb496:	4632      	mov	r2, r6
 23fb498:	6803      	ldr	r3, [r0, #0]
 23fb49a:	4629      	mov	r1, r5
}
 23fb49c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fb4a0:	68db      	ldr	r3, [r3, #12]
 23fb4a2:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fb4a4:	4803      	ldr	r0, [pc, #12]	; (23fb4b4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fb4a6:	f000 f8f8 	bl	23fb69a <_ZN5spark12NetworkClass9listeningEv>
 23fb4aa:	2800      	cmp	r0, #0
 23fb4ac:	d0f2      	beq.n	23fb494 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fb4ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fb4b2:	bf00      	nop
 23fb4b4:	1007ae48 	.word	0x1007ae48

023fb4b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fb4b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fb4bc:	b085      	sub	sp, #20
    return stream_;
 23fb4be:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fb4c2:	4605      	mov	r5, r0
 23fb4c4:	460f      	mov	r7, r1
 23fb4c6:	4690      	mov	r8, r2
 23fb4c8:	461e      	mov	r6, r3
 23fb4ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fb4cc:	f001 fa76 	bl	23fc9bc <_Z16_fetch_usbserialv>
 23fb4d0:	4581      	cmp	r9, r0
 23fb4d2:	d105      	bne.n	23fb4e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fb4d4:	4849      	ldr	r0, [pc, #292]	; (23fb5fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fb4d6:	f000 f8e0 	bl	23fb69a <_ZN5spark12NetworkClass9listeningEv>
 23fb4da:	2800      	cmp	r0, #0
 23fb4dc:	f040 808a 	bne.w	23fb5f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fb4e0:	f04f 0900 	mov.w	r9, #0
 23fb4e4:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fb4e6:	4a46      	ldr	r2, [pc, #280]	; (23fb600 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fb4e8:	a801      	add	r0, sp, #4
 23fb4ea:	9201      	str	r2, [sp, #4]
 23fb4ec:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fb4ee:	f88d 9008 	strb.w	r9, [sp, #8]
 23fb4f2:	f7ff f828 	bl	23fa546 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fb4f6:	4649      	mov	r1, r9
 23fb4f8:	4640      	mov	r0, r8
 23fb4fa:	f7fe faf1 	bl	23f9ae0 <log_level_name>
 23fb4fe:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fb500:	4940      	ldr	r1, [pc, #256]	; (23fb604 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fb502:	2201      	movs	r2, #1
 23fb504:	a801      	add	r0, sp, #4
 23fb506:	f7ff f8ad 	bl	23fa664 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb50a:	4641      	mov	r1, r8
 23fb50c:	f7ff f931 	bl	23fa772 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fb510:	b13f      	cbz	r7, 23fb522 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fb512:	493d      	ldr	r1, [pc, #244]	; (23fb608 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fb514:	2201      	movs	r2, #1
 23fb516:	a801      	add	r0, sp, #4
 23fb518:	f7ff f8a4 	bl	23fa664 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb51c:	4639      	mov	r1, r7
 23fb51e:	f7ff f928 	bl	23fa772 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fb522:	b13e      	cbz	r6, 23fb534 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fb524:	4939      	ldr	r1, [pc, #228]	; (23fb60c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fb526:	2201      	movs	r2, #1
 23fb528:	a801      	add	r0, sp, #4
 23fb52a:	f7ff f89b 	bl	23fa664 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb52e:	4631      	mov	r1, r6
 23fb530:	f7ff f91f 	bl	23fa772 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fb534:	7923      	ldrb	r3, [r4, #4]
 23fb536:	07df      	lsls	r7, r3, #31
 23fb538:	d50e      	bpl.n	23fb558 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fb53a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fb53c:	212f      	movs	r1, #47	; 0x2f
 23fb53e:	4630      	mov	r0, r6
 23fb540:	f001 ff2a 	bl	23fd398 <strrchr>
    if (s1) {
 23fb544:	b100      	cbz	r0, 23fb548 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fb546:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fb548:	4931      	ldr	r1, [pc, #196]	; (23fb610 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fb54a:	2201      	movs	r2, #1
 23fb54c:	a801      	add	r0, sp, #4
 23fb54e:	f7ff f889 	bl	23fa664 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb552:	4631      	mov	r1, r6
 23fb554:	f7ff f90d 	bl	23fa772 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fb558:	7923      	ldrb	r3, [r4, #4]
 23fb55a:	079e      	lsls	r6, r3, #30
 23fb55c:	d507      	bpl.n	23fb56e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fb55e:	492d      	ldr	r1, [pc, #180]	; (23fb614 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fb560:	2202      	movs	r2, #2
 23fb562:	a801      	add	r0, sp, #4
 23fb564:	f7ff f87e 	bl	23fa664 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb568:	68e1      	ldr	r1, [r4, #12]
 23fb56a:	f7fe fff9 	bl	23fa560 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fb56e:	7923      	ldrb	r3, [r4, #4]
 23fb570:	0758      	lsls	r0, r3, #29
 23fb572:	d514      	bpl.n	23fb59e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fb574:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fb576:	4633      	mov	r3, r6
 23fb578:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fb57a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fb57e:	b12a      	cbz	r2, 23fb58c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fb580:	2a20      	cmp	r2, #32
 23fb582:	d101      	bne.n	23fb588 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fb584:	461e      	mov	r6, r3
 23fb586:	e7f7      	b.n	23fb578 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fb588:	2a28      	cmp	r2, #40	; 0x28
 23fb58a:	d1f5      	bne.n	23fb578 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fb58c:	2202      	movs	r2, #2
 23fb58e:	4922      	ldr	r1, [pc, #136]	; (23fb618 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fb590:	a801      	add	r0, sp, #4
 23fb592:	f7ff f867 	bl	23fa664 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb596:	4631      	mov	r1, r6
 23fb598:	1bba      	subs	r2, r7, r6
 23fb59a:	f7ff f873 	bl	23fa684 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fb59e:	7923      	ldrb	r3, [r4, #4]
 23fb5a0:	0719      	lsls	r1, r3, #28
 23fb5a2:	d507      	bpl.n	23fb5b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fb5a4:	491d      	ldr	r1, [pc, #116]	; (23fb61c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fb5a6:	2201      	movs	r2, #1
 23fb5a8:	a801      	add	r0, sp, #4
 23fb5aa:	f7ff f85b 	bl	23fa664 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb5ae:	6961      	ldr	r1, [r4, #20]
 23fb5b0:	f7fe ffe8 	bl	23fa584 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fb5b4:	7923      	ldrb	r3, [r4, #4]
 23fb5b6:	06da      	lsls	r2, r3, #27
 23fb5b8:	d508      	bpl.n	23fb5cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fb5ba:	2204      	movs	r2, #4
 23fb5bc:	4918      	ldr	r1, [pc, #96]	; (23fb620 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fb5be:	eb0d 0002 	add.w	r0, sp, r2
 23fb5c2:	f7ff f84f 	bl	23fa664 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb5c6:	69a1      	ldr	r1, [r4, #24]
 23fb5c8:	f7fe ffca 	bl	23fa560 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fb5cc:	7923      	ldrb	r3, [r4, #4]
 23fb5ce:	069b      	lsls	r3, r3, #26
 23fb5d0:	d507      	bpl.n	23fb5e2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fb5d2:	4914      	ldr	r1, [pc, #80]	; (23fb624 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fb5d4:	2206      	movs	r2, #6
 23fb5d6:	a801      	add	r0, sp, #4
 23fb5d8:	f7ff f844 	bl	23fa664 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb5dc:	69e1      	ldr	r1, [r4, #28]
 23fb5de:	f7ff f8c8 	bl	23fa772 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fb5e2:	a801      	add	r0, sp, #4
 23fb5e4:	f7fe ff99 	bl	23fa51a <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fb5e8:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fb5ea:	2202      	movs	r2, #2
 23fb5ec:	6803      	ldr	r3, [r0, #0]
 23fb5ee:	490e      	ldr	r1, [pc, #56]	; (23fb628 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fb5f0:	68db      	ldr	r3, [r3, #12]
 23fb5f2:	4798      	blx	r3
}
 23fb5f4:	b005      	add	sp, #20
 23fb5f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fb5fa:	bf00      	nop
 23fb5fc:	1007ae48 	.word	0x1007ae48
 23fb600:	023ff8b4 	.word	0x023ff8b4
 23fb604:	023ff85b 	.word	0x023ff85b
 23fb608:	023ff896 	.word	0x023ff896
 23fb60c:	023ffec0 	.word	0x023ffec0
 23fb610:	023ff5ee 	.word	0x023ff5ee
 23fb614:	023ff898 	.word	0x023ff898
 23fb618:	023ff89b 	.word	0x023ff89b
 23fb61c:	023ff5c8 	.word	0x023ff5c8
 23fb620:	023ff89e 	.word	0x023ff89e
 23fb624:	023ff8a3 	.word	0x023ff8a3
 23fb628:	023ff893 	.word	0x023ff893

023fb62c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fb62c:	2300      	movs	r3, #0
 23fb62e:	6840      	ldr	r0, [r0, #4]
 23fb630:	461a      	mov	r2, r3
 23fb632:	f7fe bb51 	b.w	23f9cd8 <network_connect>

023fb636 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fb636:	2200      	movs	r2, #0
 23fb638:	2102      	movs	r1, #2
 23fb63a:	6840      	ldr	r0, [r0, #4]
 23fb63c:	f7fe bb68 	b.w	23f9d10 <network_disconnect>

023fb640 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fb640:	2200      	movs	r2, #0
 23fb642:	6840      	ldr	r0, [r0, #4]
 23fb644:	4611      	mov	r1, r2
 23fb646:	f7fe bb55 	b.w	23f9cf4 <network_connecting>

023fb64a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fb64a:	2200      	movs	r2, #0
 23fb64c:	6840      	ldr	r0, [r0, #4]
 23fb64e:	4611      	mov	r1, r2
 23fb650:	f7fe bb6c 	b.w	23f9d2c <network_ready>

023fb654 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fb654:	2300      	movs	r3, #0
 23fb656:	6840      	ldr	r0, [r0, #4]
 23fb658:	461a      	mov	r2, r3
 23fb65a:	4619      	mov	r1, r3
 23fb65c:	f7fe bb74 	b.w	23f9d48 <network_on>

023fb660 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fb660:	2300      	movs	r3, #0
 23fb662:	6840      	ldr	r0, [r0, #4]
 23fb664:	461a      	mov	r2, r3
 23fb666:	4619      	mov	r1, r3
 23fb668:	f7fe bb7c 	b.w	23f9d64 <network_off>

023fb66c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fb66c:	2100      	movs	r1, #0
 23fb66e:	6840      	ldr	r0, [r0, #4]
 23fb670:	f7fe bbcc 	b.w	23f9e0c <network_is_on>

023fb674 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fb674:	2100      	movs	r1, #0
 23fb676:	6840      	ldr	r0, [r0, #4]
 23fb678:	f7fe bbd6 	b.w	23f9e28 <network_is_off>

023fb67c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fb67c:	2200      	movs	r2, #0
 23fb67e:	6840      	ldr	r0, [r0, #4]
 23fb680:	f081 0101 	eor.w	r1, r1, #1
 23fb684:	f7fe bb7c 	b.w	23f9d80 <network_listen>

023fb688 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fb688:	2200      	movs	r2, #0
 23fb68a:	6840      	ldr	r0, [r0, #4]
 23fb68c:	f7fe bba2 	b.w	23f9dd4 <network_set_listen_timeout>

023fb690 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fb690:	2200      	movs	r2, #0
 23fb692:	6840      	ldr	r0, [r0, #4]
 23fb694:	4611      	mov	r1, r2
 23fb696:	f7fe bbab 	b.w	23f9df0 <network_get_listen_timeout>

023fb69a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fb69a:	2200      	movs	r2, #0
 23fb69c:	6840      	ldr	r0, [r0, #4]
 23fb69e:	4611      	mov	r1, r2
 23fb6a0:	f7fe bb7c 	b.w	23f9d9c <network_listening>

023fb6a4 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_preferred(*this, preferred, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23fb6a4:	2100      	movs	r1, #0
 23fb6a6:	6840      	ldr	r0, [r0, #4]
 23fb6a8:	f7fe bbda 	b.w	23f9e60 <network_is_preferred>

023fb6ac <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fb6ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fb6b0:	b095      	sub	sp, #84	; 0x54
 23fb6b2:	4614      	mov	r4, r2
 23fb6b4:	460d      	mov	r5, r1
 23fb6b6:	4607      	mov	r7, r0
    IPAddress addr;
 23fb6b8:	f7fe fdc8 	bl	23fa24c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fb6bc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fb6be:	221c      	movs	r2, #28
 23fb6c0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fb6c2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fb6c4:	f001 fdeb 	bl	23fd29e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fb6c8:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fb6ca:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fb6cc:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fb6ce:	2100      	movs	r1, #0
 23fb6d0:	466b      	mov	r3, sp
 23fb6d2:	aa0c      	add	r2, sp, #48	; 0x30
 23fb6d4:	f7fe f81a 	bl	23f970c <netdb_getaddrinfo>
    if (!r) {
 23fb6d8:	4604      	mov	r4, r0
 23fb6da:	2800      	cmp	r0, #0
 23fb6dc:	d14b      	bne.n	23fb776 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fb6de:	4602      	mov	r2, r0
 23fb6e0:	2101      	movs	r1, #1
 23fb6e2:	6868      	ldr	r0, [r5, #4]
 23fb6e4:	f7fe fb22 	bl	23f9d2c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fb6e8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fb6ea:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fb6ec:	4622      	mov	r2, r4
 23fb6ee:	6868      	ldr	r0, [r5, #4]
 23fb6f0:	f7fe fb1c 	bl	23f9d2c <network_ready>
        bool ok = false;
 23fb6f4:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fb6f6:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fb6f8:	9e00      	ldr	r6, [sp, #0]
 23fb6fa:	2e00      	cmp	r6, #0
 23fb6fc:	d03b      	beq.n	23fb776 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fb6fe:	2900      	cmp	r1, #0
 23fb700:	d139      	bne.n	23fb776 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fb702:	6873      	ldr	r3, [r6, #4]
 23fb704:	2b02      	cmp	r3, #2
 23fb706:	d003      	beq.n	23fb710 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fb708:	2b0a      	cmp	r3, #10
 23fb70a:	d011      	beq.n	23fb730 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fb70c:	69f6      	ldr	r6, [r6, #28]
 23fb70e:	e7f4      	b.n	23fb6fa <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fb710:	f1b8 0f00 	cmp.w	r8, #0
 23fb714:	d0fa      	beq.n	23fb70c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fb716:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fb718:	a806      	add	r0, sp, #24
 23fb71a:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fb71c:	1d3c      	adds	r4, r7, #4
 23fb71e:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fb720:	f7fe fdd8 	bl	23fa2d4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fb724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fb726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fb728:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fb72a:	4641      	mov	r1, r8
 23fb72c:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fb72e:	e7ed      	b.n	23fb70c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fb730:	f1b9 0f00 	cmp.w	r9, #0
 23fb734:	d0ea      	beq.n	23fb70c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fb736:	2210      	movs	r2, #16
 23fb738:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fb73a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fb73c:	f001 fdaf 	bl	23fd29e <memset>
                    a.v = 6;
 23fb740:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fb742:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fb744:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fb748:	f104 0308 	add.w	r3, r4, #8
 23fb74c:	3418      	adds	r4, #24
 23fb74e:	462a      	mov	r2, r5
 23fb750:	6818      	ldr	r0, [r3, #0]
 23fb752:	6859      	ldr	r1, [r3, #4]
 23fb754:	3308      	adds	r3, #8
 23fb756:	c203      	stmia	r2!, {r0, r1}
 23fb758:	42a3      	cmp	r3, r4
 23fb75a:	4615      	mov	r5, r2
 23fb75c:	d1f7      	bne.n	23fb74e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fb75e:	a901      	add	r1, sp, #4
 23fb760:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fb762:	1d3c      	adds	r4, r7, #4
 23fb764:	ad07      	add	r5, sp, #28
 23fb766:	f7fe fd7f 	bl	23fa268 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fb76a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fb76c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fb76e:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fb770:	4649      	mov	r1, r9
 23fb772:	7023      	strb	r3, [r4, #0]
                    break;
 23fb774:	e7ca      	b.n	23fb70c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fb776:	9800      	ldr	r0, [sp, #0]
 23fb778:	f7fd ffba 	bl	23f96f0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fb77c:	4638      	mov	r0, r7
 23fb77e:	b015      	add	sp, #84	; 0x54
 23fb780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fb784 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23fb784:	3803      	subs	r0, #3
 23fb786:	2802      	cmp	r0, #2
 23fb788:	bf9a      	itte	ls
 23fb78a:	4b02      	ldrls	r3, [pc, #8]	; (23fb794 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23fb78c:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23fb790:	4801      	ldrhi	r0, [pc, #4]	; (23fb798 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23fb792:	4770      	bx	lr
 23fb794:	023ff924 	.word	0x023ff924
 23fb798:	1007ae48 	.word	0x1007ae48

023fb79c <_ZN5spark12NetworkClass9preferredEb>:
NetworkClass& NetworkClass::preferred(bool preferred) {
 23fb79c:	b508      	push	{r3, lr}
    network_handle_t network = network_preferred(*this, preferred, nullptr);
 23fb79e:	2200      	movs	r2, #0
 23fb7a0:	6840      	ldr	r0, [r0, #4]
 23fb7a2:	f7fe fb4f 	bl	23f9e44 <network_preferred>
}
 23fb7a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23fb7aa:	f7ff bfeb 	b.w	23fb784 <_ZN5spark12NetworkClass4fromEm>
	...

023fb7b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fb7b0:	4b02      	ldr	r3, [pc, #8]	; (23fb7bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fb7b2:	4a03      	ldr	r2, [pc, #12]	; (23fb7c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fb7b4:	601a      	str	r2, [r3, #0]
 23fb7b6:	2200      	movs	r2, #0
 23fb7b8:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fb7ba:	4770      	bx	lr
 23fb7bc:	1007ae48 	.word	0x1007ae48
 23fb7c0:	023ff938 	.word	0x023ff938

023fb7c4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fb7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb7c6:	4606      	mov	r6, r0
 23fb7c8:	460d      	mov	r5, r1
  size_t n = 0;
 23fb7ca:	2400      	movs	r4, #0
 23fb7cc:	188f      	adds	r7, r1, r2
  while (size--) {
 23fb7ce:	42bd      	cmp	r5, r7
 23fb7d0:	d00c      	beq.n	23fb7ec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fb7d2:	6833      	ldr	r3, [r6, #0]
 23fb7d4:	4630      	mov	r0, r6
 23fb7d6:	689b      	ldr	r3, [r3, #8]
 23fb7d8:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fb7dc:	4798      	blx	r3
     if (chunk>=0)
 23fb7de:	1e03      	subs	r3, r0, #0
 23fb7e0:	db01      	blt.n	23fb7e6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fb7e2:	441c      	add	r4, r3
  while (size--) {
 23fb7e4:	e7f3      	b.n	23fb7ce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fb7e6:	2c00      	cmp	r4, #0
 23fb7e8:	bf08      	it	eq
 23fb7ea:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fb7ec:	4620      	mov	r0, r4
 23fb7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fb7f0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fb7f0:	b513      	push	{r0, r1, r4, lr}
 23fb7f2:	4604      	mov	r4, r0
    }
 23fb7f4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fb7f6:	b159      	cbz	r1, 23fb810 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fb7f8:	9101      	str	r1, [sp, #4]
 23fb7fa:	f7fb f97b 	bl	23f6af4 <strlen>
 23fb7fe:	4602      	mov	r2, r0
 23fb800:	4620      	mov	r0, r4
 23fb802:	6823      	ldr	r3, [r4, #0]
 23fb804:	9901      	ldr	r1, [sp, #4]
 23fb806:	68db      	ldr	r3, [r3, #12]
    }
 23fb808:	b002      	add	sp, #8
 23fb80a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fb80e:	4718      	bx	r3
    }
 23fb810:	b002      	add	sp, #8
 23fb812:	bd10      	pop	{r4, pc}

023fb814 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fb814:	6803      	ldr	r3, [r0, #0]
 23fb816:	689b      	ldr	r3, [r3, #8]
 23fb818:	4718      	bx	r3

023fb81a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fb81a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fb81c:	2a01      	cmp	r2, #1
 23fb81e:	bf98      	it	ls
 23fb820:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fb822:	b530      	push	{r4, r5, lr}
 23fb824:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fb826:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fb82a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fb82c:	460d      	mov	r5, r1
 23fb82e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fb832:	fb01 5312 	mls	r3, r1, r2, r5
 23fb836:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fb83a:	2b09      	cmp	r3, #9
 23fb83c:	bf94      	ite	ls
 23fb83e:	3330      	addls	r3, #48	; 0x30
 23fb840:	3337      	addhi	r3, #55	; 0x37
 23fb842:	b2db      	uxtb	r3, r3
  } while(n);
 23fb844:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fb846:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fb84a:	d9ef      	bls.n	23fb82c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fb84c:	4621      	mov	r1, r4
 23fb84e:	f7ff ffcf 	bl	23fb7f0 <_ZN5Print5writeEPKc>
}
 23fb852:	b00b      	add	sp, #44	; 0x2c
 23fb854:	bd30      	pop	{r4, r5, pc}
	...

023fb858 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fb858:	2200      	movs	r2, #0
 23fb85a:	4b01      	ldr	r3, [pc, #4]	; (23fb860 <_GLOBAL__sub_I_RGB+0x8>)
 23fb85c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fb85e:	4770      	bx	lr
 23fb860:	1007ae50 	.word	0x1007ae50

023fb864 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fb864:	b510      	push	{r4, lr}
 23fb866:	4604      	mov	r4, r0
 23fb868:	4608      	mov	r0, r1
{
    _spi = spi;
 23fb86a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fb86c:	f7fd ffb0 	bl	23f97d0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fb870:	2300      	movs	r3, #0
}
 23fb872:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fb874:	6063      	str	r3, [r4, #4]
}
 23fb876:	bd10      	pop	{r4, pc}

023fb878 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 23fb878:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb87c:	ec57 6b10 	vmov	r6, r7, d0
 23fb880:	4680      	mov	r8, r0
 23fb882:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
 23fb884:	2200      	movs	r2, #0
 23fb886:	2300      	movs	r3, #0
 23fb888:	ee10 0a10 	vmov	r0, s0
 23fb88c:	4639      	mov	r1, r7
 23fb88e:	f7fa fead 	bl	23f65ec <__aeabi_dcmplt>
 23fb892:	b128      	cbz	r0, 23fb8a0 <_Z4dtoadhPc+0x28>
        val = -val;
 23fb894:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 23fb898:	461f      	mov	r7, r3
        *sout++ = '-';
 23fb89a:	232d      	movs	r3, #45	; 0x2d
 23fb89c:	f804 3b01 	strb.w	r3, [r4], #1
 23fb8a0:	2300      	movs	r3, #0
    }
    long scale = 1;
 23fb8a2:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 23fb8a6:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 23fb8a8:	b2d9      	uxtb	r1, r3
 23fb8aa:	4588      	cmp	r8, r1
 23fb8ac:	d903      	bls.n	23fb8b6 <_Z4dtoadhPc+0x3e>
        scale *= 10;
 23fb8ae:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
 23fb8b2:	3301      	adds	r3, #1
 23fb8b4:	e7f8      	b.n	23fb8a8 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
 23fb8b6:	4648      	mov	r0, r9
 23fb8b8:	f7fa fbbc 	bl	23f6034 <__aeabi_i2d>
 23fb8bc:	4632      	mov	r2, r6
 23fb8be:	463b      	mov	r3, r7
 23fb8c0:	f7fa fc22 	bl	23f6108 <__aeabi_dmul>
 23fb8c4:	4606      	mov	r6, r0
 23fb8c6:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
 23fb8c8:	f7fa ff74 	bl	23f67b4 <__aeabi_d2ulz>
 23fb8cc:	468a      	mov	sl, r1
 23fb8ce:	4605      	mov	r5, r0
 23fb8d0:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
 23fb8d2:	f7fa fbe3 	bl	23f609c <__aeabi_ul2d>
 23fb8d6:	4602      	mov	r2, r0
 23fb8d8:	460b      	mov	r3, r1
 23fb8da:	4630      	mov	r0, r6
 23fb8dc:	4639      	mov	r1, r7
 23fb8de:	f7fa fa5b 	bl	23f5d98 <__aeabi_dsub>
 23fb8e2:	2200      	movs	r2, #0
 23fb8e4:	4b13      	ldr	r3, [pc, #76]	; (23fb934 <_Z4dtoadhPc+0xbc>)
 23fb8e6:	f7fa fe95 	bl	23f6614 <__aeabi_dcmpge>
 23fb8ea:	b110      	cbz	r0, 23fb8f2 <_Z4dtoadhPc+0x7a>
        fixed++;
 23fb8ec:	3501      	adds	r5, #1
 23fb8ee:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
 23fb8f2:	464a      	mov	r2, r9
 23fb8f4:	4628      	mov	r0, r5
 23fb8f6:	4659      	mov	r1, fp
 23fb8f8:	17d3      	asrs	r3, r2, #31
 23fb8fa:	f7fa ff0f 	bl	23f671c <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 23fb8fe:	2301      	movs	r3, #1
 23fb900:	4615      	mov	r5, r2
 23fb902:	4621      	mov	r1, r4
 23fb904:	220a      	movs	r2, #10
 23fb906:	f001 f8da 	bl	23fcabe <ultoa>
    if (prec) {
 23fb90a:	f1b8 0f00 	cmp.w	r8, #0
 23fb90e:	d00e      	beq.n	23fb92e <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
 23fb910:	4620      	mov	r0, r4
 23fb912:	f7fb f8ef 	bl	23f6af4 <strlen>
        *sout++ = '.';
 23fb916:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 23fb918:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 23fb91a:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 23fb91c:	220a      	movs	r2, #10
 23fb91e:	4643      	mov	r3, r8
 23fb920:	4628      	mov	r0, r5
 23fb922:	3101      	adds	r1, #1
    }
}
 23fb924:	b001      	add	sp, #4
 23fb926:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
 23fb92a:	f001 b8c8 	b.w	23fcabe <ultoa>
}
 23fb92e:	b001      	add	sp, #4
 23fb930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb934:	3fe00000 	.word	0x3fe00000

023fb938 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23fb938:	b510      	push	{r4, lr}
 23fb93a:	4604      	mov	r4, r0
{
    free(buffer);
 23fb93c:	6800      	ldr	r0, [r0, #0]
 23fb93e:	f7fe faab 	bl	23f9e98 <free>
}
 23fb942:	4620      	mov	r0, r4
 23fb944:	bd10      	pop	{r4, pc}

023fb946 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23fb946:	b510      	push	{r4, lr}
 23fb948:	4604      	mov	r4, r0
    if (buffer) {
 23fb94a:	6800      	ldr	r0, [r0, #0]
 23fb94c:	b108      	cbz	r0, 23fb952 <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23fb94e:	f7fe faa3 	bl	23f9e98 <free>
    }
    buffer = nullptr;
 23fb952:	2300      	movs	r3, #0
    capacity = len = 0;
 23fb954:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23fb958:	6023      	str	r3, [r4, #0]
}
 23fb95a:	bd10      	pop	{r4, pc}

023fb95c <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fb95c:	b538      	push	{r3, r4, r5, lr}
 23fb95e:	4604      	mov	r4, r0
 23fb960:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fb962:	6800      	ldr	r0, [r0, #0]
 23fb964:	3101      	adds	r1, #1
 23fb966:	f7fe faa5 	bl	23f9eb4 <realloc>
    if (newbuffer) {
 23fb96a:	b110      	cbz	r0, 23fb972 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
 23fb96c:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23fb970:	2001      	movs	r0, #1
    }
    return 0;
}
 23fb972:	bd38      	pop	{r3, r4, r5, pc}

023fb974 <_ZN6String7reserveEj>:
{
 23fb974:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
 23fb976:	6803      	ldr	r3, [r0, #0]
{
 23fb978:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
 23fb97a:	b123      	cbz	r3, 23fb986 <_ZN6String7reserveEj+0x12>
 23fb97c:	6843      	ldr	r3, [r0, #4]
 23fb97e:	428b      	cmp	r3, r1
 23fb980:	d301      	bcc.n	23fb986 <_ZN6String7reserveEj+0x12>
 23fb982:	2001      	movs	r0, #1
}
 23fb984:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23fb986:	4620      	mov	r0, r4
 23fb988:	f7ff ffe8 	bl	23fb95c <_ZN6String12changeBufferEj>
 23fb98c:	2800      	cmp	r0, #0
 23fb98e:	d0f9      	beq.n	23fb984 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23fb990:	68a3      	ldr	r3, [r4, #8]
 23fb992:	2b00      	cmp	r3, #0
 23fb994:	d1f5      	bne.n	23fb982 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23fb996:	6822      	ldr	r2, [r4, #0]
 23fb998:	7013      	strb	r3, [r2, #0]
 23fb99a:	e7f2      	b.n	23fb982 <_ZN6String7reserveEj+0xe>

023fb99c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fb99c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fb99e:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23fb9a0:	4611      	mov	r1, r2
 23fb9a2:	9201      	str	r2, [sp, #4]
{
 23fb9a4:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23fb9a6:	f7ff ffe5 	bl	23fb974 <_ZN6String7reserveEj>
 23fb9aa:	9a01      	ldr	r2, [sp, #4]
 23fb9ac:	b928      	cbnz	r0, 23fb9ba <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23fb9ae:	4620      	mov	r0, r4
 23fb9b0:	f7ff ffc9 	bl	23fb946 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23fb9b4:	4620      	mov	r0, r4
 23fb9b6:	b003      	add	sp, #12
 23fb9b8:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23fb9ba:	4629      	mov	r1, r5
    len = length;
 23fb9bc:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23fb9be:	6820      	ldr	r0, [r4, #0]
 23fb9c0:	f001 fc46 	bl	23fd250 <memcpy>
    buffer[len] = 0;
 23fb9c4:	2100      	movs	r1, #0
 23fb9c6:	6822      	ldr	r2, [r4, #0]
 23fb9c8:	68a3      	ldr	r3, [r4, #8]
 23fb9ca:	54d1      	strb	r1, [r2, r3]
    return *this;
 23fb9cc:	e7f2      	b.n	23fb9b4 <_ZN6String4copyEPKcj+0x18>

023fb9ce <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
 23fb9ce:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fb9d0:	b513      	push	{r0, r1, r4, lr}
 23fb9d2:	4604      	mov	r4, r0
    capacity = 0;
 23fb9d4:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fb9d8:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fb9da:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23fb9dc:	b141      	cbz	r1, 23fb9f0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
 23fb9de:	4608      	mov	r0, r1
 23fb9e0:	9101      	str	r1, [sp, #4]
 23fb9e2:	f7fb f887 	bl	23f6af4 <strlen>
 23fb9e6:	9901      	ldr	r1, [sp, #4]
 23fb9e8:	4602      	mov	r2, r0
 23fb9ea:	4620      	mov	r0, r4
 23fb9ec:	f7ff ffd6 	bl	23fb99c <_ZN6String4copyEPKcj>
}
 23fb9f0:	4620      	mov	r0, r4
 23fb9f2:	b002      	add	sp, #8
 23fb9f4:	bd10      	pop	{r4, pc}

023fb9f6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fb9f6:	b538      	push	{r3, r4, r5, lr}
 23fb9f8:	4605      	mov	r5, r0
    if (buffer) {
 23fb9fa:	6800      	ldr	r0, [r0, #0]
{
 23fb9fc:	460c      	mov	r4, r1
    if (buffer) {
 23fb9fe:	b170      	cbz	r0, 23fba1e <_ZN6String4moveERS_+0x28>
        if (capacity >= rhs.len && rhs.buffer) {
 23fba00:	686a      	ldr	r2, [r5, #4]
 23fba02:	688b      	ldr	r3, [r1, #8]
 23fba04:	429a      	cmp	r2, r3
 23fba06:	d308      	bcc.n	23fba1a <_ZN6String4moveERS_+0x24>
 23fba08:	6809      	ldr	r1, [r1, #0]
 23fba0a:	b131      	cbz	r1, 23fba1a <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
 23fba0c:	f001 fc95 	bl	23fd33a <strcpy>
            len = rhs.len;
 23fba10:	68a3      	ldr	r3, [r4, #8]
 23fba12:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
 23fba14:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity = rhs.capacity;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity = 0;
    rhs.len = 0;
 23fba16:	60a3      	str	r3, [r4, #8]
}
 23fba18:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
 23fba1a:	f7fe fa3d 	bl	23f9e98 <free>
    buffer = rhs.buffer;
 23fba1e:	6823      	ldr	r3, [r4, #0]
 23fba20:	602b      	str	r3, [r5, #0]
    capacity = rhs.capacity;
 23fba22:	6863      	ldr	r3, [r4, #4]
 23fba24:	606b      	str	r3, [r5, #4]
    len = rhs.len;
 23fba26:	68a3      	ldr	r3, [r4, #8]
 23fba28:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
 23fba2a:	2300      	movs	r3, #0
    rhs.capacity = 0;
 23fba2c:	e9c4 3300 	strd	r3, r3, [r4]
 23fba30:	e7f1      	b.n	23fba16 <_ZN6String4moveERS_+0x20>

023fba32 <_ZN6StringC1EOS_>:
    buffer = nullptr;
 23fba32:	2300      	movs	r3, #0
String::String(String &&rval)
 23fba34:	b510      	push	{r4, lr}
 23fba36:	4604      	mov	r4, r0
    capacity = 0;
 23fba38:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fba3c:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fba3e:	7303      	strb	r3, [r0, #12]
    move(rval);
 23fba40:	f7ff ffd9 	bl	23fb9f6 <_ZN6String4moveERS_>
}
 23fba44:	4620      	mov	r0, r4
 23fba46:	bd10      	pop	{r4, pc}

023fba48 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23fba48:	4288      	cmp	r0, r1
{
 23fba4a:	b510      	push	{r4, lr}
 23fba4c:	4604      	mov	r4, r0
    if (this == &rhs) {
 23fba4e:	d005      	beq.n	23fba5c <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23fba50:	680b      	ldr	r3, [r1, #0]
 23fba52:	b12b      	cbz	r3, 23fba60 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23fba54:	688a      	ldr	r2, [r1, #8]
 23fba56:	4619      	mov	r1, r3
 23fba58:	f7ff ffa0 	bl	23fb99c <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fba5c:	4620      	mov	r0, r4
 23fba5e:	bd10      	pop	{r4, pc}
        invalidate();
 23fba60:	f7ff ff71 	bl	23fb946 <_ZN6String10invalidateEv>
 23fba64:	e7fa      	b.n	23fba5c <_ZN6StringaSERKS_+0x14>

023fba66 <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23fba66:	2300      	movs	r3, #0
String::String(const String &value)
 23fba68:	b510      	push	{r4, lr}
 23fba6a:	4604      	mov	r4, r0
    capacity = 0;
 23fba6c:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fba70:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fba72:	7303      	strb	r3, [r0, #12]
    *this = value;
 23fba74:	f7ff ffe8 	bl	23fba48 <_ZN6StringaSERKS_>
}
 23fba78:	4620      	mov	r0, r4
 23fba7a:	bd10      	pop	{r4, pc}

023fba7c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
    if (this != &rval) {
 23fba7c:	4288      	cmp	r0, r1
{
 23fba7e:	b510      	push	{r4, lr}
 23fba80:	4604      	mov	r4, r0
    if (this != &rval) {
 23fba82:	d001      	beq.n	23fba88 <_ZN6StringaSEOS_+0xc>
        move(rval);
 23fba84:	f7ff ffb7 	bl	23fb9f6 <_ZN6String4moveERS_>
    }
    return *this;
}
 23fba88:	4620      	mov	r0, r4
 23fba8a:	bd10      	pop	{r4, pc}

023fba8c <_ZN6StringaSEPKc>:
    return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 23fba8c:	b513      	push	{r0, r1, r4, lr}
 23fba8e:	4604      	mov	r4, r0
    if (cstr) {
 23fba90:	b159      	cbz	r1, 23fbaaa <_ZN6StringaSEPKc+0x1e>
        copy(cstr, strlen(cstr));
 23fba92:	4608      	mov	r0, r1
 23fba94:	9101      	str	r1, [sp, #4]
 23fba96:	f7fb f82d 	bl	23f6af4 <strlen>
 23fba9a:	9901      	ldr	r1, [sp, #4]
 23fba9c:	4602      	mov	r2, r0
 23fba9e:	4620      	mov	r0, r4
 23fbaa0:	f7ff ff7c 	bl	23fb99c <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fbaa4:	4620      	mov	r0, r4
 23fbaa6:	b002      	add	sp, #8
 23fbaa8:	bd10      	pop	{r4, pc}
        invalidate();
 23fbaaa:	f7ff ff4c 	bl	23fb946 <_ZN6String10invalidateEv>
 23fbaae:	e7f9      	b.n	23fbaa4 <_ZN6StringaSEPKc+0x18>

023fbab0 <_ZN6StringC1Ec>:
    buffer = nullptr;
 23fbab0:	2300      	movs	r3, #0
String::String(char c)
 23fbab2:	b513      	push	{r0, r1, r4, lr}
 23fbab4:	4604      	mov	r4, r0
    char buf[2] = {};
 23fbab6:	f8ad 3004 	strh.w	r3, [sp, #4]
    capacity = 0;
 23fbaba:	e9c0 3300 	strd	r3, r3, [r0]
    buf[0] = c;
 23fbabe:	f88d 1004 	strb.w	r1, [sp, #4]
    len = 0;
 23fbac2:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fbac4:	7303      	strb	r3, [r0, #12]
    *this = buf;
 23fbac6:	a901      	add	r1, sp, #4
 23fbac8:	f7ff ffe0 	bl	23fba8c <_ZN6StringaSEPKc>
}
 23fbacc:	4620      	mov	r0, r4
 23fbace:	b002      	add	sp, #8
 23fbad0:	bd10      	pop	{r4, pc}

023fbad2 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 23fbad2:	b570      	push	{r4, r5, r6, lr}
 23fbad4:	460d      	mov	r5, r1
    buffer = nullptr;
 23fbad6:	2100      	movs	r1, #0
String::String(int value, unsigned char base)
 23fbad8:	4616      	mov	r6, r2
 23fbada:	4604      	mov	r4, r0
 23fbadc:	b08a      	sub	sp, #40	; 0x28
    capacity = 0;
 23fbade:	e9c0 1100 	strd	r1, r1, [r0]
    len = 0;
 23fbae2:	6081      	str	r1, [r0, #8]
    flags = 0;
 23fbae4:	7301      	strb	r1, [r0, #12]
    char buf[34] = {};
 23fbae6:	221e      	movs	r2, #30
 23fbae8:	a802      	add	r0, sp, #8
 23fbaea:	9101      	str	r1, [sp, #4]
 23fbaec:	f001 fbd7 	bl	23fd29e <memset>
    itoa(value, buf, base);
 23fbaf0:	4632      	mov	r2, r6
 23fbaf2:	a901      	add	r1, sp, #4
 23fbaf4:	4628      	mov	r0, r5
 23fbaf6:	f001 f807 	bl	23fcb08 <itoa>
    *this = buf;
 23fbafa:	4620      	mov	r0, r4
 23fbafc:	a901      	add	r1, sp, #4
 23fbafe:	f7ff ffc5 	bl	23fba8c <_ZN6StringaSEPKc>
}
 23fbb02:	4620      	mov	r0, r4
 23fbb04:	b00a      	add	sp, #40	; 0x28
 23fbb06:	bd70      	pop	{r4, r5, r6, pc}

023fbb08 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
 23fbb08:	b570      	push	{r4, r5, r6, lr}
 23fbb0a:	460d      	mov	r5, r1
    buffer = nullptr;
 23fbb0c:	2100      	movs	r1, #0
String::String(float value, int decimalPlaces)
 23fbb0e:	ee10 6a10 	vmov	r6, s0
 23fbb12:	b08a      	sub	sp, #40	; 0x28
    char buf[33] = {};
 23fbb14:	221d      	movs	r2, #29
String::String(float value, int decimalPlaces)
 23fbb16:	4604      	mov	r4, r0
    capacity = 0;
 23fbb18:	e9c0 1100 	strd	r1, r1, [r0]
    len = 0;
 23fbb1c:	6081      	str	r1, [r0, #8]
    flags = 0;
 23fbb1e:	7301      	strb	r1, [r0, #12]
    char buf[33] = {};
 23fbb20:	a802      	add	r0, sp, #8
 23fbb22:	9101      	str	r1, [sp, #4]
 23fbb24:	f001 fbbb 	bl	23fd29e <memset>
    dtoa(value, decimalPlaces, buf);
 23fbb28:	4630      	mov	r0, r6
 23fbb2a:	f7fa fa95 	bl	23f6058 <__aeabi_f2d>
 23fbb2e:	b2ed      	uxtb	r5, r5
 23fbb30:	ec41 0b10 	vmov	d0, r0, r1
 23fbb34:	4628      	mov	r0, r5
 23fbb36:	a901      	add	r1, sp, #4
 23fbb38:	f7ff fe9e 	bl	23fb878 <_Z4dtoadhPc>
  *this = buf;
 23fbb3c:	4620      	mov	r0, r4
 23fbb3e:	a901      	add	r1, sp, #4
 23fbb40:	f7ff ffa4 	bl	23fba8c <_ZN6StringaSEPKc>
}
 23fbb44:	4620      	mov	r0, r4
 23fbb46:	b00a      	add	sp, #40	; 0x28
 23fbb48:	bd70      	pop	{r4, r5, r6, pc}

023fbb4a <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23fbb4a:	b570      	push	{r4, r5, r6, lr}
 23fbb4c:	4605      	mov	r5, r0
    unsigned int newlen = len + length;
    if (!cstr) {
 23fbb4e:	460e      	mov	r6, r1
 23fbb50:	b909      	cbnz	r1, 23fbb56 <_ZN6String6concatEPKcj+0xc>
        return 0;
 23fbb52:	2000      	movs	r0, #0
        return 0;
    }
    strcpy(buffer + len, cstr);
    len = newlen;
    return 1;
}
 23fbb54:	bd70      	pop	{r4, r5, r6, pc}
    if (length == 0) {
 23fbb56:	b16a      	cbz	r2, 23fbb74 <_ZN6String6concatEPKcj+0x2a>
    unsigned int newlen = len + length;
 23fbb58:	6884      	ldr	r4, [r0, #8]
 23fbb5a:	4414      	add	r4, r2
    if (!reserve(newlen)) {
 23fbb5c:	4621      	mov	r1, r4
 23fbb5e:	f7ff ff09 	bl	23fb974 <_ZN6String7reserveEj>
 23fbb62:	2800      	cmp	r0, #0
 23fbb64:	d0f5      	beq.n	23fbb52 <_ZN6String6concatEPKcj+0x8>
    strcpy(buffer + len, cstr);
 23fbb66:	6828      	ldr	r0, [r5, #0]
 23fbb68:	68ab      	ldr	r3, [r5, #8]
 23fbb6a:	4631      	mov	r1, r6
 23fbb6c:	4418      	add	r0, r3
 23fbb6e:	f001 fbe4 	bl	23fd33a <strcpy>
    len = newlen;
 23fbb72:	60ac      	str	r4, [r5, #8]
        return 1;
 23fbb74:	2001      	movs	r0, #1
 23fbb76:	e7ed      	b.n	23fbb54 <_ZN6String6concatEPKcj+0xa>

023fbb78 <_ZN6String6concatERKS_>:
    return concat(s.buffer, s.len);
 23fbb78:	688a      	ldr	r2, [r1, #8]
 23fbb7a:	6809      	ldr	r1, [r1, #0]
 23fbb7c:	f7ff bfe5 	b.w	23fbb4a <_ZN6String6concatEPKcj>

023fbb80 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 23fbb80:	b513      	push	{r0, r1, r4, lr}
 23fbb82:	4604      	mov	r4, r0
    if (!cstr) {
        return 0;
    }
    return concat(cstr, strlen(cstr));
}
 23fbb84:	4608      	mov	r0, r1
    if (!cstr) {
 23fbb86:	b151      	cbz	r1, 23fbb9e <_ZN6String6concatEPKc+0x1e>
    return concat(cstr, strlen(cstr));
 23fbb88:	9101      	str	r1, [sp, #4]
 23fbb8a:	f7fa ffb3 	bl	23f6af4 <strlen>
 23fbb8e:	4602      	mov	r2, r0
 23fbb90:	4620      	mov	r0, r4
 23fbb92:	9901      	ldr	r1, [sp, #4]
}
 23fbb94:	b002      	add	sp, #8
 23fbb96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return concat(cstr, strlen(cstr));
 23fbb9a:	f7ff bfd6 	b.w	23fbb4a <_ZN6String6concatEPKcj>
}
 23fbb9e:	b002      	add	sp, #8
 23fbba0:	bd10      	pop	{r4, pc}

023fbba2 <_ZN6String6concatEc>:
    return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
    char buf[2] = {};
 23fbba2:	2300      	movs	r3, #0
{
 23fbba4:	b507      	push	{r0, r1, r2, lr}
    buf[0] = c;
    buf[1] = 0;
    return concat(buf, 1);
 23fbba6:	2201      	movs	r2, #1
    char buf[2] = {};
 23fbba8:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf[0] = c;
 23fbbac:	f88d 1004 	strb.w	r1, [sp, #4]
    return concat(buf, 1);
 23fbbb0:	a901      	add	r1, sp, #4
 23fbbb2:	f7ff ffca 	bl	23fbb4a <_ZN6String6concatEPKcj>
}
 23fbbb6:	b003      	add	sp, #12
 23fbbb8:	f85d fb04 	ldr.w	pc, [sp], #4

023fbbbc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 23fbbbc:	b510      	push	{r4, lr}
    StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    if (!a.concat(rhs.buffer, rhs.len)) {
 23fbbbe:	688a      	ldr	r2, [r1, #8]
 23fbbc0:	6809      	ldr	r1, [r1, #0]
{
 23fbbc2:	4604      	mov	r4, r0
    if (!a.concat(rhs.buffer, rhs.len)) {
 23fbbc4:	f7ff ffc1 	bl	23fbb4a <_ZN6String6concatEPKcj>
 23fbbc8:	b910      	cbnz	r0, 23fbbd0 <_ZplRK15StringSumHelperRK6String+0x14>
        a.invalidate();
 23fbbca:	4620      	mov	r0, r4
 23fbbcc:	f7ff febb 	bl	23fb946 <_ZN6String10invalidateEv>
    }
    return a;
}
 23fbbd0:	4620      	mov	r0, r4
 23fbbd2:	bd10      	pop	{r4, pc}

023fbbd4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 23fbbd4:	b513      	push	{r0, r1, r4, lr}
 23fbbd6:	4604      	mov	r4, r0
    StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    if (!cstr || !a.concat(cstr, strlen(cstr))) {
 23fbbd8:	b929      	cbnz	r1, 23fbbe6 <_ZplRK15StringSumHelperPKc+0x12>
        a.invalidate();
 23fbbda:	4620      	mov	r0, r4
 23fbbdc:	f7ff feb3 	bl	23fb946 <_ZN6String10invalidateEv>
    }
    return a;
}
 23fbbe0:	4620      	mov	r0, r4
 23fbbe2:	b002      	add	sp, #8
 23fbbe4:	bd10      	pop	{r4, pc}
    if (!cstr || !a.concat(cstr, strlen(cstr))) {
 23fbbe6:	4608      	mov	r0, r1
 23fbbe8:	9101      	str	r1, [sp, #4]
 23fbbea:	f7fa ff83 	bl	23f6af4 <strlen>
 23fbbee:	9901      	ldr	r1, [sp, #4]
 23fbbf0:	4602      	mov	r2, r0
 23fbbf2:	4620      	mov	r0, r4
 23fbbf4:	f7ff ffa9 	bl	23fbb4a <_ZN6String6concatEPKcj>
 23fbbf8:	2800      	cmp	r0, #0
 23fbbfa:	d0ee      	beq.n	23fbbda <_ZplRK15StringSumHelperPKc+0x6>
 23fbbfc:	e7f0      	b.n	23fbbe0 <_ZplRK15StringSumHelperPKc+0xc>

023fbbfe <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    if (!buffer || !s.buffer) {
 23fbbfe:	6802      	ldr	r2, [r0, #0]
{
 23fbc00:	460b      	mov	r3, r1
    if (!buffer || !s.buffer) {
 23fbc02:	6809      	ldr	r1, [r1, #0]
 23fbc04:	b162      	cbz	r2, 23fbc20 <_ZNK6String9compareToERKS_+0x22>
 23fbc06:	b941      	cbnz	r1, 23fbc1a <_ZNK6String9compareToERKS_+0x1c>
        if (s.buffer && s.len > 0) {
            return 0 - *(unsigned char *)s.buffer;
        }
        if (buffer && len > 0) {
 23fbc08:	6880      	ldr	r0, [r0, #8]
 23fbc0a:	b160      	cbz	r0, 23fbc26 <_ZNK6String9compareToERKS_+0x28>
            return *(unsigned char *)buffer;
 23fbc0c:	7810      	ldrb	r0, [r2, #0]
 23fbc0e:	4770      	bx	lr
        if (s.buffer && s.len > 0) {
 23fbc10:	6898      	ldr	r0, [r3, #8]
 23fbc12:	b140      	cbz	r0, 23fbc26 <_ZNK6String9compareToERKS_+0x28>
            return 0 - *(unsigned char *)s.buffer;
 23fbc14:	7809      	ldrb	r1, [r1, #0]
 23fbc16:	4248      	negs	r0, r1
 23fbc18:	4770      	bx	lr
        }
        return 0;
    }
    return strcmp(buffer, s.buffer);
 23fbc1a:	4610      	mov	r0, r2
 23fbc1c:	f7fa bf60 	b.w	23f6ae0 <strcmp>
        if (s.buffer && s.len > 0) {
 23fbc20:	2900      	cmp	r1, #0
 23fbc22:	d1f5      	bne.n	23fbc10 <_ZNK6String9compareToERKS_+0x12>
        return 0;
 23fbc24:	4608      	mov	r0, r1
}
 23fbc26:	4770      	bx	lr

023fbc28 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
 23fbc28:	b508      	push	{r3, lr}
    return (len == s2.len && compareTo(s2) == 0);
 23fbc2a:	6882      	ldr	r2, [r0, #8]
 23fbc2c:	688b      	ldr	r3, [r1, #8]
 23fbc2e:	429a      	cmp	r2, r3
 23fbc30:	d105      	bne.n	23fbc3e <_ZNK6String6equalsERKS_+0x16>
 23fbc32:	f7ff ffe4 	bl	23fbbfe <_ZNK6String9compareToERKS_>
 23fbc36:	fab0 f080 	clz	r0, r0
 23fbc3a:	0940      	lsrs	r0, r0, #5
}
 23fbc3c:	bd08      	pop	{r3, pc}
    return (len == s2.len && compareTo(s2) == 0);
 23fbc3e:	2000      	movs	r0, #0
 23fbc40:	e7fc      	b.n	23fbc3c <_ZNK6String6equalsERKS_+0x14>

023fbc42 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
 23fbc42:	b508      	push	{r3, lr}
    if (len == 0) {
 23fbc44:	6882      	ldr	r2, [r0, #8]
 23fbc46:	b93a      	cbnz	r2, 23fbc58 <_ZNK6String6equalsEPKc+0x16>
        return (cstr == nullptr || *cstr == 0);
 23fbc48:	b121      	cbz	r1, 23fbc54 <_ZNK6String6equalsEPKc+0x12>
 23fbc4a:	7808      	ldrb	r0, [r1, #0]
    }
    if (cstr == nullptr) {
        return buffer[0] == 0;
    }
    return strcmp(buffer, cstr) == 0;
 23fbc4c:	fab0 f080 	clz	r0, r0
 23fbc50:	0940      	lsrs	r0, r0, #5
 23fbc52:	e000      	b.n	23fbc56 <_ZNK6String6equalsEPKc+0x14>
        return (cstr == nullptr || *cstr == 0);
 23fbc54:	2001      	movs	r0, #1
}
 23fbc56:	bd08      	pop	{r3, pc}
        return buffer[0] == 0;
 23fbc58:	6800      	ldr	r0, [r0, #0]
    if (cstr == nullptr) {
 23fbc5a:	b909      	cbnz	r1, 23fbc60 <_ZNK6String6equalsEPKc+0x1e>
        return buffer[0] == 0;
 23fbc5c:	7800      	ldrb	r0, [r0, #0]
 23fbc5e:	e7f5      	b.n	23fbc4c <_ZNK6String6equalsEPKc+0xa>
    return strcmp(buffer, cstr) == 0;
 23fbc60:	f7fa ff3e 	bl	23f6ae0 <strcmp>
 23fbc64:	e7f2      	b.n	23fbc4c <_ZNK6String6equalsEPKc+0xa>

023fbc66 <_ZNK6String16equalsIgnoreCaseERKS_>:
    return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
    if (this == &s2) {
 23fbc66:	4288      	cmp	r0, r1
{
 23fbc68:	b570      	push	{r4, r5, r6, lr}
    if (this == &s2) {
 23fbc6a:	d015      	beq.n	23fbc98 <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
        return 1;
    }
    if (len != s2.len) {
 23fbc6c:	6883      	ldr	r3, [r0, #8]
 23fbc6e:	688a      	ldr	r2, [r1, #8]
 23fbc70:	4293      	cmp	r3, r2
 23fbc72:	d10f      	bne.n	23fbc94 <_ZNK6String16equalsIgnoreCaseERKS_+0x2e>
        return 0;
    }
    if (len == 0) {
 23fbc74:	b183      	cbz	r3, 23fbc98 <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
 23fbc76:	6804      	ldr	r4, [r0, #0]
 23fbc78:	680e      	ldr	r6, [r1, #0]
        return 1;
    }
    const char *p1 = buffer;
    const char *p2 = s2.buffer;
 23fbc7a:	3c01      	subs	r4, #1
    while (*p1) {
 23fbc7c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 23fbc80:	b150      	cbz	r0, 23fbc98 <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
        if (tolower(*p1++) != tolower(*p2++)) {
 23fbc82:	f002 fa53 	bl	23fe12c <tolower>
 23fbc86:	4605      	mov	r5, r0
 23fbc88:	f816 0b01 	ldrb.w	r0, [r6], #1
 23fbc8c:	f002 fa4e 	bl	23fe12c <tolower>
 23fbc90:	4285      	cmp	r5, r0
 23fbc92:	d0f3      	beq.n	23fbc7c <_ZNK6String16equalsIgnoreCaseERKS_+0x16>
        return 0;
 23fbc94:	2000      	movs	r0, #0
            return 0;
        }
    }
    return 1;
}
 23fbc96:	bd70      	pop	{r4, r5, r6, pc}
        return 1;
 23fbc98:	2001      	movs	r0, #1
 23fbc9a:	e7fc      	b.n	23fbc96 <_ZNK6String16equalsIgnoreCaseERKS_+0x30>

023fbc9c <_ZNK6String10startsWithERKS_j>:
    }
    return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 23fbc9c:	4613      	mov	r3, r2
 23fbc9e:	b510      	push	{r4, lr}
    if (offset > len - s2.len || !buffer || !s2.buffer) {
 23fbca0:	688a      	ldr	r2, [r1, #8]
 23fbca2:	6884      	ldr	r4, [r0, #8]
 23fbca4:	1aa4      	subs	r4, r4, r2
 23fbca6:	429c      	cmp	r4, r3
 23fbca8:	d30a      	bcc.n	23fbcc0 <_ZNK6String10startsWithERKS_j+0x24>
 23fbcaa:	6800      	ldr	r0, [r0, #0]
 23fbcac:	b138      	cbz	r0, 23fbcbe <_ZNK6String10startsWithERKS_j+0x22>
 23fbcae:	6809      	ldr	r1, [r1, #0]
 23fbcb0:	b141      	cbz	r1, 23fbcc4 <_ZNK6String10startsWithERKS_j+0x28>
        return 0;
    }
    return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 23fbcb2:	4418      	add	r0, r3
 23fbcb4:	f001 fb49 	bl	23fd34a <strncmp>
 23fbcb8:	fab0 f080 	clz	r0, r0
 23fbcbc:	0940      	lsrs	r0, r0, #5
}
 23fbcbe:	bd10      	pop	{r4, pc}
        return 0;
 23fbcc0:	2000      	movs	r0, #0
 23fbcc2:	e7fc      	b.n	23fbcbe <_ZNK6String10startsWithERKS_j+0x22>
 23fbcc4:	4608      	mov	r0, r1
 23fbcc6:	e7fa      	b.n	23fbcbe <_ZNK6String10startsWithERKS_j+0x22>

023fbcc8 <_ZNK6String10startsWithERKS_>:
    if (len < s2.len) {
 23fbcc8:	6882      	ldr	r2, [r0, #8]
 23fbcca:	688b      	ldr	r3, [r1, #8]
 23fbccc:	429a      	cmp	r2, r3
 23fbcce:	d302      	bcc.n	23fbcd6 <_ZNK6String10startsWithERKS_+0xe>
    return startsWith(s2, 0);
 23fbcd0:	2200      	movs	r2, #0
 23fbcd2:	f7ff bfe3 	b.w	23fbc9c <_ZNK6String10startsWithERKS_j>
}
 23fbcd6:	2000      	movs	r0, #0
 23fbcd8:	4770      	bx	lr

023fbcda <_ZNK6StringixEj>:
    return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
    if (index >= len || !buffer) {
 23fbcda:	6883      	ldr	r3, [r0, #8]
 23fbcdc:	428b      	cmp	r3, r1
 23fbcde:	d903      	bls.n	23fbce8 <_ZNK6StringixEj+0xe>
 23fbce0:	6800      	ldr	r0, [r0, #0]
 23fbce2:	b110      	cbz	r0, 23fbcea <_ZNK6StringixEj+0x10>
        return 0;
    }
    return buffer[index];
 23fbce4:	5c40      	ldrb	r0, [r0, r1]
 23fbce6:	4770      	bx	lr
        return 0;
 23fbce8:	2000      	movs	r0, #0
}
 23fbcea:	4770      	bx	lr

023fbcec <_ZNK6String6charAtEj>:
    return operator[](loc);
 23fbcec:	f7ff bff5 	b.w	23fbcda <_ZNK6StringixEj>

023fbcf0 <_ZNK6String7indexOfEcj>:
{
    return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
 23fbcf0:	b510      	push	{r4, lr}
    if (fromIndex >= len) {
 23fbcf2:	6883      	ldr	r3, [r0, #8]
 23fbcf4:	4293      	cmp	r3, r2
 23fbcf6:	d906      	bls.n	23fbd06 <_ZNK6String7indexOfEcj+0x16>
        return -1;
    }
    const char* temp = strchr(buffer + fromIndex, ch);
 23fbcf8:	6804      	ldr	r4, [r0, #0]
 23fbcfa:	18a0      	adds	r0, r4, r2
 23fbcfc:	f001 fb06 	bl	23fd30c <strchr>
    if (temp == nullptr) {
 23fbd00:	b108      	cbz	r0, 23fbd06 <_ZNK6String7indexOfEcj+0x16>
        return -1;
    }
    return temp - buffer;
 23fbd02:	1b00      	subs	r0, r0, r4
}
 23fbd04:	bd10      	pop	{r4, pc}
        return -1;
 23fbd06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fbd0a:	e7fb      	b.n	23fbd04 <_ZNK6String7indexOfEcj+0x14>

023fbd0c <_ZNK6String7indexOfEc>:
    return indexOf(c, 0);
 23fbd0c:	2200      	movs	r2, #0
 23fbd0e:	f7ff bfef 	b.w	23fbcf0 <_ZNK6String7indexOfEcj>
	...

023fbd14 <_ZNK6String9substringEjj>:
{
    return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 23fbd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbd16:	461d      	mov	r5, r3
    if (left > right) {
 23fbd18:	429a      	cmp	r2, r3
 23fbd1a:	bf88      	it	hi
 23fbd1c:	4613      	movhi	r3, r2
{
 23fbd1e:	460f      	mov	r7, r1
 23fbd20:	4614      	mov	r4, r2
    if (left > right) {
 23fbd22:	bf88      	it	hi
 23fbd24:	462c      	movhi	r4, r5
        unsigned int temp = right;
        right = left;
        left = temp;
    }
    String out;
 23fbd26:	490b      	ldr	r1, [pc, #44]	; (23fbd54 <_ZNK6String9substringEjj+0x40>)
    if (left > right) {
 23fbd28:	bf88      	it	hi
 23fbd2a:	461d      	movhi	r5, r3
{
 23fbd2c:	4606      	mov	r6, r0
    String out;
 23fbd2e:	f7ff fe4e 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
    if (left > len) {
 23fbd32:	68bb      	ldr	r3, [r7, #8]
 23fbd34:	42a3      	cmp	r3, r4
 23fbd36:	d30a      	bcc.n	23fbd4e <_ZNK6String9substringEjj+0x3a>
        return out;
    }
    if (right > len) {
        right = len;
    }
    out.copy(&buffer[left], right - left);
 23fbd38:	6839      	ldr	r1, [r7, #0]
 23fbd3a:	42ab      	cmp	r3, r5
 23fbd3c:	bf94      	ite	ls
 23fbd3e:	ebc4 0203 	rsbls	r2, r4, r3
 23fbd42:	ebc4 0205 	rsbhi	r2, r4, r5
 23fbd46:	4630      	mov	r0, r6
 23fbd48:	4421      	add	r1, r4
 23fbd4a:	f7ff fe27 	bl	23fb99c <_ZN6String4copyEPKcj>
    return out;
}
 23fbd4e:	4630      	mov	r0, r6
 23fbd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fbd52:	bf00      	nop
 23fbd54:	023ff895 	.word	0x023ff895

023fbd58 <_ZNK6String9substringEj>:
{
 23fbd58:	b510      	push	{r4, lr}
 23fbd5a:	4604      	mov	r4, r0
    return substring(left, len);
 23fbd5c:	688b      	ldr	r3, [r1, #8]
 23fbd5e:	f7ff ffd9 	bl	23fbd14 <_ZNK6String9substringEjj>
}
 23fbd62:	4620      	mov	r0, r4
 23fbd64:	bd10      	pop	{r4, pc}

023fbd66 <_ZN6String11toLowerCaseEv>:
    buffer[len] = 0;
    return *this;
}

String& String::toLowerCase(void)
{
 23fbd66:	b538      	push	{r3, r4, r5, lr}
    if (buffer) {
 23fbd68:	6804      	ldr	r4, [r0, #0]
{
 23fbd6a:	4605      	mov	r5, r0
    if (buffer) {
 23fbd6c:	b13c      	cbz	r4, 23fbd7e <_ZN6String11toLowerCaseEv+0x18>
 23fbd6e:	3c01      	subs	r4, #1
        for (char *p = buffer; *p; p++) {
 23fbd70:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 23fbd74:	b118      	cbz	r0, 23fbd7e <_ZN6String11toLowerCaseEv+0x18>
            *p = tolower(*p);
 23fbd76:	f002 f9d9 	bl	23fe12c <tolower>
 23fbd7a:	7020      	strb	r0, [r4, #0]
        for (char *p = buffer; *p; p++) {
 23fbd7c:	e7f8      	b.n	23fbd70 <_ZN6String11toLowerCaseEv+0xa>
        }
    }
    return *this;
}
 23fbd7e:	4628      	mov	r0, r5
 23fbd80:	bd38      	pop	{r3, r4, r5, pc}

023fbd82 <_ZN6String4trimEv>:
    }
    return *this;
}

String& String::trim(void)
{
 23fbd82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!buffer || len == 0) {
 23fbd86:	6806      	ldr	r6, [r0, #0]
{
 23fbd88:	4605      	mov	r5, r0
    if (!buffer || len == 0) {
 23fbd8a:	b306      	cbz	r6, 23fbdce <_ZN6String4trimEv+0x4c>
 23fbd8c:	6884      	ldr	r4, [r0, #8]
 23fbd8e:	b1f4      	cbz	r4, 23fbdce <_ZN6String4trimEv+0x4c>
 23fbd90:	46b0      	mov	r8, r6
 23fbd92:	4647      	mov	r7, r8
        return *this;
    }
    char *begin = buffer;
    while (isspace(*begin)) {
 23fbd94:	f818 0b01 	ldrb.w	r0, [r8], #1
 23fbd98:	f001 fa52 	bl	23fd240 <isspace>
 23fbd9c:	2800      	cmp	r0, #0
 23fbd9e:	d1f8      	bne.n	23fbd92 <_ZN6String4trimEv+0x10>
        begin++;
    }
    char *end = buffer + len - 1;
 23fbda0:	3c01      	subs	r4, #1
 23fbda2:	4434      	add	r4, r6
    while (isspace(*end) && end >= begin) {
 23fbda4:	7820      	ldrb	r0, [r4, #0]
 23fbda6:	f001 fa4b 	bl	23fd240 <isspace>
 23fbdaa:	b118      	cbz	r0, 23fbdb4 <_ZN6String4trimEv+0x32>
 23fbdac:	42a7      	cmp	r7, r4
 23fbdae:	d801      	bhi.n	23fbdb4 <_ZN6String4trimEv+0x32>
        end--;
 23fbdb0:	3c01      	subs	r4, #1
    while (isspace(*end) && end >= begin) {
 23fbdb2:	e7f7      	b.n	23fbda4 <_ZN6String4trimEv+0x22>
    }
    len = end + 1 - begin;
 23fbdb4:	1c62      	adds	r2, r4, #1
 23fbdb6:	1bd2      	subs	r2, r2, r7
    if (begin > buffer) {
 23fbdb8:	42be      	cmp	r6, r7
    len = end + 1 - begin;
 23fbdba:	60aa      	str	r2, [r5, #8]
    if (begin > buffer) {
 23fbdbc:	d203      	bcs.n	23fbdc6 <_ZN6String4trimEv+0x44>
        memcpy(buffer, begin, len);
 23fbdbe:	4639      	mov	r1, r7
 23fbdc0:	4630      	mov	r0, r6
 23fbdc2:	f001 fa45 	bl	23fd250 <memcpy>
    }
    buffer[len] = 0;
 23fbdc6:	2100      	movs	r1, #0
 23fbdc8:	682a      	ldr	r2, [r5, #0]
 23fbdca:	68ab      	ldr	r3, [r5, #8]
 23fbdcc:	54d1      	strb	r1, [r2, r3]
  return *this;
}
 23fbdce:	4628      	mov	r0, r5
 23fbdd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fbdd4 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
    if (buffer) {
 23fbdd4:	6800      	ldr	r0, [r0, #0]
 23fbdd6:	b108      	cbz	r0, 23fbddc <_ZNK6String5toIntEv+0x8>
        return atol(buffer);
 23fbdd8:	f001 ba25 	b.w	23fd226 <atol>
    }
    return 0;
}
 23fbddc:	4770      	bx	lr
	...

023fbde0 <_ZNK6String7toFloatEv>:
    }
    return 0;
}

float String::toFloat(void) const
{
 23fbde0:	b508      	push	{r3, lr}
    if (buffer) {
 23fbde2:	6800      	ldr	r0, [r0, #0]
 23fbde4:	b140      	cbz	r0, 23fbdf8 <_ZNK6String7toFloatEv+0x18>
        return float(atof(buffer));
 23fbde6:	f001 fa1b 	bl	23fd220 <atof>
 23fbdea:	ec51 0b10 	vmov	r0, r1, d0
 23fbdee:	f7fa fc45 	bl	23f667c <__aeabi_d2f>
 23fbdf2:	ee00 0a10 	vmov	s0, r0
    }
    return 0;
}
 23fbdf6:	bd08      	pop	{r3, pc}
    return 0;
 23fbdf8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 23fbe00 <_ZNK6String7toFloatEv+0x20>
 23fbdfc:	e7fb      	b.n	23fbdf6 <_ZNK6String7toFloatEv+0x16>
 23fbdfe:	bf00      	nop
 23fbe00:	00000000 	.word	0x00000000

023fbe04 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 23fbe04:	b40e      	push	{r1, r2, r3}
 23fbe06:	b570      	push	{r4, r5, r6, lr}
 23fbe08:	b087      	sub	sp, #28
 23fbe0a:	ad0b      	add	r5, sp, #44	; 0x2c
 23fbe0c:	f855 2b04 	ldr.w	r2, [r5], #4
 23fbe10:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 23fbe12:	462b      	mov	r3, r5
 23fbe14:	2105      	movs	r1, #5
 23fbe16:	a804      	add	r0, sp, #16
 23fbe18:	9201      	str	r2, [sp, #4]
    va_start(marker, fmt);
 23fbe1a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 23fbe1c:	f7fe f874 	bl	23f9f08 <vsnprintf>
 23fbe20:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 23fbe22:	490b      	ldr	r1, [pc, #44]	; (23fbe50 <_ZN6String6formatEPKcz+0x4c>)
 23fbe24:	4620      	mov	r0, r4
 23fbe26:	f7ff fdd2 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 23fbe2a:	4631      	mov	r1, r6
 23fbe2c:	4620      	mov	r0, r4
 23fbe2e:	f7ff fda1 	bl	23fb974 <_ZN6String7reserveEj>
    if (result.buffer) {
 23fbe32:	6820      	ldr	r0, [r4, #0]
 23fbe34:	b130      	cbz	r0, 23fbe44 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 23fbe36:	462b      	mov	r3, r5
 23fbe38:	9a01      	ldr	r2, [sp, #4]
 23fbe3a:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 23fbe3c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 23fbe3e:	f7fe f863 	bl	23f9f08 <vsnprintf>
        va_end(marker);
        result.len = n;
 23fbe42:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 23fbe44:	4620      	mov	r0, r4
 23fbe46:	b007      	add	sp, #28
 23fbe48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fbe4c:	b003      	add	sp, #12
 23fbe4e:	4770      	bx	lr
 23fbe50:	023ff895 	.word	0x023ff895

023fbe54 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 23fbe54:	b507      	push	{r0, r1, r2, lr}
 23fbe56:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23fbe58:	2100      	movs	r1, #0
{
 23fbe5a:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23fbe5c:	9100      	str	r1, [sp, #0]
 23fbe5e:	2001      	movs	r0, #1
 23fbe60:	218c      	movs	r1, #140	; 0x8c
 23fbe62:	f7fd fec9 	bl	23f9bf8 <system_reset>
}
 23fbe66:	b003      	add	sp, #12
 23fbe68:	f85d fb04 	ldr.w	pc, [sp], #4

023fbe6c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 23fbe6c:	4601      	mov	r1, r0
    reset(0, flags);
 23fbe6e:	2000      	movs	r0, #0
 23fbe70:	f7ff bff0 	b.w	23fbe54 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

023fbe74 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 23fbe74:	2000      	movs	r0, #0
 23fbe76:	f7ff bff9 	b.w	23fbe6c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

023fbe7a <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
 23fbe7a:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
 23fbe7c:	2420      	movs	r4, #32
{
 23fbe7e:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
 23fbe80:	4622      	mov	r2, r4
 23fbe82:	2100      	movs	r1, #0
 23fbe84:	4668      	mov	r0, sp
 23fbe86:	f001 fa0a 	bl	23fd29e <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
 23fbe8a:	2100      	movs	r1, #0
 23fbe8c:	4668      	mov	r0, sp
    info.size = sizeof(info);
 23fbe8e:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
 23fbe92:	f7fd faeb 	bl	23f946c <HAL_Core_Runtime_Info>
    return info.freeheap;
}
 23fbe96:	9801      	ldr	r0, [sp, #4]
 23fbe98:	b008      	add	sp, #32
 23fbe9a:	bd10      	pop	{r4, pc}

023fbe9c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fbe9c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fbe9e:	2000      	movs	r0, #0
 23fbea0:	4b04      	ldr	r3, [pc, #16]	; (23fbeb4 <_GLOBAL__sub_I_System+0x18>)
 23fbea2:	601a      	str	r2, [r3, #0]
 23fbea4:	4b04      	ldr	r3, [pc, #16]	; (23fbeb8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fbea6:	4a05      	ldr	r2, [pc, #20]	; (23fbebc <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fbea8:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fbeac:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fbeae:	f7fd be41 	b.w	23f9b34 <set_system_mode>
 23fbeb2:	bf00      	nop
 23fbeb4:	1007ae6c 	.word	0x1007ae6c
 23fbeb8:	1007ae60 	.word	0x1007ae60
 23fbebc:	ffff0000 	.word	0xffff0000

023fbec0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
 23fbec0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
 23fbec2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
 23fbec4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
 23fbec8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 23fbeca:	2201      	movs	r2, #1
 23fbecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fbed0:	f10d 0107 	add.w	r1, sp, #7
 23fbed4:	47a0      	blx	r4
}
 23fbed6:	b002      	add	sp, #8
 23fbed8:	bd10      	pop	{r4, pc}

023fbeda <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
 23fbeda:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
 23fbedc:	6803      	ldr	r3, [r0, #0]
 23fbede:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 23fbee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fbee4:	46a4      	mov	ip, r4
}
 23fbee6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
 23fbeea:	4760      	bx	ip

023fbeec <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
 23fbeec:	b513      	push	{r0, r1, r4, lr}
 23fbeee:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 23fbef0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
 23fbef2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 23fbef6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 23fbef8:	f10d 0107 	add.w	r1, sp, #7
 23fbefc:	2201      	movs	r2, #1
 23fbefe:	47a0      	blx	r4
}
 23fbf00:	b002      	add	sp, #8
 23fbf02:	bd10      	pop	{r4, pc}

023fbf04 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
 23fbf04:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fbf06:	6943      	ldr	r3, [r0, #20]
 23fbf08:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 23fbf0a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fbf0e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23fbf12:	429a      	cmp	r2, r3
 23fbf14:	d008      	beq.n	23fbf28 <_ZN9TCPClient4readEv+0x24>
 23fbf16:	6963      	ldr	r3, [r4, #20]
 23fbf18:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 23fbf1c:	1c51      	adds	r1, r2, #1
 23fbf1e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 23fbf22:	4413      	add	r3, r2
 23fbf24:	7918      	ldrb	r0, [r3, #4]
}
 23fbf26:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 23fbf28:	6803      	ldr	r3, [r0, #0]
 23fbf2a:	691b      	ldr	r3, [r3, #16]
 23fbf2c:	4798      	blx	r3
 23fbf2e:	2800      	cmp	r0, #0
 23fbf30:	d1f1      	bne.n	23fbf16 <_ZN9TCPClient4readEv+0x12>
 23fbf32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fbf36:	e7f6      	b.n	23fbf26 <_ZN9TCPClient4readEv+0x22>

023fbf38 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
 23fbf38:	4770      	bx	lr

023fbf3a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
 23fbf3a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
 23fbf3c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
 23fbf3e:	43c0      	mvns	r0, r0
 23fbf40:	0fc0      	lsrs	r0, r0, #31
 23fbf42:	4770      	bx	lr

023fbf44 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fbf44:	4770      	bx	lr
	...

023fbf48 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fbf48:	4b06      	ldr	r3, [pc, #24]	; (23fbf64 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fbf4a:	b510      	push	{r4, lr}
	    ||
 23fbf4c:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fbf4e:	f100 040c 	add.w	r4, r0, #12
 23fbf52:	d005      	beq.n	23fbf60 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fbf54:	4608      	mov	r0, r1
 23fbf56:	f001 f81b 	bl	23fcf90 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fbf5a:	2800      	cmp	r0, #0
 23fbf5c:	bf08      	it	eq
 23fbf5e:	2400      	moveq	r4, #0
      }
 23fbf60:	4620      	mov	r0, r4
 23fbf62:	bd10      	pop	{r4, pc}
 23fbf64:	023ff7c0 	.word	0x023ff7c0

023fbf68 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fbf68:	b510      	push	{r4, lr}
 23fbf6a:	4604      	mov	r4, r0
 23fbf6c:	21ac      	movs	r1, #172	; 0xac
 23fbf6e:	f7fa fe04 	bl	23f6b7a <_ZdlPvj>
 23fbf72:	4620      	mov	r0, r4
 23fbf74:	bd10      	pop	{r4, pc}

023fbf76 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 23fbf76:	21ac      	movs	r1, #172	; 0xac
 23fbf78:	f7fa bdff 	b.w	23f6b7a <_ZdlPvj>

023fbf7c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
 23fbf7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 23fbf80:	f04f 0800 	mov.w	r8, #0
 23fbf84:	461c      	mov	r4, r3
 23fbf86:	b086      	sub	sp, #24
 23fbf88:	f8c0 8004 	str.w	r8, [r0, #4]
 23fbf8c:	4605      	mov	r5, r0
 23fbf8e:	460e      	mov	r6, r1
 23fbf90:	4617      	mov	r7, r2
    struct timeval tv = {};
 23fbf92:	4641      	mov	r1, r8
 23fbf94:	2210      	movs	r2, #16
 23fbf96:	a802      	add	r0, sp, #8
 23fbf98:	f001 f981 	bl	23fd29e <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
 23fbf9c:	1c63      	adds	r3, r4, #1
 23fbf9e:	d009      	beq.n	23fbfb4 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
 23fbfa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fbfa4:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
 23fbfa8:	fb03 4412 	mls	r4, r3, r2, r4
 23fbfac:	435c      	muls	r4, r3
        tv.tv_sec = timeout / 1000;
 23fbfae:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
 23fbfb2:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
 23fbfb4:	2310      	movs	r3, #16
 23fbfb6:	6968      	ldr	r0, [r5, #20]
 23fbfb8:	9300      	str	r3, [sp, #0]
 23fbfba:	f241 0205 	movw	r2, #4101	; 0x1005
 23fbfbe:	f640 71ff 	movw	r1, #4095	; 0xfff
 23fbfc2:	6800      	ldr	r0, [r0, #0]
 23fbfc4:	ab02      	add	r3, sp, #8
 23fbfc6:	f7fd fbaf 	bl	23f9728 <sock_setsockopt>
    if (ret < 0) {
 23fbfca:	2800      	cmp	r0, #0
 23fbfcc:	da07      	bge.n	23fbfde <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
 23fbfce:	f7fd ffc5 	bl	23f9f5c <__errno>
 23fbfd2:	6803      	ldr	r3, [r0, #0]
        return 0;
 23fbfd4:	2000      	movs	r0, #0
 23fbfd6:	606b      	str	r3, [r5, #4]
}
 23fbfd8:	b006      	add	sp, #24
 23fbfda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
 23fbfde:	6968      	ldr	r0, [r5, #20]
 23fbfe0:	2300      	movs	r3, #0
 23fbfe2:	463a      	mov	r2, r7
 23fbfe4:	4631      	mov	r1, r6
 23fbfe6:	6800      	ldr	r0, [r0, #0]
 23fbfe8:	f7fd fbd6 	bl	23f9798 <sock_send>
    if (ret < 0) {
 23fbfec:	1e03      	subs	r3, r0, #0
 23fbfee:	dbee      	blt.n	23fbfce <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
 23fbff0:	4618      	mov	r0, r3
 23fbff2:	e7f1      	b.n	23fbfd8 <_ZN9TCPClient5writeEPKhjm+0x5c>

023fbff4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 23fbff4:	b538      	push	{r3, r4, r5, lr}
 23fbff6:	4b0b      	ldr	r3, [pc, #44]	; (23fc024 <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 23fbff8:	6984      	ldr	r4, [r0, #24]
 23fbffa:	4605      	mov	r5, r0
 23fbffc:	6003      	str	r3, [r0, #0]
 23fbffe:	b17c      	cbz	r4, 23fc020 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 23fc000:	6863      	ldr	r3, [r4, #4]
 23fc002:	3b01      	subs	r3, #1
 23fc004:	6063      	str	r3, [r4, #4]
 23fc006:	b95b      	cbnz	r3, 23fc020 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 23fc008:	6823      	ldr	r3, [r4, #0]
 23fc00a:	4620      	mov	r0, r4
 23fc00c:	689b      	ldr	r3, [r3, #8]
 23fc00e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fc010:	68a3      	ldr	r3, [r4, #8]
 23fc012:	3b01      	subs	r3, #1
 23fc014:	60a3      	str	r3, [r4, #8]
 23fc016:	b91b      	cbnz	r3, 23fc020 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 23fc018:	6823      	ldr	r3, [r4, #0]
 23fc01a:	4620      	mov	r0, r4
 23fc01c:	68db      	ldr	r3, [r3, #12]
 23fc01e:	4798      	blx	r3
 23fc020:	4628      	mov	r0, r5
 23fc022:	bd38      	pop	{r3, r4, r5, pc}
 23fc024:	023ff9b0 	.word	0x023ff9b0

023fc028 <_ZN9TCPClientD0Ev>:
 23fc028:	b510      	push	{r4, lr}
 23fc02a:	4604      	mov	r4, r0
 23fc02c:	f7ff ffe2 	bl	23fbff4 <_ZN9TCPClientD1Ev>
 23fc030:	4620      	mov	r0, r4
 23fc032:	211c      	movs	r1, #28
 23fc034:	f7fa fda1 	bl	23f6b7a <_ZdlPvj>
 23fc038:	4620      	mov	r0, r4
 23fc03a:	bd10      	pop	{r4, pc}

023fc03c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
 23fc03c:	b530      	push	{r4, r5, lr}
 23fc03e:	4604      	mov	r4, r0
 23fc040:	b087      	sub	sp, #28
        return *this = IPAddress(address);
 23fc042:	4668      	mov	r0, sp
 23fc044:	f7fe f946 	bl	23fa2d4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fc048:	ad01      	add	r5, sp, #4
 23fc04a:	3404      	adds	r4, #4
 23fc04c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fc04e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fc050:	682b      	ldr	r3, [r5, #0]
 23fc052:	7023      	strb	r3, [r4, #0]
    }
 23fc054:	b007      	add	sp, #28
 23fc056:	bd30      	pop	{r4, r5, pc}

023fc058 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
 23fc058:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 23fc05a:	4604      	mov	r4, r0
 23fc05c:	4606      	mov	r6, r0
      { return _M_ptr; }
 23fc05e:	694d      	ldr	r5, [r1, #20]
 23fc060:	4b04      	ldr	r3, [pc, #16]	; (23fc074 <_ZN9TCPClient8remoteIPEv+0x1c>)
 23fc062:	358c      	adds	r5, #140	; 0x8c
 23fc064:	f844 3b04 	str.w	r3, [r4], #4
 23fc068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fc06a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fc06c:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 23fc06e:	4630      	mov	r0, r6
 23fc070:	7023      	strb	r3, [r4, #0]
 23fc072:	bd70      	pop	{r4, r5, r6, pc}
 23fc074:	023ff83c 	.word	0x023ff83c

023fc078 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fc078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fc07c:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
 23fc07e:	2400      	movs	r4, #0
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fc080:	4698      	mov	r8, r3
    stop();
 23fc082:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fc084:	b093      	sub	sp, #76	; 0x4c
    stop();
 23fc086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fc088:	4606      	mov	r6, r0
 23fc08a:	4617      	mov	r7, r2
    stop();
 23fc08c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23fc08e:	4628      	mov	r0, r5
 23fc090:	466b      	mov	r3, sp
 23fc092:	4622      	mov	r2, r4
 23fc094:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
 23fc096:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23fc098:	f7fd fb38 	bl	23f970c <netdb_getaddrinfo>
 23fc09c:	4605      	mov	r5, r0
 23fc09e:	2800      	cmp	r0, #0
 23fc0a0:	d163      	bne.n	23fc16a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
 23fc0a2:	9b00      	ldr	r3, [sp, #0]
 23fc0a4:	2b00      	cmp	r3, #0
 23fc0a6:	d04b      	beq.n	23fc140 <_ZN9TCPClient7connectEPKctm+0xc8>
 23fc0a8:	695b      	ldr	r3, [r3, #20]
 23fc0aa:	2b00      	cmp	r3, #0
 23fc0ac:	d048      	beq.n	23fc140 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
 23fc0ae:	a806      	add	r0, sp, #24
 23fc0b0:	f7fe f8cc 	bl	23fa24c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
 23fc0b4:	9b00      	ldr	r3, [sp, #0]
 23fc0b6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
 23fc0b8:	7863      	ldrb	r3, [r4, #1]
 23fc0ba:	2b02      	cmp	r3, #2
 23fc0bc:	d104      	bne.n	23fc0c8 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
 23fc0be:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
 23fc0c0:	a806      	add	r0, sp, #24
 23fc0c2:	f7ff ffbb 	bl	23fc03c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
 23fc0c6:	e026      	b.n	23fc116 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
 23fc0c8:	2b0a      	cmp	r3, #10
 23fc0ca:	d124      	bne.n	23fc116 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
 23fc0cc:	2211      	movs	r2, #17
 23fc0ce:	4629      	mov	r1, r5
 23fc0d0:	a801      	add	r0, sp, #4
 23fc0d2:	f001 f8e4 	bl	23fd29e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
 23fc0d6:	68a3      	ldr	r3, [r4, #8]
 23fc0d8:	2b00      	cmp	r3, #0
 23fc0da:	d038      	beq.n	23fc14e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fc0dc:	f104 0308 	add.w	r3, r4, #8
 23fc0e0:	f10d 0c04 	add.w	ip, sp, #4
 23fc0e4:	3418      	adds	r4, #24
 23fc0e6:	4662      	mov	r2, ip
 23fc0e8:	6818      	ldr	r0, [r3, #0]
 23fc0ea:	6859      	ldr	r1, [r3, #4]
 23fc0ec:	3308      	adds	r3, #8
 23fc0ee:	c203      	stmia	r2!, {r0, r1}
 23fc0f0:	42a3      	cmp	r3, r4
 23fc0f2:	4694      	mov	ip, r2
 23fc0f4:	d1f7      	bne.n	23fc0e6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
 23fc0f6:	2306      	movs	r3, #6
            addr = IPAddress(a);
 23fc0f8:	a901      	add	r1, sp, #4
 23fc0fa:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
 23fc0fc:	f88d 3014 	strb.w	r3, [sp, #20]
 23fc100:	ac07      	add	r4, sp, #28
            addr = IPAddress(a);
 23fc102:	f7fe f8b1 	bl	23fa268 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fc106:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23fc10a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23fc10e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fc110:	f8dc 3000 	ldr.w	r3, [ip]
 23fc114:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
 23fc116:	a806      	add	r0, sp, #24
 23fc118:	f7fe f8b8 	bl	23fa28c <_ZNK9IPAddresscvbEv>
        if (addr) {
 23fc11c:	b180      	cbz	r0, 23fc140 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
 23fc11e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 23fc120:	ac0d      	add	r4, sp, #52	; 0x34
 23fc122:	f8d3 9020 	ldr.w	r9, [r3, #32]
 23fc126:	4b12      	ldr	r3, [pc, #72]	; (23fc170 <_ZN9TCPClient7connectEPKctm+0xf8>)
 23fc128:	ad07      	add	r5, sp, #28
 23fc12a:	930c      	str	r3, [sp, #48]	; 0x30
 23fc12c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fc12e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fc130:	682b      	ldr	r3, [r5, #0]
 23fc132:	463a      	mov	r2, r7
 23fc134:	7023      	strb	r3, [r4, #0]
 23fc136:	4630      	mov	r0, r6
 23fc138:	4643      	mov	r3, r8
 23fc13a:	a90c      	add	r1, sp, #48	; 0x30
 23fc13c:	47c8      	blx	r9
 23fc13e:	4605      	mov	r5, r0
    SCOPE_GUARD({
 23fc140:	9800      	ldr	r0, [sp, #0]
 23fc142:	f7fd fad5 	bl	23f96f0 <netdb_freeaddrinfo>
}
 23fc146:	4628      	mov	r0, r5
 23fc148:	b013      	add	sp, #76	; 0x4c
 23fc14a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
 23fc14e:	68e3      	ldr	r3, [r4, #12]
 23fc150:	2b00      	cmp	r3, #0
 23fc152:	d1c3      	bne.n	23fc0dc <_ZN9TCPClient7connectEPKctm+0x64>
 23fc154:	f64f 70ff 	movw	r0, #65535	; 0xffff
 23fc158:	f8d4 9010 	ldr.w	r9, [r4, #16]
 23fc15c:	f7fd faac 	bl	23f96b8 <inet_htonl>
 23fc160:	4581      	cmp	r9, r0
 23fc162:	d1bb      	bne.n	23fc0dc <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
 23fc164:	f104 0114 	add.w	r1, r4, #20
 23fc168:	e7aa      	b.n	23fc0c0 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23fc16a:	4625      	mov	r5, r4
 23fc16c:	e7e8      	b.n	23fc140 <_ZN9TCPClient7connectEPKctm+0xc8>
 23fc16e:	bf00      	nop
 23fc170:	023ff83c 	.word	0x023ff83c

023fc174 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
 23fc174:	b538      	push	{r3, r4, r5, lr}
 23fc176:	6943      	ldr	r3, [r0, #20]
 23fc178:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
 23fc17a:	681a      	ldr	r2, [r3, #0]
 23fc17c:	2a00      	cmp	r2, #0
 23fc17e:	da10      	bge.n	23fc1a2 <_ZN9TCPClient9connectedEv+0x2e>
 23fc180:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fc184:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23fc188:	429a      	cmp	r2, r3
 23fc18a:	d10a      	bne.n	23fc1a2 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
 23fc18c:	6803      	ldr	r3, [r0, #0]
 23fc18e:	691b      	ldr	r3, [r3, #16]
 23fc190:	4798      	blx	r3
        if (!rv) {
 23fc192:	4604      	mov	r4, r0
 23fc194:	b928      	cbnz	r0, 23fc1a2 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
 23fc196:	682b      	ldr	r3, [r5, #0]
 23fc198:	4628      	mov	r0, r5
 23fc19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc19c:	4798      	blx	r3
        rv = available();
 23fc19e:	4620      	mov	r0, r4
}
 23fc1a0:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
 23fc1a2:	2001      	movs	r0, #1
 23fc1a4:	e7fc      	b.n	23fc1a0 <_ZN9TCPClient9connectedEv+0x2c>

023fc1a6 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
 23fc1a6:	b510      	push	{r4, lr}
 23fc1a8:	6943      	ldr	r3, [r0, #20]
 23fc1aa:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 23fc1ac:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fc1b0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23fc1b4:	429a      	cmp	r2, r3
 23fc1b6:	d005      	beq.n	23fc1c4 <_ZN9TCPClient4peekEv+0x1e>
 23fc1b8:	6963      	ldr	r3, [r4, #20]
 23fc1ba:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 23fc1be:	4413      	add	r3, r2
 23fc1c0:	7918      	ldrb	r0, [r3, #4]
}
 23fc1c2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 23fc1c4:	6803      	ldr	r3, [r0, #0]
 23fc1c6:	691b      	ldr	r3, [r3, #16]
 23fc1c8:	4798      	blx	r3
 23fc1ca:	2800      	cmp	r0, #0
 23fc1cc:	d1f4      	bne.n	23fc1b8 <_ZN9TCPClient4peekEv+0x12>
 23fc1ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fc1d2:	e7f6      	b.n	23fc1c2 <_ZN9TCPClient4peekEv+0x1c>

023fc1d4 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
 23fc1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc1d6:	6943      	ldr	r3, [r0, #20]
 23fc1d8:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
 23fc1da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fc1de:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
int TCPClient::read(uint8_t *buffer, size_t size) {
 23fc1e2:	4605      	mov	r5, r0
    if (bufferCount() || available()) {
 23fc1e4:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
 23fc1e6:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
 23fc1e8:	d016      	beq.n	23fc218 <_ZN9TCPClient4readEPhj+0x44>
 23fc1ea:	6969      	ldr	r1, [r5, #20]
        memcpy(buffer, &d_->buffer[d_->offset], read);
 23fc1ec:	4630      	mov	r0, r6
    return d_->total - d_->offset;
 23fc1ee:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 23fc1f2:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 23fc1f6:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 23fc1f8:	42bc      	cmp	r4, r7
 23fc1fa:	bf28      	it	cs
 23fc1fc:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
 23fc1fe:	3304      	adds	r3, #4
 23fc200:	4622      	mov	r2, r4
 23fc202:	4419      	add	r1, r3
 23fc204:	f001 f824 	bl	23fd250 <memcpy>
 23fc208:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
 23fc20a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 23fc20e:	4423      	add	r3, r4
 23fc210:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 23fc214:	4620      	mov	r0, r4
 23fc216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
 23fc218:	6803      	ldr	r3, [r0, #0]
 23fc21a:	691b      	ldr	r3, [r3, #16]
 23fc21c:	4798      	blx	r3
 23fc21e:	2800      	cmp	r0, #0
 23fc220:	d1e3      	bne.n	23fc1ea <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
 23fc222:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 23fc226:	e7f5      	b.n	23fc214 <_ZN9TCPClient4readEPhj+0x40>

023fc228 <_ZN9TCPClient12flush_bufferEv>:
    d_->offset = 0;
 23fc228:	2300      	movs	r3, #0
 23fc22a:	6942      	ldr	r2, [r0, #20]
 23fc22c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 23fc230:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
 23fc232:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 23fc236:	4770      	bx	lr

023fc238 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23fc238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fc23c:	460c      	mov	r4, r1
 23fc23e:	4605      	mov	r5, r0
 23fc240:	461f      	mov	r7, r3
    stop();
 23fc242:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23fc244:	b08a      	sub	sp, #40	; 0x28
    stop();
 23fc246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23fc248:	4616      	mov	r6, r2
    stop();
 23fc24a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
 23fc24c:	7d23      	ldrb	r3, [r4, #20]
 23fc24e:	2206      	movs	r2, #6
 23fc250:	2b04      	cmp	r3, #4
 23fc252:	bf0c      	ite	eq
 23fc254:	2002      	moveq	r0, #2
 23fc256:	200a      	movne	r0, #10
 23fc258:	2101      	movs	r1, #1
 23fc25a:	f8d5 8014 	ldr.w	r8, [r5, #20]
 23fc25e:	f7fd faa9 	bl	23f97b4 <sock_socket>
 23fc262:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
 23fc266:	696b      	ldr	r3, [r5, #20]
 23fc268:	681b      	ldr	r3, [r3, #0]
 23fc26a:	2b00      	cmp	r3, #0
 23fc26c:	da08      	bge.n	23fc280 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
 23fc26e:	682b      	ldr	r3, [r5, #0]
 23fc270:	4628      	mov	r0, r5
 23fc272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fc274:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
 23fc276:	4798      	blx	r3
}
 23fc278:	4620      	mov	r0, r4
 23fc27a:	b00a      	add	sp, #40	; 0x28
 23fc27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
 23fc280:	4628      	mov	r0, r5
 23fc282:	f7ff ffd1 	bl	23fc228 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
 23fc286:	b1b7      	cbz	r7, 23fc2b6 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
 23fc288:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fc28a:	a903      	add	r1, sp, #12
 23fc28c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
 23fc28e:	9303      	str	r3, [sp, #12]
 23fc290:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fc294:	f7fd f9f4 	bl	23f9680 <if_index_to_name>
 23fc298:	2800      	cmp	r0, #0
 23fc29a:	d1e8      	bne.n	23fc26e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
 23fc29c:	2306      	movs	r3, #6
 23fc29e:	6968      	ldr	r0, [r5, #20]
 23fc2a0:	9300      	str	r3, [sp, #0]
 23fc2a2:	f241 020b 	movw	r2, #4107	; 0x100b
 23fc2a6:	f640 71ff 	movw	r1, #4095	; 0xfff
 23fc2aa:	6800      	ldr	r0, [r0, #0]
 23fc2ac:	ab03      	add	r3, sp, #12
 23fc2ae:	f7fd fa3b 	bl	23f9728 <sock_setsockopt>
 23fc2b2:	2800      	cmp	r0, #0
 23fc2b4:	d1db      	bne.n	23fc26e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
 23fc2b6:	221c      	movs	r2, #28
 23fc2b8:	2100      	movs	r1, #0
 23fc2ba:	a803      	add	r0, sp, #12
 23fc2bc:	f000 ffef 	bl	23fd29e <memset>
    if (ip.version() == 4) {
 23fc2c0:	7d23      	ldrb	r3, [r4, #20]
 23fc2c2:	2b04      	cmp	r3, #4
 23fc2c4:	d11d      	bne.n	23fc302 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
 23fc2c6:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
 23fc2ca:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
 23fc2cc:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
 23fc2d0:	f7fd fa00 	bl	23f96d4 <inet_htons>
 23fc2d4:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
 23fc2d8:	6860      	ldr	r0, [r4, #4]
 23fc2da:	f7fd f9ed 	bl	23f96b8 <inet_htonl>
 23fc2de:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
 23fc2e0:	696b      	ldr	r3, [r5, #20]
 23fc2e2:	221c      	movs	r2, #28
 23fc2e4:	6818      	ldr	r0, [r3, #0]
 23fc2e6:	a903      	add	r1, sp, #12
 23fc2e8:	f7fd fa3a 	bl	23f9760 <sock_connect>
 23fc2ec:	2800      	cmp	r0, #0
 23fc2ee:	d1be      	bne.n	23fc26e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
 23fc2f0:	696d      	ldr	r5, [r5, #20]
 23fc2f2:	3404      	adds	r4, #4
 23fc2f4:	358c      	adds	r5, #140	; 0x8c
 23fc2f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fc2f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23fc2fa:	6823      	ldr	r3, [r4, #0]
    return 1; // success
 23fc2fc:	2401      	movs	r4, #1
 23fc2fe:	702b      	strb	r3, [r5, #0]
 23fc300:	e7ba      	b.n	23fc278 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
 23fc302:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
 23fc306:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
 23fc308:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
 23fc30c:	f7fd f9e2 	bl	23f96d4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
 23fc310:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
 23fc312:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
 23fc316:	1d23      	adds	r3, r4, #4
 23fc318:	f104 0714 	add.w	r7, r4, #20
 23fc31c:	4632      	mov	r2, r6
 23fc31e:	6818      	ldr	r0, [r3, #0]
 23fc320:	6859      	ldr	r1, [r3, #4]
 23fc322:	3308      	adds	r3, #8
 23fc324:	c203      	stmia	r2!, {r0, r1}
 23fc326:	42bb      	cmp	r3, r7
 23fc328:	4616      	mov	r6, r2
 23fc32a:	d1f7      	bne.n	23fc31c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
 23fc32c:	e7d8      	b.n	23fc2e0 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

023fc330 <_ZN9TCPClient9availableEv>:
{
 23fc330:	b530      	push	{r4, r5, lr}
 23fc332:	6942      	ldr	r2, [r0, #20]
 23fc334:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
 23fc336:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
 23fc33a:	b08b      	sub	sp, #44	; 0x2c
    if (d_->total && (d_->offset == d_->total)) {
 23fc33c:	b12b      	cbz	r3, 23fc34a <_ZN9TCPClient9availableEv+0x1a>
 23fc33e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 23fc342:	429a      	cmp	r2, r3
 23fc344:	d101      	bne.n	23fc34a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
 23fc346:	f7ff ff6f 	bl	23fc228 <_ZN9TCPClient12flush_bufferEv>
 23fc34a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
 23fc34c:	6808      	ldr	r0, [r1, #0]
 23fc34e:	2800      	cmp	r0, #0
 23fc350:	db18      	blt.n	23fc384 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
 23fc352:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
 23fc356:	2d7f      	cmp	r5, #127	; 0x7f
 23fc358:	d814      	bhi.n	23fc384 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
 23fc35a:	3104      	adds	r1, #4
 23fc35c:	2308      	movs	r3, #8
 23fc35e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
 23fc362:	4429      	add	r1, r5
 23fc364:	f7fd fa0a 	bl	23f977c <sock_recv>
            if (ret > 0) {
 23fc368:	2800      	cmp	r0, #0
 23fc36a:	dd13      	ble.n	23fc394 <_ZN9TCPClient9availableEv+0x64>
 23fc36c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
 23fc36e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fc372:	b90a      	cbnz	r2, 23fc378 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
 23fc374:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 23fc378:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 23fc37a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fc37e:	4410      	add	r0, r2
 23fc380:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 23fc384:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
 23fc386:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 23fc38a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 23fc38e:	1ac0      	subs	r0, r0, r3
 23fc390:	b00b      	add	sp, #44	; 0x2c
 23fc392:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
 23fc394:	f7fd fde2 	bl	23f9f5c <__errno>
 23fc398:	6803      	ldr	r3, [r0, #0]
 23fc39a:	2b0b      	cmp	r3, #11
 23fc39c:	d0f2      	beq.n	23fc384 <_ZN9TCPClient9availableEv+0x54>
 23fc39e:	f7fd fddd 	bl	23f9f5c <__errno>
 23fc3a2:	6803      	ldr	r3, [r0, #0]
 23fc3a4:	2b0b      	cmp	r3, #11
 23fc3a6:	d0ed      	beq.n	23fc384 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
 23fc3a8:	2320      	movs	r3, #32
 23fc3aa:	2500      	movs	r5, #0
 23fc3ac:	e9cd 3502 	strd	r3, r5, [sp, #8]
 23fc3b0:	f7fd fdd4 	bl	23f9f5c <__errno>
 23fc3b4:	6803      	ldr	r3, [r0, #0]
 23fc3b6:	aa02      	add	r2, sp, #8
 23fc3b8:	9301      	str	r3, [sp, #4]
 23fc3ba:	4b08      	ldr	r3, [pc, #32]	; (23fc3dc <_ZN9TCPClient9availableEv+0xac>)
 23fc3bc:	2032      	movs	r0, #50	; 0x32
 23fc3be:	4908      	ldr	r1, [pc, #32]	; (23fc3e0 <_ZN9TCPClient9availableEv+0xb0>)
 23fc3c0:	9300      	str	r3, [sp, #0]
 23fc3c2:	462b      	mov	r3, r5
 23fc3c4:	f7fd fb70 	bl	23f9aa8 <log_message>
                    sock_close(d_->sock);
 23fc3c8:	6963      	ldr	r3, [r4, #20]
 23fc3ca:	6818      	ldr	r0, [r3, #0]
 23fc3cc:	f7fd f9ba 	bl	23f9744 <sock_close>
                    d_->sock = -1;
 23fc3d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fc3d4:	6963      	ldr	r3, [r4, #20]
 23fc3d6:	601a      	str	r2, [r3, #0]
 23fc3d8:	e7d4      	b.n	23fc384 <_ZN9TCPClient9availableEv+0x54>
 23fc3da:	bf00      	nop
 23fc3dc:	023ff97b 	.word	0x023ff97b
 23fc3e0:	023ff974 	.word	0x023ff974

023fc3e4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
 23fc3e4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
 23fc3e6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
 23fc3e8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
 23fc3ea:	6818      	ldr	r0, [r3, #0]
 23fc3ec:	2800      	cmp	r0, #0
 23fc3ee:	db01      	blt.n	23fc3f4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
 23fc3f0:	f7fd f9a8 	bl	23f9744 <sock_close>
    d_->sock = -1;
 23fc3f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fc3f8:	6963      	ldr	r3, [r4, #20]
    void clear() { memset(&address, 0, sizeof (address)); }
 23fc3fa:	2100      	movs	r1, #0
 23fc3fc:	601a      	str	r2, [r3, #0]
 23fc3fe:	6960      	ldr	r0, [r4, #20]
 23fc400:	2211      	movs	r2, #17
 23fc402:	308c      	adds	r0, #140	; 0x8c
 23fc404:	f000 ff4b 	bl	23fd29e <memset>
    flush_buffer();
 23fc408:	4620      	mov	r0, r4
}
 23fc40a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
 23fc40e:	f7ff bf0b 	b.w	23fc228 <_ZN9TCPClient12flush_bufferEv>

023fc412 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 23fc412:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 23fc414:	b510      	push	{r4, lr}
 23fc416:	4604      	mov	r4, r0
          total(0) {
 23fc418:	6001      	str	r1, [r0, #0]
 23fc41a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 23fc41e:	3088      	adds	r0, #136	; 0x88
 23fc420:	f7fd ff14 	bl	23fa24c <_ZN9IPAddressC1Ev>
}
 23fc424:	4620      	mov	r0, r4
 23fc426:	bd10      	pop	{r4, pc}

023fc428 <_ZN9TCPClientC1Ei>:
 23fc428:	2300      	movs	r3, #0
 23fc42a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
TCPClient::TCPClient(sock_handle_t sock)
 23fc42e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fc430:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
 23fc434:	4a0e      	ldr	r2, [pc, #56]	; (23fc470 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 23fc436:	6103      	str	r3, [r0, #16]
 23fc438:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fc43a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
 23fc43c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fc43e:	20ac      	movs	r0, #172	; 0xac
 23fc440:	9101      	str	r1, [sp, #4]
 23fc442:	f7fa fb94 	bl	23f6b6e <_Znwj>
	  auto __pi = ::new (__mem)
 23fc446:	1e05      	subs	r5, r0, #0
 23fc448:	f105 060c 	add.w	r6, r5, #12
 23fc44c:	d008      	beq.n	23fc460 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 23fc44e:	2301      	movs	r3, #1
 23fc450:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 23fc454:	4b07      	ldr	r3, [pc, #28]	; (23fc474 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 23fc456:	4630      	mov	r0, r6
 23fc458:	9901      	ldr	r1, [sp, #4]
 23fc45a:	602b      	str	r3, [r5, #0]
 23fc45c:	f7ff ffd9 	bl	23fc412 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
 23fc460:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 23fc462:	e9c4 6505 	strd	r6, r5, [r4, #20]
 23fc466:	f7ff fedf 	bl	23fc228 <_ZN9TCPClient12flush_bufferEv>
}
 23fc46a:	b002      	add	sp, #8
 23fc46c:	bd70      	pop	{r4, r5, r6, pc}
 23fc46e:	bf00      	nop
 23fc470:	023ff9b0 	.word	0x023ff9b0
 23fc474:	023ff994 	.word	0x023ff994

023fc478 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
 23fc478:	b510      	push	{r4, lr}
 23fc47a:	4604      	mov	r4, r0
        : TCPClient(-1) {
 23fc47c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23fc480:	f7ff ffd2 	bl	23fc428 <_ZN9TCPClientC1Ei>
}
 23fc484:	4620      	mov	r0, r4
 23fc486:	bd10      	pop	{r4, pc}

023fc488 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 23fc488:	b510      	push	{r4, lr}
 23fc48a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 23fc48c:	6800      	ldr	r0, [r0, #0]
 23fc48e:	2800      	cmp	r0, #0
 23fc490:	db01      	blt.n	23fc496 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
 23fc492:	f7fd f957 	bl	23f9744 <sock_close>
    }
}
 23fc496:	4620      	mov	r0, r4
 23fc498:	bd10      	pop	{r4, pc}

023fc49a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 23fc49a:	300c      	adds	r0, #12
 23fc49c:	f7ff bff4 	b.w	23fc488 <_ZN9TCPClient4DataD1Ev>

023fc4a0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 23fc4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 23fc4a4:	4a15      	ldr	r2, [pc, #84]	; (23fc4fc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 23fc4a6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 23fc508 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 23fc4aa:	e9d2 6300 	ldrd	r6, r3, [r2]
 23fc4ae:	1980      	adds	r0, r0, r6
 23fc4b0:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
 23fc4b4:	4b12      	ldr	r3, [pc, #72]	; (23fc500 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 23fc4b6:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 23fc4b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 23fc4bc:	1986      	adds	r6, r0, r6
 23fc4be:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
 23fc4c2:	e9d8 2300 	ldrd	r2, r3, [r8]
 23fc4c6:	42bb      	cmp	r3, r7
 23fc4c8:	bf08      	it	eq
 23fc4ca:	42b2      	cmpeq	r2, r6
 23fc4cc:	d013      	beq.n	23fc4f6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 23fc4ce:	a903      	add	r1, sp, #12
 23fc4d0:	4668      	mov	r0, sp
 23fc4d2:	e9cd 6700 	strd	r6, r7, [sp]
 23fc4d6:	f7fd fd79 	bl	23f9fcc <localtime_r>
	calendar_time.tm_year += 1900;
 23fc4da:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23fc4dc:	4d09      	ldr	r5, [pc, #36]	; (23fc504 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 23fc4de:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23fc4e2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 23fc4e4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23fc4e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fc4e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23fc4ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fc4ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 23fc4ee:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23fc4f2:	6823      	ldr	r3, [r4, #0]
 23fc4f4:	602b      	str	r3, [r5, #0]
    }
}
 23fc4f6:	b00c      	add	sp, #48	; 0x30
 23fc4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fc4fc:	1007aea8 	.word	0x1007aea8
 23fc500:	1007aea0 	.word	0x1007aea0
 23fc504:	1007ae78 	.word	0x1007ae78
 23fc508:	1007aeb0 	.word	0x1007aeb0

023fc50c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 23fc50c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 23fc50e:	2000      	movs	r0, #0
 23fc510:	f7fd fbc6 	bl	23f9ca0 <spark_sync_time_pending>
 23fc514:	b128      	cbz	r0, 23fc522 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fc516:	f7fd fba7 	bl	23f9c68 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 23fc51a:	f080 0001 	eor.w	r0, r0, #1
 23fc51e:	b2c0      	uxtb	r0, r0
    }
 23fc520:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 23fc522:	2001      	movs	r0, #1
 23fc524:	e7fc      	b.n	23fc520 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

023fc528 <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
 23fc528:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23fc52a:	f7ff ffb9 	bl	23fc4a0 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
 23fc52e:	4b02      	ldr	r3, [pc, #8]	; (23fc538 <_ZN9TimeClass7weekdayEx+0x10>)
 23fc530:	6998      	ldr	r0, [r3, #24]
}
 23fc532:	3001      	adds	r0, #1
 23fc534:	bd08      	pop	{r3, pc}
 23fc536:	bf00      	nop
 23fc538:	1007ae78 	.word	0x1007ae78

023fc53c <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 23fc53c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23fc53e:	f7ff ffaf 	bl	23fc4a0 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 23fc542:	4b02      	ldr	r3, [pc, #8]	; (23fc54c <_ZN9TimeClass5monthEx+0x10>)
 23fc544:	6918      	ldr	r0, [r3, #16]
}
 23fc546:	3001      	adds	r0, #1
 23fc548:	bd08      	pop	{r3, pc}
 23fc54a:	bf00      	nop
 23fc54c:	1007ae78 	.word	0x1007ae78

023fc550 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
 23fc550:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 23fc554:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23fc558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 23fc55c:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 23fc55e:	d411      	bmi.n	23fc584 <_ZN9TimeClass4zoneEf+0x34>
 23fc560:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
 23fc564:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23fc568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fc56c:	dc0a      	bgt.n	23fc584 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 23fc56e:	eddf 7a06 	vldr	s15, [pc, #24]	; 23fc588 <_ZN9TimeClass4zoneEf+0x38>
 23fc572:	ee60 7a27 	vmul.f32	s15, s0, s15
 23fc576:	ee17 0a90 	vmov	r0, s15
 23fc57a:	f7fa f8e7 	bl	23f674c <__aeabi_f2lz>
 23fc57e:	4b03      	ldr	r3, [pc, #12]	; (23fc58c <_ZN9TimeClass4zoneEf+0x3c>)
 23fc580:	e9c3 0100 	strd	r0, r1, [r3]
}
 23fc584:	bd08      	pop	{r3, pc}
 23fc586:	bf00      	nop
 23fc588:	45610000 	.word	0x45610000
 23fc58c:	1007aea8 	.word	0x1007aea8

023fc590 <_ZN9TimeClass8beginDSTEv>:
    dst_cache = offset * 3600;
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
 23fc590:	4b03      	ldr	r3, [pc, #12]	; (23fc5a0 <_ZN9TimeClass8beginDSTEv+0x10>)
 23fc592:	e9d3 0100 	ldrd	r0, r1, [r3]
 23fc596:	4b03      	ldr	r3, [pc, #12]	; (23fc5a4 <_ZN9TimeClass8beginDSTEv+0x14>)
 23fc598:	e9c3 0100 	strd	r0, r1, [r3]
}
 23fc59c:	4770      	bx	lr
 23fc59e:	bf00      	nop
 23fc5a0:	1007aae0 	.word	0x1007aae0
 23fc5a4:	1007aea0 	.word	0x1007aea0

023fc5a8 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 23fc5a8:	b530      	push	{r4, r5, lr}
 23fc5aa:	b093      	sub	sp, #76	; 0x4c
 23fc5ac:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
 23fc5b0:	4b19      	ldr	r3, [pc, #100]	; (23fc618 <_ZN9TimeClass7timeStrEx+0x70>)
{
 23fc5b2:	4604      	mov	r4, r0
    t += time_zone_cache;
 23fc5b4:	e9d3 1000 	ldrd	r1, r0, [r3]
 23fc5b8:	9b01      	ldr	r3, [sp, #4]
 23fc5ba:	1852      	adds	r2, r2, r1
 23fc5bc:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
 23fc5c0:	4816      	ldr	r0, [pc, #88]	; (23fc61c <_ZN9TimeClass7timeStrEx+0x74>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 23fc5c2:	2500      	movs	r5, #0
    t += dst_current_cache;
 23fc5c4:	e9d0 1000 	ldrd	r1, r0, [r0]
 23fc5c8:	1852      	adds	r2, r2, r1
 23fc5ca:	eb43 0300 	adc.w	r3, r3, r0
 23fc5ce:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 23fc5d2:	2224      	movs	r2, #36	; 0x24
 23fc5d4:	2100      	movs	r1, #0
 23fc5d6:	eb0d 0002 	add.w	r0, sp, r2
 23fc5da:	f000 fe60 	bl	23fd29e <memset>
    localtime_r(&t, &calendar_time);
 23fc5de:	a909      	add	r1, sp, #36	; 0x24
 23fc5e0:	4668      	mov	r0, sp
 23fc5e2:	f7fd fcf3 	bl	23f9fcc <localtime_r>
    char ascstr[26] = {};
 23fc5e6:	2216      	movs	r2, #22
 23fc5e8:	4629      	mov	r1, r5
 23fc5ea:	a803      	add	r0, sp, #12
 23fc5ec:	9502      	str	r5, [sp, #8]
 23fc5ee:	f000 fe56 	bl	23fd29e <memset>
    asctime_r(&calendar_time, ascstr);
 23fc5f2:	a902      	add	r1, sp, #8
 23fc5f4:	a809      	add	r0, sp, #36	; 0x24
 23fc5f6:	f000 fde7 	bl	23fd1c8 <asctime_r>
    int len = strlen(ascstr);
 23fc5fa:	a802      	add	r0, sp, #8
 23fc5fc:	f7fa fa7a 	bl	23f6af4 <strlen>
    ascstr[len-1] = 0; // remove final newline
 23fc600:	ab12      	add	r3, sp, #72	; 0x48
 23fc602:	4418      	add	r0, r3
 23fc604:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 23fc608:	a902      	add	r1, sp, #8
 23fc60a:	4620      	mov	r0, r4
 23fc60c:	f7ff f9df 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
}
 23fc610:	4620      	mov	r0, r4
 23fc612:	b013      	add	sp, #76	; 0x4c
 23fc614:	bd30      	pop	{r4, r5, pc}
 23fc616:	bf00      	nop
 23fc618:	1007aea8 	.word	0x1007aea8
 23fc61c:	1007aea0 	.word	0x1007aea0

023fc620 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 23fc620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fc624:	b0a4      	sub	sp, #144	; 0x90
 23fc626:	4607      	mov	r7, r0
 23fc628:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23fc62a:	a814      	add	r0, sp, #80	; 0x50
{
 23fc62c:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23fc62e:	223f      	movs	r2, #63	; 0x3f
{
 23fc630:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23fc632:	f000 fe9e 	bl	23fd372 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 23fc636:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 23fc638:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 23fc63a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 23fc63e:	f7fa fa59 	bl	23f6af4 <strlen>
 23fc642:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 23fc644:	bb4c      	cbnz	r4, 23fc69a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
 23fc646:	4929      	ldr	r1, [pc, #164]	; (23fc6ec <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
 23fc648:	a803      	add	r0, sp, #12
 23fc64a:	f000 fe76 	bl	23fd33a <strcpy>
{
 23fc64e:	2600      	movs	r6, #0
 23fc650:	ac14      	add	r4, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 23fc652:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 23fc656:	45b1      	cmp	r9, r6
 23fc658:	d934      	bls.n	23fc6c4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 23fc65a:	7823      	ldrb	r3, [r4, #0]
 23fc65c:	f106 0a01 	add.w	sl, r6, #1
 23fc660:	2b25      	cmp	r3, #37	; 0x25
 23fc662:	d117      	bne.n	23fc694 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
 23fc664:	7863      	ldrb	r3, [r4, #1]
 23fc666:	2b7a      	cmp	r3, #122	; 0x7a
 23fc668:	d114      	bne.n	23fc694 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
 23fc66a:	a803      	add	r0, sp, #12
 23fc66c:	f7fa fa42 	bl	23f6af4 <strlen>
 23fc670:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 23fc672:	ab14      	add	r3, sp, #80	; 0x50
 23fc674:	1830      	adds	r0, r6, r0
 23fc676:	4418      	add	r0, r3
 23fc678:	eba9 0206 	sub.w	r2, r9, r6
 23fc67c:	1ca1      	adds	r1, r4, #2
 23fc67e:	f000 fde7 	bl	23fd250 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 23fc682:	462a      	mov	r2, r5
 23fc684:	a903      	add	r1, sp, #12
 23fc686:	4620      	mov	r0, r4
 23fc688:	f000 fde2 	bl	23fd250 <memcpy>
            len = strlen(format_str);
 23fc68c:	a814      	add	r0, sp, #80	; 0x50
 23fc68e:	f7fa fa31 	bl	23f6af4 <strlen>
 23fc692:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
 23fc694:	4656      	mov	r6, sl
 23fc696:	3401      	adds	r4, #1
 23fc698:	e7db      	b.n	23fc652 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 23fc69a:	233c      	movs	r3, #60	; 0x3c
 23fc69c:	fb94 f2f3 	sdiv	r2, r4, r3
 23fc6a0:	2a00      	cmp	r2, #0
 23fc6a2:	bfb8      	it	lt
 23fc6a4:	4252      	neglt	r2, r2
 23fc6a6:	fbb2 f1f3 	udiv	r1, r2, r3
 23fc6aa:	fb03 2211 	mls	r2, r3, r1, r2
 23fc6ae:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 23fc6b2:	9200      	str	r2, [sp, #0]
 23fc6b4:	fb94 f3f3 	sdiv	r3, r4, r3
 23fc6b8:	2110      	movs	r1, #16
 23fc6ba:	4a0d      	ldr	r2, [pc, #52]	; (23fc6f0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 23fc6bc:	a803      	add	r0, sp, #12
 23fc6be:	f7fd fc15 	bl	23f9eec <snprintf>
 23fc6c2:	e7c4      	b.n	23fc64e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 23fc6c4:	2100      	movs	r1, #0
 23fc6c6:	222e      	movs	r2, #46	; 0x2e
 23fc6c8:	a808      	add	r0, sp, #32
 23fc6ca:	9107      	str	r1, [sp, #28]
 23fc6cc:	f000 fde7 	bl	23fd29e <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 23fc6d0:	4643      	mov	r3, r8
 23fc6d2:	aa14      	add	r2, sp, #80	; 0x50
 23fc6d4:	2132      	movs	r1, #50	; 0x32
 23fc6d6:	a807      	add	r0, sp, #28
 23fc6d8:	f7fd fc6a 	bl	23f9fb0 <strftime>
    return String(buf);
 23fc6dc:	4638      	mov	r0, r7
 23fc6de:	a907      	add	r1, sp, #28
 23fc6e0:	f7ff f975 	bl	23fb9ce <_ZN6StringC1EPK19__FlashStringHelper>
}
 23fc6e4:	4638      	mov	r0, r7
 23fc6e6:	b024      	add	sp, #144	; 0x90
 23fc6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fc6ec:	023ff9f4 	.word	0x023ff9f4
 23fc6f0:	023ff9f6 	.word	0x023ff9f6

023fc6f4 <_ZN9TimeClass6formatExPKc>:
{
 23fc6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc6f6:	b08d      	sub	sp, #52	; 0x34
 23fc6f8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 23fc6fa:	4604      	mov	r4, r0
 23fc6fc:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 23fc700:	b915      	cbnz	r5, 23fc708 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 23fc702:	4b19      	ldr	r3, [pc, #100]	; (23fc768 <_ZN9TimeClass6formatExPKc+0x74>)
 23fc704:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 23fc706:	b12d      	cbz	r5, 23fc714 <_ZN9TimeClass6formatExPKc+0x20>
 23fc708:	4b18      	ldr	r3, [pc, #96]	; (23fc76c <_ZN9TimeClass6formatExPKc+0x78>)
 23fc70a:	4628      	mov	r0, r5
 23fc70c:	6819      	ldr	r1, [r3, #0]
 23fc70e:	f7fa f9e7 	bl	23f6ae0 <strcmp>
 23fc712:	b938      	cbnz	r0, 23fc724 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 23fc714:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fc718:	4620      	mov	r0, r4
 23fc71a:	f7ff ff45 	bl	23fc5a8 <_ZN9TimeClass7timeStrEx>
}
 23fc71e:	4620      	mov	r0, r4
 23fc720:	b00d      	add	sp, #52	; 0x34
 23fc722:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 23fc724:	9900      	ldr	r1, [sp, #0]
 23fc726:	4e12      	ldr	r6, [pc, #72]	; (23fc770 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 23fc728:	4f12      	ldr	r7, [pc, #72]	; (23fc774 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 23fc72a:	e9d6 3200 	ldrd	r3, r2, [r6]
 23fc72e:	185b      	adds	r3, r3, r1
 23fc730:	9901      	ldr	r1, [sp, #4]
 23fc732:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
 23fc736:	e9d7 0100 	ldrd	r0, r1, [r7]
 23fc73a:	181b      	adds	r3, r3, r0
 23fc73c:	eb42 0201 	adc.w	r2, r2, r1
 23fc740:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 23fc744:	2100      	movs	r1, #0
 23fc746:	2224      	movs	r2, #36	; 0x24
 23fc748:	a803      	add	r0, sp, #12
 23fc74a:	f000 fda8 	bl	23fd29e <memset>
    localtime_r(&t, &calendar_time);
 23fc74e:	a903      	add	r1, sp, #12
 23fc750:	4668      	mov	r0, sp
 23fc752:	f7fd fc3b 	bl	23f9fcc <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 23fc756:	6832      	ldr	r2, [r6, #0]
 23fc758:	683b      	ldr	r3, [r7, #0]
 23fc75a:	4620      	mov	r0, r4
 23fc75c:	4413      	add	r3, r2
 23fc75e:	a903      	add	r1, sp, #12
 23fc760:	462a      	mov	r2, r5
 23fc762:	f7ff ff5d 	bl	23fc620 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 23fc766:	e7da      	b.n	23fc71e <_ZN9TimeClass6formatExPKc+0x2a>
 23fc768:	1007ae74 	.word	0x1007ae74
 23fc76c:	1007aad8 	.word	0x1007aad8
 23fc770:	1007aea8 	.word	0x1007aea8
 23fc774:	1007aea0 	.word	0x1007aea0

023fc778 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 23fc778:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 23fc77a:	2000      	movs	r0, #0
 23fc77c:	f7fc fed8 	bl	23f9530 <hal_rtc_time_is_valid>
    if (rtcstate)
 23fc780:	4604      	mov	r4, r0
 23fc782:	b9a0      	cbnz	r0, 23fc7ae <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 23fc784:	f7fd f9c8 	bl	23f9b18 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 23fc788:	2801      	cmp	r0, #1
 23fc78a:	d110      	bne.n	23fc7ae <_ZN9TimeClass7isValidEv+0x36>
 23fc78c:	4620      	mov	r0, r4
 23fc78e:	f7fd fa09 	bl	23f9ba4 <system_thread_get_state>
 23fc792:	b960      	cbnz	r0, 23fc7ae <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 23fc794:	f7ff feba 	bl	23fc50c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 23fc798:	b910      	cbnz	r0, 23fc7a0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 23fc79a:	f7fd fa57 	bl	23f9c4c <spark_process>
        while (_while() && !_condition()) {
 23fc79e:	e7f9      	b.n	23fc794 <_ZN9TimeClass7isValidEv+0x1c>
 23fc7a0:	f7ff feb4 	bl	23fc50c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 23fc7a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 23fc7a8:	2000      	movs	r0, #0
 23fc7aa:	f7fc bec1 	b.w	23f9530 <hal_rtc_time_is_valid>
}
 23fc7ae:	4620      	mov	r0, r4
 23fc7b0:	bd10      	pop	{r4, pc}

023fc7b2 <_ZN9TimeClass3nowEv>:
{
 23fc7b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 23fc7b4:	f7ff ffe0 	bl	23fc778 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 23fc7b8:	2210      	movs	r2, #16
 23fc7ba:	2100      	movs	r1, #0
 23fc7bc:	4668      	mov	r0, sp
 23fc7be:	f000 fd6e 	bl	23fd29e <memset>
    hal_rtc_get_time(&tv, nullptr);
 23fc7c2:	2100      	movs	r1, #0
 23fc7c4:	4668      	mov	r0, sp
 23fc7c6:	f7fc fec1 	bl	23f954c <hal_rtc_get_time>
}
 23fc7ca:	9800      	ldr	r0, [sp, #0]
 23fc7cc:	b005      	add	sp, #20
 23fc7ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fc7d4 <_ZN9TimeClass4hourEv>:
{
 23fc7d4:	b508      	push	{r3, lr}
	return hour(now());
 23fc7d6:	f7ff ffec 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23fc7da:	17c1      	asrs	r1, r0, #31
 23fc7dc:	f7ff fe60 	bl	23fc4a0 <_ZL22Refresh_UnixTime_Cachex>
}
 23fc7e0:	4b01      	ldr	r3, [pc, #4]	; (23fc7e8 <_ZN9TimeClass4hourEv+0x14>)
 23fc7e2:	6898      	ldr	r0, [r3, #8]
 23fc7e4:	bd08      	pop	{r3, pc}
 23fc7e6:	bf00      	nop
 23fc7e8:	1007ae78 	.word	0x1007ae78

023fc7ec <_ZN9TimeClass3dayEv>:
{
 23fc7ec:	b508      	push	{r3, lr}
	return day(now());
 23fc7ee:	f7ff ffe0 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23fc7f2:	17c1      	asrs	r1, r0, #31
 23fc7f4:	f7ff fe54 	bl	23fc4a0 <_ZL22Refresh_UnixTime_Cachex>
}
 23fc7f8:	4b01      	ldr	r3, [pc, #4]	; (23fc800 <_ZN9TimeClass3dayEv+0x14>)
 23fc7fa:	68d8      	ldr	r0, [r3, #12]
 23fc7fc:	bd08      	pop	{r3, pc}
 23fc7fe:	bf00      	nop
 23fc800:	1007ae78 	.word	0x1007ae78

023fc804 <_ZN9TimeClass7weekdayEv>:
{
 23fc804:	b508      	push	{r3, lr}
	return weekday(now());
 23fc806:	f7ff ffd4 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
}
 23fc80a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
 23fc80e:	17c1      	asrs	r1, r0, #31
 23fc810:	f7ff be8a 	b.w	23fc528 <_ZN9TimeClass7weekdayEx>

023fc814 <_ZN9TimeClass5monthEv>:
{
 23fc814:	b508      	push	{r3, lr}
	return month(now());
 23fc816:	f7ff ffcc 	bl	23fc7b2 <_ZN9TimeClass3nowEv>
}
 23fc81a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 23fc81e:	17c1      	asrs	r1, r0, #31
 23fc820:	f7ff be8c 	b.w	23fc53c <_ZN9TimeClass5monthEx>

023fc824 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fc824:	4b02      	ldr	r3, [pc, #8]	; (23fc830 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fc826:	681a      	ldr	r2, [r3, #0]
 23fc828:	4b02      	ldr	r3, [pc, #8]	; (23fc834 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fc82a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fc82c:	4770      	bx	lr
 23fc82e:	bf00      	nop
 23fc830:	1007aad8 	.word	0x1007aad8
 23fc834:	1007ae74 	.word	0x1007ae74

023fc838 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fc838:	4770      	bx	lr

023fc83a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fc83a:	7441      	strb	r1, [r0, #17]
}
 23fc83c:	4770      	bx	lr

023fc83e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fc83e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fc840:	7c00      	ldrb	r0, [r0, #16]
 23fc842:	f7fd f843 	bl	23f98cc <hal_usart_available_data_for_write>
}
 23fc846:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fc84a:	bd08      	pop	{r3, pc}

023fc84c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fc84c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fc84e:	7c00      	ldrb	r0, [r0, #16]
 23fc850:	f7fc fff6 	bl	23f9840 <hal_usart_available>
}
 23fc854:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fc858:	bd08      	pop	{r3, pc}

023fc85a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fc85a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fc85c:	7c00      	ldrb	r0, [r0, #16]
 23fc85e:	f7fd f80b 	bl	23f9878 <hal_usart_peek>
}
 23fc862:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fc866:	bd08      	pop	{r3, pc}

023fc868 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fc868:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fc86a:	7c00      	ldrb	r0, [r0, #16]
 23fc86c:	f7fc fff6 	bl	23f985c <hal_usart_read>
}
 23fc870:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fc874:	bd08      	pop	{r3, pc}

023fc876 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fc876:	7c00      	ldrb	r0, [r0, #16]
 23fc878:	f7fd b80c 	b.w	23f9894 <hal_usart_flush>

023fc87c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fc87c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fc87e:	7c45      	ldrb	r5, [r0, #17]
{
 23fc880:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fc882:	b12d      	cbz	r5, 23fc890 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fc884:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fc886:	b003      	add	sp, #12
 23fc888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fc88c:	f7fc bfca 	b.w	23f9824 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fc890:	7c00      	ldrb	r0, [r0, #16]
 23fc892:	9101      	str	r1, [sp, #4]
 23fc894:	f7fd f81a 	bl	23f98cc <hal_usart_available_data_for_write>
 23fc898:	2800      	cmp	r0, #0
 23fc89a:	9901      	ldr	r1, [sp, #4]
 23fc89c:	dcf2      	bgt.n	23fc884 <_ZN11USARTSerial5writeEh+0x8>
}
 23fc89e:	4628      	mov	r0, r5
 23fc8a0:	b003      	add	sp, #12
 23fc8a2:	bd30      	pop	{r4, r5, pc}

023fc8a4 <_ZN11USARTSerialD0Ev>:
 23fc8a4:	b510      	push	{r4, lr}
 23fc8a6:	4604      	mov	r4, r0
 23fc8a8:	2114      	movs	r1, #20
 23fc8aa:	f7fa f966 	bl	23f6b7a <_ZdlPvj>
 23fc8ae:	4620      	mov	r0, r4
 23fc8b0:	bd10      	pop	{r4, pc}
	...

023fc8b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fc8b4:	b510      	push	{r4, lr}
 23fc8b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fc8ba:	4604      	mov	r4, r0
 23fc8bc:	4608      	mov	r0, r1
 23fc8be:	4611      	mov	r1, r2
 23fc8c0:	2200      	movs	r2, #0
 23fc8c2:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fc8c6:	4b04      	ldr	r3, [pc, #16]	; (23fc8d8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fc8c8:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fc8ca:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fc8cc:	2301      	movs	r3, #1
 23fc8ce:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fc8d0:	f7fd f818 	bl	23f9904 <hal_usart_init_ex>
}
 23fc8d4:	4620      	mov	r0, r4
 23fc8d6:	bd10      	pop	{r4, pc}
 23fc8d8:	023ffa28 	.word	0x023ffa28

023fc8dc <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fc8dc:	2300      	movs	r3, #0
 23fc8de:	7c00      	ldrb	r0, [r0, #16]
 23fc8e0:	f7fd b802 	b.w	23f98e8 <hal_usart_begin_config>

023fc8e4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fc8e4:	2200      	movs	r2, #0
 23fc8e6:	f7ff bff9 	b.w	23fc8dc <_ZN11USARTSerial5beginEmm>

023fc8ea <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fc8ea:	7c00      	ldrb	r0, [r0, #16]
 23fc8ec:	f7fc bf8c 	b.w	23f9808 <hal_usart_end>

023fc8f0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fc8f0:	7c00      	ldrb	r0, [r0, #16]
 23fc8f2:	f7fc bfdd 	b.w	23f98b0 <hal_usart_is_enabled>

023fc8f6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fc8f6:	7441      	strb	r1, [r0, #17]
}
 23fc8f8:	4770      	bx	lr

023fc8fa <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fc8fa:	4770      	bx	lr

023fc8fc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fc8fc:	4770      	bx	lr

023fc8fe <_ZN9USBSerial4readEv>:
{
 23fc8fe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fc900:	2100      	movs	r1, #0
 23fc902:	7c00      	ldrb	r0, [r0, #16]
 23fc904:	f7fd f852 	bl	23f99ac <HAL_USB_USART_Receive_Data>
}
 23fc908:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fc90c:	bd08      	pop	{r3, pc}

023fc90e <_ZN9USBSerial4peekEv>:
{
 23fc90e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fc910:	2101      	movs	r1, #1
 23fc912:	7c00      	ldrb	r0, [r0, #16]
 23fc914:	f7fd f84a 	bl	23f99ac <HAL_USB_USART_Receive_Data>
}
 23fc918:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fc91c:	bd08      	pop	{r3, pc}

023fc91e <_ZN9USBSerial17availableForWriteEv>:
{
 23fc91e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fc920:	7c00      	ldrb	r0, [r0, #16]
 23fc922:	f7fd f835 	bl	23f9990 <HAL_USB_USART_Available_Data_For_Write>
}
 23fc926:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fc92a:	bd08      	pop	{r3, pc}

023fc92c <_ZN9USBSerial9availableEv>:
{
 23fc92c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fc92e:	7c00      	ldrb	r0, [r0, #16]
 23fc930:	f7fd f820 	bl	23f9974 <HAL_USB_USART_Available_Data>
}
 23fc934:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fc938:	bd08      	pop	{r3, pc}

023fc93a <_ZN9USBSerial5writeEh>:
{
 23fc93a:	b513      	push	{r0, r1, r4, lr}
 23fc93c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fc93e:	7c00      	ldrb	r0, [r0, #16]
{
 23fc940:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fc942:	f7fd f825 	bl	23f9990 <HAL_USB_USART_Available_Data_For_Write>
 23fc946:	2800      	cmp	r0, #0
 23fc948:	9901      	ldr	r1, [sp, #4]
 23fc94a:	dc01      	bgt.n	23fc950 <_ZN9USBSerial5writeEh+0x16>
 23fc94c:	7c60      	ldrb	r0, [r4, #17]
 23fc94e:	b120      	cbz	r0, 23fc95a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fc950:	7c20      	ldrb	r0, [r4, #16]
 23fc952:	f7fd f839 	bl	23f99c8 <HAL_USB_USART_Send_Data>
 23fc956:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fc95a:	b002      	add	sp, #8
 23fc95c:	bd10      	pop	{r4, pc}

023fc95e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fc95e:	7c00      	ldrb	r0, [r0, #16]
 23fc960:	f7fd b840 	b.w	23f99e4 <HAL_USB_USART_Flush_Data>

023fc964 <_ZN9USBSerialD0Ev>:
 23fc964:	b510      	push	{r4, lr}
 23fc966:	4604      	mov	r4, r0
 23fc968:	2114      	movs	r1, #20
 23fc96a:	f7fa f906 	bl	23f6b7a <_ZdlPvj>
 23fc96e:	4620      	mov	r0, r4
 23fc970:	bd10      	pop	{r4, pc}
	...

023fc974 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fc974:	b510      	push	{r4, lr}
 23fc976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fc97a:	4604      	mov	r4, r0
 23fc97c:	4608      	mov	r0, r1
 23fc97e:	2100      	movs	r1, #0
 23fc980:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fc984:	4b04      	ldr	r3, [pc, #16]	; (23fc998 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fc986:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fc988:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fc98a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fc98c:	4611      	mov	r1, r2
  _blocking = true;
 23fc98e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fc990:	f7fc ffc6 	bl	23f9920 <HAL_USB_USART_Init>
}
 23fc994:	4620      	mov	r0, r4
 23fc996:	bd10      	pop	{r4, pc}
 23fc998:	023ffa58 	.word	0x023ffa58

023fc99c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fc99c:	2200      	movs	r2, #0
 23fc99e:	7c00      	ldrb	r0, [r0, #16]
 23fc9a0:	f7fc bfcc 	b.w	23f993c <HAL_USB_USART_Begin>

023fc9a4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fc9a4:	7c00      	ldrb	r0, [r0, #16]
 23fc9a6:	f7fc bfd7 	b.w	23f9958 <HAL_USB_USART_End>

023fc9aa <_Z19acquireSerialBufferv>:
{
 23fc9aa:	b510      	push	{r4, lr}
 23fc9ac:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fc9ae:	2214      	movs	r2, #20
 23fc9b0:	2100      	movs	r1, #0
 23fc9b2:	f000 fc74 	bl	23fd29e <memset>
}
 23fc9b6:	4620      	mov	r0, r4
 23fc9b8:	bd10      	pop	{r4, pc}
	...

023fc9bc <_Z16_fetch_usbserialv>:
{
 23fc9bc:	b510      	push	{r4, lr}
 23fc9be:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fc9c0:	a803      	add	r0, sp, #12
 23fc9c2:	f7ff fff2 	bl	23fc9aa <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fc9c6:	4c0c      	ldr	r4, [pc, #48]	; (23fc9f8 <_Z16_fetch_usbserialv+0x3c>)
 23fc9c8:	e8d4 1f8f 	ldab	r1, [r4]
 23fc9cc:	f011 0101 	ands.w	r1, r1, #1
 23fc9d0:	d10f      	bne.n	23fc9f2 <_Z16_fetch_usbserialv+0x36>
 23fc9d2:	4620      	mov	r0, r4
 23fc9d4:	9101      	str	r1, [sp, #4]
 23fc9d6:	f7fa f8df 	bl	23f6b98 <__cxa_guard_acquire>
 23fc9da:	9901      	ldr	r1, [sp, #4]
 23fc9dc:	b148      	cbz	r0, 23fc9f2 <_Z16_fetch_usbserialv+0x36>
 23fc9de:	aa03      	add	r2, sp, #12
 23fc9e0:	4806      	ldr	r0, [pc, #24]	; (23fc9fc <_Z16_fetch_usbserialv+0x40>)
 23fc9e2:	f7ff ffc7 	bl	23fc974 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fc9e6:	4620      	mov	r0, r4
 23fc9e8:	f7fa f8db 	bl	23f6ba2 <__cxa_guard_release>
 23fc9ec:	4804      	ldr	r0, [pc, #16]	; (23fca00 <_Z16_fetch_usbserialv+0x44>)
 23fc9ee:	f000 fc11 	bl	23fd214 <atexit>
	return _usbserial;
}
 23fc9f2:	4802      	ldr	r0, [pc, #8]	; (23fc9fc <_Z16_fetch_usbserialv+0x40>)
 23fc9f4:	b008      	add	sp, #32
 23fc9f6:	bd10      	pop	{r4, pc}
 23fc9f8:	1007aeb8 	.word	0x1007aeb8
 23fc9fc:	1007aebc 	.word	0x1007aebc
 23fca00:	023fc8fb 	.word	0x023fc8fb

023fca04 <_ZN8particle13WatchdogClass4initERKNS_21WatchdogConfigurationE>:
LOG_SOURCE_CATEGORY("wiring.watchdog")

namespace particle {

int WatchdogClass::init(const WatchdogConfiguration& config) {
    instance_ = config.watchdogInstance();
 23fca04:	2200      	movs	r2, #0
 23fca06:	7402      	strb	r2, [r0, #16]
    return hal_watchdog_set_config(instance_, config.halConfig(), nullptr);
 23fca08:	4610      	mov	r0, r2
 23fca0a:	f7fc bff9 	b.w	23f9a00 <hal_watchdog_set_config>

023fca0e <_ZN8particle13WatchdogClass5startEv>:
}

int WatchdogClass::start() {
    return hal_watchdog_start(instance_, nullptr);
 23fca0e:	2100      	movs	r1, #0
 23fca10:	7c00      	ldrb	r0, [r0, #16]
 23fca12:	f7fd b803 	b.w	23f9a1c <hal_watchdog_start>

023fca16 <_ZN8particle13WatchdogClass7refreshEv>:
int WatchdogClass::stop() {
    return hal_watchdog_stop(instance_, nullptr);
}

int WatchdogClass::refresh() {
    return hal_watchdog_refresh(instance_, nullptr);
 23fca16:	2100      	movs	r1, #0
 23fca18:	7c00      	ldrb	r0, [r0, #16]
 23fca1a:	f7fd b80d 	b.w	23f9a38 <hal_watchdog_refresh>

023fca1e <_ZN8particle13WatchdogClass7getInfoERNS_12WatchdogInfoE>:
}

int WatchdogClass::getInfo(WatchdogInfo& info) {
    return hal_watchdog_get_info(instance_, info.halInfo(), nullptr);
 23fca1e:	2200      	movs	r2, #0
 23fca20:	7c00      	ldrb	r0, [r0, #16]
 23fca22:	3124      	adds	r1, #36	; 0x24
 23fca24:	f7fd b816 	b.w	23f9a54 <hal_watchdog_get_info>

023fca28 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fca28:	2200      	movs	r2, #0
 23fca2a:	6840      	ldr	r0, [r0, #4]
 23fca2c:	4611      	mov	r1, r2
 23fca2e:	f7fd b9b5 	b.w	23f9d9c <network_listening>

023fca32 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fca32:	2200      	movs	r2, #0
 23fca34:	6840      	ldr	r0, [r0, #4]
 23fca36:	4611      	mov	r1, r2
 23fca38:	f7fd b9da 	b.w	23f9df0 <network_get_listen_timeout>

023fca3c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fca3c:	2200      	movs	r2, #0
 23fca3e:	6840      	ldr	r0, [r0, #4]
 23fca40:	f7fd b9c8 	b.w	23f9dd4 <network_set_listen_timeout>

023fca44 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fca44:	2200      	movs	r2, #0
 23fca46:	6840      	ldr	r0, [r0, #4]
 23fca48:	f081 0101 	eor.w	r1, r1, #1
 23fca4c:	f7fd b998 	b.w	23f9d80 <network_listen>

023fca50 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fca50:	2300      	movs	r3, #0
 23fca52:	6840      	ldr	r0, [r0, #4]
 23fca54:	461a      	mov	r2, r3
 23fca56:	4619      	mov	r1, r3
 23fca58:	f7fd b984 	b.w	23f9d64 <network_off>

023fca5c <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fca5c:	2300      	movs	r3, #0
 23fca5e:	6840      	ldr	r0, [r0, #4]
 23fca60:	461a      	mov	r2, r3
 23fca62:	4619      	mov	r1, r3
 23fca64:	f7fd b970 	b.w	23f9d48 <network_on>

023fca68 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fca68:	2200      	movs	r2, #0
 23fca6a:	6840      	ldr	r0, [r0, #4]
 23fca6c:	4611      	mov	r1, r2
 23fca6e:	f7fd b941 	b.w	23f9cf4 <network_connecting>

023fca72 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fca72:	2200      	movs	r2, #0
 23fca74:	2102      	movs	r1, #2
 23fca76:	6840      	ldr	r0, [r0, #4]
 23fca78:	f7fd b94a 	b.w	23f9d10 <network_disconnect>

023fca7c <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fca7c:	2300      	movs	r3, #0
 23fca7e:	6840      	ldr	r0, [r0, #4]
 23fca80:	461a      	mov	r2, r3
 23fca82:	f7fd b929 	b.w	23f9cd8 <network_connect>
	...

023fca88 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fca88:	2204      	movs	r2, #4
 23fca8a:	4b02      	ldr	r3, [pc, #8]	; (23fca94 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fca8c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fca8e:	4a02      	ldr	r2, [pc, #8]	; (23fca98 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fca90:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fca92:	4770      	bx	lr
 23fca94:	1007aed0 	.word	0x1007aed0
 23fca98:	023ffa88 	.word	0x023ffa88

023fca9c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 23fca9c:	b510      	push	{r4, lr}
 23fca9e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 23fcaa0:	f7fa f828 	bl	23f6af4 <strlen>
 23fcaa4:	3801      	subs	r0, #1
 23fcaa6:	1823      	adds	r3, r4, r0
 23fcaa8:	4620      	mov	r0, r4
	while(i<j){
 23fcaaa:	4283      	cmp	r3, r0
 23fcaac:	d906      	bls.n	23fcabc <_Z11str_reversePc+0x20>
		c = *i;
 23fcaae:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 23fcab0:	7819      	ldrb	r1, [r3, #0]
 23fcab2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 23fcab6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 23fcaba:	e7f6      	b.n	23fcaaa <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 23fcabc:	bd10      	pop	{r4, pc}

023fcabe <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 23fcabe:	b570      	push	{r4, r5, r6, lr}
 23fcac0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 23fcac2:	1e91      	subs	r1, r2, #2
 23fcac4:	2922      	cmp	r1, #34	; 0x22
 23fcac6:	d81d      	bhi.n	23fcb04 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
 23fcac8:	4625      	mov	r5, r4

	div_t result;
	while(a){
 23fcaca:	b930      	cbnz	r0, 23fcada <ultoa+0x1c>
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 23fcacc:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
 23fcace:	4423      	add	r3, r4
 23fcad0:	429d      	cmp	r5, r3
 23fcad2:	d210      	bcs.n	23fcaf6 <ultoa+0x38>
            *ptr++ = '0';
 23fcad4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
 23fcad8:	e7fa      	b.n	23fcad0 <ultoa+0x12>
            result.quot = a/radix;
 23fcada:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 23fcade:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 23fcae2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 23fcae4:	2809      	cmp	r0, #9
                *ptr += '0';
 23fcae6:	bf94      	ite	ls
 23fcae8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
 23fcaea:	3157      	addhi	r1, #87	; 0x57
 23fcaec:	b2c9      	uxtb	r1, r1
            a = result.quot;
 23fcaee:	4630      	mov	r0, r6
 23fcaf0:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 23fcaf4:	e7e9      	b.n	23fcaca <ultoa+0xc>

	*ptr = '\0';
 23fcaf6:	2300      	movs	r3, #0
	str_reverse(buffer);
 23fcaf8:	4620      	mov	r0, r4
	*ptr = '\0';
 23fcafa:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
 23fcafc:	f7ff ffce 	bl	23fca9c <_Z11str_reversePc>
	return buffer;
 23fcb00:	4620      	mov	r0, r4
}
 23fcb02:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 23fcb04:	2000      	movs	r0, #0
 23fcb06:	e7fc      	b.n	23fcb02 <ultoa+0x44>

023fcb08 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 23fcb08:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 23fcb0a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 23fcb0c:	460c      	mov	r4, r1
 23fcb0e:	4615      	mov	r5, r2
	if(a<0){
 23fcb10:	da0d      	bge.n	23fcb2e <itoa+0x26>
		*buffer = '-';
 23fcb12:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 23fcb14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23fcb18:	bf0c      	ite	eq
 23fcb1a:	4618      	moveq	r0, r3
 23fcb1c:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 23fcb1e:	2301      	movs	r3, #1
		*buffer = '-';
 23fcb20:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 23fcb22:	462a      	mov	r2, r5
 23fcb24:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 23fcb26:	f7ff ffca 	bl	23fcabe <ultoa>
	}
	return buffer;
}
 23fcb2a:	4620      	mov	r0, r4
 23fcb2c:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 23fcb2e:	2301      	movs	r3, #1
 23fcb30:	e7f9      	b.n	23fcb26 <itoa+0x1e>
	...

023fcb34 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fcb34:	4b01      	ldr	r3, [pc, #4]	; (23fcb3c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fcb36:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fcb38:	4770      	bx	lr
 23fcb3a:	bf00      	nop
 23fcb3c:	1007aae8 	.word	0x1007aae8

023fcb40 <serialEventRun>:
{
 23fcb40:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fcb42:	4b0f      	ldr	r3, [pc, #60]	; (23fcb80 <serialEventRun+0x40>)
 23fcb44:	b143      	cbz	r3, 23fcb58 <serialEventRun+0x18>
 23fcb46:	f7ff ff39 	bl	23fc9bc <_Z16_fetch_usbserialv>
 23fcb4a:	6803      	ldr	r3, [r0, #0]
 23fcb4c:	691b      	ldr	r3, [r3, #16]
 23fcb4e:	4798      	blx	r3
 23fcb50:	2800      	cmp	r0, #0
 23fcb52:	dd01      	ble.n	23fcb58 <serialEventRun+0x18>
        serialEvent();
 23fcb54:	e000      	b.n	23fcb58 <serialEventRun+0x18>
 23fcb56:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fcb58:	4b0a      	ldr	r3, [pc, #40]	; (23fcb84 <serialEventRun+0x44>)
 23fcb5a:	b143      	cbz	r3, 23fcb6e <serialEventRun+0x2e>
 23fcb5c:	f000 f980 	bl	23fce60 <_Z22__fetch_global_Serial1v>
 23fcb60:	6803      	ldr	r3, [r0, #0]
 23fcb62:	691b      	ldr	r3, [r3, #16]
 23fcb64:	4798      	blx	r3
 23fcb66:	2800      	cmp	r0, #0
 23fcb68:	dd01      	ble.n	23fcb6e <serialEventRun+0x2e>
        serialEvent1();
 23fcb6a:	e000      	b.n	23fcb6e <serialEventRun+0x2e>
 23fcb6c:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fcb6e:	4b06      	ldr	r3, [pc, #24]	; (23fcb88 <serialEventRun+0x48>)
 23fcb70:	b10b      	cbz	r3, 23fcb76 <serialEventRun+0x36>
 23fcb72:	f000 f9bb 	bl	23fceec <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fcb76:	4b05      	ldr	r3, [pc, #20]	; (23fcb8c <serialEventRun+0x4c>)
 23fcb78:	b10b      	cbz	r3, 23fcb7e <serialEventRun+0x3e>
 23fcb7a:	f000 f9ed 	bl	23fcf58 <_Z15serialEventRun3v>
}
 23fcb7e:	bd08      	pop	{r3, pc}
	...

023fcb90 <_post_loop>:
{
 23fcb90:	b508      	push	{r3, lr}
	serialEventRun();
 23fcb92:	f7ff ffd5 	bl	23fcb40 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fcb96:	f7fc fc93 	bl	23f94c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fcb9a:	4b01      	ldr	r3, [pc, #4]	; (23fcba0 <_post_loop+0x10>)
 23fcb9c:	6018      	str	r0, [r3, #0]
}
 23fcb9e:	bd08      	pop	{r3, pc}
 23fcba0:	1007aeec 	.word	0x1007aeec

023fcba4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fcba4:	4805      	ldr	r0, [pc, #20]	; (23fcbbc <_Z33system_initialize_user_backup_ramv+0x18>)
 23fcba6:	4a06      	ldr	r2, [pc, #24]	; (23fcbc0 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fcba8:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fcbaa:	1a12      	subs	r2, r2, r0
 23fcbac:	4905      	ldr	r1, [pc, #20]	; (23fcbc4 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fcbae:	f000 fb4f 	bl	23fd250 <memcpy>
    __backup_sram_signature = signature;
 23fcbb2:	4b05      	ldr	r3, [pc, #20]	; (23fcbc8 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fcbb4:	4a05      	ldr	r2, [pc, #20]	; (23fcbcc <_Z33system_initialize_user_backup_ramv+0x28>)
 23fcbb6:	601a      	str	r2, [r3, #0]
}
 23fcbb8:	bd08      	pop	{r3, pc}
 23fcbba:	bf00      	nop
 23fcbbc:	1007b400 	.word	0x1007b400
 23fcbc0:	1007b404 	.word	0x1007b404
 23fcbc4:	085ff514 	.word	0x085ff514
 23fcbc8:	1007b400 	.word	0x1007b400
 23fcbcc:	9a271c1e 	.word	0x9a271c1e

023fcbd0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fcbd0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fcbd2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fcbd4:	461a      	mov	r2, r3
 23fcbd6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fcbda:	9300      	str	r3, [sp, #0]
 23fcbdc:	f7fc fffe 	bl	23f9bdc <system_ctrl_set_result>
}
 23fcbe0:	b003      	add	sp, #12
 23fcbe2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fcbe8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fcbe8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fcbea:	8843      	ldrh	r3, [r0, #2]
 23fcbec:	2b0a      	cmp	r3, #10
 23fcbee:	d008      	beq.n	23fcc02 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fcbf0:	2b50      	cmp	r3, #80	; 0x50
 23fcbf2:	d10b      	bne.n	23fcc0c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fcbf4:	4b09      	ldr	r3, [pc, #36]	; (23fcc1c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fcbf6:	681b      	ldr	r3, [r3, #0]
 23fcbf8:	b14b      	cbz	r3, 23fcc0e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fcbfa:	b003      	add	sp, #12
 23fcbfc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fcc00:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fcc02:	f7ff ffe5 	bl	23fcbd0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fcc06:	b003      	add	sp, #12
 23fcc08:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fcc0c:	2300      	movs	r3, #0
 23fcc0e:	461a      	mov	r2, r3
 23fcc10:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fcc14:	9300      	str	r3, [sp, #0]
 23fcc16:	f7fc ffe1 	bl	23f9bdc <system_ctrl_set_result>
}
 23fcc1a:	e7f4      	b.n	23fcc06 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fcc1c:	1007aedc 	.word	0x1007aedc

023fcc20 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fcc20:	2100      	movs	r1, #0
{
 23fcc22:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fcc24:	4811      	ldr	r0, [pc, #68]	; (23fcc6c <module_user_init_hook+0x4c>)
 23fcc26:	f7fd f9b5 	bl	23f9f94 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fcc2a:	4b11      	ldr	r3, [pc, #68]	; (23fcc70 <module_user_init_hook+0x50>)
 23fcc2c:	681a      	ldr	r2, [r3, #0]
 23fcc2e:	4b11      	ldr	r3, [pc, #68]	; (23fcc74 <module_user_init_hook+0x54>)
 23fcc30:	429a      	cmp	r2, r3
 23fcc32:	bf0c      	ite	eq
 23fcc34:	2201      	moveq	r2, #1
 23fcc36:	2200      	movne	r2, #0
 23fcc38:	4b0f      	ldr	r3, [pc, #60]	; (23fcc78 <module_user_init_hook+0x58>)
 23fcc3a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fcc3c:	d001      	beq.n	23fcc42 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fcc3e:	f7ff ffb1 	bl	23fcba4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fcc42:	f7fc fc21 	bl	23f9488 <HAL_RNG_GetRandomNumber>
 23fcc46:	4604      	mov	r4, r0
    srand(seed);
 23fcc48:	f000 fb32 	bl	23fd2b0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fcc4c:	4b0b      	ldr	r3, [pc, #44]	; (23fcc7c <module_user_init_hook+0x5c>)
 23fcc4e:	b113      	cbz	r3, 23fcc56 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fcc50:	4620      	mov	r0, r4
 23fcc52:	e000      	b.n	23fcc56 <module_user_init_hook+0x36>
 23fcc54:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fcc56:	2100      	movs	r1, #0
 23fcc58:	4808      	ldr	r0, [pc, #32]	; (23fcc7c <module_user_init_hook+0x5c>)
 23fcc5a:	f7fd f82f 	bl	23f9cbc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fcc5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fcc62:	2100      	movs	r1, #0
 23fcc64:	4806      	ldr	r0, [pc, #24]	; (23fcc80 <module_user_init_hook+0x60>)
 23fcc66:	f7fc bfab 	b.w	23f9bc0 <system_ctrl_set_app_request_handler>
 23fcc6a:	bf00      	nop
 23fcc6c:	023fcb35 	.word	0x023fcb35
 23fcc70:	1007b400 	.word	0x1007b400
 23fcc74:	9a271c1e 	.word	0x9a271c1e
 23fcc78:	1007aed8 	.word	0x1007aed8
 23fcc7c:	00000000 	.word	0x00000000
 23fcc80:	023fcbe9 	.word	0x023fcbe9

023fcc84 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fcc84:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fcc86:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcc88:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fcc8a:	d902      	bls.n	23fcc92 <pinAvailable+0xe>
    return false;
 23fcc8c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fcc8e:	b003      	add	sp, #12
 23fcc90:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fcc92:	f1a0 030f 	sub.w	r3, r0, #15
 23fcc96:	2b02      	cmp	r3, #2
 23fcc98:	d90b      	bls.n	23fccb2 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fcc9a:	2801      	cmp	r0, #1
 23fcc9c:	d821      	bhi.n	23fcce2 <pinAvailable+0x5e>
 23fcc9e:	f000 f88b 	bl	23fcdb8 <_Z19__fetch_global_Wirev>
 23fcca2:	2100      	movs	r1, #0
 23fcca4:	7c00      	ldrb	r0, [r0, #16]
 23fcca6:	f7fc fccf 	bl	23f9648 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fccaa:	f080 0001 	eor.w	r0, r0, #1
 23fccae:	b2c0      	uxtb	r0, r0
 23fccb0:	e7ed      	b.n	23fcc8e <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fccb2:	4d11      	ldr	r5, [pc, #68]	; (23fccf8 <pinAvailable+0x74>)
 23fccb4:	e8d5 1f8f 	ldab	r1, [r5]
 23fccb8:	f011 0101 	ands.w	r1, r1, #1
 23fccbc:	d10b      	bne.n	23fccd6 <pinAvailable+0x52>
 23fccbe:	4628      	mov	r0, r5
 23fccc0:	9101      	str	r1, [sp, #4]
 23fccc2:	f7f9 ff69 	bl	23f6b98 <__cxa_guard_acquire>
 23fccc6:	9901      	ldr	r1, [sp, #4]
 23fccc8:	b128      	cbz	r0, 23fccd6 <pinAvailable+0x52>
 23fccca:	480c      	ldr	r0, [pc, #48]	; (23fccfc <pinAvailable+0x78>)
 23fcccc:	f7fe fdca 	bl	23fb864 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fccd0:	4628      	mov	r0, r5
 23fccd2:	f7f9 ff66 	bl	23f6ba2 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fccd6:	4b09      	ldr	r3, [pc, #36]	; (23fccfc <pinAvailable+0x78>)
 23fccd8:	7818      	ldrb	r0, [r3, #0]
 23fccda:	f7fc fd87 	bl	23f97ec <hal_spi_is_enabled>
 23fccde:	2800      	cmp	r0, #0
 23fcce0:	d1d4      	bne.n	23fcc8c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fcce2:	3c08      	subs	r4, #8
 23fcce4:	2c01      	cmp	r4, #1
 23fcce6:	d805      	bhi.n	23fccf4 <pinAvailable+0x70>
 23fcce8:	f000 f8ba 	bl	23fce60 <_Z22__fetch_global_Serial1v>
 23fccec:	7c00      	ldrb	r0, [r0, #16]
 23fccee:	f7fc fddf 	bl	23f98b0 <hal_usart_is_enabled>
 23fccf2:	e7da      	b.n	23fccaa <pinAvailable+0x26>
  return true; // 'pin' is available
 23fccf4:	2001      	movs	r0, #1
 23fccf6:	e7ca      	b.n	23fcc8e <pinAvailable+0xa>
 23fccf8:	1007aee0 	.word	0x1007aee0
 23fccfc:	1007aee4 	.word	0x1007aee4

023fcd00 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fcd00:	281b      	cmp	r0, #27
{
 23fcd02:	b538      	push	{r3, r4, r5, lr}
 23fcd04:	4604      	mov	r4, r0
 23fcd06:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fcd08:	d80a      	bhi.n	23fcd20 <pinMode+0x20>
 23fcd0a:	29ff      	cmp	r1, #255	; 0xff
 23fcd0c:	d008      	beq.n	23fcd20 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fcd0e:	f7ff ffb9 	bl	23fcc84 <pinAvailable>
 23fcd12:	b128      	cbz	r0, 23fcd20 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fcd14:	4629      	mov	r1, r5
 23fcd16:	4620      	mov	r0, r4
}
 23fcd18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fcd1c:	f7fc bc24 	b.w	23f9568 <hal_gpio_mode>
}
 23fcd20:	bd38      	pop	{r3, r4, r5, pc}

023fcd22 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fcd22:	b538      	push	{r3, r4, r5, lr}
 23fcd24:	4604      	mov	r4, r0
 23fcd26:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fcd28:	f7fc fc2c 	bl	23f9584 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fcd2c:	28ff      	cmp	r0, #255	; 0xff
 23fcd2e:	d010      	beq.n	23fcd52 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fcd30:	2806      	cmp	r0, #6
 23fcd32:	d804      	bhi.n	23fcd3e <digitalWrite+0x1c>
 23fcd34:	234d      	movs	r3, #77	; 0x4d
 23fcd36:	fa23 f000 	lsr.w	r0, r3, r0
 23fcd3a:	07c3      	lsls	r3, r0, #31
 23fcd3c:	d409      	bmi.n	23fcd52 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fcd3e:	4620      	mov	r0, r4
 23fcd40:	f7ff ffa0 	bl	23fcc84 <pinAvailable>
 23fcd44:	b128      	cbz	r0, 23fcd52 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fcd46:	4629      	mov	r1, r5
 23fcd48:	4620      	mov	r0, r4
}
 23fcd4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fcd4e:	f7fc bc27 	b.w	23f95a0 <hal_gpio_write>
}
 23fcd52:	bd38      	pop	{r3, r4, r5, pc}

023fcd54 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 23fcd54:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 23fcd56:	4c08      	ldr	r4, [pc, #32]	; (23fcd78 <_Z21__fetch_global_EEPROMv+0x24>)
 23fcd58:	e8d4 3f8f 	ldab	r3, [r4]
 23fcd5c:	07db      	lsls	r3, r3, #31
 23fcd5e:	d408      	bmi.n	23fcd72 <_Z21__fetch_global_EEPROMv+0x1e>
 23fcd60:	4620      	mov	r0, r4
 23fcd62:	f7f9 ff19 	bl	23f6b98 <__cxa_guard_acquire>
 23fcd66:	b120      	cbz	r0, 23fcd72 <_Z21__fetch_global_EEPROMv+0x1e>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 23fcd68:	f7fc fbb8 	bl	23f94dc <HAL_EEPROM_Init>
 23fcd6c:	4620      	mov	r0, r4
 23fcd6e:	f7f9 ff18 	bl	23f6ba2 <__cxa_guard_release>
	return eeprom;
}
 23fcd72:	4802      	ldr	r0, [pc, #8]	; (23fcd7c <_Z21__fetch_global_EEPROMv+0x28>)
 23fcd74:	bd10      	pop	{r4, pc}
 23fcd76:	bf00      	nop
 23fcd78:	1007aef0 	.word	0x1007aef0
 23fcd7c:	1007aef4 	.word	0x1007aef4

023fcd80 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fcd80:	4770      	bx	lr
	...

023fcd84 <_Z17acquireWireBufferv>:
{
 23fcd84:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fcd86:	4b0a      	ldr	r3, [pc, #40]	; (23fcdb0 <_Z17acquireWireBufferv+0x2c>)
{
 23fcd88:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fcd8a:	6003      	str	r3, [r0, #0]
 23fcd8c:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fcd8e:	4909      	ldr	r1, [pc, #36]	; (23fcdb4 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fcd90:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fcd92:	2020      	movs	r0, #32
 23fcd94:	f000 f8f6 	bl	23fcf84 <_ZnajRKSt9nothrow_t>
	};
 23fcd98:	2520      	movs	r5, #32
 23fcd9a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fcd9c:	4905      	ldr	r1, [pc, #20]	; (23fcdb4 <_Z17acquireWireBufferv+0x30>)
 23fcd9e:	4628      	mov	r0, r5
	};
 23fcda0:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fcda2:	f000 f8ef 	bl	23fcf84 <_ZnajRKSt9nothrow_t>
	};
 23fcda6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fcdaa:	4620      	mov	r0, r4
 23fcdac:	bd38      	pop	{r3, r4, r5, pc}
 23fcdae:	bf00      	nop
 23fcdb0:	00010018 	.word	0x00010018
 23fcdb4:	023ffac4 	.word	0x023ffac4

023fcdb8 <_Z19__fetch_global_Wirev>:
{
 23fcdb8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fcdba:	4d0e      	ldr	r5, [pc, #56]	; (23fcdf4 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fcdbc:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fcdbe:	e8d5 1f8f 	ldab	r1, [r5]
 23fcdc2:	f011 0401 	ands.w	r4, r1, #1
 23fcdc6:	d111      	bne.n	23fcdec <_Z19__fetch_global_Wirev+0x34>
 23fcdc8:	4628      	mov	r0, r5
 23fcdca:	f7f9 fee5 	bl	23f6b98 <__cxa_guard_acquire>
 23fcdce:	b168      	cbz	r0, 23fcdec <_Z19__fetch_global_Wirev+0x34>
 23fcdd0:	4668      	mov	r0, sp
 23fcdd2:	f7ff ffd7 	bl	23fcd84 <_Z17acquireWireBufferv>
 23fcdd6:	466a      	mov	r2, sp
 23fcdd8:	4621      	mov	r1, r4
 23fcdda:	4807      	ldr	r0, [pc, #28]	; (23fcdf8 <_Z19__fetch_global_Wirev+0x40>)
 23fcddc:	f7fd f9de 	bl	23fa19c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fcde0:	4628      	mov	r0, r5
 23fcde2:	f7f9 fede 	bl	23f6ba2 <__cxa_guard_release>
 23fcde6:	4805      	ldr	r0, [pc, #20]	; (23fcdfc <_Z19__fetch_global_Wirev+0x44>)
 23fcde8:	f000 fa14 	bl	23fd214 <atexit>
	return wire;
}
 23fcdec:	4802      	ldr	r0, [pc, #8]	; (23fcdf8 <_Z19__fetch_global_Wirev+0x40>)
 23fcdee:	b007      	add	sp, #28
 23fcdf0:	bd30      	pop	{r4, r5, pc}
 23fcdf2:	bf00      	nop
 23fcdf4:	1007aef8 	.word	0x1007aef8
 23fcdf8:	1007aefc 	.word	0x1007aefc
 23fcdfc:	023fcd81 	.word	0x023fcd81

023fce00 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fce00:	4770      	bx	lr
	...

023fce04 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fce04:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fce06:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fce08:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fce0a:	462a      	mov	r2, r5
 23fce0c:	2100      	movs	r1, #0
 23fce0e:	f000 fa46 	bl	23fd29e <memset>
 23fce12:	8025      	strh	r5, [r4, #0]
 23fce14:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fce16:	4907      	ldr	r1, [pc, #28]	; (23fce34 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fce18:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fce1a:	8125      	strh	r5, [r4, #8]
 23fce1c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fce1e:	f000 f8b1 	bl	23fcf84 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fce22:	4904      	ldr	r1, [pc, #16]	; (23fce34 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fce24:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fce26:	4628      	mov	r0, r5
 23fce28:	f000 f8ac 	bl	23fcf84 <_ZnajRKSt9nothrow_t>
    };
 23fce2c:	60e0      	str	r0, [r4, #12]
}
 23fce2e:	4620      	mov	r0, r4
 23fce30:	bd38      	pop	{r3, r4, r5, pc}
 23fce32:	bf00      	nop
 23fce34:	023ffac4 	.word	0x023ffac4

023fce38 <__tcf_2>:
 23fce38:	4770      	bx	lr

023fce3a <__tcf_1>:
 23fce3a:	4770      	bx	lr

023fce3c <_Z20acquireSerial1Bufferv>:
{
 23fce3c:	b510      	push	{r4, lr}
 23fce3e:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fce40:	f7ff ffe0 	bl	23fce04 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fce44:	4620      	mov	r0, r4
 23fce46:	bd10      	pop	{r4, pc}

023fce48 <_Z20acquireSerial2Bufferv>:
 23fce48:	b510      	push	{r4, lr}
 23fce4a:	4604      	mov	r4, r0
 23fce4c:	f7ff ffda 	bl	23fce04 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fce50:	4620      	mov	r0, r4
 23fce52:	bd10      	pop	{r4, pc}

023fce54 <_Z20acquireSerial3Bufferv>:
 23fce54:	b510      	push	{r4, lr}
 23fce56:	4604      	mov	r4, r0
 23fce58:	f7ff ffd4 	bl	23fce04 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fce5c:	4620      	mov	r0, r4
 23fce5e:	bd10      	pop	{r4, pc}

023fce60 <_Z22__fetch_global_Serial1v>:
{
 23fce60:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fce62:	4d0e      	ldr	r5, [pc, #56]	; (23fce9c <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fce64:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fce66:	e8d5 1f8f 	ldab	r1, [r5]
 23fce6a:	f011 0401 	ands.w	r4, r1, #1
 23fce6e:	d111      	bne.n	23fce94 <_Z22__fetch_global_Serial1v+0x34>
 23fce70:	4628      	mov	r0, r5
 23fce72:	f7f9 fe91 	bl	23f6b98 <__cxa_guard_acquire>
 23fce76:	b168      	cbz	r0, 23fce94 <_Z22__fetch_global_Serial1v+0x34>
 23fce78:	a801      	add	r0, sp, #4
 23fce7a:	f7ff ffdf 	bl	23fce3c <_Z20acquireSerial1Bufferv>
 23fce7e:	4621      	mov	r1, r4
 23fce80:	aa01      	add	r2, sp, #4
 23fce82:	4807      	ldr	r0, [pc, #28]	; (23fcea0 <_Z22__fetch_global_Serial1v+0x40>)
 23fce84:	f7ff fd16 	bl	23fc8b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fce88:	4628      	mov	r0, r5
 23fce8a:	f7f9 fe8a 	bl	23f6ba2 <__cxa_guard_release>
 23fce8e:	4805      	ldr	r0, [pc, #20]	; (23fcea4 <_Z22__fetch_global_Serial1v+0x44>)
 23fce90:	f000 f9c0 	bl	23fd214 <atexit>
    return serial1;
}
 23fce94:	4802      	ldr	r0, [pc, #8]	; (23fcea0 <_Z22__fetch_global_Serial1v+0x40>)
 23fce96:	b007      	add	sp, #28
 23fce98:	bd30      	pop	{r4, r5, pc}
 23fce9a:	bf00      	nop
 23fce9c:	1007af10 	.word	0x1007af10
 23fcea0:	1007af1c 	.word	0x1007af1c
 23fcea4:	023fce01 	.word	0x023fce01

023fcea8 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fcea8:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fceaa:	4c0d      	ldr	r4, [pc, #52]	; (23fcee0 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fceac:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fceae:	e8d4 3f8f 	ldab	r3, [r4]
 23fceb2:	07db      	lsls	r3, r3, #31
 23fceb4:	d411      	bmi.n	23fceda <_Z22__fetch_global_Serial2v+0x32>
 23fceb6:	4620      	mov	r0, r4
 23fceb8:	f7f9 fe6e 	bl	23f6b98 <__cxa_guard_acquire>
 23fcebc:	b168      	cbz	r0, 23fceda <_Z22__fetch_global_Serial2v+0x32>
 23fcebe:	a801      	add	r0, sp, #4
 23fcec0:	f7ff ffc2 	bl	23fce48 <_Z20acquireSerial2Bufferv>
 23fcec4:	2101      	movs	r1, #1
 23fcec6:	aa01      	add	r2, sp, #4
 23fcec8:	4806      	ldr	r0, [pc, #24]	; (23fcee4 <_Z22__fetch_global_Serial2v+0x3c>)
 23fceca:	f7ff fcf3 	bl	23fc8b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fcece:	4620      	mov	r0, r4
 23fced0:	f7f9 fe67 	bl	23f6ba2 <__cxa_guard_release>
 23fced4:	4804      	ldr	r0, [pc, #16]	; (23fcee8 <_Z22__fetch_global_Serial2v+0x40>)
 23fced6:	f000 f99d 	bl	23fd214 <atexit>
	return serial2;
}
 23fceda:	4802      	ldr	r0, [pc, #8]	; (23fcee4 <_Z22__fetch_global_Serial2v+0x3c>)
 23fcedc:	b006      	add	sp, #24
 23fcede:	bd10      	pop	{r4, pc}
 23fcee0:	1007af14 	.word	0x1007af14
 23fcee4:	1007af30 	.word	0x1007af30
 23fcee8:	023fce3b 	.word	0x023fce3b

023fceec <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fceec:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fceee:	f7ff ffdb 	bl	23fcea8 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fcef2:	4b07      	ldr	r3, [pc, #28]	; (23fcf10 <_Z15serialEventRun2v+0x24>)
 23fcef4:	4604      	mov	r4, r0
 23fcef6:	b153      	cbz	r3, 23fcf0e <_Z15serialEventRun2v+0x22>
 23fcef8:	f7ff fcfa 	bl	23fc8f0 <_ZN11USARTSerial9isEnabledEv>
 23fcefc:	b138      	cbz	r0, 23fcf0e <_Z15serialEventRun2v+0x22>
 23fcefe:	6823      	ldr	r3, [r4, #0]
 23fcf00:	4620      	mov	r0, r4
 23fcf02:	691b      	ldr	r3, [r3, #16]
 23fcf04:	4798      	blx	r3
 23fcf06:	2800      	cmp	r0, #0
 23fcf08:	dd01      	ble.n	23fcf0e <_Z15serialEventRun2v+0x22>
        handler();
 23fcf0a:	e000      	b.n	23fcf0e <_Z15serialEventRun2v+0x22>
 23fcf0c:	bf00      	nop
}
 23fcf0e:	bd10      	pop	{r4, pc}
 23fcf10:	00000000 	.word	0x00000000

023fcf14 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fcf14:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fcf16:	4c0d      	ldr	r4, [pc, #52]	; (23fcf4c <_Z22__fetch_global_Serial3v+0x38>)
{
 23fcf18:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fcf1a:	e8d4 3f8f 	ldab	r3, [r4]
 23fcf1e:	07db      	lsls	r3, r3, #31
 23fcf20:	d411      	bmi.n	23fcf46 <_Z22__fetch_global_Serial3v+0x32>
 23fcf22:	4620      	mov	r0, r4
 23fcf24:	f7f9 fe38 	bl	23f6b98 <__cxa_guard_acquire>
 23fcf28:	b168      	cbz	r0, 23fcf46 <_Z22__fetch_global_Serial3v+0x32>
 23fcf2a:	a801      	add	r0, sp, #4
 23fcf2c:	f7ff ff92 	bl	23fce54 <_Z20acquireSerial3Bufferv>
 23fcf30:	2102      	movs	r1, #2
 23fcf32:	aa01      	add	r2, sp, #4
 23fcf34:	4806      	ldr	r0, [pc, #24]	; (23fcf50 <_Z22__fetch_global_Serial3v+0x3c>)
 23fcf36:	f7ff fcbd 	bl	23fc8b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fcf3a:	4620      	mov	r0, r4
 23fcf3c:	f7f9 fe31 	bl	23f6ba2 <__cxa_guard_release>
 23fcf40:	4804      	ldr	r0, [pc, #16]	; (23fcf54 <_Z22__fetch_global_Serial3v+0x40>)
 23fcf42:	f000 f967 	bl	23fd214 <atexit>
	return serial3;
}
 23fcf46:	4802      	ldr	r0, [pc, #8]	; (23fcf50 <_Z22__fetch_global_Serial3v+0x3c>)
 23fcf48:	b006      	add	sp, #24
 23fcf4a:	bd10      	pop	{r4, pc}
 23fcf4c:	1007af18 	.word	0x1007af18
 23fcf50:	1007af44 	.word	0x1007af44
 23fcf54:	023fce39 	.word	0x023fce39

023fcf58 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fcf58:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fcf5a:	f7ff ffdb 	bl	23fcf14 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fcf5e:	4b07      	ldr	r3, [pc, #28]	; (23fcf7c <_Z15serialEventRun3v+0x24>)
 23fcf60:	4604      	mov	r4, r0
 23fcf62:	b153      	cbz	r3, 23fcf7a <_Z15serialEventRun3v+0x22>
 23fcf64:	f7ff fcc4 	bl	23fc8f0 <_ZN11USARTSerial9isEnabledEv>
 23fcf68:	b138      	cbz	r0, 23fcf7a <_Z15serialEventRun3v+0x22>
 23fcf6a:	6823      	ldr	r3, [r4, #0]
 23fcf6c:	4620      	mov	r0, r4
 23fcf6e:	691b      	ldr	r3, [r3, #16]
 23fcf70:	4798      	blx	r3
 23fcf72:	2800      	cmp	r0, #0
 23fcf74:	dd01      	ble.n	23fcf7a <_Z15serialEventRun3v+0x22>
        handler();
 23fcf76:	e000      	b.n	23fcf7a <_Z15serialEventRun3v+0x22>
 23fcf78:	bf00      	nop
}
 23fcf7a:	bd10      	pop	{r4, pc}
 23fcf7c:	00000000 	.word	0x00000000

023fcf80 <_ZnwjRKSt9nothrow_t>:
 23fcf80:	f7f9 bdf5 	b.w	23f6b6e <_Znwj>

023fcf84 <_ZnajRKSt9nothrow_t>:
 23fcf84:	f7f9 bdf5 	b.w	23f6b72 <_Znaj>

023fcf88 <_ZSt25__throw_bad_function_callv>:
 23fcf88:	b508      	push	{r3, lr}
 23fcf8a:	f7fc ffcb 	bl	23f9f24 <abort>
	...

023fcf90 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23fcf90:	4901      	ldr	r1, [pc, #4]	; (23fcf98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23fcf92:	f000 b8f9 	b.w	23fd188 <_ZNKSt9type_infoeqERKS_>
 23fcf96:	bf00      	nop
 23fcf98:	023ffae0 	.word	0x023ffae0

023fcf9c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23fcf9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23fcf9e:	2400      	movs	r4, #0
 23fcfa0:	2310      	movs	r3, #16
 23fcfa2:	4615      	mov	r5, r2
 23fcfa4:	6812      	ldr	r2, [r2, #0]
 23fcfa6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23fcfaa:	6803      	ldr	r3, [r0, #0]
 23fcfac:	e9cd 4400 	strd	r4, r4, [sp]
 23fcfb0:	699e      	ldr	r6, [r3, #24]
 23fcfb2:	466b      	mov	r3, sp
 23fcfb4:	47b0      	blx	r6
 23fcfb6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23fcfba:	f003 0306 	and.w	r3, r3, #6
 23fcfbe:	2b06      	cmp	r3, #6
 23fcfc0:	bf05      	ittet	eq
 23fcfc2:	9b00      	ldreq	r3, [sp, #0]
 23fcfc4:	2001      	moveq	r0, #1
 23fcfc6:	4620      	movne	r0, r4
 23fcfc8:	602b      	streq	r3, [r5, #0]
 23fcfca:	b004      	add	sp, #16
 23fcfcc:	bd70      	pop	{r4, r5, r6, pc}

023fcfce <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23fcfce:	9800      	ldr	r0, [sp, #0]
 23fcfd0:	4290      	cmp	r0, r2
 23fcfd2:	bf14      	ite	ne
 23fcfd4:	2001      	movne	r0, #1
 23fcfd6:	2006      	moveq	r0, #6
 23fcfd8:	4770      	bx	lr
	...

023fcfdc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23fcfdc:	4b03      	ldr	r3, [pc, #12]	; (23fcfec <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23fcfde:	b510      	push	{r4, lr}
 23fcfe0:	4604      	mov	r4, r0
 23fcfe2:	6003      	str	r3, [r0, #0]
 23fcfe4:	f000 f8cd 	bl	23fd182 <_ZNSt9type_infoD1Ev>
 23fcfe8:	4620      	mov	r0, r4
 23fcfea:	bd10      	pop	{r4, pc}
 23fcfec:	023ffb20 	.word	0x023ffb20

023fcff0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23fcff0:	b510      	push	{r4, lr}
 23fcff2:	4604      	mov	r4, r0
 23fcff4:	f7ff fff2 	bl	23fcfdc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fcff8:	2108      	movs	r1, #8
 23fcffa:	4620      	mov	r0, r4
 23fcffc:	f7f9 fdbd 	bl	23f6b7a <_ZdlPvj>
 23fd000:	4620      	mov	r0, r4
 23fd002:	bd10      	pop	{r4, pc}

023fd004 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23fd004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd008:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23fd00c:	461f      	mov	r7, r3
 23fd00e:	4606      	mov	r6, r0
 23fd010:	4615      	mov	r5, r2
 23fd012:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23fd016:	4598      	cmp	r8, r3
 23fd018:	d107      	bne.n	23fd02a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fd01a:	9907      	ldr	r1, [sp, #28]
 23fd01c:	f000 f8b4 	bl	23fd188 <_ZNKSt9type_infoeqERKS_>
 23fd020:	b118      	cbz	r0, 23fd02a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fd022:	7165      	strb	r5, [r4, #5]
 23fd024:	2000      	movs	r0, #0
 23fd026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fd02a:	4639      	mov	r1, r7
 23fd02c:	4630      	mov	r0, r6
 23fd02e:	f000 f8ab 	bl	23fd188 <_ZNKSt9type_infoeqERKS_>
 23fd032:	2800      	cmp	r0, #0
 23fd034:	d0f6      	beq.n	23fd024 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23fd036:	2301      	movs	r3, #1
 23fd038:	f8c4 8000 	str.w	r8, [r4]
 23fd03c:	7125      	strb	r5, [r4, #4]
 23fd03e:	71a3      	strb	r3, [r4, #6]
 23fd040:	e7f0      	b.n	23fd024 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023fd042 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23fd042:	b538      	push	{r3, r4, r5, lr}
 23fd044:	4615      	mov	r5, r2
 23fd046:	461c      	mov	r4, r3
 23fd048:	f000 f89e 	bl	23fd188 <_ZNKSt9type_infoeqERKS_>
 23fd04c:	b120      	cbz	r0, 23fd058 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23fd04e:	2308      	movs	r3, #8
 23fd050:	6025      	str	r5, [r4, #0]
 23fd052:	60e3      	str	r3, [r4, #12]
 23fd054:	2306      	movs	r3, #6
 23fd056:	7123      	strb	r3, [r4, #4]
 23fd058:	bd38      	pop	{r3, r4, r5, pc}

023fd05a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23fd05a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fd05c:	4605      	mov	r5, r0
 23fd05e:	460c      	mov	r4, r1
 23fd060:	461e      	mov	r6, r3
 23fd062:	9201      	str	r2, [sp, #4]
 23fd064:	f000 f890 	bl	23fd188 <_ZNKSt9type_infoeqERKS_>
 23fd068:	b950      	cbnz	r0, 23fd080 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fd06a:	2e03      	cmp	r6, #3
 23fd06c:	d808      	bhi.n	23fd080 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fd06e:	6823      	ldr	r3, [r4, #0]
 23fd070:	4629      	mov	r1, r5
 23fd072:	9a01      	ldr	r2, [sp, #4]
 23fd074:	4620      	mov	r0, r4
 23fd076:	695b      	ldr	r3, [r3, #20]
 23fd078:	b002      	add	sp, #8
 23fd07a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fd07e:	4718      	bx	r3
 23fd080:	b002      	add	sp, #8
 23fd082:	bd70      	pop	{r4, r5, r6, pc}

023fd084 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23fd084:	4b03      	ldr	r3, [pc, #12]	; (23fd094 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23fd086:	b510      	push	{r4, lr}
 23fd088:	4604      	mov	r4, r0
 23fd08a:	6003      	str	r3, [r0, #0]
 23fd08c:	f7ff ffa6 	bl	23fcfdc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fd090:	4620      	mov	r0, r4
 23fd092:	bd10      	pop	{r4, pc}
 23fd094:	023ffb80 	.word	0x023ffb80

023fd098 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23fd098:	b510      	push	{r4, lr}
 23fd09a:	4604      	mov	r4, r0
 23fd09c:	f7ff fff2 	bl	23fd084 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23fd0a0:	210c      	movs	r1, #12
 23fd0a2:	4620      	mov	r0, r4
 23fd0a4:	f7f9 fd69 	bl	23f6b7a <_ZdlPvj>
 23fd0a8:	4620      	mov	r0, r4
 23fd0aa:	bd10      	pop	{r4, pc}

023fd0ac <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23fd0ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fd0ae:	9f08      	ldr	r7, [sp, #32]
 23fd0b0:	4605      	mov	r5, r0
 23fd0b2:	460e      	mov	r6, r1
 23fd0b4:	4614      	mov	r4, r2
 23fd0b6:	4297      	cmp	r7, r2
 23fd0b8:	d00a      	beq.n	23fd0d0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23fd0ba:	68a8      	ldr	r0, [r5, #8]
 23fd0bc:	4631      	mov	r1, r6
 23fd0be:	6802      	ldr	r2, [r0, #0]
 23fd0c0:	9708      	str	r7, [sp, #32]
 23fd0c2:	6a15      	ldr	r5, [r2, #32]
 23fd0c4:	4622      	mov	r2, r4
 23fd0c6:	46ac      	mov	ip, r5
 23fd0c8:	b003      	add	sp, #12
 23fd0ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd0ce:	4760      	bx	ip
 23fd0d0:	4619      	mov	r1, r3
 23fd0d2:	9301      	str	r3, [sp, #4]
 23fd0d4:	f000 f858 	bl	23fd188 <_ZNKSt9type_infoeqERKS_>
 23fd0d8:	9b01      	ldr	r3, [sp, #4]
 23fd0da:	2800      	cmp	r0, #0
 23fd0dc:	d0ed      	beq.n	23fd0ba <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23fd0de:	2006      	movs	r0, #6
 23fd0e0:	b003      	add	sp, #12
 23fd0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fd0e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23fd0e4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd0e8:	460d      	mov	r5, r1
 23fd0ea:	4619      	mov	r1, r3
 23fd0ec:	4681      	mov	r9, r0
 23fd0ee:	4617      	mov	r7, r2
 23fd0f0:	4698      	mov	r8, r3
 23fd0f2:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23fd0f6:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23fd0fa:	f000 f845 	bl	23fd188 <_ZNKSt9type_infoeqERKS_>
 23fd0fe:	b190      	cbz	r0, 23fd126 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23fd100:	2d00      	cmp	r5, #0
 23fd102:	6034      	str	r4, [r6, #0]
 23fd104:	7137      	strb	r7, [r6, #4]
 23fd106:	db09      	blt.n	23fd11c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23fd108:	1961      	adds	r1, r4, r5
 23fd10a:	458a      	cmp	sl, r1
 23fd10c:	bf0c      	ite	eq
 23fd10e:	2106      	moveq	r1, #6
 23fd110:	2101      	movne	r1, #1
 23fd112:	71b1      	strb	r1, [r6, #6]
 23fd114:	2000      	movs	r0, #0
 23fd116:	b001      	add	sp, #4
 23fd118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd11c:	3502      	adds	r5, #2
 23fd11e:	d1f9      	bne.n	23fd114 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fd120:	2301      	movs	r3, #1
 23fd122:	71b3      	strb	r3, [r6, #6]
 23fd124:	e7f6      	b.n	23fd114 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fd126:	4554      	cmp	r4, sl
 23fd128:	d106      	bne.n	23fd138 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fd12a:	4659      	mov	r1, fp
 23fd12c:	4648      	mov	r0, r9
 23fd12e:	f000 f82b 	bl	23fd188 <_ZNKSt9type_infoeqERKS_>
 23fd132:	b108      	cbz	r0, 23fd138 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fd134:	7177      	strb	r7, [r6, #5]
 23fd136:	e7ed      	b.n	23fd114 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fd138:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23fd13c:	463a      	mov	r2, r7
 23fd13e:	4629      	mov	r1, r5
 23fd140:	6803      	ldr	r3, [r0, #0]
 23fd142:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23fd146:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23fd14a:	69dc      	ldr	r4, [r3, #28]
 23fd14c:	4643      	mov	r3, r8
 23fd14e:	46a4      	mov	ip, r4
 23fd150:	b001      	add	sp, #4
 23fd152:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd156:	4760      	bx	ip

023fd158 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23fd158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd15c:	4607      	mov	r7, r0
 23fd15e:	460c      	mov	r4, r1
 23fd160:	4615      	mov	r5, r2
 23fd162:	461e      	mov	r6, r3
 23fd164:	f7ff ff6d 	bl	23fd042 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23fd168:	b948      	cbnz	r0, 23fd17e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23fd16a:	68b8      	ldr	r0, [r7, #8]
 23fd16c:	462a      	mov	r2, r5
 23fd16e:	4621      	mov	r1, r4
 23fd170:	6803      	ldr	r3, [r0, #0]
 23fd172:	699f      	ldr	r7, [r3, #24]
 23fd174:	4633      	mov	r3, r6
 23fd176:	46bc      	mov	ip, r7
 23fd178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23fd17c:	4760      	bx	ip
 23fd17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fd182 <_ZNSt9type_infoD1Ev>:
 23fd182:	4770      	bx	lr

023fd184 <_ZNKSt9type_info14__is_pointer_pEv>:
 23fd184:	2000      	movs	r0, #0
 23fd186:	4770      	bx	lr

023fd188 <_ZNKSt9type_infoeqERKS_>:
 23fd188:	4281      	cmp	r1, r0
 23fd18a:	b508      	push	{r3, lr}
 23fd18c:	d00e      	beq.n	23fd1ac <_ZNKSt9type_infoeqERKS_+0x24>
 23fd18e:	6840      	ldr	r0, [r0, #4]
 23fd190:	7803      	ldrb	r3, [r0, #0]
 23fd192:	2b2a      	cmp	r3, #42	; 0x2a
 23fd194:	d00c      	beq.n	23fd1b0 <_ZNKSt9type_infoeqERKS_+0x28>
 23fd196:	6849      	ldr	r1, [r1, #4]
 23fd198:	780b      	ldrb	r3, [r1, #0]
 23fd19a:	2b2a      	cmp	r3, #42	; 0x2a
 23fd19c:	bf08      	it	eq
 23fd19e:	3101      	addeq	r1, #1
 23fd1a0:	f7f9 fc9e 	bl	23f6ae0 <strcmp>
 23fd1a4:	fab0 f080 	clz	r0, r0
 23fd1a8:	0940      	lsrs	r0, r0, #5
 23fd1aa:	bd08      	pop	{r3, pc}
 23fd1ac:	2001      	movs	r0, #1
 23fd1ae:	e7fc      	b.n	23fd1aa <_ZNKSt9type_infoeqERKS_+0x22>
 23fd1b0:	2000      	movs	r0, #0
 23fd1b2:	e7fa      	b.n	23fd1aa <_ZNKSt9type_infoeqERKS_+0x22>
 23fd1b4:	0000      	movs	r0, r0
	...

023fd1b8 <nan>:
 23fd1b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 23fd1c0 <nan+0x8>
 23fd1bc:	4770      	bx	lr
 23fd1be:	bf00      	nop
 23fd1c0:	00000000 	.word	0x00000000
 23fd1c4:	7ff80000 	.word	0x7ff80000

023fd1c8 <asctime_r>:
 23fd1c8:	b510      	push	{r4, lr}
 23fd1ca:	460c      	mov	r4, r1
 23fd1cc:	6941      	ldr	r1, [r0, #20]
 23fd1ce:	b086      	sub	sp, #24
 23fd1d0:	6903      	ldr	r3, [r0, #16]
 23fd1d2:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 23fd1d6:	6982      	ldr	r2, [r0, #24]
 23fd1d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fd1dc:	9104      	str	r1, [sp, #16]
 23fd1de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 23fd1e2:	6801      	ldr	r1, [r0, #0]
 23fd1e4:	9103      	str	r1, [sp, #12]
 23fd1e6:	6841      	ldr	r1, [r0, #4]
 23fd1e8:	9102      	str	r1, [sp, #8]
 23fd1ea:	6881      	ldr	r1, [r0, #8]
 23fd1ec:	9101      	str	r1, [sp, #4]
 23fd1ee:	68c1      	ldr	r1, [r0, #12]
 23fd1f0:	4620      	mov	r0, r4
 23fd1f2:	9100      	str	r1, [sp, #0]
 23fd1f4:	4904      	ldr	r1, [pc, #16]	; (23fd208 <asctime_r+0x40>)
 23fd1f6:	440b      	add	r3, r1
 23fd1f8:	4904      	ldr	r1, [pc, #16]	; (23fd20c <asctime_r+0x44>)
 23fd1fa:	440a      	add	r2, r1
 23fd1fc:	4904      	ldr	r1, [pc, #16]	; (23fd210 <asctime_r+0x48>)
 23fd1fe:	f7fc fe67 	bl	23f9ed0 <siprintf>
 23fd202:	4620      	mov	r0, r4
 23fd204:	b006      	add	sp, #24
 23fd206:	bd10      	pop	{r4, pc}
 23fd208:	023ffbee 	.word	0x023ffbee
 23fd20c:	023ffbd9 	.word	0x023ffbd9
 23fd210:	023ffbb9 	.word	0x023ffbb9

023fd214 <atexit>:
 23fd214:	2300      	movs	r3, #0
 23fd216:	4601      	mov	r1, r0
 23fd218:	461a      	mov	r2, r3
 23fd21a:	4618      	mov	r0, r3
 23fd21c:	f000 bf90 	b.w	23fe140 <__register_exitproc>

023fd220 <atof>:
 23fd220:	2100      	movs	r1, #0
 23fd222:	f000 beeb 	b.w	23fdffc <strtod>

023fd226 <atol>:
 23fd226:	220a      	movs	r2, #10
 23fd228:	2100      	movs	r1, #0
 23fd22a:	f000 bf75 	b.w	23fe118 <strtol>
	...

023fd230 <isprint>:
 23fd230:	4b02      	ldr	r3, [pc, #8]	; (23fd23c <isprint+0xc>)
 23fd232:	4418      	add	r0, r3
 23fd234:	7840      	ldrb	r0, [r0, #1]
 23fd236:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fd23a:	4770      	bx	lr
 23fd23c:	023ffce0 	.word	0x023ffce0

023fd240 <isspace>:
 23fd240:	4b02      	ldr	r3, [pc, #8]	; (23fd24c <isspace+0xc>)
 23fd242:	4418      	add	r0, r3
 23fd244:	7840      	ldrb	r0, [r0, #1]
 23fd246:	f000 0008 	and.w	r0, r0, #8
 23fd24a:	4770      	bx	lr
 23fd24c:	023ffce0 	.word	0x023ffce0

023fd250 <memcpy>:
 23fd250:	440a      	add	r2, r1
 23fd252:	1e43      	subs	r3, r0, #1
 23fd254:	4291      	cmp	r1, r2
 23fd256:	d100      	bne.n	23fd25a <memcpy+0xa>
 23fd258:	4770      	bx	lr
 23fd25a:	b510      	push	{r4, lr}
 23fd25c:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fd260:	4291      	cmp	r1, r2
 23fd262:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fd266:	d1f9      	bne.n	23fd25c <memcpy+0xc>
 23fd268:	bd10      	pop	{r4, pc}

023fd26a <memmove>:
 23fd26a:	4288      	cmp	r0, r1
 23fd26c:	b510      	push	{r4, lr}
 23fd26e:	eb01 0402 	add.w	r4, r1, r2
 23fd272:	d902      	bls.n	23fd27a <memmove+0x10>
 23fd274:	4284      	cmp	r4, r0
 23fd276:	4623      	mov	r3, r4
 23fd278:	d807      	bhi.n	23fd28a <memmove+0x20>
 23fd27a:	1e43      	subs	r3, r0, #1
 23fd27c:	42a1      	cmp	r1, r4
 23fd27e:	d008      	beq.n	23fd292 <memmove+0x28>
 23fd280:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fd284:	f803 2f01 	strb.w	r2, [r3, #1]!
 23fd288:	e7f8      	b.n	23fd27c <memmove+0x12>
 23fd28a:	4402      	add	r2, r0
 23fd28c:	4601      	mov	r1, r0
 23fd28e:	428a      	cmp	r2, r1
 23fd290:	d100      	bne.n	23fd294 <memmove+0x2a>
 23fd292:	bd10      	pop	{r4, pc}
 23fd294:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23fd298:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23fd29c:	e7f7      	b.n	23fd28e <memmove+0x24>

023fd29e <memset>:
 23fd29e:	4402      	add	r2, r0
 23fd2a0:	4603      	mov	r3, r0
 23fd2a2:	4293      	cmp	r3, r2
 23fd2a4:	d100      	bne.n	23fd2a8 <memset+0xa>
 23fd2a6:	4770      	bx	lr
 23fd2a8:	f803 1b01 	strb.w	r1, [r3], #1
 23fd2ac:	e7f9      	b.n	23fd2a2 <memset+0x4>
	...

023fd2b0 <srand>:
 23fd2b0:	b538      	push	{r3, r4, r5, lr}
 23fd2b2:	4b10      	ldr	r3, [pc, #64]	; (23fd2f4 <srand+0x44>)
 23fd2b4:	4604      	mov	r4, r0
 23fd2b6:	681d      	ldr	r5, [r3, #0]
 23fd2b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fd2ba:	b9b3      	cbnz	r3, 23fd2ea <srand+0x3a>
 23fd2bc:	2018      	movs	r0, #24
 23fd2be:	f7fc fddd 	bl	23f9e7c <malloc>
 23fd2c2:	4602      	mov	r2, r0
 23fd2c4:	63a8      	str	r0, [r5, #56]	; 0x38
 23fd2c6:	b920      	cbnz	r0, 23fd2d2 <srand+0x22>
 23fd2c8:	4b0b      	ldr	r3, [pc, #44]	; (23fd2f8 <srand+0x48>)
 23fd2ca:	2142      	movs	r1, #66	; 0x42
 23fd2cc:	480b      	ldr	r0, [pc, #44]	; (23fd2fc <srand+0x4c>)
 23fd2ce:	f7fc fe53 	bl	23f9f78 <__assert_func>
 23fd2d2:	490b      	ldr	r1, [pc, #44]	; (23fd300 <srand+0x50>)
 23fd2d4:	4b0b      	ldr	r3, [pc, #44]	; (23fd304 <srand+0x54>)
 23fd2d6:	e9c0 1300 	strd	r1, r3, [r0]
 23fd2da:	4b0b      	ldr	r3, [pc, #44]	; (23fd308 <srand+0x58>)
 23fd2dc:	2100      	movs	r1, #0
 23fd2de:	6083      	str	r3, [r0, #8]
 23fd2e0:	230b      	movs	r3, #11
 23fd2e2:	8183      	strh	r3, [r0, #12]
 23fd2e4:	2001      	movs	r0, #1
 23fd2e6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fd2ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fd2ec:	2200      	movs	r2, #0
 23fd2ee:	611c      	str	r4, [r3, #16]
 23fd2f0:	615a      	str	r2, [r3, #20]
 23fd2f2:	bd38      	pop	{r3, r4, r5, pc}
 23fd2f4:	1007aae8 	.word	0x1007aae8
 23fd2f8:	023ffc12 	.word	0x023ffc12
 23fd2fc:	023ffc29 	.word	0x023ffc29
 23fd300:	abcd330e 	.word	0xabcd330e
 23fd304:	e66d1234 	.word	0xe66d1234
 23fd308:	0005deec 	.word	0x0005deec

023fd30c <strchr>:
 23fd30c:	b2c9      	uxtb	r1, r1
 23fd30e:	4603      	mov	r3, r0
 23fd310:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fd314:	b11a      	cbz	r2, 23fd31e <strchr+0x12>
 23fd316:	428a      	cmp	r2, r1
 23fd318:	d1f9      	bne.n	23fd30e <strchr+0x2>
 23fd31a:	4618      	mov	r0, r3
 23fd31c:	4770      	bx	lr
 23fd31e:	2900      	cmp	r1, #0
 23fd320:	bf18      	it	ne
 23fd322:	2300      	movne	r3, #0
 23fd324:	e7f9      	b.n	23fd31a <strchr+0xe>

023fd326 <strchrnul>:
 23fd326:	b510      	push	{r4, lr}
 23fd328:	4604      	mov	r4, r0
 23fd32a:	f7ff ffef 	bl	23fd30c <strchr>
 23fd32e:	b918      	cbnz	r0, 23fd338 <strchrnul+0x12>
 23fd330:	4620      	mov	r0, r4
 23fd332:	f7f9 fbdf 	bl	23f6af4 <strlen>
 23fd336:	4420      	add	r0, r4
 23fd338:	bd10      	pop	{r4, pc}

023fd33a <strcpy>:
 23fd33a:	4603      	mov	r3, r0
 23fd33c:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fd340:	f803 2b01 	strb.w	r2, [r3], #1
 23fd344:	2a00      	cmp	r2, #0
 23fd346:	d1f9      	bne.n	23fd33c <strcpy+0x2>
 23fd348:	4770      	bx	lr

023fd34a <strncmp>:
 23fd34a:	b510      	push	{r4, lr}
 23fd34c:	b17a      	cbz	r2, 23fd36e <strncmp+0x24>
 23fd34e:	4603      	mov	r3, r0
 23fd350:	3901      	subs	r1, #1
 23fd352:	1884      	adds	r4, r0, r2
 23fd354:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fd358:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23fd35c:	4290      	cmp	r0, r2
 23fd35e:	d101      	bne.n	23fd364 <strncmp+0x1a>
 23fd360:	42a3      	cmp	r3, r4
 23fd362:	d101      	bne.n	23fd368 <strncmp+0x1e>
 23fd364:	1a80      	subs	r0, r0, r2
 23fd366:	bd10      	pop	{r4, pc}
 23fd368:	2800      	cmp	r0, #0
 23fd36a:	d1f3      	bne.n	23fd354 <strncmp+0xa>
 23fd36c:	e7fa      	b.n	23fd364 <strncmp+0x1a>
 23fd36e:	4610      	mov	r0, r2
 23fd370:	e7f9      	b.n	23fd366 <strncmp+0x1c>

023fd372 <strncpy>:
 23fd372:	3901      	subs	r1, #1
 23fd374:	4603      	mov	r3, r0
 23fd376:	b510      	push	{r4, lr}
 23fd378:	b132      	cbz	r2, 23fd388 <strncpy+0x16>
 23fd37a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23fd37e:	3a01      	subs	r2, #1
 23fd380:	f803 4b01 	strb.w	r4, [r3], #1
 23fd384:	2c00      	cmp	r4, #0
 23fd386:	d1f7      	bne.n	23fd378 <strncpy+0x6>
 23fd388:	441a      	add	r2, r3
 23fd38a:	2100      	movs	r1, #0
 23fd38c:	4293      	cmp	r3, r2
 23fd38e:	d100      	bne.n	23fd392 <strncpy+0x20>
 23fd390:	bd10      	pop	{r4, pc}
 23fd392:	f803 1b01 	strb.w	r1, [r3], #1
 23fd396:	e7f9      	b.n	23fd38c <strncpy+0x1a>

023fd398 <strrchr>:
 23fd398:	b538      	push	{r3, r4, r5, lr}
 23fd39a:	4603      	mov	r3, r0
 23fd39c:	460c      	mov	r4, r1
 23fd39e:	b969      	cbnz	r1, 23fd3bc <strrchr+0x24>
 23fd3a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fd3a4:	f7ff bfb2 	b.w	23fd30c <strchr>
 23fd3a8:	1c43      	adds	r3, r0, #1
 23fd3aa:	4605      	mov	r5, r0
 23fd3ac:	4621      	mov	r1, r4
 23fd3ae:	4618      	mov	r0, r3
 23fd3b0:	f7ff ffac 	bl	23fd30c <strchr>
 23fd3b4:	2800      	cmp	r0, #0
 23fd3b6:	d1f7      	bne.n	23fd3a8 <strrchr+0x10>
 23fd3b8:	4628      	mov	r0, r5
 23fd3ba:	bd38      	pop	{r3, r4, r5, pc}
 23fd3bc:	2500      	movs	r5, #0
 23fd3be:	e7f5      	b.n	23fd3ac <strrchr+0x14>

023fd3c0 <sulp>:
 23fd3c0:	b570      	push	{r4, r5, r6, lr}
 23fd3c2:	4604      	mov	r4, r0
 23fd3c4:	460d      	mov	r5, r1
 23fd3c6:	4616      	mov	r6, r2
 23fd3c8:	ec45 4b10 	vmov	d0, r4, r5
 23fd3cc:	f001 fe18 	bl	23ff000 <__ulp>
 23fd3d0:	ec51 0b10 	vmov	r0, r1, d0
 23fd3d4:	b17e      	cbz	r6, 23fd3f6 <sulp+0x36>
 23fd3d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 23fd3da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 23fd3de:	2b00      	cmp	r3, #0
 23fd3e0:	dd09      	ble.n	23fd3f6 <sulp+0x36>
 23fd3e2:	051b      	lsls	r3, r3, #20
 23fd3e4:	2400      	movs	r4, #0
 23fd3e6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 23fd3ea:	4622      	mov	r2, r4
 23fd3ec:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 23fd3f0:	462b      	mov	r3, r5
 23fd3f2:	f7f8 fe89 	bl	23f6108 <__aeabi_dmul>
 23fd3f6:	bd70      	pop	{r4, r5, r6, pc}

023fd3f8 <_strtod_l>:
 23fd3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd3fc:	461f      	mov	r7, r3
 23fd3fe:	2300      	movs	r3, #0
 23fd400:	4604      	mov	r4, r0
 23fd402:	4688      	mov	r8, r1
 23fd404:	f04f 0a00 	mov.w	sl, #0
 23fd408:	f04f 0b00 	mov.w	fp, #0
 23fd40c:	ed2d 8b02 	vpush	{d8}
 23fd410:	b09d      	sub	sp, #116	; 0x74
 23fd412:	9318      	str	r3, [sp, #96]	; 0x60
 23fd414:	4b9f      	ldr	r3, [pc, #636]	; (23fd694 <_strtod_l+0x29c>)
 23fd416:	9213      	str	r2, [sp, #76]	; 0x4c
 23fd418:	681b      	ldr	r3, [r3, #0]
 23fd41a:	4618      	mov	r0, r3
 23fd41c:	9305      	str	r3, [sp, #20]
 23fd41e:	f7f9 fb69 	bl	23f6af4 <strlen>
 23fd422:	4605      	mov	r5, r0
 23fd424:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 23fd428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd42a:	781a      	ldrb	r2, [r3, #0]
 23fd42c:	2a2b      	cmp	r2, #43	; 0x2b
 23fd42e:	d04e      	beq.n	23fd4ce <_strtod_l+0xd6>
 23fd430:	d83b      	bhi.n	23fd4aa <_strtod_l+0xb2>
 23fd432:	2a0d      	cmp	r2, #13
 23fd434:	d834      	bhi.n	23fd4a0 <_strtod_l+0xa8>
 23fd436:	2a08      	cmp	r2, #8
 23fd438:	d834      	bhi.n	23fd4a4 <_strtod_l+0xac>
 23fd43a:	2a00      	cmp	r2, #0
 23fd43c:	d03e      	beq.n	23fd4bc <_strtod_l+0xc4>
 23fd43e:	2300      	movs	r3, #0
 23fd440:	930a      	str	r3, [sp, #40]	; 0x28
 23fd442:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 23fd444:	7833      	ldrb	r3, [r6, #0]
 23fd446:	2b30      	cmp	r3, #48	; 0x30
 23fd448:	f040 80b0 	bne.w	23fd5ac <_strtod_l+0x1b4>
 23fd44c:	7873      	ldrb	r3, [r6, #1]
 23fd44e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 23fd452:	2b58      	cmp	r3, #88	; 0x58
 23fd454:	d168      	bne.n	23fd528 <_strtod_l+0x130>
 23fd456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fd458:	a917      	add	r1, sp, #92	; 0x5c
 23fd45a:	9702      	str	r7, [sp, #8]
 23fd45c:	4620      	mov	r0, r4
 23fd45e:	9301      	str	r3, [sp, #4]
 23fd460:	ab18      	add	r3, sp, #96	; 0x60
 23fd462:	4a8d      	ldr	r2, [pc, #564]	; (23fd698 <_strtod_l+0x2a0>)
 23fd464:	9300      	str	r3, [sp, #0]
 23fd466:	ab19      	add	r3, sp, #100	; 0x64
 23fd468:	f000 ff34 	bl	23fe2d4 <__gethex>
 23fd46c:	f010 0707 	ands.w	r7, r0, #7
 23fd470:	4605      	mov	r5, r0
 23fd472:	d005      	beq.n	23fd480 <_strtod_l+0x88>
 23fd474:	2f06      	cmp	r7, #6
 23fd476:	d12c      	bne.n	23fd4d2 <_strtod_l+0xda>
 23fd478:	3601      	adds	r6, #1
 23fd47a:	2300      	movs	r3, #0
 23fd47c:	9617      	str	r6, [sp, #92]	; 0x5c
 23fd47e:	930a      	str	r3, [sp, #40]	; 0x28
 23fd480:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23fd482:	2b00      	cmp	r3, #0
 23fd484:	f040 858e 	bne.w	23fdfa4 <_strtod_l+0xbac>
 23fd488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fd48a:	b1eb      	cbz	r3, 23fd4c8 <_strtod_l+0xd0>
 23fd48c:	4652      	mov	r2, sl
 23fd48e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 23fd492:	ec43 2b10 	vmov	d0, r2, r3
 23fd496:	b01d      	add	sp, #116	; 0x74
 23fd498:	ecbd 8b02 	vpop	{d8}
 23fd49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd4a0:	2a20      	cmp	r2, #32
 23fd4a2:	d1cc      	bne.n	23fd43e <_strtod_l+0x46>
 23fd4a4:	3301      	adds	r3, #1
 23fd4a6:	9317      	str	r3, [sp, #92]	; 0x5c
 23fd4a8:	e7be      	b.n	23fd428 <_strtod_l+0x30>
 23fd4aa:	2a2d      	cmp	r2, #45	; 0x2d
 23fd4ac:	d1c7      	bne.n	23fd43e <_strtod_l+0x46>
 23fd4ae:	2201      	movs	r2, #1
 23fd4b0:	920a      	str	r2, [sp, #40]	; 0x28
 23fd4b2:	1c5a      	adds	r2, r3, #1
 23fd4b4:	9217      	str	r2, [sp, #92]	; 0x5c
 23fd4b6:	785b      	ldrb	r3, [r3, #1]
 23fd4b8:	2b00      	cmp	r3, #0
 23fd4ba:	d1c2      	bne.n	23fd442 <_strtod_l+0x4a>
 23fd4bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23fd4be:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 23fd4c2:	2b00      	cmp	r3, #0
 23fd4c4:	f040 856c 	bne.w	23fdfa0 <_strtod_l+0xba8>
 23fd4c8:	4652      	mov	r2, sl
 23fd4ca:	465b      	mov	r3, fp
 23fd4cc:	e7e1      	b.n	23fd492 <_strtod_l+0x9a>
 23fd4ce:	2200      	movs	r2, #0
 23fd4d0:	e7ee      	b.n	23fd4b0 <_strtod_l+0xb8>
 23fd4d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 23fd4d4:	b13a      	cbz	r2, 23fd4e6 <_strtod_l+0xee>
 23fd4d6:	2135      	movs	r1, #53	; 0x35
 23fd4d8:	a81a      	add	r0, sp, #104	; 0x68
 23fd4da:	f001 fe9a 	bl	23ff212 <__copybits>
 23fd4de:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fd4e0:	4620      	mov	r0, r4
 23fd4e2:	f001 fa55 	bl	23fe990 <_Bfree>
 23fd4e6:	3f01      	subs	r7, #1
 23fd4e8:	2f04      	cmp	r7, #4
 23fd4ea:	d806      	bhi.n	23fd4fa <_strtod_l+0x102>
 23fd4ec:	e8df f007 	tbb	[pc, r7]
 23fd4f0:	1714030a 	.word	0x1714030a
 23fd4f4:	0a          	.byte	0x0a
 23fd4f5:	00          	.byte	0x00
 23fd4f6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 23fd4fa:	0728      	lsls	r0, r5, #28
 23fd4fc:	d5c0      	bpl.n	23fd480 <_strtod_l+0x88>
 23fd4fe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 23fd502:	e7bd      	b.n	23fd480 <_strtod_l+0x88>
 23fd504:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 23fd508:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23fd50a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 23fd50e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 23fd512:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 23fd516:	e7f0      	b.n	23fd4fa <_strtod_l+0x102>
 23fd518:	f8df b180 	ldr.w	fp, [pc, #384]	; 23fd69c <_strtod_l+0x2a4>
 23fd51c:	e7ed      	b.n	23fd4fa <_strtod_l+0x102>
 23fd51e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 23fd522:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 23fd526:	e7e8      	b.n	23fd4fa <_strtod_l+0x102>
 23fd528:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd52a:	1c5a      	adds	r2, r3, #1
 23fd52c:	9217      	str	r2, [sp, #92]	; 0x5c
 23fd52e:	785b      	ldrb	r3, [r3, #1]
 23fd530:	2b30      	cmp	r3, #48	; 0x30
 23fd532:	d0f9      	beq.n	23fd528 <_strtod_l+0x130>
 23fd534:	2b00      	cmp	r3, #0
 23fd536:	d0a3      	beq.n	23fd480 <_strtod_l+0x88>
 23fd538:	2301      	movs	r3, #1
 23fd53a:	f04f 0900 	mov.w	r9, #0
 23fd53e:	9304      	str	r3, [sp, #16]
 23fd540:	220a      	movs	r2, #10
 23fd542:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd544:	464f      	mov	r7, r9
 23fd546:	f8cd 901c 	str.w	r9, [sp, #28]
 23fd54a:	9308      	str	r3, [sp, #32]
 23fd54c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 23fd54e:	7806      	ldrb	r6, [r0, #0]
 23fd550:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 23fd554:	b2d9      	uxtb	r1, r3
 23fd556:	2909      	cmp	r1, #9
 23fd558:	d92a      	bls.n	23fd5b0 <_strtod_l+0x1b8>
 23fd55a:	462a      	mov	r2, r5
 23fd55c:	9905      	ldr	r1, [sp, #20]
 23fd55e:	f7ff fef4 	bl	23fd34a <strncmp>
 23fd562:	b3a0      	cbz	r0, 23fd5ce <_strtod_l+0x1d6>
 23fd564:	2000      	movs	r0, #0
 23fd566:	4632      	mov	r2, r6
 23fd568:	463d      	mov	r5, r7
 23fd56a:	4603      	mov	r3, r0
 23fd56c:	9005      	str	r0, [sp, #20]
 23fd56e:	2a65      	cmp	r2, #101	; 0x65
 23fd570:	d001      	beq.n	23fd576 <_strtod_l+0x17e>
 23fd572:	2a45      	cmp	r2, #69	; 0x45
 23fd574:	d118      	bne.n	23fd5a8 <_strtod_l+0x1b0>
 23fd576:	b91d      	cbnz	r5, 23fd580 <_strtod_l+0x188>
 23fd578:	9a04      	ldr	r2, [sp, #16]
 23fd57a:	4302      	orrs	r2, r0
 23fd57c:	d09e      	beq.n	23fd4bc <_strtod_l+0xc4>
 23fd57e:	2500      	movs	r5, #0
 23fd580:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 23fd584:	f108 0201 	add.w	r2, r8, #1
 23fd588:	9217      	str	r2, [sp, #92]	; 0x5c
 23fd58a:	f898 2001 	ldrb.w	r2, [r8, #1]
 23fd58e:	2a2b      	cmp	r2, #43	; 0x2b
 23fd590:	d075      	beq.n	23fd67e <_strtod_l+0x286>
 23fd592:	2a2d      	cmp	r2, #45	; 0x2d
 23fd594:	d07b      	beq.n	23fd68e <_strtod_l+0x296>
 23fd596:	f04f 0c00 	mov.w	ip, #0
 23fd59a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 23fd59e:	2909      	cmp	r1, #9
 23fd5a0:	f240 8082 	bls.w	23fd6a8 <_strtod_l+0x2b0>
 23fd5a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 23fd5a8:	2600      	movs	r6, #0
 23fd5aa:	e09d      	b.n	23fd6e8 <_strtod_l+0x2f0>
 23fd5ac:	2300      	movs	r3, #0
 23fd5ae:	e7c4      	b.n	23fd53a <_strtod_l+0x142>
 23fd5b0:	2f08      	cmp	r7, #8
 23fd5b2:	f100 0001 	add.w	r0, r0, #1
 23fd5b6:	f107 0701 	add.w	r7, r7, #1
 23fd5ba:	bfd4      	ite	le
 23fd5bc:	9907      	ldrle	r1, [sp, #28]
 23fd5be:	fb02 3909 	mlagt	r9, r2, r9, r3
 23fd5c2:	9017      	str	r0, [sp, #92]	; 0x5c
 23fd5c4:	bfdc      	itt	le
 23fd5c6:	fb02 3301 	mlale	r3, r2, r1, r3
 23fd5ca:	9307      	strle	r3, [sp, #28]
 23fd5cc:	e7be      	b.n	23fd54c <_strtod_l+0x154>
 23fd5ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd5d0:	195a      	adds	r2, r3, r5
 23fd5d2:	9217      	str	r2, [sp, #92]	; 0x5c
 23fd5d4:	5d5a      	ldrb	r2, [r3, r5]
 23fd5d6:	2f00      	cmp	r7, #0
 23fd5d8:	d036      	beq.n	23fd648 <_strtod_l+0x250>
 23fd5da:	463d      	mov	r5, r7
 23fd5dc:	9005      	str	r0, [sp, #20]
 23fd5de:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 23fd5e2:	2b09      	cmp	r3, #9
 23fd5e4:	d912      	bls.n	23fd60c <_strtod_l+0x214>
 23fd5e6:	2301      	movs	r3, #1
 23fd5e8:	e7c1      	b.n	23fd56e <_strtod_l+0x176>
 23fd5ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd5ec:	3001      	adds	r0, #1
 23fd5ee:	1c5a      	adds	r2, r3, #1
 23fd5f0:	9217      	str	r2, [sp, #92]	; 0x5c
 23fd5f2:	785a      	ldrb	r2, [r3, #1]
 23fd5f4:	2a30      	cmp	r2, #48	; 0x30
 23fd5f6:	d0f8      	beq.n	23fd5ea <_strtod_l+0x1f2>
 23fd5f8:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 23fd5fc:	2b08      	cmp	r3, #8
 23fd5fe:	f200 84d6 	bhi.w	23fdfae <_strtod_l+0xbb6>
 23fd602:	9005      	str	r0, [sp, #20]
 23fd604:	2000      	movs	r0, #0
 23fd606:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd608:	4605      	mov	r5, r0
 23fd60a:	9308      	str	r3, [sp, #32]
 23fd60c:	3a30      	subs	r2, #48	; 0x30
 23fd60e:	f100 0301 	add.w	r3, r0, #1
 23fd612:	d013      	beq.n	23fd63c <_strtod_l+0x244>
 23fd614:	9905      	ldr	r1, [sp, #20]
 23fd616:	eb00 0e05 	add.w	lr, r0, r5
 23fd61a:	4419      	add	r1, r3
 23fd61c:	462b      	mov	r3, r5
 23fd61e:	9105      	str	r1, [sp, #20]
 23fd620:	210a      	movs	r1, #10
 23fd622:	4573      	cmp	r3, lr
 23fd624:	d112      	bne.n	23fd64c <_strtod_l+0x254>
 23fd626:	182b      	adds	r3, r5, r0
 23fd628:	3501      	adds	r5, #1
 23fd62a:	2b08      	cmp	r3, #8
 23fd62c:	4405      	add	r5, r0
 23fd62e:	dc1c      	bgt.n	23fd66a <_strtod_l+0x272>
 23fd630:	9907      	ldr	r1, [sp, #28]
 23fd632:	230a      	movs	r3, #10
 23fd634:	fb03 2301 	mla	r3, r3, r1, r2
 23fd638:	9307      	str	r3, [sp, #28]
 23fd63a:	2300      	movs	r3, #0
 23fd63c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fd63e:	4618      	mov	r0, r3
 23fd640:	1c51      	adds	r1, r2, #1
 23fd642:	9117      	str	r1, [sp, #92]	; 0x5c
 23fd644:	7852      	ldrb	r2, [r2, #1]
 23fd646:	e7ca      	b.n	23fd5de <_strtod_l+0x1e6>
 23fd648:	4638      	mov	r0, r7
 23fd64a:	e7d3      	b.n	23fd5f4 <_strtod_l+0x1fc>
 23fd64c:	2b08      	cmp	r3, #8
 23fd64e:	dc04      	bgt.n	23fd65a <_strtod_l+0x262>
 23fd650:	9e07      	ldr	r6, [sp, #28]
 23fd652:	434e      	muls	r6, r1
 23fd654:	9607      	str	r6, [sp, #28]
 23fd656:	3301      	adds	r3, #1
 23fd658:	e7e3      	b.n	23fd622 <_strtod_l+0x22a>
 23fd65a:	f103 0c01 	add.w	ip, r3, #1
 23fd65e:	f1bc 0f10 	cmp.w	ip, #16
 23fd662:	bfd8      	it	le
 23fd664:	fb01 f909 	mulle.w	r9, r1, r9
 23fd668:	e7f5      	b.n	23fd656 <_strtod_l+0x25e>
 23fd66a:	2d10      	cmp	r5, #16
 23fd66c:	bfdc      	itt	le
 23fd66e:	230a      	movle	r3, #10
 23fd670:	fb03 2909 	mlale	r9, r3, r9, r2
 23fd674:	e7e1      	b.n	23fd63a <_strtod_l+0x242>
 23fd676:	2300      	movs	r3, #0
 23fd678:	9305      	str	r3, [sp, #20]
 23fd67a:	2301      	movs	r3, #1
 23fd67c:	e77c      	b.n	23fd578 <_strtod_l+0x180>
 23fd67e:	f04f 0c00 	mov.w	ip, #0
 23fd682:	f108 0202 	add.w	r2, r8, #2
 23fd686:	9217      	str	r2, [sp, #92]	; 0x5c
 23fd688:	f898 2002 	ldrb.w	r2, [r8, #2]
 23fd68c:	e785      	b.n	23fd59a <_strtod_l+0x1a2>
 23fd68e:	f04f 0c01 	mov.w	ip, #1
 23fd692:	e7f6      	b.n	23fd682 <_strtod_l+0x28a>
 23fd694:	023ffe54 	.word	0x023ffe54
 23fd698:	023ffc90 	.word	0x023ffc90
 23fd69c:	7ff00000 	.word	0x7ff00000
 23fd6a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fd6a2:	1c51      	adds	r1, r2, #1
 23fd6a4:	9117      	str	r1, [sp, #92]	; 0x5c
 23fd6a6:	7852      	ldrb	r2, [r2, #1]
 23fd6a8:	2a30      	cmp	r2, #48	; 0x30
 23fd6aa:	d0f9      	beq.n	23fd6a0 <_strtod_l+0x2a8>
 23fd6ac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 23fd6b0:	2908      	cmp	r1, #8
 23fd6b2:	f63f af79 	bhi.w	23fd5a8 <_strtod_l+0x1b0>
 23fd6b6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 23fd6ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fd6bc:	9206      	str	r2, [sp, #24]
 23fd6be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fd6c0:	1c51      	adds	r1, r2, #1
 23fd6c2:	9117      	str	r1, [sp, #92]	; 0x5c
 23fd6c4:	7852      	ldrb	r2, [r2, #1]
 23fd6c6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 23fd6ca:	2e09      	cmp	r6, #9
 23fd6cc:	d937      	bls.n	23fd73e <_strtod_l+0x346>
 23fd6ce:	9e06      	ldr	r6, [sp, #24]
 23fd6d0:	1b89      	subs	r1, r1, r6
 23fd6d2:	f644 661f 	movw	r6, #19999	; 0x4e1f
 23fd6d6:	2908      	cmp	r1, #8
 23fd6d8:	dc02      	bgt.n	23fd6e0 <_strtod_l+0x2e8>
 23fd6da:	4576      	cmp	r6, lr
 23fd6dc:	bfa8      	it	ge
 23fd6de:	4676      	movge	r6, lr
 23fd6e0:	f1bc 0f00 	cmp.w	ip, #0
 23fd6e4:	d000      	beq.n	23fd6e8 <_strtod_l+0x2f0>
 23fd6e6:	4276      	negs	r6, r6
 23fd6e8:	2d00      	cmp	r5, #0
 23fd6ea:	d14d      	bne.n	23fd788 <_strtod_l+0x390>
 23fd6ec:	9904      	ldr	r1, [sp, #16]
 23fd6ee:	4301      	orrs	r1, r0
 23fd6f0:	f47f aec6 	bne.w	23fd480 <_strtod_l+0x88>
 23fd6f4:	2b00      	cmp	r3, #0
 23fd6f6:	f47f aee1 	bne.w	23fd4bc <_strtod_l+0xc4>
 23fd6fa:	2a69      	cmp	r2, #105	; 0x69
 23fd6fc:	d027      	beq.n	23fd74e <_strtod_l+0x356>
 23fd6fe:	dc24      	bgt.n	23fd74a <_strtod_l+0x352>
 23fd700:	2a49      	cmp	r2, #73	; 0x49
 23fd702:	d024      	beq.n	23fd74e <_strtod_l+0x356>
 23fd704:	2a4e      	cmp	r2, #78	; 0x4e
 23fd706:	f47f aed9 	bne.w	23fd4bc <_strtod_l+0xc4>
 23fd70a:	499f      	ldr	r1, [pc, #636]	; (23fd988 <_strtod_l+0x590>)
 23fd70c:	a817      	add	r0, sp, #92	; 0x5c
 23fd70e:	f001 f839 	bl	23fe784 <__match>
 23fd712:	2800      	cmp	r0, #0
 23fd714:	f43f aed2 	beq.w	23fd4bc <_strtod_l+0xc4>
 23fd718:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd71a:	781b      	ldrb	r3, [r3, #0]
 23fd71c:	2b28      	cmp	r3, #40	; 0x28
 23fd71e:	d12d      	bne.n	23fd77c <_strtod_l+0x384>
 23fd720:	aa1a      	add	r2, sp, #104	; 0x68
 23fd722:	499a      	ldr	r1, [pc, #616]	; (23fd98c <_strtod_l+0x594>)
 23fd724:	a817      	add	r0, sp, #92	; 0x5c
 23fd726:	f001 f841 	bl	23fe7ac <__hexnan>
 23fd72a:	2805      	cmp	r0, #5
 23fd72c:	d126      	bne.n	23fd77c <_strtod_l+0x384>
 23fd72e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 23fd730:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 23fd734:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 23fd738:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 23fd73c:	e6a0      	b.n	23fd480 <_strtod_l+0x88>
 23fd73e:	210a      	movs	r1, #10
 23fd740:	fb01 2e0e 	mla	lr, r1, lr, r2
 23fd744:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 23fd748:	e7b9      	b.n	23fd6be <_strtod_l+0x2c6>
 23fd74a:	2a6e      	cmp	r2, #110	; 0x6e
 23fd74c:	e7db      	b.n	23fd706 <_strtod_l+0x30e>
 23fd74e:	4990      	ldr	r1, [pc, #576]	; (23fd990 <_strtod_l+0x598>)
 23fd750:	a817      	add	r0, sp, #92	; 0x5c
 23fd752:	f001 f817 	bl	23fe784 <__match>
 23fd756:	2800      	cmp	r0, #0
 23fd758:	f43f aeb0 	beq.w	23fd4bc <_strtod_l+0xc4>
 23fd75c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd75e:	a817      	add	r0, sp, #92	; 0x5c
 23fd760:	498c      	ldr	r1, [pc, #560]	; (23fd994 <_strtod_l+0x59c>)
 23fd762:	3b01      	subs	r3, #1
 23fd764:	9317      	str	r3, [sp, #92]	; 0x5c
 23fd766:	f001 f80d 	bl	23fe784 <__match>
 23fd76a:	b910      	cbnz	r0, 23fd772 <_strtod_l+0x37a>
 23fd76c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd76e:	3301      	adds	r3, #1
 23fd770:	9317      	str	r3, [sp, #92]	; 0x5c
 23fd772:	f8df b230 	ldr.w	fp, [pc, #560]	; 23fd9a4 <_strtod_l+0x5ac>
 23fd776:	f04f 0a00 	mov.w	sl, #0
 23fd77a:	e681      	b.n	23fd480 <_strtod_l+0x88>
 23fd77c:	4886      	ldr	r0, [pc, #536]	; (23fd998 <_strtod_l+0x5a0>)
 23fd77e:	f7ff fd1b 	bl	23fd1b8 <nan>
 23fd782:	ec5b ab10 	vmov	sl, fp, d0
 23fd786:	e67b      	b.n	23fd480 <_strtod_l+0x88>
 23fd788:	9b05      	ldr	r3, [sp, #20]
 23fd78a:	2f00      	cmp	r7, #0
 23fd78c:	bf08      	it	eq
 23fd78e:	462f      	moveq	r7, r5
 23fd790:	2d10      	cmp	r5, #16
 23fd792:	9807      	ldr	r0, [sp, #28]
 23fd794:	eba6 0303 	sub.w	r3, r6, r3
 23fd798:	46a8      	mov	r8, r5
 23fd79a:	bfa8      	it	ge
 23fd79c:	f04f 0810 	movge.w	r8, #16
 23fd7a0:	9306      	str	r3, [sp, #24]
 23fd7a2:	f7f8 fc37 	bl	23f6014 <__aeabi_ui2d>
 23fd7a6:	2d09      	cmp	r5, #9
 23fd7a8:	4682      	mov	sl, r0
 23fd7aa:	468b      	mov	fp, r1
 23fd7ac:	dd13      	ble.n	23fd7d6 <_strtod_l+0x3de>
 23fd7ae:	4b7b      	ldr	r3, [pc, #492]	; (23fd99c <_strtod_l+0x5a4>)
 23fd7b0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 23fd7b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 23fd7b8:	f7f8 fca6 	bl	23f6108 <__aeabi_dmul>
 23fd7bc:	4682      	mov	sl, r0
 23fd7be:	468b      	mov	fp, r1
 23fd7c0:	4648      	mov	r0, r9
 23fd7c2:	f7f8 fc27 	bl	23f6014 <__aeabi_ui2d>
 23fd7c6:	4602      	mov	r2, r0
 23fd7c8:	460b      	mov	r3, r1
 23fd7ca:	4650      	mov	r0, sl
 23fd7cc:	4659      	mov	r1, fp
 23fd7ce:	f7f8 fae5 	bl	23f5d9c <__adddf3>
 23fd7d2:	4682      	mov	sl, r0
 23fd7d4:	468b      	mov	fp, r1
 23fd7d6:	2d0f      	cmp	r5, #15
 23fd7d8:	dc38      	bgt.n	23fd84c <_strtod_l+0x454>
 23fd7da:	9b06      	ldr	r3, [sp, #24]
 23fd7dc:	2b00      	cmp	r3, #0
 23fd7de:	f43f ae4f 	beq.w	23fd480 <_strtod_l+0x88>
 23fd7e2:	dd24      	ble.n	23fd82e <_strtod_l+0x436>
 23fd7e4:	2b16      	cmp	r3, #22
 23fd7e6:	dc0b      	bgt.n	23fd800 <_strtod_l+0x408>
 23fd7e8:	496c      	ldr	r1, [pc, #432]	; (23fd99c <_strtod_l+0x5a4>)
 23fd7ea:	4652      	mov	r2, sl
 23fd7ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 23fd7f0:	465b      	mov	r3, fp
 23fd7f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fd7f6:	f7f8 fc87 	bl	23f6108 <__aeabi_dmul>
 23fd7fa:	4682      	mov	sl, r0
 23fd7fc:	468b      	mov	fp, r1
 23fd7fe:	e63f      	b.n	23fd480 <_strtod_l+0x88>
 23fd800:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 23fd804:	9a06      	ldr	r2, [sp, #24]
 23fd806:	4293      	cmp	r3, r2
 23fd808:	db20      	blt.n	23fd84c <_strtod_l+0x454>
 23fd80a:	f1c5 050f 	rsb	r5, r5, #15
 23fd80e:	4c63      	ldr	r4, [pc, #396]	; (23fd99c <_strtod_l+0x5a4>)
 23fd810:	4652      	mov	r2, sl
 23fd812:	465b      	mov	r3, fp
 23fd814:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 23fd818:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fd81c:	f7f8 fc74 	bl	23f6108 <__aeabi_dmul>
 23fd820:	9b06      	ldr	r3, [sp, #24]
 23fd822:	1b5d      	subs	r5, r3, r5
 23fd824:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 23fd828:	e9d4 2300 	ldrd	r2, r3, [r4]
 23fd82c:	e7e3      	b.n	23fd7f6 <_strtod_l+0x3fe>
 23fd82e:	9b06      	ldr	r3, [sp, #24]
 23fd830:	3316      	adds	r3, #22
 23fd832:	db0b      	blt.n	23fd84c <_strtod_l+0x454>
 23fd834:	9b05      	ldr	r3, [sp, #20]
 23fd836:	4650      	mov	r0, sl
 23fd838:	4659      	mov	r1, fp
 23fd83a:	1b9e      	subs	r6, r3, r6
 23fd83c:	4b57      	ldr	r3, [pc, #348]	; (23fd99c <_strtod_l+0x5a4>)
 23fd83e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 23fd842:	e9d6 2300 	ldrd	r2, r3, [r6]
 23fd846:	f7f8 fd89 	bl	23f635c <__aeabi_ddiv>
 23fd84a:	e7d6      	b.n	23fd7fa <_strtod_l+0x402>
 23fd84c:	eba5 0808 	sub.w	r8, r5, r8
 23fd850:	9b06      	ldr	r3, [sp, #24]
 23fd852:	4498      	add	r8, r3
 23fd854:	f1b8 0f00 	cmp.w	r8, #0
 23fd858:	dd74      	ble.n	23fd944 <_strtod_l+0x54c>
 23fd85a:	f018 030f 	ands.w	r3, r8, #15
 23fd85e:	d00a      	beq.n	23fd876 <_strtod_l+0x47e>
 23fd860:	494e      	ldr	r1, [pc, #312]	; (23fd99c <_strtod_l+0x5a4>)
 23fd862:	4652      	mov	r2, sl
 23fd864:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 23fd868:	465b      	mov	r3, fp
 23fd86a:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fd86e:	f7f8 fc4b 	bl	23f6108 <__aeabi_dmul>
 23fd872:	4682      	mov	sl, r0
 23fd874:	468b      	mov	fp, r1
 23fd876:	f038 080f 	bics.w	r8, r8, #15
 23fd87a:	d04f      	beq.n	23fd91c <_strtod_l+0x524>
 23fd87c:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 23fd880:	dd22      	ble.n	23fd8c8 <_strtod_l+0x4d0>
 23fd882:	2500      	movs	r5, #0
 23fd884:	462e      	mov	r6, r5
 23fd886:	9507      	str	r5, [sp, #28]
 23fd888:	9505      	str	r5, [sp, #20]
 23fd88a:	2322      	movs	r3, #34	; 0x22
 23fd88c:	f8df b114 	ldr.w	fp, [pc, #276]	; 23fd9a4 <_strtod_l+0x5ac>
 23fd890:	f04f 0a00 	mov.w	sl, #0
 23fd894:	6023      	str	r3, [r4, #0]
 23fd896:	9b07      	ldr	r3, [sp, #28]
 23fd898:	2b00      	cmp	r3, #0
 23fd89a:	f43f adf1 	beq.w	23fd480 <_strtod_l+0x88>
 23fd89e:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fd8a0:	4620      	mov	r0, r4
 23fd8a2:	f001 f875 	bl	23fe990 <_Bfree>
 23fd8a6:	9905      	ldr	r1, [sp, #20]
 23fd8a8:	4620      	mov	r0, r4
 23fd8aa:	f001 f871 	bl	23fe990 <_Bfree>
 23fd8ae:	4631      	mov	r1, r6
 23fd8b0:	4620      	mov	r0, r4
 23fd8b2:	f001 f86d 	bl	23fe990 <_Bfree>
 23fd8b6:	9907      	ldr	r1, [sp, #28]
 23fd8b8:	4620      	mov	r0, r4
 23fd8ba:	f001 f869 	bl	23fe990 <_Bfree>
 23fd8be:	4629      	mov	r1, r5
 23fd8c0:	4620      	mov	r0, r4
 23fd8c2:	f001 f865 	bl	23fe990 <_Bfree>
 23fd8c6:	e5db      	b.n	23fd480 <_strtod_l+0x88>
 23fd8c8:	4b35      	ldr	r3, [pc, #212]	; (23fd9a0 <_strtod_l+0x5a8>)
 23fd8ca:	ea4f 1828 	mov.w	r8, r8, asr #4
 23fd8ce:	4650      	mov	r0, sl
 23fd8d0:	4659      	mov	r1, fp
 23fd8d2:	9304      	str	r3, [sp, #16]
 23fd8d4:	2300      	movs	r3, #0
 23fd8d6:	4699      	mov	r9, r3
 23fd8d8:	f1b8 0f01 	cmp.w	r8, #1
 23fd8dc:	dc21      	bgt.n	23fd922 <_strtod_l+0x52a>
 23fd8de:	b10b      	cbz	r3, 23fd8e4 <_strtod_l+0x4ec>
 23fd8e0:	4682      	mov	sl, r0
 23fd8e2:	468b      	mov	fp, r1
 23fd8e4:	4b2e      	ldr	r3, [pc, #184]	; (23fd9a0 <_strtod_l+0x5a8>)
 23fd8e6:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 23fd8ea:	4652      	mov	r2, sl
 23fd8ec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 23fd8f0:	465b      	mov	r3, fp
 23fd8f2:	e9d9 0100 	ldrd	r0, r1, [r9]
 23fd8f6:	f7f8 fc07 	bl	23f6108 <__aeabi_dmul>
 23fd8fa:	4b2a      	ldr	r3, [pc, #168]	; (23fd9a4 <_strtod_l+0x5ac>)
 23fd8fc:	460a      	mov	r2, r1
 23fd8fe:	4682      	mov	sl, r0
 23fd900:	400b      	ands	r3, r1
 23fd902:	4929      	ldr	r1, [pc, #164]	; (23fd9a8 <_strtod_l+0x5b0>)
 23fd904:	428b      	cmp	r3, r1
 23fd906:	d8bc      	bhi.n	23fd882 <_strtod_l+0x48a>
 23fd908:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 23fd90c:	428b      	cmp	r3, r1
 23fd90e:	bf86      	itte	hi
 23fd910:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 23fd9ac <_strtod_l+0x5b4>
 23fd914:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 23fd918:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 23fd91c:	2300      	movs	r3, #0
 23fd91e:	9304      	str	r3, [sp, #16]
 23fd920:	e083      	b.n	23fda2a <_strtod_l+0x632>
 23fd922:	f018 0f01 	tst.w	r8, #1
 23fd926:	d005      	beq.n	23fd934 <_strtod_l+0x53c>
 23fd928:	9b04      	ldr	r3, [sp, #16]
 23fd92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd92e:	f7f8 fbeb 	bl	23f6108 <__aeabi_dmul>
 23fd932:	2301      	movs	r3, #1
 23fd934:	9a04      	ldr	r2, [sp, #16]
 23fd936:	f109 0901 	add.w	r9, r9, #1
 23fd93a:	ea4f 0868 	mov.w	r8, r8, asr #1
 23fd93e:	3208      	adds	r2, #8
 23fd940:	9204      	str	r2, [sp, #16]
 23fd942:	e7c9      	b.n	23fd8d8 <_strtod_l+0x4e0>
 23fd944:	d0ea      	beq.n	23fd91c <_strtod_l+0x524>
 23fd946:	f1c8 0800 	rsb	r8, r8, #0
 23fd94a:	f018 020f 	ands.w	r2, r8, #15
 23fd94e:	d00a      	beq.n	23fd966 <_strtod_l+0x56e>
 23fd950:	4b12      	ldr	r3, [pc, #72]	; (23fd99c <_strtod_l+0x5a4>)
 23fd952:	4650      	mov	r0, sl
 23fd954:	4659      	mov	r1, fp
 23fd956:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 23fd95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd95e:	f7f8 fcfd 	bl	23f635c <__aeabi_ddiv>
 23fd962:	4682      	mov	sl, r0
 23fd964:	468b      	mov	fp, r1
 23fd966:	ea5f 1828 	movs.w	r8, r8, asr #4
 23fd96a:	d0d7      	beq.n	23fd91c <_strtod_l+0x524>
 23fd96c:	f1b8 0f1f 	cmp.w	r8, #31
 23fd970:	dd1e      	ble.n	23fd9b0 <_strtod_l+0x5b8>
 23fd972:	2500      	movs	r5, #0
 23fd974:	462e      	mov	r6, r5
 23fd976:	9507      	str	r5, [sp, #28]
 23fd978:	9505      	str	r5, [sp, #20]
 23fd97a:	2322      	movs	r3, #34	; 0x22
 23fd97c:	f04f 0a00 	mov.w	sl, #0
 23fd980:	f04f 0b00 	mov.w	fp, #0
 23fd984:	6023      	str	r3, [r4, #0]
 23fd986:	e786      	b.n	23fd896 <_strtod_l+0x49e>
 23fd988:	023ffc8b 	.word	0x023ffc8b
 23fd98c:	023ffca4 	.word	0x023ffca4
 23fd990:	023ffc82 	.word	0x023ffc82
 23fd994:	023ffc85 	.word	0x023ffc85
 23fd998:	023ff895 	.word	0x023ff895
 23fd99c:	023ffef0 	.word	0x023ffef0
 23fd9a0:	023ffec8 	.word	0x023ffec8
 23fd9a4:	7ff00000 	.word	0x7ff00000
 23fd9a8:	7ca00000 	.word	0x7ca00000
 23fd9ac:	7fefffff 	.word	0x7fefffff
 23fd9b0:	f018 0310 	ands.w	r3, r8, #16
 23fd9b4:	4650      	mov	r0, sl
 23fd9b6:	4659      	mov	r1, fp
 23fd9b8:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 23fdd64 <_strtod_l+0x96c>
 23fd9bc:	bf18      	it	ne
 23fd9be:	236a      	movne	r3, #106	; 0x6a
 23fd9c0:	9304      	str	r3, [sp, #16]
 23fd9c2:	2300      	movs	r3, #0
 23fd9c4:	f018 0f01 	tst.w	r8, #1
 23fd9c8:	d004      	beq.n	23fd9d4 <_strtod_l+0x5dc>
 23fd9ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 23fd9ce:	f7f8 fb9b 	bl	23f6108 <__aeabi_dmul>
 23fd9d2:	2301      	movs	r3, #1
 23fd9d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 23fd9d8:	f109 0908 	add.w	r9, r9, #8
 23fd9dc:	d1f2      	bne.n	23fd9c4 <_strtod_l+0x5cc>
 23fd9de:	b10b      	cbz	r3, 23fd9e4 <_strtod_l+0x5ec>
 23fd9e0:	4682      	mov	sl, r0
 23fd9e2:	468b      	mov	fp, r1
 23fd9e4:	9b04      	ldr	r3, [sp, #16]
 23fd9e6:	b1c3      	cbz	r3, 23fda1a <_strtod_l+0x622>
 23fd9e8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 23fd9ec:	4659      	mov	r1, fp
 23fd9ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 23fd9f2:	2b00      	cmp	r3, #0
 23fd9f4:	dd11      	ble.n	23fda1a <_strtod_l+0x622>
 23fd9f6:	2b1f      	cmp	r3, #31
 23fd9f8:	f340 8121 	ble.w	23fdc3e <_strtod_l+0x846>
 23fd9fc:	2b34      	cmp	r3, #52	; 0x34
 23fd9fe:	f04f 0a00 	mov.w	sl, #0
 23fda02:	bfdb      	ittet	le
 23fda04:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 23fda08:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 23fda0c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 23fda10:	fa03 f202 	lslle.w	r2, r3, r2
 23fda14:	bfd8      	it	le
 23fda16:	ea02 0b01 	andle.w	fp, r2, r1
 23fda1a:	2200      	movs	r2, #0
 23fda1c:	2300      	movs	r3, #0
 23fda1e:	4650      	mov	r0, sl
 23fda20:	4659      	mov	r1, fp
 23fda22:	f7f8 fdd9 	bl	23f65d8 <__aeabi_dcmpeq>
 23fda26:	2800      	cmp	r0, #0
 23fda28:	d1a3      	bne.n	23fd972 <_strtod_l+0x57a>
 23fda2a:	9b07      	ldr	r3, [sp, #28]
 23fda2c:	463a      	mov	r2, r7
 23fda2e:	9908      	ldr	r1, [sp, #32]
 23fda30:	4620      	mov	r0, r4
 23fda32:	9300      	str	r3, [sp, #0]
 23fda34:	462b      	mov	r3, r5
 23fda36:	f001 f815 	bl	23fea64 <__s2b>
 23fda3a:	9007      	str	r0, [sp, #28]
 23fda3c:	2800      	cmp	r0, #0
 23fda3e:	f43f af20 	beq.w	23fd882 <_strtod_l+0x48a>
 23fda42:	9b05      	ldr	r3, [sp, #20]
 23fda44:	2500      	movs	r5, #0
 23fda46:	1b9e      	subs	r6, r3, r6
 23fda48:	9b06      	ldr	r3, [sp, #24]
 23fda4a:	2b00      	cmp	r3, #0
 23fda4c:	bfb4      	ite	lt
 23fda4e:	4633      	movlt	r3, r6
 23fda50:	2300      	movge	r3, #0
 23fda52:	462e      	mov	r6, r5
 23fda54:	930c      	str	r3, [sp, #48]	; 0x30
 23fda56:	9b06      	ldr	r3, [sp, #24]
 23fda58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 23fda5c:	9312      	str	r3, [sp, #72]	; 0x48
 23fda5e:	9b07      	ldr	r3, [sp, #28]
 23fda60:	4620      	mov	r0, r4
 23fda62:	6859      	ldr	r1, [r3, #4]
 23fda64:	f000 ff54 	bl	23fe910 <_Balloc>
 23fda68:	9005      	str	r0, [sp, #20]
 23fda6a:	2800      	cmp	r0, #0
 23fda6c:	f43f af0d 	beq.w	23fd88a <_strtod_l+0x492>
 23fda70:	9b07      	ldr	r3, [sp, #28]
 23fda72:	300c      	adds	r0, #12
 23fda74:	691a      	ldr	r2, [r3, #16]
 23fda76:	f103 010c 	add.w	r1, r3, #12
 23fda7a:	3202      	adds	r2, #2
 23fda7c:	0092      	lsls	r2, r2, #2
 23fda7e:	f7ff fbe7 	bl	23fd250 <memcpy>
 23fda82:	aa1a      	add	r2, sp, #104	; 0x68
 23fda84:	a919      	add	r1, sp, #100	; 0x64
 23fda86:	4620      	mov	r0, r4
 23fda88:	ec4b ab10 	vmov	d0, sl, fp
 23fda8c:	f001 fb32 	bl	23ff0f4 <__d2b>
 23fda90:	9018      	str	r0, [sp, #96]	; 0x60
 23fda92:	ec4b ab18 	vmov	d8, sl, fp
 23fda96:	2800      	cmp	r0, #0
 23fda98:	f43f aef7 	beq.w	23fd88a <_strtod_l+0x492>
 23fda9c:	2101      	movs	r1, #1
 23fda9e:	4620      	mov	r0, r4
 23fdaa0:	f001 f87a 	bl	23feb98 <__i2b>
 23fdaa4:	4606      	mov	r6, r0
 23fdaa6:	2800      	cmp	r0, #0
 23fdaa8:	f43f aeef 	beq.w	23fd88a <_strtod_l+0x492>
 23fdaac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 23fdaae:	9904      	ldr	r1, [sp, #16]
 23fdab0:	2b00      	cmp	r3, #0
 23fdab2:	eba3 0801 	sub.w	r8, r3, r1
 23fdab6:	bfa9      	itett	ge
 23fdab8:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 23fdaba:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 23fdabc:	eb03 0902 	addge.w	r9, r3, r2
 23fdac0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 23fdac2:	bfb8      	it	lt
 23fdac4:	1ad7      	sublt	r7, r2, r3
 23fdac6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 23fdac8:	4ba1      	ldr	r3, [pc, #644]	; (23fdd50 <_strtod_l+0x958>)
 23fdaca:	4490      	add	r8, r2
 23fdacc:	bfb8      	it	lt
 23fdace:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 23fdad2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 23fdad6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fdada:	4598      	cmp	r8, r3
 23fdadc:	f280 80c3 	bge.w	23fdc66 <_strtod_l+0x86e>
 23fdae0:	eba3 0308 	sub.w	r3, r3, r8
 23fdae4:	2101      	movs	r1, #1
 23fdae6:	2b1f      	cmp	r3, #31
 23fdae8:	eba2 0203 	sub.w	r2, r2, r3
 23fdaec:	f300 80ae 	bgt.w	23fdc4c <_strtod_l+0x854>
 23fdaf0:	fa01 f303 	lsl.w	r3, r1, r3
 23fdaf4:	930d      	str	r3, [sp, #52]	; 0x34
 23fdaf6:	2300      	movs	r3, #0
 23fdaf8:	9308      	str	r3, [sp, #32]
 23fdafa:	eb09 0802 	add.w	r8, r9, r2
 23fdafe:	9b04      	ldr	r3, [sp, #16]
 23fdb00:	4417      	add	r7, r2
 23fdb02:	45c1      	cmp	r9, r8
 23fdb04:	441f      	add	r7, r3
 23fdb06:	464b      	mov	r3, r9
 23fdb08:	bfa8      	it	ge
 23fdb0a:	4643      	movge	r3, r8
 23fdb0c:	42bb      	cmp	r3, r7
 23fdb0e:	bfa8      	it	ge
 23fdb10:	463b      	movge	r3, r7
 23fdb12:	2b00      	cmp	r3, #0
 23fdb14:	bfc2      	ittt	gt
 23fdb16:	eba8 0803 	subgt.w	r8, r8, r3
 23fdb1a:	1aff      	subgt	r7, r7, r3
 23fdb1c:	eba9 0903 	subgt.w	r9, r9, r3
 23fdb20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fdb22:	2b00      	cmp	r3, #0
 23fdb24:	dd17      	ble.n	23fdb56 <_strtod_l+0x75e>
 23fdb26:	4631      	mov	r1, r6
 23fdb28:	461a      	mov	r2, r3
 23fdb2a:	4620      	mov	r0, r4
 23fdb2c:	f001 f8f2 	bl	23fed14 <__pow5mult>
 23fdb30:	4606      	mov	r6, r0
 23fdb32:	2800      	cmp	r0, #0
 23fdb34:	f43f aea9 	beq.w	23fd88a <_strtod_l+0x492>
 23fdb38:	4601      	mov	r1, r0
 23fdb3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 23fdb3c:	4620      	mov	r0, r4
 23fdb3e:	f001 f841 	bl	23febc4 <__multiply>
 23fdb42:	900b      	str	r0, [sp, #44]	; 0x2c
 23fdb44:	2800      	cmp	r0, #0
 23fdb46:	f43f aea0 	beq.w	23fd88a <_strtod_l+0x492>
 23fdb4a:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fdb4c:	4620      	mov	r0, r4
 23fdb4e:	f000 ff1f 	bl	23fe990 <_Bfree>
 23fdb52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fdb54:	9318      	str	r3, [sp, #96]	; 0x60
 23fdb56:	f1b8 0f00 	cmp.w	r8, #0
 23fdb5a:	f300 8089 	bgt.w	23fdc70 <_strtod_l+0x878>
 23fdb5e:	9b06      	ldr	r3, [sp, #24]
 23fdb60:	2b00      	cmp	r3, #0
 23fdb62:	dd08      	ble.n	23fdb76 <_strtod_l+0x77e>
 23fdb64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23fdb66:	4620      	mov	r0, r4
 23fdb68:	9905      	ldr	r1, [sp, #20]
 23fdb6a:	f001 f8d3 	bl	23fed14 <__pow5mult>
 23fdb6e:	9005      	str	r0, [sp, #20]
 23fdb70:	2800      	cmp	r0, #0
 23fdb72:	f43f ae8a 	beq.w	23fd88a <_strtod_l+0x492>
 23fdb76:	2f00      	cmp	r7, #0
 23fdb78:	dd08      	ble.n	23fdb8c <_strtod_l+0x794>
 23fdb7a:	463a      	mov	r2, r7
 23fdb7c:	9905      	ldr	r1, [sp, #20]
 23fdb7e:	4620      	mov	r0, r4
 23fdb80:	f001 f922 	bl	23fedc8 <__lshift>
 23fdb84:	9005      	str	r0, [sp, #20]
 23fdb86:	2800      	cmp	r0, #0
 23fdb88:	f43f ae7f 	beq.w	23fd88a <_strtod_l+0x492>
 23fdb8c:	f1b9 0f00 	cmp.w	r9, #0
 23fdb90:	dd08      	ble.n	23fdba4 <_strtod_l+0x7ac>
 23fdb92:	4631      	mov	r1, r6
 23fdb94:	464a      	mov	r2, r9
 23fdb96:	4620      	mov	r0, r4
 23fdb98:	f001 f916 	bl	23fedc8 <__lshift>
 23fdb9c:	4606      	mov	r6, r0
 23fdb9e:	2800      	cmp	r0, #0
 23fdba0:	f43f ae73 	beq.w	23fd88a <_strtod_l+0x492>
 23fdba4:	9a05      	ldr	r2, [sp, #20]
 23fdba6:	4620      	mov	r0, r4
 23fdba8:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fdbaa:	f001 f999 	bl	23feee0 <__mdiff>
 23fdbae:	4605      	mov	r5, r0
 23fdbb0:	2800      	cmp	r0, #0
 23fdbb2:	f43f ae6a 	beq.w	23fd88a <_strtod_l+0x492>
 23fdbb6:	68c3      	ldr	r3, [r0, #12]
 23fdbb8:	4631      	mov	r1, r6
 23fdbba:	930b      	str	r3, [sp, #44]	; 0x2c
 23fdbbc:	2300      	movs	r3, #0
 23fdbbe:	60c3      	str	r3, [r0, #12]
 23fdbc0:	f001 f972 	bl	23feea8 <__mcmp>
 23fdbc4:	2800      	cmp	r0, #0
 23fdbc6:	da5d      	bge.n	23fdc84 <_strtod_l+0x88c>
 23fdbc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fdbca:	ea53 030a 	orrs.w	r3, r3, sl
 23fdbce:	d17f      	bne.n	23fdcd0 <_strtod_l+0x8d8>
 23fdbd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fdbd4:	2b00      	cmp	r3, #0
 23fdbd6:	d17b      	bne.n	23fdcd0 <_strtod_l+0x8d8>
 23fdbd8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23fdbdc:	0d1b      	lsrs	r3, r3, #20
 23fdbde:	051b      	lsls	r3, r3, #20
 23fdbe0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 23fdbe4:	d974      	bls.n	23fdcd0 <_strtod_l+0x8d8>
 23fdbe6:	696b      	ldr	r3, [r5, #20]
 23fdbe8:	b913      	cbnz	r3, 23fdbf0 <_strtod_l+0x7f8>
 23fdbea:	692b      	ldr	r3, [r5, #16]
 23fdbec:	2b01      	cmp	r3, #1
 23fdbee:	dd6f      	ble.n	23fdcd0 <_strtod_l+0x8d8>
 23fdbf0:	4629      	mov	r1, r5
 23fdbf2:	2201      	movs	r2, #1
 23fdbf4:	4620      	mov	r0, r4
 23fdbf6:	f001 f8e7 	bl	23fedc8 <__lshift>
 23fdbfa:	4631      	mov	r1, r6
 23fdbfc:	4605      	mov	r5, r0
 23fdbfe:	f001 f953 	bl	23feea8 <__mcmp>
 23fdc02:	2800      	cmp	r0, #0
 23fdc04:	dd64      	ble.n	23fdcd0 <_strtod_l+0x8d8>
 23fdc06:	9904      	ldr	r1, [sp, #16]
 23fdc08:	465b      	mov	r3, fp
 23fdc0a:	4a52      	ldr	r2, [pc, #328]	; (23fdd54 <_strtod_l+0x95c>)
 23fdc0c:	2900      	cmp	r1, #0
 23fdc0e:	d07f      	beq.n	23fdd10 <_strtod_l+0x918>
 23fdc10:	ea02 010b 	and.w	r1, r2, fp
 23fdc14:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 23fdc18:	dc7a      	bgt.n	23fdd10 <_strtod_l+0x918>
 23fdc1a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 23fdc1e:	f77f aeac 	ble.w	23fd97a <_strtod_l+0x582>
 23fdc22:	4b4d      	ldr	r3, [pc, #308]	; (23fdd58 <_strtod_l+0x960>)
 23fdc24:	4650      	mov	r0, sl
 23fdc26:	4659      	mov	r1, fp
 23fdc28:	2200      	movs	r2, #0
 23fdc2a:	f7f8 fa6d 	bl	23f6108 <__aeabi_dmul>
 23fdc2e:	460b      	mov	r3, r1
 23fdc30:	4682      	mov	sl, r0
 23fdc32:	468b      	mov	fp, r1
 23fdc34:	4303      	orrs	r3, r0
 23fdc36:	bf04      	itt	eq
 23fdc38:	2322      	moveq	r3, #34	; 0x22
 23fdc3a:	6023      	streq	r3, [r4, #0]
 23fdc3c:	e62f      	b.n	23fd89e <_strtod_l+0x4a6>
 23fdc3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fdc42:	fa02 f303 	lsl.w	r3, r2, r3
 23fdc46:	ea03 0a0a 	and.w	sl, r3, sl
 23fdc4a:	e6e6      	b.n	23fda1a <_strtod_l+0x622>
 23fdc4c:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 23fdc50:	910d      	str	r1, [sp, #52]	; 0x34
 23fdc52:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 23fdc56:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 23fdc5a:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 23fdc5e:	fa01 f308 	lsl.w	r3, r1, r8
 23fdc62:	9308      	str	r3, [sp, #32]
 23fdc64:	e749      	b.n	23fdafa <_strtod_l+0x702>
 23fdc66:	2300      	movs	r3, #0
 23fdc68:	9308      	str	r3, [sp, #32]
 23fdc6a:	2301      	movs	r3, #1
 23fdc6c:	930d      	str	r3, [sp, #52]	; 0x34
 23fdc6e:	e744      	b.n	23fdafa <_strtod_l+0x702>
 23fdc70:	4642      	mov	r2, r8
 23fdc72:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fdc74:	4620      	mov	r0, r4
 23fdc76:	f001 f8a7 	bl	23fedc8 <__lshift>
 23fdc7a:	9018      	str	r0, [sp, #96]	; 0x60
 23fdc7c:	2800      	cmp	r0, #0
 23fdc7e:	f47f af6e 	bne.w	23fdb5e <_strtod_l+0x766>
 23fdc82:	e602      	b.n	23fd88a <_strtod_l+0x492>
 23fdc84:	465f      	mov	r7, fp
 23fdc86:	d16f      	bne.n	23fdd68 <_strtod_l+0x970>
 23fdc88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fdc8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fdc8e:	b342      	cbz	r2, 23fdce2 <_strtod_l+0x8ea>
 23fdc90:	4a32      	ldr	r2, [pc, #200]	; (23fdd5c <_strtod_l+0x964>)
 23fdc92:	4293      	cmp	r3, r2
 23fdc94:	d128      	bne.n	23fdce8 <_strtod_l+0x8f0>
 23fdc96:	9b04      	ldr	r3, [sp, #16]
 23fdc98:	4651      	mov	r1, sl
 23fdc9a:	b1eb      	cbz	r3, 23fdcd8 <_strtod_l+0x8e0>
 23fdc9c:	4b2d      	ldr	r3, [pc, #180]	; (23fdd54 <_strtod_l+0x95c>)
 23fdc9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fdca2:	403b      	ands	r3, r7
 23fdca4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 23fdca8:	d819      	bhi.n	23fdcde <_strtod_l+0x8e6>
 23fdcaa:	0d1b      	lsrs	r3, r3, #20
 23fdcac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 23fdcb0:	fa02 f303 	lsl.w	r3, r2, r3
 23fdcb4:	4299      	cmp	r1, r3
 23fdcb6:	d117      	bne.n	23fdce8 <_strtod_l+0x8f0>
 23fdcb8:	4b29      	ldr	r3, [pc, #164]	; (23fdd60 <_strtod_l+0x968>)
 23fdcba:	429f      	cmp	r7, r3
 23fdcbc:	d102      	bne.n	23fdcc4 <_strtod_l+0x8cc>
 23fdcbe:	3101      	adds	r1, #1
 23fdcc0:	f43f ade3 	beq.w	23fd88a <_strtod_l+0x492>
 23fdcc4:	4b23      	ldr	r3, [pc, #140]	; (23fdd54 <_strtod_l+0x95c>)
 23fdcc6:	f04f 0a00 	mov.w	sl, #0
 23fdcca:	403b      	ands	r3, r7
 23fdccc:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 23fdcd0:	9b04      	ldr	r3, [sp, #16]
 23fdcd2:	2b00      	cmp	r3, #0
 23fdcd4:	d1a5      	bne.n	23fdc22 <_strtod_l+0x82a>
 23fdcd6:	e5e2      	b.n	23fd89e <_strtod_l+0x4a6>
 23fdcd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fdcdc:	e7ea      	b.n	23fdcb4 <_strtod_l+0x8bc>
 23fdcde:	4613      	mov	r3, r2
 23fdce0:	e7e8      	b.n	23fdcb4 <_strtod_l+0x8bc>
 23fdce2:	ea53 030a 	orrs.w	r3, r3, sl
 23fdce6:	d08e      	beq.n	23fdc06 <_strtod_l+0x80e>
 23fdce8:	9b08      	ldr	r3, [sp, #32]
 23fdcea:	b1db      	cbz	r3, 23fdd24 <_strtod_l+0x92c>
 23fdcec:	423b      	tst	r3, r7
 23fdcee:	d0ef      	beq.n	23fdcd0 <_strtod_l+0x8d8>
 23fdcf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fdcf2:	4650      	mov	r0, sl
 23fdcf4:	9a04      	ldr	r2, [sp, #16]
 23fdcf6:	4659      	mov	r1, fp
 23fdcf8:	b1c3      	cbz	r3, 23fdd2c <_strtod_l+0x934>
 23fdcfa:	f7ff fb61 	bl	23fd3c0 <sulp>
 23fdcfe:	4602      	mov	r2, r0
 23fdd00:	460b      	mov	r3, r1
 23fdd02:	ec51 0b18 	vmov	r0, r1, d8
 23fdd06:	f7f8 f849 	bl	23f5d9c <__adddf3>
 23fdd0a:	4682      	mov	sl, r0
 23fdd0c:	468b      	mov	fp, r1
 23fdd0e:	e7df      	b.n	23fdcd0 <_strtod_l+0x8d8>
 23fdd10:	4013      	ands	r3, r2
 23fdd12:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 23fdd16:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 23fdd1a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 23fdd1e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 23fdd22:	e7d5      	b.n	23fdcd0 <_strtod_l+0x8d8>
 23fdd24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23fdd26:	ea13 0f0a 	tst.w	r3, sl
 23fdd2a:	e7e0      	b.n	23fdcee <_strtod_l+0x8f6>
 23fdd2c:	f7ff fb48 	bl	23fd3c0 <sulp>
 23fdd30:	4602      	mov	r2, r0
 23fdd32:	460b      	mov	r3, r1
 23fdd34:	ec51 0b18 	vmov	r0, r1, d8
 23fdd38:	f7f8 f82e 	bl	23f5d98 <__aeabi_dsub>
 23fdd3c:	2200      	movs	r2, #0
 23fdd3e:	2300      	movs	r3, #0
 23fdd40:	4682      	mov	sl, r0
 23fdd42:	468b      	mov	fp, r1
 23fdd44:	f7f8 fc48 	bl	23f65d8 <__aeabi_dcmpeq>
 23fdd48:	2800      	cmp	r0, #0
 23fdd4a:	d0c1      	beq.n	23fdcd0 <_strtod_l+0x8d8>
 23fdd4c:	e615      	b.n	23fd97a <_strtod_l+0x582>
 23fdd4e:	bf00      	nop
 23fdd50:	fffffc02 	.word	0xfffffc02
 23fdd54:	7ff00000 	.word	0x7ff00000
 23fdd58:	39500000 	.word	0x39500000
 23fdd5c:	000fffff 	.word	0x000fffff
 23fdd60:	7fefffff 	.word	0x7fefffff
 23fdd64:	023ffcb8 	.word	0x023ffcb8
 23fdd68:	4631      	mov	r1, r6
 23fdd6a:	4628      	mov	r0, r5
 23fdd6c:	f001 fa1e 	bl	23ff1ac <__ratio>
 23fdd70:	2200      	movs	r2, #0
 23fdd72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23fdd76:	ee10 0a10 	vmov	r0, s0
 23fdd7a:	ec59 8b10 	vmov	r8, r9, d0
 23fdd7e:	4649      	mov	r1, r9
 23fdd80:	f7f8 fc3e 	bl	23f6600 <__aeabi_dcmple>
 23fdd84:	2800      	cmp	r0, #0
 23fdd86:	d07a      	beq.n	23fde7e <_strtod_l+0xa86>
 23fdd88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fdd8a:	2b00      	cmp	r3, #0
 23fdd8c:	d04a      	beq.n	23fde24 <_strtod_l+0xa2c>
 23fdd8e:	2200      	movs	r2, #0
 23fdd90:	4b93      	ldr	r3, [pc, #588]	; (23fdfe0 <_strtod_l+0xbe8>)
 23fdd92:	f04f 0800 	mov.w	r8, #0
 23fdd96:	f8df 9248 	ldr.w	r9, [pc, #584]	; 23fdfe0 <_strtod_l+0xbe8>
 23fdd9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fdd9e:	4b91      	ldr	r3, [pc, #580]	; (23fdfe4 <_strtod_l+0xbec>)
 23fdda0:	403b      	ands	r3, r7
 23fdda2:	930d      	str	r3, [sp, #52]	; 0x34
 23fdda4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23fdda6:	4b90      	ldr	r3, [pc, #576]	; (23fdfe8 <_strtod_l+0xbf0>)
 23fdda8:	429a      	cmp	r2, r3
 23fddaa:	f040 80b0 	bne.w	23fdf0e <_strtod_l+0xb16>
 23fddae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 23fddb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fddb6:	ec4b ab10 	vmov	d0, sl, fp
 23fddba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 23fddbe:	f001 f91f 	bl	23ff000 <__ulp>
 23fddc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fddc6:	ec53 2b10 	vmov	r2, r3, d0
 23fddca:	f7f8 f99d 	bl	23f6108 <__aeabi_dmul>
 23fddce:	4652      	mov	r2, sl
 23fddd0:	465b      	mov	r3, fp
 23fddd2:	f7f7 ffe3 	bl	23f5d9c <__adddf3>
 23fddd6:	460b      	mov	r3, r1
 23fddd8:	4982      	ldr	r1, [pc, #520]	; (23fdfe4 <_strtod_l+0xbec>)
 23fddda:	4682      	mov	sl, r0
 23fdddc:	4a83      	ldr	r2, [pc, #524]	; (23fdfec <_strtod_l+0xbf4>)
 23fddde:	4019      	ands	r1, r3
 23fdde0:	4291      	cmp	r1, r2
 23fdde2:	d960      	bls.n	23fdea6 <_strtod_l+0xaae>
 23fdde4:	ee18 3a90 	vmov	r3, s17
 23fdde8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 23fddec:	4293      	cmp	r3, r2
 23fddee:	d104      	bne.n	23fddfa <_strtod_l+0xa02>
 23fddf0:	ee18 3a10 	vmov	r3, s16
 23fddf4:	3301      	adds	r3, #1
 23fddf6:	f43f ad48 	beq.w	23fd88a <_strtod_l+0x492>
 23fddfa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 23fdff8 <_strtod_l+0xc00>
 23fddfe:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 23fde02:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fde04:	4620      	mov	r0, r4
 23fde06:	f000 fdc3 	bl	23fe990 <_Bfree>
 23fde0a:	9905      	ldr	r1, [sp, #20]
 23fde0c:	4620      	mov	r0, r4
 23fde0e:	f000 fdbf 	bl	23fe990 <_Bfree>
 23fde12:	4631      	mov	r1, r6
 23fde14:	4620      	mov	r0, r4
 23fde16:	f000 fdbb 	bl	23fe990 <_Bfree>
 23fde1a:	4629      	mov	r1, r5
 23fde1c:	4620      	mov	r0, r4
 23fde1e:	f000 fdb7 	bl	23fe990 <_Bfree>
 23fde22:	e61c      	b.n	23fda5e <_strtod_l+0x666>
 23fde24:	f1ba 0f00 	cmp.w	sl, #0
 23fde28:	d11b      	bne.n	23fde62 <_strtod_l+0xa6a>
 23fde2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fde2e:	b9f3      	cbnz	r3, 23fde6e <_strtod_l+0xa76>
 23fde30:	2200      	movs	r2, #0
 23fde32:	4b6b      	ldr	r3, [pc, #428]	; (23fdfe0 <_strtod_l+0xbe8>)
 23fde34:	4640      	mov	r0, r8
 23fde36:	4649      	mov	r1, r9
 23fde38:	f7f8 fbd8 	bl	23f65ec <__aeabi_dcmplt>
 23fde3c:	b9d0      	cbnz	r0, 23fde74 <_strtod_l+0xa7c>
 23fde3e:	4640      	mov	r0, r8
 23fde40:	4649      	mov	r1, r9
 23fde42:	2200      	movs	r2, #0
 23fde44:	4b6a      	ldr	r3, [pc, #424]	; (23fdff0 <_strtod_l+0xbf8>)
 23fde46:	f7f8 f95f 	bl	23f6108 <__aeabi_dmul>
 23fde4a:	4680      	mov	r8, r0
 23fde4c:	4689      	mov	r9, r1
 23fde4e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 23fde52:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 23fde56:	9315      	str	r3, [sp, #84]	; 0x54
 23fde58:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 23fde5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fde60:	e79d      	b.n	23fdd9e <_strtod_l+0x9a6>
 23fde62:	f1ba 0f01 	cmp.w	sl, #1
 23fde66:	d102      	bne.n	23fde6e <_strtod_l+0xa76>
 23fde68:	2f00      	cmp	r7, #0
 23fde6a:	f43f ad86 	beq.w	23fd97a <_strtod_l+0x582>
 23fde6e:	2200      	movs	r2, #0
 23fde70:	4b60      	ldr	r3, [pc, #384]	; (23fdff4 <_strtod_l+0xbfc>)
 23fde72:	e78e      	b.n	23fdd92 <_strtod_l+0x99a>
 23fde74:	f04f 0800 	mov.w	r8, #0
 23fde78:	f8df 9174 	ldr.w	r9, [pc, #372]	; 23fdff0 <_strtod_l+0xbf8>
 23fde7c:	e7e7      	b.n	23fde4e <_strtod_l+0xa56>
 23fde7e:	4b5c      	ldr	r3, [pc, #368]	; (23fdff0 <_strtod_l+0xbf8>)
 23fde80:	4640      	mov	r0, r8
 23fde82:	4649      	mov	r1, r9
 23fde84:	2200      	movs	r2, #0
 23fde86:	f7f8 f93f 	bl	23f6108 <__aeabi_dmul>
 23fde8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fde8c:	4680      	mov	r8, r0
 23fde8e:	4689      	mov	r9, r1
 23fde90:	b933      	cbnz	r3, 23fdea0 <_strtod_l+0xaa8>
 23fde92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fde96:	900e      	str	r0, [sp, #56]	; 0x38
 23fde98:	930f      	str	r3, [sp, #60]	; 0x3c
 23fde9a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 23fde9e:	e7dd      	b.n	23fde5c <_strtod_l+0xa64>
 23fdea0:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 23fdea4:	e7f9      	b.n	23fde9a <_strtod_l+0xaa2>
 23fdea6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 23fdeaa:	9b04      	ldr	r3, [sp, #16]
 23fdeac:	2b00      	cmp	r3, #0
 23fdeae:	d1a8      	bne.n	23fde02 <_strtod_l+0xa0a>
 23fdeb0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23fdeb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23fdeb6:	0d1b      	lsrs	r3, r3, #20
 23fdeb8:	051b      	lsls	r3, r3, #20
 23fdeba:	429a      	cmp	r2, r3
 23fdebc:	d1a1      	bne.n	23fde02 <_strtod_l+0xa0a>
 23fdebe:	4640      	mov	r0, r8
 23fdec0:	4649      	mov	r1, r9
 23fdec2:	f7f8 fe1f 	bl	23f6b04 <__aeabi_d2lz>
 23fdec6:	f7f8 f8f1 	bl	23f60ac <__aeabi_l2d>
 23fdeca:	4602      	mov	r2, r0
 23fdecc:	460b      	mov	r3, r1
 23fdece:	4640      	mov	r0, r8
 23fded0:	4649      	mov	r1, r9
 23fded2:	f7f7 ff61 	bl	23f5d98 <__aeabi_dsub>
 23fded6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fdeda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fdedc:	4680      	mov	r8, r0
 23fdede:	ea43 030a 	orr.w	r3, r3, sl
 23fdee2:	4689      	mov	r9, r1
 23fdee4:	4313      	orrs	r3, r2
 23fdee6:	d055      	beq.n	23fdf94 <_strtod_l+0xb9c>
 23fdee8:	a335      	add	r3, pc, #212	; (adr r3, 23fdfc0 <_strtod_l+0xbc8>)
 23fdeea:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fdeee:	f7f8 fb7d 	bl	23f65ec <__aeabi_dcmplt>
 23fdef2:	2800      	cmp	r0, #0
 23fdef4:	f47f acd3 	bne.w	23fd89e <_strtod_l+0x4a6>
 23fdef8:	4640      	mov	r0, r8
 23fdefa:	4649      	mov	r1, r9
 23fdefc:	a332      	add	r3, pc, #200	; (adr r3, 23fdfc8 <_strtod_l+0xbd0>)
 23fdefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fdf02:	f7f8 fb91 	bl	23f6628 <__aeabi_dcmpgt>
 23fdf06:	2800      	cmp	r0, #0
 23fdf08:	f43f af7b 	beq.w	23fde02 <_strtod_l+0xa0a>
 23fdf0c:	e4c7      	b.n	23fd89e <_strtod_l+0x4a6>
 23fdf0e:	9b04      	ldr	r3, [sp, #16]
 23fdf10:	b333      	cbz	r3, 23fdf60 <_strtod_l+0xb68>
 23fdf12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23fdf14:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 23fdf18:	d822      	bhi.n	23fdf60 <_strtod_l+0xb68>
 23fdf1a:	4640      	mov	r0, r8
 23fdf1c:	4649      	mov	r1, r9
 23fdf1e:	a32c      	add	r3, pc, #176	; (adr r3, 23fdfd0 <_strtod_l+0xbd8>)
 23fdf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fdf24:	f7f8 fb6c 	bl	23f6600 <__aeabi_dcmple>
 23fdf28:	b1a0      	cbz	r0, 23fdf54 <_strtod_l+0xb5c>
 23fdf2a:	4649      	mov	r1, r9
 23fdf2c:	4640      	mov	r0, r8
 23fdf2e:	f7f8 fb85 	bl	23f663c <__aeabi_d2uiz>
 23fdf32:	2801      	cmp	r0, #1
 23fdf34:	bf38      	it	cc
 23fdf36:	2001      	movcc	r0, #1
 23fdf38:	f7f8 f86c 	bl	23f6014 <__aeabi_ui2d>
 23fdf3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fdf3e:	4680      	mov	r8, r0
 23fdf40:	4689      	mov	r9, r1
 23fdf42:	bb23      	cbnz	r3, 23fdf8e <_strtod_l+0xb96>
 23fdf44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fdf48:	9010      	str	r0, [sp, #64]	; 0x40
 23fdf4a:	9311      	str	r3, [sp, #68]	; 0x44
 23fdf4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 23fdf50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fdf54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fdf56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23fdf58:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 23fdf5c:	1a9b      	subs	r3, r3, r2
 23fdf5e:	9309      	str	r3, [sp, #36]	; 0x24
 23fdf60:	eeb0 0a48 	vmov.f32	s0, s16
 23fdf64:	eef0 0a68 	vmov.f32	s1, s17
 23fdf68:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fdf6c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 23fdf70:	f001 f846 	bl	23ff000 <__ulp>
 23fdf74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fdf78:	ec53 2b10 	vmov	r2, r3, d0
 23fdf7c:	f7f8 f8c4 	bl	23f6108 <__aeabi_dmul>
 23fdf80:	ec53 2b18 	vmov	r2, r3, d8
 23fdf84:	f7f7 ff0a 	bl	23f5d9c <__adddf3>
 23fdf88:	4682      	mov	sl, r0
 23fdf8a:	468b      	mov	fp, r1
 23fdf8c:	e78d      	b.n	23fdeaa <_strtod_l+0xab2>
 23fdf8e:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 23fdf92:	e7db      	b.n	23fdf4c <_strtod_l+0xb54>
 23fdf94:	a310      	add	r3, pc, #64	; (adr r3, 23fdfd8 <_strtod_l+0xbe0>)
 23fdf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fdf9a:	f7f8 fb27 	bl	23f65ec <__aeabi_dcmplt>
 23fdf9e:	e7b2      	b.n	23fdf06 <_strtod_l+0xb0e>
 23fdfa0:	2300      	movs	r3, #0
 23fdfa2:	930a      	str	r3, [sp, #40]	; 0x28
 23fdfa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fdfa6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 23fdfa8:	6013      	str	r3, [r2, #0]
 23fdfaa:	f7ff ba6d 	b.w	23fd488 <_strtod_l+0x90>
 23fdfae:	2a65      	cmp	r2, #101	; 0x65
 23fdfb0:	f43f ab61 	beq.w	23fd676 <_strtod_l+0x27e>
 23fdfb4:	2a45      	cmp	r2, #69	; 0x45
 23fdfb6:	f43f ab5e 	beq.w	23fd676 <_strtod_l+0x27e>
 23fdfba:	2301      	movs	r3, #1
 23fdfbc:	f7ff bb96 	b.w	23fd6ec <_strtod_l+0x2f4>
 23fdfc0:	94a03595 	.word	0x94a03595
 23fdfc4:	3fdfffff 	.word	0x3fdfffff
 23fdfc8:	35afe535 	.word	0x35afe535
 23fdfcc:	3fe00000 	.word	0x3fe00000
 23fdfd0:	ffc00000 	.word	0xffc00000
 23fdfd4:	41dfffff 	.word	0x41dfffff
 23fdfd8:	94a03595 	.word	0x94a03595
 23fdfdc:	3fcfffff 	.word	0x3fcfffff
 23fdfe0:	3ff00000 	.word	0x3ff00000
 23fdfe4:	7ff00000 	.word	0x7ff00000
 23fdfe8:	7fe00000 	.word	0x7fe00000
 23fdfec:	7c9fffff 	.word	0x7c9fffff
 23fdff0:	3fe00000 	.word	0x3fe00000
 23fdff4:	bff00000 	.word	0xbff00000
 23fdff8:	7fefffff 	.word	0x7fefffff

023fdffc <strtod>:
 23fdffc:	460a      	mov	r2, r1
 23fdffe:	4601      	mov	r1, r0
 23fe000:	4802      	ldr	r0, [pc, #8]	; (23fe00c <strtod+0x10>)
 23fe002:	4b03      	ldr	r3, [pc, #12]	; (23fe010 <strtod+0x14>)
 23fe004:	6800      	ldr	r0, [r0, #0]
 23fe006:	f7ff b9f7 	b.w	23fd3f8 <_strtod_l>
 23fe00a:	bf00      	nop
 23fe00c:	1007aae8 	.word	0x1007aae8
 23fe010:	1007ab54 	.word	0x1007ab54

023fe014 <_strtol_l.constprop.0>:
 23fe014:	2b01      	cmp	r3, #1
 23fe016:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe01a:	d001      	beq.n	23fe020 <_strtol_l.constprop.0+0xc>
 23fe01c:	2b24      	cmp	r3, #36	; 0x24
 23fe01e:	d906      	bls.n	23fe02e <_strtol_l.constprop.0+0x1a>
 23fe020:	f7fb ff9c 	bl	23f9f5c <__errno>
 23fe024:	2316      	movs	r3, #22
 23fe026:	6003      	str	r3, [r0, #0]
 23fe028:	2000      	movs	r0, #0
 23fe02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fe02e:	460d      	mov	r5, r1
 23fe030:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23fe114 <_strtol_l.constprop.0+0x100>
 23fe034:	462e      	mov	r6, r5
 23fe036:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fe03a:	f814 700c 	ldrb.w	r7, [r4, ip]
 23fe03e:	f017 0708 	ands.w	r7, r7, #8
 23fe042:	d1f7      	bne.n	23fe034 <_strtol_l.constprop.0+0x20>
 23fe044:	2c2d      	cmp	r4, #45	; 0x2d
 23fe046:	d132      	bne.n	23fe0ae <_strtol_l.constprop.0+0x9a>
 23fe048:	782c      	ldrb	r4, [r5, #0]
 23fe04a:	2701      	movs	r7, #1
 23fe04c:	1cb5      	adds	r5, r6, #2
 23fe04e:	2b00      	cmp	r3, #0
 23fe050:	d05b      	beq.n	23fe10a <_strtol_l.constprop.0+0xf6>
 23fe052:	2b10      	cmp	r3, #16
 23fe054:	d109      	bne.n	23fe06a <_strtol_l.constprop.0+0x56>
 23fe056:	2c30      	cmp	r4, #48	; 0x30
 23fe058:	d107      	bne.n	23fe06a <_strtol_l.constprop.0+0x56>
 23fe05a:	782c      	ldrb	r4, [r5, #0]
 23fe05c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23fe060:	2c58      	cmp	r4, #88	; 0x58
 23fe062:	d14d      	bne.n	23fe100 <_strtol_l.constprop.0+0xec>
 23fe064:	786c      	ldrb	r4, [r5, #1]
 23fe066:	2310      	movs	r3, #16
 23fe068:	3502      	adds	r5, #2
 23fe06a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23fe06e:	f04f 0c00 	mov.w	ip, #0
 23fe072:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fe076:	4666      	mov	r6, ip
 23fe078:	fbb8 f9f3 	udiv	r9, r8, r3
 23fe07c:	fb03 8a19 	mls	sl, r3, r9, r8
 23fe080:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23fe084:	f1be 0f09 	cmp.w	lr, #9
 23fe088:	d816      	bhi.n	23fe0b8 <_strtol_l.constprop.0+0xa4>
 23fe08a:	4674      	mov	r4, lr
 23fe08c:	42a3      	cmp	r3, r4
 23fe08e:	dd24      	ble.n	23fe0da <_strtol_l.constprop.0+0xc6>
 23fe090:	f1bc 0f00 	cmp.w	ip, #0
 23fe094:	db1e      	blt.n	23fe0d4 <_strtol_l.constprop.0+0xc0>
 23fe096:	45b1      	cmp	r9, r6
 23fe098:	d31c      	bcc.n	23fe0d4 <_strtol_l.constprop.0+0xc0>
 23fe09a:	d101      	bne.n	23fe0a0 <_strtol_l.constprop.0+0x8c>
 23fe09c:	45a2      	cmp	sl, r4
 23fe09e:	db19      	blt.n	23fe0d4 <_strtol_l.constprop.0+0xc0>
 23fe0a0:	fb06 4603 	mla	r6, r6, r3, r4
 23fe0a4:	f04f 0c01 	mov.w	ip, #1
 23fe0a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fe0ac:	e7e8      	b.n	23fe080 <_strtol_l.constprop.0+0x6c>
 23fe0ae:	2c2b      	cmp	r4, #43	; 0x2b
 23fe0b0:	bf04      	itt	eq
 23fe0b2:	782c      	ldrbeq	r4, [r5, #0]
 23fe0b4:	1cb5      	addeq	r5, r6, #2
 23fe0b6:	e7ca      	b.n	23fe04e <_strtol_l.constprop.0+0x3a>
 23fe0b8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23fe0bc:	f1be 0f19 	cmp.w	lr, #25
 23fe0c0:	d801      	bhi.n	23fe0c6 <_strtol_l.constprop.0+0xb2>
 23fe0c2:	3c37      	subs	r4, #55	; 0x37
 23fe0c4:	e7e2      	b.n	23fe08c <_strtol_l.constprop.0+0x78>
 23fe0c6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23fe0ca:	f1be 0f19 	cmp.w	lr, #25
 23fe0ce:	d804      	bhi.n	23fe0da <_strtol_l.constprop.0+0xc6>
 23fe0d0:	3c57      	subs	r4, #87	; 0x57
 23fe0d2:	e7db      	b.n	23fe08c <_strtol_l.constprop.0+0x78>
 23fe0d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fe0d8:	e7e6      	b.n	23fe0a8 <_strtol_l.constprop.0+0x94>
 23fe0da:	f1bc 0f00 	cmp.w	ip, #0
 23fe0de:	da05      	bge.n	23fe0ec <_strtol_l.constprop.0+0xd8>
 23fe0e0:	2322      	movs	r3, #34	; 0x22
 23fe0e2:	4646      	mov	r6, r8
 23fe0e4:	6003      	str	r3, [r0, #0]
 23fe0e6:	b942      	cbnz	r2, 23fe0fa <_strtol_l.constprop.0+0xe6>
 23fe0e8:	4630      	mov	r0, r6
 23fe0ea:	e79e      	b.n	23fe02a <_strtol_l.constprop.0+0x16>
 23fe0ec:	b107      	cbz	r7, 23fe0f0 <_strtol_l.constprop.0+0xdc>
 23fe0ee:	4276      	negs	r6, r6
 23fe0f0:	2a00      	cmp	r2, #0
 23fe0f2:	d0f9      	beq.n	23fe0e8 <_strtol_l.constprop.0+0xd4>
 23fe0f4:	f1bc 0f00 	cmp.w	ip, #0
 23fe0f8:	d000      	beq.n	23fe0fc <_strtol_l.constprop.0+0xe8>
 23fe0fa:	1e69      	subs	r1, r5, #1
 23fe0fc:	6011      	str	r1, [r2, #0]
 23fe0fe:	e7f3      	b.n	23fe0e8 <_strtol_l.constprop.0+0xd4>
 23fe100:	2430      	movs	r4, #48	; 0x30
 23fe102:	2b00      	cmp	r3, #0
 23fe104:	d1b1      	bne.n	23fe06a <_strtol_l.constprop.0+0x56>
 23fe106:	2308      	movs	r3, #8
 23fe108:	e7af      	b.n	23fe06a <_strtol_l.constprop.0+0x56>
 23fe10a:	2c30      	cmp	r4, #48	; 0x30
 23fe10c:	d0a5      	beq.n	23fe05a <_strtol_l.constprop.0+0x46>
 23fe10e:	230a      	movs	r3, #10
 23fe110:	e7ab      	b.n	23fe06a <_strtol_l.constprop.0+0x56>
 23fe112:	bf00      	nop
 23fe114:	023ffce1 	.word	0x023ffce1

023fe118 <strtol>:
 23fe118:	4613      	mov	r3, r2
 23fe11a:	460a      	mov	r2, r1
 23fe11c:	4601      	mov	r1, r0
 23fe11e:	4802      	ldr	r0, [pc, #8]	; (23fe128 <strtol+0x10>)
 23fe120:	6800      	ldr	r0, [r0, #0]
 23fe122:	f7ff bf77 	b.w	23fe014 <_strtol_l.constprop.0>
 23fe126:	bf00      	nop
 23fe128:	1007aae8 	.word	0x1007aae8

023fe12c <tolower>:
 23fe12c:	4b03      	ldr	r3, [pc, #12]	; (23fe13c <tolower+0x10>)
 23fe12e:	5cc3      	ldrb	r3, [r0, r3]
 23fe130:	f003 0303 	and.w	r3, r3, #3
 23fe134:	2b01      	cmp	r3, #1
 23fe136:	bf08      	it	eq
 23fe138:	3020      	addeq	r0, #32
 23fe13a:	4770      	bx	lr
 23fe13c:	023ffce1 	.word	0x023ffce1

023fe140 <__register_exitproc>:
 23fe140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fe144:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fe204 <__register_exitproc+0xc4>
 23fe148:	4606      	mov	r6, r0
 23fe14a:	461f      	mov	r7, r3
 23fe14c:	460d      	mov	r5, r1
 23fe14e:	f8d8 0000 	ldr.w	r0, [r8]
 23fe152:	4691      	mov	r9, r2
 23fe154:	f000 fbc6 	bl	23fe8e4 <__retarget_lock_acquire_recursive>
 23fe158:	4b26      	ldr	r3, [pc, #152]	; (23fe1f4 <__register_exitproc+0xb4>)
 23fe15a:	681c      	ldr	r4, [r3, #0]
 23fe15c:	b934      	cbnz	r4, 23fe16c <__register_exitproc+0x2c>
 23fe15e:	4c26      	ldr	r4, [pc, #152]	; (23fe1f8 <__register_exitproc+0xb8>)
 23fe160:	601c      	str	r4, [r3, #0]
 23fe162:	4b26      	ldr	r3, [pc, #152]	; (23fe1fc <__register_exitproc+0xbc>)
 23fe164:	b113      	cbz	r3, 23fe16c <__register_exitproc+0x2c>
 23fe166:	681b      	ldr	r3, [r3, #0]
 23fe168:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fe16c:	6863      	ldr	r3, [r4, #4]
 23fe16e:	2b1f      	cmp	r3, #31
 23fe170:	dd07      	ble.n	23fe182 <__register_exitproc+0x42>
 23fe172:	f8d8 0000 	ldr.w	r0, [r8]
 23fe176:	f000 fbb7 	bl	23fe8e8 <__retarget_lock_release_recursive>
 23fe17a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fe182:	b35e      	cbz	r6, 23fe1dc <__register_exitproc+0x9c>
 23fe184:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fe188:	b988      	cbnz	r0, 23fe1ae <__register_exitproc+0x6e>
 23fe18a:	4b1d      	ldr	r3, [pc, #116]	; (23fe200 <__register_exitproc+0xc0>)
 23fe18c:	b923      	cbnz	r3, 23fe198 <__register_exitproc+0x58>
 23fe18e:	f8d8 0000 	ldr.w	r0, [r8]
 23fe192:	f000 fba8 	bl	23fe8e6 <__retarget_lock_release>
 23fe196:	e7f0      	b.n	23fe17a <__register_exitproc+0x3a>
 23fe198:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fe19c:	f7fb fe6e 	bl	23f9e7c <malloc>
 23fe1a0:	2800      	cmp	r0, #0
 23fe1a2:	d0f4      	beq.n	23fe18e <__register_exitproc+0x4e>
 23fe1a4:	2300      	movs	r3, #0
 23fe1a6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fe1aa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fe1ae:	6863      	ldr	r3, [r4, #4]
 23fe1b0:	2201      	movs	r2, #1
 23fe1b2:	2e02      	cmp	r6, #2
 23fe1b4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23fe1b8:	fa02 f203 	lsl.w	r2, r2, r3
 23fe1bc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fe1c0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fe1c4:	ea43 0302 	orr.w	r3, r3, r2
 23fe1c8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23fe1cc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fe1d0:	bf02      	ittt	eq
 23fe1d2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fe1d6:	4313      	orreq	r3, r2
 23fe1d8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fe1dc:	6863      	ldr	r3, [r4, #4]
 23fe1de:	f8d8 0000 	ldr.w	r0, [r8]
 23fe1e2:	1c5a      	adds	r2, r3, #1
 23fe1e4:	3302      	adds	r3, #2
 23fe1e6:	6062      	str	r2, [r4, #4]
 23fe1e8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fe1ec:	f000 fb7c 	bl	23fe8e8 <__retarget_lock_release_recursive>
 23fe1f0:	2000      	movs	r0, #0
 23fe1f2:	e7c4      	b.n	23fe17e <__register_exitproc+0x3e>
 23fe1f4:	1007afe4 	.word	0x1007afe4
 23fe1f8:	1007af58 	.word	0x1007af58
 23fe1fc:	00000000 	.word	0x00000000
 23fe200:	023f9e7d 	.word	0x023f9e7d
 23fe204:	1007ab4c 	.word	0x1007ab4c

023fe208 <rshift>:
 23fe208:	6903      	ldr	r3, [r0, #16]
 23fe20a:	114a      	asrs	r2, r1, #5
 23fe20c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 23fe210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe214:	f100 0414 	add.w	r4, r0, #20
 23fe218:	dd45      	ble.n	23fe2a6 <rshift+0x9e>
 23fe21a:	f011 011f 	ands.w	r1, r1, #31
 23fe21e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 23fe222:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 23fe226:	d10c      	bne.n	23fe242 <rshift+0x3a>
 23fe228:	f100 0710 	add.w	r7, r0, #16
 23fe22c:	4629      	mov	r1, r5
 23fe22e:	42b1      	cmp	r1, r6
 23fe230:	d334      	bcc.n	23fe29c <rshift+0x94>
 23fe232:	1a9b      	subs	r3, r3, r2
 23fe234:	1eea      	subs	r2, r5, #3
 23fe236:	009b      	lsls	r3, r3, #2
 23fe238:	4296      	cmp	r6, r2
 23fe23a:	bf38      	it	cc
 23fe23c:	2300      	movcc	r3, #0
 23fe23e:	4423      	add	r3, r4
 23fe240:	e015      	b.n	23fe26e <rshift+0x66>
 23fe242:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 23fe246:	f1c1 0820 	rsb	r8, r1, #32
 23fe24a:	f105 0e04 	add.w	lr, r5, #4
 23fe24e:	46a1      	mov	r9, r4
 23fe250:	40cf      	lsrs	r7, r1
 23fe252:	4576      	cmp	r6, lr
 23fe254:	46f4      	mov	ip, lr
 23fe256:	d815      	bhi.n	23fe284 <rshift+0x7c>
 23fe258:	1a9a      	subs	r2, r3, r2
 23fe25a:	3501      	adds	r5, #1
 23fe25c:	0092      	lsls	r2, r2, #2
 23fe25e:	3a04      	subs	r2, #4
 23fe260:	42ae      	cmp	r6, r5
 23fe262:	bf38      	it	cc
 23fe264:	2200      	movcc	r2, #0
 23fe266:	18a3      	adds	r3, r4, r2
 23fe268:	50a7      	str	r7, [r4, r2]
 23fe26a:	b107      	cbz	r7, 23fe26e <rshift+0x66>
 23fe26c:	3304      	adds	r3, #4
 23fe26e:	1b1a      	subs	r2, r3, r4
 23fe270:	42a3      	cmp	r3, r4
 23fe272:	ea4f 02a2 	mov.w	r2, r2, asr #2
 23fe276:	bf08      	it	eq
 23fe278:	2300      	moveq	r3, #0
 23fe27a:	6102      	str	r2, [r0, #16]
 23fe27c:	bf08      	it	eq
 23fe27e:	6143      	streq	r3, [r0, #20]
 23fe280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fe284:	f8dc c000 	ldr.w	ip, [ip]
 23fe288:	fa0c fc08 	lsl.w	ip, ip, r8
 23fe28c:	ea4c 0707 	orr.w	r7, ip, r7
 23fe290:	f849 7b04 	str.w	r7, [r9], #4
 23fe294:	f85e 7b04 	ldr.w	r7, [lr], #4
 23fe298:	40cf      	lsrs	r7, r1
 23fe29a:	e7da      	b.n	23fe252 <rshift+0x4a>
 23fe29c:	f851 cb04 	ldr.w	ip, [r1], #4
 23fe2a0:	f847 cf04 	str.w	ip, [r7, #4]!
 23fe2a4:	e7c3      	b.n	23fe22e <rshift+0x26>
 23fe2a6:	4623      	mov	r3, r4
 23fe2a8:	e7e1      	b.n	23fe26e <rshift+0x66>

023fe2aa <__hexdig_fun>:
 23fe2aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fe2ae:	2b09      	cmp	r3, #9
 23fe2b0:	d802      	bhi.n	23fe2b8 <__hexdig_fun+0xe>
 23fe2b2:	3820      	subs	r0, #32
 23fe2b4:	b2c0      	uxtb	r0, r0
 23fe2b6:	4770      	bx	lr
 23fe2b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 23fe2bc:	2b05      	cmp	r3, #5
 23fe2be:	d801      	bhi.n	23fe2c4 <__hexdig_fun+0x1a>
 23fe2c0:	3847      	subs	r0, #71	; 0x47
 23fe2c2:	e7f7      	b.n	23fe2b4 <__hexdig_fun+0xa>
 23fe2c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 23fe2c8:	2b05      	cmp	r3, #5
 23fe2ca:	d801      	bhi.n	23fe2d0 <__hexdig_fun+0x26>
 23fe2cc:	3827      	subs	r0, #39	; 0x27
 23fe2ce:	e7f1      	b.n	23fe2b4 <__hexdig_fun+0xa>
 23fe2d0:	2000      	movs	r0, #0
 23fe2d2:	4770      	bx	lr

023fe2d4 <__gethex>:
 23fe2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe2d8:	ed2d 8b02 	vpush	{d8}
 23fe2dc:	b089      	sub	sp, #36	; 0x24
 23fe2de:	ee08 0a10 	vmov	s16, r0
 23fe2e2:	468b      	mov	fp, r1
 23fe2e4:	4690      	mov	r8, r2
 23fe2e6:	9304      	str	r3, [sp, #16]
 23fe2e8:	4bb2      	ldr	r3, [pc, #712]	; (23fe5b4 <__gethex+0x2e0>)
 23fe2ea:	681b      	ldr	r3, [r3, #0]
 23fe2ec:	4618      	mov	r0, r3
 23fe2ee:	9301      	str	r3, [sp, #4]
 23fe2f0:	f7f8 fc00 	bl	23f6af4 <strlen>
 23fe2f4:	9b01      	ldr	r3, [sp, #4]
 23fe2f6:	f8db 2000 	ldr.w	r2, [fp]
 23fe2fa:	4682      	mov	sl, r0
 23fe2fc:	4403      	add	r3, r0
 23fe2fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 23fe302:	9305      	str	r3, [sp, #20]
 23fe304:	1c93      	adds	r3, r2, #2
 23fe306:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 23fe30a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 23fe30e:	32fe      	adds	r2, #254	; 0xfe
 23fe310:	18d1      	adds	r1, r2, r3
 23fe312:	461f      	mov	r7, r3
 23fe314:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fe318:	9100      	str	r1, [sp, #0]
 23fe31a:	2830      	cmp	r0, #48	; 0x30
 23fe31c:	d0f8      	beq.n	23fe310 <__gethex+0x3c>
 23fe31e:	f7ff ffc4 	bl	23fe2aa <__hexdig_fun>
 23fe322:	4604      	mov	r4, r0
 23fe324:	2800      	cmp	r0, #0
 23fe326:	d139      	bne.n	23fe39c <__gethex+0xc8>
 23fe328:	4652      	mov	r2, sl
 23fe32a:	9901      	ldr	r1, [sp, #4]
 23fe32c:	4638      	mov	r0, r7
 23fe32e:	f7ff f80c 	bl	23fd34a <strncmp>
 23fe332:	4605      	mov	r5, r0
 23fe334:	2800      	cmp	r0, #0
 23fe336:	d167      	bne.n	23fe408 <__gethex+0x134>
 23fe338:	f817 000a 	ldrb.w	r0, [r7, sl]
 23fe33c:	eb07 060a 	add.w	r6, r7, sl
 23fe340:	f7ff ffb3 	bl	23fe2aa <__hexdig_fun>
 23fe344:	2800      	cmp	r0, #0
 23fe346:	d061      	beq.n	23fe40c <__gethex+0x138>
 23fe348:	4633      	mov	r3, r6
 23fe34a:	7818      	ldrb	r0, [r3, #0]
 23fe34c:	461f      	mov	r7, r3
 23fe34e:	3301      	adds	r3, #1
 23fe350:	2830      	cmp	r0, #48	; 0x30
 23fe352:	d0fa      	beq.n	23fe34a <__gethex+0x76>
 23fe354:	f7ff ffa9 	bl	23fe2aa <__hexdig_fun>
 23fe358:	fab0 f480 	clz	r4, r0
 23fe35c:	2301      	movs	r3, #1
 23fe35e:	4635      	mov	r5, r6
 23fe360:	0964      	lsrs	r4, r4, #5
 23fe362:	9300      	str	r3, [sp, #0]
 23fe364:	463a      	mov	r2, r7
 23fe366:	4616      	mov	r6, r2
 23fe368:	3201      	adds	r2, #1
 23fe36a:	7830      	ldrb	r0, [r6, #0]
 23fe36c:	f7ff ff9d 	bl	23fe2aa <__hexdig_fun>
 23fe370:	2800      	cmp	r0, #0
 23fe372:	d1f8      	bne.n	23fe366 <__gethex+0x92>
 23fe374:	4652      	mov	r2, sl
 23fe376:	9901      	ldr	r1, [sp, #4]
 23fe378:	4630      	mov	r0, r6
 23fe37a:	f7fe ffe6 	bl	23fd34a <strncmp>
 23fe37e:	b980      	cbnz	r0, 23fe3a2 <__gethex+0xce>
 23fe380:	b94d      	cbnz	r5, 23fe396 <__gethex+0xc2>
 23fe382:	eb06 050a 	add.w	r5, r6, sl
 23fe386:	462a      	mov	r2, r5
 23fe388:	4616      	mov	r6, r2
 23fe38a:	3201      	adds	r2, #1
 23fe38c:	7830      	ldrb	r0, [r6, #0]
 23fe38e:	f7ff ff8c 	bl	23fe2aa <__hexdig_fun>
 23fe392:	2800      	cmp	r0, #0
 23fe394:	d1f8      	bne.n	23fe388 <__gethex+0xb4>
 23fe396:	1bad      	subs	r5, r5, r6
 23fe398:	00ad      	lsls	r5, r5, #2
 23fe39a:	e004      	b.n	23fe3a6 <__gethex+0xd2>
 23fe39c:	2400      	movs	r4, #0
 23fe39e:	4625      	mov	r5, r4
 23fe3a0:	e7e0      	b.n	23fe364 <__gethex+0x90>
 23fe3a2:	2d00      	cmp	r5, #0
 23fe3a4:	d1f7      	bne.n	23fe396 <__gethex+0xc2>
 23fe3a6:	7833      	ldrb	r3, [r6, #0]
 23fe3a8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 23fe3ac:	2b50      	cmp	r3, #80	; 0x50
 23fe3ae:	d13b      	bne.n	23fe428 <__gethex+0x154>
 23fe3b0:	7873      	ldrb	r3, [r6, #1]
 23fe3b2:	2b2b      	cmp	r3, #43	; 0x2b
 23fe3b4:	d02c      	beq.n	23fe410 <__gethex+0x13c>
 23fe3b6:	2b2d      	cmp	r3, #45	; 0x2d
 23fe3b8:	d02e      	beq.n	23fe418 <__gethex+0x144>
 23fe3ba:	1c71      	adds	r1, r6, #1
 23fe3bc:	f04f 0900 	mov.w	r9, #0
 23fe3c0:	7808      	ldrb	r0, [r1, #0]
 23fe3c2:	f7ff ff72 	bl	23fe2aa <__hexdig_fun>
 23fe3c6:	1e43      	subs	r3, r0, #1
 23fe3c8:	b2db      	uxtb	r3, r3
 23fe3ca:	2b18      	cmp	r3, #24
 23fe3cc:	d82c      	bhi.n	23fe428 <__gethex+0x154>
 23fe3ce:	f1a0 0210 	sub.w	r2, r0, #16
 23fe3d2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 23fe3d6:	f7ff ff68 	bl	23fe2aa <__hexdig_fun>
 23fe3da:	1e43      	subs	r3, r0, #1
 23fe3dc:	b2db      	uxtb	r3, r3
 23fe3de:	2b18      	cmp	r3, #24
 23fe3e0:	d91d      	bls.n	23fe41e <__gethex+0x14a>
 23fe3e2:	f1b9 0f00 	cmp.w	r9, #0
 23fe3e6:	d000      	beq.n	23fe3ea <__gethex+0x116>
 23fe3e8:	4252      	negs	r2, r2
 23fe3ea:	4415      	add	r5, r2
 23fe3ec:	f8cb 1000 	str.w	r1, [fp]
 23fe3f0:	b1e4      	cbz	r4, 23fe42c <__gethex+0x158>
 23fe3f2:	9b00      	ldr	r3, [sp, #0]
 23fe3f4:	2b00      	cmp	r3, #0
 23fe3f6:	bf14      	ite	ne
 23fe3f8:	2700      	movne	r7, #0
 23fe3fa:	2706      	moveq	r7, #6
 23fe3fc:	4638      	mov	r0, r7
 23fe3fe:	b009      	add	sp, #36	; 0x24
 23fe400:	ecbd 8b02 	vpop	{d8}
 23fe404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fe408:	463e      	mov	r6, r7
 23fe40a:	4625      	mov	r5, r4
 23fe40c:	2401      	movs	r4, #1
 23fe40e:	e7ca      	b.n	23fe3a6 <__gethex+0xd2>
 23fe410:	f04f 0900 	mov.w	r9, #0
 23fe414:	1cb1      	adds	r1, r6, #2
 23fe416:	e7d3      	b.n	23fe3c0 <__gethex+0xec>
 23fe418:	f04f 0901 	mov.w	r9, #1
 23fe41c:	e7fa      	b.n	23fe414 <__gethex+0x140>
 23fe41e:	230a      	movs	r3, #10
 23fe420:	fb03 0202 	mla	r2, r3, r2, r0
 23fe424:	3a10      	subs	r2, #16
 23fe426:	e7d4      	b.n	23fe3d2 <__gethex+0xfe>
 23fe428:	4631      	mov	r1, r6
 23fe42a:	e7df      	b.n	23fe3ec <__gethex+0x118>
 23fe42c:	1bf3      	subs	r3, r6, r7
 23fe42e:	4621      	mov	r1, r4
 23fe430:	3b01      	subs	r3, #1
 23fe432:	2b07      	cmp	r3, #7
 23fe434:	dc0b      	bgt.n	23fe44e <__gethex+0x17a>
 23fe436:	ee18 0a10 	vmov	r0, s16
 23fe43a:	f000 fa69 	bl	23fe910 <_Balloc>
 23fe43e:	4604      	mov	r4, r0
 23fe440:	b940      	cbnz	r0, 23fe454 <__gethex+0x180>
 23fe442:	4b5d      	ldr	r3, [pc, #372]	; (23fe5b8 <__gethex+0x2e4>)
 23fe444:	4602      	mov	r2, r0
 23fe446:	21de      	movs	r1, #222	; 0xde
 23fe448:	485c      	ldr	r0, [pc, #368]	; (23fe5bc <__gethex+0x2e8>)
 23fe44a:	f7fb fd95 	bl	23f9f78 <__assert_func>
 23fe44e:	3101      	adds	r1, #1
 23fe450:	105b      	asrs	r3, r3, #1
 23fe452:	e7ee      	b.n	23fe432 <__gethex+0x15e>
 23fe454:	f100 0914 	add.w	r9, r0, #20
 23fe458:	f04f 0b00 	mov.w	fp, #0
 23fe45c:	f1ca 0301 	rsb	r3, sl, #1
 23fe460:	f8cd 9008 	str.w	r9, [sp, #8]
 23fe464:	f8cd b000 	str.w	fp, [sp]
 23fe468:	9306      	str	r3, [sp, #24]
 23fe46a:	42b7      	cmp	r7, r6
 23fe46c:	d340      	bcc.n	23fe4f0 <__gethex+0x21c>
 23fe46e:	9802      	ldr	r0, [sp, #8]
 23fe470:	9b00      	ldr	r3, [sp, #0]
 23fe472:	f840 3b04 	str.w	r3, [r0], #4
 23fe476:	eba0 0009 	sub.w	r0, r0, r9
 23fe47a:	1080      	asrs	r0, r0, #2
 23fe47c:	0146      	lsls	r6, r0, #5
 23fe47e:	6120      	str	r0, [r4, #16]
 23fe480:	4618      	mov	r0, r3
 23fe482:	f000 fb39 	bl	23feaf8 <__hi0bits>
 23fe486:	1a30      	subs	r0, r6, r0
 23fe488:	f8d8 6000 	ldr.w	r6, [r8]
 23fe48c:	42b0      	cmp	r0, r6
 23fe48e:	dd63      	ble.n	23fe558 <__gethex+0x284>
 23fe490:	1b87      	subs	r7, r0, r6
 23fe492:	4620      	mov	r0, r4
 23fe494:	4639      	mov	r1, r7
 23fe496:	f000 fedf 	bl	23ff258 <__any_on>
 23fe49a:	4682      	mov	sl, r0
 23fe49c:	b1a8      	cbz	r0, 23fe4ca <__gethex+0x1f6>
 23fe49e:	1e7b      	subs	r3, r7, #1
 23fe4a0:	f04f 0a01 	mov.w	sl, #1
 23fe4a4:	1159      	asrs	r1, r3, #5
 23fe4a6:	f003 021f 	and.w	r2, r3, #31
 23fe4aa:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 23fe4ae:	fa0a f202 	lsl.w	r2, sl, r2
 23fe4b2:	420a      	tst	r2, r1
 23fe4b4:	d009      	beq.n	23fe4ca <__gethex+0x1f6>
 23fe4b6:	4553      	cmp	r3, sl
 23fe4b8:	dd05      	ble.n	23fe4c6 <__gethex+0x1f2>
 23fe4ba:	1eb9      	subs	r1, r7, #2
 23fe4bc:	4620      	mov	r0, r4
 23fe4be:	f000 fecb 	bl	23ff258 <__any_on>
 23fe4c2:	2800      	cmp	r0, #0
 23fe4c4:	d145      	bne.n	23fe552 <__gethex+0x27e>
 23fe4c6:	f04f 0a02 	mov.w	sl, #2
 23fe4ca:	443d      	add	r5, r7
 23fe4cc:	4639      	mov	r1, r7
 23fe4ce:	4620      	mov	r0, r4
 23fe4d0:	f7ff fe9a 	bl	23fe208 <rshift>
 23fe4d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 23fe4d8:	42ab      	cmp	r3, r5
 23fe4da:	da4c      	bge.n	23fe576 <__gethex+0x2a2>
 23fe4dc:	4621      	mov	r1, r4
 23fe4de:	ee18 0a10 	vmov	r0, s16
 23fe4e2:	f000 fa55 	bl	23fe990 <_Bfree>
 23fe4e6:	2300      	movs	r3, #0
 23fe4e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 23fe4ea:	27a3      	movs	r7, #163	; 0xa3
 23fe4ec:	6013      	str	r3, [r2, #0]
 23fe4ee:	e785      	b.n	23fe3fc <__gethex+0x128>
 23fe4f0:	1e73      	subs	r3, r6, #1
 23fe4f2:	9a05      	ldr	r2, [sp, #20]
 23fe4f4:	9303      	str	r3, [sp, #12]
 23fe4f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 23fe4fa:	4293      	cmp	r3, r2
 23fe4fc:	d019      	beq.n	23fe532 <__gethex+0x25e>
 23fe4fe:	f1bb 0f20 	cmp.w	fp, #32
 23fe502:	d107      	bne.n	23fe514 <__gethex+0x240>
 23fe504:	9b02      	ldr	r3, [sp, #8]
 23fe506:	9a00      	ldr	r2, [sp, #0]
 23fe508:	f843 2b04 	str.w	r2, [r3], #4
 23fe50c:	9302      	str	r3, [sp, #8]
 23fe50e:	2300      	movs	r3, #0
 23fe510:	469b      	mov	fp, r3
 23fe512:	9300      	str	r3, [sp, #0]
 23fe514:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 23fe518:	f7ff fec7 	bl	23fe2aa <__hexdig_fun>
 23fe51c:	f000 000f 	and.w	r0, r0, #15
 23fe520:	9b00      	ldr	r3, [sp, #0]
 23fe522:	fa00 f00b 	lsl.w	r0, r0, fp
 23fe526:	f10b 0b04 	add.w	fp, fp, #4
 23fe52a:	4303      	orrs	r3, r0
 23fe52c:	9300      	str	r3, [sp, #0]
 23fe52e:	9b03      	ldr	r3, [sp, #12]
 23fe530:	e00d      	b.n	23fe54e <__gethex+0x27a>
 23fe532:	9b03      	ldr	r3, [sp, #12]
 23fe534:	9a06      	ldr	r2, [sp, #24]
 23fe536:	4413      	add	r3, r2
 23fe538:	42bb      	cmp	r3, r7
 23fe53a:	d3e0      	bcc.n	23fe4fe <__gethex+0x22a>
 23fe53c:	4618      	mov	r0, r3
 23fe53e:	4652      	mov	r2, sl
 23fe540:	9901      	ldr	r1, [sp, #4]
 23fe542:	9307      	str	r3, [sp, #28]
 23fe544:	f7fe ff01 	bl	23fd34a <strncmp>
 23fe548:	9b07      	ldr	r3, [sp, #28]
 23fe54a:	2800      	cmp	r0, #0
 23fe54c:	d1d7      	bne.n	23fe4fe <__gethex+0x22a>
 23fe54e:	461e      	mov	r6, r3
 23fe550:	e78b      	b.n	23fe46a <__gethex+0x196>
 23fe552:	f04f 0a03 	mov.w	sl, #3
 23fe556:	e7b8      	b.n	23fe4ca <__gethex+0x1f6>
 23fe558:	da0a      	bge.n	23fe570 <__gethex+0x29c>
 23fe55a:	1a37      	subs	r7, r6, r0
 23fe55c:	4621      	mov	r1, r4
 23fe55e:	ee18 0a10 	vmov	r0, s16
 23fe562:	463a      	mov	r2, r7
 23fe564:	1bed      	subs	r5, r5, r7
 23fe566:	f000 fc2f 	bl	23fedc8 <__lshift>
 23fe56a:	4604      	mov	r4, r0
 23fe56c:	f100 0914 	add.w	r9, r0, #20
 23fe570:	f04f 0a00 	mov.w	sl, #0
 23fe574:	e7ae      	b.n	23fe4d4 <__gethex+0x200>
 23fe576:	f8d8 0004 	ldr.w	r0, [r8, #4]
 23fe57a:	42a8      	cmp	r0, r5
 23fe57c:	dd72      	ble.n	23fe664 <__gethex+0x390>
 23fe57e:	1b45      	subs	r5, r0, r5
 23fe580:	42ae      	cmp	r6, r5
 23fe582:	dc35      	bgt.n	23fe5f0 <__gethex+0x31c>
 23fe584:	f8d8 300c 	ldr.w	r3, [r8, #12]
 23fe588:	2b02      	cmp	r3, #2
 23fe58a:	d029      	beq.n	23fe5e0 <__gethex+0x30c>
 23fe58c:	2b03      	cmp	r3, #3
 23fe58e:	d02b      	beq.n	23fe5e8 <__gethex+0x314>
 23fe590:	2b01      	cmp	r3, #1
 23fe592:	d11b      	bne.n	23fe5cc <__gethex+0x2f8>
 23fe594:	42ae      	cmp	r6, r5
 23fe596:	d119      	bne.n	23fe5cc <__gethex+0x2f8>
 23fe598:	2e01      	cmp	r6, #1
 23fe59a:	d111      	bne.n	23fe5c0 <__gethex+0x2ec>
 23fe59c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23fe5a0:	2762      	movs	r7, #98	; 0x62
 23fe5a2:	9a04      	ldr	r2, [sp, #16]
 23fe5a4:	6013      	str	r3, [r2, #0]
 23fe5a6:	2301      	movs	r3, #1
 23fe5a8:	6123      	str	r3, [r4, #16]
 23fe5aa:	f8c9 3000 	str.w	r3, [r9]
 23fe5ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23fe5b0:	601c      	str	r4, [r3, #0]
 23fe5b2:	e723      	b.n	23fe3fc <__gethex+0x128>
 23fe5b4:	023ffe54 	.word	0x023ffe54
 23fe5b8:	023ffde1 	.word	0x023ffde1
 23fe5bc:	023ffdf2 	.word	0x023ffdf2
 23fe5c0:	1e71      	subs	r1, r6, #1
 23fe5c2:	4620      	mov	r0, r4
 23fe5c4:	f000 fe48 	bl	23ff258 <__any_on>
 23fe5c8:	2800      	cmp	r0, #0
 23fe5ca:	d1e7      	bne.n	23fe59c <__gethex+0x2c8>
 23fe5cc:	4621      	mov	r1, r4
 23fe5ce:	ee18 0a10 	vmov	r0, s16
 23fe5d2:	f000 f9dd 	bl	23fe990 <_Bfree>
 23fe5d6:	2300      	movs	r3, #0
 23fe5d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 23fe5da:	2750      	movs	r7, #80	; 0x50
 23fe5dc:	6013      	str	r3, [r2, #0]
 23fe5de:	e70d      	b.n	23fe3fc <__gethex+0x128>
 23fe5e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fe5e2:	2b00      	cmp	r3, #0
 23fe5e4:	d1f2      	bne.n	23fe5cc <__gethex+0x2f8>
 23fe5e6:	e7d9      	b.n	23fe59c <__gethex+0x2c8>
 23fe5e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fe5ea:	2b00      	cmp	r3, #0
 23fe5ec:	d1d6      	bne.n	23fe59c <__gethex+0x2c8>
 23fe5ee:	e7ed      	b.n	23fe5cc <__gethex+0x2f8>
 23fe5f0:	1e6f      	subs	r7, r5, #1
 23fe5f2:	f1ba 0f00 	cmp.w	sl, #0
 23fe5f6:	d132      	bne.n	23fe65e <__gethex+0x38a>
 23fe5f8:	b127      	cbz	r7, 23fe604 <__gethex+0x330>
 23fe5fa:	4639      	mov	r1, r7
 23fe5fc:	4620      	mov	r0, r4
 23fe5fe:	f000 fe2b 	bl	23ff258 <__any_on>
 23fe602:	4682      	mov	sl, r0
 23fe604:	117b      	asrs	r3, r7, #5
 23fe606:	2101      	movs	r1, #1
 23fe608:	f007 071f 	and.w	r7, r7, #31
 23fe60c:	4620      	mov	r0, r4
 23fe60e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 23fe612:	1b76      	subs	r6, r6, r5
 23fe614:	fa01 f707 	lsl.w	r7, r1, r7
 23fe618:	4629      	mov	r1, r5
 23fe61a:	421f      	tst	r7, r3
 23fe61c:	f04f 0702 	mov.w	r7, #2
 23fe620:	bf18      	it	ne
 23fe622:	f04a 0a02 	orrne.w	sl, sl, #2
 23fe626:	f7ff fdef 	bl	23fe208 <rshift>
 23fe62a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 23fe62e:	f1ba 0f00 	cmp.w	sl, #0
 23fe632:	d048      	beq.n	23fe6c6 <__gethex+0x3f2>
 23fe634:	f8d8 300c 	ldr.w	r3, [r8, #12]
 23fe638:	2b02      	cmp	r3, #2
 23fe63a:	d015      	beq.n	23fe668 <__gethex+0x394>
 23fe63c:	2b03      	cmp	r3, #3
 23fe63e:	d017      	beq.n	23fe670 <__gethex+0x39c>
 23fe640:	2b01      	cmp	r3, #1
 23fe642:	d109      	bne.n	23fe658 <__gethex+0x384>
 23fe644:	f01a 0f02 	tst.w	sl, #2
 23fe648:	d006      	beq.n	23fe658 <__gethex+0x384>
 23fe64a:	f8d9 0000 	ldr.w	r0, [r9]
 23fe64e:	ea4a 0a00 	orr.w	sl, sl, r0
 23fe652:	f01a 0f01 	tst.w	sl, #1
 23fe656:	d10e      	bne.n	23fe676 <__gethex+0x3a2>
 23fe658:	f047 0710 	orr.w	r7, r7, #16
 23fe65c:	e033      	b.n	23fe6c6 <__gethex+0x3f2>
 23fe65e:	f04f 0a01 	mov.w	sl, #1
 23fe662:	e7cf      	b.n	23fe604 <__gethex+0x330>
 23fe664:	2701      	movs	r7, #1
 23fe666:	e7e2      	b.n	23fe62e <__gethex+0x35a>
 23fe668:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fe66a:	f1c3 0301 	rsb	r3, r3, #1
 23fe66e:	9315      	str	r3, [sp, #84]	; 0x54
 23fe670:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fe672:	2b00      	cmp	r3, #0
 23fe674:	d0f0      	beq.n	23fe658 <__gethex+0x384>
 23fe676:	f8d4 b010 	ldr.w	fp, [r4, #16]
 23fe67a:	f104 0314 	add.w	r3, r4, #20
 23fe67e:	f04f 0c00 	mov.w	ip, #0
 23fe682:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 23fe686:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 23fe68a:	4618      	mov	r0, r3
 23fe68c:	f853 2b04 	ldr.w	r2, [r3], #4
 23fe690:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 23fe694:	d01c      	beq.n	23fe6d0 <__gethex+0x3fc>
 23fe696:	3201      	adds	r2, #1
 23fe698:	6002      	str	r2, [r0, #0]
 23fe69a:	2f02      	cmp	r7, #2
 23fe69c:	f104 0314 	add.w	r3, r4, #20
 23fe6a0:	d13f      	bne.n	23fe722 <__gethex+0x44e>
 23fe6a2:	f8d8 2000 	ldr.w	r2, [r8]
 23fe6a6:	3a01      	subs	r2, #1
 23fe6a8:	42b2      	cmp	r2, r6
 23fe6aa:	d10a      	bne.n	23fe6c2 <__gethex+0x3ee>
 23fe6ac:	1171      	asrs	r1, r6, #5
 23fe6ae:	2201      	movs	r2, #1
 23fe6b0:	f006 061f 	and.w	r6, r6, #31
 23fe6b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 23fe6b8:	fa02 f606 	lsl.w	r6, r2, r6
 23fe6bc:	421e      	tst	r6, r3
 23fe6be:	bf18      	it	ne
 23fe6c0:	4617      	movne	r7, r2
 23fe6c2:	f047 0720 	orr.w	r7, r7, #32
 23fe6c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23fe6c8:	601c      	str	r4, [r3, #0]
 23fe6ca:	9b04      	ldr	r3, [sp, #16]
 23fe6cc:	601d      	str	r5, [r3, #0]
 23fe6ce:	e695      	b.n	23fe3fc <__gethex+0x128>
 23fe6d0:	4299      	cmp	r1, r3
 23fe6d2:	f843 cc04 	str.w	ip, [r3, #-4]
 23fe6d6:	d8d8      	bhi.n	23fe68a <__gethex+0x3b6>
 23fe6d8:	68a3      	ldr	r3, [r4, #8]
 23fe6da:	459b      	cmp	fp, r3
 23fe6dc:	db19      	blt.n	23fe712 <__gethex+0x43e>
 23fe6de:	6861      	ldr	r1, [r4, #4]
 23fe6e0:	ee18 0a10 	vmov	r0, s16
 23fe6e4:	3101      	adds	r1, #1
 23fe6e6:	f000 f913 	bl	23fe910 <_Balloc>
 23fe6ea:	4681      	mov	r9, r0
 23fe6ec:	b918      	cbnz	r0, 23fe6f6 <__gethex+0x422>
 23fe6ee:	4b1b      	ldr	r3, [pc, #108]	; (23fe75c <__gethex+0x488>)
 23fe6f0:	4602      	mov	r2, r0
 23fe6f2:	2184      	movs	r1, #132	; 0x84
 23fe6f4:	e6a8      	b.n	23fe448 <__gethex+0x174>
 23fe6f6:	6922      	ldr	r2, [r4, #16]
 23fe6f8:	f104 010c 	add.w	r1, r4, #12
 23fe6fc:	300c      	adds	r0, #12
 23fe6fe:	3202      	adds	r2, #2
 23fe700:	0092      	lsls	r2, r2, #2
 23fe702:	f7fe fda5 	bl	23fd250 <memcpy>
 23fe706:	4621      	mov	r1, r4
 23fe708:	464c      	mov	r4, r9
 23fe70a:	ee18 0a10 	vmov	r0, s16
 23fe70e:	f000 f93f 	bl	23fe990 <_Bfree>
 23fe712:	6923      	ldr	r3, [r4, #16]
 23fe714:	1c5a      	adds	r2, r3, #1
 23fe716:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 23fe71a:	6122      	str	r2, [r4, #16]
 23fe71c:	2201      	movs	r2, #1
 23fe71e:	615a      	str	r2, [r3, #20]
 23fe720:	e7bb      	b.n	23fe69a <__gethex+0x3c6>
 23fe722:	6922      	ldr	r2, [r4, #16]
 23fe724:	455a      	cmp	r2, fp
 23fe726:	dd0b      	ble.n	23fe740 <__gethex+0x46c>
 23fe728:	2101      	movs	r1, #1
 23fe72a:	4620      	mov	r0, r4
 23fe72c:	f7ff fd6c 	bl	23fe208 <rshift>
 23fe730:	3501      	adds	r5, #1
 23fe732:	f8d8 3008 	ldr.w	r3, [r8, #8]
 23fe736:	42ab      	cmp	r3, r5
 23fe738:	f6ff aed0 	blt.w	23fe4dc <__gethex+0x208>
 23fe73c:	2701      	movs	r7, #1
 23fe73e:	e7c0      	b.n	23fe6c2 <__gethex+0x3ee>
 23fe740:	f016 061f 	ands.w	r6, r6, #31
 23fe744:	d0fa      	beq.n	23fe73c <__gethex+0x468>
 23fe746:	4453      	add	r3, sl
 23fe748:	f1c6 0620 	rsb	r6, r6, #32
 23fe74c:	f853 0c04 	ldr.w	r0, [r3, #-4]
 23fe750:	f000 f9d2 	bl	23feaf8 <__hi0bits>
 23fe754:	42b0      	cmp	r0, r6
 23fe756:	dbe7      	blt.n	23fe728 <__gethex+0x454>
 23fe758:	e7f0      	b.n	23fe73c <__gethex+0x468>
 23fe75a:	bf00      	nop
 23fe75c:	023ffde1 	.word	0x023ffde1

023fe760 <L_shift>:
 23fe760:	f1c2 0208 	rsb	r2, r2, #8
 23fe764:	0092      	lsls	r2, r2, #2
 23fe766:	b570      	push	{r4, r5, r6, lr}
 23fe768:	f1c2 0620 	rsb	r6, r2, #32
 23fe76c:	6843      	ldr	r3, [r0, #4]
 23fe76e:	6804      	ldr	r4, [r0, #0]
 23fe770:	fa03 f506 	lsl.w	r5, r3, r6
 23fe774:	40d3      	lsrs	r3, r2
 23fe776:	432c      	orrs	r4, r5
 23fe778:	6004      	str	r4, [r0, #0]
 23fe77a:	f840 3f04 	str.w	r3, [r0, #4]!
 23fe77e:	4288      	cmp	r0, r1
 23fe780:	d3f4      	bcc.n	23fe76c <L_shift+0xc>
 23fe782:	bd70      	pop	{r4, r5, r6, pc}

023fe784 <__match>:
 23fe784:	6803      	ldr	r3, [r0, #0]
 23fe786:	3301      	adds	r3, #1
 23fe788:	b530      	push	{r4, r5, lr}
 23fe78a:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fe78e:	b914      	cbnz	r4, 23fe796 <__match+0x12>
 23fe790:	6003      	str	r3, [r0, #0]
 23fe792:	2001      	movs	r0, #1
 23fe794:	bd30      	pop	{r4, r5, pc}
 23fe796:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe79a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 23fe79e:	2d19      	cmp	r5, #25
 23fe7a0:	bf98      	it	ls
 23fe7a2:	3220      	addls	r2, #32
 23fe7a4:	42a2      	cmp	r2, r4
 23fe7a6:	d0f0      	beq.n	23fe78a <__match+0x6>
 23fe7a8:	2000      	movs	r0, #0
 23fe7aa:	e7f3      	b.n	23fe794 <__match+0x10>

023fe7ac <__hexnan>:
 23fe7ac:	680b      	ldr	r3, [r1, #0]
 23fe7ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe7b2:	115e      	asrs	r6, r3, #5
 23fe7b4:	f013 031f 	ands.w	r3, r3, #31
 23fe7b8:	f04f 0500 	mov.w	r5, #0
 23fe7bc:	b087      	sub	sp, #28
 23fe7be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 23fe7c2:	4690      	mov	r8, r2
 23fe7c4:	4682      	mov	sl, r0
 23fe7c6:	6802      	ldr	r2, [r0, #0]
 23fe7c8:	bf18      	it	ne
 23fe7ca:	3604      	addne	r6, #4
 23fe7cc:	46ab      	mov	fp, r5
 23fe7ce:	9301      	str	r3, [sp, #4]
 23fe7d0:	1f37      	subs	r7, r6, #4
 23fe7d2:	f846 5c04 	str.w	r5, [r6, #-4]
 23fe7d6:	9502      	str	r5, [sp, #8]
 23fe7d8:	46b9      	mov	r9, r7
 23fe7da:	463c      	mov	r4, r7
 23fe7dc:	1c53      	adds	r3, r2, #1
 23fe7de:	7851      	ldrb	r1, [r2, #1]
 23fe7e0:	9303      	str	r3, [sp, #12]
 23fe7e2:	b341      	cbz	r1, 23fe836 <__hexnan+0x8a>
 23fe7e4:	4608      	mov	r0, r1
 23fe7e6:	9205      	str	r2, [sp, #20]
 23fe7e8:	9104      	str	r1, [sp, #16]
 23fe7ea:	f7ff fd5e 	bl	23fe2aa <__hexdig_fun>
 23fe7ee:	2800      	cmp	r0, #0
 23fe7f0:	d14f      	bne.n	23fe892 <__hexnan+0xe6>
 23fe7f2:	9904      	ldr	r1, [sp, #16]
 23fe7f4:	9a05      	ldr	r2, [sp, #20]
 23fe7f6:	2920      	cmp	r1, #32
 23fe7f8:	d818      	bhi.n	23fe82c <__hexnan+0x80>
 23fe7fa:	9b02      	ldr	r3, [sp, #8]
 23fe7fc:	459b      	cmp	fp, r3
 23fe7fe:	dd13      	ble.n	23fe828 <__hexnan+0x7c>
 23fe800:	454c      	cmp	r4, r9
 23fe802:	d206      	bcs.n	23fe812 <__hexnan+0x66>
 23fe804:	2d07      	cmp	r5, #7
 23fe806:	dc04      	bgt.n	23fe812 <__hexnan+0x66>
 23fe808:	462a      	mov	r2, r5
 23fe80a:	4649      	mov	r1, r9
 23fe80c:	4620      	mov	r0, r4
 23fe80e:	f7ff ffa7 	bl	23fe760 <L_shift>
 23fe812:	4544      	cmp	r4, r8
 23fe814:	d94f      	bls.n	23fe8b6 <__hexnan+0x10a>
 23fe816:	2300      	movs	r3, #0
 23fe818:	f1a4 0904 	sub.w	r9, r4, #4
 23fe81c:	f8cd b008 	str.w	fp, [sp, #8]
 23fe820:	f844 3c04 	str.w	r3, [r4, #-4]
 23fe824:	461d      	mov	r5, r3
 23fe826:	464c      	mov	r4, r9
 23fe828:	9a03      	ldr	r2, [sp, #12]
 23fe82a:	e7d7      	b.n	23fe7dc <__hexnan+0x30>
 23fe82c:	2929      	cmp	r1, #41	; 0x29
 23fe82e:	d155      	bne.n	23fe8dc <__hexnan+0x130>
 23fe830:	3202      	adds	r2, #2
 23fe832:	f8ca 2000 	str.w	r2, [sl]
 23fe836:	f1bb 0f00 	cmp.w	fp, #0
 23fe83a:	d04f      	beq.n	23fe8dc <__hexnan+0x130>
 23fe83c:	454c      	cmp	r4, r9
 23fe83e:	d206      	bcs.n	23fe84e <__hexnan+0xa2>
 23fe840:	2d07      	cmp	r5, #7
 23fe842:	dc04      	bgt.n	23fe84e <__hexnan+0xa2>
 23fe844:	462a      	mov	r2, r5
 23fe846:	4649      	mov	r1, r9
 23fe848:	4620      	mov	r0, r4
 23fe84a:	f7ff ff89 	bl	23fe760 <L_shift>
 23fe84e:	4544      	cmp	r4, r8
 23fe850:	d933      	bls.n	23fe8ba <__hexnan+0x10e>
 23fe852:	f1a8 0204 	sub.w	r2, r8, #4
 23fe856:	4623      	mov	r3, r4
 23fe858:	f853 1b04 	ldr.w	r1, [r3], #4
 23fe85c:	429f      	cmp	r7, r3
 23fe85e:	f842 1f04 	str.w	r1, [r2, #4]!
 23fe862:	d2f9      	bcs.n	23fe858 <__hexnan+0xac>
 23fe864:	1b3b      	subs	r3, r7, r4
 23fe866:	3e03      	subs	r6, #3
 23fe868:	3401      	adds	r4, #1
 23fe86a:	2200      	movs	r2, #0
 23fe86c:	f023 0303 	bic.w	r3, r3, #3
 23fe870:	3304      	adds	r3, #4
 23fe872:	42b4      	cmp	r4, r6
 23fe874:	bf88      	it	hi
 23fe876:	2304      	movhi	r3, #4
 23fe878:	4443      	add	r3, r8
 23fe87a:	f843 2b04 	str.w	r2, [r3], #4
 23fe87e:	429f      	cmp	r7, r3
 23fe880:	d2fb      	bcs.n	23fe87a <__hexnan+0xce>
 23fe882:	683b      	ldr	r3, [r7, #0]
 23fe884:	b91b      	cbnz	r3, 23fe88e <__hexnan+0xe2>
 23fe886:	4547      	cmp	r7, r8
 23fe888:	d126      	bne.n	23fe8d8 <__hexnan+0x12c>
 23fe88a:	2301      	movs	r3, #1
 23fe88c:	603b      	str	r3, [r7, #0]
 23fe88e:	2005      	movs	r0, #5
 23fe890:	e025      	b.n	23fe8de <__hexnan+0x132>
 23fe892:	3501      	adds	r5, #1
 23fe894:	f10b 0b01 	add.w	fp, fp, #1
 23fe898:	2d08      	cmp	r5, #8
 23fe89a:	dd05      	ble.n	23fe8a8 <__hexnan+0xfc>
 23fe89c:	4544      	cmp	r4, r8
 23fe89e:	d9c3      	bls.n	23fe828 <__hexnan+0x7c>
 23fe8a0:	2300      	movs	r3, #0
 23fe8a2:	3c04      	subs	r4, #4
 23fe8a4:	2501      	movs	r5, #1
 23fe8a6:	6023      	str	r3, [r4, #0]
 23fe8a8:	6822      	ldr	r2, [r4, #0]
 23fe8aa:	f000 000f 	and.w	r0, r0, #15
 23fe8ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 23fe8b2:	6022      	str	r2, [r4, #0]
 23fe8b4:	e7b8      	b.n	23fe828 <__hexnan+0x7c>
 23fe8b6:	2508      	movs	r5, #8
 23fe8b8:	e7b6      	b.n	23fe828 <__hexnan+0x7c>
 23fe8ba:	9b01      	ldr	r3, [sp, #4]
 23fe8bc:	2b00      	cmp	r3, #0
 23fe8be:	d0e0      	beq.n	23fe882 <__hexnan+0xd6>
 23fe8c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fe8c4:	f1c3 0320 	rsb	r3, r3, #32
 23fe8c8:	fa22 f303 	lsr.w	r3, r2, r3
 23fe8cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 23fe8d0:	401a      	ands	r2, r3
 23fe8d2:	f846 2c04 	str.w	r2, [r6, #-4]
 23fe8d6:	e7d4      	b.n	23fe882 <__hexnan+0xd6>
 23fe8d8:	3f04      	subs	r7, #4
 23fe8da:	e7d2      	b.n	23fe882 <__hexnan+0xd6>
 23fe8dc:	2004      	movs	r0, #4
 23fe8de:	b007      	add	sp, #28
 23fe8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fe8e4 <__retarget_lock_acquire_recursive>:
 23fe8e4:	4770      	bx	lr

023fe8e6 <__retarget_lock_release>:
 23fe8e6:	4770      	bx	lr

023fe8e8 <__retarget_lock_release_recursive>:
 23fe8e8:	4770      	bx	lr

023fe8ea <__ascii_mbtowc>:
 23fe8ea:	b082      	sub	sp, #8
 23fe8ec:	b901      	cbnz	r1, 23fe8f0 <__ascii_mbtowc+0x6>
 23fe8ee:	a901      	add	r1, sp, #4
 23fe8f0:	b142      	cbz	r2, 23fe904 <__ascii_mbtowc+0x1a>
 23fe8f2:	b14b      	cbz	r3, 23fe908 <__ascii_mbtowc+0x1e>
 23fe8f4:	7813      	ldrb	r3, [r2, #0]
 23fe8f6:	600b      	str	r3, [r1, #0]
 23fe8f8:	7812      	ldrb	r2, [r2, #0]
 23fe8fa:	1e10      	subs	r0, r2, #0
 23fe8fc:	bf18      	it	ne
 23fe8fe:	2001      	movne	r0, #1
 23fe900:	b002      	add	sp, #8
 23fe902:	4770      	bx	lr
 23fe904:	4610      	mov	r0, r2
 23fe906:	e7fb      	b.n	23fe900 <__ascii_mbtowc+0x16>
 23fe908:	f06f 0001 	mvn.w	r0, #1
 23fe90c:	e7f8      	b.n	23fe900 <__ascii_mbtowc+0x16>
	...

023fe910 <_Balloc>:
 23fe910:	b570      	push	{r4, r5, r6, lr}
 23fe912:	6a46      	ldr	r6, [r0, #36]	; 0x24
 23fe914:	4604      	mov	r4, r0
 23fe916:	460d      	mov	r5, r1
 23fe918:	b976      	cbnz	r6, 23fe938 <_Balloc+0x28>
 23fe91a:	2010      	movs	r0, #16
 23fe91c:	f7fb faae 	bl	23f9e7c <malloc>
 23fe920:	4602      	mov	r2, r0
 23fe922:	6260      	str	r0, [r4, #36]	; 0x24
 23fe924:	b920      	cbnz	r0, 23fe930 <_Balloc+0x20>
 23fe926:	4b18      	ldr	r3, [pc, #96]	; (23fe988 <_Balloc+0x78>)
 23fe928:	2166      	movs	r1, #102	; 0x66
 23fe92a:	4818      	ldr	r0, [pc, #96]	; (23fe98c <_Balloc+0x7c>)
 23fe92c:	f7fb fb24 	bl	23f9f78 <__assert_func>
 23fe930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 23fe934:	6006      	str	r6, [r0, #0]
 23fe936:	60c6      	str	r6, [r0, #12]
 23fe938:	6a66      	ldr	r6, [r4, #36]	; 0x24
 23fe93a:	68f3      	ldr	r3, [r6, #12]
 23fe93c:	b183      	cbz	r3, 23fe960 <_Balloc+0x50>
 23fe93e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fe940:	68db      	ldr	r3, [r3, #12]
 23fe942:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 23fe946:	b9b8      	cbnz	r0, 23fe978 <_Balloc+0x68>
 23fe948:	2101      	movs	r1, #1
 23fe94a:	4620      	mov	r0, r4
 23fe94c:	fa01 f605 	lsl.w	r6, r1, r5
 23fe950:	1d72      	adds	r2, r6, #5
 23fe952:	0092      	lsls	r2, r2, #2
 23fe954:	f000 fca1 	bl	23ff29a <_calloc_r>
 23fe958:	b160      	cbz	r0, 23fe974 <_Balloc+0x64>
 23fe95a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 23fe95e:	e00e      	b.n	23fe97e <_Balloc+0x6e>
 23fe960:	2221      	movs	r2, #33	; 0x21
 23fe962:	2104      	movs	r1, #4
 23fe964:	4620      	mov	r0, r4
 23fe966:	f000 fc98 	bl	23ff29a <_calloc_r>
 23fe96a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fe96c:	60f0      	str	r0, [r6, #12]
 23fe96e:	68db      	ldr	r3, [r3, #12]
 23fe970:	2b00      	cmp	r3, #0
 23fe972:	d1e4      	bne.n	23fe93e <_Balloc+0x2e>
 23fe974:	2000      	movs	r0, #0
 23fe976:	bd70      	pop	{r4, r5, r6, pc}
 23fe978:	6802      	ldr	r2, [r0, #0]
 23fe97a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 23fe97e:	2300      	movs	r3, #0
 23fe980:	e9c0 3303 	strd	r3, r3, [r0, #12]
 23fe984:	e7f7      	b.n	23fe976 <_Balloc+0x66>
 23fe986:	bf00      	nop
 23fe988:	023ffc12 	.word	0x023ffc12
 23fe98c:	023ffe68 	.word	0x023ffe68

023fe990 <_Bfree>:
 23fe990:	b570      	push	{r4, r5, r6, lr}
 23fe992:	6a46      	ldr	r6, [r0, #36]	; 0x24
 23fe994:	4605      	mov	r5, r0
 23fe996:	460c      	mov	r4, r1
 23fe998:	b976      	cbnz	r6, 23fe9b8 <_Bfree+0x28>
 23fe99a:	2010      	movs	r0, #16
 23fe99c:	f7fb fa6e 	bl	23f9e7c <malloc>
 23fe9a0:	4602      	mov	r2, r0
 23fe9a2:	6268      	str	r0, [r5, #36]	; 0x24
 23fe9a4:	b920      	cbnz	r0, 23fe9b0 <_Bfree+0x20>
 23fe9a6:	4b09      	ldr	r3, [pc, #36]	; (23fe9cc <_Bfree+0x3c>)
 23fe9a8:	218a      	movs	r1, #138	; 0x8a
 23fe9aa:	4809      	ldr	r0, [pc, #36]	; (23fe9d0 <_Bfree+0x40>)
 23fe9ac:	f7fb fae4 	bl	23f9f78 <__assert_func>
 23fe9b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 23fe9b4:	6006      	str	r6, [r0, #0]
 23fe9b6:	60c6      	str	r6, [r0, #12]
 23fe9b8:	b13c      	cbz	r4, 23fe9ca <_Bfree+0x3a>
 23fe9ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 23fe9bc:	6862      	ldr	r2, [r4, #4]
 23fe9be:	68db      	ldr	r3, [r3, #12]
 23fe9c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 23fe9c4:	6021      	str	r1, [r4, #0]
 23fe9c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 23fe9ca:	bd70      	pop	{r4, r5, r6, pc}
 23fe9cc:	023ffc12 	.word	0x023ffc12
 23fe9d0:	023ffe68 	.word	0x023ffe68

023fe9d4 <__multadd>:
 23fe9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe9d8:	f101 0c14 	add.w	ip, r1, #20
 23fe9dc:	4607      	mov	r7, r0
 23fe9de:	460c      	mov	r4, r1
 23fe9e0:	461e      	mov	r6, r3
 23fe9e2:	690d      	ldr	r5, [r1, #16]
 23fe9e4:	2000      	movs	r0, #0
 23fe9e6:	f8dc 3000 	ldr.w	r3, [ip]
 23fe9ea:	3001      	adds	r0, #1
 23fe9ec:	b299      	uxth	r1, r3
 23fe9ee:	4285      	cmp	r5, r0
 23fe9f0:	fb02 6101 	mla	r1, r2, r1, r6
 23fe9f4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 23fe9f8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 23fe9fc:	b289      	uxth	r1, r1
 23fe9fe:	fb02 3306 	mla	r3, r2, r6, r3
 23fea02:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 23fea06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 23fea0a:	f84c 1b04 	str.w	r1, [ip], #4
 23fea0e:	dcea      	bgt.n	23fe9e6 <__multadd+0x12>
 23fea10:	b30e      	cbz	r6, 23fea56 <__multadd+0x82>
 23fea12:	68a3      	ldr	r3, [r4, #8]
 23fea14:	42ab      	cmp	r3, r5
 23fea16:	dc19      	bgt.n	23fea4c <__multadd+0x78>
 23fea18:	6861      	ldr	r1, [r4, #4]
 23fea1a:	4638      	mov	r0, r7
 23fea1c:	3101      	adds	r1, #1
 23fea1e:	f7ff ff77 	bl	23fe910 <_Balloc>
 23fea22:	4680      	mov	r8, r0
 23fea24:	b928      	cbnz	r0, 23fea32 <__multadd+0x5e>
 23fea26:	4602      	mov	r2, r0
 23fea28:	4b0c      	ldr	r3, [pc, #48]	; (23fea5c <__multadd+0x88>)
 23fea2a:	21b5      	movs	r1, #181	; 0xb5
 23fea2c:	480c      	ldr	r0, [pc, #48]	; (23fea60 <__multadd+0x8c>)
 23fea2e:	f7fb faa3 	bl	23f9f78 <__assert_func>
 23fea32:	6922      	ldr	r2, [r4, #16]
 23fea34:	f104 010c 	add.w	r1, r4, #12
 23fea38:	300c      	adds	r0, #12
 23fea3a:	3202      	adds	r2, #2
 23fea3c:	0092      	lsls	r2, r2, #2
 23fea3e:	f7fe fc07 	bl	23fd250 <memcpy>
 23fea42:	4621      	mov	r1, r4
 23fea44:	4644      	mov	r4, r8
 23fea46:	4638      	mov	r0, r7
 23fea48:	f7ff ffa2 	bl	23fe990 <_Bfree>
 23fea4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 23fea50:	3501      	adds	r5, #1
 23fea52:	615e      	str	r6, [r3, #20]
 23fea54:	6125      	str	r5, [r4, #16]
 23fea56:	4620      	mov	r0, r4
 23fea58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fea5c:	023ffde1 	.word	0x023ffde1
 23fea60:	023ffe68 	.word	0x023ffe68

023fea64 <__s2b>:
 23fea64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fea68:	4615      	mov	r5, r2
 23fea6a:	461f      	mov	r7, r3
 23fea6c:	2209      	movs	r2, #9
 23fea6e:	3308      	adds	r3, #8
 23fea70:	460c      	mov	r4, r1
 23fea72:	4606      	mov	r6, r0
 23fea74:	2100      	movs	r1, #0
 23fea76:	fb93 f3f2 	sdiv	r3, r3, r2
 23fea7a:	2201      	movs	r2, #1
 23fea7c:	429a      	cmp	r2, r3
 23fea7e:	db09      	blt.n	23fea94 <__s2b+0x30>
 23fea80:	4630      	mov	r0, r6
 23fea82:	f7ff ff45 	bl	23fe910 <_Balloc>
 23fea86:	b940      	cbnz	r0, 23fea9a <__s2b+0x36>
 23fea88:	4602      	mov	r2, r0
 23fea8a:	4b19      	ldr	r3, [pc, #100]	; (23feaf0 <__s2b+0x8c>)
 23fea8c:	21ce      	movs	r1, #206	; 0xce
 23fea8e:	4819      	ldr	r0, [pc, #100]	; (23feaf4 <__s2b+0x90>)
 23fea90:	f7fb fa72 	bl	23f9f78 <__assert_func>
 23fea94:	0052      	lsls	r2, r2, #1
 23fea96:	3101      	adds	r1, #1
 23fea98:	e7f0      	b.n	23fea7c <__s2b+0x18>
 23fea9a:	9b08      	ldr	r3, [sp, #32]
 23fea9c:	2d09      	cmp	r5, #9
 23fea9e:	6143      	str	r3, [r0, #20]
 23feaa0:	f04f 0301 	mov.w	r3, #1
 23feaa4:	6103      	str	r3, [r0, #16]
 23feaa6:	dd16      	ble.n	23fead6 <__s2b+0x72>
 23feaa8:	f104 0909 	add.w	r9, r4, #9
 23feaac:	442c      	add	r4, r5
 23feaae:	46c8      	mov	r8, r9
 23feab0:	f818 3b01 	ldrb.w	r3, [r8], #1
 23feab4:	4601      	mov	r1, r0
 23feab6:	220a      	movs	r2, #10
 23feab8:	4630      	mov	r0, r6
 23feaba:	3b30      	subs	r3, #48	; 0x30
 23feabc:	f7ff ff8a 	bl	23fe9d4 <__multadd>
 23feac0:	45a0      	cmp	r8, r4
 23feac2:	d1f5      	bne.n	23feab0 <__s2b+0x4c>
 23feac4:	f1a5 0408 	sub.w	r4, r5, #8
 23feac8:	444c      	add	r4, r9
 23feaca:	1b2d      	subs	r5, r5, r4
 23feacc:	1963      	adds	r3, r4, r5
 23feace:	42bb      	cmp	r3, r7
 23fead0:	db04      	blt.n	23feadc <__s2b+0x78>
 23fead2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fead6:	340a      	adds	r4, #10
 23fead8:	2509      	movs	r5, #9
 23feada:	e7f6      	b.n	23feaca <__s2b+0x66>
 23feadc:	f814 3b01 	ldrb.w	r3, [r4], #1
 23feae0:	4601      	mov	r1, r0
 23feae2:	220a      	movs	r2, #10
 23feae4:	4630      	mov	r0, r6
 23feae6:	3b30      	subs	r3, #48	; 0x30
 23feae8:	f7ff ff74 	bl	23fe9d4 <__multadd>
 23feaec:	e7ee      	b.n	23feacc <__s2b+0x68>
 23feaee:	bf00      	nop
 23feaf0:	023ffde1 	.word	0x023ffde1
 23feaf4:	023ffe68 	.word	0x023ffe68

023feaf8 <__hi0bits>:
 23feaf8:	0c03      	lsrs	r3, r0, #16
 23feafa:	041b      	lsls	r3, r3, #16
 23feafc:	b9d3      	cbnz	r3, 23feb34 <__hi0bits+0x3c>
 23feafe:	0400      	lsls	r0, r0, #16
 23feb00:	2310      	movs	r3, #16
 23feb02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 23feb06:	bf04      	itt	eq
 23feb08:	0200      	lsleq	r0, r0, #8
 23feb0a:	3308      	addeq	r3, #8
 23feb0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 23feb10:	bf04      	itt	eq
 23feb12:	0100      	lsleq	r0, r0, #4
 23feb14:	3304      	addeq	r3, #4
 23feb16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 23feb1a:	bf04      	itt	eq
 23feb1c:	0080      	lsleq	r0, r0, #2
 23feb1e:	3302      	addeq	r3, #2
 23feb20:	2800      	cmp	r0, #0
 23feb22:	db05      	blt.n	23feb30 <__hi0bits+0x38>
 23feb24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 23feb28:	f103 0301 	add.w	r3, r3, #1
 23feb2c:	bf08      	it	eq
 23feb2e:	2320      	moveq	r3, #32
 23feb30:	4618      	mov	r0, r3
 23feb32:	4770      	bx	lr
 23feb34:	2300      	movs	r3, #0
 23feb36:	e7e4      	b.n	23feb02 <__hi0bits+0xa>

023feb38 <__lo0bits>:
 23feb38:	6803      	ldr	r3, [r0, #0]
 23feb3a:	4601      	mov	r1, r0
 23feb3c:	f013 0207 	ands.w	r2, r3, #7
 23feb40:	d00b      	beq.n	23feb5a <__lo0bits+0x22>
 23feb42:	07da      	lsls	r2, r3, #31
 23feb44:	d423      	bmi.n	23feb8e <__lo0bits+0x56>
 23feb46:	0798      	lsls	r0, r3, #30
 23feb48:	bf47      	ittee	mi
 23feb4a:	085b      	lsrmi	r3, r3, #1
 23feb4c:	2001      	movmi	r0, #1
 23feb4e:	089b      	lsrpl	r3, r3, #2
 23feb50:	2002      	movpl	r0, #2
 23feb52:	bf4c      	ite	mi
 23feb54:	600b      	strmi	r3, [r1, #0]
 23feb56:	600b      	strpl	r3, [r1, #0]
 23feb58:	4770      	bx	lr
 23feb5a:	b298      	uxth	r0, r3
 23feb5c:	b9a8      	cbnz	r0, 23feb8a <__lo0bits+0x52>
 23feb5e:	0c1b      	lsrs	r3, r3, #16
 23feb60:	2010      	movs	r0, #16
 23feb62:	b2da      	uxtb	r2, r3
 23feb64:	b90a      	cbnz	r2, 23feb6a <__lo0bits+0x32>
 23feb66:	3008      	adds	r0, #8
 23feb68:	0a1b      	lsrs	r3, r3, #8
 23feb6a:	071a      	lsls	r2, r3, #28
 23feb6c:	bf04      	itt	eq
 23feb6e:	091b      	lsreq	r3, r3, #4
 23feb70:	3004      	addeq	r0, #4
 23feb72:	079a      	lsls	r2, r3, #30
 23feb74:	bf04      	itt	eq
 23feb76:	089b      	lsreq	r3, r3, #2
 23feb78:	3002      	addeq	r0, #2
 23feb7a:	07da      	lsls	r2, r3, #31
 23feb7c:	d403      	bmi.n	23feb86 <__lo0bits+0x4e>
 23feb7e:	085b      	lsrs	r3, r3, #1
 23feb80:	f100 0001 	add.w	r0, r0, #1
 23feb84:	d005      	beq.n	23feb92 <__lo0bits+0x5a>
 23feb86:	600b      	str	r3, [r1, #0]
 23feb88:	4770      	bx	lr
 23feb8a:	4610      	mov	r0, r2
 23feb8c:	e7e9      	b.n	23feb62 <__lo0bits+0x2a>
 23feb8e:	2000      	movs	r0, #0
 23feb90:	4770      	bx	lr
 23feb92:	2020      	movs	r0, #32
 23feb94:	4770      	bx	lr
	...

023feb98 <__i2b>:
 23feb98:	b510      	push	{r4, lr}
 23feb9a:	460c      	mov	r4, r1
 23feb9c:	2101      	movs	r1, #1
 23feb9e:	f7ff feb7 	bl	23fe910 <_Balloc>
 23feba2:	4602      	mov	r2, r0
 23feba4:	b928      	cbnz	r0, 23febb2 <__i2b+0x1a>
 23feba6:	4b05      	ldr	r3, [pc, #20]	; (23febbc <__i2b+0x24>)
 23feba8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 23febac:	4804      	ldr	r0, [pc, #16]	; (23febc0 <__i2b+0x28>)
 23febae:	f7fb f9e3 	bl	23f9f78 <__assert_func>
 23febb2:	2301      	movs	r3, #1
 23febb4:	6144      	str	r4, [r0, #20]
 23febb6:	6103      	str	r3, [r0, #16]
 23febb8:	bd10      	pop	{r4, pc}
 23febba:	bf00      	nop
 23febbc:	023ffde1 	.word	0x023ffde1
 23febc0:	023ffe68 	.word	0x023ffe68

023febc4 <__multiply>:
 23febc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23febc8:	4691      	mov	r9, r2
 23febca:	690a      	ldr	r2, [r1, #16]
 23febcc:	460c      	mov	r4, r1
 23febce:	b085      	sub	sp, #20
 23febd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 23febd4:	429a      	cmp	r2, r3
 23febd6:	bfbe      	ittt	lt
 23febd8:	460b      	movlt	r3, r1
 23febda:	464c      	movlt	r4, r9
 23febdc:	4699      	movlt	r9, r3
 23febde:	6927      	ldr	r7, [r4, #16]
 23febe0:	68a3      	ldr	r3, [r4, #8]
 23febe2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 23febe6:	6861      	ldr	r1, [r4, #4]
 23febe8:	eb07 060a 	add.w	r6, r7, sl
 23febec:	42b3      	cmp	r3, r6
 23febee:	bfb8      	it	lt
 23febf0:	3101      	addlt	r1, #1
 23febf2:	f7ff fe8d 	bl	23fe910 <_Balloc>
 23febf6:	b930      	cbnz	r0, 23fec06 <__multiply+0x42>
 23febf8:	4602      	mov	r2, r0
 23febfa:	4b44      	ldr	r3, [pc, #272]	; (23fed0c <__multiply+0x148>)
 23febfc:	f240 115d 	movw	r1, #349	; 0x15d
 23fec00:	4843      	ldr	r0, [pc, #268]	; (23fed10 <__multiply+0x14c>)
 23fec02:	f7fb f9b9 	bl	23f9f78 <__assert_func>
 23fec06:	f100 0514 	add.w	r5, r0, #20
 23fec0a:	2200      	movs	r2, #0
 23fec0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 23fec10:	462b      	mov	r3, r5
 23fec12:	4543      	cmp	r3, r8
 23fec14:	d321      	bcc.n	23fec5a <__multiply+0x96>
 23fec16:	f104 0314 	add.w	r3, r4, #20
 23fec1a:	f104 0115 	add.w	r1, r4, #21
 23fec1e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 23fec22:	f109 0314 	add.w	r3, r9, #20
 23fec26:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 23fec2a:	9202      	str	r2, [sp, #8]
 23fec2c:	1b3a      	subs	r2, r7, r4
 23fec2e:	3a15      	subs	r2, #21
 23fec30:	f022 0203 	bic.w	r2, r2, #3
 23fec34:	3204      	adds	r2, #4
 23fec36:	428f      	cmp	r7, r1
 23fec38:	bf38      	it	cc
 23fec3a:	2204      	movcc	r2, #4
 23fec3c:	9201      	str	r2, [sp, #4]
 23fec3e:	9a02      	ldr	r2, [sp, #8]
 23fec40:	9303      	str	r3, [sp, #12]
 23fec42:	429a      	cmp	r2, r3
 23fec44:	d80c      	bhi.n	23fec60 <__multiply+0x9c>
 23fec46:	2e00      	cmp	r6, #0
 23fec48:	dd03      	ble.n	23fec52 <__multiply+0x8e>
 23fec4a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 23fec4e:	2b00      	cmp	r3, #0
 23fec50:	d05a      	beq.n	23fed08 <__multiply+0x144>
 23fec52:	6106      	str	r6, [r0, #16]
 23fec54:	b005      	add	sp, #20
 23fec56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fec5a:	f843 2b04 	str.w	r2, [r3], #4
 23fec5e:	e7d8      	b.n	23fec12 <__multiply+0x4e>
 23fec60:	f8b3 a000 	ldrh.w	sl, [r3]
 23fec64:	f1ba 0f00 	cmp.w	sl, #0
 23fec68:	d024      	beq.n	23fecb4 <__multiply+0xf0>
 23fec6a:	f104 0e14 	add.w	lr, r4, #20
 23fec6e:	46a9      	mov	r9, r5
 23fec70:	f04f 0c00 	mov.w	ip, #0
 23fec74:	f85e 2b04 	ldr.w	r2, [lr], #4
 23fec78:	f8d9 1000 	ldr.w	r1, [r9]
 23fec7c:	fa1f fb82 	uxth.w	fp, r2
 23fec80:	4577      	cmp	r7, lr
 23fec82:	b289      	uxth	r1, r1
 23fec84:	fb0a 110b 	mla	r1, sl, fp, r1
 23fec88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 23fec8c:	f8d9 2000 	ldr.w	r2, [r9]
 23fec90:	4461      	add	r1, ip
 23fec92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 23fec96:	fb0a c20b 	mla	r2, sl, fp, ip
 23fec9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 23fec9e:	b289      	uxth	r1, r1
 23feca0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 23feca4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23feca8:	f849 1b04 	str.w	r1, [r9], #4
 23fecac:	d8e2      	bhi.n	23fec74 <__multiply+0xb0>
 23fecae:	9a01      	ldr	r2, [sp, #4]
 23fecb0:	f845 c002 	str.w	ip, [r5, r2]
 23fecb4:	9a03      	ldr	r2, [sp, #12]
 23fecb6:	3304      	adds	r3, #4
 23fecb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 23fecbc:	f1b9 0f00 	cmp.w	r9, #0
 23fecc0:	d020      	beq.n	23fed04 <__multiply+0x140>
 23fecc2:	6829      	ldr	r1, [r5, #0]
 23fecc4:	f104 0c14 	add.w	ip, r4, #20
 23fecc8:	46ae      	mov	lr, r5
 23fecca:	f04f 0a00 	mov.w	sl, #0
 23fecce:	f8bc b000 	ldrh.w	fp, [ip]
 23fecd2:	b289      	uxth	r1, r1
 23fecd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 23fecd8:	fb09 220b 	mla	r2, r9, fp, r2
 23fecdc:	4492      	add	sl, r2
 23fecde:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 23fece2:	f84e 1b04 	str.w	r1, [lr], #4
 23fece6:	f85c 2b04 	ldr.w	r2, [ip], #4
 23fecea:	f8be 1000 	ldrh.w	r1, [lr]
 23fecee:	0c12      	lsrs	r2, r2, #16
 23fecf0:	4567      	cmp	r7, ip
 23fecf2:	fb09 1102 	mla	r1, r9, r2, r1
 23fecf6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 23fecfa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 23fecfe:	d8e6      	bhi.n	23fecce <__multiply+0x10a>
 23fed00:	9a01      	ldr	r2, [sp, #4]
 23fed02:	50a9      	str	r1, [r5, r2]
 23fed04:	3504      	adds	r5, #4
 23fed06:	e79a      	b.n	23fec3e <__multiply+0x7a>
 23fed08:	3e01      	subs	r6, #1
 23fed0a:	e79c      	b.n	23fec46 <__multiply+0x82>
 23fed0c:	023ffde1 	.word	0x023ffde1
 23fed10:	023ffe68 	.word	0x023ffe68

023fed14 <__pow5mult>:
 23fed14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fed18:	4615      	mov	r5, r2
 23fed1a:	f012 0203 	ands.w	r2, r2, #3
 23fed1e:	4606      	mov	r6, r0
 23fed20:	460f      	mov	r7, r1
 23fed22:	d007      	beq.n	23fed34 <__pow5mult+0x20>
 23fed24:	3a01      	subs	r2, #1
 23fed26:	4c25      	ldr	r4, [pc, #148]	; (23fedbc <__pow5mult+0xa8>)
 23fed28:	2300      	movs	r3, #0
 23fed2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 23fed2e:	f7ff fe51 	bl	23fe9d4 <__multadd>
 23fed32:	4607      	mov	r7, r0
 23fed34:	10ad      	asrs	r5, r5, #2
 23fed36:	d03d      	beq.n	23fedb4 <__pow5mult+0xa0>
 23fed38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 23fed3a:	b97c      	cbnz	r4, 23fed5c <__pow5mult+0x48>
 23fed3c:	2010      	movs	r0, #16
 23fed3e:	f7fb f89d 	bl	23f9e7c <malloc>
 23fed42:	4602      	mov	r2, r0
 23fed44:	6270      	str	r0, [r6, #36]	; 0x24
 23fed46:	b928      	cbnz	r0, 23fed54 <__pow5mult+0x40>
 23fed48:	4b1d      	ldr	r3, [pc, #116]	; (23fedc0 <__pow5mult+0xac>)
 23fed4a:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 23fed4e:	481d      	ldr	r0, [pc, #116]	; (23fedc4 <__pow5mult+0xb0>)
 23fed50:	f7fb f912 	bl	23f9f78 <__assert_func>
 23fed54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fed58:	6004      	str	r4, [r0, #0]
 23fed5a:	60c4      	str	r4, [r0, #12]
 23fed5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 23fed60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 23fed64:	b94c      	cbnz	r4, 23fed7a <__pow5mult+0x66>
 23fed66:	f240 2171 	movw	r1, #625	; 0x271
 23fed6a:	4630      	mov	r0, r6
 23fed6c:	f7ff ff14 	bl	23feb98 <__i2b>
 23fed70:	2300      	movs	r3, #0
 23fed72:	4604      	mov	r4, r0
 23fed74:	f8c8 0008 	str.w	r0, [r8, #8]
 23fed78:	6003      	str	r3, [r0, #0]
 23fed7a:	f04f 0900 	mov.w	r9, #0
 23fed7e:	07eb      	lsls	r3, r5, #31
 23fed80:	d50a      	bpl.n	23fed98 <__pow5mult+0x84>
 23fed82:	4639      	mov	r1, r7
 23fed84:	4622      	mov	r2, r4
 23fed86:	4630      	mov	r0, r6
 23fed88:	f7ff ff1c 	bl	23febc4 <__multiply>
 23fed8c:	4680      	mov	r8, r0
 23fed8e:	4639      	mov	r1, r7
 23fed90:	4630      	mov	r0, r6
 23fed92:	4647      	mov	r7, r8
 23fed94:	f7ff fdfc 	bl	23fe990 <_Bfree>
 23fed98:	106d      	asrs	r5, r5, #1
 23fed9a:	d00b      	beq.n	23fedb4 <__pow5mult+0xa0>
 23fed9c:	6820      	ldr	r0, [r4, #0]
 23fed9e:	b938      	cbnz	r0, 23fedb0 <__pow5mult+0x9c>
 23feda0:	4622      	mov	r2, r4
 23feda2:	4621      	mov	r1, r4
 23feda4:	4630      	mov	r0, r6
 23feda6:	f7ff ff0d 	bl	23febc4 <__multiply>
 23fedaa:	6020      	str	r0, [r4, #0]
 23fedac:	f8c0 9000 	str.w	r9, [r0]
 23fedb0:	4604      	mov	r4, r0
 23fedb2:	e7e4      	b.n	23fed7e <__pow5mult+0x6a>
 23fedb4:	4638      	mov	r0, r7
 23fedb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fedba:	bf00      	nop
 23fedbc:	023fffb8 	.word	0x023fffb8
 23fedc0:	023ffc12 	.word	0x023ffc12
 23fedc4:	023ffe68 	.word	0x023ffe68

023fedc8 <__lshift>:
 23fedc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fedcc:	460c      	mov	r4, r1
 23fedce:	4607      	mov	r7, r0
 23fedd0:	4691      	mov	r9, r2
 23fedd2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 23fedd6:	6923      	ldr	r3, [r4, #16]
 23fedd8:	6849      	ldr	r1, [r1, #4]
 23fedda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 23fedde:	68a3      	ldr	r3, [r4, #8]
 23fede0:	f108 0601 	add.w	r6, r8, #1
 23fede4:	42b3      	cmp	r3, r6
 23fede6:	db0b      	blt.n	23fee00 <__lshift+0x38>
 23fede8:	4638      	mov	r0, r7
 23fedea:	f7ff fd91 	bl	23fe910 <_Balloc>
 23fedee:	4605      	mov	r5, r0
 23fedf0:	b948      	cbnz	r0, 23fee06 <__lshift+0x3e>
 23fedf2:	4602      	mov	r2, r0
 23fedf4:	4b2a      	ldr	r3, [pc, #168]	; (23feea0 <__lshift+0xd8>)
 23fedf6:	f240 11d9 	movw	r1, #473	; 0x1d9
 23fedfa:	482a      	ldr	r0, [pc, #168]	; (23feea4 <__lshift+0xdc>)
 23fedfc:	f7fb f8bc 	bl	23f9f78 <__assert_func>
 23fee00:	3101      	adds	r1, #1
 23fee02:	005b      	lsls	r3, r3, #1
 23fee04:	e7ee      	b.n	23fede4 <__lshift+0x1c>
 23fee06:	2300      	movs	r3, #0
 23fee08:	f100 0114 	add.w	r1, r0, #20
 23fee0c:	f100 0210 	add.w	r2, r0, #16
 23fee10:	4618      	mov	r0, r3
 23fee12:	4553      	cmp	r3, sl
 23fee14:	db37      	blt.n	23fee86 <__lshift+0xbe>
 23fee16:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 23fee1a:	f104 0314 	add.w	r3, r4, #20
 23fee1e:	6920      	ldr	r0, [r4, #16]
 23fee20:	f019 091f 	ands.w	r9, r9, #31
 23fee24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 23fee28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 23fee2c:	d02f      	beq.n	23fee8e <__lshift+0xc6>
 23fee2e:	f1c9 0e20 	rsb	lr, r9, #32
 23fee32:	468a      	mov	sl, r1
 23fee34:	f04f 0c00 	mov.w	ip, #0
 23fee38:	681a      	ldr	r2, [r3, #0]
 23fee3a:	fa02 f209 	lsl.w	r2, r2, r9
 23fee3e:	ea42 020c 	orr.w	r2, r2, ip
 23fee42:	f84a 2b04 	str.w	r2, [sl], #4
 23fee46:	f853 2b04 	ldr.w	r2, [r3], #4
 23fee4a:	4298      	cmp	r0, r3
 23fee4c:	fa22 fc0e 	lsr.w	ip, r2, lr
 23fee50:	d8f2      	bhi.n	23fee38 <__lshift+0x70>
 23fee52:	1b03      	subs	r3, r0, r4
 23fee54:	f104 0215 	add.w	r2, r4, #21
 23fee58:	3b15      	subs	r3, #21
 23fee5a:	f023 0303 	bic.w	r3, r3, #3
 23fee5e:	3304      	adds	r3, #4
 23fee60:	4290      	cmp	r0, r2
 23fee62:	bf38      	it	cc
 23fee64:	2304      	movcc	r3, #4
 23fee66:	f841 c003 	str.w	ip, [r1, r3]
 23fee6a:	f1bc 0f00 	cmp.w	ip, #0
 23fee6e:	d001      	beq.n	23fee74 <__lshift+0xac>
 23fee70:	f108 0602 	add.w	r6, r8, #2
 23fee74:	3e01      	subs	r6, #1
 23fee76:	4638      	mov	r0, r7
 23fee78:	4621      	mov	r1, r4
 23fee7a:	612e      	str	r6, [r5, #16]
 23fee7c:	f7ff fd88 	bl	23fe990 <_Bfree>
 23fee80:	4628      	mov	r0, r5
 23fee82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fee86:	3301      	adds	r3, #1
 23fee88:	f842 0f04 	str.w	r0, [r2, #4]!
 23fee8c:	e7c1      	b.n	23fee12 <__lshift+0x4a>
 23fee8e:	3904      	subs	r1, #4
 23fee90:	f853 2b04 	ldr.w	r2, [r3], #4
 23fee94:	4298      	cmp	r0, r3
 23fee96:	f841 2f04 	str.w	r2, [r1, #4]!
 23fee9a:	d8f9      	bhi.n	23fee90 <__lshift+0xc8>
 23fee9c:	e7ea      	b.n	23fee74 <__lshift+0xac>
 23fee9e:	bf00      	nop
 23feea0:	023ffde1 	.word	0x023ffde1
 23feea4:	023ffe68 	.word	0x023ffe68

023feea8 <__mcmp>:
 23feea8:	6902      	ldr	r2, [r0, #16]
 23feeaa:	b530      	push	{r4, r5, lr}
 23feeac:	690c      	ldr	r4, [r1, #16]
 23feeae:	1b12      	subs	r2, r2, r4
 23feeb0:	d10e      	bne.n	23feed0 <__mcmp+0x28>
 23feeb2:	f100 0314 	add.w	r3, r0, #20
 23feeb6:	3114      	adds	r1, #20
 23feeb8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 23feebc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 23feec0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 23feec4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 23feec8:	42a5      	cmp	r5, r4
 23feeca:	d003      	beq.n	23feed4 <__mcmp+0x2c>
 23feecc:	d305      	bcc.n	23feeda <__mcmp+0x32>
 23feece:	2201      	movs	r2, #1
 23feed0:	4610      	mov	r0, r2
 23feed2:	bd30      	pop	{r4, r5, pc}
 23feed4:	4283      	cmp	r3, r0
 23feed6:	d3f3      	bcc.n	23feec0 <__mcmp+0x18>
 23feed8:	e7fa      	b.n	23feed0 <__mcmp+0x28>
 23feeda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23feede:	e7f7      	b.n	23feed0 <__mcmp+0x28>

023feee0 <__mdiff>:
 23feee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23feee4:	460c      	mov	r4, r1
 23feee6:	4606      	mov	r6, r0
 23feee8:	4611      	mov	r1, r2
 23feeea:	4692      	mov	sl, r2
 23feeec:	4620      	mov	r0, r4
 23feeee:	f7ff ffdb 	bl	23feea8 <__mcmp>
 23feef2:	1e05      	subs	r5, r0, #0
 23feef4:	d110      	bne.n	23fef18 <__mdiff+0x38>
 23feef6:	4629      	mov	r1, r5
 23feef8:	4630      	mov	r0, r6
 23feefa:	f7ff fd09 	bl	23fe910 <_Balloc>
 23feefe:	b930      	cbnz	r0, 23fef0e <__mdiff+0x2e>
 23fef00:	4b3d      	ldr	r3, [pc, #244]	; (23feff8 <__mdiff+0x118>)
 23fef02:	4602      	mov	r2, r0
 23fef04:	f240 2132 	movw	r1, #562	; 0x232
 23fef08:	483c      	ldr	r0, [pc, #240]	; (23feffc <__mdiff+0x11c>)
 23fef0a:	f7fb f835 	bl	23f9f78 <__assert_func>
 23fef0e:	2301      	movs	r3, #1
 23fef10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 23fef14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fef18:	bfa4      	itt	ge
 23fef1a:	4653      	movge	r3, sl
 23fef1c:	46a2      	movge	sl, r4
 23fef1e:	4630      	mov	r0, r6
 23fef20:	bfa8      	it	ge
 23fef22:	2500      	movge	r5, #0
 23fef24:	f8da 1004 	ldr.w	r1, [sl, #4]
 23fef28:	bfac      	ite	ge
 23fef2a:	461c      	movge	r4, r3
 23fef2c:	2501      	movlt	r5, #1
 23fef2e:	f7ff fcef 	bl	23fe910 <_Balloc>
 23fef32:	b920      	cbnz	r0, 23fef3e <__mdiff+0x5e>
 23fef34:	4b30      	ldr	r3, [pc, #192]	; (23feff8 <__mdiff+0x118>)
 23fef36:	4602      	mov	r2, r0
 23fef38:	f44f 7110 	mov.w	r1, #576	; 0x240
 23fef3c:	e7e4      	b.n	23fef08 <__mdiff+0x28>
 23fef3e:	f8da 7010 	ldr.w	r7, [sl, #16]
 23fef42:	f104 0914 	add.w	r9, r4, #20
 23fef46:	6926      	ldr	r6, [r4, #16]
 23fef48:	f100 0814 	add.w	r8, r0, #20
 23fef4c:	60c5      	str	r5, [r0, #12]
 23fef4e:	f10a 0514 	add.w	r5, sl, #20
 23fef52:	f10a 0210 	add.w	r2, sl, #16
 23fef56:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 23fef5a:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 23fef5e:	46c2      	mov	sl, r8
 23fef60:	f04f 0c00 	mov.w	ip, #0
 23fef64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 23fef68:	f859 3b04 	ldr.w	r3, [r9], #4
 23fef6c:	fa1f f18b 	uxth.w	r1, fp
 23fef70:	454e      	cmp	r6, r9
 23fef72:	448c      	add	ip, r1
 23fef74:	b299      	uxth	r1, r3
 23fef76:	ea4f 4313 	mov.w	r3, r3, lsr #16
 23fef7a:	ebac 0101 	sub.w	r1, ip, r1
 23fef7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 23fef82:	eb03 4321 	add.w	r3, r3, r1, asr #16
 23fef86:	b289      	uxth	r1, r1
 23fef88:	ea4f 4c23 	mov.w	ip, r3, asr #16
 23fef8c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 23fef90:	f84a 3b04 	str.w	r3, [sl], #4
 23fef94:	d8e6      	bhi.n	23fef64 <__mdiff+0x84>
 23fef96:	1b33      	subs	r3, r6, r4
 23fef98:	3415      	adds	r4, #21
 23fef9a:	3b15      	subs	r3, #21
 23fef9c:	f023 0303 	bic.w	r3, r3, #3
 23fefa0:	3304      	adds	r3, #4
 23fefa2:	42a6      	cmp	r6, r4
 23fefa4:	bf38      	it	cc
 23fefa6:	2304      	movcc	r3, #4
 23fefa8:	441d      	add	r5, r3
 23fefaa:	4443      	add	r3, r8
 23fefac:	462c      	mov	r4, r5
 23fefae:	461e      	mov	r6, r3
 23fefb0:	4574      	cmp	r4, lr
 23fefb2:	d30e      	bcc.n	23fefd2 <__mdiff+0xf2>
 23fefb4:	f10e 0203 	add.w	r2, lr, #3
 23fefb8:	1b52      	subs	r2, r2, r5
 23fefba:	3d03      	subs	r5, #3
 23fefbc:	f022 0203 	bic.w	r2, r2, #3
 23fefc0:	45ae      	cmp	lr, r5
 23fefc2:	bf38      	it	cc
 23fefc4:	2200      	movcc	r2, #0
 23fefc6:	441a      	add	r2, r3
 23fefc8:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 23fefcc:	b18b      	cbz	r3, 23feff2 <__mdiff+0x112>
 23fefce:	6107      	str	r7, [r0, #16]
 23fefd0:	e7a0      	b.n	23fef14 <__mdiff+0x34>
 23fefd2:	f854 8b04 	ldr.w	r8, [r4], #4
 23fefd6:	fa1f f288 	uxth.w	r2, r8
 23fefda:	4462      	add	r2, ip
 23fefdc:	1411      	asrs	r1, r2, #16
 23fefde:	b292      	uxth	r2, r2
 23fefe0:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 23fefe4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 23fefe8:	ea4f 4c21 	mov.w	ip, r1, asr #16
 23fefec:	f846 2b04 	str.w	r2, [r6], #4
 23feff0:	e7de      	b.n	23fefb0 <__mdiff+0xd0>
 23feff2:	3f01      	subs	r7, #1
 23feff4:	e7e8      	b.n	23fefc8 <__mdiff+0xe8>
 23feff6:	bf00      	nop
 23feff8:	023ffde1 	.word	0x023ffde1
 23feffc:	023ffe68 	.word	0x023ffe68

023ff000 <__ulp>:
 23ff000:	b082      	sub	sp, #8
 23ff002:	4913      	ldr	r1, [pc, #76]	; (23ff050 <__ulp+0x50>)
 23ff004:	ed8d 0b00 	vstr	d0, [sp]
 23ff008:	9b01      	ldr	r3, [sp, #4]
 23ff00a:	4019      	ands	r1, r3
 23ff00c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 23ff010:	2900      	cmp	r1, #0
 23ff012:	dd05      	ble.n	23ff020 <__ulp+0x20>
 23ff014:	2200      	movs	r2, #0
 23ff016:	460b      	mov	r3, r1
 23ff018:	ec43 2b10 	vmov	d0, r2, r3
 23ff01c:	b002      	add	sp, #8
 23ff01e:	4770      	bx	lr
 23ff020:	4249      	negs	r1, r1
 23ff022:	2200      	movs	r2, #0
 23ff024:	2300      	movs	r3, #0
 23ff026:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 23ff02a:	ea4f 5021 	mov.w	r0, r1, asr #20
 23ff02e:	da04      	bge.n	23ff03a <__ulp+0x3a>
 23ff030:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 23ff034:	fa41 f300 	asr.w	r3, r1, r0
 23ff038:	e7ee      	b.n	23ff018 <__ulp+0x18>
 23ff03a:	f1a0 0114 	sub.w	r1, r0, #20
 23ff03e:	291e      	cmp	r1, #30
 23ff040:	bfd6      	itet	le
 23ff042:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 23ff046:	2101      	movgt	r1, #1
 23ff048:	fa20 f101 	lsrle.w	r1, r0, r1
 23ff04c:	460a      	mov	r2, r1
 23ff04e:	e7e3      	b.n	23ff018 <__ulp+0x18>
 23ff050:	7ff00000 	.word	0x7ff00000

023ff054 <__b2d>:
 23ff054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ff056:	6905      	ldr	r5, [r0, #16]
 23ff058:	f100 0714 	add.w	r7, r0, #20
 23ff05c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 23ff060:	f855 4c04 	ldr.w	r4, [r5, #-4]
 23ff064:	1f2e      	subs	r6, r5, #4
 23ff066:	4620      	mov	r0, r4
 23ff068:	f7ff fd46 	bl	23feaf8 <__hi0bits>
 23ff06c:	f1c0 0320 	rsb	r3, r0, #32
 23ff070:	280a      	cmp	r0, #10
 23ff072:	f8df c07c 	ldr.w	ip, [pc, #124]	; 23ff0f0 <__b2d+0x9c>
 23ff076:	600b      	str	r3, [r1, #0]
 23ff078:	dc15      	bgt.n	23ff0a6 <__b2d+0x52>
 23ff07a:	f1c0 0e0b 	rsb	lr, r0, #11
 23ff07e:	42b7      	cmp	r7, r6
 23ff080:	f100 0015 	add.w	r0, r0, #21
 23ff084:	fa24 f10e 	lsr.w	r1, r4, lr
 23ff088:	fa04 f000 	lsl.w	r0, r4, r0
 23ff08c:	ea41 030c 	orr.w	r3, r1, ip
 23ff090:	bf34      	ite	cc
 23ff092:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 23ff096:	2100      	movcs	r1, #0
 23ff098:	fa21 f10e 	lsr.w	r1, r1, lr
 23ff09c:	ea40 0201 	orr.w	r2, r0, r1
 23ff0a0:	ec43 2b10 	vmov	d0, r2, r3
 23ff0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23ff0a6:	42b7      	cmp	r7, r6
 23ff0a8:	bf3a      	itte	cc
 23ff0aa:	f1a5 0608 	subcc.w	r6, r5, #8
 23ff0ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 23ff0b2:	2100      	movcs	r1, #0
 23ff0b4:	380b      	subs	r0, #11
 23ff0b6:	d017      	beq.n	23ff0e8 <__b2d+0x94>
 23ff0b8:	f1c0 0c20 	rsb	ip, r0, #32
 23ff0bc:	fa04 f500 	lsl.w	r5, r4, r0
 23ff0c0:	42be      	cmp	r6, r7
 23ff0c2:	fa01 f000 	lsl.w	r0, r1, r0
 23ff0c6:	fa21 f40c 	lsr.w	r4, r1, ip
 23ff0ca:	ea45 0504 	orr.w	r5, r5, r4
 23ff0ce:	bf8c      	ite	hi
 23ff0d0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 23ff0d4:	2400      	movls	r4, #0
 23ff0d6:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 23ff0da:	fa24 f40c 	lsr.w	r4, r4, ip
 23ff0de:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 23ff0e2:	ea40 0204 	orr.w	r2, r0, r4
 23ff0e6:	e7db      	b.n	23ff0a0 <__b2d+0x4c>
 23ff0e8:	ea44 030c 	orr.w	r3, r4, ip
 23ff0ec:	460a      	mov	r2, r1
 23ff0ee:	e7d7      	b.n	23ff0a0 <__b2d+0x4c>
 23ff0f0:	3ff00000 	.word	0x3ff00000

023ff0f4 <__d2b>:
 23ff0f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23ff0f8:	4689      	mov	r9, r1
 23ff0fa:	2101      	movs	r1, #1
 23ff0fc:	4690      	mov	r8, r2
 23ff0fe:	ec57 6b10 	vmov	r6, r7, d0
 23ff102:	f7ff fc05 	bl	23fe910 <_Balloc>
 23ff106:	4604      	mov	r4, r0
 23ff108:	b930      	cbnz	r0, 23ff118 <__d2b+0x24>
 23ff10a:	4602      	mov	r2, r0
 23ff10c:	4b25      	ldr	r3, [pc, #148]	; (23ff1a4 <__d2b+0xb0>)
 23ff10e:	f240 310a 	movw	r1, #778	; 0x30a
 23ff112:	4825      	ldr	r0, [pc, #148]	; (23ff1a8 <__d2b+0xb4>)
 23ff114:	f7fa ff30 	bl	23f9f78 <__assert_func>
 23ff118:	f3c7 550a 	ubfx	r5, r7, #20, #11
 23ff11c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 23ff120:	bb35      	cbnz	r5, 23ff170 <__d2b+0x7c>
 23ff122:	2e00      	cmp	r6, #0
 23ff124:	9301      	str	r3, [sp, #4]
 23ff126:	d028      	beq.n	23ff17a <__d2b+0x86>
 23ff128:	4668      	mov	r0, sp
 23ff12a:	9600      	str	r6, [sp, #0]
 23ff12c:	f7ff fd04 	bl	23feb38 <__lo0bits>
 23ff130:	9900      	ldr	r1, [sp, #0]
 23ff132:	b300      	cbz	r0, 23ff176 <__d2b+0x82>
 23ff134:	9a01      	ldr	r2, [sp, #4]
 23ff136:	f1c0 0320 	rsb	r3, r0, #32
 23ff13a:	fa02 f303 	lsl.w	r3, r2, r3
 23ff13e:	40c2      	lsrs	r2, r0
 23ff140:	430b      	orrs	r3, r1
 23ff142:	9201      	str	r2, [sp, #4]
 23ff144:	6163      	str	r3, [r4, #20]
 23ff146:	9b01      	ldr	r3, [sp, #4]
 23ff148:	2b00      	cmp	r3, #0
 23ff14a:	61a3      	str	r3, [r4, #24]
 23ff14c:	bf14      	ite	ne
 23ff14e:	2202      	movne	r2, #2
 23ff150:	2201      	moveq	r2, #1
 23ff152:	6122      	str	r2, [r4, #16]
 23ff154:	b1d5      	cbz	r5, 23ff18c <__d2b+0x98>
 23ff156:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 23ff15a:	4405      	add	r5, r0
 23ff15c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 23ff160:	f8c9 5000 	str.w	r5, [r9]
 23ff164:	f8c8 0000 	str.w	r0, [r8]
 23ff168:	4620      	mov	r0, r4
 23ff16a:	b003      	add	sp, #12
 23ff16c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23ff170:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23ff174:	e7d5      	b.n	23ff122 <__d2b+0x2e>
 23ff176:	6161      	str	r1, [r4, #20]
 23ff178:	e7e5      	b.n	23ff146 <__d2b+0x52>
 23ff17a:	a801      	add	r0, sp, #4
 23ff17c:	f7ff fcdc 	bl	23feb38 <__lo0bits>
 23ff180:	9b01      	ldr	r3, [sp, #4]
 23ff182:	2201      	movs	r2, #1
 23ff184:	3020      	adds	r0, #32
 23ff186:	6163      	str	r3, [r4, #20]
 23ff188:	6122      	str	r2, [r4, #16]
 23ff18a:	e7e3      	b.n	23ff154 <__d2b+0x60>
 23ff18c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 23ff190:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 23ff194:	f8c9 0000 	str.w	r0, [r9]
 23ff198:	6918      	ldr	r0, [r3, #16]
 23ff19a:	f7ff fcad 	bl	23feaf8 <__hi0bits>
 23ff19e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 23ff1a2:	e7df      	b.n	23ff164 <__d2b+0x70>
 23ff1a4:	023ffde1 	.word	0x023ffde1
 23ff1a8:	023ffe68 	.word	0x023ffe68

023ff1ac <__ratio>:
 23ff1ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff1b0:	4688      	mov	r8, r1
 23ff1b2:	4681      	mov	r9, r0
 23ff1b4:	4669      	mov	r1, sp
 23ff1b6:	f7ff ff4d 	bl	23ff054 <__b2d>
 23ff1ba:	a901      	add	r1, sp, #4
 23ff1bc:	4640      	mov	r0, r8
 23ff1be:	ec55 4b10 	vmov	r4, r5, d0
 23ff1c2:	f7ff ff47 	bl	23ff054 <__b2d>
 23ff1c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 23ff1ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 23ff1ce:	462f      	mov	r7, r5
 23ff1d0:	eba3 0c02 	sub.w	ip, r3, r2
 23ff1d4:	e9dd 3200 	ldrd	r3, r2, [sp]
 23ff1d8:	ec51 0b10 	vmov	r0, r1, d0
 23ff1dc:	1a9b      	subs	r3, r3, r2
 23ff1de:	468b      	mov	fp, r1
 23ff1e0:	4620      	mov	r0, r4
 23ff1e2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 23ff1e6:	2b00      	cmp	r3, #0
 23ff1e8:	bfd5      	itete	le
 23ff1ea:	460a      	movle	r2, r1
 23ff1ec:	462a      	movgt	r2, r5
 23ff1ee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 23ff1f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 23ff1f6:	bfd8      	it	le
 23ff1f8:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 23ff1fc:	ee10 2a10 	vmov	r2, s0
 23ff200:	4639      	mov	r1, r7
 23ff202:	465b      	mov	r3, fp
 23ff204:	f7f7 f8aa 	bl	23f635c <__aeabi_ddiv>
 23ff208:	ec41 0b10 	vmov	d0, r0, r1
 23ff20c:	b003      	add	sp, #12
 23ff20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023ff212 <__copybits>:
 23ff212:	3901      	subs	r1, #1
 23ff214:	f102 0314 	add.w	r3, r2, #20
 23ff218:	1149      	asrs	r1, r1, #5
 23ff21a:	b570      	push	{r4, r5, r6, lr}
 23ff21c:	3101      	adds	r1, #1
 23ff21e:	6914      	ldr	r4, [r2, #16]
 23ff220:	1f05      	subs	r5, r0, #4
 23ff222:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 23ff226:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 23ff22a:	42a3      	cmp	r3, r4
 23ff22c:	d30c      	bcc.n	23ff248 <__copybits+0x36>
 23ff22e:	1aa3      	subs	r3, r4, r2
 23ff230:	3211      	adds	r2, #17
 23ff232:	3b11      	subs	r3, #17
 23ff234:	f023 0303 	bic.w	r3, r3, #3
 23ff238:	42a2      	cmp	r2, r4
 23ff23a:	bf88      	it	hi
 23ff23c:	2300      	movhi	r3, #0
 23ff23e:	4418      	add	r0, r3
 23ff240:	2300      	movs	r3, #0
 23ff242:	4288      	cmp	r0, r1
 23ff244:	d305      	bcc.n	23ff252 <__copybits+0x40>
 23ff246:	bd70      	pop	{r4, r5, r6, pc}
 23ff248:	f853 6b04 	ldr.w	r6, [r3], #4
 23ff24c:	f845 6f04 	str.w	r6, [r5, #4]!
 23ff250:	e7eb      	b.n	23ff22a <__copybits+0x18>
 23ff252:	f840 3b04 	str.w	r3, [r0], #4
 23ff256:	e7f4      	b.n	23ff242 <__copybits+0x30>

023ff258 <__any_on>:
 23ff258:	f100 0214 	add.w	r2, r0, #20
 23ff25c:	114b      	asrs	r3, r1, #5
 23ff25e:	6900      	ldr	r0, [r0, #16]
 23ff260:	4298      	cmp	r0, r3
 23ff262:	b510      	push	{r4, lr}
 23ff264:	db11      	blt.n	23ff28a <__any_on+0x32>
 23ff266:	dd0a      	ble.n	23ff27e <__any_on+0x26>
 23ff268:	f011 011f 	ands.w	r1, r1, #31
 23ff26c:	d007      	beq.n	23ff27e <__any_on+0x26>
 23ff26e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 23ff272:	fa24 f001 	lsr.w	r0, r4, r1
 23ff276:	fa00 f101 	lsl.w	r1, r0, r1
 23ff27a:	428c      	cmp	r4, r1
 23ff27c:	d10b      	bne.n	23ff296 <__any_on+0x3e>
 23ff27e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 23ff282:	4293      	cmp	r3, r2
 23ff284:	d803      	bhi.n	23ff28e <__any_on+0x36>
 23ff286:	2000      	movs	r0, #0
 23ff288:	bd10      	pop	{r4, pc}
 23ff28a:	4603      	mov	r3, r0
 23ff28c:	e7f7      	b.n	23ff27e <__any_on+0x26>
 23ff28e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 23ff292:	2900      	cmp	r1, #0
 23ff294:	d0f5      	beq.n	23ff282 <__any_on+0x2a>
 23ff296:	2001      	movs	r0, #1
 23ff298:	e7f6      	b.n	23ff288 <__any_on+0x30>

023ff29a <_calloc_r>:
 23ff29a:	434a      	muls	r2, r1
 23ff29c:	b513      	push	{r0, r1, r4, lr}
 23ff29e:	4611      	mov	r1, r2
 23ff2a0:	9201      	str	r2, [sp, #4]
 23ff2a2:	f7fa fe4d 	bl	23f9f40 <_malloc_r>
 23ff2a6:	4604      	mov	r4, r0
 23ff2a8:	b118      	cbz	r0, 23ff2b2 <_calloc_r+0x18>
 23ff2aa:	9a01      	ldr	r2, [sp, #4]
 23ff2ac:	2100      	movs	r1, #0
 23ff2ae:	f7fd fff6 	bl	23fd29e <memset>
 23ff2b2:	4620      	mov	r0, r4
 23ff2b4:	b002      	add	sp, #8
 23ff2b6:	bd10      	pop	{r4, pc}

023ff2b8 <__ascii_wctomb>:
 23ff2b8:	b149      	cbz	r1, 23ff2ce <__ascii_wctomb+0x16>
 23ff2ba:	2aff      	cmp	r2, #255	; 0xff
 23ff2bc:	bf8d      	iteet	hi
 23ff2be:	238a      	movhi	r3, #138	; 0x8a
 23ff2c0:	2001      	movls	r0, #1
 23ff2c2:	700a      	strbls	r2, [r1, #0]
 23ff2c4:	6003      	strhi	r3, [r0, #0]
 23ff2c6:	bf88      	it	hi
 23ff2c8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 23ff2cc:	4770      	bx	lr
 23ff2ce:	4608      	mov	r0, r1
 23ff2d0:	4770      	bx	lr
	...

023ff2d4 <link_const_data_start>:
 23ff2d4:	514d0400 	.word	0x514d0400
 23ff2d8:	00045454 	.word	0x00045454
 23ff2dc:	49514d06 	.word	0x49514d06
 23ff2e0:	03706473 	.word	0x03706473

023ff2e4 <dynalib_user>:
 23ff2e4:	023f6b35 023f6b5d 023f6b61 00000000     5k?.]k?.ak?.....
 23ff2f4:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23ff304:	6c617574 32393100 3836312e 332e302e     tual.192.168.0.3
 23ff314:	65420033 74614264 00000068              3.BedBath...

023ff320 <_ZTVN5spark10LogHandlerE>:
	...
 23ff330:	023f6b81 023f6ba9                       .k?..k?.

023ff338 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ff340:	023f6bad 023f6be1 023fb2d9 023fb481     .k?..k?...?...?.
 23ff350:	2074756f 6d20666f 726f6d65 636f2079     out of memory oc
 23ff360:	72727563 73206465 3d657a69 50006425     curred size=%d.P
 23ff370:	69747261 2e656c63 73206f69 63736275     article.io subsc
 23ff380:	65626972 63657220 65766965 61642064     ribe received da
 23ff390:	203a6174 2c270027 6c002720 7300676f     ta: '.', '.log.s
 23ff3a0:	69547465 6f7a656d 203a656e 67654200     etTimezone: .Beg
 23ff3b0:	44206e69 53005453 69747465 7420676e     in DST.Setting t
 23ff3c0:	7a656d69 20656e6f 00206f74 69766544     imezone to .Devi
 23ff3d0:	00736563 63656843 73696c6b 74530074     ces.Checklist.St
 23ff3e0:	73757461 74617000 746f6972 74657300     atus.patriot.set
 23ff3f0:	44495353 74732f00 73757461 66664f00     SSID./status.Off
 23ff400:	656e696c 00644900 6e6e6f43 69746365     line.Id.Connecti
 23ff410:	7420676e 514d206f 4d005454 20545451     ng to MQTT.MQTT 
 23ff420:	20676f6c 646e6168 2072656c 65646461     log handler adde
 23ff430:	65520064 746f6f62 2e676e69 6d002e2e     d.Rebooting....m
 23ff440:	20747471 6e6e6f63 65746365 73202c64     qtt connected, s
 23ff450:	63736275 69626972 2e2e676e 0023002e     ubscribing....#.
 23ff460:	5454514d 6d695420 74756f65 514d002e     MQTT Timeout..MQ
 23ff470:	6e205454 6320746f 656e6e6f 64657463     TT not connected
 23ff480:	6572202c 2e797274 57002e2e 20694669     , retry....WiFi 
 23ff490:	20544f4e 64616572 75700079 73696c62     NOT ready.publis
 23ff4a0:	68772068 20656c69 5454514d 746f6e20     h while MQTT not
 23ff4b0:	6e6f6320 7463656e 203a6465 00202c00      connected: ., .
 23ff4c0:	25206125 4d253a48 6c612f00 2f657669     %a %H:%M./alive/
 23ff4d0:	63612f00 6e002f6b 00656e6f 6f727265     ./ack/.none.erro
 23ff4e0:	61770072 77006e72 696e7261 6900676e     r.warn.warning.i
 23ff4f0:	006f666e 63617274 6c610065 6361006c     nfo.trace.all.ac
 23ff500:	6c61006b 00657669 6e6f7266 6e617074     k.alive.frontpan
 23ff510:	6c006c65 73746665 6564696c 61657200     el.leftslide.rea
 23ff520:	6e617072 62006c65 68676972 73656e74     rpanel.brightnes
 23ff530:	616c0073 6e6f6c74 203a0067 646c6f68     s.latlong.: hold
 23ff540:	00300020 2f74616c 676e6f6c 00203d20      .0.lat/long = .
 23ff550:	6553002c 6e697474 616c2067 6f6c2f74     ,.Setting lat/lo
 23ff560:	203a676e 676f6c00 6576656c 7320006c     ng: .loglevel. s
 23ff570:	69747465 6c20676e 654c676f 206c6576     etting logLevel 
 23ff580:	6d00203d 726f6d65 203a0079 65657266     = .memory.: free
 23ff590:	6d656d20 2079726f 6425203d 65757100      memory = %d.que
 23ff5a0:	3a007972 63657220 65766965 75712064     ry.: received qu
 23ff5b0:	20797265 72646461 65737365 6f742064     ery addressed to
 23ff5c0:	00737520 65736572 203a0074 65736572      us.reset.: rese
 23ff5d0:	64612074 73657264 20646573 75206f74     t addressed to u
 23ff5e0:	65740073 74007473 00657572 0066666f     s.test.true.off.
 23ff5f0:	736c6166 716d0065 3a007474 73657420     false.mqtt.: tes
 23ff600:	69642074 6c626173 514d2065 3a005454     t disable MQTT.:
 23ff610:	63657220 65766965 69742064 6f7a656d      received timezo
 23ff620:	3d20656e 203a0020 74746573 20676e69     ne = .: setting 
 23ff630:	656d6974 656e6f7a 3a6f7420 6e490020     timezone to: .In
 23ff640:	696c6176 69742064 6f7a656d 6800656e     valid timezone.h
 23ff650:	00646c6f 2f676f6c 28003a00 00203a29     old.log/.:.(): .
 23ff660:	63005b20 2065646f 7025203d 74656400      [.code = %p.det
 23ff670:	736c6961 00203d20                       ails = .

023ff678 <_ZTV11MQTTManager>:
	...
 23ff680:	023f75a5 023f75cd 023f8245 023f6ba9     .u?..u?.E.?..k?.
 23ff690:	69766544 20736563 69726176 656c6261     Devices variable
 23ff6a0:	20736920 206f6f74 676e6f6c 654e202e      is too long. Ne
 23ff6b0:	74206465 7865206f 646e6574 206f7420     ed to extend to 
 23ff6c0:	6e322061 61762064 62616972 3d00656c     a 2nd variable.=
 23ff6d0:	61745300 20737574 69726176 656c6261     .Status variable
 23ff6e0:	20736920 206f6f74 676e6f6c 654e202e      is too long. Ne
 23ff6f0:	74206465 7865206f 646e6574 206f7420     ed to extend to 
 23ff700:	6e322061 61762064 62616972 7300656c     a 2nd variable.s
 23ff710:	53537465 69204449 206f666e 6f636e69     etSSID info inco
 23ff720:	63657272 00203a74 74746553 20676e69     rrect: .Setting 
 23ff730:	44495353 7361702f 726f7773 00203a64     SSID/password: .
 23ff740:	63656843 73696c6b 61762074 62616972     Checklist variab
 23ff750:	6920656c 6f742073 6f6c206f 202e676e     le is too long. 
 23ff760:	6465654e 206f7420 65747865 7420646e     Need to extend t
 23ff770:	2061206f 20646e32 69726176 656c6261     o a 2nd variable
 23ff780:	206f4e00 63656863 73696c6b 74692074     .No checklist it
 23ff790:	00736d65 6f727245 55203a72 6c62616e     ems.Error: Unabl
 23ff7a0:	6f742065 70786520 2065736f 75662000     e to expose . fu
 23ff7b0:	6974636e 73006e6f 65746174 0000002f     nction.state/...

023ff7c0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

023ff7c8 <_ZTVN5spark13EthernetClassE>:
	...
 23ff7d0:	023fa125 023fa11b 023fa111 023fa107     %.?...?...?...?.
 23ff7e0:	023fa0fb 023fa0ef 023fb66d 023fb675     ..?...?.m.?.u.?.
 23ff7f0:	023fa0e3 023fa0db 023fa0d1 023fa0c7     ..?...?...?...?.
 23ff800:	023fb79d 023fb6a5 023fb6ad              ..?...?...?.

023ff80c <_ZTV7TwoWire>:
	...
 23ff814:	023fa145 023fa18f 023fa167 023fa147     E.?...?.g.?.G.?.
 23ff824:	023fa16f 023fa177 023fa17f 023fa187     o.?.w.?...?...?.

023ff834 <_ZTV9IPAddress>:
	...
 23ff83c:	023fa1e9 023fa1d9 023fa1db 75007525     ..?...?...?.%u.u
 23ff84c:	78343025 75616200 65530064 6c616972     %04x.baud.Serial
 23ff85c:	72655300 316c6169 4f534a00 7274534e     .Serial1.JSONStr
 23ff86c:	4c6d6165 6148676f 656c646e 70610072     eamLogHandler.ap
 23ff87c:	30250070 20753031 00205d00 65646f63     p.%010u .] .code
 23ff88c:	00203d20 0d006925 006d000a 66006e6c      = .%i....m.ln.f
 23ff89c:	6f63006e 64006564 69617465 0000006c     n.code.detail...

023ff8ac <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ff8b4:	023fa6c1 023fa6e7 023fa6a5 023fa323     ..?...?...?.#.?.

023ff8c4 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ff8cc:	023fab85 023fab9d 023fb2d9 023fb481     ..?...?...?...?.

023ff8dc <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ff8e4:	023fabb1 023fabc5 023fb4b9 023fa6ad     ..?...?...?...?.

023ff8f4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ff8fc:	023fa6bf 023fa6f5 023fb23d 023fa6af     ..?...?.=.?...?.

023ff90c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ff914:	023fa6bd 023fa703 023faaed 023fa725     ..?...?...?.%.?.

023ff924 <CSWTCH.109>:
 23ff924:	1007ae08 1007aed0 1007ae48              ........H...

023ff930 <_ZTVN5spark12NetworkClassE>:
	...
 23ff938:	023fb62d 023fb637 023fb641 023fb64b     -.?.7.?.A.?.K.?.
 23ff948:	023fb655 023fb661 023fb66d 023fb675     U.?.a.?.m.?.u.?.
 23ff958:	023fb67d 023fb689 023fb691 023fb69b     }.?...?...?...?.
 23ff968:	023fb79d 023fb6a5 023fb6ad 69726977     ..?...?...?.wiri
 23ff978:	7200676e 20766365 6f727265 203d2072     ng.recv error = 
 23ff988:	00006425                                %d..

023ff98c <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ff994:	023fbf45 023fbf69 023fc49b 023fbf77     E.?.i.?...?.w.?.
 23ff9a4:	023fbf49                                I.?.

023ff9a8 <_ZTV9TCPClient>:
	...
 23ff9b0:	023fbff5 023fc029 023fbec1 023fbedb     ..?.).?...?...?.
 23ff9c0:	023fc331 023fbf05 023fc1a7 023fbf39     1.?...?...?.9.?.
 23ff9d0:	023fc239 023fc079 023fc1d5 023fc3e5     9.?.y.?...?...?.
 23ff9e0:	023fc175 023fbf3b 023fbeed 023fbf7d     u.?.;.?...?.}.?.
 23ff9f0:	023fc059 2b25005a 3a643330 75323025     Y.?.Z.%+03d:%02u
 23ffa00:	2d592500 252d6d25 48255464 3a4d253a     .%Y-%m-%dT%H:%M:
 23ffa10:	7a255325 63736100 656d6974 00000000     %S%z.asctime....

023ffa20 <_ZTV11USARTSerial>:
	...
 23ffa28:	023fc839 023fc8a5 023fc87d 023fb7c5     9.?...?.}.?...?.
 23ffa38:	023fc84d 023fc869 023fc85b 023fc877     M.?.i.?.[.?.w.?.
 23ffa48:	023fc83b 023fc83f                       ;.?.?.?.

023ffa50 <_ZTV9USBSerial>:
	...
 23ffa58:	023fc8fd 023fc965 023fc93b 023fb7c5     ..?.e.?.;.?...?.
 23ffa68:	023fc92d 023fc8ff 023fc90f 023fc95f     -.?...?...?._.?.
 23ffa78:	023fc91f 023fc8f7                       ..?...?.

023ffa80 <_ZTVN5spark9WiFiClassE>:
	...
 23ffa88:	023fca7d 023fca73 023fca69 023f75e1     }.?.s.?.i.?..u?.
 23ffa98:	023fca5d 023fca51 023fb66d 023fb675     ].?.Q.?.m.?.u.?.
 23ffaa8:	023fca45 023fca3d 023fca33 023fca29     E.?.=.?.3.?.).?.
 23ffab8:	023fb79d 023fb6a5 023fb6ad              ..?...?...?.

023ffac4 <_ZSt7nothrow>:
	...

023ffac5 <_ZTSSt19_Sp_make_shared_tag>:
 23ffac5:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 23ffad5:	5f646572 00676174                        red_tag....

023ffae0 <_ZTISt19_Sp_make_shared_tag>:
 23ffae0:	023ffb20 023ffac5                        .?...?.

023ffae8 <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffae8:	023ffb80 023ffaf4 023ffba4              ..?...?...?.

023ffaf4 <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffaf4:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 23ffb04:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 23ffb14:	00000045                                E...

023ffb18 <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffb18:	00000000 023ffae8 023fcfdd 023fcff1     ......?...?...?.
 23ffb28:	023fd185 023fd185 023fd05b 023fcf9d     ..?...?.[.?...?.
 23ffb38:	023fd043 023fd005 023fcfcf              C.?...?...?.

023ffb44 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffb44:	023ffb80 023ffb50 023ffae8              ..?.P.?...?.

023ffb50 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffb50:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 23ffb60:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 23ffb70:	456f666e 00000000                       nfoE....

023ffb78 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffb78:	00000000 023ffb44 023fd085 023fd099     ....D.?...?...?.
 23ffb88:	023fd185 023fd185 023fd05b 023fcf9d     ..?...?.[.?...?.
 23ffb98:	023fd159 023fd0e5 023fd0ad              Y.?...?...?.

023ffba4 <_ZTISt9type_info>:
 23ffba4:	023ffb20 023ffbac                        .?...?.

023ffbac <_ZTSSt9type_info>:
 23ffbac:	74397453 5f657079 6f666e69 332e2500     St9type_info.%.3
 23ffbbc:	2e252073 33257333 2e252064 253a6432     s %.3s%3d %.2d:%
 23ffbcc:	3a64322e 64322e25 0a642520               .2d:%.2d %d..

023ffbd9 <day_name.1>:
 23ffbd9:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
 23ffbe9:	61536972                                 riSat

023ffbee <mon_name.0>:
 23ffbee:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
 23ffbfe:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
 23ffc0e:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
 23ffc1e:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
 23ffc2e:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
 23ffc3e:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
 23ffc4e:	5f343231 36303631 36303831 732f3933     124_1606180639/s
 23ffc5e:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
 23ffc6e:	62696c2f 74732f63 62696c64 6e61722f     /libc/stdlib/ran
 23ffc7e:	00632e64 6900666e 7974696e 006e6100     d.c.nf.inity.an.
	...

023ffc90 <fpi.1>:
 23ffc90:	00000035 fffffbce 000003cb 00000001     5...............
 23ffca0:	00000000                                ....

023ffca4 <fpinan.0>:
 23ffca4:	00000034 fffffbce 000003cb 00000001     4...............
 23ffcb4:	00000000                                ....

023ffcb8 <tinytens>:
 23ffcb8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 23ffcc8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 23ffcd8:	64ac6f43 11680628                       Co.d(.h.

023ffce0 <_ctype_>:
 23ffce0:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffcf0:	20202020 20202020 20202020 20202020                     
 23ffd00:	10108820 10101010 10101010 10101010      ...............
 23ffd10:	04040410 04040404 10040404 10101010     ................
 23ffd20:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23ffd30:	01010101 01010101 01010101 10101010     ................
 23ffd40:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23ffd50:	02020202 02020202 02020202 10101010     ................
 23ffd60:	00000020 00000000 00000000 00000000      ...............
	...
 23ffde0:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
 23ffdf0:	742f0064 6a2f706d 696b6e65 472d736e     d./tmp/jenkins-G
 23ffe00:	312d4343 69702d30 696c6570 342d656e     CC-10-pipeline-4
 23ffe10:	30325f38 31313032 315f3432 31363036     8_20201124_16061
 23ffe20:	33363038 72732f39 656e2f63 62696c77     80639/src/newlib
 23ffe30:	77656e2f 2f62696c 6362696c 6474732f     /newlib/libc/std
 23ffe40:	2f62696c 6f746467 65672d61 78656874     lib/gdtoa-gethex
 23ffe50:	0000632e                                .c..

023ffe54 <_C_numeric_locale>:
 23ffe54:	023ff45c 023ff895 1007ab50 4f500043     \.?...?.P...C.PO
 23ffe64:	00584953 706d742f 6e656a2f 736e696b     SIX./tmp/jenkins
 23ffe74:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
 23ffe84:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
 23ffe94:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
 23ffea4:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
 23ffeb4:	696c6474 706d2f62 2e636572 00000063     tdlib/mprec.c...
 23ffec4:	00000000                                ....

023ffec8 <__mprec_bigtens>:
 23ffec8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 23ffed8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 23ffee8:	7f73bf3c 75154fdd                       <.s..O.u

023ffef0 <__mprec_tens>:
 23ffef0:	00000000 3ff00000 00000000 40240000     .......?......$@
 23fff00:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 23fff10:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 23fff20:	00000000 412e8480 00000000 416312d0     .......A......cA
 23fff30:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 23fff40:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 23fff50:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 23fff60:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 23fff70:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 23fff80:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 23fff90:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 23fffa0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 23fffb0:	79d99db4 44ea7843                       ...yCx.D

023fffb8 <p05.0>:
 23fffb8:	00000005 00000019 0000007d              ........}...

023fffc4 <link_const_data_end>:
 23fffc4:	023f6d21 	.word	0x023f6d21
 23fffc8:	023f754d 	.word	0x023f754d
 23fffcc:	023f8431 	.word	0x023f8431
 23fffd0:	023f8b19 	.word	0x023f8b19
 23fffd4:	023fa069 	.word	0x023fa069
 23fffd8:	023fa131 	.word	0x023fa131
 23fffdc:	023fb2c9 	.word	0x023fb2c9
 23fffe0:	023fb7b1 	.word	0x023fb7b1
 23fffe4:	023fb859 	.word	0x023fb859
 23fffe8:	023fbe9d 	.word	0x023fbe9d
 23fffec:	023fc825 	.word	0x023fc825
 23ffff0:	023fca89 	.word	0x023fca89
