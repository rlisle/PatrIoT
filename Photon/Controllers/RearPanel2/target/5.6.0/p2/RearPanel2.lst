
/Users/ronlisle/GitRepos/Patriot/Photon/Controllers/RearPanel2/target/5.6.0/p2/RearPanel2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085f2000  085f2000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085f2018  085f2018  00002018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  085f20a4  085f20a4  000020a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynalib      00000008  023f2b20  085f20b0  00002b20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .psram_text   0000d4cc  023f2b28  085f20b8  00002b28  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  5 .data_alt     00000000  023ffff4  023ffff4  00020000  2**0
                  CONTENTS
  6 .bss_alt      00000000  023ffff4  023ffff4  00020000  2**0
                  CONTENTS
  7 .data         000001fc  1007aad8  085ff584  0001aad8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000314  1007acd8  1007acd8  0002acd8  2**3
                  ALLOC
  9 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
 10 .backup       00000004  1007b400  085ff780  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .module_info_suffix_align 00000834  085ff784  085ff784  0001f784  2**0
                  ALLOC
 12 .module_info_product 00000006  085fffb8  085fffb8  0001f784  2**0
                  ALLOC
 13 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   001f0edb  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00020cb1  00000000  00000000  00210edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00054563  00000000  00000000  00231b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003f58  00000000  00000000  002860ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 0000ed18  00000000  00000000  0028a047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00033c25  00000000  00000000  00298d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00064abe  00000000  00000000  002cc984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000e3aa0  00000000  00000000  00331442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000c37c  00000000  00000000  00414ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085f2018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f2018:	4813      	ldr	r0, [pc, #76]	; (85f2068 <module_user_pre_init+0x50>)
 85f201a:	4914      	ldr	r1, [pc, #80]	; (85f206c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85f201c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f201e:	4288      	cmp	r0, r1
 85f2020:	d005      	beq.n	85f202e <module_user_pre_init+0x16>
 85f2022:	4a13      	ldr	r2, [pc, #76]	; (85f2070 <module_user_pre_init+0x58>)
 85f2024:	4282      	cmp	r2, r0
 85f2026:	d002      	beq.n	85f202e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85f2028:	4b12      	ldr	r3, [pc, #72]	; (85f2074 <module_user_pre_init+0x5c>)
 85f202a:	1a12      	subs	r2, r2, r0
 85f202c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85f202e:	4812      	ldr	r0, [pc, #72]	; (85f2078 <module_user_pre_init+0x60>)
 85f2030:	4a12      	ldr	r2, [pc, #72]	; (85f207c <module_user_pre_init+0x64>)
 85f2032:	2100      	movs	r1, #0
 85f2034:	4b12      	ldr	r3, [pc, #72]	; (85f2080 <module_user_pre_init+0x68>)
 85f2036:	1a12      	subs	r2, r2, r0
 85f2038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85f203a:	4812      	ldr	r0, [pc, #72]	; (85f2084 <module_user_pre_init+0x6c>)
 85f203c:	4912      	ldr	r1, [pc, #72]	; (85f2088 <module_user_pre_init+0x70>)
 85f203e:	4288      	cmp	r0, r1
 85f2040:	d005      	beq.n	85f204e <module_user_pre_init+0x36>
 85f2042:	4a12      	ldr	r2, [pc, #72]	; (85f208c <module_user_pre_init+0x74>)
 85f2044:	4282      	cmp	r2, r0
 85f2046:	d002      	beq.n	85f204e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85f2048:	4b0a      	ldr	r3, [pc, #40]	; (85f2074 <module_user_pre_init+0x5c>)
 85f204a:	1a12      	subs	r2, r2, r0
 85f204c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85f204e:	4810      	ldr	r0, [pc, #64]	; (85f2090 <module_user_pre_init+0x78>)
 85f2050:	4910      	ldr	r1, [pc, #64]	; (85f2094 <module_user_pre_init+0x7c>)
 85f2052:	4288      	cmp	r0, r1
 85f2054:	d005      	beq.n	85f2062 <module_user_pre_init+0x4a>
 85f2056:	4a10      	ldr	r2, [pc, #64]	; (85f2098 <module_user_pre_init+0x80>)
 85f2058:	4282      	cmp	r2, r0
 85f205a:	d002      	beq.n	85f2062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85f205c:	4b05      	ldr	r3, [pc, #20]	; (85f2074 <module_user_pre_init+0x5c>)
 85f205e:	1a12      	subs	r2, r2, r0
 85f2060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85f2062:	4801      	ldr	r0, [pc, #4]	; (85f2068 <module_user_pre_init+0x50>)
 85f2064:	bd08      	pop	{r3, pc}
 85f2066:	bf00      	nop
 85f2068:	1007aad8 	.word	0x1007aad8
 85f206c:	085ff584 	.word	0x085ff584
 85f2070:	1007acd4 	.word	0x1007acd4
 85f2074:	10110d2d 	.word	0x10110d2d
 85f2078:	1007acd8 	.word	0x1007acd8
 85f207c:	1007afec 	.word	0x1007afec
 85f2080:	10110ea1 	.word	0x10110ea1
 85f2084:	023f2b20 	.word	0x023f2b20
 85f2088:	085f20b0 	.word	0x085f20b0
 85f208c:	023f2b28 	.word	0x023f2b28
 85f2090:	023f2b28 	.word	0x023f2b28
 85f2094:	085f20b8 	.word	0x085f20b8
 85f2098:	023ffff4 	.word	0x023ffff4

085f209c <dynalib_preinit>:
 85f209c:	085f2019 00000000                       . _.....

Disassembly of section .psram_text:

023f2b28 <__aeabi_drsub>:
 23f2b28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23f2b2c:	e002      	b.n	23f2b34 <__adddf3>
 23f2b2e:	bf00      	nop

023f2b30 <__aeabi_dsub>:
 23f2b30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023f2b34 <__adddf3>:
 23f2b34:	b530      	push	{r4, r5, lr}
 23f2b36:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23f2b3a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23f2b3e:	ea94 0f05 	teq	r4, r5
 23f2b42:	bf08      	it	eq
 23f2b44:	ea90 0f02 	teqeq	r0, r2
 23f2b48:	bf1f      	itttt	ne
 23f2b4a:	ea54 0c00 	orrsne.w	ip, r4, r0
 23f2b4e:	ea55 0c02 	orrsne.w	ip, r5, r2
 23f2b52:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23f2b56:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f2b5a:	f000 80e2 	beq.w	23f2d22 <__adddf3+0x1ee>
 23f2b5e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23f2b62:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23f2b66:	bfb8      	it	lt
 23f2b68:	426d      	neglt	r5, r5
 23f2b6a:	dd0c      	ble.n	23f2b86 <__adddf3+0x52>
 23f2b6c:	442c      	add	r4, r5
 23f2b6e:	ea80 0202 	eor.w	r2, r0, r2
 23f2b72:	ea81 0303 	eor.w	r3, r1, r3
 23f2b76:	ea82 0000 	eor.w	r0, r2, r0
 23f2b7a:	ea83 0101 	eor.w	r1, r3, r1
 23f2b7e:	ea80 0202 	eor.w	r2, r0, r2
 23f2b82:	ea81 0303 	eor.w	r3, r1, r3
 23f2b86:	2d36      	cmp	r5, #54	; 0x36
 23f2b88:	bf88      	it	hi
 23f2b8a:	bd30      	pophi	{r4, r5, pc}
 23f2b8c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23f2b90:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23f2b94:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23f2b98:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23f2b9c:	d002      	beq.n	23f2ba4 <__adddf3+0x70>
 23f2b9e:	4240      	negs	r0, r0
 23f2ba0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f2ba4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23f2ba8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23f2bac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23f2bb0:	d002      	beq.n	23f2bb8 <__adddf3+0x84>
 23f2bb2:	4252      	negs	r2, r2
 23f2bb4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23f2bb8:	ea94 0f05 	teq	r4, r5
 23f2bbc:	f000 80a7 	beq.w	23f2d0e <__adddf3+0x1da>
 23f2bc0:	f1a4 0401 	sub.w	r4, r4, #1
 23f2bc4:	f1d5 0e20 	rsbs	lr, r5, #32
 23f2bc8:	db0d      	blt.n	23f2be6 <__adddf3+0xb2>
 23f2bca:	fa02 fc0e 	lsl.w	ip, r2, lr
 23f2bce:	fa22 f205 	lsr.w	r2, r2, r5
 23f2bd2:	1880      	adds	r0, r0, r2
 23f2bd4:	f141 0100 	adc.w	r1, r1, #0
 23f2bd8:	fa03 f20e 	lsl.w	r2, r3, lr
 23f2bdc:	1880      	adds	r0, r0, r2
 23f2bde:	fa43 f305 	asr.w	r3, r3, r5
 23f2be2:	4159      	adcs	r1, r3
 23f2be4:	e00e      	b.n	23f2c04 <__adddf3+0xd0>
 23f2be6:	f1a5 0520 	sub.w	r5, r5, #32
 23f2bea:	f10e 0e20 	add.w	lr, lr, #32
 23f2bee:	2a01      	cmp	r2, #1
 23f2bf0:	fa03 fc0e 	lsl.w	ip, r3, lr
 23f2bf4:	bf28      	it	cs
 23f2bf6:	f04c 0c02 	orrcs.w	ip, ip, #2
 23f2bfa:	fa43 f305 	asr.w	r3, r3, r5
 23f2bfe:	18c0      	adds	r0, r0, r3
 23f2c00:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23f2c04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f2c08:	d507      	bpl.n	23f2c1a <__adddf3+0xe6>
 23f2c0a:	f04f 0e00 	mov.w	lr, #0
 23f2c0e:	f1dc 0c00 	rsbs	ip, ip, #0
 23f2c12:	eb7e 0000 	sbcs.w	r0, lr, r0
 23f2c16:	eb6e 0101 	sbc.w	r1, lr, r1
 23f2c1a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23f2c1e:	d31b      	bcc.n	23f2c58 <__adddf3+0x124>
 23f2c20:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23f2c24:	d30c      	bcc.n	23f2c40 <__adddf3+0x10c>
 23f2c26:	0849      	lsrs	r1, r1, #1
 23f2c28:	ea5f 0030 	movs.w	r0, r0, rrx
 23f2c2c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23f2c30:	f104 0401 	add.w	r4, r4, #1
 23f2c34:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23f2c38:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23f2c3c:	f080 809a 	bcs.w	23f2d74 <__adddf3+0x240>
 23f2c40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23f2c44:	bf08      	it	eq
 23f2c46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23f2c4a:	f150 0000 	adcs.w	r0, r0, #0
 23f2c4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f2c52:	ea41 0105 	orr.w	r1, r1, r5
 23f2c56:	bd30      	pop	{r4, r5, pc}
 23f2c58:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23f2c5c:	4140      	adcs	r0, r0
 23f2c5e:	eb41 0101 	adc.w	r1, r1, r1
 23f2c62:	3c01      	subs	r4, #1
 23f2c64:	bf28      	it	cs
 23f2c66:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23f2c6a:	d2e9      	bcs.n	23f2c40 <__adddf3+0x10c>
 23f2c6c:	f091 0f00 	teq	r1, #0
 23f2c70:	bf04      	itt	eq
 23f2c72:	4601      	moveq	r1, r0
 23f2c74:	2000      	moveq	r0, #0
 23f2c76:	fab1 f381 	clz	r3, r1
 23f2c7a:	bf08      	it	eq
 23f2c7c:	3320      	addeq	r3, #32
 23f2c7e:	f1a3 030b 	sub.w	r3, r3, #11
 23f2c82:	f1b3 0220 	subs.w	r2, r3, #32
 23f2c86:	da0c      	bge.n	23f2ca2 <__adddf3+0x16e>
 23f2c88:	320c      	adds	r2, #12
 23f2c8a:	dd08      	ble.n	23f2c9e <__adddf3+0x16a>
 23f2c8c:	f102 0c14 	add.w	ip, r2, #20
 23f2c90:	f1c2 020c 	rsb	r2, r2, #12
 23f2c94:	fa01 f00c 	lsl.w	r0, r1, ip
 23f2c98:	fa21 f102 	lsr.w	r1, r1, r2
 23f2c9c:	e00c      	b.n	23f2cb8 <__adddf3+0x184>
 23f2c9e:	f102 0214 	add.w	r2, r2, #20
 23f2ca2:	bfd8      	it	le
 23f2ca4:	f1c2 0c20 	rsble	ip, r2, #32
 23f2ca8:	fa01 f102 	lsl.w	r1, r1, r2
 23f2cac:	fa20 fc0c 	lsr.w	ip, r0, ip
 23f2cb0:	bfdc      	itt	le
 23f2cb2:	ea41 010c 	orrle.w	r1, r1, ip
 23f2cb6:	4090      	lslle	r0, r2
 23f2cb8:	1ae4      	subs	r4, r4, r3
 23f2cba:	bfa2      	ittt	ge
 23f2cbc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23f2cc0:	4329      	orrge	r1, r5
 23f2cc2:	bd30      	popge	{r4, r5, pc}
 23f2cc4:	ea6f 0404 	mvn.w	r4, r4
 23f2cc8:	3c1f      	subs	r4, #31
 23f2cca:	da1c      	bge.n	23f2d06 <__adddf3+0x1d2>
 23f2ccc:	340c      	adds	r4, #12
 23f2cce:	dc0e      	bgt.n	23f2cee <__adddf3+0x1ba>
 23f2cd0:	f104 0414 	add.w	r4, r4, #20
 23f2cd4:	f1c4 0220 	rsb	r2, r4, #32
 23f2cd8:	fa20 f004 	lsr.w	r0, r0, r4
 23f2cdc:	fa01 f302 	lsl.w	r3, r1, r2
 23f2ce0:	ea40 0003 	orr.w	r0, r0, r3
 23f2ce4:	fa21 f304 	lsr.w	r3, r1, r4
 23f2ce8:	ea45 0103 	orr.w	r1, r5, r3
 23f2cec:	bd30      	pop	{r4, r5, pc}
 23f2cee:	f1c4 040c 	rsb	r4, r4, #12
 23f2cf2:	f1c4 0220 	rsb	r2, r4, #32
 23f2cf6:	fa20 f002 	lsr.w	r0, r0, r2
 23f2cfa:	fa01 f304 	lsl.w	r3, r1, r4
 23f2cfe:	ea40 0003 	orr.w	r0, r0, r3
 23f2d02:	4629      	mov	r1, r5
 23f2d04:	bd30      	pop	{r4, r5, pc}
 23f2d06:	fa21 f004 	lsr.w	r0, r1, r4
 23f2d0a:	4629      	mov	r1, r5
 23f2d0c:	bd30      	pop	{r4, r5, pc}
 23f2d0e:	f094 0f00 	teq	r4, #0
 23f2d12:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23f2d16:	bf06      	itte	eq
 23f2d18:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23f2d1c:	3401      	addeq	r4, #1
 23f2d1e:	3d01      	subne	r5, #1
 23f2d20:	e74e      	b.n	23f2bc0 <__adddf3+0x8c>
 23f2d22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f2d26:	bf18      	it	ne
 23f2d28:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f2d2c:	d029      	beq.n	23f2d82 <__adddf3+0x24e>
 23f2d2e:	ea94 0f05 	teq	r4, r5
 23f2d32:	bf08      	it	eq
 23f2d34:	ea90 0f02 	teqeq	r0, r2
 23f2d38:	d005      	beq.n	23f2d46 <__adddf3+0x212>
 23f2d3a:	ea54 0c00 	orrs.w	ip, r4, r0
 23f2d3e:	bf04      	itt	eq
 23f2d40:	4619      	moveq	r1, r3
 23f2d42:	4610      	moveq	r0, r2
 23f2d44:	bd30      	pop	{r4, r5, pc}
 23f2d46:	ea91 0f03 	teq	r1, r3
 23f2d4a:	bf1e      	ittt	ne
 23f2d4c:	2100      	movne	r1, #0
 23f2d4e:	2000      	movne	r0, #0
 23f2d50:	bd30      	popne	{r4, r5, pc}
 23f2d52:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23f2d56:	d105      	bne.n	23f2d64 <__adddf3+0x230>
 23f2d58:	0040      	lsls	r0, r0, #1
 23f2d5a:	4149      	adcs	r1, r1
 23f2d5c:	bf28      	it	cs
 23f2d5e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23f2d62:	bd30      	pop	{r4, r5, pc}
 23f2d64:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23f2d68:	bf3c      	itt	cc
 23f2d6a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23f2d6e:	bd30      	popcc	{r4, r5, pc}
 23f2d70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f2d74:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23f2d78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23f2d7c:	f04f 0000 	mov.w	r0, #0
 23f2d80:	bd30      	pop	{r4, r5, pc}
 23f2d82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f2d86:	bf1a      	itte	ne
 23f2d88:	4619      	movne	r1, r3
 23f2d8a:	4610      	movne	r0, r2
 23f2d8c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23f2d90:	bf1c      	itt	ne
 23f2d92:	460b      	movne	r3, r1
 23f2d94:	4602      	movne	r2, r0
 23f2d96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23f2d9a:	bf06      	itte	eq
 23f2d9c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23f2da0:	ea91 0f03 	teqeq	r1, r3
 23f2da4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23f2da8:	bd30      	pop	{r4, r5, pc}
 23f2daa:	bf00      	nop

023f2dac <__aeabi_ui2d>:
 23f2dac:	f090 0f00 	teq	r0, #0
 23f2db0:	bf04      	itt	eq
 23f2db2:	2100      	moveq	r1, #0
 23f2db4:	4770      	bxeq	lr
 23f2db6:	b530      	push	{r4, r5, lr}
 23f2db8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f2dbc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f2dc0:	f04f 0500 	mov.w	r5, #0
 23f2dc4:	f04f 0100 	mov.w	r1, #0
 23f2dc8:	e750      	b.n	23f2c6c <__adddf3+0x138>
 23f2dca:	bf00      	nop

023f2dcc <__aeabi_i2d>:
 23f2dcc:	f090 0f00 	teq	r0, #0
 23f2dd0:	bf04      	itt	eq
 23f2dd2:	2100      	moveq	r1, #0
 23f2dd4:	4770      	bxeq	lr
 23f2dd6:	b530      	push	{r4, r5, lr}
 23f2dd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f2ddc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f2de0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23f2de4:	bf48      	it	mi
 23f2de6:	4240      	negmi	r0, r0
 23f2de8:	f04f 0100 	mov.w	r1, #0
 23f2dec:	e73e      	b.n	23f2c6c <__adddf3+0x138>
 23f2dee:	bf00      	nop

023f2df0 <__aeabi_f2d>:
 23f2df0:	0042      	lsls	r2, r0, #1
 23f2df2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23f2df6:	ea4f 0131 	mov.w	r1, r1, rrx
 23f2dfa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23f2dfe:	bf1f      	itttt	ne
 23f2e00:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23f2e04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23f2e08:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23f2e0c:	4770      	bxne	lr
 23f2e0e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23f2e12:	bf08      	it	eq
 23f2e14:	4770      	bxeq	lr
 23f2e16:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23f2e1a:	bf04      	itt	eq
 23f2e1c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23f2e20:	4770      	bxeq	lr
 23f2e22:	b530      	push	{r4, r5, lr}
 23f2e24:	f44f 7460 	mov.w	r4, #896	; 0x380
 23f2e28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f2e2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f2e30:	e71c      	b.n	23f2c6c <__adddf3+0x138>
 23f2e32:	bf00      	nop

023f2e34 <__aeabi_ul2d>:
 23f2e34:	ea50 0201 	orrs.w	r2, r0, r1
 23f2e38:	bf08      	it	eq
 23f2e3a:	4770      	bxeq	lr
 23f2e3c:	b530      	push	{r4, r5, lr}
 23f2e3e:	f04f 0500 	mov.w	r5, #0
 23f2e42:	e00a      	b.n	23f2e5a <__aeabi_l2d+0x16>

023f2e44 <__aeabi_l2d>:
 23f2e44:	ea50 0201 	orrs.w	r2, r0, r1
 23f2e48:	bf08      	it	eq
 23f2e4a:	4770      	bxeq	lr
 23f2e4c:	b530      	push	{r4, r5, lr}
 23f2e4e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23f2e52:	d502      	bpl.n	23f2e5a <__aeabi_l2d+0x16>
 23f2e54:	4240      	negs	r0, r0
 23f2e56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f2e5a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f2e5e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f2e62:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23f2e66:	f43f aed8 	beq.w	23f2c1a <__adddf3+0xe6>
 23f2e6a:	f04f 0203 	mov.w	r2, #3
 23f2e6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f2e72:	bf18      	it	ne
 23f2e74:	3203      	addne	r2, #3
 23f2e76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f2e7a:	bf18      	it	ne
 23f2e7c:	3203      	addne	r2, #3
 23f2e7e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23f2e82:	f1c2 0320 	rsb	r3, r2, #32
 23f2e86:	fa00 fc03 	lsl.w	ip, r0, r3
 23f2e8a:	fa20 f002 	lsr.w	r0, r0, r2
 23f2e8e:	fa01 fe03 	lsl.w	lr, r1, r3
 23f2e92:	ea40 000e 	orr.w	r0, r0, lr
 23f2e96:	fa21 f102 	lsr.w	r1, r1, r2
 23f2e9a:	4414      	add	r4, r2
 23f2e9c:	e6bd      	b.n	23f2c1a <__adddf3+0xe6>
 23f2e9e:	bf00      	nop

023f2ea0 <__aeabi_dmul>:
 23f2ea0:	b570      	push	{r4, r5, r6, lr}
 23f2ea2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23f2ea6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23f2eaa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23f2eae:	bf1d      	ittte	ne
 23f2eb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23f2eb4:	ea94 0f0c 	teqne	r4, ip
 23f2eb8:	ea95 0f0c 	teqne	r5, ip
 23f2ebc:	f000 f8de 	bleq	23f307c <__aeabi_dmul+0x1dc>
 23f2ec0:	442c      	add	r4, r5
 23f2ec2:	ea81 0603 	eor.w	r6, r1, r3
 23f2ec6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23f2eca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23f2ece:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23f2ed2:	bf18      	it	ne
 23f2ed4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23f2ed8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f2edc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23f2ee0:	d038      	beq.n	23f2f54 <__aeabi_dmul+0xb4>
 23f2ee2:	fba0 ce02 	umull	ip, lr, r0, r2
 23f2ee6:	f04f 0500 	mov.w	r5, #0
 23f2eea:	fbe1 e502 	umlal	lr, r5, r1, r2
 23f2eee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23f2ef2:	fbe0 e503 	umlal	lr, r5, r0, r3
 23f2ef6:	f04f 0600 	mov.w	r6, #0
 23f2efa:	fbe1 5603 	umlal	r5, r6, r1, r3
 23f2efe:	f09c 0f00 	teq	ip, #0
 23f2f02:	bf18      	it	ne
 23f2f04:	f04e 0e01 	orrne.w	lr, lr, #1
 23f2f08:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23f2f0c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23f2f10:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23f2f14:	d204      	bcs.n	23f2f20 <__aeabi_dmul+0x80>
 23f2f16:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23f2f1a:	416d      	adcs	r5, r5
 23f2f1c:	eb46 0606 	adc.w	r6, r6, r6
 23f2f20:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23f2f24:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23f2f28:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23f2f2c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23f2f30:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23f2f34:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23f2f38:	bf88      	it	hi
 23f2f3a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23f2f3e:	d81e      	bhi.n	23f2f7e <__aeabi_dmul+0xde>
 23f2f40:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23f2f44:	bf08      	it	eq
 23f2f46:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23f2f4a:	f150 0000 	adcs.w	r0, r0, #0
 23f2f4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f2f52:	bd70      	pop	{r4, r5, r6, pc}
 23f2f54:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23f2f58:	ea46 0101 	orr.w	r1, r6, r1
 23f2f5c:	ea40 0002 	orr.w	r0, r0, r2
 23f2f60:	ea81 0103 	eor.w	r1, r1, r3
 23f2f64:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23f2f68:	bfc2      	ittt	gt
 23f2f6a:	ebd4 050c 	rsbsgt	r5, r4, ip
 23f2f6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23f2f72:	bd70      	popgt	{r4, r5, r6, pc}
 23f2f74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f2f78:	f04f 0e00 	mov.w	lr, #0
 23f2f7c:	3c01      	subs	r4, #1
 23f2f7e:	f300 80ab 	bgt.w	23f30d8 <__aeabi_dmul+0x238>
 23f2f82:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23f2f86:	bfde      	ittt	le
 23f2f88:	2000      	movle	r0, #0
 23f2f8a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23f2f8e:	bd70      	pople	{r4, r5, r6, pc}
 23f2f90:	f1c4 0400 	rsb	r4, r4, #0
 23f2f94:	3c20      	subs	r4, #32
 23f2f96:	da35      	bge.n	23f3004 <__aeabi_dmul+0x164>
 23f2f98:	340c      	adds	r4, #12
 23f2f9a:	dc1b      	bgt.n	23f2fd4 <__aeabi_dmul+0x134>
 23f2f9c:	f104 0414 	add.w	r4, r4, #20
 23f2fa0:	f1c4 0520 	rsb	r5, r4, #32
 23f2fa4:	fa00 f305 	lsl.w	r3, r0, r5
 23f2fa8:	fa20 f004 	lsr.w	r0, r0, r4
 23f2fac:	fa01 f205 	lsl.w	r2, r1, r5
 23f2fb0:	ea40 0002 	orr.w	r0, r0, r2
 23f2fb4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23f2fb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f2fbc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23f2fc0:	fa21 f604 	lsr.w	r6, r1, r4
 23f2fc4:	eb42 0106 	adc.w	r1, r2, r6
 23f2fc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f2fcc:	bf08      	it	eq
 23f2fce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f2fd2:	bd70      	pop	{r4, r5, r6, pc}
 23f2fd4:	f1c4 040c 	rsb	r4, r4, #12
 23f2fd8:	f1c4 0520 	rsb	r5, r4, #32
 23f2fdc:	fa00 f304 	lsl.w	r3, r0, r4
 23f2fe0:	fa20 f005 	lsr.w	r0, r0, r5
 23f2fe4:	fa01 f204 	lsl.w	r2, r1, r4
 23f2fe8:	ea40 0002 	orr.w	r0, r0, r2
 23f2fec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f2ff0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23f2ff4:	f141 0100 	adc.w	r1, r1, #0
 23f2ff8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f2ffc:	bf08      	it	eq
 23f2ffe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f3002:	bd70      	pop	{r4, r5, r6, pc}
 23f3004:	f1c4 0520 	rsb	r5, r4, #32
 23f3008:	fa00 f205 	lsl.w	r2, r0, r5
 23f300c:	ea4e 0e02 	orr.w	lr, lr, r2
 23f3010:	fa20 f304 	lsr.w	r3, r0, r4
 23f3014:	fa01 f205 	lsl.w	r2, r1, r5
 23f3018:	ea43 0302 	orr.w	r3, r3, r2
 23f301c:	fa21 f004 	lsr.w	r0, r1, r4
 23f3020:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f3024:	fa21 f204 	lsr.w	r2, r1, r4
 23f3028:	ea20 0002 	bic.w	r0, r0, r2
 23f302c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23f3030:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f3034:	bf08      	it	eq
 23f3036:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f303a:	bd70      	pop	{r4, r5, r6, pc}
 23f303c:	f094 0f00 	teq	r4, #0
 23f3040:	d10f      	bne.n	23f3062 <__aeabi_dmul+0x1c2>
 23f3042:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23f3046:	0040      	lsls	r0, r0, #1
 23f3048:	eb41 0101 	adc.w	r1, r1, r1
 23f304c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f3050:	bf08      	it	eq
 23f3052:	3c01      	subeq	r4, #1
 23f3054:	d0f7      	beq.n	23f3046 <__aeabi_dmul+0x1a6>
 23f3056:	ea41 0106 	orr.w	r1, r1, r6
 23f305a:	f095 0f00 	teq	r5, #0
 23f305e:	bf18      	it	ne
 23f3060:	4770      	bxne	lr
 23f3062:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23f3066:	0052      	lsls	r2, r2, #1
 23f3068:	eb43 0303 	adc.w	r3, r3, r3
 23f306c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23f3070:	bf08      	it	eq
 23f3072:	3d01      	subeq	r5, #1
 23f3074:	d0f7      	beq.n	23f3066 <__aeabi_dmul+0x1c6>
 23f3076:	ea43 0306 	orr.w	r3, r3, r6
 23f307a:	4770      	bx	lr
 23f307c:	ea94 0f0c 	teq	r4, ip
 23f3080:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23f3084:	bf18      	it	ne
 23f3086:	ea95 0f0c 	teqne	r5, ip
 23f308a:	d00c      	beq.n	23f30a6 <__aeabi_dmul+0x206>
 23f308c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f3090:	bf18      	it	ne
 23f3092:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f3096:	d1d1      	bne.n	23f303c <__aeabi_dmul+0x19c>
 23f3098:	ea81 0103 	eor.w	r1, r1, r3
 23f309c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f30a0:	f04f 0000 	mov.w	r0, #0
 23f30a4:	bd70      	pop	{r4, r5, r6, pc}
 23f30a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f30aa:	bf06      	itte	eq
 23f30ac:	4610      	moveq	r0, r2
 23f30ae:	4619      	moveq	r1, r3
 23f30b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f30b4:	d019      	beq.n	23f30ea <__aeabi_dmul+0x24a>
 23f30b6:	ea94 0f0c 	teq	r4, ip
 23f30ba:	d102      	bne.n	23f30c2 <__aeabi_dmul+0x222>
 23f30bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23f30c0:	d113      	bne.n	23f30ea <__aeabi_dmul+0x24a>
 23f30c2:	ea95 0f0c 	teq	r5, ip
 23f30c6:	d105      	bne.n	23f30d4 <__aeabi_dmul+0x234>
 23f30c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23f30cc:	bf1c      	itt	ne
 23f30ce:	4610      	movne	r0, r2
 23f30d0:	4619      	movne	r1, r3
 23f30d2:	d10a      	bne.n	23f30ea <__aeabi_dmul+0x24a>
 23f30d4:	ea81 0103 	eor.w	r1, r1, r3
 23f30d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f30dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23f30e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23f30e4:	f04f 0000 	mov.w	r0, #0
 23f30e8:	bd70      	pop	{r4, r5, r6, pc}
 23f30ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23f30ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23f30f2:	bd70      	pop	{r4, r5, r6, pc}

023f30f4 <__aeabi_ddiv>:
 23f30f4:	b570      	push	{r4, r5, r6, lr}
 23f30f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23f30fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23f30fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23f3102:	bf1d      	ittte	ne
 23f3104:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23f3108:	ea94 0f0c 	teqne	r4, ip
 23f310c:	ea95 0f0c 	teqne	r5, ip
 23f3110:	f000 f8a7 	bleq	23f3262 <__aeabi_ddiv+0x16e>
 23f3114:	eba4 0405 	sub.w	r4, r4, r5
 23f3118:	ea81 0e03 	eor.w	lr, r1, r3
 23f311c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23f3120:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23f3124:	f000 8088 	beq.w	23f3238 <__aeabi_ddiv+0x144>
 23f3128:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23f312c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23f3130:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23f3134:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23f3138:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23f313c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23f3140:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23f3144:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23f3148:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23f314c:	429d      	cmp	r5, r3
 23f314e:	bf08      	it	eq
 23f3150:	4296      	cmpeq	r6, r2
 23f3152:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23f3156:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23f315a:	d202      	bcs.n	23f3162 <__aeabi_ddiv+0x6e>
 23f315c:	085b      	lsrs	r3, r3, #1
 23f315e:	ea4f 0232 	mov.w	r2, r2, rrx
 23f3162:	1ab6      	subs	r6, r6, r2
 23f3164:	eb65 0503 	sbc.w	r5, r5, r3
 23f3168:	085b      	lsrs	r3, r3, #1
 23f316a:	ea4f 0232 	mov.w	r2, r2, rrx
 23f316e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23f3172:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23f3176:	ebb6 0e02 	subs.w	lr, r6, r2
 23f317a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f317e:	bf22      	ittt	cs
 23f3180:	1ab6      	subcs	r6, r6, r2
 23f3182:	4675      	movcs	r5, lr
 23f3184:	ea40 000c 	orrcs.w	r0, r0, ip
 23f3188:	085b      	lsrs	r3, r3, #1
 23f318a:	ea4f 0232 	mov.w	r2, r2, rrx
 23f318e:	ebb6 0e02 	subs.w	lr, r6, r2
 23f3192:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f3196:	bf22      	ittt	cs
 23f3198:	1ab6      	subcs	r6, r6, r2
 23f319a:	4675      	movcs	r5, lr
 23f319c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23f31a0:	085b      	lsrs	r3, r3, #1
 23f31a2:	ea4f 0232 	mov.w	r2, r2, rrx
 23f31a6:	ebb6 0e02 	subs.w	lr, r6, r2
 23f31aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f31ae:	bf22      	ittt	cs
 23f31b0:	1ab6      	subcs	r6, r6, r2
 23f31b2:	4675      	movcs	r5, lr
 23f31b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23f31b8:	085b      	lsrs	r3, r3, #1
 23f31ba:	ea4f 0232 	mov.w	r2, r2, rrx
 23f31be:	ebb6 0e02 	subs.w	lr, r6, r2
 23f31c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f31c6:	bf22      	ittt	cs
 23f31c8:	1ab6      	subcs	r6, r6, r2
 23f31ca:	4675      	movcs	r5, lr
 23f31cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23f31d0:	ea55 0e06 	orrs.w	lr, r5, r6
 23f31d4:	d018      	beq.n	23f3208 <__aeabi_ddiv+0x114>
 23f31d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23f31da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23f31de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23f31e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23f31e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23f31ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23f31ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23f31f2:	d1c0      	bne.n	23f3176 <__aeabi_ddiv+0x82>
 23f31f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f31f8:	d10b      	bne.n	23f3212 <__aeabi_ddiv+0x11e>
 23f31fa:	ea41 0100 	orr.w	r1, r1, r0
 23f31fe:	f04f 0000 	mov.w	r0, #0
 23f3202:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23f3206:	e7b6      	b.n	23f3176 <__aeabi_ddiv+0x82>
 23f3208:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f320c:	bf04      	itt	eq
 23f320e:	4301      	orreq	r1, r0
 23f3210:	2000      	moveq	r0, #0
 23f3212:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23f3216:	bf88      	it	hi
 23f3218:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23f321c:	f63f aeaf 	bhi.w	23f2f7e <__aeabi_dmul+0xde>
 23f3220:	ebb5 0c03 	subs.w	ip, r5, r3
 23f3224:	bf04      	itt	eq
 23f3226:	ebb6 0c02 	subseq.w	ip, r6, r2
 23f322a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23f322e:	f150 0000 	adcs.w	r0, r0, #0
 23f3232:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f3236:	bd70      	pop	{r4, r5, r6, pc}
 23f3238:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23f323c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23f3240:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23f3244:	bfc2      	ittt	gt
 23f3246:	ebd4 050c 	rsbsgt	r5, r4, ip
 23f324a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23f324e:	bd70      	popgt	{r4, r5, r6, pc}
 23f3250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f3254:	f04f 0e00 	mov.w	lr, #0
 23f3258:	3c01      	subs	r4, #1
 23f325a:	e690      	b.n	23f2f7e <__aeabi_dmul+0xde>
 23f325c:	ea45 0e06 	orr.w	lr, r5, r6
 23f3260:	e68d      	b.n	23f2f7e <__aeabi_dmul+0xde>
 23f3262:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23f3266:	ea94 0f0c 	teq	r4, ip
 23f326a:	bf08      	it	eq
 23f326c:	ea95 0f0c 	teqeq	r5, ip
 23f3270:	f43f af3b 	beq.w	23f30ea <__aeabi_dmul+0x24a>
 23f3274:	ea94 0f0c 	teq	r4, ip
 23f3278:	d10a      	bne.n	23f3290 <__aeabi_ddiv+0x19c>
 23f327a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23f327e:	f47f af34 	bne.w	23f30ea <__aeabi_dmul+0x24a>
 23f3282:	ea95 0f0c 	teq	r5, ip
 23f3286:	f47f af25 	bne.w	23f30d4 <__aeabi_dmul+0x234>
 23f328a:	4610      	mov	r0, r2
 23f328c:	4619      	mov	r1, r3
 23f328e:	e72c      	b.n	23f30ea <__aeabi_dmul+0x24a>
 23f3290:	ea95 0f0c 	teq	r5, ip
 23f3294:	d106      	bne.n	23f32a4 <__aeabi_ddiv+0x1b0>
 23f3296:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23f329a:	f43f aefd 	beq.w	23f3098 <__aeabi_dmul+0x1f8>
 23f329e:	4610      	mov	r0, r2
 23f32a0:	4619      	mov	r1, r3
 23f32a2:	e722      	b.n	23f30ea <__aeabi_dmul+0x24a>
 23f32a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f32a8:	bf18      	it	ne
 23f32aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f32ae:	f47f aec5 	bne.w	23f303c <__aeabi_dmul+0x19c>
 23f32b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23f32b6:	f47f af0d 	bne.w	23f30d4 <__aeabi_dmul+0x234>
 23f32ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23f32be:	f47f aeeb 	bne.w	23f3098 <__aeabi_dmul+0x1f8>
 23f32c2:	e712      	b.n	23f30ea <__aeabi_dmul+0x24a>

023f32c4 <__gedf2>:
 23f32c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23f32c8:	e006      	b.n	23f32d8 <__cmpdf2+0x4>
 23f32ca:	bf00      	nop

023f32cc <__ledf2>:
 23f32cc:	f04f 0c01 	mov.w	ip, #1
 23f32d0:	e002      	b.n	23f32d8 <__cmpdf2+0x4>
 23f32d2:	bf00      	nop

023f32d4 <__cmpdf2>:
 23f32d4:	f04f 0c01 	mov.w	ip, #1
 23f32d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 23f32dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f32e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f32e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f32e8:	bf18      	it	ne
 23f32ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23f32ee:	d01b      	beq.n	23f3328 <__cmpdf2+0x54>
 23f32f0:	b001      	add	sp, #4
 23f32f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23f32f6:	bf0c      	ite	eq
 23f32f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23f32fc:	ea91 0f03 	teqne	r1, r3
 23f3300:	bf02      	ittt	eq
 23f3302:	ea90 0f02 	teqeq	r0, r2
 23f3306:	2000      	moveq	r0, #0
 23f3308:	4770      	bxeq	lr
 23f330a:	f110 0f00 	cmn.w	r0, #0
 23f330e:	ea91 0f03 	teq	r1, r3
 23f3312:	bf58      	it	pl
 23f3314:	4299      	cmppl	r1, r3
 23f3316:	bf08      	it	eq
 23f3318:	4290      	cmpeq	r0, r2
 23f331a:	bf2c      	ite	cs
 23f331c:	17d8      	asrcs	r0, r3, #31
 23f331e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23f3322:	f040 0001 	orr.w	r0, r0, #1
 23f3326:	4770      	bx	lr
 23f3328:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f332c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f3330:	d102      	bne.n	23f3338 <__cmpdf2+0x64>
 23f3332:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23f3336:	d107      	bne.n	23f3348 <__cmpdf2+0x74>
 23f3338:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f333c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f3340:	d1d6      	bne.n	23f32f0 <__cmpdf2+0x1c>
 23f3342:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23f3346:	d0d3      	beq.n	23f32f0 <__cmpdf2+0x1c>
 23f3348:	f85d 0b04 	ldr.w	r0, [sp], #4
 23f334c:	4770      	bx	lr
 23f334e:	bf00      	nop

023f3350 <__aeabi_cdrcmple>:
 23f3350:	4684      	mov	ip, r0
 23f3352:	4610      	mov	r0, r2
 23f3354:	4662      	mov	r2, ip
 23f3356:	468c      	mov	ip, r1
 23f3358:	4619      	mov	r1, r3
 23f335a:	4663      	mov	r3, ip
 23f335c:	e000      	b.n	23f3360 <__aeabi_cdcmpeq>
 23f335e:	bf00      	nop

023f3360 <__aeabi_cdcmpeq>:
 23f3360:	b501      	push	{r0, lr}
 23f3362:	f7ff ffb7 	bl	23f32d4 <__cmpdf2>
 23f3366:	2800      	cmp	r0, #0
 23f3368:	bf48      	it	mi
 23f336a:	f110 0f00 	cmnmi.w	r0, #0
 23f336e:	bd01      	pop	{r0, pc}

023f3370 <__aeabi_dcmpeq>:
 23f3370:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f3374:	f7ff fff4 	bl	23f3360 <__aeabi_cdcmpeq>
 23f3378:	bf0c      	ite	eq
 23f337a:	2001      	moveq	r0, #1
 23f337c:	2000      	movne	r0, #0
 23f337e:	f85d fb08 	ldr.w	pc, [sp], #8
 23f3382:	bf00      	nop

023f3384 <__aeabi_dcmplt>:
 23f3384:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f3388:	f7ff ffea 	bl	23f3360 <__aeabi_cdcmpeq>
 23f338c:	bf34      	ite	cc
 23f338e:	2001      	movcc	r0, #1
 23f3390:	2000      	movcs	r0, #0
 23f3392:	f85d fb08 	ldr.w	pc, [sp], #8
 23f3396:	bf00      	nop

023f3398 <__aeabi_dcmple>:
 23f3398:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f339c:	f7ff ffe0 	bl	23f3360 <__aeabi_cdcmpeq>
 23f33a0:	bf94      	ite	ls
 23f33a2:	2001      	movls	r0, #1
 23f33a4:	2000      	movhi	r0, #0
 23f33a6:	f85d fb08 	ldr.w	pc, [sp], #8
 23f33aa:	bf00      	nop

023f33ac <__aeabi_dcmpge>:
 23f33ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f33b0:	f7ff ffce 	bl	23f3350 <__aeabi_cdrcmple>
 23f33b4:	bf94      	ite	ls
 23f33b6:	2001      	movls	r0, #1
 23f33b8:	2000      	movhi	r0, #0
 23f33ba:	f85d fb08 	ldr.w	pc, [sp], #8
 23f33be:	bf00      	nop

023f33c0 <__aeabi_dcmpgt>:
 23f33c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f33c4:	f7ff ffc4 	bl	23f3350 <__aeabi_cdrcmple>
 23f33c8:	bf34      	ite	cc
 23f33ca:	2001      	movcc	r0, #1
 23f33cc:	2000      	movcs	r0, #0
 23f33ce:	f85d fb08 	ldr.w	pc, [sp], #8
 23f33d2:	bf00      	nop

023f33d4 <__aeabi_dcmpun>:
 23f33d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f33d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f33dc:	d102      	bne.n	23f33e4 <__aeabi_dcmpun+0x10>
 23f33de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23f33e2:	d10a      	bne.n	23f33fa <__aeabi_dcmpun+0x26>
 23f33e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f33e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f33ec:	d102      	bne.n	23f33f4 <__aeabi_dcmpun+0x20>
 23f33ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23f33f2:	d102      	bne.n	23f33fa <__aeabi_dcmpun+0x26>
 23f33f4:	f04f 0000 	mov.w	r0, #0
 23f33f8:	4770      	bx	lr
 23f33fa:	f04f 0001 	mov.w	r0, #1
 23f33fe:	4770      	bx	lr

023f3400 <__aeabi_d2uiz>:
 23f3400:	004a      	lsls	r2, r1, #1
 23f3402:	d211      	bcs.n	23f3428 <__aeabi_d2uiz+0x28>
 23f3404:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23f3408:	d211      	bcs.n	23f342e <__aeabi_d2uiz+0x2e>
 23f340a:	d50d      	bpl.n	23f3428 <__aeabi_d2uiz+0x28>
 23f340c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23f3410:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23f3414:	d40e      	bmi.n	23f3434 <__aeabi_d2uiz+0x34>
 23f3416:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23f341a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23f341e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23f3422:	fa23 f002 	lsr.w	r0, r3, r2
 23f3426:	4770      	bx	lr
 23f3428:	f04f 0000 	mov.w	r0, #0
 23f342c:	4770      	bx	lr
 23f342e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23f3432:	d102      	bne.n	23f343a <__aeabi_d2uiz+0x3a>
 23f3434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f3438:	4770      	bx	lr
 23f343a:	f04f 0000 	mov.w	r0, #0
 23f343e:	4770      	bx	lr

023f3440 <__aeabi_d2f>:
 23f3440:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23f3444:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23f3448:	bf24      	itt	cs
 23f344a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23f344e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23f3452:	d90d      	bls.n	23f3470 <__aeabi_d2f+0x30>
 23f3454:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23f3458:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23f345c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23f3460:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23f3464:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23f3468:	bf08      	it	eq
 23f346a:	f020 0001 	biceq.w	r0, r0, #1
 23f346e:	4770      	bx	lr
 23f3470:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23f3474:	d121      	bne.n	23f34ba <__aeabi_d2f+0x7a>
 23f3476:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23f347a:	bfbc      	itt	lt
 23f347c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23f3480:	4770      	bxlt	lr
 23f3482:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f3486:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23f348a:	f1c2 0218 	rsb	r2, r2, #24
 23f348e:	f1c2 0c20 	rsb	ip, r2, #32
 23f3492:	fa10 f30c 	lsls.w	r3, r0, ip
 23f3496:	fa20 f002 	lsr.w	r0, r0, r2
 23f349a:	bf18      	it	ne
 23f349c:	f040 0001 	orrne.w	r0, r0, #1
 23f34a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23f34a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23f34a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 23f34ac:	ea40 000c 	orr.w	r0, r0, ip
 23f34b0:	fa23 f302 	lsr.w	r3, r3, r2
 23f34b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23f34b8:	e7cc      	b.n	23f3454 <__aeabi_d2f+0x14>
 23f34ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23f34be:	d107      	bne.n	23f34d0 <__aeabi_d2f+0x90>
 23f34c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23f34c4:	bf1e      	ittt	ne
 23f34c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23f34ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23f34ce:	4770      	bxne	lr
 23f34d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23f34d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23f34d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23f34dc:	4770      	bx	lr
 23f34de:	bf00      	nop

023f34e0 <__aeabi_uldivmod>:
 23f34e0:	b953      	cbnz	r3, 23f34f8 <__aeabi_uldivmod+0x18>
 23f34e2:	b94a      	cbnz	r2, 23f34f8 <__aeabi_uldivmod+0x18>
 23f34e4:	2900      	cmp	r1, #0
 23f34e6:	bf08      	it	eq
 23f34e8:	2800      	cmpeq	r0, #0
 23f34ea:	bf1c      	itt	ne
 23f34ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 23f34f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23f34f4:	f000 b9d4 	b.w	23f38a0 <__aeabi_idiv0>
 23f34f8:	f1ad 0c08 	sub.w	ip, sp, #8
 23f34fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23f3500:	f000 f858 	bl	23f35b4 <__udivmoddi4>
 23f3504:	f8dd e004 	ldr.w	lr, [sp, #4]
 23f3508:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23f350c:	b004      	add	sp, #16
 23f350e:	4770      	bx	lr

023f3510 <__aeabi_f2lz>:
 23f3510:	ee07 0a90 	vmov	s15, r0
 23f3514:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23f3518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f351c:	d401      	bmi.n	23f3522 <__aeabi_f2lz+0x12>
 23f351e:	f000 b80b 	b.w	23f3538 <__aeabi_f2ulz>
 23f3522:	eef1 7a67 	vneg.f32	s15, s15
 23f3526:	b508      	push	{r3, lr}
 23f3528:	ee17 0a90 	vmov	r0, s15
 23f352c:	f000 f804 	bl	23f3538 <__aeabi_f2ulz>
 23f3530:	4240      	negs	r0, r0
 23f3532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f3536:	bd08      	pop	{r3, pc}

023f3538 <__aeabi_f2ulz>:
 23f3538:	b5d0      	push	{r4, r6, r7, lr}
 23f353a:	f7ff fc59 	bl	23f2df0 <__aeabi_f2d>
 23f353e:	2200      	movs	r2, #0
 23f3540:	4b0b      	ldr	r3, [pc, #44]	; (23f3570 <__aeabi_f2ulz+0x38>)
 23f3542:	4606      	mov	r6, r0
 23f3544:	460f      	mov	r7, r1
 23f3546:	f7ff fcab 	bl	23f2ea0 <__aeabi_dmul>
 23f354a:	f7ff ff59 	bl	23f3400 <__aeabi_d2uiz>
 23f354e:	4604      	mov	r4, r0
 23f3550:	f7ff fc2c 	bl	23f2dac <__aeabi_ui2d>
 23f3554:	2200      	movs	r2, #0
 23f3556:	4b07      	ldr	r3, [pc, #28]	; (23f3574 <__aeabi_f2ulz+0x3c>)
 23f3558:	f7ff fca2 	bl	23f2ea0 <__aeabi_dmul>
 23f355c:	4602      	mov	r2, r0
 23f355e:	460b      	mov	r3, r1
 23f3560:	4630      	mov	r0, r6
 23f3562:	4639      	mov	r1, r7
 23f3564:	f7ff fae4 	bl	23f2b30 <__aeabi_dsub>
 23f3568:	f7ff ff4a 	bl	23f3400 <__aeabi_d2uiz>
 23f356c:	4621      	mov	r1, r4
 23f356e:	bdd0      	pop	{r4, r6, r7, pc}
 23f3570:	3df00000 	.word	0x3df00000
 23f3574:	41f00000 	.word	0x41f00000

023f3578 <__aeabi_d2ulz>:
 23f3578:	b5d0      	push	{r4, r6, r7, lr}
 23f357a:	2200      	movs	r2, #0
 23f357c:	4b0b      	ldr	r3, [pc, #44]	; (23f35ac <__aeabi_d2ulz+0x34>)
 23f357e:	4606      	mov	r6, r0
 23f3580:	460f      	mov	r7, r1
 23f3582:	f7ff fc8d 	bl	23f2ea0 <__aeabi_dmul>
 23f3586:	f7ff ff3b 	bl	23f3400 <__aeabi_d2uiz>
 23f358a:	4604      	mov	r4, r0
 23f358c:	f7ff fc0e 	bl	23f2dac <__aeabi_ui2d>
 23f3590:	2200      	movs	r2, #0
 23f3592:	4b07      	ldr	r3, [pc, #28]	; (23f35b0 <__aeabi_d2ulz+0x38>)
 23f3594:	f7ff fc84 	bl	23f2ea0 <__aeabi_dmul>
 23f3598:	4602      	mov	r2, r0
 23f359a:	460b      	mov	r3, r1
 23f359c:	4630      	mov	r0, r6
 23f359e:	4639      	mov	r1, r7
 23f35a0:	f7ff fac6 	bl	23f2b30 <__aeabi_dsub>
 23f35a4:	f7ff ff2c 	bl	23f3400 <__aeabi_d2uiz>
 23f35a8:	4621      	mov	r1, r4
 23f35aa:	bdd0      	pop	{r4, r6, r7, pc}
 23f35ac:	3df00000 	.word	0x3df00000
 23f35b0:	41f00000 	.word	0x41f00000

023f35b4 <__udivmoddi4>:
 23f35b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f35b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23f35ba:	4604      	mov	r4, r0
 23f35bc:	460f      	mov	r7, r1
 23f35be:	2b00      	cmp	r3, #0
 23f35c0:	d148      	bne.n	23f3654 <__udivmoddi4+0xa0>
 23f35c2:	428a      	cmp	r2, r1
 23f35c4:	4694      	mov	ip, r2
 23f35c6:	d961      	bls.n	23f368c <__udivmoddi4+0xd8>
 23f35c8:	fab2 f382 	clz	r3, r2
 23f35cc:	b143      	cbz	r3, 23f35e0 <__udivmoddi4+0x2c>
 23f35ce:	f1c3 0120 	rsb	r1, r3, #32
 23f35d2:	409f      	lsls	r7, r3
 23f35d4:	fa02 fc03 	lsl.w	ip, r2, r3
 23f35d8:	409c      	lsls	r4, r3
 23f35da:	fa20 f101 	lsr.w	r1, r0, r1
 23f35de:	430f      	orrs	r7, r1
 23f35e0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 23f35e4:	fa1f fe8c 	uxth.w	lr, ip
 23f35e8:	0c22      	lsrs	r2, r4, #16
 23f35ea:	fbb7 f6f1 	udiv	r6, r7, r1
 23f35ee:	fb01 7716 	mls	r7, r1, r6, r7
 23f35f2:	fb06 f00e 	mul.w	r0, r6, lr
 23f35f6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 23f35fa:	4290      	cmp	r0, r2
 23f35fc:	d908      	bls.n	23f3610 <__udivmoddi4+0x5c>
 23f35fe:	eb1c 0202 	adds.w	r2, ip, r2
 23f3602:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 23f3606:	d202      	bcs.n	23f360e <__udivmoddi4+0x5a>
 23f3608:	4290      	cmp	r0, r2
 23f360a:	f200 8137 	bhi.w	23f387c <__udivmoddi4+0x2c8>
 23f360e:	463e      	mov	r6, r7
 23f3610:	1a12      	subs	r2, r2, r0
 23f3612:	b2a4      	uxth	r4, r4
 23f3614:	fbb2 f0f1 	udiv	r0, r2, r1
 23f3618:	fb01 2210 	mls	r2, r1, r0, r2
 23f361c:	fb00 fe0e 	mul.w	lr, r0, lr
 23f3620:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 23f3624:	45a6      	cmp	lr, r4
 23f3626:	d908      	bls.n	23f363a <__udivmoddi4+0x86>
 23f3628:	eb1c 0404 	adds.w	r4, ip, r4
 23f362c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 23f3630:	d202      	bcs.n	23f3638 <__udivmoddi4+0x84>
 23f3632:	45a6      	cmp	lr, r4
 23f3634:	f200 811c 	bhi.w	23f3870 <__udivmoddi4+0x2bc>
 23f3638:	4610      	mov	r0, r2
 23f363a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 23f363e:	eba4 040e 	sub.w	r4, r4, lr
 23f3642:	2600      	movs	r6, #0
 23f3644:	b11d      	cbz	r5, 23f364e <__udivmoddi4+0x9a>
 23f3646:	40dc      	lsrs	r4, r3
 23f3648:	2300      	movs	r3, #0
 23f364a:	e9c5 4300 	strd	r4, r3, [r5]
 23f364e:	4631      	mov	r1, r6
 23f3650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f3654:	428b      	cmp	r3, r1
 23f3656:	d909      	bls.n	23f366c <__udivmoddi4+0xb8>
 23f3658:	2d00      	cmp	r5, #0
 23f365a:	f000 80fd 	beq.w	23f3858 <__udivmoddi4+0x2a4>
 23f365e:	2600      	movs	r6, #0
 23f3660:	e9c5 0100 	strd	r0, r1, [r5]
 23f3664:	4630      	mov	r0, r6
 23f3666:	4631      	mov	r1, r6
 23f3668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f366c:	fab3 f683 	clz	r6, r3
 23f3670:	2e00      	cmp	r6, #0
 23f3672:	d14b      	bne.n	23f370c <__udivmoddi4+0x158>
 23f3674:	428b      	cmp	r3, r1
 23f3676:	f0c0 80f2 	bcc.w	23f385e <__udivmoddi4+0x2aa>
 23f367a:	4282      	cmp	r2, r0
 23f367c:	f240 80ef 	bls.w	23f385e <__udivmoddi4+0x2aa>
 23f3680:	4630      	mov	r0, r6
 23f3682:	2d00      	cmp	r5, #0
 23f3684:	d0e3      	beq.n	23f364e <__udivmoddi4+0x9a>
 23f3686:	e9c5 4700 	strd	r4, r7, [r5]
 23f368a:	e7e0      	b.n	23f364e <__udivmoddi4+0x9a>
 23f368c:	b902      	cbnz	r2, 23f3690 <__udivmoddi4+0xdc>
 23f368e:	deff      	udf	#255	; 0xff
 23f3690:	fab2 f382 	clz	r3, r2
 23f3694:	2b00      	cmp	r3, #0
 23f3696:	f040 809d 	bne.w	23f37d4 <__udivmoddi4+0x220>
 23f369a:	1a89      	subs	r1, r1, r2
 23f369c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 23f36a0:	b297      	uxth	r7, r2
 23f36a2:	2601      	movs	r6, #1
 23f36a4:	0c20      	lsrs	r0, r4, #16
 23f36a6:	fbb1 f2fe 	udiv	r2, r1, lr
 23f36aa:	fb0e 1112 	mls	r1, lr, r2, r1
 23f36ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23f36b2:	fb07 f002 	mul.w	r0, r7, r2
 23f36b6:	4288      	cmp	r0, r1
 23f36b8:	d90f      	bls.n	23f36da <__udivmoddi4+0x126>
 23f36ba:	eb1c 0101 	adds.w	r1, ip, r1
 23f36be:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 23f36c2:	bf2c      	ite	cs
 23f36c4:	f04f 0901 	movcs.w	r9, #1
 23f36c8:	f04f 0900 	movcc.w	r9, #0
 23f36cc:	4288      	cmp	r0, r1
 23f36ce:	d903      	bls.n	23f36d8 <__udivmoddi4+0x124>
 23f36d0:	f1b9 0f00 	cmp.w	r9, #0
 23f36d4:	f000 80cf 	beq.w	23f3876 <__udivmoddi4+0x2c2>
 23f36d8:	4642      	mov	r2, r8
 23f36da:	1a09      	subs	r1, r1, r0
 23f36dc:	b2a4      	uxth	r4, r4
 23f36de:	fbb1 f0fe 	udiv	r0, r1, lr
 23f36e2:	fb0e 1110 	mls	r1, lr, r0, r1
 23f36e6:	fb00 f707 	mul.w	r7, r0, r7
 23f36ea:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 23f36ee:	42a7      	cmp	r7, r4
 23f36f0:	d908      	bls.n	23f3704 <__udivmoddi4+0x150>
 23f36f2:	eb1c 0404 	adds.w	r4, ip, r4
 23f36f6:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 23f36fa:	d202      	bcs.n	23f3702 <__udivmoddi4+0x14e>
 23f36fc:	42a7      	cmp	r7, r4
 23f36fe:	f200 80b4 	bhi.w	23f386a <__udivmoddi4+0x2b6>
 23f3702:	4608      	mov	r0, r1
 23f3704:	1be4      	subs	r4, r4, r7
 23f3706:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 23f370a:	e79b      	b.n	23f3644 <__udivmoddi4+0x90>
 23f370c:	f1c6 0720 	rsb	r7, r6, #32
 23f3710:	40b3      	lsls	r3, r6
 23f3712:	fa01 f406 	lsl.w	r4, r1, r6
 23f3716:	fa22 fc07 	lsr.w	ip, r2, r7
 23f371a:	40f9      	lsrs	r1, r7
 23f371c:	40b2      	lsls	r2, r6
 23f371e:	ea4c 0c03 	orr.w	ip, ip, r3
 23f3722:	fa20 f307 	lsr.w	r3, r0, r7
 23f3726:	ea4f 491c 	mov.w	r9, ip, lsr #16
 23f372a:	431c      	orrs	r4, r3
 23f372c:	fa1f fe8c 	uxth.w	lr, ip
 23f3730:	fa00 f306 	lsl.w	r3, r0, r6
 23f3734:	0c20      	lsrs	r0, r4, #16
 23f3736:	fbb1 f8f9 	udiv	r8, r1, r9
 23f373a:	fb09 1118 	mls	r1, r9, r8, r1
 23f373e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23f3742:	fb08 f00e 	mul.w	r0, r8, lr
 23f3746:	4288      	cmp	r0, r1
 23f3748:	d90f      	bls.n	23f376a <__udivmoddi4+0x1b6>
 23f374a:	eb1c 0101 	adds.w	r1, ip, r1
 23f374e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 23f3752:	bf2c      	ite	cs
 23f3754:	f04f 0b01 	movcs.w	fp, #1
 23f3758:	f04f 0b00 	movcc.w	fp, #0
 23f375c:	4288      	cmp	r0, r1
 23f375e:	d903      	bls.n	23f3768 <__udivmoddi4+0x1b4>
 23f3760:	f1bb 0f00 	cmp.w	fp, #0
 23f3764:	f000 808d 	beq.w	23f3882 <__udivmoddi4+0x2ce>
 23f3768:	46d0      	mov	r8, sl
 23f376a:	1a09      	subs	r1, r1, r0
 23f376c:	b2a4      	uxth	r4, r4
 23f376e:	fbb1 f0f9 	udiv	r0, r1, r9
 23f3772:	fb09 1110 	mls	r1, r9, r0, r1
 23f3776:	fb00 fe0e 	mul.w	lr, r0, lr
 23f377a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 23f377e:	458e      	cmp	lr, r1
 23f3780:	d907      	bls.n	23f3792 <__udivmoddi4+0x1de>
 23f3782:	eb1c 0101 	adds.w	r1, ip, r1
 23f3786:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 23f378a:	d201      	bcs.n	23f3790 <__udivmoddi4+0x1dc>
 23f378c:	458e      	cmp	lr, r1
 23f378e:	d87f      	bhi.n	23f3890 <__udivmoddi4+0x2dc>
 23f3790:	4620      	mov	r0, r4
 23f3792:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 23f3796:	eba1 010e 	sub.w	r1, r1, lr
 23f379a:	fba0 9802 	umull	r9, r8, r0, r2
 23f379e:	4541      	cmp	r1, r8
 23f37a0:	464c      	mov	r4, r9
 23f37a2:	46c6      	mov	lr, r8
 23f37a4:	d302      	bcc.n	23f37ac <__udivmoddi4+0x1f8>
 23f37a6:	d106      	bne.n	23f37b6 <__udivmoddi4+0x202>
 23f37a8:	454b      	cmp	r3, r9
 23f37aa:	d204      	bcs.n	23f37b6 <__udivmoddi4+0x202>
 23f37ac:	3801      	subs	r0, #1
 23f37ae:	ebb9 0402 	subs.w	r4, r9, r2
 23f37b2:	eb68 0e0c 	sbc.w	lr, r8, ip
 23f37b6:	2d00      	cmp	r5, #0
 23f37b8:	d070      	beq.n	23f389c <__udivmoddi4+0x2e8>
 23f37ba:	1b1a      	subs	r2, r3, r4
 23f37bc:	eb61 010e 	sbc.w	r1, r1, lr
 23f37c0:	fa22 f306 	lsr.w	r3, r2, r6
 23f37c4:	fa01 f707 	lsl.w	r7, r1, r7
 23f37c8:	40f1      	lsrs	r1, r6
 23f37ca:	2600      	movs	r6, #0
 23f37cc:	431f      	orrs	r7, r3
 23f37ce:	e9c5 7100 	strd	r7, r1, [r5]
 23f37d2:	e73c      	b.n	23f364e <__udivmoddi4+0x9a>
 23f37d4:	fa02 fc03 	lsl.w	ip, r2, r3
 23f37d8:	f1c3 0020 	rsb	r0, r3, #32
 23f37dc:	fa01 f203 	lsl.w	r2, r1, r3
 23f37e0:	fa21 f600 	lsr.w	r6, r1, r0
 23f37e4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 23f37e8:	fa24 f100 	lsr.w	r1, r4, r0
 23f37ec:	fa1f f78c 	uxth.w	r7, ip
 23f37f0:	409c      	lsls	r4, r3
 23f37f2:	4311      	orrs	r1, r2
 23f37f4:	fbb6 f0fe 	udiv	r0, r6, lr
 23f37f8:	0c0a      	lsrs	r2, r1, #16
 23f37fa:	fb0e 6610 	mls	r6, lr, r0, r6
 23f37fe:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 23f3802:	fb00 f607 	mul.w	r6, r0, r7
 23f3806:	4296      	cmp	r6, r2
 23f3808:	d90e      	bls.n	23f3828 <__udivmoddi4+0x274>
 23f380a:	eb1c 0202 	adds.w	r2, ip, r2
 23f380e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 23f3812:	bf2c      	ite	cs
 23f3814:	f04f 0901 	movcs.w	r9, #1
 23f3818:	f04f 0900 	movcc.w	r9, #0
 23f381c:	4296      	cmp	r6, r2
 23f381e:	d902      	bls.n	23f3826 <__udivmoddi4+0x272>
 23f3820:	f1b9 0f00 	cmp.w	r9, #0
 23f3824:	d031      	beq.n	23f388a <__udivmoddi4+0x2d6>
 23f3826:	4640      	mov	r0, r8
 23f3828:	1b92      	subs	r2, r2, r6
 23f382a:	b289      	uxth	r1, r1
 23f382c:	fbb2 f6fe 	udiv	r6, r2, lr
 23f3830:	fb0e 2216 	mls	r2, lr, r6, r2
 23f3834:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23f3838:	fb06 f207 	mul.w	r2, r6, r7
 23f383c:	428a      	cmp	r2, r1
 23f383e:	d907      	bls.n	23f3850 <__udivmoddi4+0x29c>
 23f3840:	eb1c 0101 	adds.w	r1, ip, r1
 23f3844:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 23f3848:	d201      	bcs.n	23f384e <__udivmoddi4+0x29a>
 23f384a:	428a      	cmp	r2, r1
 23f384c:	d823      	bhi.n	23f3896 <__udivmoddi4+0x2e2>
 23f384e:	4646      	mov	r6, r8
 23f3850:	1a89      	subs	r1, r1, r2
 23f3852:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 23f3856:	e725      	b.n	23f36a4 <__udivmoddi4+0xf0>
 23f3858:	462e      	mov	r6, r5
 23f385a:	4628      	mov	r0, r5
 23f385c:	e6f7      	b.n	23f364e <__udivmoddi4+0x9a>
 23f385e:	1a84      	subs	r4, r0, r2
 23f3860:	eb61 0303 	sbc.w	r3, r1, r3
 23f3864:	2001      	movs	r0, #1
 23f3866:	461f      	mov	r7, r3
 23f3868:	e70b      	b.n	23f3682 <__udivmoddi4+0xce>
 23f386a:	4464      	add	r4, ip
 23f386c:	3802      	subs	r0, #2
 23f386e:	e749      	b.n	23f3704 <__udivmoddi4+0x150>
 23f3870:	4464      	add	r4, ip
 23f3872:	3802      	subs	r0, #2
 23f3874:	e6e1      	b.n	23f363a <__udivmoddi4+0x86>
 23f3876:	3a02      	subs	r2, #2
 23f3878:	4461      	add	r1, ip
 23f387a:	e72e      	b.n	23f36da <__udivmoddi4+0x126>
 23f387c:	3e02      	subs	r6, #2
 23f387e:	4462      	add	r2, ip
 23f3880:	e6c6      	b.n	23f3610 <__udivmoddi4+0x5c>
 23f3882:	f1a8 0802 	sub.w	r8, r8, #2
 23f3886:	4461      	add	r1, ip
 23f3888:	e76f      	b.n	23f376a <__udivmoddi4+0x1b6>
 23f388a:	3802      	subs	r0, #2
 23f388c:	4462      	add	r2, ip
 23f388e:	e7cb      	b.n	23f3828 <__udivmoddi4+0x274>
 23f3890:	3802      	subs	r0, #2
 23f3892:	4461      	add	r1, ip
 23f3894:	e77d      	b.n	23f3792 <__udivmoddi4+0x1de>
 23f3896:	3e02      	subs	r6, #2
 23f3898:	4461      	add	r1, ip
 23f389a:	e7d9      	b.n	23f3850 <__udivmoddi4+0x29c>
 23f389c:	462e      	mov	r6, r5
 23f389e:	e6d6      	b.n	23f364e <__udivmoddi4+0x9a>

023f38a0 <__aeabi_idiv0>:
 23f38a0:	4770      	bx	lr
 23f38a2:	bf00      	nop

023f38a4 <strcmp>:
 23f38a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 23f38a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 23f38ac:	2a01      	cmp	r2, #1
 23f38ae:	bf28      	it	cs
 23f38b0:	429a      	cmpcs	r2, r3
 23f38b2:	d0f7      	beq.n	23f38a4 <strcmp>
 23f38b4:	1ad0      	subs	r0, r2, r3
 23f38b6:	4770      	bx	lr

023f38b8 <strlen>:
 23f38b8:	4603      	mov	r3, r0
 23f38ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f38be:	2a00      	cmp	r2, #0
 23f38c0:	d1fb      	bne.n	23f38ba <strlen+0x2>
 23f38c2:	1a18      	subs	r0, r3, r0
 23f38c4:	3801      	subs	r0, #1
 23f38c6:	4770      	bx	lr

023f38c8 <__aeabi_d2lz>:
 23f38c8:	b538      	push	{r3, r4, r5, lr}
 23f38ca:	2200      	movs	r2, #0
 23f38cc:	2300      	movs	r3, #0
 23f38ce:	4604      	mov	r4, r0
 23f38d0:	460d      	mov	r5, r1
 23f38d2:	f7ff fd57 	bl	23f3384 <__aeabi_dcmplt>
 23f38d6:	b928      	cbnz	r0, 23f38e4 <__aeabi_d2lz+0x1c>
 23f38d8:	4620      	mov	r0, r4
 23f38da:	4629      	mov	r1, r5
 23f38dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f38e0:	f7ff be4a 	b.w	23f3578 <__aeabi_d2ulz>
 23f38e4:	4620      	mov	r0, r4
 23f38e6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 23f38ea:	f7ff fe45 	bl	23f3578 <__aeabi_d2ulz>
 23f38ee:	4240      	negs	r0, r0
 23f38f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f38f4:	bd38      	pop	{r3, r4, r5, pc}
 23f38f6:	bf00      	nop

023f38f8 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23f38f8:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23f38fa:	f007 fe09 	bl	23fb510 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f38fe:	2500      	movs	r5, #0
 23f3900:	4e05      	ldr	r6, [pc, #20]	; (23f3918 <module_user_init+0x20>)
 23f3902:	4c06      	ldr	r4, [pc, #24]	; (23f391c <module_user_init+0x24>)
 23f3904:	1ba4      	subs	r4, r4, r6
 23f3906:	08a4      	lsrs	r4, r4, #2
 23f3908:	42ac      	cmp	r4, r5
 23f390a:	d100      	bne.n	23f390e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23f390c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23f390e:	f856 3b04 	ldr.w	r3, [r6], #4
 23f3912:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f3914:	3501      	adds	r5, #1
 23f3916:	e7f7      	b.n	23f3908 <module_user_init+0x10>
 23f3918:	023fffc4 	.word	0x023fffc4
 23f391c:	023ffff4 	.word	0x023ffff4

023f3920 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23f3920:	f000 be0e 	b.w	23f4540 <setup>

023f3924 <module_user_loop>:
}

void module_user_loop() {
 23f3924:	b508      	push	{r3, lr}
    loop();
 23f3926:	f000 fe33 	bl	23f4590 <loop>
    _post_loop();
}
 23f392a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23f392e:	f007 bda7 	b.w	23fb480 <_post_loop>

023f3932 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23f3932:	f004 be65 	b.w	23f8600 <malloc>

023f3936 <_Znaj>:
 23f3936:	f004 be63 	b.w	23f8600 <malloc>

023f393a <_ZdaPv>:
 23f393a:	f004 be6f 	b.w	23f861c <free>

023f393e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23f393e:	f004 be6d 	b.w	23f861c <free>
	...

023f3944 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f3944:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23f3946:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f3948:	4a02      	ldr	r2, [pc, #8]	; (23f3954 <__cxa_pure_virtual+0x10>)
 23f394a:	4903      	ldr	r1, [pc, #12]	; (23f3958 <__cxa_pure_virtual+0x14>)
 23f394c:	f004 fc60 	bl	23f8210 <panic_>
  while (1);
 23f3950:	e7fe      	b.n	23f3950 <__cxa_pure_virtual+0xc>
 23f3952:	bf00      	nop
 23f3954:	023f7b9d 	.word	0x023f7b9d
 23f3958:	023fecc4 	.word	0x023fecc4

023f395c <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23f395c:	7800      	ldrb	r0, [r0, #0]
 23f395e:	fab0 f080 	clz	r0, r0
 23f3962:	0940      	lsrs	r0, r0, #5
 23f3964:	4770      	bx	lr

023f3966 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23f3966:	2301      	movs	r3, #1
 23f3968:	7003      	strb	r3, [r0, #0]
 23f396a:	4770      	bx	lr

023f396c <_Z37turnOnRearPorchLightWhenRearDoorOpensv>:
// }

//------------
// Behaviors
//------------
void turnOnRearPorchLightWhenRearDoorOpens() {
 23f396c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Device::setValue("RearPorch", 100);
 23f396e:	4908      	ldr	r1, [pc, #32]	; (23f3990 <_Z37turnOnRearPorchLightWhenRearDoorOpensv+0x24>)
 23f3970:	4668      	mov	r0, sp
 23f3972:	f006 fca4 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3976:	2164      	movs	r1, #100	; 0x64
 23f3978:	4668      	mov	r0, sp
 23f397a:	f003 f8a9 	bl	23f6ad0 <_ZN6Device8setValueE6Stringi>
 23f397e:	4668      	mov	r0, sp
 23f3980:	f006 fc52 	bl	23fa228 <_ZN6StringD1Ev>
    officeDoorTimer = true;
 23f3984:	2201      	movs	r2, #1
 23f3986:	4b03      	ldr	r3, [pc, #12]	; (23f3994 <_Z37turnOnRearPorchLightWhenRearDoorOpensv+0x28>)
 23f3988:	701a      	strb	r2, [r3, #0]
}
 23f398a:	b005      	add	sp, #20
 23f398c:	f85d fb04 	ldr.w	pc, [sp], #4
 23f3990:	023fecd9 	.word	0x023fecd9
 23f3994:	1007ace9 	.word	0x1007ace9

023f3998 <_Z19didOfficeDoorChangev>:
void didOfficeDoorChange() {
 23f3998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   int officeDoorChanged = Device::getChangedValue("OfficeDoor");
 23f399a:	490f      	ldr	r1, [pc, #60]	; (23f39d8 <_Z19didOfficeDoorChangev+0x40>)
 23f399c:	4668      	mov	r0, sp
 23f399e:	f006 fc8e 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f39a2:	4668      	mov	r0, sp
 23f39a4:	f003 f8ae 	bl	23f6b04 <_ZN6Device15getChangedValueE6String>
 23f39a8:	4604      	mov	r4, r0
 23f39aa:	4668      	mov	r0, sp
 23f39ac:	f006 fc3c 	bl	23fa228 <_ZN6StringD1Ev>
   if(officeDoorChanged != -1){
 23f39b0:	1c63      	adds	r3, r4, #1
 23f39b2:	d00f      	beq.n	23f39d4 <_Z19didOfficeDoorChangev+0x3c>
        officeDoorOpen = officeDoorChanged > 0;
 23f39b4:	2c00      	cmp	r4, #0
 23f39b6:	bfcc      	ite	gt
 23f39b8:	2201      	movgt	r2, #1
 23f39ba:	2200      	movle	r2, #0
 23f39bc:	4b07      	ldr	r3, [pc, #28]	; (23f39dc <_Z19didOfficeDoorChangev+0x44>)
 23f39be:	701a      	strb	r2, [r3, #0]
        if(officeDoorOpen) {    // For now ignoring when door closes
 23f39c0:	dd08      	ble.n	23f39d4 <_Z19didOfficeDoorChangev+0x3c>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f39c2:	f004 f8f9 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
            msecsOfficeDoorOpened = millis();
 23f39c6:	4b06      	ldr	r3, [pc, #24]	; (23f39e0 <_Z19didOfficeDoorChangev+0x48>)
 23f39c8:	6018      	str	r0, [r3, #0]
}
 23f39ca:	b004      	add	sp, #16
 23f39cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            turnOnRearPorchLightWhenRearDoorOpens();
 23f39d0:	f7ff bfcc 	b.w	23f396c <_Z37turnOnRearPorchLightWhenRearDoorOpensv>
}
 23f39d4:	b004      	add	sp, #16
 23f39d6:	bd10      	pop	{r4, pc}
 23f39d8:	023fece3 	.word	0x023fece3
 23f39dc:	1007ace8 	.word	0x1007ace8
 23f39e0:	1007ace4 	.word	0x1007ace4

023f39e4 <_Z27turnOffRearPorchAfter15minsv>:

void turnOffRearPorchAfter15mins() {
 23f39e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(officeDoorTimer == true && (millis() > msecsOfficeDoorOpened + OFFICE_DOOR_LIGHT_TIMEOUT)) {
 23f39e6:	4c0d      	ldr	r4, [pc, #52]	; (23f3a1c <_Z27turnOffRearPorchAfter15minsv+0x38>)
 23f39e8:	7823      	ldrb	r3, [r4, #0]
 23f39ea:	b1ab      	cbz	r3, 23f3a18 <_Z27turnOffRearPorchAfter15minsv+0x34>
 23f39ec:	f004 f8e4 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
 23f39f0:	4b0b      	ldr	r3, [pc, #44]	; (23f3a20 <_Z27turnOffRearPorchAfter15minsv+0x3c>)
 23f39f2:	681b      	ldr	r3, [r3, #0]
 23f39f4:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 23f39f8:	3318      	adds	r3, #24
 23f39fa:	4283      	cmp	r3, r0
 23f39fc:	d20c      	bcs.n	23f3a18 <_Z27turnOffRearPorchAfter15minsv+0x34>
        Device::setValue("RearPorch", 0);
 23f39fe:	4909      	ldr	r1, [pc, #36]	; (23f3a24 <_Z27turnOffRearPorchAfter15minsv+0x40>)
 23f3a00:	4668      	mov	r0, sp
 23f3a02:	f006 fc5c 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3a06:	2100      	movs	r1, #0
 23f3a08:	4668      	mov	r0, sp
 23f3a0a:	f003 f861 	bl	23f6ad0 <_ZN6Device8setValueE6Stringi>
 23f3a0e:	4668      	mov	r0, sp
 23f3a10:	f006 fc0a 	bl	23fa228 <_ZN6StringD1Ev>
        officeDoorTimer = false;
 23f3a14:	2300      	movs	r3, #0
 23f3a16:	7023      	strb	r3, [r4, #0]
    }
}
 23f3a18:	b004      	add	sp, #16
 23f3a1a:	bd10      	pop	{r4, pc}
 23f3a1c:	1007ace9 	.word	0x1007ace9
 23f3a20:	1007ace4 	.word	0x1007ace4
 23f3a24:	023fecd9 	.word	0x023fecd9

023f3a28 <_Z13createDevicesv>:


//---------------
// Setup Methods
//---------------
void createDevices() {
 23f3a28:	b510      	push	{r4, lr}
 23f3a2a:	b08a      	sub	sp, #40	; 0x28
    // I2CIO4R4G5LE board
    // 4 Relays
    Device::add(new Curtain(0, "Curtain", "Office"));     // 2x Relays: 0, 1
 23f3a2c:	49ba      	ldr	r1, [pc, #744]	; (23f3d18 <_Z13createDevicesv+0x2f0>)
 23f3a2e:	a802      	add	r0, sp, #8
 23f3a30:	f006 fc45 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3a34:	49b9      	ldr	r1, [pc, #740]	; (23f3d1c <_Z13createDevicesv+0x2f4>)
 23f3a36:	a806      	add	r0, sp, #24
 23f3a38:	f006 fc41 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3a3c:	204c      	movs	r0, #76	; 0x4c
 23f3a3e:	f7ff ff78 	bl	23f3932 <_Znwj>
 23f3a42:	4604      	mov	r4, r0
 23f3a44:	b120      	cbz	r0, 23f3a50 <_Z13createDevicesv+0x28>
 23f3a46:	2100      	movs	r1, #0
 23f3a48:	ab06      	add	r3, sp, #24
 23f3a4a:	aa02      	add	r2, sp, #8
 23f3a4c:	f002 f952 	bl	23f5cf4 <_ZN7CurtainC1Ea6StringS0_>
 23f3a50:	4620      	mov	r0, r4
 23f3a52:	f002 ffbd 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3a56:	a806      	add	r0, sp, #24
 23f3a58:	f006 fbe6 	bl	23fa228 <_ZN6StringD1Ev>
 23f3a5c:	a802      	add	r0, sp, #8
 23f3a5e:	f006 fbe3 	bl	23fa228 <_ZN6StringD1Ev>
    // Device::add(new Awning(2, "RearAwning", "Outside")); // 2x Relays: 2, 3
    
    // 4 GPIO
    Device::add(new NCD4Switch(1, "OfficeDoor", "Office"));
 23f3a62:	49af      	ldr	r1, [pc, #700]	; (23f3d20 <_Z13createDevicesv+0x2f8>)
 23f3a64:	a802      	add	r0, sp, #8
 23f3a66:	f006 fc2a 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3a6a:	49ac      	ldr	r1, [pc, #688]	; (23f3d1c <_Z13createDevicesv+0x2f4>)
 23f3a6c:	a806      	add	r0, sp, #24
 23f3a6e:	f006 fc26 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3a72:	2040      	movs	r0, #64	; 0x40
 23f3a74:	f7ff ff5d 	bl	23f3932 <_Znwj>
 23f3a78:	4604      	mov	r4, r0
 23f3a7a:	b120      	cbz	r0, 23f3a86 <_Z13createDevicesv+0x5e>
 23f3a7c:	2101      	movs	r1, #1
 23f3a7e:	ab06      	add	r3, sp, #24
 23f3a80:	aa02      	add	r2, sp, #8
 23f3a82:	f002 fb3b 	bl	23f60fc <_ZN10NCD4SwitchC1Ea6StringS0_>
 23f3a86:	4620      	mov	r0, r4
 23f3a88:	f002 ffa2 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3a8c:	a806      	add	r0, sp, #24
 23f3a8e:	f006 fbcb 	bl	23fa228 <_ZN6StringD1Ev>
 23f3a92:	a802      	add	r0, sp, #8
 23f3a94:	f006 fbc8 	bl	23fa228 <_ZN6StringD1Ev>
    // (deprecated) Photon I/O
    //Device::add(new PIR(A5, "OfficeMotion", "Office", OFFICE_MOTION_TIMEOUT));

    // I2CPWM8W80C board
    // 8 Dimmers
    Device::add(new NCD8Light(1, "OfficeCeiling", "Office"));
 23f3a98:	49a2      	ldr	r1, [pc, #648]	; (23f3d24 <_Z13createDevicesv+0x2fc>)
 23f3a9a:	a802      	add	r0, sp, #8
 23f3a9c:	f006 fc0f 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3aa0:	499e      	ldr	r1, [pc, #632]	; (23f3d1c <_Z13createDevicesv+0x2f4>)
 23f3aa2:	a806      	add	r0, sp, #24
 23f3aa4:	f006 fc0b 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3aa8:	2054      	movs	r0, #84	; 0x54
 23f3aaa:	f7ff ff42 	bl	23f3932 <_Znwj>
 23f3aae:	4604      	mov	r4, r0
 23f3ab0:	b148      	cbz	r0, 23f3ac6 <_Z13createDevicesv+0x9e>
 23f3ab2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 23f3ab6:	2102      	movs	r1, #2
 23f3ab8:	aa02      	add	r2, sp, #8
 23f3aba:	e9cd 3100 	strd	r3, r1, [sp]
 23f3abe:	2101      	movs	r1, #1
 23f3ac0:	ab06      	add	r3, sp, #24
 23f3ac2:	f002 fbc3 	bl	23f624c <_ZN9NCD8LightC1Ei6StringS0_ii>
 23f3ac6:	4620      	mov	r0, r4
 23f3ac8:	f002 ff82 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3acc:	a806      	add	r0, sp, #24
 23f3ace:	f006 fbab 	bl	23fa228 <_ZN6StringD1Ev>
 23f3ad2:	a802      	add	r0, sp, #8
 23f3ad4:	f006 fba8 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new NCD8Light(2, "Loft", "Office"));
 23f3ad8:	4993      	ldr	r1, [pc, #588]	; (23f3d28 <_Z13createDevicesv+0x300>)
 23f3ada:	a802      	add	r0, sp, #8
 23f3adc:	f006 fbef 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3ae0:	498e      	ldr	r1, [pc, #568]	; (23f3d1c <_Z13createDevicesv+0x2f4>)
 23f3ae2:	a806      	add	r0, sp, #24
 23f3ae4:	f006 fbeb 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3ae8:	2054      	movs	r0, #84	; 0x54
 23f3aea:	f7ff ff22 	bl	23f3932 <_Znwj>
 23f3aee:	4604      	mov	r4, r0
 23f3af0:	b140      	cbz	r0, 23f3b04 <_Z13createDevicesv+0xdc>
 23f3af2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 23f3af6:	2102      	movs	r1, #2
 23f3af8:	aa02      	add	r2, sp, #8
 23f3afa:	e9cd 3100 	strd	r3, r1, [sp]
 23f3afe:	ab06      	add	r3, sp, #24
 23f3b00:	f002 fba4 	bl	23f624c <_ZN9NCD8LightC1Ei6StringS0_ii>
 23f3b04:	4620      	mov	r0, r4
 23f3b06:	f002 ff63 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3b0a:	a806      	add	r0, sp, #24
 23f3b0c:	f006 fb8c 	bl	23fa228 <_ZN6StringD1Ev>
 23f3b10:	a802      	add	r0, sp, #8
 23f3b12:	f006 fb89 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new NCD8Light(3, "RampPorch", "Outside"));
 23f3b16:	4985      	ldr	r1, [pc, #532]	; (23f3d2c <_Z13createDevicesv+0x304>)
 23f3b18:	a802      	add	r0, sp, #8
 23f3b1a:	f006 fbd0 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3b1e:	4984      	ldr	r1, [pc, #528]	; (23f3d30 <_Z13createDevicesv+0x308>)
 23f3b20:	a806      	add	r0, sp, #24
 23f3b22:	f006 fbcc 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3b26:	2054      	movs	r0, #84	; 0x54
 23f3b28:	f7ff ff03 	bl	23f3932 <_Znwj>
 23f3b2c:	4604      	mov	r4, r0
 23f3b2e:	b148      	cbz	r0, 23f3b44 <_Z13createDevicesv+0x11c>
 23f3b30:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 23f3b34:	2202      	movs	r2, #2
 23f3b36:	2103      	movs	r1, #3
 23f3b38:	e9cd 3200 	strd	r3, r2, [sp]
 23f3b3c:	ab06      	add	r3, sp, #24
 23f3b3e:	aa02      	add	r2, sp, #8
 23f3b40:	f002 fb84 	bl	23f624c <_ZN9NCD8LightC1Ei6StringS0_ii>
 23f3b44:	4620      	mov	r0, r4
 23f3b46:	f002 ff43 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3b4a:	a806      	add	r0, sp, #24
 23f3b4c:	f006 fb6c 	bl	23fa228 <_ZN6StringD1Ev>
 23f3b50:	a802      	add	r0, sp, #8
 23f3b52:	f006 fb69 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new NCD8Light(4, "RampAwning", "Outside"));
 23f3b56:	4977      	ldr	r1, [pc, #476]	; (23f3d34 <_Z13createDevicesv+0x30c>)
 23f3b58:	a802      	add	r0, sp, #8
 23f3b5a:	f006 fbb0 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3b5e:	4974      	ldr	r1, [pc, #464]	; (23f3d30 <_Z13createDevicesv+0x308>)
 23f3b60:	a806      	add	r0, sp, #24
 23f3b62:	f006 fbac 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3b66:	2054      	movs	r0, #84	; 0x54
 23f3b68:	f7ff fee3 	bl	23f3932 <_Znwj>
 23f3b6c:	4604      	mov	r4, r0
 23f3b6e:	b150      	cbz	r0, 23f3b86 <_Z13createDevicesv+0x15e>
 23f3b70:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 23f3b74:	f04f 0e02 	mov.w	lr, #2
 23f3b78:	2104      	movs	r1, #4
 23f3b7a:	e9cd 3e00 	strd	r3, lr, [sp]
 23f3b7e:	aa02      	add	r2, sp, #8
 23f3b80:	ab06      	add	r3, sp, #24
 23f3b82:	f002 fb63 	bl	23f624c <_ZN9NCD8LightC1Ei6StringS0_ii>
 23f3b86:	4620      	mov	r0, r4
 23f3b88:	f002 ff22 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3b8c:	a806      	add	r0, sp, #24
 23f3b8e:	f006 fb4b 	bl	23fa228 <_ZN6StringD1Ev>
 23f3b92:	a802      	add	r0, sp, #8
 23f3b94:	f006 fb48 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new NCD8Light(5, "RearPorch", "Outside"));
 23f3b98:	4967      	ldr	r1, [pc, #412]	; (23f3d38 <_Z13createDevicesv+0x310>)
 23f3b9a:	a802      	add	r0, sp, #8
 23f3b9c:	f006 fb8f 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3ba0:	4963      	ldr	r1, [pc, #396]	; (23f3d30 <_Z13createDevicesv+0x308>)
 23f3ba2:	a806      	add	r0, sp, #24
 23f3ba4:	f006 fb8b 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3ba8:	2054      	movs	r0, #84	; 0x54
 23f3baa:	f7ff fec2 	bl	23f3932 <_Znwj>
 23f3bae:	4604      	mov	r4, r0
 23f3bb0:	b150      	cbz	r0, 23f3bc8 <_Z13createDevicesv+0x1a0>
 23f3bb2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 23f3bb6:	f04f 0c02 	mov.w	ip, #2
 23f3bba:	2105      	movs	r1, #5
 23f3bbc:	e9cd 3c00 	strd	r3, ip, [sp]
 23f3bc0:	aa02      	add	r2, sp, #8
 23f3bc2:	ab06      	add	r3, sp, #24
 23f3bc4:	f002 fb42 	bl	23f624c <_ZN9NCD8LightC1Ei6StringS0_ii>
 23f3bc8:	4620      	mov	r0, r4
 23f3bca:	f002 ff01 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3bce:	a806      	add	r0, sp, #24
 23f3bd0:	f006 fb2a 	bl	23fa228 <_ZN6StringD1Ev>
 23f3bd4:	a802      	add	r0, sp, #8
 23f3bd6:	f006 fb27 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new NCD8Light(6, "RearAwning", "Outside"));
 23f3bda:	4958      	ldr	r1, [pc, #352]	; (23f3d3c <_Z13createDevicesv+0x314>)
 23f3bdc:	a802      	add	r0, sp, #8
 23f3bde:	f006 fb6e 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3be2:	4953      	ldr	r1, [pc, #332]	; (23f3d30 <_Z13createDevicesv+0x308>)
 23f3be4:	a806      	add	r0, sp, #24
 23f3be6:	f006 fb6a 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3bea:	2054      	movs	r0, #84	; 0x54
 23f3bec:	f7ff fea1 	bl	23f3932 <_Znwj>
 23f3bf0:	4604      	mov	r4, r0
 23f3bf2:	b148      	cbz	r0, 23f3c08 <_Z13createDevicesv+0x1e0>
 23f3bf4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 23f3bf8:	2102      	movs	r1, #2
 23f3bfa:	aa02      	add	r2, sp, #8
 23f3bfc:	e9cd 3100 	strd	r3, r1, [sp]
 23f3c00:	2106      	movs	r1, #6
 23f3c02:	ab06      	add	r3, sp, #24
 23f3c04:	f002 fb22 	bl	23f624c <_ZN9NCD8LightC1Ei6StringS0_ii>
 23f3c08:	4620      	mov	r0, r4
 23f3c0a:	f002 fee1 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3c0e:	a806      	add	r0, sp, #24
 23f3c10:	f006 fb0a 	bl	23fa228 <_ZN6StringD1Ev>
 23f3c14:	a802      	add	r0, sp, #8
 23f3c16:	f006 fb07 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new NCD8Light(7, "Piano", "Office"));
 23f3c1a:	4949      	ldr	r1, [pc, #292]	; (23f3d40 <_Z13createDevicesv+0x318>)
 23f3c1c:	a802      	add	r0, sp, #8
 23f3c1e:	f006 fb4e 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3c22:	493e      	ldr	r1, [pc, #248]	; (23f3d1c <_Z13createDevicesv+0x2f4>)
 23f3c24:	a806      	add	r0, sp, #24
 23f3c26:	f006 fb4a 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3c2a:	2054      	movs	r0, #84	; 0x54
 23f3c2c:	f7ff fe81 	bl	23f3932 <_Znwj>
 23f3c30:	4604      	mov	r4, r0
 23f3c32:	b148      	cbz	r0, 23f3c48 <_Z13createDevicesv+0x220>
 23f3c34:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 23f3c38:	2202      	movs	r2, #2
 23f3c3a:	2107      	movs	r1, #7
 23f3c3c:	e9cd 3200 	strd	r3, r2, [sp]
 23f3c40:	ab06      	add	r3, sp, #24
 23f3c42:	aa02      	add	r2, sp, #8
 23f3c44:	f002 fb02 	bl	23f624c <_ZN9NCD8LightC1Ei6StringS0_ii>
 23f3c48:	4620      	mov	r0, r4
 23f3c4a:	f002 fec1 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3c4e:	a806      	add	r0, sp, #24
 23f3c50:	f006 faea 	bl	23fa228 <_ZN6StringD1Ev>
 23f3c54:	a802      	add	r0, sp, #8
 23f3c56:	f006 fae7 	bl	23fa228 <_ZN6StringD1Ev>
    //Device::add(new NCD8Light(8, "Unused", "Office"));

    // Pseudo Devices
    Device::add(new Device("AnyoneHome", "All", 'X'));
 23f3c5a:	493a      	ldr	r1, [pc, #232]	; (23f3d44 <_Z13createDevicesv+0x31c>)
 23f3c5c:	a802      	add	r0, sp, #8
 23f3c5e:	f006 fb2e 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3c62:	4939      	ldr	r1, [pc, #228]	; (23f3d48 <_Z13createDevicesv+0x320>)
 23f3c64:	a806      	add	r0, sp, #24
 23f3c66:	f006 fb2a 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3c6a:	2038      	movs	r0, #56	; 0x38
 23f3c6c:	f7ff fe61 	bl	23f3932 <_Znwj>
 23f3c70:	4604      	mov	r4, r0
 23f3c72:	b120      	cbz	r0, 23f3c7e <_Z13createDevicesv+0x256>
 23f3c74:	2358      	movs	r3, #88	; 0x58
 23f3c76:	aa06      	add	r2, sp, #24
 23f3c78:	a902      	add	r1, sp, #8
 23f3c7a:	f002 fe8f 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f3c7e:	4620      	mov	r0, r4
 23f3c80:	f002 fea6 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3c84:	a806      	add	r0, sp, #24
 23f3c86:	f006 facf 	bl	23fa228 <_ZN6StringD1Ev>
 23f3c8a:	a802      	add	r0, sp, #8
 23f3c8c:	f006 facc 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("RonHome", "All", 'X'));
 23f3c90:	492e      	ldr	r1, [pc, #184]	; (23f3d4c <_Z13createDevicesv+0x324>)
 23f3c92:	a802      	add	r0, sp, #8
 23f3c94:	f006 fb13 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3c98:	492b      	ldr	r1, [pc, #172]	; (23f3d48 <_Z13createDevicesv+0x320>)
 23f3c9a:	a806      	add	r0, sp, #24
 23f3c9c:	f006 fb0f 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3ca0:	2038      	movs	r0, #56	; 0x38
 23f3ca2:	f7ff fe46 	bl	23f3932 <_Znwj>
 23f3ca6:	4604      	mov	r4, r0
 23f3ca8:	b120      	cbz	r0, 23f3cb4 <_Z13createDevicesv+0x28c>
 23f3caa:	2358      	movs	r3, #88	; 0x58
 23f3cac:	aa06      	add	r2, sp, #24
 23f3cae:	a902      	add	r1, sp, #8
 23f3cb0:	f002 fe74 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f3cb4:	4620      	mov	r0, r4
 23f3cb6:	f002 fe8b 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3cba:	a806      	add	r0, sp, #24
 23f3cbc:	f006 fab4 	bl	23fa228 <_ZN6StringD1Ev>
 23f3cc0:	a802      	add	r0, sp, #8
 23f3cc2:	f006 fab1 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("ShelleyHome", "All", 'X'));
 23f3cc6:	4922      	ldr	r1, [pc, #136]	; (23f3d50 <_Z13createDevicesv+0x328>)
 23f3cc8:	a802      	add	r0, sp, #8
 23f3cca:	f006 faf8 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3cce:	491e      	ldr	r1, [pc, #120]	; (23f3d48 <_Z13createDevicesv+0x320>)
 23f3cd0:	a806      	add	r0, sp, #24
 23f3cd2:	f006 faf4 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3cd6:	2038      	movs	r0, #56	; 0x38
 23f3cd8:	f7ff fe2b 	bl	23f3932 <_Znwj>
 23f3cdc:	4604      	mov	r4, r0
 23f3cde:	b120      	cbz	r0, 23f3cea <_Z13createDevicesv+0x2c2>
 23f3ce0:	2358      	movs	r3, #88	; 0x58
 23f3ce2:	aa06      	add	r2, sp, #24
 23f3ce4:	a902      	add	r1, sp, #8
 23f3ce6:	f002 fe59 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f3cea:	4620      	mov	r0, r4
 23f3cec:	f002 fe70 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3cf0:	a806      	add	r0, sp, #24
 23f3cf2:	f006 fa99 	bl	23fa228 <_ZN6StringD1Ev>
 23f3cf6:	a802      	add	r0, sp, #8
 23f3cf8:	f006 fa96 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("Nighttime", "All", 'X'));
 23f3cfc:	4915      	ldr	r1, [pc, #84]	; (23f3d54 <_Z13createDevicesv+0x32c>)
 23f3cfe:	a802      	add	r0, sp, #8
 23f3d00:	f006 fadd 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3d04:	4910      	ldr	r1, [pc, #64]	; (23f3d48 <_Z13createDevicesv+0x320>)
 23f3d06:	a806      	add	r0, sp, #24
 23f3d08:	f006 fad9 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3d0c:	2038      	movs	r0, #56	; 0x38
 23f3d0e:	f7ff fe10 	bl	23f3932 <_Znwj>
 23f3d12:	4604      	mov	r4, r0
 23f3d14:	e020      	b.n	23f3d58 <_Z13createDevicesv+0x330>
 23f3d16:	bf00      	nop
 23f3d18:	023fecee 	.word	0x023fecee
 23f3d1c:	023fecf6 	.word	0x023fecf6
 23f3d20:	023fece3 	.word	0x023fece3
 23f3d24:	023fecfd 	.word	0x023fecfd
 23f3d28:	023fed0b 	.word	0x023fed0b
 23f3d2c:	023fed10 	.word	0x023fed10
 23f3d30:	023fed1a 	.word	0x023fed1a
 23f3d34:	023fed22 	.word	0x023fed22
 23f3d38:	023fecd9 	.word	0x023fecd9
 23f3d3c:	023fed2d 	.word	0x023fed2d
 23f3d40:	023fed38 	.word	0x023fed38
 23f3d44:	023fed3e 	.word	0x023fed3e
 23f3d48:	023fed49 	.word	0x023fed49
 23f3d4c:	023fed4d 	.word	0x023fed4d
 23f3d50:	023fed55 	.word	0x023fed55
 23f3d54:	023fed61 	.word	0x023fed61
 23f3d58:	b120      	cbz	r0, 23f3d64 <_Z13createDevicesv+0x33c>
 23f3d5a:	2358      	movs	r3, #88	; 0x58
 23f3d5c:	aa06      	add	r2, sp, #24
 23f3d5e:	a902      	add	r1, sp, #8
 23f3d60:	f002 fe1c 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f3d64:	4620      	mov	r0, r4
 23f3d66:	f002 fe33 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3d6a:	a806      	add	r0, sp, #24
 23f3d6c:	f006 fa5c 	bl	23fa228 <_ZN6StringD1Ev>
 23f3d70:	a802      	add	r0, sp, #8
 23f3d72:	f006 fa59 	bl	23fa228 <_ZN6StringD1Ev>

    // Checklist Items -  - define for every non-automated checklist item
    
    // Pre-Trip checklist items
    Device::add(new Device("startList", "All", 'X'));
 23f3d76:	49b4      	ldr	r1, [pc, #720]	; (23f4048 <_Z13createDevicesv+0x620>)
 23f3d78:	a802      	add	r0, sp, #8
 23f3d7a:	f006 faa0 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3d7e:	49b3      	ldr	r1, [pc, #716]	; (23f404c <_Z13createDevicesv+0x624>)
 23f3d80:	a806      	add	r0, sp, #24
 23f3d82:	f006 fa9c 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3d86:	2038      	movs	r0, #56	; 0x38
 23f3d88:	f7ff fdd3 	bl	23f3932 <_Znwj>
 23f3d8c:	4604      	mov	r4, r0
 23f3d8e:	b120      	cbz	r0, 23f3d9a <_Z13createDevicesv+0x372>
 23f3d90:	2358      	movs	r3, #88	; 0x58
 23f3d92:	aa06      	add	r2, sp, #24
 23f3d94:	a902      	add	r1, sp, #8
 23f3d96:	f002 fe01 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f3d9a:	4620      	mov	r0, r4
 23f3d9c:	f002 fe18 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3da0:	a806      	add	r0, sp, #24
 23f3da2:	f006 fa41 	bl	23fa228 <_ZN6StringD1Ev>
 23f3da6:	a802      	add	r0, sp, #8
 23f3da8:	f006 fa3e 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("checkTires", "All", 'X'));
 23f3dac:	49a8      	ldr	r1, [pc, #672]	; (23f4050 <_Z13createDevicesv+0x628>)
 23f3dae:	a802      	add	r0, sp, #8
 23f3db0:	f006 fa85 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3db4:	49a5      	ldr	r1, [pc, #660]	; (23f404c <_Z13createDevicesv+0x624>)
 23f3db6:	a806      	add	r0, sp, #24
 23f3db8:	f006 fa81 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3dbc:	2038      	movs	r0, #56	; 0x38
 23f3dbe:	f7ff fdb8 	bl	23f3932 <_Znwj>
 23f3dc2:	4604      	mov	r4, r0
 23f3dc4:	b120      	cbz	r0, 23f3dd0 <_Z13createDevicesv+0x3a8>
 23f3dc6:	2358      	movs	r3, #88	; 0x58
 23f3dc8:	aa06      	add	r2, sp, #24
 23f3dca:	a902      	add	r1, sp, #8
 23f3dcc:	f002 fde6 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f3dd0:	4620      	mov	r0, r4
 23f3dd2:	f002 fdfd 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3dd6:	a806      	add	r0, sp, #24
 23f3dd8:	f006 fa26 	bl	23fa228 <_ZN6StringD1Ev>
 23f3ddc:	a802      	add	r0, sp, #8
 23f3dde:	f006 fa23 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("dumpTanks", "All", 'X'));
 23f3de2:	499c      	ldr	r1, [pc, #624]	; (23f4054 <_Z13createDevicesv+0x62c>)
 23f3de4:	a802      	add	r0, sp, #8
 23f3de6:	f006 fa6a 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3dea:	4998      	ldr	r1, [pc, #608]	; (23f404c <_Z13createDevicesv+0x624>)
 23f3dec:	a806      	add	r0, sp, #24
 23f3dee:	f006 fa66 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3df2:	2038      	movs	r0, #56	; 0x38
 23f3df4:	f7ff fd9d 	bl	23f3932 <_Znwj>
 23f3df8:	4604      	mov	r4, r0
 23f3dfa:	b120      	cbz	r0, 23f3e06 <_Z13createDevicesv+0x3de>
 23f3dfc:	2358      	movs	r3, #88	; 0x58
 23f3dfe:	aa06      	add	r2, sp, #24
 23f3e00:	a902      	add	r1, sp, #8
 23f3e02:	f002 fdcb 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f3e06:	4620      	mov	r0, r4
 23f3e08:	f002 fde2 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3e0c:	a806      	add	r0, sp, #24
 23f3e0e:	f006 fa0b 	bl	23fa228 <_ZN6StringD1Ev>
 23f3e12:	a802      	add	r0, sp, #8
 23f3e14:	f006 fa08 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("fillWater", "All", 'X'));
 23f3e18:	498f      	ldr	r1, [pc, #572]	; (23f4058 <_Z13createDevicesv+0x630>)
 23f3e1a:	a802      	add	r0, sp, #8
 23f3e1c:	f006 fa4f 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3e20:	498a      	ldr	r1, [pc, #552]	; (23f404c <_Z13createDevicesv+0x624>)
 23f3e22:	a806      	add	r0, sp, #24
 23f3e24:	f006 fa4b 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3e28:	2038      	movs	r0, #56	; 0x38
 23f3e2a:	f7ff fd82 	bl	23f3932 <_Znwj>
 23f3e2e:	4604      	mov	r4, r0
 23f3e30:	b120      	cbz	r0, 23f3e3c <_Z13createDevicesv+0x414>
 23f3e32:	2358      	movs	r3, #88	; 0x58
 23f3e34:	aa06      	add	r2, sp, #24
 23f3e36:	a902      	add	r1, sp, #8
 23f3e38:	f002 fdb0 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f3e3c:	4620      	mov	r0, r4
 23f3e3e:	f002 fdc7 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3e42:	a806      	add	r0, sp, #24
 23f3e44:	f006 f9f0 	bl	23fa228 <_ZN6StringD1Ev>
 23f3e48:	a802      	add	r0, sp, #8
 23f3e4a:	f006 f9ed 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("fuel", "All", 'X'));
 23f3e4e:	4983      	ldr	r1, [pc, #524]	; (23f405c <_Z13createDevicesv+0x634>)
 23f3e50:	a802      	add	r0, sp, #8
 23f3e52:	f006 fa34 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3e56:	497d      	ldr	r1, [pc, #500]	; (23f404c <_Z13createDevicesv+0x624>)
 23f3e58:	a806      	add	r0, sp, #24
 23f3e5a:	f006 fa30 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3e5e:	2038      	movs	r0, #56	; 0x38
 23f3e60:	f7ff fd67 	bl	23f3932 <_Znwj>
 23f3e64:	4604      	mov	r4, r0
 23f3e66:	b120      	cbz	r0, 23f3e72 <_Z13createDevicesv+0x44a>
 23f3e68:	2358      	movs	r3, #88	; 0x58
 23f3e6a:	aa06      	add	r2, sp, #24
 23f3e6c:	a902      	add	r1, sp, #8
 23f3e6e:	f002 fd95 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f3e72:	4620      	mov	r0, r4
 23f3e74:	f002 fdac 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3e78:	a806      	add	r0, sp, #24
 23f3e7a:	f006 f9d5 	bl	23fa228 <_ZN6StringD1Ev>
 23f3e7e:	a802      	add	r0, sp, #8
 23f3e80:	f006 f9d2 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("fillPropane", "All", 'X'));
 23f3e84:	4976      	ldr	r1, [pc, #472]	; (23f4060 <_Z13createDevicesv+0x638>)
 23f3e86:	a802      	add	r0, sp, #8
 23f3e88:	f006 fa19 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3e8c:	496f      	ldr	r1, [pc, #444]	; (23f404c <_Z13createDevicesv+0x624>)
 23f3e8e:	a806      	add	r0, sp, #24
 23f3e90:	f006 fa15 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3e94:	2038      	movs	r0, #56	; 0x38
 23f3e96:	f7ff fd4c 	bl	23f3932 <_Znwj>
 23f3e9a:	4604      	mov	r4, r0
 23f3e9c:	b120      	cbz	r0, 23f3ea8 <_Z13createDevicesv+0x480>
 23f3e9e:	2358      	movs	r3, #88	; 0x58
 23f3ea0:	aa06      	add	r2, sp, #24
 23f3ea2:	a902      	add	r1, sp, #8
 23f3ea4:	f002 fd7a 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f3ea8:	4620      	mov	r0, r4
 23f3eaa:	f002 fd91 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3eae:	a806      	add	r0, sp, #24
 23f3eb0:	f006 f9ba 	bl	23fa228 <_ZN6StringD1Ev>
 23f3eb4:	a802      	add	r0, sp, #8
 23f3eb6:	f006 f9b7 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("checkRoof", "All", 'X'));
 23f3eba:	496a      	ldr	r1, [pc, #424]	; (23f4064 <_Z13createDevicesv+0x63c>)
 23f3ebc:	a802      	add	r0, sp, #8
 23f3ebe:	f006 f9fe 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3ec2:	4962      	ldr	r1, [pc, #392]	; (23f404c <_Z13createDevicesv+0x624>)
 23f3ec4:	a806      	add	r0, sp, #24
 23f3ec6:	f006 f9fa 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3eca:	2038      	movs	r0, #56	; 0x38
 23f3ecc:	f7ff fd31 	bl	23f3932 <_Znwj>
 23f3ed0:	4604      	mov	r4, r0
 23f3ed2:	b120      	cbz	r0, 23f3ede <_Z13createDevicesv+0x4b6>
 23f3ed4:	2358      	movs	r3, #88	; 0x58
 23f3ed6:	aa06      	add	r2, sp, #24
 23f3ed8:	a902      	add	r1, sp, #8
 23f3eda:	f002 fd5f 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f3ede:	4620      	mov	r0, r4
 23f3ee0:	f002 fd76 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3ee4:	a806      	add	r0, sp, #24
 23f3ee6:	f006 f99f 	bl	23fa228 <_ZN6StringD1Ev>
 23f3eea:	a802      	add	r0, sp, #8
 23f3eec:	f006 f99c 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("checkUnderRV", "All", 'X'));
 23f3ef0:	495d      	ldr	r1, [pc, #372]	; (23f4068 <_Z13createDevicesv+0x640>)
 23f3ef2:	a802      	add	r0, sp, #8
 23f3ef4:	f006 f9e3 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3ef8:	4954      	ldr	r1, [pc, #336]	; (23f404c <_Z13createDevicesv+0x624>)
 23f3efa:	a806      	add	r0, sp, #24
 23f3efc:	f006 f9df 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3f00:	2038      	movs	r0, #56	; 0x38
 23f3f02:	f7ff fd16 	bl	23f3932 <_Znwj>
 23f3f06:	4604      	mov	r4, r0
 23f3f08:	b120      	cbz	r0, 23f3f14 <_Z13createDevicesv+0x4ec>
 23f3f0a:	2358      	movs	r3, #88	; 0x58
 23f3f0c:	aa06      	add	r2, sp, #24
 23f3f0e:	a902      	add	r1, sp, #8
 23f3f10:	f002 fd44 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f3f14:	4620      	mov	r0, r4
 23f3f16:	f002 fd5b 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3f1a:	a806      	add	r0, sp, #24
 23f3f1c:	f006 f984 	bl	23fa228 <_ZN6StringD1Ev>
 23f3f20:	a802      	add	r0, sp, #8
 23f3f22:	f006 f981 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("planRoute", "All", 'X'));
 23f3f26:	4951      	ldr	r1, [pc, #324]	; (23f406c <_Z13createDevicesv+0x644>)
 23f3f28:	a802      	add	r0, sp, #8
 23f3f2a:	f006 f9c8 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3f2e:	4947      	ldr	r1, [pc, #284]	; (23f404c <_Z13createDevicesv+0x624>)
 23f3f30:	a806      	add	r0, sp, #24
 23f3f32:	f006 f9c4 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3f36:	2038      	movs	r0, #56	; 0x38
 23f3f38:	f7ff fcfb 	bl	23f3932 <_Znwj>
 23f3f3c:	4604      	mov	r4, r0
 23f3f3e:	b120      	cbz	r0, 23f3f4a <_Z13createDevicesv+0x522>
 23f3f40:	2358      	movs	r3, #88	; 0x58
 23f3f42:	aa06      	add	r2, sp, #24
 23f3f44:	a902      	add	r1, sp, #8
 23f3f46:	f002 fd29 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f3f4a:	4620      	mov	r0, r4
 23f3f4c:	f002 fd40 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3f50:	a806      	add	r0, sp, #24
 23f3f52:	f006 f969 	bl	23fa228 <_ZN6StringD1Ev>
 23f3f56:	a802      	add	r0, sp, #8
 23f3f58:	f006 f966 	bl	23fa228 <_ZN6StringD1Ev>

    // Depart checklist items
    Device::add(new Device("bedSlideIn", "All", 'X'));
 23f3f5c:	4944      	ldr	r1, [pc, #272]	; (23f4070 <_Z13createDevicesv+0x648>)
 23f3f5e:	a802      	add	r0, sp, #8
 23f3f60:	f006 f9ad 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3f64:	4939      	ldr	r1, [pc, #228]	; (23f404c <_Z13createDevicesv+0x624>)
 23f3f66:	a806      	add	r0, sp, #24
 23f3f68:	f006 f9a9 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3f6c:	2038      	movs	r0, #56	; 0x38
 23f3f6e:	f7ff fce0 	bl	23f3932 <_Znwj>
 23f3f72:	4604      	mov	r4, r0
 23f3f74:	b120      	cbz	r0, 23f3f80 <_Z13createDevicesv+0x558>
 23f3f76:	2358      	movs	r3, #88	; 0x58
 23f3f78:	aa06      	add	r2, sp, #24
 23f3f7a:	a902      	add	r1, sp, #8
 23f3f7c:	f002 fd0e 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f3f80:	4620      	mov	r0, r4
 23f3f82:	f002 fd25 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3f86:	a806      	add	r0, sp, #24
 23f3f88:	f006 f94e 	bl	23fa228 <_ZN6StringD1Ev>
 23f3f8c:	a802      	add	r0, sp, #8
 23f3f8e:	f006 f94b 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("LRSlideIn", "All", 'X'));
 23f3f92:	4938      	ldr	r1, [pc, #224]	; (23f4074 <_Z13createDevicesv+0x64c>)
 23f3f94:	a802      	add	r0, sp, #8
 23f3f96:	f006 f992 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3f9a:	492c      	ldr	r1, [pc, #176]	; (23f404c <_Z13createDevicesv+0x624>)
 23f3f9c:	a806      	add	r0, sp, #24
 23f3f9e:	f006 f98e 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3fa2:	2038      	movs	r0, #56	; 0x38
 23f3fa4:	f7ff fcc5 	bl	23f3932 <_Znwj>
 23f3fa8:	4604      	mov	r4, r0
 23f3faa:	b120      	cbz	r0, 23f3fb6 <_Z13createDevicesv+0x58e>
 23f3fac:	2358      	movs	r3, #88	; 0x58
 23f3fae:	aa06      	add	r2, sp, #24
 23f3fb0:	a902      	add	r1, sp, #8
 23f3fb2:	f002 fcf3 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f3fb6:	4620      	mov	r0, r4
 23f3fb8:	f002 fd0a 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3fbc:	a806      	add	r0, sp, #24
 23f3fbe:	f006 f933 	bl	23fa228 <_ZN6StringD1Ev>
 23f3fc2:	a802      	add	r0, sp, #8
 23f3fc4:	f006 f930 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("rampAwningIn", "All", 'X'));
 23f3fc8:	492b      	ldr	r1, [pc, #172]	; (23f4078 <_Z13createDevicesv+0x650>)
 23f3fca:	a802      	add	r0, sp, #8
 23f3fcc:	f006 f977 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3fd0:	491e      	ldr	r1, [pc, #120]	; (23f404c <_Z13createDevicesv+0x624>)
 23f3fd2:	a806      	add	r0, sp, #24
 23f3fd4:	f006 f973 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f3fd8:	2038      	movs	r0, #56	; 0x38
 23f3fda:	f7ff fcaa 	bl	23f3932 <_Znwj>
 23f3fde:	4604      	mov	r4, r0
 23f3fe0:	b120      	cbz	r0, 23f3fec <_Z13createDevicesv+0x5c4>
 23f3fe2:	2358      	movs	r3, #88	; 0x58
 23f3fe4:	aa06      	add	r2, sp, #24
 23f3fe6:	a902      	add	r1, sp, #8
 23f3fe8:	f002 fcd8 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f3fec:	4620      	mov	r0, r4
 23f3fee:	f002 fcef 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f3ff2:	a806      	add	r0, sp, #24
 23f3ff4:	f006 f918 	bl	23fa228 <_ZN6StringD1Ev>
 23f3ff8:	a802      	add	r0, sp, #8
 23f3ffa:	f006 f915 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("closeRamp", "All", 'X'));
 23f3ffe:	491f      	ldr	r1, [pc, #124]	; (23f407c <_Z13createDevicesv+0x654>)
 23f4000:	a802      	add	r0, sp, #8
 23f4002:	f006 f95c 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4006:	4911      	ldr	r1, [pc, #68]	; (23f404c <_Z13createDevicesv+0x624>)
 23f4008:	a806      	add	r0, sp, #24
 23f400a:	f006 f958 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f400e:	2038      	movs	r0, #56	; 0x38
 23f4010:	f7ff fc8f 	bl	23f3932 <_Znwj>
 23f4014:	4604      	mov	r4, r0
 23f4016:	b120      	cbz	r0, 23f4022 <_Z13createDevicesv+0x5fa>
 23f4018:	2358      	movs	r3, #88	; 0x58
 23f401a:	aa06      	add	r2, sp, #24
 23f401c:	a902      	add	r1, sp, #8
 23f401e:	f002 fcbd 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f4022:	4620      	mov	r0, r4
 23f4024:	f002 fcd4 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f4028:	a806      	add	r0, sp, #24
 23f402a:	f006 f8fd 	bl	23fa228 <_ZN6StringD1Ev>
 23f402e:	a802      	add	r0, sp, #8
 23f4030:	f006 f8fa 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("rearAwningIn", "All", 'X'));
 23f4034:	4912      	ldr	r1, [pc, #72]	; (23f4080 <_Z13createDevicesv+0x658>)
 23f4036:	a802      	add	r0, sp, #8
 23f4038:	f006 f941 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f403c:	4903      	ldr	r1, [pc, #12]	; (23f404c <_Z13createDevicesv+0x624>)
 23f403e:	a806      	add	r0, sp, #24
 23f4040:	f006 f93d 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4044:	2038      	movs	r0, #56	; 0x38
 23f4046:	e01d      	b.n	23f4084 <_Z13createDevicesv+0x65c>
 23f4048:	023fed6b 	.word	0x023fed6b
 23f404c:	023fed49 	.word	0x023fed49
 23f4050:	023fed75 	.word	0x023fed75
 23f4054:	023fed80 	.word	0x023fed80
 23f4058:	023fed8a 	.word	0x023fed8a
 23f405c:	023fed94 	.word	0x023fed94
 23f4060:	023fed99 	.word	0x023fed99
 23f4064:	023feda5 	.word	0x023feda5
 23f4068:	023fedaf 	.word	0x023fedaf
 23f406c:	023fedbc 	.word	0x023fedbc
 23f4070:	023fedc6 	.word	0x023fedc6
 23f4074:	023fedd1 	.word	0x023fedd1
 23f4078:	023feddb 	.word	0x023feddb
 23f407c:	023fede8 	.word	0x023fede8
 23f4080:	023fedf2 	.word	0x023fedf2
 23f4084:	f7ff fc55 	bl	23f3932 <_Znwj>
 23f4088:	4604      	mov	r4, r0
 23f408a:	b120      	cbz	r0, 23f4096 <_Z13createDevicesv+0x66e>
 23f408c:	2358      	movs	r3, #88	; 0x58
 23f408e:	aa06      	add	r2, sp, #24
 23f4090:	a902      	add	r1, sp, #8
 23f4092:	f002 fc83 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f4096:	4620      	mov	r0, r4
 23f4098:	f002 fc9a 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f409c:	a806      	add	r0, sp, #24
 23f409e:	f006 f8c3 	bl	23fa228 <_ZN6StringD1Ev>
 23f40a2:	a802      	add	r0, sp, #8
 23f40a4:	f006 f8c0 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("latchHandles", "All", 'X'));
 23f40a8:	49b4      	ldr	r1, [pc, #720]	; (23f437c <_Z13createDevicesv+0x954>)
 23f40aa:	a802      	add	r0, sp, #8
 23f40ac:	f006 f907 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f40b0:	49b3      	ldr	r1, [pc, #716]	; (23f4380 <_Z13createDevicesv+0x958>)
 23f40b2:	a806      	add	r0, sp, #24
 23f40b4:	f006 f903 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f40b8:	2038      	movs	r0, #56	; 0x38
 23f40ba:	f7ff fc3a 	bl	23f3932 <_Znwj>
 23f40be:	4604      	mov	r4, r0
 23f40c0:	b120      	cbz	r0, 23f40cc <_Z13createDevicesv+0x6a4>
 23f40c2:	2358      	movs	r3, #88	; 0x58
 23f40c4:	aa06      	add	r2, sp, #24
 23f40c6:	a902      	add	r1, sp, #8
 23f40c8:	f002 fc68 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f40cc:	4620      	mov	r0, r4
 23f40ce:	f002 fc7f 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f40d2:	a806      	add	r0, sp, #24
 23f40d4:	f006 f8a8 	bl	23fa228 <_ZN6StringD1Ev>
 23f40d8:	a802      	add	r0, sp, #8
 23f40da:	f006 f8a5 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("frontAwningIn", "All", 'X'));
 23f40de:	49a9      	ldr	r1, [pc, #676]	; (23f4384 <_Z13createDevicesv+0x95c>)
 23f40e0:	a802      	add	r0, sp, #8
 23f40e2:	f006 f8ec 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f40e6:	49a6      	ldr	r1, [pc, #664]	; (23f4380 <_Z13createDevicesv+0x958>)
 23f40e8:	a806      	add	r0, sp, #24
 23f40ea:	f006 f8e8 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f40ee:	2038      	movs	r0, #56	; 0x38
 23f40f0:	f7ff fc1f 	bl	23f3932 <_Znwj>
 23f40f4:	4604      	mov	r4, r0
 23f40f6:	b120      	cbz	r0, 23f4102 <_Z13createDevicesv+0x6da>
 23f40f8:	2358      	movs	r3, #88	; 0x58
 23f40fa:	aa06      	add	r2, sp, #24
 23f40fc:	a902      	add	r1, sp, #8
 23f40fe:	f002 fc4d 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f4102:	4620      	mov	r0, r4
 23f4104:	f002 fc64 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f4108:	a806      	add	r0, sp, #24
 23f410a:	f006 f88d 	bl	23fa228 <_ZN6StringD1Ev>
 23f410e:	a802      	add	r0, sp, #8
 23f4110:	f006 f88a 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("discPropane", "All", 'X'));
 23f4114:	499c      	ldr	r1, [pc, #624]	; (23f4388 <_Z13createDevicesv+0x960>)
 23f4116:	a802      	add	r0, sp, #8
 23f4118:	f006 f8d1 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f411c:	4998      	ldr	r1, [pc, #608]	; (23f4380 <_Z13createDevicesv+0x958>)
 23f411e:	a806      	add	r0, sp, #24
 23f4120:	f006 f8cd 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4124:	2038      	movs	r0, #56	; 0x38
 23f4126:	f7ff fc04 	bl	23f3932 <_Znwj>
 23f412a:	4604      	mov	r4, r0
 23f412c:	b120      	cbz	r0, 23f4138 <_Z13createDevicesv+0x710>
 23f412e:	2358      	movs	r3, #88	; 0x58
 23f4130:	aa06      	add	r2, sp, #24
 23f4132:	a902      	add	r1, sp, #8
 23f4134:	f002 fc32 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f4138:	4620      	mov	r0, r4
 23f413a:	f002 fc49 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f413e:	a806      	add	r0, sp, #24
 23f4140:	f006 f872 	bl	23fa228 <_ZN6StringD1Ev>
 23f4144:	a802      	add	r0, sp, #8
 23f4146:	f006 f86f 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("waterHeaterOff", "All", 'X'));
 23f414a:	4990      	ldr	r1, [pc, #576]	; (23f438c <_Z13createDevicesv+0x964>)
 23f414c:	a802      	add	r0, sp, #8
 23f414e:	f006 f8b6 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4152:	498b      	ldr	r1, [pc, #556]	; (23f4380 <_Z13createDevicesv+0x958>)
 23f4154:	a806      	add	r0, sp, #24
 23f4156:	f006 f8b2 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f415a:	2038      	movs	r0, #56	; 0x38
 23f415c:	f7ff fbe9 	bl	23f3932 <_Znwj>
 23f4160:	4604      	mov	r4, r0
 23f4162:	b120      	cbz	r0, 23f416e <_Z13createDevicesv+0x746>
 23f4164:	2358      	movs	r3, #88	; 0x58
 23f4166:	aa06      	add	r2, sp, #24
 23f4168:	a902      	add	r1, sp, #8
 23f416a:	f002 fc17 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f416e:	4620      	mov	r0, r4
 23f4170:	f002 fc2e 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f4174:	a806      	add	r0, sp, #24
 23f4176:	f006 f857 	bl	23fa228 <_ZN6StringD1Ev>
 23f417a:	a802      	add	r0, sp, #8
 23f417c:	f006 f854 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("hitchTruck", "All", 'X'));
 23f4180:	4983      	ldr	r1, [pc, #524]	; (23f4390 <_Z13createDevicesv+0x968>)
 23f4182:	a802      	add	r0, sp, #8
 23f4184:	f006 f89b 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4188:	497d      	ldr	r1, [pc, #500]	; (23f4380 <_Z13createDevicesv+0x958>)
 23f418a:	a806      	add	r0, sp, #24
 23f418c:	f006 f897 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4190:	2038      	movs	r0, #56	; 0x38
 23f4192:	f7ff fbce 	bl	23f3932 <_Znwj>
 23f4196:	4604      	mov	r4, r0
 23f4198:	b120      	cbz	r0, 23f41a4 <_Z13createDevicesv+0x77c>
 23f419a:	2358      	movs	r3, #88	; 0x58
 23f419c:	aa06      	add	r2, sp, #24
 23f419e:	a902      	add	r1, sp, #8
 23f41a0:	f002 fbfc 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f41a4:	4620      	mov	r0, r4
 23f41a6:	f002 fc13 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f41aa:	a806      	add	r0, sp, #24
 23f41ac:	f006 f83c 	bl	23fa228 <_ZN6StringD1Ev>
 23f41b0:	a802      	add	r0, sp, #8
 23f41b2:	f006 f839 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("raiseLG", "All", 'X'));
 23f41b6:	4977      	ldr	r1, [pc, #476]	; (23f4394 <_Z13createDevicesv+0x96c>)
 23f41b8:	a802      	add	r0, sp, #8
 23f41ba:	f006 f880 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f41be:	4970      	ldr	r1, [pc, #448]	; (23f4380 <_Z13createDevicesv+0x958>)
 23f41c0:	a806      	add	r0, sp, #24
 23f41c2:	f006 f87c 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f41c6:	2038      	movs	r0, #56	; 0x38
 23f41c8:	f7ff fbb3 	bl	23f3932 <_Znwj>
 23f41cc:	4604      	mov	r4, r0
 23f41ce:	b120      	cbz	r0, 23f41da <_Z13createDevicesv+0x7b2>
 23f41d0:	2358      	movs	r3, #88	; 0x58
 23f41d2:	aa06      	add	r2, sp, #24
 23f41d4:	a902      	add	r1, sp, #8
 23f41d6:	f002 fbe1 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f41da:	4620      	mov	r0, r4
 23f41dc:	f002 fbf8 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f41e0:	a806      	add	r0, sp, #24
 23f41e2:	f006 f821 	bl	23fa228 <_ZN6StringD1Ev>
 23f41e6:	a802      	add	r0, sp, #8
 23f41e8:	f006 f81e 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("discPower", "All", 'X'));
 23f41ec:	496a      	ldr	r1, [pc, #424]	; (23f4398 <_Z13createDevicesv+0x970>)
 23f41ee:	a802      	add	r0, sp, #8
 23f41f0:	f006 f865 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f41f4:	4962      	ldr	r1, [pc, #392]	; (23f4380 <_Z13createDevicesv+0x958>)
 23f41f6:	a806      	add	r0, sp, #24
 23f41f8:	f006 f861 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f41fc:	2038      	movs	r0, #56	; 0x38
 23f41fe:	f7ff fb98 	bl	23f3932 <_Znwj>
 23f4202:	4604      	mov	r4, r0
 23f4204:	b120      	cbz	r0, 23f4210 <_Z13createDevicesv+0x7e8>
 23f4206:	2358      	movs	r3, #88	; 0x58
 23f4208:	aa06      	add	r2, sp, #24
 23f420a:	a902      	add	r1, sp, #8
 23f420c:	f002 fbc6 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f4210:	4620      	mov	r0, r4
 23f4212:	f002 fbdd 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f4216:	a806      	add	r0, sp, #24
 23f4218:	f006 f806 	bl	23fa228 <_ZN6StringD1Ev>
 23f421c:	a802      	add	r0, sp, #8
 23f421e:	f006 f803 	bl	23fa228 <_ZN6StringD1Ev>

    // Arrive checklist items
    Device::add(new Device("connectPower", "All", 'X'));
 23f4222:	495e      	ldr	r1, [pc, #376]	; (23f439c <_Z13createDevicesv+0x974>)
 23f4224:	a802      	add	r0, sp, #8
 23f4226:	f006 f84a 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f422a:	4955      	ldr	r1, [pc, #340]	; (23f4380 <_Z13createDevicesv+0x958>)
 23f422c:	a806      	add	r0, sp, #24
 23f422e:	f006 f846 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4232:	2038      	movs	r0, #56	; 0x38
 23f4234:	f7ff fb7d 	bl	23f3932 <_Znwj>
 23f4238:	4604      	mov	r4, r0
 23f423a:	b120      	cbz	r0, 23f4246 <_Z13createDevicesv+0x81e>
 23f423c:	2358      	movs	r3, #88	; 0x58
 23f423e:	aa06      	add	r2, sp, #24
 23f4240:	a902      	add	r1, sp, #8
 23f4242:	f002 fbab 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f4246:	4620      	mov	r0, r4
 23f4248:	f002 fbc2 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f424c:	a806      	add	r0, sp, #24
 23f424e:	f005 ffeb 	bl	23fa228 <_ZN6StringD1Ev>
 23f4252:	a802      	add	r0, sp, #8
 23f4254:	f005 ffe8 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("lowerLG", "All", 'X'));
 23f4258:	4951      	ldr	r1, [pc, #324]	; (23f43a0 <_Z13createDevicesv+0x978>)
 23f425a:	a802      	add	r0, sp, #8
 23f425c:	f006 f82f 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4260:	4947      	ldr	r1, [pc, #284]	; (23f4380 <_Z13createDevicesv+0x958>)
 23f4262:	a806      	add	r0, sp, #24
 23f4264:	f006 f82b 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4268:	2038      	movs	r0, #56	; 0x38
 23f426a:	f7ff fb62 	bl	23f3932 <_Znwj>
 23f426e:	4604      	mov	r4, r0
 23f4270:	b120      	cbz	r0, 23f427c <_Z13createDevicesv+0x854>
 23f4272:	2358      	movs	r3, #88	; 0x58
 23f4274:	aa06      	add	r2, sp, #24
 23f4276:	a902      	add	r1, sp, #8
 23f4278:	f002 fb90 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f427c:	4620      	mov	r0, r4
 23f427e:	f002 fba7 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f4282:	a806      	add	r0, sp, #24
 23f4284:	f005 ffd0 	bl	23fa228 <_ZN6StringD1Ev>
 23f4288:	a802      	add	r0, sp, #8
 23f428a:	f005 ffcd 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("bedSlideOut", "All", 'X'));
 23f428e:	4945      	ldr	r1, [pc, #276]	; (23f43a4 <_Z13createDevicesv+0x97c>)
 23f4290:	a802      	add	r0, sp, #8
 23f4292:	f006 f814 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4296:	493a      	ldr	r1, [pc, #232]	; (23f4380 <_Z13createDevicesv+0x958>)
 23f4298:	a806      	add	r0, sp, #24
 23f429a:	f006 f810 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f429e:	2038      	movs	r0, #56	; 0x38
 23f42a0:	f7ff fb47 	bl	23f3932 <_Znwj>
 23f42a4:	4604      	mov	r4, r0
 23f42a6:	b120      	cbz	r0, 23f42b2 <_Z13createDevicesv+0x88a>
 23f42a8:	2358      	movs	r3, #88	; 0x58
 23f42aa:	aa06      	add	r2, sp, #24
 23f42ac:	a902      	add	r1, sp, #8
 23f42ae:	f002 fb75 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f42b2:	4620      	mov	r0, r4
 23f42b4:	f002 fb8c 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f42b8:	a806      	add	r0, sp, #24
 23f42ba:	f005 ffb5 	bl	23fa228 <_ZN6StringD1Ev>
 23f42be:	a802      	add	r0, sp, #8
 23f42c0:	f005 ffb2 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("LRSlidesOut", "All", 'X'));
 23f42c4:	4938      	ldr	r1, [pc, #224]	; (23f43a8 <_Z13createDevicesv+0x980>)
 23f42c6:	a802      	add	r0, sp, #8
 23f42c8:	f005 fff9 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f42cc:	492c      	ldr	r1, [pc, #176]	; (23f4380 <_Z13createDevicesv+0x958>)
 23f42ce:	a806      	add	r0, sp, #24
 23f42d0:	f005 fff5 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f42d4:	2038      	movs	r0, #56	; 0x38
 23f42d6:	f7ff fb2c 	bl	23f3932 <_Znwj>
 23f42da:	4604      	mov	r4, r0
 23f42dc:	b120      	cbz	r0, 23f42e8 <_Z13createDevicesv+0x8c0>
 23f42de:	2358      	movs	r3, #88	; 0x58
 23f42e0:	aa06      	add	r2, sp, #24
 23f42e2:	a902      	add	r1, sp, #8
 23f42e4:	f002 fb5a 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f42e8:	4620      	mov	r0, r4
 23f42ea:	f002 fb71 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f42ee:	a806      	add	r0, sp, #24
 23f42f0:	f005 ff9a 	bl	23fa228 <_ZN6StringD1Ev>
 23f42f4:	a802      	add	r0, sp, #8
 23f42f6:	f005 ff97 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("openRamp", "All", 'X'));
 23f42fa:	492c      	ldr	r1, [pc, #176]	; (23f43ac <_Z13createDevicesv+0x984>)
 23f42fc:	a802      	add	r0, sp, #8
 23f42fe:	f005 ffde 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4302:	491f      	ldr	r1, [pc, #124]	; (23f4380 <_Z13createDevicesv+0x958>)
 23f4304:	a806      	add	r0, sp, #24
 23f4306:	f005 ffda 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f430a:	2038      	movs	r0, #56	; 0x38
 23f430c:	f7ff fb11 	bl	23f3932 <_Znwj>
 23f4310:	4604      	mov	r4, r0
 23f4312:	b120      	cbz	r0, 23f431e <_Z13createDevicesv+0x8f6>
 23f4314:	2358      	movs	r3, #88	; 0x58
 23f4316:	aa06      	add	r2, sp, #24
 23f4318:	a902      	add	r1, sp, #8
 23f431a:	f002 fb3f 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f431e:	4620      	mov	r0, r4
 23f4320:	f002 fb56 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f4324:	a806      	add	r0, sp, #24
 23f4326:	f005 ff7f 	bl	23fa228 <_ZN6StringD1Ev>
 23f432a:	a802      	add	r0, sp, #8
 23f432c:	f005 ff7c 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("rampAwningOut", "All", 'X'));
 23f4330:	491f      	ldr	r1, [pc, #124]	; (23f43b0 <_Z13createDevicesv+0x988>)
 23f4332:	a802      	add	r0, sp, #8
 23f4334:	f005 ffc3 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4338:	4911      	ldr	r1, [pc, #68]	; (23f4380 <_Z13createDevicesv+0x958>)
 23f433a:	a806      	add	r0, sp, #24
 23f433c:	f005 ffbf 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4340:	2038      	movs	r0, #56	; 0x38
 23f4342:	f7ff faf6 	bl	23f3932 <_Znwj>
 23f4346:	4604      	mov	r4, r0
 23f4348:	b120      	cbz	r0, 23f4354 <_Z13createDevicesv+0x92c>
 23f434a:	2358      	movs	r3, #88	; 0x58
 23f434c:	aa06      	add	r2, sp, #24
 23f434e:	a902      	add	r1, sp, #8
 23f4350:	f002 fb24 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f4354:	4620      	mov	r0, r4
 23f4356:	f002 fb3b 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f435a:	a806      	add	r0, sp, #24
 23f435c:	f005 ff64 	bl	23fa228 <_ZN6StringD1Ev>
 23f4360:	a802      	add	r0, sp, #8
 23f4362:	f005 ff61 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("stepsDown", "All", 'X'));
 23f4366:	4913      	ldr	r1, [pc, #76]	; (23f43b4 <_Z13createDevicesv+0x98c>)
 23f4368:	a802      	add	r0, sp, #8
 23f436a:	f005 ffa8 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f436e:	4904      	ldr	r1, [pc, #16]	; (23f4380 <_Z13createDevicesv+0x958>)
 23f4370:	a806      	add	r0, sp, #24
 23f4372:	f005 ffa4 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4376:	2038      	movs	r0, #56	; 0x38
 23f4378:	e01e      	b.n	23f43b8 <_Z13createDevicesv+0x990>
 23f437a:	bf00      	nop
 23f437c:	023fedff 	.word	0x023fedff
 23f4380:	023fed49 	.word	0x023fed49
 23f4384:	023fee0c 	.word	0x023fee0c
 23f4388:	023fee1a 	.word	0x023fee1a
 23f438c:	023fee26 	.word	0x023fee26
 23f4390:	023fee35 	.word	0x023fee35
 23f4394:	023fee40 	.word	0x023fee40
 23f4398:	023fee48 	.word	0x023fee48
 23f439c:	023fee52 	.word	0x023fee52
 23f43a0:	023fee5f 	.word	0x023fee5f
 23f43a4:	023fee67 	.word	0x023fee67
 23f43a8:	023fee73 	.word	0x023fee73
 23f43ac:	023fee7f 	.word	0x023fee7f
 23f43b0:	023fee88 	.word	0x023fee88
 23f43b4:	023fee96 	.word	0x023fee96
 23f43b8:	f7ff fabb 	bl	23f3932 <_Znwj>
 23f43bc:	4604      	mov	r4, r0
 23f43be:	b120      	cbz	r0, 23f43ca <_Z13createDevicesv+0x9a2>
 23f43c0:	2358      	movs	r3, #88	; 0x58
 23f43c2:	aa06      	add	r2, sp, #24
 23f43c4:	a902      	add	r1, sp, #8
 23f43c6:	f002 fae9 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f43ca:	4620      	mov	r0, r4
 23f43cc:	f002 fb00 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f43d0:	a806      	add	r0, sp, #24
 23f43d2:	f005 ff29 	bl	23fa228 <_ZN6StringD1Ev>
 23f43d6:	a802      	add	r0, sp, #8
 23f43d8:	f005 ff26 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("rearAwningOut", "All", 'X'));
 23f43dc:	4951      	ldr	r1, [pc, #324]	; (23f4524 <_Z13createDevicesv+0xafc>)
 23f43de:	a802      	add	r0, sp, #8
 23f43e0:	f005 ff6d 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f43e4:	4950      	ldr	r1, [pc, #320]	; (23f4528 <_Z13createDevicesv+0xb00>)
 23f43e6:	a806      	add	r0, sp, #24
 23f43e8:	f005 ff69 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f43ec:	2038      	movs	r0, #56	; 0x38
 23f43ee:	f7ff faa0 	bl	23f3932 <_Znwj>
 23f43f2:	4604      	mov	r4, r0
 23f43f4:	b120      	cbz	r0, 23f4400 <_Z13createDevicesv+0x9d8>
 23f43f6:	2358      	movs	r3, #88	; 0x58
 23f43f8:	aa06      	add	r2, sp, #24
 23f43fa:	a902      	add	r1, sp, #8
 23f43fc:	f002 face 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f4400:	4620      	mov	r0, r4
 23f4402:	f002 fae5 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f4406:	a806      	add	r0, sp, #24
 23f4408:	f005 ff0e 	bl	23fa228 <_ZN6StringD1Ev>
 23f440c:	a802      	add	r0, sp, #8
 23f440e:	f005 ff0b 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("frontAwningOut", "All", 'X'));
 23f4412:	4946      	ldr	r1, [pc, #280]	; (23f452c <_Z13createDevicesv+0xb04>)
 23f4414:	a802      	add	r0, sp, #8
 23f4416:	f005 ff52 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f441a:	4943      	ldr	r1, [pc, #268]	; (23f4528 <_Z13createDevicesv+0xb00>)
 23f441c:	a806      	add	r0, sp, #24
 23f441e:	f005 ff4e 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4422:	2038      	movs	r0, #56	; 0x38
 23f4424:	f7ff fa85 	bl	23f3932 <_Znwj>
 23f4428:	4604      	mov	r4, r0
 23f442a:	b120      	cbz	r0, 23f4436 <_Z13createDevicesv+0xa0e>
 23f442c:	2358      	movs	r3, #88	; 0x58
 23f442e:	aa06      	add	r2, sp, #24
 23f4430:	a902      	add	r1, sp, #8
 23f4432:	f002 fab3 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f4436:	4620      	mov	r0, r4
 23f4438:	f002 faca 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f443c:	a806      	add	r0, sp, #24
 23f443e:	f005 fef3 	bl	23fa228 <_ZN6StringD1Ev>
 23f4442:	a802      	add	r0, sp, #8
 23f4444:	f005 fef0 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("propaneOn", "All", 'X'));
 23f4448:	4939      	ldr	r1, [pc, #228]	; (23f4530 <_Z13createDevicesv+0xb08>)
 23f444a:	a802      	add	r0, sp, #8
 23f444c:	f005 ff37 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4450:	4935      	ldr	r1, [pc, #212]	; (23f4528 <_Z13createDevicesv+0xb00>)
 23f4452:	a806      	add	r0, sp, #24
 23f4454:	f005 ff33 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4458:	2038      	movs	r0, #56	; 0x38
 23f445a:	f7ff fa6a 	bl	23f3932 <_Znwj>
 23f445e:	4604      	mov	r4, r0
 23f4460:	b120      	cbz	r0, 23f446c <_Z13createDevicesv+0xa44>
 23f4462:	2358      	movs	r3, #88	; 0x58
 23f4464:	aa06      	add	r2, sp, #24
 23f4466:	a902      	add	r1, sp, #8
 23f4468:	f002 fa98 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f446c:	4620      	mov	r0, r4
 23f446e:	f002 faaf 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f4472:	a806      	add	r0, sp, #24
 23f4474:	f005 fed8 	bl	23fa228 <_ZN6StringD1Ev>
 23f4478:	a802      	add	r0, sp, #8
 23f447a:	f005 fed5 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("waterHose", "All", 'X'));
 23f447e:	492d      	ldr	r1, [pc, #180]	; (23f4534 <_Z13createDevicesv+0xb0c>)
 23f4480:	a802      	add	r0, sp, #8
 23f4482:	f005 ff1c 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4486:	4928      	ldr	r1, [pc, #160]	; (23f4528 <_Z13createDevicesv+0xb00>)
 23f4488:	a806      	add	r0, sp, #24
 23f448a:	f005 ff18 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f448e:	2038      	movs	r0, #56	; 0x38
 23f4490:	f7ff fa4f 	bl	23f3932 <_Znwj>
 23f4494:	4604      	mov	r4, r0
 23f4496:	b120      	cbz	r0, 23f44a2 <_Z13createDevicesv+0xa7a>
 23f4498:	2358      	movs	r3, #88	; 0x58
 23f449a:	aa06      	add	r2, sp, #24
 23f449c:	a902      	add	r1, sp, #8
 23f449e:	f002 fa7d 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f44a2:	4620      	mov	r0, r4
 23f44a4:	f002 fa94 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f44a8:	a806      	add	r0, sp, #24
 23f44aa:	f005 febd 	bl	23fa228 <_ZN6StringD1Ev>
 23f44ae:	a802      	add	r0, sp, #8
 23f44b0:	f005 feba 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("waterHeaterOn", "All", 'X'));
 23f44b4:	4920      	ldr	r1, [pc, #128]	; (23f4538 <_Z13createDevicesv+0xb10>)
 23f44b6:	a802      	add	r0, sp, #8
 23f44b8:	f005 ff01 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f44bc:	491a      	ldr	r1, [pc, #104]	; (23f4528 <_Z13createDevicesv+0xb00>)
 23f44be:	a806      	add	r0, sp, #24
 23f44c0:	f005 fefd 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f44c4:	2038      	movs	r0, #56	; 0x38
 23f44c6:	f7ff fa34 	bl	23f3932 <_Znwj>
 23f44ca:	4604      	mov	r4, r0
 23f44cc:	b120      	cbz	r0, 23f44d8 <_Z13createDevicesv+0xab0>
 23f44ce:	2358      	movs	r3, #88	; 0x58
 23f44d0:	aa06      	add	r2, sp, #24
 23f44d2:	a902      	add	r1, sp, #8
 23f44d4:	f002 fa62 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f44d8:	4620      	mov	r0, r4
 23f44da:	f002 fa79 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f44de:	a806      	add	r0, sp, #24
 23f44e0:	f005 fea2 	bl	23fa228 <_ZN6StringD1Ev>
 23f44e4:	a802      	add	r0, sp, #8
 23f44e6:	f005 fe9f 	bl	23fa228 <_ZN6StringD1Ev>
    Device::add(new Device("sewerHose", "All", 'X'));
 23f44ea:	4914      	ldr	r1, [pc, #80]	; (23f453c <_Z13createDevicesv+0xb14>)
 23f44ec:	a802      	add	r0, sp, #8
 23f44ee:	f005 fee6 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f44f2:	490d      	ldr	r1, [pc, #52]	; (23f4528 <_Z13createDevicesv+0xb00>)
 23f44f4:	a806      	add	r0, sp, #24
 23f44f6:	f005 fee2 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f44fa:	2038      	movs	r0, #56	; 0x38
 23f44fc:	f7ff fa19 	bl	23f3932 <_Znwj>
 23f4500:	4604      	mov	r4, r0
 23f4502:	b120      	cbz	r0, 23f450e <_Z13createDevicesv+0xae6>
 23f4504:	2358      	movs	r3, #88	; 0x58
 23f4506:	aa06      	add	r2, sp, #24
 23f4508:	a902      	add	r1, sp, #8
 23f450a:	f002 fa47 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f450e:	4620      	mov	r0, r4
 23f4510:	f002 fa5e 	bl	23f69d0 <_ZN6Device3addEPS_>
 23f4514:	a806      	add	r0, sp, #24
 23f4516:	f005 fe87 	bl	23fa228 <_ZN6StringD1Ev>
 23f451a:	a802      	add	r0, sp, #8
 23f451c:	f005 fe84 	bl	23fa228 <_ZN6StringD1Ev>
}
 23f4520:	b00a      	add	sp, #40	; 0x28
 23f4522:	bd10      	pop	{r4, pc}
 23f4524:	023feea0 	.word	0x023feea0
 23f4528:	023fed49 	.word	0x023fed49
 23f452c:	023feeae 	.word	0x023feeae
 23f4530:	023feebd 	.word	0x023feebd
 23f4534:	023feec7 	.word	0x023feec7
 23f4538:	023feed1 	.word	0x023feed1
 23f453c:	023feedf 	.word	0x023feedf

023f4540 <setup>:

void setup() {
 23f4540:	b500      	push	{lr}
    int scan(void (*handler)(WiFiAccessPoint* ap, T* instance), T* instance) {
        return scan((wlan_scan_result_t)handler, (void*)instance);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 23f4542:	2000      	movs	r0, #0
 23f4544:	b089      	sub	sp, #36	; 0x24
 23f4546:	f003 fe55 	bl	23f81f4 <wlan_select_antenna>
//    WiFi.setCredentials(WIFI_SSID, WIFI_PASSWORD);
    WiFi.selectAntenna(ANT_INTERNAL);
    
    //WiFi.useDynamicIP();
    IoT::begin(MQTT_BROKER, CONTROLLER_NAME, MQTT_LOGGING);
 23f454a:	4668      	mov	r0, sp
 23f454c:	490e      	ldr	r1, [pc, #56]	; (23f4588 <setup+0x48>)
 23f454e:	f005 feb6 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4552:	490e      	ldr	r1, [pc, #56]	; (23f458c <setup+0x4c>)
 23f4554:	a804      	add	r0, sp, #16
 23f4556:	f005 feb2 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f455a:	2201      	movs	r2, #1
 23f455c:	a904      	add	r1, sp, #16
 23f455e:	4668      	mov	r0, sp
 23f4560:	f000 fb2a 	bl	23f4bb8 <_ZN3IoT5beginE6StringS0_b>
 23f4564:	a804      	add	r0, sp, #16
 23f4566:	f005 fe5f 	bl	23fa228 <_ZN6StringD1Ev>
 23f456a:	4668      	mov	r0, sp
 23f456c:	f005 fe5c 	bl	23fa228 <_ZN6StringD1Ev>
    
    //Consolidate PCA9634 initialization
    MCP23008::initialize(I2CR4IO4_ADDRESS, 0xf0);   // Address 0x20 (no jumpers), all 4 GPIOs inputs
 23f4570:	21f0      	movs	r1, #240	; 0xf0
 23f4572:	2020      	movs	r0, #32
 23f4574:	f002 fc2c 	bl	23f6dd0 <_ZN8MCP2300810initializeEii>
    PCA9634::initialize(PCA9634_ADDRESS);
 23f4578:	2001      	movs	r0, #1
 23f457a:	f002 fd67 	bl	23f704c <_ZN7PCA963410initializeEi>
    createDevices();
}
 23f457e:	b009      	add	sp, #36	; 0x24
 23f4580:	f85d eb04 	ldr.w	lr, [sp], #4
    createDevices();
 23f4584:	f7ff ba50 	b.w	23f3a28 <_Z13createDevicesv>
 23f4588:	023feee9 	.word	0x023feee9
 23f458c:	023feef6 	.word	0x023feef6

023f4590 <loop>:

//-------------
// LOOP
//-------------
void loop() {
 23f4590:	b508      	push	{r3, lr}
  IoT::loop();
 23f4592:	f000 f8f3 	bl	23f477c <_ZN3IoT4loopEv>

    // Call behavior methods
    didOfficeDoorChange();
 23f4596:	f7ff f9ff 	bl	23f3998 <_Z19didOfficeDoorChangev>
    turnOffRearPorchAfter15mins();
//    didOfficeMotionChange();
}
 23f459a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    turnOffRearPorchAfter15mins();
 23f459e:	f7ff ba21 	b.w	23f39e4 <_Z27turnOffRearPorchAfter15minsv>
	...

023f45a4 <_GLOBAL__sub_I_SystemMode>:
}
 23f45a4:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED);
 23f45a6:	2001      	movs	r0, #1
 23f45a8:	2100      	movs	r1, #0
 23f45aa:	f003 feaf 	bl	23f830c <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23f45ae:	2200      	movs	r2, #0
 23f45b0:	4b05      	ldr	r3, [pc, #20]	; (23f45c8 <_GLOBAL__sub_I_SystemMode+0x24>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23f45b2:	2001      	movs	r0, #1
              error_(SYSTEM_ERROR_NONE) {
 23f45b4:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
 23f45b8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 23f45bc:	609a      	str	r2, [r3, #8]
}
 23f45be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_system_mode(mode);
 23f45c2:	f003 be79 	b.w	23f82b8 <set_system_mode>
 23f45c6:	bf00      	nop
 23f45c8:	1007acd8 	.word	0x1007acd8

023f45cc <_Z18outOfMemoryHandleryi>:
MQTTManager* IoT::_mqttManager = NULL;

int          outOfMemory = -1;

void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
 23f45cc:	4b01      	ldr	r3, [pc, #4]	; (23f45d4 <_Z18outOfMemoryHandleryi+0x8>)
 23f45ce:	601a      	str	r2, [r3, #0]
}
 23f45d0:	4770      	bx	lr
 23f45d2:	bf00      	nop
 23f45d4:	1007aadc 	.word	0x1007aadc

023f45d8 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
 23f45d8:	b530      	push	{r4, r5, lr}
 23f45da:	b085      	sub	sp, #20
 23f45dc:	4604      	mov	r4, r0
 23f45de:	9808      	ldr	r0, [sp, #32]
        if (!context) {
 23f45e0:	b160      	cbz	r0, 23f45fc <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
 23f45e2:	6840      	ldr	r0, [r0, #4]
 23f45e4:	b150      	cbz	r0, 23f45fc <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
 23f45e6:	6885      	ldr	r5, [r0, #8]
 23f45e8:	b145      	cbz	r5, 23f45fc <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
 23f45ea:	e9cd 4102 	strd	r4, r1, [sp, #8]
 23f45ee:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f45f2:	68c4      	ldr	r4, [r0, #12]
 23f45f4:	466a      	mov	r2, sp
 23f45f6:	ab01      	add	r3, sp, #4
 23f45f8:	a902      	add	r1, sp, #8
 23f45fa:	47a0      	blx	r4
    }
 23f45fc:	b005      	add	sp, #20
 23f45fe:	bd30      	pop	{r4, r5, pc}

023f4600 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f4600:	b530      	push	{r4, r5, lr}
 23f4602:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 23f4604:	6800      	ldr	r0, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f4606:	b085      	sub	sp, #20
 23f4608:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 23f460a:	6883      	ldr	r3, [r0, #8]
 23f460c:	e9d1 4500 	ldrd	r4, r5, [r1]
 23f4610:	e9cd 4502 	strd	r4, r5, [sp, #8]
 23f4614:	b90b      	cbnz	r3, 23f461a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
 23f4616:	f007 f92f 	bl	23fb878 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f461a:	68c3      	ldr	r3, [r0, #12]
 23f461c:	aa01      	add	r2, sp, #4
 23f461e:	a902      	add	r1, sp, #8
 23f4620:	4798      	blx	r3
      }
 23f4622:	b005      	add	sp, #20
 23f4624:	bd30      	pop	{r4, r5, pc}

023f4626 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 23f4626:	2a01      	cmp	r2, #1
 23f4628:	d102      	bne.n	23f4630 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f462a:	6001      	str	r1, [r0, #0]
      }
 23f462c:	2000      	movs	r0, #0
 23f462e:	4770      	bx	lr
	  switch (__op)
 23f4630:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f4632:	bf04      	itt	eq
 23f4634:	680b      	ldreq	r3, [r1, #0]
 23f4636:	6003      	streq	r3, [r0, #0]
	      break;
 23f4638:	e7f8      	b.n	23f462c <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

023f463a <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23f463a:	6803      	ldr	r3, [r0, #0]
 23f463c:	6812      	ldr	r2, [r2, #0]
 23f463e:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f4642:	4718      	bx	r3

023f4644 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23f4644:	b510      	push	{r4, lr}
      if (_M_manager)
 23f4646:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23f4648:	4604      	mov	r4, r0
      if (_M_manager)
 23f464a:	b113      	cbz	r3, 23f4652 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f464c:	2203      	movs	r2, #3
 23f464e:	4601      	mov	r1, r0
 23f4650:	4798      	blx	r3
    }
 23f4652:	4620      	mov	r0, r4
 23f4654:	bd10      	pop	{r4, pc}

023f4656 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
 23f4656:	b510      	push	{r4, lr}
            delete callableWrapper;
 23f4658:	4604      	mov	r4, r0
 23f465a:	b138      	cbz	r0, 23f466c <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
 23f465c:	f7ff fff2 	bl	23f4644 <_ZNSt14_Function_baseD1Ev>
 23f4660:	4620      	mov	r0, r4
        };
 23f4662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
 23f4666:	2110      	movs	r1, #16
 23f4668:	f7ff b969 	b.w	23f393e <_ZdlPvj>
        };
 23f466c:	bd10      	pop	{r4, pc}
	...

023f4670 <__tcf_1>:
     * @brief Get the hardware watchdog instance.
     * 
     * @return The hardware watchdog singlton.
     */
    static WatchdogClass& getInstance() {
        static WatchdogClass watchdog;
 23f4670:	b508      	push	{r3, lr}
 23f4672:	4802      	ldr	r0, [pc, #8]	; (23f467c <__tcf_1+0xc>)
 23f4674:	f7ff ffe6 	bl	23f4644 <_ZNSt14_Function_baseD1Ev>
 23f4678:	bd08      	pop	{r3, pc}
 23f467a:	bf00      	nop
 23f467c:	1007acf0 	.word	0x1007acf0

023f4680 <_ZN8particle13WatchdogClass11getInstanceEv>:
    static WatchdogClass& getInstance() {
 23f4680:	b538      	push	{r3, r4, r5, lr}
        static WatchdogClass watchdog;
 23f4682:	4d0a      	ldr	r5, [pc, #40]	; (23f46ac <_ZN8particle13WatchdogClass11getInstanceEv+0x2c>)
 23f4684:	e8d5 4f8f 	ldab	r4, [r5]
 23f4688:	f014 0401 	ands.w	r4, r4, #1
 23f468c:	d10c      	bne.n	23f46a8 <_ZN8particle13WatchdogClass11getInstanceEv+0x28>
 23f468e:	4628      	mov	r0, r5
 23f4690:	f7ff f964 	bl	23f395c <__cxa_guard_acquire>
 23f4694:	b140      	cbz	r0, 23f46a8 <_ZN8particle13WatchdogClass11getInstanceEv+0x28>
    _Function_base() : _M_manager(nullptr) { }
 23f4696:	4b06      	ldr	r3, [pc, #24]	; (23f46b0 <_ZN8particle13WatchdogClass11getInstanceEv+0x30>)
 23f4698:	4628      	mov	r0, r5
 23f469a:	609c      	str	r4, [r3, #8]
    }

private:
    WatchdogClass()
            : callback_(nullptr),
              instance_(HAL_WATCHDOG_INSTANCE1) {
 23f469c:	741c      	strb	r4, [r3, #16]
        static WatchdogClass watchdog;
 23f469e:	f7ff f962 	bl	23f3966 <__cxa_guard_release>
 23f46a2:	4804      	ldr	r0, [pc, #16]	; (23f46b4 <_ZN8particle13WatchdogClass11getInstanceEv+0x34>)
 23f46a4:	f008 fa9e 	bl	23fcbe4 <atexit>
    }
 23f46a8:	4801      	ldr	r0, [pc, #4]	; (23f46b0 <_ZN8particle13WatchdogClass11getInstanceEv+0x30>)
 23f46aa:	bd38      	pop	{r3, r4, r5, pc}
 23f46ac:	1007acec 	.word	0x1007acec
 23f46b0:	1007acf0 	.word	0x1007acf0
 23f46b4:	023f4671 	.word	0x023f4671

023f46b8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23f46b8:	b510      	push	{r4, lr}
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23f46ba:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23f46be:	4604      	mov	r4, r0
 23f46c0:	4608      	mov	r0, r1
    attr.flags = 0;
 23f46c2:	2100      	movs	r1, #0
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23f46c4:	b08a      	sub	sp, #40	; 0x28
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f46c6:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
 23f46ca:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f46ce:	460b      	mov	r3, r1
 23f46d0:	aa02      	add	r2, sp, #8
 23f46d2:	6821      	ldr	r1, [r4, #0]
 23f46d4:	f003 fdb8 	bl	23f8248 <log_message_v>
}
 23f46d8:	b00a      	add	sp, #40	; 0x28
 23f46da:	bd10      	pop	{r4, pc}

023f46dc <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
 23f46dc:	b40e      	push	{r1, r2, r3}
 23f46de:	b503      	push	{r0, r1, lr}
 23f46e0:	ab03      	add	r3, sp, #12
 23f46e2:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_ERROR, fmt, args);
 23f46e6:	2132      	movs	r1, #50	; 0x32
    va_start(args, fmt);
 23f46e8:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
 23f46ea:	f7ff ffe5 	bl	23f46b8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f46ee:	b002      	add	sp, #8
 23f46f0:	f85d eb04 	ldr.w	lr, [sp], #4
 23f46f4:	b003      	add	sp, #12
 23f46f6:	4770      	bx	lr

023f46f8 <_ZNK5spark6Logger4infoEPKcz>:
inline void spark::Logger::info(const char *fmt, ...) const {
 23f46f8:	b40e      	push	{r1, r2, r3}
 23f46fa:	b503      	push	{r0, r1, lr}
 23f46fc:	ab03      	add	r3, sp, #12
 23f46fe:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_INFO, fmt, args);
 23f4702:	211e      	movs	r1, #30
    va_start(args, fmt);
 23f4704:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_INFO, fmt, args);
 23f4706:	f7ff ffd7 	bl	23f46b8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f470a:	b002      	add	sp, #8
 23f470c:	f85d eb04 	ldr.w	lr, [sp], #4
 23f4710:	b003      	add	sp, #12
 23f4712:	4770      	bx	lr

023f4714 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
 23f4714:	b40e      	push	{r1, r2, r3}
 23f4716:	b503      	push	{r0, r1, lr}
 23f4718:	ab03      	add	r3, sp, #12
 23f471a:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_TRACE, fmt, args);
 23f471e:	2101      	movs	r1, #1
    va_start(args, fmt);
 23f4720:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
 23f4722:	f7ff ffc9 	bl	23f46b8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f4726:	b002      	add	sp, #8
 23f4728:	f85d eb04 	ldr.w	lr, [sp], #4
 23f472c:	b003      	add	sp, #12
 23f472e:	4770      	bx	lr

023f4730 <_ZN3IoT13startWatchdogEv>:

/**
 * Hardware Watchdog
 */
void IoT::startWatchdog()
{
 23f4730:	b500      	push	{lr}
            : info_{} {
 23f4732:	4b0f      	ldr	r3, [pc, #60]	; (23f4770 <_ZN3IoT13startWatchdogEv+0x40>)
 23f4734:	b097      	sub	sp, #92	; 0x5c
 23f4736:	2220      	movs	r2, #32
 23f4738:	2100      	movs	r1, #0
 23f473a:	a80e      	add	r0, sp, #56	; 0x38
 23f473c:	930d      	str	r3, [sp, #52]	; 0x34
 23f473e:	f008 fa96 	bl	23fcc6e <memset>
    // Getting capabiltiies
    WatchdogInfo info;
    Watchdog.getInfo(info);
 23f4742:	f7ff ff9d 	bl	23f4680 <_ZN8particle13WatchdogClass11getInstanceEv>
 23f4746:	a904      	add	r1, sp, #16
 23f4748:	f006 fde1 	bl	23fb30e <_ZN8particle13WatchdogClass7getInfoERNS_12WatchdogInfoE>
    WatchdogCaps mandatoryCaps = info.mandatoryCapabilities();

    // Get the capabilities that can be turned off
    WatchdogCaps optionalCaps = info.capabilities();
    
    Watchdog.init(WatchdogConfiguration().timeout(300s));
 23f474c:	f7ff ff98 	bl	23f4680 <_ZN8particle13WatchdogClass11getInstanceEv>
        config_.timeout_ms = ms;
 23f4750:	4a08      	ldr	r2, [pc, #32]	; (23f4774 <_ZN3IoT13startWatchdogEv+0x44>)
 23f4752:	4b09      	ldr	r3, [pc, #36]	; (23f4778 <_ZN3IoT13startWatchdogEv+0x48>)
 23f4754:	a901      	add	r1, sp, #4
 23f4756:	e9cd 2301 	strd	r2, r3, [sp, #4]
        config_.enable_caps = HAL_WATCHDOG_CAPS_RESET | HAL_WATCHDOG_CAPS_SLEEP_RUNNING;
 23f475a:	2321      	movs	r3, #33	; 0x21
 23f475c:	9303      	str	r3, [sp, #12]
 23f475e:	f006 fdc9 	bl	23fb2f4 <_ZN8particle13WatchdogClass4initERKNS_21WatchdogConfigurationE>
    Watchdog.start();
 23f4762:	f7ff ff8d 	bl	23f4680 <_ZN8particle13WatchdogClass11getInstanceEv>
 23f4766:	f006 fdca 	bl	23fb2fe <_ZN8particle13WatchdogClass5startEv>
}
 23f476a:	b017      	add	sp, #92	; 0x5c
 23f476c:	f85d fb04 	ldr.w	pc, [sp], #4
 23f4770:	00010024 	.word	0x00010024
 23f4774:	0001000c 	.word	0x0001000c
 23f4778:	000493e0 	.word	0x000493e0

023f477c <_ZN3IoT4loopEv>:
/**
 * Loop method must be called periodically,
 * typically from the sketch loop() method.
 */
void IoT::loop()
{
 23f477c:	b508      	push	{r3, lr}
    Device::loopAll();
 23f477e:	f002 f96d 	bl	23f6a5c <_ZN6Device7loopAllEv>
    _mqttManager->loop();
 23f4782:	4b0c      	ldr	r3, [pc, #48]	; (23f47b4 <_ZN3IoT4loopEv+0x38>)
 23f4784:	6818      	ldr	r0, [r3, #0]
 23f4786:	f001 fa45 	bl	23f5c14 <_ZN11MQTTManager4loopEv>

    //TODO: enable only for Photon 2
    if (outOfMemory >= 0) {
 23f478a:	4b0b      	ldr	r3, [pc, #44]	; (23f47b8 <_ZN3IoT4loopEv+0x3c>)
 23f478c:	681a      	ldr	r2, [r3, #0]
 23f478e:	2a00      	cmp	r2, #0
 23f4790:	db09      	blt.n	23f47a6 <_ZN3IoT4loopEv+0x2a>
        // An out of memory condition occurred - reset device.
        Log.error("out of memory occurred size=%d", outOfMemory);
 23f4792:	490a      	ldr	r1, [pc, #40]	; (23f47bc <_ZN3IoT4loopEv+0x40>)
 23f4794:	480a      	ldr	r0, [pc, #40]	; (23f47c0 <_ZN3IoT4loopEv+0x44>)
 23f4796:	f7ff ffa1 	bl	23f46dc <_ZNK5spark6Logger5errorEPKcz>
        delay(2000);
 23f479a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23f479e:	f003 ffe5 	bl	23f876c <delay>
        System.reset();
 23f47a2:	f005 ffdf 	bl	23fa764 <_ZN11SystemClass5resetEv>
//        Log.info("Performing daily reboot");
//        delay(500);
//        System.reset();
//    }
    
    Watchdog.refresh();
 23f47a6:	f7ff ff6b 	bl	23f4680 <_ZN8particle13WatchdogClass11getInstanceEv>
    
}
 23f47aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Watchdog.refresh();
 23f47ae:	f006 bdaa 	b.w	23fb306 <_ZN8particle13WatchdogClass7refreshEv>
 23f47b2:	bf00      	nop
 23f47b4:	1007ad54 	.word	0x1007ad54
 23f47b8:	1007aadc 	.word	0x1007aadc
 23f47bc:	023fef00 	.word	0x023fef00
 23f47c0:	1007ae20 	.word	0x1007ae20

023f47c4 <_ZN3IoT16subscribeHandlerEPKcS1_>:
 * Particle.io Subscribe Handler
 * t:patriot m:<device>:<value>
 * This method handles commands from Particle Cloud (was Alexa)
 */
void IoT::subscribeHandler(const char *eventName, const char *rawData)
{
 23f47c4:	b510      	push	{r4, lr}
 23f47c6:	b090      	sub	sp, #64	; 0x40
 23f47c8:	4604      	mov	r4, r0
    String data = String(rawData).trim();
 23f47ca:	a80c      	add	r0, sp, #48	; 0x30
 23f47cc:	f005 fd77 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f47d0:	a80c      	add	r0, sp, #48	; 0x30
 23f47d2:	f005 ff4e 	bl	23fa672 <_ZN6String4trimEv>
 23f47d6:	4601      	mov	r1, r0
 23f47d8:	4668      	mov	r0, sp
 23f47da:	f005 fdbc 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f47de:	a80c      	add	r0, sp, #48	; 0x30
 23f47e0:	f005 fd22 	bl	23fa228 <_ZN6StringD1Ev>
    String event(eventName);
 23f47e4:	4621      	mov	r1, r4
 23f47e6:	a804      	add	r0, sp, #16
 23f47e8:	f005 fd69 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>

class StringSumHelper : public String
{
public:
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
 23f47ec:	491d      	ldr	r1, [pc, #116]	; (23f4864 <_ZN3IoT16subscribeHandlerEPKcS1_+0xa0>)
 23f47ee:	a80c      	add	r0, sp, #48	; 0x30
 23f47f0:	f005 fd65 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    
    Log.info("Particle.io subscribe received data: '"+event+"', '"+data+"'");
 23f47f4:	a904      	add	r1, sp, #16
 23f47f6:	a80c      	add	r0, sp, #48	; 0x30
 23f47f8:	f005 fe58 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f47fc:	491a      	ldr	r1, [pc, #104]	; (23f4868 <_ZN3IoT16subscribeHandlerEPKcS1_+0xa4>)
 23f47fe:	f005 fe61 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f4802:	4669      	mov	r1, sp
 23f4804:	f005 fe52 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f4808:	4918      	ldr	r1, [pc, #96]	; (23f486c <_ZN3IoT16subscribeHandlerEPKcS1_+0xa8>)
 23f480a:	f005 fe5b 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f480e:	6801      	ldr	r1, [r0, #0]
 23f4810:	4817      	ldr	r0, [pc, #92]	; (23f4870 <_ZN3IoT16subscribeHandlerEPKcS1_+0xac>)
 23f4812:	f7ff ff71 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f4816:	a80c      	add	r0, sp, #48	; 0x30
 23f4818:	f005 fd06 	bl	23fa228 <_ZN6StringD1Ev>
    
    _mqttManager->parsePatriotMessage(event.toLowerCase(), data.toLowerCase());
 23f481c:	4b15      	ldr	r3, [pc, #84]	; (23f4874 <_ZN3IoT16subscribeHandlerEPKcS1_+0xb0>)
 23f481e:	a804      	add	r0, sp, #16
 23f4820:	681c      	ldr	r4, [r3, #0]
 23f4822:	f005 ff18 	bl	23fa656 <_ZN6String11toLowerCaseEv>
 23f4826:	4601      	mov	r1, r0
 23f4828:	a808      	add	r0, sp, #32
 23f482a:	f005 fd94 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f482e:	4668      	mov	r0, sp
 23f4830:	f005 ff11 	bl	23fa656 <_ZN6String11toLowerCaseEv>
 23f4834:	4601      	mov	r1, r0
 23f4836:	a80c      	add	r0, sp, #48	; 0x30
 23f4838:	f005 fd8d 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f483c:	aa0c      	add	r2, sp, #48	; 0x30
 23f483e:	a908      	add	r1, sp, #32
 23f4840:	4620      	mov	r0, r4
 23f4842:	f000 fd1b 	bl	23f527c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_>
 23f4846:	a80c      	add	r0, sp, #48	; 0x30
 23f4848:	f005 fcee 	bl	23fa228 <_ZN6StringD1Ev>
 23f484c:	a808      	add	r0, sp, #32
 23f484e:	f005 fceb 	bl	23fa228 <_ZN6StringD1Ev>
    String event(eventName);
 23f4852:	a804      	add	r0, sp, #16
 23f4854:	f005 fce8 	bl	23fa228 <_ZN6StringD1Ev>
    String data = String(rawData).trim();
 23f4858:	4668      	mov	r0, sp
 23f485a:	f005 fce5 	bl	23fa228 <_ZN6StringD1Ev>
}
 23f485e:	b010      	add	sp, #64	; 0x40
 23f4860:	bd10      	pop	{r4, pc}
 23f4862:	bf00      	nop
 23f4864:	023fef1f 	.word	0x023fef1f
 23f4868:	023fef46 	.word	0x023fef46
 23f486c:	023fef49 	.word	0x023fef49
 23f4870:	1007ae20 	.word	0x1007ae20
 23f4874:	1007ad54 	.word	0x1007ad54

023f4878 <_ZN3IoT11mqttHandlerEPcPhj>:

/**
 MQTT Subscribe Handler
 */
void IoT::mqttHandler(char* rawTopic, byte* payload, unsigned int length)
{
 23f4878:	b5f0      	push	{r4, r5, r6, r7, lr}
    char p[length + 1];
 23f487a:	f102 0308 	add.w	r3, r2, #8
{
 23f487e:	b099      	sub	sp, #100	; 0x64
    char p[length + 1];
 23f4880:	f023 0307 	bic.w	r3, r3, #7

    if(topic.startsWith("log")) {
        return;
    }
    _mqttManager->parseMQTTMessage(lcTopic, lcMessage);
    Device::mqttAll(lcTopic, lcMessage);
 23f4884:	466e      	mov	r6, sp
{
 23f4886:	af00      	add	r7, sp, #0
    char p[length + 1];
 23f4888:	ebad 0d03 	sub.w	sp, sp, r3
{
 23f488c:	4605      	mov	r5, r0
    memcpy(p, payload, length);
 23f488e:	4668      	mov	r0, sp
{
 23f4890:	4614      	mov	r4, r2
    memcpy(p, payload, length);
 23f4892:	f008 f9c5 	bl	23fcc20 <memcpy>
    p[length] = 0;
 23f4896:	2300      	movs	r3, #0
    String message(p);
 23f4898:	4669      	mov	r1, sp
    p[length] = 0;
 23f489a:	f80d 3004 	strb.w	r3, [sp, r4]
    String message(p);
 23f489e:	4638      	mov	r0, r7
 23f48a0:	f005 fd0d 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    String lcMessage = message.toLowerCase();
 23f48a4:	4638      	mov	r0, r7
 23f48a6:	f005 fed6 	bl	23fa656 <_ZN6String11toLowerCaseEv>
 23f48aa:	4601      	mov	r1, r0
 23f48ac:	f107 0010 	add.w	r0, r7, #16
 23f48b0:	f005 fd51 	bl	23fa356 <_ZN6StringC1ERKS_>
    String topic(rawTopic);
 23f48b4:	4629      	mov	r1, r5
 23f48b6:	f107 0020 	add.w	r0, r7, #32
 23f48ba:	f005 fd00 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    String lcTopic = topic.toLowerCase();
 23f48be:	f107 0020 	add.w	r0, r7, #32
 23f48c2:	f005 fec8 	bl	23fa656 <_ZN6String11toLowerCaseEv>
 23f48c6:	4601      	mov	r1, r0
 23f48c8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 23f48cc:	f005 fd43 	bl	23fa356 <_ZN6StringC1ERKS_>
    if(topic.startsWith("log")) {
 23f48d0:	492d      	ldr	r1, [pc, #180]	; (23f4988 <_ZN3IoT11mqttHandlerEPcPhj+0x110>)
 23f48d2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 23f48d6:	f005 fcf2 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f48da:	f107 0150 	add.w	r1, r7, #80	; 0x50
 23f48de:	f107 0020 	add.w	r0, r7, #32
 23f48e2:	f005 fe69 	bl	23fa5b8 <_ZNK6String10startsWithERKS_>
 23f48e6:	4604      	mov	r4, r0
 23f48e8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 23f48ec:	f005 fc9c 	bl	23fa228 <_ZN6StringD1Ev>
 23f48f0:	b194      	cbz	r4, 23f4918 <_ZN3IoT11mqttHandlerEPcPhj+0xa0>
    String lcTopic = topic.toLowerCase();
 23f48f2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 23f48f6:	f005 fc97 	bl	23fa228 <_ZN6StringD1Ev>
    String topic(rawTopic);
 23f48fa:	f107 0020 	add.w	r0, r7, #32
 23f48fe:	f005 fc93 	bl	23fa228 <_ZN6StringD1Ev>
    String lcMessage = message.toLowerCase();
 23f4902:	f107 0010 	add.w	r0, r7, #16
 23f4906:	f005 fc8f 	bl	23fa228 <_ZN6StringD1Ev>
    String message(p);
 23f490a:	4638      	mov	r0, r7
 23f490c:	f005 fc8c 	bl	23fa228 <_ZN6StringD1Ev>
 23f4910:	46b5      	mov	sp, r6
}
 23f4912:	3764      	adds	r7, #100	; 0x64
 23f4914:	46bd      	mov	sp, r7
 23f4916:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _mqttManager->parseMQTTMessage(lcTopic, lcMessage);
 23f4918:	4b1c      	ldr	r3, [pc, #112]	; (23f498c <_ZN3IoT11mqttHandlerEPcPhj+0x114>)
 23f491a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 23f491e:	681c      	ldr	r4, [r3, #0]
 23f4920:	f107 0040 	add.w	r0, r7, #64	; 0x40
 23f4924:	f005 fd17 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f4928:	f107 0110 	add.w	r1, r7, #16
 23f492c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 23f4930:	f005 fd11 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f4934:	f107 0250 	add.w	r2, r7, #80	; 0x50
 23f4938:	f107 0140 	add.w	r1, r7, #64	; 0x40
 23f493c:	4620      	mov	r0, r4
 23f493e:	f000 ffe9 	bl	23f5914 <_ZN11MQTTManager16parseMQTTMessageE6StringS0_>
 23f4942:	f107 0050 	add.w	r0, r7, #80	; 0x50
 23f4946:	f005 fc6f 	bl	23fa228 <_ZN6StringD1Ev>
 23f494a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 23f494e:	f005 fc6b 	bl	23fa228 <_ZN6StringD1Ev>
    Device::mqttAll(lcTopic, lcMessage);
 23f4952:	f107 0130 	add.w	r1, r7, #48	; 0x30
 23f4956:	f107 0040 	add.w	r0, r7, #64	; 0x40
 23f495a:	f005 fcfc 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f495e:	f107 0110 	add.w	r1, r7, #16
 23f4962:	f107 0050 	add.w	r0, r7, #80	; 0x50
 23f4966:	f005 fcf6 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f496a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 23f496e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 23f4972:	f002 f8ff 	bl	23f6b74 <_ZN6Device7mqttAllE6StringS0_>
 23f4976:	f107 0050 	add.w	r0, r7, #80	; 0x50
 23f497a:	f005 fc55 	bl	23fa228 <_ZN6StringD1Ev>
 23f497e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 23f4982:	f005 fc51 	bl	23fa228 <_ZN6StringD1Ev>
 23f4986:	e7b4      	b.n	23f48f2 <_ZN3IoT11mqttHandlerEPcPhj+0x7a>
 23f4988:	023fef4b 	.word	0x023fef4b
 23f498c:	1007ad54 	.word	0x1007ad54

023f4990 <_ZN3IoT11publishMQTTE6StringS0_b>:

/**
 * Publish an MQTT message
 */
void IoT::publishMQTT(String subtopic, String message, bool retain)
{
 23f4990:	b570      	push	{r4, r5, r6, lr}
 23f4992:	4605      	mov	r5, r0
 23f4994:	b08e      	sub	sp, #56	; 0x38
 23f4996:	9201      	str	r2, [sp, #4]
    _mqttManager->publish(kPublishName+"/"+subtopic, message, retain);
 23f4998:	4a13      	ldr	r2, [pc, #76]	; (23f49e8 <_ZN3IoT11publishMQTTE6StringS0_b+0x58>)
{
 23f499a:	460c      	mov	r4, r1
    StringSumHelper(const String &s) : String(s) {}
 23f499c:	a802      	add	r0, sp, #8
 23f499e:	4913      	ldr	r1, [pc, #76]	; (23f49ec <_ZN3IoT11publishMQTTE6StringS0_b+0x5c>)
    _mqttManager->publish(kPublishName+"/"+subtopic, message, retain);
 23f49a0:	6816      	ldr	r6, [r2, #0]
 23f49a2:	f005 fcd8 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f49a6:	4912      	ldr	r1, [pc, #72]	; (23f49f0 <_ZN3IoT11publishMQTTE6StringS0_b+0x60>)
 23f49a8:	a802      	add	r0, sp, #8
 23f49aa:	f005 fd8b 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f49ae:	4629      	mov	r1, r5
 23f49b0:	f005 fd7c 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f49b4:	4601      	mov	r1, r0
 23f49b6:	a806      	add	r0, sp, #24
 23f49b8:	f005 fccd 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f49bc:	4621      	mov	r1, r4
 23f49be:	a80a      	add	r0, sp, #40	; 0x28
 23f49c0:	f005 fcc9 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f49c4:	9b01      	ldr	r3, [sp, #4]
 23f49c6:	aa0a      	add	r2, sp, #40	; 0x28
 23f49c8:	a906      	add	r1, sp, #24
 23f49ca:	4630      	mov	r0, r6
 23f49cc:	f000 fb58 	bl	23f5080 <_ZN11MQTTManager7publishE6StringS0_b>
 23f49d0:	a80a      	add	r0, sp, #40	; 0x28
 23f49d2:	f005 fc29 	bl	23fa228 <_ZN6StringD1Ev>
 23f49d6:	a806      	add	r0, sp, #24
 23f49d8:	f005 fc26 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f49dc:	a802      	add	r0, sp, #8
 23f49de:	f005 fc23 	bl	23fa228 <_ZN6StringD1Ev>
}
 23f49e2:	b00e      	add	sp, #56	; 0x38
 23f49e4:	bd70      	pop	{r4, r5, r6, pc}
 23f49e6:	bf00      	nop
 23f49e8:	1007ad54 	.word	0x1007ad54
 23f49ec:	1007ad04 	.word	0x1007ad04
 23f49f0:	023ff5ce 	.word	0x023ff5ce

023f49f4 <_ZN3IoT10setLatLongEff>:

// LATITUDE/LONGITUDE
//
void IoT::setLatLong(float latitude, float longitude) {
    // Currently only PartOfDay cares about (and persists) this.
    Device::setAllLatLong(latitude, longitude);
 23f49f4:	f002 b89e 	b.w	23f6b34 <_ZN6Device13setAllLatLongEff>

023f49f8 <_ZN3IoT11setTimezoneEi>:
}

// TIMEZONE
//
void IoT::setTimezone(int timezone) {
 23f49f8:	b510      	push	{r4, lr}
 23f49fa:	4604      	mov	r4, r0
 23f49fc:	b088      	sub	sp, #32
    StringSumHelper(const char *p) : String(p) {}
 23f49fe:	4914      	ldr	r1, [pc, #80]	; (23f4a50 <_ZN3IoT11setTimezoneEi+0x58>)
 23f4a00:	a804      	add	r0, sp, #16
 23f4a02:	f005 fc5c 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    Log.trace("setTimezone: "+String(timezone));
 23f4a06:	220a      	movs	r2, #10
 23f4a08:	4621      	mov	r1, r4
 23f4a0a:	4668      	mov	r0, sp
 23f4a0c:	f005 fcd9 	bl	23fa3c2 <_ZN6StringC1Eih>
 23f4a10:	4669      	mov	r1, sp
 23f4a12:	a804      	add	r0, sp, #16
 23f4a14:	f005 fd4a 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f4a18:	6801      	ldr	r1, [r0, #0]
 23f4a1a:	480e      	ldr	r0, [pc, #56]	; (23f4a54 <_ZN3IoT11setTimezoneEi+0x5c>)
 23f4a1c:	f7ff fe7a 	bl	23f4714 <_ZNK5spark6Logger5traceEPKcz>
 23f4a20:	4668      	mov	r0, sp
 23f4a22:	f005 fc01 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f4a26:	a804      	add	r0, sp, #16
 23f4a28:	f005 fbfe 	bl	23fa228 <_ZN6StringD1Ev>
    int8_t tz = timezone;
    Time.zone(float(timezone));
 23f4a2c:	ee07 4a90 	vmov	s15, r4
 23f4a30:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    int8_t tz = timezone;
 23f4a34:	f88d 4010 	strb.w	r4, [sp, #16]
    Time.zone(float(timezone));
 23f4a38:	f006 fa02 	bl	23fae40 <_ZN9TimeClass4zoneEf>
    // Persist this value across reboots
    EEPROM.put(TIMEZONE_ADDR, tz);
 23f4a3c:	f006 fe02 	bl	23fb644 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 23f4a40:	2201      	movs	r2, #1
 23f4a42:	a904      	add	r1, sp, #16
 23f4a44:	4610      	mov	r0, r2
 23f4a46:	f003 f8e1 	bl	23f7c0c <HAL_EEPROM_Put>
}
 23f4a4a:	b008      	add	sp, #32
 23f4a4c:	bd10      	pop	{r4, pc}
 23f4a4e:	bf00      	nop
 23f4a50:	023fef4f 	.word	0x023fef4f
 23f4a54:	1007ae20 	.word	0x1007ae20

023f4a58 <_ZN3IoT14handleDSTMarchEv>:
    } else if(month == 11) {
        handleDSTNovember();
    }
}

void IoT::handleDSTMarch() {
 23f4a58:	b538      	push	{r3, r4, r5, lr}
    int weekday = Time.weekday();
 23f4a5a:	f006 fb4b 	bl	23fb0f4 <_ZN9TimeClass7weekdayEv>
 23f4a5e:	4605      	mov	r5, r0
    int day = Time.day();
 23f4a60:	f006 fb3c 	bl	23fb0dc <_ZN9TimeClass3dayEv>
 23f4a64:	4604      	mov	r4, r0
    int hour = Time.hour();
 23f4a66:	f006 fb2d 	bl	23fb0c4 <_ZN9TimeClass4hourEv>

    if(day <= 7) return;
 23f4a6a:	2c07      	cmp	r4, #7
 23f4a6c:	dd1f      	ble.n	23f4aae <_ZN3IoT14handleDSTMarchEv+0x56>

    switch(weekday) {
 23f4a6e:	1e6b      	subs	r3, r5, #1
 23f4a70:	2b05      	cmp	r3, #5
 23f4a72:	d81a      	bhi.n	23f4aaa <_ZN3IoT14handleDSTMarchEv+0x52>
 23f4a74:	e8df f003 	tbb	[pc, r3]
 23f4a78:	13110f03 	.word	0x13110f03
 23f4a7c:	1715      	.short	0x1715
        case 1:     // Sunday
            if(day == 8 && hour < 2) return;
 23f4a7e:	2c08      	cmp	r4, #8
 23f4a80:	d101      	bne.n	23f4a86 <_ZN3IoT14handleDSTMarchEv+0x2e>
 23f4a82:	2801      	cmp	r0, #1
            if(day < 12) return;
        case 6:
            if(day < 13) return;
        case 7:     // Saturday
        default:
            if(day < 14) return;
 23f4a84:	dd13      	ble.n	23f4aae <_ZN3IoT14handleDSTMarchEv+0x56>
    }
    Log.trace("Begin DST");
 23f4a86:	490a      	ldr	r1, [pc, #40]	; (23f4ab0 <_ZN3IoT14handleDSTMarchEv+0x58>)
 23f4a88:	480a      	ldr	r0, [pc, #40]	; (23f4ab4 <_ZN3IoT14handleDSTMarchEv+0x5c>)
 23f4a8a:	f7ff fe43 	bl	23f4714 <_ZNK5spark6Logger5traceEPKcz>
    Time.beginDST();
}
 23f4a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Time.beginDST();
 23f4a92:	f006 b9f5 	b.w	23fae80 <_ZN9TimeClass8beginDSTEv>
            if(day < 9) return;
 23f4a96:	2c08      	cmp	r4, #8
 23f4a98:	d009      	beq.n	23f4aae <_ZN3IoT14handleDSTMarchEv+0x56>
            if(day < 10) return;
 23f4a9a:	2c09      	cmp	r4, #9
 23f4a9c:	dd07      	ble.n	23f4aae <_ZN3IoT14handleDSTMarchEv+0x56>
            if(day < 11) return;
 23f4a9e:	2c0a      	cmp	r4, #10
 23f4aa0:	dd05      	ble.n	23f4aae <_ZN3IoT14handleDSTMarchEv+0x56>
            if(day < 12) return;
 23f4aa2:	2c0b      	cmp	r4, #11
 23f4aa4:	dd03      	ble.n	23f4aae <_ZN3IoT14handleDSTMarchEv+0x56>
            if(day < 13) return;
 23f4aa6:	2c0c      	cmp	r4, #12
 23f4aa8:	dd01      	ble.n	23f4aae <_ZN3IoT14handleDSTMarchEv+0x56>
            if(day < 14) return;
 23f4aaa:	2c0d      	cmp	r4, #13
 23f4aac:	e7ea      	b.n	23f4a84 <_ZN3IoT14handleDSTMarchEv+0x2c>
}
 23f4aae:	bd38      	pop	{r3, r4, r5, pc}
 23f4ab0:	023fef5d 	.word	0x023fef5d
 23f4ab4:	1007ae20 	.word	0x1007ae20

023f4ab8 <_ZN3IoT17handleDSTNovemberEv>:

void IoT::handleDSTNovember() {
 23f4ab8:	b538      	push	{r3, r4, r5, lr}
    int weekday = Time.weekday();
 23f4aba:	f006 fb1b 	bl	23fb0f4 <_ZN9TimeClass7weekdayEv>
 23f4abe:	4605      	mov	r5, r0
    int day = Time.day();
 23f4ac0:	f006 fb0c 	bl	23fb0dc <_ZN9TimeClass3dayEv>
 23f4ac4:	4604      	mov	r4, r0
    int hour = Time.hour();
 23f4ac6:	f006 fafd 	bl	23fb0c4 <_ZN9TimeClass4hourEv>

    if(day > 7) return;
 23f4aca:	2c07      	cmp	r4, #7
 23f4acc:	dc0b      	bgt.n	23f4ae6 <_ZN3IoT17handleDSTNovemberEv+0x2e>

    switch(weekday) {
 23f4ace:	1e6b      	subs	r3, r5, #1
 23f4ad0:	2b05      	cmp	r3, #5
 23f4ad2:	d813      	bhi.n	23f4afc <_ZN3IoT17handleDSTNovemberEv+0x44>
 23f4ad4:	e8df f003 	tbb	[pc, r3]
 23f4ad8:	0c0a0803 	.word	0x0c0a0803
 23f4adc:	100e      	.short	0x100e
        case 1:     // Sunday
            if(day == 1 && hour >= 2) return;
 23f4ade:	2c01      	cmp	r4, #1
 23f4ae0:	d10c      	bne.n	23f4afc <_ZN3IoT17handleDSTNovemberEv+0x44>
 23f4ae2:	2801      	cmp	r0, #1
            break;
        case 4:
            if(day > 4) return;
            break;
        case 5:
            if(day > 5) return;
 23f4ae4:	dd0a      	ble.n	23f4afc <_ZN3IoT17handleDSTNovemberEv+0x44>
        default:
            if(day > 7) return;
    }
    Log.trace("Begin DST");
    Time.beginDST();
}
 23f4ae6:	bd38      	pop	{r3, r4, r5, pc}
            if(day > 2) return;
 23f4ae8:	2c02      	cmp	r4, #2
 23f4aea:	e7fb      	b.n	23f4ae4 <_ZN3IoT17handleDSTNovemberEv+0x2c>
            if(day > 3) return;
 23f4aec:	2c03      	cmp	r4, #3
 23f4aee:	e7f9      	b.n	23f4ae4 <_ZN3IoT17handleDSTNovemberEv+0x2c>
            if(day > 4) return;
 23f4af0:	2c04      	cmp	r4, #4
 23f4af2:	e7f7      	b.n	23f4ae4 <_ZN3IoT17handleDSTNovemberEv+0x2c>
            if(day > 5) return;
 23f4af4:	2c05      	cmp	r4, #5
 23f4af6:	e7f5      	b.n	23f4ae4 <_ZN3IoT17handleDSTNovemberEv+0x2c>
            if(day > 6) return;
 23f4af8:	2c07      	cmp	r4, #7
 23f4afa:	d0f4      	beq.n	23f4ae6 <_ZN3IoT17handleDSTNovemberEv+0x2e>
    Log.trace("Begin DST");
 23f4afc:	4903      	ldr	r1, [pc, #12]	; (23f4b0c <_ZN3IoT17handleDSTNovemberEv+0x54>)
 23f4afe:	4804      	ldr	r0, [pc, #16]	; (23f4b10 <_ZN3IoT17handleDSTNovemberEv+0x58>)
 23f4b00:	f7ff fe08 	bl	23f4714 <_ZNK5spark6Logger5traceEPKcz>
}
 23f4b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Time.beginDST();
 23f4b08:	f006 b9ba 	b.w	23fae80 <_ZN9TimeClass8beginDSTEv>
 23f4b0c:	023fef5d 	.word	0x023fef5d
 23f4b10:	1007ae20 	.word	0x1007ae20

023f4b14 <_ZN3IoT21handleDaylightSavingsEv>:
void IoT::handleDaylightSavings() {
 23f4b14:	b500      	push	{lr}
 23f4b16:	b08b      	sub	sp, #44	; 0x2c
    EEPROM.get(TIMEZONE_ADDR, timezone);    // Photon2 uses a file on the Flash file system
 23f4b18:	f006 fd94 	bl	23fb644 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23f4b1c:	2201      	movs	r2, #1
 23f4b1e:	f10d 0107 	add.w	r1, sp, #7
 23f4b22:	4610      	mov	r0, r2
 23f4b24:	f003 f864 	bl	23f7bf0 <HAL_EEPROM_Get>
    StringSumHelper(const char *p) : String(p) {}
 23f4b28:	4919      	ldr	r1, [pc, #100]	; (23f4b90 <_ZN3IoT21handleDaylightSavingsEv+0x7c>)
 23f4b2a:	a806      	add	r0, sp, #24
 23f4b2c:	f005 fbc7 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    Log.trace("Setting timezone to "+String(timezone));
 23f4b30:	220a      	movs	r2, #10
 23f4b32:	f99d 1007 	ldrsb.w	r1, [sp, #7]
 23f4b36:	a802      	add	r0, sp, #8
 23f4b38:	f005 fc43 	bl	23fa3c2 <_ZN6StringC1Eih>
 23f4b3c:	a902      	add	r1, sp, #8
 23f4b3e:	a806      	add	r0, sp, #24
 23f4b40:	f005 fcb4 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f4b44:	6801      	ldr	r1, [r0, #0]
 23f4b46:	4813      	ldr	r0, [pc, #76]	; (23f4b94 <_ZN3IoT21handleDaylightSavingsEv+0x80>)
 23f4b48:	f7ff fde4 	bl	23f4714 <_ZNK5spark6Logger5traceEPKcz>
 23f4b4c:	a802      	add	r0, sp, #8
 23f4b4e:	f005 fb6b 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f4b52:	a806      	add	r0, sp, #24
 23f4b54:	f005 fb68 	bl	23fa228 <_ZN6StringD1Ev>
    Time.zone(float(timezone));
 23f4b58:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 23f4b5c:	ee00 3a10 	vmov	s0, r3
 23f4b60:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 23f4b64:	f006 f96c 	bl	23fae40 <_ZN9TimeClass4zoneEf>
    int month = Time.month();
 23f4b68:	f006 facc 	bl	23fb104 <_ZN9TimeClass5monthEv>
    if(month > 3 && month < 11) {
 23f4b6c:	1f03      	subs	r3, r0, #4
 23f4b6e:	2b06      	cmp	r3, #6
 23f4b70:	d804      	bhi.n	23f4b7c <_ZN3IoT21handleDaylightSavingsEv+0x68>
        Time.beginDST();
 23f4b72:	f006 f985 	bl	23fae80 <_ZN9TimeClass8beginDSTEv>
}
 23f4b76:	b00b      	add	sp, #44	; 0x2c
 23f4b78:	f85d fb04 	ldr.w	pc, [sp], #4
    } else if(month == 3) {
 23f4b7c:	2803      	cmp	r0, #3
 23f4b7e:	d102      	bne.n	23f4b86 <_ZN3IoT21handleDaylightSavingsEv+0x72>
        handleDSTMarch();
 23f4b80:	f7ff ff6a 	bl	23f4a58 <_ZN3IoT14handleDSTMarchEv>
 23f4b84:	e7f7      	b.n	23f4b76 <_ZN3IoT21handleDaylightSavingsEv+0x62>
    } else if(month == 11) {
 23f4b86:	280b      	cmp	r0, #11
 23f4b88:	d1f5      	bne.n	23f4b76 <_ZN3IoT21handleDaylightSavingsEv+0x62>
        handleDSTNovember();
 23f4b8a:	f7ff ff95 	bl	23f4ab8 <_ZN3IoT17handleDSTNovemberEv>
}
 23f4b8e:	e7f2      	b.n	23f4b76 <_ZN3IoT21handleDaylightSavingsEv+0x62>
 23f4b90:	023fef67 	.word	0x023fef67
 23f4b94:	1007ae20 	.word	0x1007ae20

023f4b98 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 23f4b98:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f4b9a:	2300      	movs	r3, #0
 23f4b9c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23f4b9e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23f4ba0:	4604      	mov	r4, r0
 23f4ba2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23f4ba4:	b12b      	cbz	r3, 23f4bb2 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f4ba6:	2202      	movs	r2, #2
 23f4ba8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f4baa:	68eb      	ldr	r3, [r5, #12]
 23f4bac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f4bae:	68ab      	ldr	r3, [r5, #8]
 23f4bb0:	60a3      	str	r3, [r4, #8]
    }
 23f4bb2:	4620      	mov	r0, r4
 23f4bb4:	bd38      	pop	{r3, r4, r5, pc}
	...

023f4bb8 <_ZN3IoT5beginE6StringS0_b>:
{
 23f4bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f4bbc:	f04f 0a00 	mov.w	sl, #0
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23f4bc0:	4b47      	ldr	r3, [pc, #284]	; (23f4ce0 <_ZN3IoT5beginE6StringS0_b+0x128>)
 23f4bc2:	b098      	sub	sp, #96	; 0x60
 23f4bc4:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23f4bc6:	4b47      	ldr	r3, [pc, #284]	; (23f4ce4 <_ZN3IoT5beginE6StringS0_b+0x12c>)
 23f4bc8:	4680      	mov	r8, r0
 23f4bca:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 23f4bcc:	4b46      	ldr	r3, [pc, #280]	; (23f4ce8 <_ZN3IoT5beginE6StringS0_b+0x130>)
 23f4bce:	4689      	mov	r9, r1
        };
 23f4bd0:	a808      	add	r0, sp, #32
 23f4bd2:	a904      	add	r1, sp, #16
 23f4bd4:	4617      	mov	r7, r2
 23f4bd6:	9306      	str	r3, [sp, #24]
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f4bd8:	ad10      	add	r5, sp, #64	; 0x40
        };
 23f4bda:	f7ff ffdd 	bl	23f4b98 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f4bde:	a908      	add	r1, sp, #32
 23f4be0:	a80c      	add	r0, sp, #48	; 0x30
 23f4be2:	f7ff ffd9 	bl	23f4b98 <_ZNSt8functionIFvyiEEC1ERKS1_>
 23f4be6:	a90c      	add	r1, sp, #48	; 0x30
 23f4be8:	4628      	mov	r0, r5
 23f4bea:	f7ff ffd5 	bl	23f4b98 <_ZNSt8functionIFvyiEEC1ERKS1_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f4bee:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 23f4bf0:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f4bf4:	f7fe fe9d 	bl	23f3932 <_Znwj>
 23f4bf8:	4604      	mov	r4, r0
 23f4bfa:	b1a0      	cbz	r0, 23f4c26 <_ZN3IoT5beginE6StringS0_b+0x6e>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f4bfc:	e895 0003 	ldmia.w	r5, {r0, r1}
 23f4c00:	ae01      	add	r6, sp, #4
 23f4c02:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f4c06:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f4c0a:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f4c0e:	e896 0003 	ldmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f4c12:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
 23f4c14:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f4c16:	60a3      	str	r3, [r4, #8]
 23f4c18:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f4c1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 23f4c1e:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 23f4c22:	9213      	str	r2, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
 23f4c24:	60e3      	str	r3, [r4, #12]
        SystemEventContext context = {};
 23f4c26:	2600      	movs	r6, #0
	    _M_invoker = &_My_handler::_M_invoke;
 23f4c28:	4b30      	ldr	r3, [pc, #192]	; (23f4cec <_ZN3IoT5beginE6StringS0_b+0x134>)
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
 23f4c2a:	2010      	movs	r0, #16
 23f4c2c:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
 23f4c2e:	4b30      	ldr	r3, [pc, #192]	; (23f4cf0 <_ZN3IoT5beginE6StringS0_b+0x138>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f4c30:	9414      	str	r4, [sp, #80]	; 0x50
	    _M_manager = &_My_handler::_M_manager;
 23f4c32:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
 23f4c34:	4b2f      	ldr	r3, [pc, #188]	; (23f4cf4 <_ZN3IoT5beginE6StringS0_b+0x13c>)
 23f4c36:	9603      	str	r6, [sp, #12]
 23f4c38:	e9cd 3601 	strd	r3, r6, [sp, #4]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
 23f4c3c:	f7fe fe79 	bl	23f3932 <_Znwj>
 23f4c40:	4604      	mov	r4, r0
 23f4c42:	b1d8      	cbz	r0, 23f4c7c <_ZN3IoT5beginE6StringS0_b+0xc4>
    bool _M_empty() const { return !_M_manager; }
 23f4c44:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
 23f4c46:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
 23f4c48:	b133      	cbz	r3, 23f4c58 <_ZN3IoT5beginE6StringS0_b+0xa0>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f4c4a:	2202      	movs	r2, #2
 23f4c4c:	a914      	add	r1, sp, #80	; 0x50
 23f4c4e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f4c50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23f4c52:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f4c54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23f4c56:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
 23f4c58:	4b27      	ldr	r3, [pc, #156]	; (23f4cf8 <_ZN3IoT5beginE6StringS0_b+0x140>)
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f4c5a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
        context.destructor = [](void* callable) -> void {
 23f4c5e:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f4c60:	2100      	movs	r1, #0
 23f4c62:	4a26      	ldr	r2, [pc, #152]	; (23f4cfc <_ZN3IoT5beginE6StringS0_b+0x144>)
 23f4c64:	ab01      	add	r3, sp, #4
        context.callable = wrapper;
 23f4c66:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f4c68:	f003 fb42 	bl	23f82f0 <system_subscribe_event>
        if (r) {
 23f4c6c:	b130      	cbz	r0, 23f4c7c <_ZN3IoT5beginE6StringS0_b+0xc4>
    class function<_Res(_ArgTypes...)>
 23f4c6e:	4620      	mov	r0, r4
 23f4c70:	f7ff fce8 	bl	23f4644 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
 23f4c74:	2110      	movs	r1, #16
 23f4c76:	4620      	mov	r0, r4
 23f4c78:	f7fe fe61 	bl	23f393e <_ZdlPvj>
 23f4c7c:	a814      	add	r0, sp, #80	; 0x50
 23f4c7e:	f7ff fce1 	bl	23f4644 <_ZNSt14_Function_baseD1Ev>
 23f4c82:	4628      	mov	r0, r5
 23f4c84:	f7ff fcde 	bl	23f4644 <_ZNSt14_Function_baseD1Ev>
 23f4c88:	a80c      	add	r0, sp, #48	; 0x30
 23f4c8a:	f7ff fcdb 	bl	23f4644 <_ZNSt14_Function_baseD1Ev>
 23f4c8e:	a808      	add	r0, sp, #32
 23f4c90:	f7ff fcd8 	bl	23f4644 <_ZNSt14_Function_baseD1Ev>
 23f4c94:	a804      	add	r0, sp, #16
 23f4c96:	f7ff fcd5 	bl	23f4644 <_ZNSt14_Function_baseD1Ev>
    handleDaylightSavings();    // Set isDST appropriately
 23f4c9a:	f7ff ff3b 	bl	23f4b14 <_ZN3IoT21handleDaylightSavingsEv>
    Device::expose();
 23f4c9e:	f001 ff8f 	bl	23f6bc0 <_ZN6Device6exposeEv>
    startWatchdog();
 23f4ca2:	f7ff fd45 	bl	23f4730 <_ZN3IoT13startWatchdogEv>
    _mqttManager = new MQTTManager(brokerIP, controllerName, mqttLogging);
 23f4ca6:	4641      	mov	r1, r8
 23f4ca8:	4628      	mov	r0, r5
 23f4caa:	f005 fb54 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f4cae:	4649      	mov	r1, r9
 23f4cb0:	a814      	add	r0, sp, #80	; 0x50
 23f4cb2:	f005 fb50 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f4cb6:	2068      	movs	r0, #104	; 0x68
 23f4cb8:	f7fe fe3b 	bl	23f3932 <_Znwj>
 23f4cbc:	4604      	mov	r4, r0
 23f4cbe:	b120      	cbz	r0, 23f4cca <_ZN3IoT5beginE6StringS0_b+0x112>
 23f4cc0:	463b      	mov	r3, r7
 23f4cc2:	4629      	mov	r1, r5
 23f4cc4:	aa14      	add	r2, sp, #80	; 0x50
 23f4cc6:	f000 f8f1 	bl	23f4eac <_ZN11MQTTManagerC1E6StringS0_b>
 23f4cca:	4b0d      	ldr	r3, [pc, #52]	; (23f4d00 <_ZN3IoT5beginE6StringS0_b+0x148>)
 23f4ccc:	a814      	add	r0, sp, #80	; 0x50
 23f4cce:	601c      	str	r4, [r3, #0]
 23f4cd0:	f005 faaa 	bl	23fa228 <_ZN6StringD1Ev>
 23f4cd4:	4628      	mov	r0, r5
 23f4cd6:	f005 faa7 	bl	23fa228 <_ZN6StringD1Ev>
}
 23f4cda:	b018      	add	sp, #96	; 0x60
 23f4cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f4ce0:	023f45cd 	.word	0x023f45cd
 23f4ce4:	023f463b 	.word	0x023f463b
 23f4ce8:	023f4627 	.word	0x023f4627
 23f4cec:	023f4601 	.word	0x023f4601
 23f4cf0:	023f4d05 	.word	0x023f4d05
 23f4cf4:	000c0002 	.word	0x000c0002
 23f4cf8:	023f4657 	.word	0x023f4657
 23f4cfc:	023f45d9 	.word	0x023f45d9
 23f4d00:	1007ad54 	.word	0x1007ad54

023f4d04 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
 23f4d04:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23f4d06:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f4d08:	4604      	mov	r4, r0
	switch (__op)
 23f4d0a:	d104      	bne.n	23f4d16 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
 23f4d0c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f4d0e:	6003      	str	r3, [r0, #0]
      }
 23f4d10:	2000      	movs	r0, #0
 23f4d12:	b003      	add	sp, #12
 23f4d14:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
 23f4d16:	2a02      	cmp	r2, #2
 23f4d18:	d00c      	beq.n	23f4d34 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
 23f4d1a:	2a03      	cmp	r2, #3
 23f4d1c:	d1f8      	bne.n	23f4d10 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23f4d1e:	6804      	ldr	r4, [r0, #0]
 23f4d20:	2c00      	cmp	r4, #0
 23f4d22:	d0f5      	beq.n	23f4d10 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23f4d24:	4620      	mov	r0, r4
 23f4d26:	f7ff fc8d 	bl	23f4644 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23f4d2a:	2110      	movs	r1, #16
 23f4d2c:	4620      	mov	r0, r4
 23f4d2e:	f7fe fe06 	bl	23f393e <_ZdlPvj>
 23f4d32:	e7ed      	b.n	23f4d10 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
 23f4d34:	6809      	ldr	r1, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f4d36:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 23f4d38:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f4d3a:	f7fe fdfa 	bl	23f3932 <_Znwj>
 23f4d3e:	4605      	mov	r5, r0
 23f4d40:	b110      	cbz	r0, 23f4d48 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f4d42:	9901      	ldr	r1, [sp, #4]
 23f4d44:	f7ff ff28 	bl	23f4b98 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
 23f4d48:	6025      	str	r5, [r4, #0]
	}
 23f4d4a:	e7e1      	b.n	23f4d10 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

023f4d4c <_GLOBAL__sub_I__ZN6Device8_devicesE>:
}
 23f4d4c:	b508      	push	{r3, lr}
#define TIMEZONE_ADDR 1     // 1 byte signed, -127 to +128 offset from GMT
#define LATITUDE_ADDR 4     // 4 byte float
#define LONGITUDE_ADDR 8    // 4 byte float

static const int    kMaxVariableStringLength   = 864; // was 622 < v3.0.0
static const String kDevicesVariableName       = "Devices";
 23f4d4e:	490b      	ldr	r1, [pc, #44]	; (23f4d7c <_GLOBAL__sub_I__ZN6Device8_devicesE+0x30>)
 23f4d50:	480b      	ldr	r0, [pc, #44]	; (23f4d80 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x34>)
 23f4d52:	f005 fab4 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
static const String kChecklistVariableName     = "Checklist";
 23f4d56:	490b      	ldr	r1, [pc, #44]	; (23f4d84 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x38>)
 23f4d58:	480b      	ldr	r0, [pc, #44]	; (23f4d88 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x3c>)
 23f4d5a:	f005 fab0 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
static const String kStatusVariableName        = "Status";
 23f4d5e:	490b      	ldr	r1, [pc, #44]	; (23f4d8c <_GLOBAL__sub_I__ZN6Device8_devicesE+0x40>)
 23f4d60:	480b      	ldr	r0, [pc, #44]	; (23f4d90 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x44>)
 23f4d62:	f005 faac 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
static const String kPublishName               = "patriot";
 23f4d66:	490b      	ldr	r1, [pc, #44]	; (23f4d94 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x48>)
 23f4d68:	480b      	ldr	r0, [pc, #44]	; (23f4d98 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x4c>)
 23f4d6a:	f005 faa8 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4d6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
static const String kSSIDFunctionName          = "setSSID";
 23f4d72:	490a      	ldr	r1, [pc, #40]	; (23f4d9c <_GLOBAL__sub_I__ZN6Device8_devicesE+0x50>)
 23f4d74:	480a      	ldr	r0, [pc, #40]	; (23f4da0 <_GLOBAL__sub_I__ZN6Device8_devicesE+0x54>)
 23f4d76:	f005 baa2 	b.w	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f4d7a:	bf00      	nop
 23f4d7c:	023fef7c 	.word	0x023fef7c
 23f4d80:	1007ad34 	.word	0x1007ad34
 23f4d84:	023fef84 	.word	0x023fef84
 23f4d88:	1007ad44 	.word	0x1007ad44
 23f4d8c:	023fef8e 	.word	0x023fef8e
 23f4d90:	1007ad24 	.word	0x1007ad24
 23f4d94:	023fef95 	.word	0x023fef95
 23f4d98:	1007ad04 	.word	0x1007ad04
 23f4d9c:	023fef9d 	.word	0x023fef9d
 23f4da0:	1007ad14 	.word	0x1007ad14

023f4da4 <_ZN5spark10LogHandler5writeEPKcj>:
}
 23f4da4:	4770      	bx	lr
	...

023f4da8 <_ZN11MQTTManagerD1Ev>:
 */
#pragma once
#include "Particle.h"
#include "MQTT.h"

class MQTTManager : public LogHandler
 23f4da8:	b510      	push	{r4, lr}
 23f4daa:	4604      	mov	r4, r0
 23f4dac:	4b06      	ldr	r3, [pc, #24]	; (23f4dc8 <_ZN11MQTTManagerD1Ev+0x20>)
 23f4dae:	f840 3b28 	str.w	r3, [r0], #40
 23f4db2:	f005 fa39 	bl	23fa228 <_ZN6StringD1Ev>
    virtual ~LogHandler() = default;
 23f4db6:	4620      	mov	r0, r4
 23f4db8:	4b04      	ldr	r3, [pc, #16]	; (23f4dcc <_ZN11MQTTManagerD1Ev+0x24>)
 23f4dba:	f840 3b04 	str.w	r3, [r0], #4
 23f4dbe:	f004 faf6 	bl	23f93ae <_ZN5spark6detail9LogFilterD1Ev>
 23f4dc2:	4620      	mov	r0, r4
 23f4dc4:	bd10      	pop	{r4, pc}
 23f4dc6:	bf00      	nop
 23f4dc8:	023ff244 	.word	0x023ff244
 23f4dcc:	023ff22c 	.word	0x023ff22c

023f4dd0 <_ZN11MQTTManagerD0Ev>:
 23f4dd0:	b510      	push	{r4, lr}
 23f4dd2:	4604      	mov	r4, r0
 23f4dd4:	f7ff ffe8 	bl	23f4da8 <_ZN11MQTTManagerD1Ev>
 23f4dd8:	4620      	mov	r0, r4
 23f4dda:	2168      	movs	r1, #104	; 0x68
 23f4ddc:	f7fe fdaf 	bl	23f393e <_ZdlPvj>
 23f4de0:	4620      	mov	r0, r4
 23f4de2:	bd10      	pop	{r4, pc}

023f4de4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23f4de4:	2200      	movs	r2, #0
 23f4de6:	6840      	ldr	r0, [r0, #4]
 23f4de8:	4611      	mov	r1, r2
 23f4dea:	f003 bb61 	b.w	23f84b0 <network_ready>

023f4dee <_ZNK5spark6Logger4warnEPKcz>:
inline void spark::Logger::warn(const char *fmt, ...) const {
 23f4dee:	b40e      	push	{r1, r2, r3}
 23f4df0:	b503      	push	{r0, r1, lr}
 23f4df2:	ab03      	add	r3, sp, #12
 23f4df4:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_WARN, fmt, args);
 23f4df8:	2128      	movs	r1, #40	; 0x28
    va_start(args, fmt);
 23f4dfa:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_WARN, fmt, args);
 23f4dfc:	f7ff fc5c 	bl	23f46b8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f4e00:	b002      	add	sp, #8
 23f4e02:	f85d eb04 	ldr.w	lr, [sp], #4
 23f4e06:	b003      	add	sp, #12
 23f4e08:	4770      	bx	lr

023f4e0a <_ZN11MQTTManager13mqttConnectedEv>:
bool MQTTManager::wifiConnected() {
    return WiFi.ready();
}

bool MQTTManager::mqttConnected() {
    return _mqtt->isConnected();
 23f4e0a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23f4e0c:	f002 bb4a 	b.w	23f74a4 <_ZN4MQTT11isConnectedEv>

023f4e10 <_ZN11MQTTManager11connectMQTTEv>:

bool MQTTManager::cloudConnected() {
    return Particle.connected();
}

void MQTTManager::connectMQTT() {
 23f4e10:	b570      	push	{r4, r5, r6, lr}
 23f4e12:	4604      	mov	r4, r0
 23f4e14:	b092      	sub	sp, #72	; 0x48
    StringSumHelper(const String &s) : String(s) {}
 23f4e16:	4920      	ldr	r1, [pc, #128]	; (23f4e98 <_ZN11MQTTManager11connectMQTTEv+0x88>)
 23f4e18:	a80e      	add	r0, sp, #56	; 0x38
 23f4e1a:	f005 fa9c 	bl	23fa356 <_ZN6StringC1ERKS_>
    const char *user = NULL;
    const char *pw = NULL;
    String willTopic = kPublishName + "/" + _controllerName + "/status";
 23f4e1e:	f104 0528 	add.w	r5, r4, #40	; 0x28
 23f4e22:	491e      	ldr	r1, [pc, #120]	; (23f4e9c <_ZN11MQTTManager11connectMQTTEv+0x8c>)
 23f4e24:	a80e      	add	r0, sp, #56	; 0x38
 23f4e26:	f005 fb4d 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f4e2a:	4629      	mov	r1, r5
 23f4e2c:	f005 fb3e 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f4e30:	491b      	ldr	r1, [pc, #108]	; (23f4ea0 <_ZN11MQTTManager11connectMQTTEv+0x90>)
 23f4e32:	f005 fb47 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f4e36:	4601      	mov	r1, r0
 23f4e38:	a806      	add	r0, sp, #24
 23f4e3a:	f005 fa8c 	bl	23fa356 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 23f4e3e:	a80e      	add	r0, sp, #56	; 0x38
 23f4e40:	f005 f9f2 	bl	23fa228 <_ZN6StringD1Ev>
    MQTT::EMQTT_QOS willQoS = MQTT::QOS0;
    uint8_t willRetain = 0;
    String willMessage = "Offline";
 23f4e44:	4917      	ldr	r1, [pc, #92]	; (23f4ea4 <_ZN11MQTTManager11connectMQTTEv+0x94>)
 23f4e46:	a80a      	add	r0, sp, #40	; 0x28
 23f4e48:	f005 fa39 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    StringSumHelper(const String &s) : String(s) {}
 23f4e4c:	4629      	mov	r1, r5
 23f4e4e:	a80e      	add	r0, sp, #56	; 0x38
    bool clean = false;
    _mqtt->connect(_controllerName + "Id", user, pw, willTopic, willQoS, willRetain, willMessage, clean);
 23f4e50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 23f4e52:	f005 fa80 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f4e56:	4914      	ldr	r1, [pc, #80]	; (23f4ea8 <_ZN11MQTTManager11connectMQTTEv+0x98>)
 23f4e58:	a80e      	add	r0, sp, #56	; 0x38
 23f4e5a:	f005 fb33 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f4e5e:	2300      	movs	r3, #0
 23f4e60:	2204      	movs	r2, #4
 23f4e62:	e9cd 3204 	strd	r3, r2, [sp, #16]
 23f4e66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23f4e68:	9301      	str	r3, [sp, #4]
 23f4e6a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f4e6e:	9a06      	ldr	r2, [sp, #24]
 23f4e70:	9200      	str	r2, [sp, #0]
 23f4e72:	6801      	ldr	r1, [r0, #0]
 23f4e74:	461a      	mov	r2, r3
 23f4e76:	4630      	mov	r0, r6
 23f4e78:	f002 fb22 	bl	23f74c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
class StringSumHelper : public String
 23f4e7c:	a80e      	add	r0, sp, #56	; 0x38
 23f4e7e:	f005 f9d3 	bl	23fa228 <_ZN6StringD1Ev>
    _lastMQTTtime = Time.now();
 23f4e82:	f006 f90e 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
 23f4e86:	63a0      	str	r0, [r4, #56]	; 0x38
    String willMessage = "Offline";
 23f4e88:	a80a      	add	r0, sp, #40	; 0x28
 23f4e8a:	f005 f9cd 	bl	23fa228 <_ZN6StringD1Ev>
    String willTopic = kPublishName + "/" + _controllerName + "/status";
 23f4e8e:	a806      	add	r0, sp, #24
 23f4e90:	f005 f9ca 	bl	23fa228 <_ZN6StringD1Ev>
}
 23f4e94:	b012      	add	sp, #72	; 0x48
 23f4e96:	bd70      	pop	{r4, r5, r6, pc}
 23f4e98:	1007ad5c 	.word	0x1007ad5c
 23f4e9c:	023ff5ce 	.word	0x023ff5ce
 23f4ea0:	023fefa5 	.word	0x023fefa5
 23f4ea4:	023fefad 	.word	0x023fefad
 23f4ea8:	023fefb5 	.word	0x023fefb5

023f4eac <_ZN11MQTTManagerC1E6StringS0_b>:
MQTTManager::MQTTManager(String brokerIP, String controllerName, bool mqttLogging)
 23f4eac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f4eb0:	4604      	mov	r4, r0
 23f4eb2:	4625      	mov	r5, r4
 23f4eb4:	4690      	mov	r8, r2
 23f4eb6:	461f      	mov	r7, r3
        filter_(level) {
 23f4eb8:	4b32      	ldr	r3, [pc, #200]	; (23f4f84 <_ZN11MQTTManagerC1E6StringS0_b+0xd8>)
 23f4eba:	460e      	mov	r6, r1
 23f4ebc:	f840 3b04 	str.w	r3, [r0], #4
 23f4ec0:	211e      	movs	r1, #30
 23f4ec2:	f004 f88b 	bl	23f8fdc <_ZN5spark6detail9LogFilterC1E8LogLevel>
 23f4ec6:	4b30      	ldr	r3, [pc, #192]	; (23f4f88 <_ZN11MQTTManagerC1E6StringS0_b+0xdc>)
 23f4ec8:	4930      	ldr	r1, [pc, #192]	; (23f4f8c <_ZN11MQTTManagerC1E6StringS0_b+0xe0>)
 23f4eca:	f845 3b28 	str.w	r3, [r5], #40
 23f4ece:	4628      	mov	r0, r5
 23f4ed0:	f005 f9f5 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    _controllerName = controllerName.toLowerCase();
 23f4ed4:	4640      	mov	r0, r8
 23f4ed6:	f005 fbbe 	bl	23fa656 <_ZN6String11toLowerCaseEv>
 23f4eda:	4601      	mov	r1, r0
 23f4edc:	4628      	mov	r0, r5
 23f4ede:	f005 fa2b 	bl	23fa338 <_ZN6StringaSERKS_>
    _logging = 0;
 23f4ee2:	2500      	movs	r5, #0
    _logLevel = LOG_LEVEL_ALL;     // See particle doc for options
 23f4ee4:	2101      	movs	r1, #1
    pinMode(D7, OUTPUT);    // Blue LED
 23f4ee6:	2007      	movs	r0, #7
    _logLevel = LOG_LEVEL_ALL;     // See particle doc for options
 23f4ee8:	f884 1020 	strb.w	r1, [r4, #32]
    _blinkPhase = 0;
 23f4eec:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
    _logging = 0;
 23f4ef0:	64e5      	str	r5, [r4, #76]	; 0x4c
    pinMode(D7, OUTPUT);    // Blue LED
 23f4ef2:	f006 fb7d 	bl	23fb5f0 <pinMode>
    digitalWrite(D7, LOW);
 23f4ef6:	4629      	mov	r1, r5
 23f4ef8:	2007      	movs	r0, #7
 23f4efa:	f006 fb8a 	bl	23fb612 <digitalWrite>
    Log.info("Connecting to MQTT");
 23f4efe:	4924      	ldr	r1, [pc, #144]	; (23f4f90 <_ZN11MQTTManagerC1E6StringS0_b+0xe4>)
 23f4f00:	4824      	ldr	r0, [pc, #144]	; (23f4f94 <_ZN11MQTTManagerC1E6StringS0_b+0xe8>)
 23f4f02:	f7ff fbf9 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
    const char * c_str() const { return buffer; }
 23f4f06:	6831      	ldr	r1, [r6, #0]
    _mqtt =  new MQTT((char *)brokerIP.c_str(), 1883, IoT::mqttHandler);
 23f4f08:	2060      	movs	r0, #96	; 0x60
    _mqttSubscribed = false;
 23f4f0a:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
 23f4f0e:	9103      	str	r1, [sp, #12]
    _mqtt =  new MQTT((char *)brokerIP.c_str(), 1883, IoT::mqttHandler);
 23f4f10:	f7fe fd0f 	bl	23f3932 <_Znwj>
 23f4f14:	4606      	mov	r6, r0
 23f4f16:	b130      	cbz	r0, 23f4f26 <_ZN11MQTTManagerC1E6StringS0_b+0x7a>
 23f4f18:	f240 725b 	movw	r2, #1883	; 0x75b
 23f4f1c:	4b1e      	ldr	r3, [pc, #120]	; (23f4f98 <_ZN11MQTTManagerC1E6StringS0_b+0xec>)
 23f4f1e:	9903      	ldr	r1, [sp, #12]
 23f4f20:	9500      	str	r5, [sp, #0]
 23f4f22:	f002 f9e5 	bl	23f72f0 <_ZN4MQTTC1EPKctPFvPcPhjEb>
    connectMQTT();
 23f4f26:	4620      	mov	r0, r4
    _mqtt =  new MQTT((char *)brokerIP.c_str(), 1883, IoT::mqttHandler);
 23f4f28:	6266      	str	r6, [r4, #36]	; 0x24
    connectMQTT();
 23f4f2a:	f7ff ff71 	bl	23f4e10 <_ZN11MQTTManager11connectMQTTEv>
    if(mqttLogging) {
 23f4f2e:	b147      	cbz	r7, 23f4f42 <_ZN11MQTTManagerC1E6StringS0_b+0x96>
        LogManager::instance()->addHandler(this);
 23f4f30:	f004 f954 	bl	23f91dc <_ZN5spark10LogManager8instanceEv>
 23f4f34:	4621      	mov	r1, r4
 23f4f36:	f004 fb59 	bl	23f95ec <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
        Log.info("MQTT log handler added");
 23f4f3a:	4918      	ldr	r1, [pc, #96]	; (23f4f9c <_ZN11MQTTManagerC1E6StringS0_b+0xf0>)
 23f4f3c:	4815      	ldr	r0, [pc, #84]	; (23f4f94 <_ZN11MQTTManagerC1E6StringS0_b+0xe8>)
 23f4f3e:	f7ff fbdb 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 23f4f42:	2300      	movs	r3, #0
 23f4f44:	e9cd 3300 	strd	r3, r3, [sp]
 23f4f48:	4815      	ldr	r0, [pc, #84]	; (23f4fa0 <_ZN11MQTTManagerC1E6StringS0_b+0xf4>)
 23f4f4a:	461a      	mov	r2, r3
 23f4f4c:	4915      	ldr	r1, [pc, #84]	; (23f4fa4 <_ZN11MQTTManagerC1E6StringS0_b+0xf8>)
 23f4f4e:	6800      	ldr	r0, [r0, #0]
 23f4f50:	f003 fa5a 	bl	23f8408 <spark_subscribe>
    _lastAliveTime = Time.now() - MQTT_ALIVE_SECONDS;
 23f4f54:	f006 f8a5 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
 23f4f58:	38b4      	subs	r0, #180	; 0xb4
 23f4f5a:	63e0      	str	r0, [r4, #60]	; 0x3c
    _lastAliveFrontPanel = Time.now();
 23f4f5c:	f006 f8a1 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
 23f4f60:	6520      	str	r0, [r4, #80]	; 0x50
    _lastAliveLeftSlide = Time.now();
 23f4f62:	f006 f89e 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
 23f4f66:	6560      	str	r0, [r4, #84]	; 0x54
    _lastAliveRearPanel = Time.now();
 23f4f68:	f006 f89b 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
 23f4f6c:	65a0      	str	r0, [r4, #88]	; 0x58
    _lastAliveRonTest = Time.now();
 23f4f6e:	f006 f898 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
 23f4f72:	65e0      	str	r0, [r4, #92]	; 0x5c
    _lastCheckTime = Time.now();
 23f4f74:	f006 f895 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
 23f4f78:	6420      	str	r0, [r4, #64]	; 0x40
}
 23f4f7a:	4620      	mov	r0, r4
 23f4f7c:	b004      	add	sp, #16
 23f4f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f4f82:	bf00      	nop
 23f4f84:	023ff22c 	.word	0x023ff22c
 23f4f88:	023ff244 	.word	0x023ff244
 23f4f8c:	023ff87d 	.word	0x023ff87d
 23f4f90:	023fefb8 	.word	0x023fefb8
 23f4f94:	1007ae20 	.word	0x1007ae20
 23f4f98:	023f4879 	.word	0x023f4879
 23f4f9c:	023fefcb 	.word	0x023fefcb
 23f4fa0:	1007ad5c 	.word	0x1007ad5c
 23f4fa4:	023f47c5 	.word	0x023f47c5

023f4fa8 <_ZN11MQTTManager8doRebootEv>:
        String time = Time.format(Time.now(), "%a %H:%M");
        publish(kPublishName+"/alive/"+_controllerName, time, false);
    }
}

void MQTTManager::doReboot() {
 23f4fa8:	b508      	push	{r3, lr}
    Log.warn("Rebooting...");
 23f4faa:	4907      	ldr	r1, [pc, #28]	; (23f4fc8 <_ZN11MQTTManager8doRebootEv+0x20>)
 23f4fac:	4807      	ldr	r0, [pc, #28]	; (23f4fcc <_ZN11MQTTManager8doRebootEv+0x24>)
 23f4fae:	f7ff ff1e 	bl	23f4dee <_ZNK5spark6Logger4warnEPKcz>
    Device::resetAll();
 23f4fb2:	f001 fd45 	bl	23f6a40 <_ZN6Device8resetAllEv>
    delay(200);
 23f4fb6:	20c8      	movs	r0, #200	; 0xc8
 23f4fb8:	f003 fbd8 	bl	23f876c <delay>
    System.reset(RESET_NO_WAIT);
 23f4fbc:	4b04      	ldr	r3, [pc, #16]	; (23f4fd0 <_ZN11MQTTManager8doRebootEv+0x28>)
 23f4fbe:	6818      	ldr	r0, [r3, #0]
}
 23f4fc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    System.reset(RESET_NO_WAIT);
 23f4fc4:	f005 bbca 	b.w	23fa75c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
 23f4fc8:	023fefe2 	.word	0x023fefe2
 23f4fcc:	1007ae20 	.word	0x1007ae20
 23f4fd0:	1007ad6c 	.word	0x1007ad6c

023f4fd4 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv>:
{
 23f4fd4:	b510      	push	{r4, lr}
 23f4fd6:	4604      	mov	r4, r0
    if(Time.now() > _lastCheckTime + CHECK_STATUS_SECONDS) {
 23f4fd8:	f006 f863 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
 23f4fdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 23f4fde:	333c      	adds	r3, #60	; 0x3c
 23f4fe0:	4298      	cmp	r0, r3
 23f4fe2:	dd1b      	ble.n	23f501c <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x48>
        _lastCheckTime = Time.now();
 23f4fe4:	f006 f85d 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
 23f4fe8:	6420      	str	r0, [r4, #64]	; 0x40
        if(WiFi.ready()) {
 23f4fea:	481e      	ldr	r0, [pc, #120]	; (23f5064 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x90>)
 23f4fec:	f7ff fefa 	bl	23f4de4 <_ZN5spark9WiFiClass5readyEv>
 23f4ff0:	b390      	cbz	r0, 23f5058 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x84>
            if(_mqtt->isConnected()) {
 23f4ff2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f4ff4:	f002 fa56 	bl	23f74a4 <_ZN4MQTT11isConnectedEv>
 23f4ff8:	b328      	cbz	r0, 23f5046 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x72>
                if(_mqttSubscribed == false) {
 23f4ffa:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 23f4ffe:	b973      	cbnz	r3, 23f501e <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x4a>
                    Log.info("mqtt connected, subscribing...");
 23f5000:	4919      	ldr	r1, [pc, #100]	; (23f5068 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x94>)
 23f5002:	481a      	ldr	r0, [pc, #104]	; (23f506c <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x98>)
 23f5004:	f7ff fb78 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
                    _lastMQTTtime = Time.now();
 23f5008:	f006 f84b 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
                    _mqtt->subscribe("#");
 23f500c:	4918      	ldr	r1, [pc, #96]	; (23f5070 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x9c>)
                    _lastMQTTtime = Time.now();
 23f500e:	63a0      	str	r0, [r4, #56]	; 0x38
                    _mqtt->subscribe("#");
 23f5010:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f5012:	f002 fd42 	bl	23f7a9a <_ZN4MQTT9subscribeEPKc>
                    _mqttSubscribed = true;
 23f5016:	2301      	movs	r3, #1
 23f5018:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
}
 23f501c:	bd10      	pop	{r4, pc}
                    if(Time.now() > _lastMQTTtime + MQTT_TIMEOUT_SECONDS) {
 23f501e:	f006 f840 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
 23f5022:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23f5024:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 23f5028:	4298      	cmp	r0, r3
 23f502a:	ddf7      	ble.n	23f501c <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x48>
                        Log.error("MQTT Timeout.");
 23f502c:	4911      	ldr	r1, [pc, #68]	; (23f5074 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0xa0>)
 23f502e:	480f      	ldr	r0, [pc, #60]	; (23f506c <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x98>)
 23f5030:	f7ff fb54 	bl	23f46dc <_ZNK5spark6Logger5errorEPKcz>

#ifdef __cplusplus
}
#endif

static inline void delay(std::chrono::milliseconds ms) { ::delay(ms.count()); }
 23f5034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23f5038:	f003 fb98 	bl	23f876c <delay>
                        doReboot();
 23f503c:	4620      	mov	r0, r4
}
 23f503e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                        doReboot();
 23f5042:	f7ff bfb1 	b.w	23f4fa8 <_ZN11MQTTManager8doRebootEv>
                Log.info("MQTT not connected, retry...");
 23f5046:	4809      	ldr	r0, [pc, #36]	; (23f506c <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x98>)
 23f5048:	490b      	ldr	r1, [pc, #44]	; (23f5078 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0xa4>)
 23f504a:	f7ff fb55 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
                connectMQTT();
 23f504e:	4620      	mov	r0, r4
}
 23f5050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                connectMQTT();
 23f5054:	f7ff bedc 	b.w	23f4e10 <_ZN11MQTTManager11connectMQTTEv>
            Log.info("WiFi NOT ready");
 23f5058:	4908      	ldr	r1, [pc, #32]	; (23f507c <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0xa8>)
 23f505a:	4804      	ldr	r0, [pc, #16]	; (23f506c <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x98>)
 23f505c:	f7ff fb4c 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
}
 23f5060:	e7dc      	b.n	23f501c <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv+0x48>
 23f5062:	bf00      	nop
 23f5064:	1007aed0 	.word	0x1007aed0
 23f5068:	023fefef 	.word	0x023fefef
 23f506c:	1007ae20 	.word	0x1007ae20
 23f5070:	023ff00e 	.word	0x023ff00e
 23f5074:	023ff010 	.word	0x023ff010
 23f5078:	023ff01e 	.word	0x023ff01e
 23f507c:	023ff03b 	.word	0x023ff03b

023f5080 <_ZN11MQTTManager7publishE6StringS0_b>:

/**
 * Send MQTT data
 */
bool MQTTManager::publish(String topic, String message, bool retain) {
 23f5080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f5084:	4607      	mov	r7, r0
 23f5086:	b088      	sub	sp, #32
    if(_mqtt->isConnected() && WiFi.ready()) {
 23f5088:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool MQTTManager::publish(String topic, String message, bool retain) {
 23f508a:	460e      	mov	r6, r1
 23f508c:	4615      	mov	r5, r2
 23f508e:	4698      	mov	r8, r3
    if(_mqtt->isConnected() && WiFi.ready()) {
 23f5090:	f002 fa08 	bl	23f74a4 <_ZN4MQTT11isConnectedEv>
 23f5094:	b198      	cbz	r0, 23f50be <_ZN11MQTTManager7publishE6StringS0_b+0x3e>
 23f5096:	4815      	ldr	r0, [pc, #84]	; (23f50ec <_ZN11MQTTManager7publishE6StringS0_b+0x6c>)
 23f5098:	f7ff fea4 	bl	23f4de4 <_ZN5spark9WiFiClass5readyEv>
 23f509c:	4604      	mov	r4, r0
 23f509e:	b170      	cbz	r0, 23f50be <_ZN11MQTTManager7publishE6StringS0_b+0x3e>
        _mqtt->publish(topic, (const uint8_t*)message.c_str(), message.length(), retain, retain ? MQTT::QOS1 : MQTT::QOS0);
 23f50a0:	2300      	movs	r3, #0
 23f50a2:	682a      	ldr	r2, [r5, #0]
 23f50a4:	e9cd 8301 	strd	r8, r3, [sp, #4]
 23f50a8:	6831      	ldr	r1, [r6, #0]
 23f50aa:	68ab      	ldr	r3, [r5, #8]
 23f50ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 23f50ae:	f8cd 8000 	str.w	r8, [sp]
 23f50b2:	f002 fb53 	bl	23f775c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
        return true;
    } else {
        Log.warn("publish while MQTT not connected: " + topic + ", " + message);
    }
    return false;
}
 23f50b6:	4620      	mov	r0, r4
 23f50b8:	b008      	add	sp, #32
 23f50ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    StringSumHelper(const char *p) : String(p) {}
 23f50be:	490c      	ldr	r1, [pc, #48]	; (23f50f0 <_ZN11MQTTManager7publishE6StringS0_b+0x70>)
 23f50c0:	a804      	add	r0, sp, #16
 23f50c2:	f005 f8fc 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
        Log.warn("publish while MQTT not connected: " + topic + ", " + message);
 23f50c6:	4631      	mov	r1, r6
 23f50c8:	a804      	add	r0, sp, #16
 23f50ca:	f005 f9ef 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f50ce:	4909      	ldr	r1, [pc, #36]	; (23f50f4 <_ZN11MQTTManager7publishE6StringS0_b+0x74>)
 23f50d0:	f005 f9f8 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f50d4:	4629      	mov	r1, r5
 23f50d6:	f005 f9e9 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f50da:	6801      	ldr	r1, [r0, #0]
 23f50dc:	4806      	ldr	r0, [pc, #24]	; (23f50f8 <_ZN11MQTTManager7publishE6StringS0_b+0x78>)
 23f50de:	f7ff fe86 	bl	23f4dee <_ZNK5spark6Logger4warnEPKcz>
class StringSumHelper : public String
 23f50e2:	a804      	add	r0, sp, #16
 23f50e4:	f005 f8a0 	bl	23fa228 <_ZN6StringD1Ev>
    return false;
 23f50e8:	2400      	movs	r4, #0
 23f50ea:	e7e4      	b.n	23f50b6 <_ZN11MQTTManager7publishE6StringS0_b+0x36>
 23f50ec:	1007aed0 	.word	0x1007aed0
 23f50f0:	023ff04a 	.word	0x023ff04a
 23f50f4:	023ff06d 	.word	0x023ff06d
 23f50f8:	1007ae20 	.word	0x1007ae20

023f50fc <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv>:
void MQTTManager::sendAliveMsgPeriodically() {
 23f50fc:	b510      	push	{r4, lr}
 23f50fe:	4604      	mov	r4, r0
 23f5100:	b092      	sub	sp, #72	; 0x48
    if(Time.now() > _lastAliveTime + MQTT_ALIVE_SECONDS) {
 23f5102:	f005 ffce 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
 23f5106:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f5108:	33b4      	adds	r3, #180	; 0xb4
 23f510a:	4298      	cmp	r0, r3
 23f510c:	dd32      	ble.n	23f5174 <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv+0x78>
        _lastAliveTime = Time.now();
 23f510e:	f005 ffc8 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
 23f5112:	63e0      	str	r0, [r4, #60]	; 0x3c
        String time = Time.format(Time.now(), "%a %H:%M");
 23f5114:	f005 ffc5 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
 23f5118:	4b17      	ldr	r3, [pc, #92]	; (23f5178 <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv+0x7c>)
 23f511a:	4602      	mov	r2, r0
 23f511c:	4917      	ldr	r1, [pc, #92]	; (23f517c <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv+0x80>)
 23f511e:	9300      	str	r3, [sp, #0]
 23f5120:	17c3      	asrs	r3, r0, #31
 23f5122:	a802      	add	r0, sp, #8
 23f5124:	f005 ff5e 	bl	23fafe4 <_ZN9TimeClass6formatExPKc>
    StringSumHelper(const String &s) : String(s) {}
 23f5128:	4915      	ldr	r1, [pc, #84]	; (23f5180 <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv+0x84>)
 23f512a:	a80a      	add	r0, sp, #40	; 0x28
 23f512c:	f005 f913 	bl	23fa356 <_ZN6StringC1ERKS_>
        publish(kPublishName+"/alive/"+_controllerName, time, false);
 23f5130:	4914      	ldr	r1, [pc, #80]	; (23f5184 <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv+0x88>)
 23f5132:	a80a      	add	r0, sp, #40	; 0x28
 23f5134:	f005 f9c6 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f5138:	f104 0128 	add.w	r1, r4, #40	; 0x28
 23f513c:	f005 f9b6 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f5140:	4601      	mov	r1, r0
 23f5142:	a806      	add	r0, sp, #24
 23f5144:	f005 f907 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f5148:	a902      	add	r1, sp, #8
 23f514a:	a80e      	add	r0, sp, #56	; 0x38
 23f514c:	f005 f903 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f5150:	2300      	movs	r3, #0
 23f5152:	aa0e      	add	r2, sp, #56	; 0x38
 23f5154:	a906      	add	r1, sp, #24
 23f5156:	4620      	mov	r0, r4
 23f5158:	f7ff ff92 	bl	23f5080 <_ZN11MQTTManager7publishE6StringS0_b>
 23f515c:	a80e      	add	r0, sp, #56	; 0x38
 23f515e:	f005 f863 	bl	23fa228 <_ZN6StringD1Ev>
 23f5162:	a806      	add	r0, sp, #24
 23f5164:	f005 f860 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f5168:	a80a      	add	r0, sp, #40	; 0x28
 23f516a:	f005 f85d 	bl	23fa228 <_ZN6StringD1Ev>
        String time = Time.format(Time.now(), "%a %H:%M");
 23f516e:	a802      	add	r0, sp, #8
 23f5170:	f005 f85a 	bl	23fa228 <_ZN6StringD1Ev>
}
 23f5174:	b012      	add	sp, #72	; 0x48
 23f5176:	bd10      	pop	{r4, pc}
 23f5178:	023ff070 	.word	0x023ff070
 23f517c:	1007ae74 	.word	0x1007ae74
 23f5180:	1007ad5c 	.word	0x1007ad5c
 23f5184:	023ff079 	.word	0x023ff079

023f5188 <_ZN11MQTTManager7sendAckE6StringS0_S0_>:
            }
        }
    }
}

void MQTTManager::sendAck(String deviceName, String command, String message) {
 23f5188:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f518a:	460f      	mov	r7, r1
 23f518c:	4616      	mov	r6, r2
 23f518e:	b08d      	sub	sp, #52	; 0x34
 23f5190:	4604      	mov	r4, r0
    StringSumHelper(const String &s) : String(s) {}
 23f5192:	4915      	ldr	r1, [pc, #84]	; (23f51e8 <_ZN11MQTTManager7sendAckE6StringS0_S0_+0x60>)
 23f5194:	4668      	mov	r0, sp
 23f5196:	461d      	mov	r5, r3
 23f5198:	f005 f8dd 	bl	23fa356 <_ZN6StringC1ERKS_>
    publish(kPublishName + "/ack/" + deviceName + "/" + command, message);
 23f519c:	4668      	mov	r0, sp
 23f519e:	4913      	ldr	r1, [pc, #76]	; (23f51ec <_ZN11MQTTManager7sendAckE6StringS0_S0_+0x64>)
 23f51a0:	f005 f990 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f51a4:	4639      	mov	r1, r7
 23f51a6:	f005 f981 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f51aa:	4911      	ldr	r1, [pc, #68]	; (23f51f0 <_ZN11MQTTManager7sendAckE6StringS0_S0_+0x68>)
 23f51ac:	f005 f98a 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f51b0:	4631      	mov	r1, r6
 23f51b2:	f005 f97b 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f51b6:	4601      	mov	r1, r0
 23f51b8:	a804      	add	r0, sp, #16
 23f51ba:	f005 f8cc 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f51be:	4629      	mov	r1, r5
 23f51c0:	a808      	add	r0, sp, #32
 23f51c2:	f005 f8c8 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f51c6:	2300      	movs	r3, #0
 23f51c8:	aa08      	add	r2, sp, #32
 23f51ca:	a904      	add	r1, sp, #16
 23f51cc:	4620      	mov	r0, r4
 23f51ce:	f7ff ff57 	bl	23f5080 <_ZN11MQTTManager7publishE6StringS0_b>
 23f51d2:	a808      	add	r0, sp, #32
 23f51d4:	f005 f828 	bl	23fa228 <_ZN6StringD1Ev>
 23f51d8:	a804      	add	r0, sp, #16
 23f51da:	f005 f825 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f51de:	4668      	mov	r0, sp
 23f51e0:	f005 f822 	bl	23fa228 <_ZN6StringD1Ev>
}
 23f51e4:	b00d      	add	sp, #52	; 0x34
 23f51e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f51e8:	1007ad5c 	.word	0x1007ad5c
 23f51ec:	023ff081 	.word	0x023ff081
 23f51f0:	023ff5ce 	.word	0x023ff5ce

023f51f4 <_ZN11MQTTManager13parseLogLevelE6String>:
    String deviceName = subtopic.substring(slashIndex+1);
    
    return deviceName;
}

void MQTTManager::parseLogLevel(String lcMessage) {
 23f51f4:	b538      	push	{r3, r4, r5, lr}
 23f51f6:	460c      	mov	r4, r1
 23f51f8:	4605      	mov	r5, r0
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f51fa:	4919      	ldr	r1, [pc, #100]	; (23f5260 <_ZN11MQTTManager13parseLogLevelE6String+0x6c>)
 23f51fc:	4620      	mov	r0, r4
 23f51fe:	f005 f998 	bl	23fa532 <_ZNK6String6equalsEPKc>
    LogLevel level = LOG_LEVEL_WARN;
    if (lcMessage == "none") level = LOG_LEVEL_NONE;         // 70
 23f5202:	bb30      	cbnz	r0, 23f5252 <_ZN11MQTTManager13parseLogLevelE6String+0x5e>
 23f5204:	4620      	mov	r0, r4
 23f5206:	4917      	ldr	r1, [pc, #92]	; (23f5264 <_ZN11MQTTManager13parseLogLevelE6String+0x70>)
 23f5208:	f005 f993 	bl	23fa532 <_ZNK6String6equalsEPKc>
    else if (lcMessage == "error") level = LOG_LEVEL_ERROR;  // 50
 23f520c:	bb18      	cbnz	r0, 23f5256 <_ZN11MQTTManager13parseLogLevelE6String+0x62>
 23f520e:	4620      	mov	r0, r4
 23f5210:	4915      	ldr	r1, [pc, #84]	; (23f5268 <_ZN11MQTTManager13parseLogLevelE6String+0x74>)
 23f5212:	f005 f98e 	bl	23fa532 <_ZNK6String6equalsEPKc>
    else if (lcMessage == "warn" || lcMessage == "warning") level = LOG_LEVEL_WARN;    // 40
 23f5216:	b118      	cbz	r0, 23f5220 <_ZN11MQTTManager13parseLogLevelE6String+0x2c>
 23f5218:	2328      	movs	r3, #40	; 0x28
    else if (lcMessage == "info") level = LOG_LEVEL_INFO;    // 30
    else if (lcMessage == "trace") level = LOG_LEVEL_TRACE;  // 1
    else if (lcMessage == "all") level = LOG_LEVEL_ALL;      // 1
    else return;
    
    _logLevel = level;
 23f521a:	f885 3020 	strb.w	r3, [r5, #32]
 23f521e:	e017      	b.n	23f5250 <_ZN11MQTTManager13parseLogLevelE6String+0x5c>
 23f5220:	4620      	mov	r0, r4
 23f5222:	4912      	ldr	r1, [pc, #72]	; (23f526c <_ZN11MQTTManager13parseLogLevelE6String+0x78>)
 23f5224:	f005 f985 	bl	23fa532 <_ZNK6String6equalsEPKc>
    else if (lcMessage == "warn" || lcMessage == "warning") level = LOG_LEVEL_WARN;    // 40
 23f5228:	2800      	cmp	r0, #0
 23f522a:	d1f5      	bne.n	23f5218 <_ZN11MQTTManager13parseLogLevelE6String+0x24>
 23f522c:	4620      	mov	r0, r4
 23f522e:	4910      	ldr	r1, [pc, #64]	; (23f5270 <_ZN11MQTTManager13parseLogLevelE6String+0x7c>)
 23f5230:	f005 f97f 	bl	23fa532 <_ZNK6String6equalsEPKc>
    else if (lcMessage == "info") level = LOG_LEVEL_INFO;    // 30
 23f5234:	b988      	cbnz	r0, 23f525a <_ZN11MQTTManager13parseLogLevelE6String+0x66>
 23f5236:	4620      	mov	r0, r4
 23f5238:	490e      	ldr	r1, [pc, #56]	; (23f5274 <_ZN11MQTTManager13parseLogLevelE6String+0x80>)
 23f523a:	f005 f97a 	bl	23fa532 <_ZNK6String6equalsEPKc>
    else if (lcMessage == "trace") level = LOG_LEVEL_TRACE;  // 1
 23f523e:	b108      	cbz	r0, 23f5244 <_ZN11MQTTManager13parseLogLevelE6String+0x50>
 23f5240:	2301      	movs	r3, #1
 23f5242:	e7ea      	b.n	23f521a <_ZN11MQTTManager13parseLogLevelE6String+0x26>
 23f5244:	4620      	mov	r0, r4
 23f5246:	490c      	ldr	r1, [pc, #48]	; (23f5278 <_ZN11MQTTManager13parseLogLevelE6String+0x84>)
 23f5248:	f005 f973 	bl	23fa532 <_ZNK6String6equalsEPKc>
    else if (lcMessage == "all") level = LOG_LEVEL_ALL;      // 1
 23f524c:	2800      	cmp	r0, #0
 23f524e:	d1f7      	bne.n	23f5240 <_ZN11MQTTManager13parseLogLevelE6String+0x4c>
}
 23f5250:	bd38      	pop	{r3, r4, r5, pc}
    if (lcMessage == "none") level = LOG_LEVEL_NONE;         // 70
 23f5252:	2346      	movs	r3, #70	; 0x46
 23f5254:	e7e1      	b.n	23f521a <_ZN11MQTTManager13parseLogLevelE6String+0x26>
    else if (lcMessage == "error") level = LOG_LEVEL_ERROR;  // 50
 23f5256:	2332      	movs	r3, #50	; 0x32
 23f5258:	e7df      	b.n	23f521a <_ZN11MQTTManager13parseLogLevelE6String+0x26>
    else if (lcMessage == "info") level = LOG_LEVEL_INFO;    // 30
 23f525a:	231e      	movs	r3, #30
 23f525c:	e7dd      	b.n	23f521a <_ZN11MQTTManager13parseLogLevelE6String+0x26>
 23f525e:	bf00      	nop
 23f5260:	023ff087 	.word	0x023ff087
 23f5264:	023ff08c 	.word	0x023ff08c
 23f5268:	023ff092 	.word	0x023ff092
 23f526c:	023ff097 	.word	0x023ff097
 23f5270:	023ff09f 	.word	0x023ff09f
 23f5274:	023ff0a4 	.word	0x023ff0a4
 23f5278:	023ff0aa 	.word	0x023ff0aa

023f527c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_>:
{
 23f527c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f5280:	ed2d 8b02 	vpush	{d8}
 23f5284:	4604      	mov	r4, r0
 23f5286:	4688      	mov	r8, r1
 23f5288:	4615      	mov	r5, r2
 23f528a:	2600      	movs	r6, #0
    String subtopics[5];
 23f528c:	4fb2      	ldr	r7, [pc, #712]	; (23f5558 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2dc>)
{
 23f528e:	b0aa      	sub	sp, #168	; 0xa8
    String subtopics[5];
 23f5290:	ab16      	add	r3, sp, #88	; 0x58
 23f5292:	1998      	adds	r0, r3, r6
 23f5294:	4639      	mov	r1, r7
 23f5296:	3610      	adds	r6, #16
 23f5298:	f005 f811 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f529c:	2e50      	cmp	r6, #80	; 0x50
 23f529e:	d1f7      	bne.n	23f5290 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x14>
    int numTopics = 0;
 23f52a0:	2600      	movs	r6, #0
    int end = lcTopic.indexOf('/');
 23f52a2:	212f      	movs	r1, #47	; 0x2f
 23f52a4:	4640      	mov	r0, r8
 23f52a6:	f005 f9a9 	bl	23fa5fc <_ZNK6String7indexOfEc>
    int start = 0;
 23f52aa:	4632      	mov	r2, r6
    if(end > 0) { // Might be -1 if only 1 subtopic
 23f52ac:	1e07      	subs	r7, r0, #0
 23f52ae:	dd1a      	ble.n	23f52e6 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x6a>
            subtopics[numTopics] = lcTopic.substring(start, end);
 23f52b0:	463b      	mov	r3, r7
 23f52b2:	4641      	mov	r1, r8
 23f52b4:	a812      	add	r0, sp, #72	; 0x48
 23f52b6:	f005 f9a5 	bl	23fa604 <_ZNK6String9substringEjj>
 23f52ba:	ab16      	add	r3, sp, #88	; 0x58
 23f52bc:	eb03 1006 	add.w	r0, r3, r6, lsl #4
 23f52c0:	a912      	add	r1, sp, #72	; 0x48
 23f52c2:	f005 f853 	bl	23fa36c <_ZN6StringaSEOS_>
 23f52c6:	a812      	add	r0, sp, #72	; 0x48
 23f52c8:	f004 ffae 	bl	23fa228 <_ZN6StringD1Ev>
            start = end+1;
 23f52cc:	1c7a      	adds	r2, r7, #1
            end = lcTopic.indexOf('/', start);
 23f52ce:	212f      	movs	r1, #47	; 0x2f
 23f52d0:	4640      	mov	r0, r8
 23f52d2:	9201      	str	r2, [sp, #4]
 23f52d4:	f005 f984 	bl	23fa5e0 <_ZNK6String7indexOfEcj>
            numTopics++;
 23f52d8:	3601      	adds	r6, #1
        } while(numTopics < 4 && end > 0);
 23f52da:	2e04      	cmp	r6, #4
            end = lcTopic.indexOf('/', start);
 23f52dc:	4607      	mov	r7, r0
        } while(numTopics < 4 && end > 0);
 23f52de:	9a01      	ldr	r2, [sp, #4]
 23f52e0:	d001      	beq.n	23f52e6 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x6a>
 23f52e2:	2800      	cmp	r0, #0
 23f52e4:	e7e3      	b.n	23f52ae <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x32>
    subtopics[numTopics++] = lcTopic.substring(start);  // Last one
 23f52e6:	4641      	mov	r1, r8
 23f52e8:	a812      	add	r0, sp, #72	; 0x48
 23f52ea:	f005 f9ad 	bl	23fa648 <_ZNK6String9substringEj>
 23f52ee:	ab16      	add	r3, sp, #88	; 0x58
 23f52f0:	a912      	add	r1, sp, #72	; 0x48
 23f52f2:	eb03 1006 	add.w	r0, r3, r6, lsl #4
 23f52f6:	f005 f839 	bl	23fa36c <_ZN6StringaSEOS_>
 23f52fa:	a812      	add	r0, sp, #72	; 0x48
 23f52fc:	f004 ff94 	bl	23fa228 <_ZN6StringD1Ev>
 23f5300:	4996      	ldr	r1, [pc, #600]	; (23f555c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2e0>)
 23f5302:	a816      	add	r0, sp, #88	; 0x58
 23f5304:	f005 f915 	bl	23fa532 <_ZNK6String6equalsEPKc>
        if(subtopics[0] == "ack") {                         // patriot/ack/<device>/<command>
 23f5308:	2800      	cmp	r0, #0
 23f530a:	d14b      	bne.n	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f530c:	4994      	ldr	r1, [pc, #592]	; (23f5560 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2e4>)
 23f530e:	a816      	add	r0, sp, #88	; 0x58
    subtopics[numTopics++] = lcTopic.substring(start);  // Last one
 23f5310:	3601      	adds	r6, #1
 23f5312:	f005 f90e 	bl	23fa532 <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "alive" && numTopics > 1) {                // patriot/alive/<controller>
 23f5316:	b188      	cbz	r0, 23f533c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0xc0>
 23f5318:	2e01      	cmp	r6, #1
 23f531a:	d011      	beq.n	23f5340 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0xc4>
 23f531c:	4991      	ldr	r1, [pc, #580]	; (23f5564 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2e8>)
 23f531e:	a81a      	add	r0, sp, #104	; 0x68
 23f5320:	f005 f907 	bl	23fa532 <_ZNK6String6equalsEPKc>
            if(subtopics[1] == "frontpanel") {
 23f5324:	2800      	cmp	r0, #0
 23f5326:	d13a      	bne.n	23f539e <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x122>
 23f5328:	498f      	ldr	r1, [pc, #572]	; (23f5568 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2ec>)
 23f532a:	a81a      	add	r0, sp, #104	; 0x68
 23f532c:	f005 f901 	bl	23fa532 <_ZNK6String6equalsEPKc>
            } else if(subtopics[1] == "leftslide") {
 23f5330:	2800      	cmp	r0, #0
 23f5332:	d044      	beq.n	23f53be <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x142>
                _lastAliveLeftSlide = Time.now();
 23f5334:	f005 feb5 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
 23f5338:	6560      	str	r0, [r4, #84]	; 0x54
 23f533a:	e033      	b.n	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
        } else if(numTopics > 1 && subtopics[1] == "brightness") {           // patriot/<device>/brightness value
 23f533c:	2e01      	cmp	r6, #1
 23f533e:	d148      	bne.n	23f53d2 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x156>
 23f5340:	498a      	ldr	r1, [pc, #552]	; (23f556c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2f0>)
 23f5342:	a816      	add	r0, sp, #88	; 0x58
 23f5344:	f005 f8f5 	bl	23fa532 <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "latlong") {                                  // patriot/latlong lat,long
 23f5348:	2800      	cmp	r0, #0
 23f534a:	f040 8083 	bne.w	23f5454 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x1d8>
 23f534e:	4988      	ldr	r1, [pc, #544]	; (23f5570 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2f4>)
 23f5350:	a816      	add	r0, sp, #88	; 0x58
 23f5352:	f005 f8ee 	bl	23fa532 <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "loglevel") {
 23f5356:	2800      	cmp	r0, #0
 23f5358:	f000 8129 	beq.w	23f55ae <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x332>
            if(numTopics == 1 || subtopics[1] == _controllerName || subtopics[1] == "all" ) {
 23f535c:	2e01      	cmp	r6, #1
                Log.info(_controllerName + ": hold " + subtopics[0]);
 23f535e:	f104 0728 	add.w	r7, r4, #40	; 0x28
            if(numTopics == 1 || subtopics[1] == _controllerName || subtopics[1] == "all" ) {
 23f5362:	f040 8115 	bne.w	23f5590 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x314>
    StringSumHelper(const String &s) : String(s) {}
 23f5366:	4639      	mov	r1, r7
 23f5368:	a812      	add	r0, sp, #72	; 0x48
 23f536a:	f004 fff4 	bl	23fa356 <_ZN6StringC1ERKS_>
                Log.warn(_controllerName + " setting logLevel = " + lcMessage);
 23f536e:	4981      	ldr	r1, [pc, #516]	; (23f5574 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2f8>)
 23f5370:	a812      	add	r0, sp, #72	; 0x48
 23f5372:	f005 f8a7 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f5376:	4629      	mov	r1, r5
 23f5378:	f005 f898 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f537c:	6801      	ldr	r1, [r0, #0]
 23f537e:	487e      	ldr	r0, [pc, #504]	; (23f5578 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2fc>)
 23f5380:	f7ff fd35 	bl	23f4dee <_ZNK5spark6Logger4warnEPKcz>
class StringSumHelper : public String
 23f5384:	a812      	add	r0, sp, #72	; 0x48
 23f5386:	f004 ff4f 	bl	23fa228 <_ZN6StringD1Ev>
                parseLogLevel(lcMessage);
 23f538a:	4629      	mov	r1, r5
 23f538c:	a812      	add	r0, sp, #72	; 0x48
 23f538e:	f004 ffe2 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f5392:	4620      	mov	r0, r4
 23f5394:	a912      	add	r1, sp, #72	; 0x48
 23f5396:	f7ff ff2d 	bl	23f51f4 <_ZN11MQTTManager13parseLogLevelE6String>
 23f539a:	a812      	add	r0, sp, #72	; 0x48
 23f539c:	e057      	b.n	23f544e <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x1d2>
                _lastAliveFrontPanel = Time.now();
 23f539e:	f005 fe80 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
 23f53a2:	6520      	str	r0, [r4, #80]	; 0x50
                else if(lcMessage == "off" || lcMessage == "false") value = 0;
 23f53a4:	2404      	movs	r4, #4
    String subtopics[5];
 23f53a6:	ab16      	add	r3, sp, #88	; 0x58
 23f53a8:	eb03 1004 	add.w	r0, r3, r4, lsl #4
 23f53ac:	f004 ff3c 	bl	23fa228 <_ZN6StringD1Ev>
 23f53b0:	3c01      	subs	r4, #1
 23f53b2:	d2f8      	bcs.n	23f53a6 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x12a>
}
 23f53b4:	b02a      	add	sp, #168	; 0xa8
 23f53b6:	ecbd 8b02 	vpop	{d8}
 23f53ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f53be:	496f      	ldr	r1, [pc, #444]	; (23f557c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x300>)
 23f53c0:	a81a      	add	r0, sp, #104	; 0x68
 23f53c2:	f005 f8b6 	bl	23fa532 <_ZNK6String6equalsEPKc>
            } else if(subtopics[1] == "rearpanel") {
 23f53c6:	2800      	cmp	r0, #0
 23f53c8:	d0ec      	beq.n	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
                _lastAliveRearPanel = Time.now();
 23f53ca:	f005 fe6a 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
 23f53ce:	65a0      	str	r0, [r4, #88]	; 0x58
 23f53d0:	e7e8      	b.n	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f53d2:	496b      	ldr	r1, [pc, #428]	; (23f5580 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x304>)
 23f53d4:	a81a      	add	r0, sp, #104	; 0x68
 23f53d6:	f005 f8ac 	bl	23fa532 <_ZNK6String6equalsEPKc>
        } else if(numTopics > 1 && subtopics[1] == "brightness") {           // patriot/<device>/brightness value
 23f53da:	2800      	cmp	r0, #0
 23f53dc:	f000 825e 	beq.w	23f589c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x620>
            int value = lcMessage.toInt();
 23f53e0:	4628      	mov	r0, r5
 23f53e2:	f005 f96f 	bl	23fa6c4 <_ZNK6String5toIntEv>
            String deviceName = subtopics[0];
 23f53e6:	a916      	add	r1, sp, #88	; 0x58
            int value = lcMessage.toInt();
 23f53e8:	4607      	mov	r7, r0
            String deviceName = subtopics[0];
 23f53ea:	a806      	add	r0, sp, #24
 23f53ec:	f004 ffb3 	bl	23fa356 <_ZN6StringC1ERKS_>
            Device *device = Device::get(deviceName);
 23f53f0:	a906      	add	r1, sp, #24
 23f53f2:	a812      	add	r0, sp, #72	; 0x48
 23f53f4:	f004 ffaf 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f53f8:	a812      	add	r0, sp, #72	; 0x48
 23f53fa:	f001 fb47 	bl	23f6a8c <_ZN6Device3getE6String>
 23f53fe:	4606      	mov	r6, r0
 23f5400:	a812      	add	r0, sp, #72	; 0x48
 23f5402:	f004 ff11 	bl	23fa228 <_ZN6StringD1Ev>
            if( device != NULL && value > 0) {
 23f5406:	b30e      	cbz	r6, 23f544c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x1d0>
 23f5408:	2f00      	cmp	r7, #0
 23f540a:	dd1f      	ble.n	23f544c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x1d0>
                device->setBrightness(value);
 23f540c:	6833      	ldr	r3, [r6, #0]
 23f540e:	4639      	mov	r1, r7
 23f5410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f5412:	4630      	mov	r0, r6
 23f5414:	4798      	blx	r3
                sendAck(deviceName, "brightness", lcMessage);
 23f5416:	a906      	add	r1, sp, #24
 23f5418:	a80a      	add	r0, sp, #40	; 0x28
 23f541a:	f004 ff9c 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f541e:	4958      	ldr	r1, [pc, #352]	; (23f5580 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x304>)
 23f5420:	a80e      	add	r0, sp, #56	; 0x38
 23f5422:	f004 ff4c 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f5426:	4629      	mov	r1, r5
 23f5428:	a812      	add	r0, sp, #72	; 0x48
 23f542a:	f004 ff94 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f542e:	ab12      	add	r3, sp, #72	; 0x48
 23f5430:	aa0e      	add	r2, sp, #56	; 0x38
 23f5432:	a90a      	add	r1, sp, #40	; 0x28
 23f5434:	4620      	mov	r0, r4
 23f5436:	f7ff fea7 	bl	23f5188 <_ZN11MQTTManager7sendAckE6StringS0_S0_>
 23f543a:	a812      	add	r0, sp, #72	; 0x48
 23f543c:	f004 fef4 	bl	23fa228 <_ZN6StringD1Ev>
 23f5440:	a80e      	add	r0, sp, #56	; 0x38
 23f5442:	f004 fef1 	bl	23fa228 <_ZN6StringD1Ev>
 23f5446:	a80a      	add	r0, sp, #40	; 0x28
 23f5448:	f004 feee 	bl	23fa228 <_ZN6StringD1Ev>
            String deviceName = subtopics[0];
 23f544c:	a806      	add	r0, sp, #24
            String latString = lcMessage.substring(0, commaIndex-1);
 23f544e:	f004 feeb 	bl	23fa228 <_ZN6StringD1Ev>
 23f5452:	e7a7      	b.n	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
            int commaIndex = lcMessage.indexOf(',');
 23f5454:	212c      	movs	r1, #44	; 0x2c
 23f5456:	4628      	mov	r0, r5
 23f5458:	f005 f8d0 	bl	23fa5fc <_ZNK6String7indexOfEc>
            if(commaIndex < 0) return;
 23f545c:	1e04      	subs	r4, r0, #0
 23f545e:	dba1      	blt.n	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
            String latString = lcMessage.substring(0, commaIndex-1);
 23f5460:	1e63      	subs	r3, r4, #1
 23f5462:	2200      	movs	r2, #0
 23f5464:	4629      	mov	r1, r5
 23f5466:	a802      	add	r0, sp, #8
 23f5468:	f005 f8cc 	bl	23fa604 <_ZNK6String9substringEjj>
            String lonString = lcMessage.substring(commaIndex+1);
 23f546c:	1c62      	adds	r2, r4, #1
 23f546e:	4629      	mov	r1, r5
 23f5470:	a806      	add	r0, sp, #24
 23f5472:	f005 f8e9 	bl	23fa648 <_ZNK6String9substringEj>
            float latitude = latString.toFloat();
 23f5476:	a802      	add	r0, sp, #8
 23f5478:	f005 f92a 	bl	23fa6d0 <_ZNK6String7toFloatEv>
            float longitude = lonString.toFloat();
 23f547c:	a806      	add	r0, sp, #24
            float latitude = latString.toFloat();
 23f547e:	eeb0 8a40 	vmov.f32	s16, s0
            float longitude = lonString.toFloat();
 23f5482:	f005 f925 	bl	23fa6d0 <_ZNK6String7toFloatEv>
    StringSumHelper(const char *p) : String(p) {}
 23f5486:	493f      	ldr	r1, [pc, #252]	; (23f5584 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x308>)
 23f5488:	a80e      	add	r0, sp, #56	; 0x38
 23f548a:	eef0 8a40 	vmov.f32	s17, s0
 23f548e:	f004 ff16 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("lat/long = " + String(latitude) + "," + String(longitude));
 23f5492:	eeb0 0a48 	vmov.f32	s0, s16
 23f5496:	2106      	movs	r1, #6
 23f5498:	a80a      	add	r0, sp, #40	; 0x28
 23f549a:	f004 ffad 	bl	23fa3f8 <_ZN6StringC1Efi>
 23f549e:	a90a      	add	r1, sp, #40	; 0x28
 23f54a0:	a80e      	add	r0, sp, #56	; 0x38
 23f54a2:	f005 f803 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f54a6:	4938      	ldr	r1, [pc, #224]	; (23f5588 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x30c>)
 23f54a8:	f005 f80c 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f54ac:	4604      	mov	r4, r0
 23f54ae:	eeb0 0a68 	vmov.f32	s0, s17
 23f54b2:	2106      	movs	r1, #6
 23f54b4:	a812      	add	r0, sp, #72	; 0x48
 23f54b6:	f004 ff9f 	bl	23fa3f8 <_ZN6StringC1Efi>
 23f54ba:	a912      	add	r1, sp, #72	; 0x48
 23f54bc:	4620      	mov	r0, r4
 23f54be:	f004 fff5 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f54c2:	6801      	ldr	r1, [r0, #0]
 23f54c4:	482c      	ldr	r0, [pc, #176]	; (23f5578 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2fc>)
 23f54c6:	f7ff f917 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
 23f54ca:	a812      	add	r0, sp, #72	; 0x48
 23f54cc:	f004 feac 	bl	23fa228 <_ZN6StringD1Ev>
 23f54d0:	a80a      	add	r0, sp, #40	; 0x28
 23f54d2:	f004 fea9 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f54d6:	a80e      	add	r0, sp, #56	; 0x38
 23f54d8:	f004 fea6 	bl	23fa228 <_ZN6StringD1Ev>
            if(latitude != 0 && longitude != 0) {
 23f54dc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 23f54e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f54e4:	d033      	beq.n	23f554e <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2d2>
 23f54e6:	eef5 8a40 	vcmp.f32	s17, #0.0
 23f54ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f54ee:	d02e      	beq.n	23f554e <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2d2>
    StringSumHelper(const char *p) : String(p) {}
 23f54f0:	4926      	ldr	r1, [pc, #152]	; (23f558c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x310>)
 23f54f2:	a80e      	add	r0, sp, #56	; 0x38
 23f54f4:	f004 fee3 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
                Log.trace("Setting lat/long: " + String(latitude) + "," + String(longitude));
 23f54f8:	eeb0 0a48 	vmov.f32	s0, s16
 23f54fc:	2106      	movs	r1, #6
 23f54fe:	a80a      	add	r0, sp, #40	; 0x28
 23f5500:	f004 ff7a 	bl	23fa3f8 <_ZN6StringC1Efi>
 23f5504:	a90a      	add	r1, sp, #40	; 0x28
 23f5506:	a80e      	add	r0, sp, #56	; 0x38
 23f5508:	f004 ffd0 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f550c:	491e      	ldr	r1, [pc, #120]	; (23f5588 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x30c>)
 23f550e:	f004 ffd9 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f5512:	4604      	mov	r4, r0
 23f5514:	eeb0 0a68 	vmov.f32	s0, s17
 23f5518:	2106      	movs	r1, #6
 23f551a:	a812      	add	r0, sp, #72	; 0x48
 23f551c:	f004 ff6c 	bl	23fa3f8 <_ZN6StringC1Efi>
 23f5520:	a912      	add	r1, sp, #72	; 0x48
 23f5522:	4620      	mov	r0, r4
 23f5524:	f004 ffc2 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f5528:	6801      	ldr	r1, [r0, #0]
 23f552a:	4813      	ldr	r0, [pc, #76]	; (23f5578 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x2fc>)
 23f552c:	f7ff f8f2 	bl	23f4714 <_ZNK5spark6Logger5traceEPKcz>
 23f5530:	a812      	add	r0, sp, #72	; 0x48
 23f5532:	f004 fe79 	bl	23fa228 <_ZN6StringD1Ev>
 23f5536:	a80a      	add	r0, sp, #40	; 0x28
 23f5538:	f004 fe76 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f553c:	a80e      	add	r0, sp, #56	; 0x38
 23f553e:	f004 fe73 	bl	23fa228 <_ZN6StringD1Ev>
                IoT::setLatLong(latitude,longitude);
 23f5542:	eef0 0a68 	vmov.f32	s1, s17
 23f5546:	eeb0 0a48 	vmov.f32	s0, s16
 23f554a:	f7ff fa53 	bl	23f49f4 <_ZN3IoT10setLatLongEff>
            String lonString = lcMessage.substring(commaIndex+1);
 23f554e:	a806      	add	r0, sp, #24
 23f5550:	f004 fe6a 	bl	23fa228 <_ZN6StringD1Ev>
            String latString = lcMessage.substring(0, commaIndex-1);
 23f5554:	a802      	add	r0, sp, #8
 23f5556:	e77a      	b.n	23f544e <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x1d2>
 23f5558:	023ff87d 	.word	0x023ff87d
 23f555c:	023ff0ae 	.word	0x023ff0ae
 23f5560:	023ff0b2 	.word	0x023ff0b2
 23f5564:	023ff0b8 	.word	0x023ff0b8
 23f5568:	023ff0c3 	.word	0x023ff0c3
 23f556c:	023ff0e2 	.word	0x023ff0e2
 23f5570:	023ff115 	.word	0x023ff115
 23f5574:	023ff11e 	.word	0x023ff11e
 23f5578:	1007ae20 	.word	0x1007ae20
 23f557c:	023ff0cd 	.word	0x023ff0cd
 23f5580:	023ff0d7 	.word	0x023ff0d7
 23f5584:	023ff0f4 	.word	0x023ff0f4
 23f5588:	023ff100 	.word	0x023ff100
 23f558c:	023ff102 	.word	0x023ff102
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23f5590:	4639      	mov	r1, r7
 23f5592:	a81a      	add	r0, sp, #104	; 0x68
 23f5594:	f004 ffc0 	bl	23fa518 <_ZNK6String6equalsERKS_>
            if(numTopics == 1 || subtopics[1] == _controllerName || subtopics[1] == "all" ) {
 23f5598:	2800      	cmp	r0, #0
 23f559a:	f47f aee4 	bne.w	23f5366 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0xea>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f559e:	49aa      	ldr	r1, [pc, #680]	; (23f5848 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5cc>)
 23f55a0:	a81a      	add	r0, sp, #104	; 0x68
 23f55a2:	f004 ffc6 	bl	23fa532 <_ZNK6String6equalsEPKc>
 23f55a6:	2800      	cmp	r0, #0
 23f55a8:	f47f aedd 	bne.w	23f5366 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0xea>
 23f55ac:	e6fa      	b.n	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f55ae:	49a7      	ldr	r1, [pc, #668]	; (23f584c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d0>)
 23f55b0:	a816      	add	r0, sp, #88	; 0x58
 23f55b2:	f004 ffbe 	bl	23fa532 <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "memory") {
 23f55b6:	b308      	cbz	r0, 23f55fc <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x380>
            if(lcMessage == _controllerName || lcMessage == "all") {
 23f55b8:	3428      	adds	r4, #40	; 0x28
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23f55ba:	4621      	mov	r1, r4
 23f55bc:	4628      	mov	r0, r5
 23f55be:	f004 ffab 	bl	23fa518 <_ZNK6String6equalsERKS_>
 23f55c2:	b1a0      	cbz	r0, 23f55ee <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x372>
    StringSumHelper(const String &s) : String(s) {}
 23f55c4:	4621      	mov	r1, r4
 23f55c6:	a812      	add	r0, sp, #72	; 0x48
 23f55c8:	f004 fec5 	bl	23fa356 <_ZN6StringC1ERKS_>
                Log.info(_controllerName + ": free memory = %d", System.freeMemory());
 23f55cc:	49a0      	ldr	r1, [pc, #640]	; (23f5850 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d4>)
 23f55ce:	a812      	add	r0, sp, #72	; 0x48
 23f55d0:	f004 ff78 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
    const char * c_str() const { return buffer; }
 23f55d4:	6801      	ldr	r1, [r0, #0]
 23f55d6:	9101      	str	r1, [sp, #4]
 23f55d8:	f005 f8c7 	bl	23fa76a <_ZN11SystemClass10freeMemoryEv>
 23f55dc:	9901      	ldr	r1, [sp, #4]
 23f55de:	4602      	mov	r2, r0
 23f55e0:	489c      	ldr	r0, [pc, #624]	; (23f5854 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f55e2:	f7ff f889 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f55e6:	a812      	add	r0, sp, #72	; 0x48
 23f55e8:	f004 fe1e 	bl	23fa228 <_ZN6StringD1Ev>
 23f55ec:	e6da      	b.n	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f55ee:	4628      	mov	r0, r5
 23f55f0:	4995      	ldr	r1, [pc, #596]	; (23f5848 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5cc>)
 23f55f2:	f004 ff9e 	bl	23fa532 <_ZNK6String6equalsEPKc>
            if(lcMessage == _controllerName || lcMessage == "all") {
 23f55f6:	2800      	cmp	r0, #0
 23f55f8:	d1e4      	bne.n	23f55c4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x348>
 23f55fa:	e6d3      	b.n	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f55fc:	4996      	ldr	r1, [pc, #600]	; (23f5858 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5dc>)
 23f55fe:	a816      	add	r0, sp, #88	; 0x58
 23f5600:	f004 ff97 	bl	23fa532 <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "query") {
 23f5604:	b1f0      	cbz	r0, 23f5644 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x3c8>
            if(lcMessage == _controllerName || lcMessage == "all") {
 23f5606:	3428      	adds	r4, #40	; 0x28
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23f5608:	4621      	mov	r1, r4
 23f560a:	4628      	mov	r0, r5
 23f560c:	f004 ff84 	bl	23fa518 <_ZNK6String6equalsERKS_>
 23f5610:	b188      	cbz	r0, 23f5636 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x3ba>
    StringSumHelper(const String &s) : String(s) {}
 23f5612:	4621      	mov	r1, r4
 23f5614:	a812      	add	r0, sp, #72	; 0x48
 23f5616:	f004 fe9e 	bl	23fa356 <_ZN6StringC1ERKS_>
                Log.info(_controllerName + ": received query addressed to us");
 23f561a:	4990      	ldr	r1, [pc, #576]	; (23f585c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5e0>)
 23f561c:	a812      	add	r0, sp, #72	; 0x48
 23f561e:	f004 ff51 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f5622:	6801      	ldr	r1, [r0, #0]
 23f5624:	488b      	ldr	r0, [pc, #556]	; (23f5854 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f5626:	f7ff f867 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f562a:	a812      	add	r0, sp, #72	; 0x48
 23f562c:	f004 fdfc 	bl	23fa228 <_ZN6StringD1Ev>
                Device::publishStates();
 23f5630:	f001 fb44 	bl	23f6cbc <_ZN6Device13publishStatesEv>
 23f5634:	e6b6      	b.n	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f5636:	4628      	mov	r0, r5
 23f5638:	4983      	ldr	r1, [pc, #524]	; (23f5848 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5cc>)
 23f563a:	f004 ff7a 	bl	23fa532 <_ZNK6String6equalsEPKc>
            if(lcMessage == _controllerName || lcMessage == "all") {
 23f563e:	2800      	cmp	r0, #0
 23f5640:	d1e7      	bne.n	23f5612 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x396>
 23f5642:	e6af      	b.n	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f5644:	4986      	ldr	r1, [pc, #536]	; (23f5860 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5e4>)
 23f5646:	a816      	add	r0, sp, #88	; 0x58
 23f5648:	f004 ff73 	bl	23fa532 <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "reset") {
 23f564c:	b310      	cbz	r0, 23f5694 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x418>
            if(lcMessage == _controllerName || lcMessage == "all") {
 23f564e:	3428      	adds	r4, #40	; 0x28
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23f5650:	4621      	mov	r1, r4
 23f5652:	4628      	mov	r0, r5
 23f5654:	f004 ff60 	bl	23fa518 <_ZNK6String6equalsERKS_>
 23f5658:	b1a8      	cbz	r0, 23f5686 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x40a>
    StringSumHelper(const String &s) : String(s) {}
 23f565a:	4621      	mov	r1, r4
 23f565c:	a812      	add	r0, sp, #72	; 0x48
 23f565e:	f004 fe7a 	bl	23fa356 <_ZN6StringC1ERKS_>
                Log.info(_controllerName + ": reset addressed to us");
 23f5662:	4980      	ldr	r1, [pc, #512]	; (23f5864 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5e8>)
 23f5664:	a812      	add	r0, sp, #72	; 0x48
 23f5666:	f004 ff2d 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f566a:	6801      	ldr	r1, [r0, #0]
 23f566c:	4879      	ldr	r0, [pc, #484]	; (23f5854 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f566e:	f7ff f843 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f5672:	a812      	add	r0, sp, #72	; 0x48
 23f5674:	f004 fdd8 	bl	23fa228 <_ZN6StringD1Ev>
                Device::resetAll();
 23f5678:	f001 f9e2 	bl	23f6a40 <_ZN6Device8resetAllEv>
                System.reset(RESET_NO_WAIT);
 23f567c:	4b7a      	ldr	r3, [pc, #488]	; (23f5868 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5ec>)
 23f567e:	6818      	ldr	r0, [r3, #0]
 23f5680:	f005 f86c 	bl	23fa75c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
 23f5684:	e68e      	b.n	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f5686:	4628      	mov	r0, r5
 23f5688:	496f      	ldr	r1, [pc, #444]	; (23f5848 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5cc>)
 23f568a:	f004 ff52 	bl	23fa532 <_ZNK6String6equalsEPKc>
            if(lcMessage == _controllerName || lcMessage == "all") {
 23f568e:	2800      	cmp	r0, #0
 23f5690:	d1e3      	bne.n	23f565a <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x3de>
 23f5692:	e687      	b.n	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
        } else if(numTopics > 1 && subtopics[1] == "set") {             // patriot/<device>/set value
 23f5694:	2e01      	cmp	r6, #1
 23f5696:	d157      	bne.n	23f5748 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x4cc>
 23f5698:	4974      	ldr	r1, [pc, #464]	; (23f586c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5f0>)
 23f569a:	a816      	add	r0, sp, #88	; 0x58
 23f569c:	f004 ff49 	bl	23fa532 <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "test") {
 23f56a0:	4607      	mov	r7, r0
 23f56a2:	2800      	cmp	r0, #0
 23f56a4:	f040 80a2 	bne.w	23f57ec <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x570>
 23f56a8:	4971      	ldr	r1, [pc, #452]	; (23f5870 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5f4>)
 23f56aa:	a816      	add	r0, sp, #88	; 0x58
 23f56ac:	f004 ff41 	bl	23fa532 <_ZNK6String6equalsEPKc>
        } else if(subtopics[0] == "timezone") {
 23f56b0:	2800      	cmp	r0, #0
 23f56b2:	f43f ae77 	beq.w	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
            Log.info(_controllerName + ": received timezone = " + lcMessage);
 23f56b6:	3428      	adds	r4, #40	; 0x28
    StringSumHelper(const String &s) : String(s) {}
 23f56b8:	4621      	mov	r1, r4
 23f56ba:	a812      	add	r0, sp, #72	; 0x48
 23f56bc:	f004 fe4b 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f56c0:	496c      	ldr	r1, [pc, #432]	; (23f5874 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5f8>)
 23f56c2:	a812      	add	r0, sp, #72	; 0x48
 23f56c4:	f004 fefe 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f56c8:	4629      	mov	r1, r5
 23f56ca:	f004 feef 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f56ce:	6801      	ldr	r1, [r0, #0]
 23f56d0:	4860      	ldr	r0, [pc, #384]	; (23f5854 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f56d2:	f7ff f811 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f56d6:	a812      	add	r0, sp, #72	; 0x48
 23f56d8:	f004 fda6 	bl	23fa228 <_ZN6StringD1Ev>
            if(lcMessage.charAt(0) == '-') {
 23f56dc:	4639      	mov	r1, r7
 23f56de:	4628      	mov	r0, r5
 23f56e0:	f004 ff7c 	bl	23fa5dc <_ZNK6String6charAtEj>
 23f56e4:	282d      	cmp	r0, #45	; 0x2d
 23f56e6:	f040 80a5 	bne.w	23f5834 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5b8>
                timezone = 0 - lcMessage.substring(1).toInt();
 23f56ea:	4629      	mov	r1, r5
 23f56ec:	2201      	movs	r2, #1
 23f56ee:	a812      	add	r0, sp, #72	; 0x48
 23f56f0:	f004 ffaa 	bl	23fa648 <_ZNK6String9substringEj>
 23f56f4:	a812      	add	r0, sp, #72	; 0x48
 23f56f6:	f004 ffe5 	bl	23fa6c4 <_ZNK6String5toIntEv>
 23f56fa:	4245      	negs	r5, r0
 23f56fc:	a812      	add	r0, sp, #72	; 0x48
 23f56fe:	f004 fd93 	bl	23fa228 <_ZN6StringD1Ev>
            if(timezone != 0) {
 23f5702:	2d00      	cmp	r5, #0
 23f5704:	f000 809b 	beq.w	23f583e <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5c2>
    StringSumHelper(const String &s) : String(s) {}
 23f5708:	4621      	mov	r1, r4
 23f570a:	a80e      	add	r0, sp, #56	; 0x38
 23f570c:	f004 fe23 	bl	23fa356 <_ZN6StringC1ERKS_>
                Log.info(_controllerName + ": setting timezone to: " + String(timezone));
 23f5710:	4959      	ldr	r1, [pc, #356]	; (23f5878 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5fc>)
 23f5712:	a80e      	add	r0, sp, #56	; 0x38
 23f5714:	f004 fed6 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f5718:	4604      	mov	r4, r0
 23f571a:	220a      	movs	r2, #10
 23f571c:	4629      	mov	r1, r5
 23f571e:	a812      	add	r0, sp, #72	; 0x48
 23f5720:	f004 fe4f 	bl	23fa3c2 <_ZN6StringC1Eih>
 23f5724:	a912      	add	r1, sp, #72	; 0x48
 23f5726:	4620      	mov	r0, r4
 23f5728:	f004 fec0 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f572c:	6801      	ldr	r1, [r0, #0]
 23f572e:	4849      	ldr	r0, [pc, #292]	; (23f5854 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f5730:	f7fe ffe2 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
 23f5734:	a812      	add	r0, sp, #72	; 0x48
 23f5736:	f004 fd77 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f573a:	a80e      	add	r0, sp, #56	; 0x38
 23f573c:	f004 fd74 	bl	23fa228 <_ZN6StringD1Ev>
                IoT::setTimezone(timezone);
 23f5740:	4628      	mov	r0, r5
 23f5742:	f7ff f959 	bl	23f49f8 <_ZN3IoT11setTimezoneEi>
 23f5746:	e62d      	b.n	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f5748:	494c      	ldr	r1, [pc, #304]	; (23f587c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x600>)
 23f574a:	a81a      	add	r0, sp, #104	; 0x68
 23f574c:	f004 fef1 	bl	23fa532 <_ZNK6String6equalsEPKc>
        } else if(numTopics > 1 && subtopics[1] == "set") {             // patriot/<device>/set value
 23f5750:	2800      	cmp	r0, #0
 23f5752:	d0a1      	beq.n	23f5698 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x41c>
            Device *device = Device::get(subtopics[0]);
 23f5754:	a916      	add	r1, sp, #88	; 0x58
 23f5756:	a812      	add	r0, sp, #72	; 0x48
 23f5758:	f004 fdfd 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f575c:	a812      	add	r0, sp, #72	; 0x48
 23f575e:	f001 f995 	bl	23f6a8c <_ZN6Device3getE6String>
 23f5762:	4606      	mov	r6, r0
 23f5764:	a812      	add	r0, sp, #72	; 0x48
 23f5766:	f004 fd5f 	bl	23fa228 <_ZN6StringD1Ev>
            if( device != NULL) {
 23f576a:	2e00      	cmp	r6, #0
 23f576c:	f43f ae1a 	beq.w	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
                int value = lcMessage.toInt();  // 0 if not numerical
 23f5770:	4628      	mov	r0, r5
 23f5772:	f004 ffa7 	bl	23fa6c4 <_ZNK6String5toIntEv>
 23f5776:	4942      	ldr	r1, [pc, #264]	; (23f5880 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x604>)
 23f5778:	4607      	mov	r7, r0
 23f577a:	4628      	mov	r0, r5
 23f577c:	f004 fed9 	bl	23fa532 <_ZNK6String6equalsEPKc>
                if(lcMessage == "on" || lcMessage == "true") value = device->brightness();
 23f5780:	b980      	cbnz	r0, 23f57a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x528>
 23f5782:	4628      	mov	r0, r5
 23f5784:	493f      	ldr	r1, [pc, #252]	; (23f5884 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x608>)
 23f5786:	f004 fed4 	bl	23fa532 <_ZNK6String6equalsEPKc>
 23f578a:	b958      	cbnz	r0, 23f57a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x528>
 23f578c:	4628      	mov	r0, r5
 23f578e:	493e      	ldr	r1, [pc, #248]	; (23f5888 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x60c>)
 23f5790:	f004 fecf 	bl	23fa532 <_ZNK6String6equalsEPKc>
                else if(lcMessage == "off" || lcMessage == "false") value = 0;
 23f5794:	b920      	cbnz	r0, 23f57a0 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x524>
 23f5796:	4628      	mov	r0, r5
 23f5798:	493c      	ldr	r1, [pc, #240]	; (23f588c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x610>)
 23f579a:	f004 feca 	bl	23fa532 <_ZNK6String6equalsEPKc>
 23f579e:	b130      	cbz	r0, 23f57ae <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x532>
 23f57a0:	2700      	movs	r7, #0
 23f57a2:	e004      	b.n	23f57ae <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x532>
                if(lcMessage == "on" || lcMessage == "true") value = device->brightness();
 23f57a4:	6833      	ldr	r3, [r6, #0]
 23f57a6:	4630      	mov	r0, r6
 23f57a8:	6a1b      	ldr	r3, [r3, #32]
 23f57aa:	4798      	blx	r3
 23f57ac:	4607      	mov	r7, r0
                device->setValue(value);
 23f57ae:	6833      	ldr	r3, [r6, #0]
 23f57b0:	4639      	mov	r1, r7
 23f57b2:	699b      	ldr	r3, [r3, #24]
 23f57b4:	4630      	mov	r0, r6
 23f57b6:	4798      	blx	r3
                sendAck(subtopics[0], "set", lcMessage);
 23f57b8:	a916      	add	r1, sp, #88	; 0x58
 23f57ba:	a80a      	add	r0, sp, #40	; 0x28
 23f57bc:	f004 fdcb 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f57c0:	492e      	ldr	r1, [pc, #184]	; (23f587c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x600>)
 23f57c2:	a80e      	add	r0, sp, #56	; 0x38
 23f57c4:	f004 fd7b 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f57c8:	4629      	mov	r1, r5
 23f57ca:	a812      	add	r0, sp, #72	; 0x48
 23f57cc:	f004 fdc3 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f57d0:	ab12      	add	r3, sp, #72	; 0x48
 23f57d2:	aa0e      	add	r2, sp, #56	; 0x38
 23f57d4:	a90a      	add	r1, sp, #40	; 0x28
 23f57d6:	4620      	mov	r0, r4
 23f57d8:	f7ff fcd6 	bl	23f5188 <_ZN11MQTTManager7sendAckE6StringS0_S0_>
 23f57dc:	a812      	add	r0, sp, #72	; 0x48
 23f57de:	f004 fd23 	bl	23fa228 <_ZN6StringD1Ev>
 23f57e2:	a80e      	add	r0, sp, #56	; 0x38
 23f57e4:	f004 fd20 	bl	23fa228 <_ZN6StringD1Ev>
 23f57e8:	a80a      	add	r0, sp, #40	; 0x28
 23f57ea:	e630      	b.n	23f544e <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x1d2>
            if(numTopics > 1 && (subtopics[1] == _controllerName || subtopics[1] == "all")) {
 23f57ec:	2e01      	cmp	r6, #1
 23f57ee:	f43f add9 	beq.w	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f57f2:	3428      	adds	r4, #40	; 0x28
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23f57f4:	4621      	mov	r1, r4
 23f57f6:	a81a      	add	r0, sp, #104	; 0x68
 23f57f8:	f004 fe8e 	bl	23fa518 <_ZNK6String6equalsERKS_>
 23f57fc:	b198      	cbz	r0, 23f5826 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5aa>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f57fe:	4628      	mov	r0, r5
 23f5800:	4923      	ldr	r1, [pc, #140]	; (23f5890 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x614>)
 23f5802:	f004 fe96 	bl	23fa532 <_ZNK6String6equalsEPKc>
                if(lcMessage == "mqtt") {
 23f5806:	2800      	cmp	r0, #0
 23f5808:	f43f adcc 	beq.w	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
    StringSumHelper(const String &s) : String(s) {}
 23f580c:	4621      	mov	r1, r4
 23f580e:	a812      	add	r0, sp, #72	; 0x48
 23f5810:	f004 fda1 	bl	23fa356 <_ZN6StringC1ERKS_>
                    Log.info(_controllerName + ": test disable MQTT");
 23f5814:	491f      	ldr	r1, [pc, #124]	; (23f5894 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x618>)
 23f5816:	a812      	add	r0, sp, #72	; 0x48
 23f5818:	f004 fe54 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f581c:	6801      	ldr	r1, [r0, #0]
 23f581e:	480d      	ldr	r0, [pc, #52]	; (23f5854 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f5820:	f7fe ff6a 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
 23f5824:	e6df      	b.n	23f55e6 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x36a>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f5826:	4908      	ldr	r1, [pc, #32]	; (23f5848 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5cc>)
 23f5828:	a81a      	add	r0, sp, #104	; 0x68
 23f582a:	f004 fe82 	bl	23fa532 <_ZNK6String6equalsEPKc>
            if(numTopics > 1 && (subtopics[1] == _controllerName || subtopics[1] == "all")) {
 23f582e:	2800      	cmp	r0, #0
 23f5830:	d1e5      	bne.n	23f57fe <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x582>
 23f5832:	e5b7      	b.n	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
                timezone = lcMessage.toInt();
 23f5834:	4628      	mov	r0, r5
 23f5836:	f004 ff45 	bl	23fa6c4 <_ZNK6String5toIntEv>
 23f583a:	4605      	mov	r5, r0
 23f583c:	e761      	b.n	23f5702 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x486>
                Log.error("Invalid timezone");
 23f583e:	4916      	ldr	r1, [pc, #88]	; (23f5898 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x61c>)
 23f5840:	4804      	ldr	r0, [pc, #16]	; (23f5854 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x5d8>)
 23f5842:	f7fe ff4b 	bl	23f46dc <_ZNK5spark6Logger5errorEPKcz>
 23f5846:	e5ad      	b.n	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f5848:	023ff0aa 	.word	0x023ff0aa
 23f584c:	023ff133 	.word	0x023ff133
 23f5850:	023ff13a 	.word	0x023ff13a
 23f5854:	1007ae20 	.word	0x1007ae20
 23f5858:	023ff14d 	.word	0x023ff14d
 23f585c:	023ff153 	.word	0x023ff153
 23f5860:	023ff422 	.word	0x023ff422
 23f5864:	023ff174 	.word	0x023ff174
 23f5868:	1007ad6c 	.word	0x1007ad6c
 23f586c:	023ff18c 	.word	0x023ff18c
 23f5870:	023ff1f0 	.word	0x023ff1f0
 23f5874:	023ff1b9 	.word	0x023ff1b9
 23f5878:	023ff1d0 	.word	0x023ff1d0
 23f587c:	023ff2f6 	.word	0x023ff2f6
 23f5880:	023ff5c6 	.word	0x023ff5c6
 23f5884:	023ff191 	.word	0x023ff191
 23f5888:	023ff196 	.word	0x023ff196
 23f588c:	023ff19a 	.word	0x023ff19a
 23f5890:	023ff1a0 	.word	0x023ff1a0
 23f5894:	023ff1a5 	.word	0x023ff1a5
 23f5898:	023ff1e8 	.word	0x023ff1e8
 23f589c:	4919      	ldr	r1, [pc, #100]	; (23f5904 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x688>)
 23f589e:	a81a      	add	r0, sp, #104	; 0x68
 23f58a0:	f004 fe47 	bl	23fa532 <_ZNK6String6equalsEPKc>
        } else if(numTopics > 1 && subtopics[1] == "hold") {             // patriot/<device>/hold n/a
 23f58a4:	2800      	cmp	r0, #0
 23f58a6:	f43f ad4b 	beq.w	23f5340 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0xc4>
            Device *device = Device::get(subtopics[0]);
 23f58aa:	a916      	add	r1, sp, #88	; 0x58
 23f58ac:	a812      	add	r0, sp, #72	; 0x48
 23f58ae:	f004 fd52 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f58b2:	a812      	add	r0, sp, #72	; 0x48
 23f58b4:	f001 f8ea 	bl	23f6a8c <_ZN6Device3getE6String>
 23f58b8:	4606      	mov	r6, r0
 23f58ba:	a812      	add	r0, sp, #72	; 0x48
 23f58bc:	f004 fcb4 	bl	23fa228 <_ZN6StringD1Ev>
            if( device != NULL) {
 23f58c0:	2e00      	cmp	r6, #0
 23f58c2:	f43f ad6f 	beq.w	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
    StringSumHelper(const String &s) : String(s) {}
 23f58c6:	f104 0128 	add.w	r1, r4, #40	; 0x28
 23f58ca:	a812      	add	r0, sp, #72	; 0x48
 23f58cc:	f004 fd43 	bl	23fa356 <_ZN6StringC1ERKS_>
                Log.info(_controllerName + ": hold " + subtopics[0]);
 23f58d0:	490d      	ldr	r1, [pc, #52]	; (23f5908 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x68c>)
 23f58d2:	a812      	add	r0, sp, #72	; 0x48
 23f58d4:	f004 fdf6 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f58d8:	a916      	add	r1, sp, #88	; 0x58
 23f58da:	f004 fde7 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f58de:	6801      	ldr	r1, [r0, #0]
 23f58e0:	480a      	ldr	r0, [pc, #40]	; (23f590c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x690>)
 23f58e2:	f7fe ff09 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f58e6:	a812      	add	r0, sp, #72	; 0x48
 23f58e8:	f004 fc9e 	bl	23fa228 <_ZN6StringD1Ev>
                device->setHold(lcMessage != "0"); // not sure what message will be
 23f58ec:	6833      	ldr	r3, [r6, #0]
    unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 23f58ee:	4628      	mov	r0, r5
 23f58f0:	4907      	ldr	r1, [pc, #28]	; (23f5910 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x694>)
 23f58f2:	69dc      	ldr	r4, [r3, #28]
 23f58f4:	f004 fe1d 	bl	23fa532 <_ZNK6String6equalsEPKc>
 23f58f8:	fab0 f180 	clz	r1, r0
 23f58fc:	4630      	mov	r0, r6
 23f58fe:	0949      	lsrs	r1, r1, #5
 23f5900:	47a0      	blx	r4
 23f5902:	e54f      	b.n	23f53a4 <_ZN11MQTTManager19parsePatriotMessageE6StringS0_+0x128>
 23f5904:	023ff1f9 	.word	0x023ff1f9
 23f5908:	023ff0ea 	.word	0x023ff0ea
 23f590c:	1007ae20 	.word	0x1007ae20
 23f5910:	023ff0f2 	.word	0x023ff0f2

023f5914 <_ZN11MQTTManager16parseMQTTMessageE6StringS0_>:
{
 23f5914:	b570      	push	{r4, r5, r6, lr}
 23f5916:	b08c      	sub	sp, #48	; 0x30
 23f5918:	460d      	mov	r5, r1
 23f591a:	4604      	mov	r4, r0
 23f591c:	4616      	mov	r6, r2
    _lastMQTTtime = Time.now();
 23f591e:	f005 fbc0 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
    if(lcTopic.startsWith(kPublishName)) {
 23f5922:	4912      	ldr	r1, [pc, #72]	; (23f596c <_ZN11MQTTManager16parseMQTTMessageE6StringS0_+0x58>)
    _lastMQTTtime = Time.now();
 23f5924:	63a0      	str	r0, [r4, #56]	; 0x38
    if(lcTopic.startsWith(kPublishName)) {
 23f5926:	4628      	mov	r0, r5
 23f5928:	f004 fe46 	bl	23fa5b8 <_ZNK6String10startsWithERKS_>
 23f592c:	b1e0      	cbz	r0, 23f5968 <_ZN11MQTTManager16parseMQTTMessageE6StringS0_+0x54>
        String subtopics = lcTopic.substring(8);                    // Skip over "patriot/"
 23f592e:	2208      	movs	r2, #8
 23f5930:	4629      	mov	r1, r5
 23f5932:	4668      	mov	r0, sp
 23f5934:	f004 fe88 	bl	23fa648 <_ZNK6String9substringEj>
        if(subtopics.length() > 0) {                                // Must have at least 1 subtopic
 23f5938:	9b02      	ldr	r3, [sp, #8]
 23f593a:	b193      	cbz	r3, 23f5962 <_ZN11MQTTManager16parseMQTTMessageE6StringS0_+0x4e>
            parsePatriotMessage(subtopics, lcMessage);
 23f593c:	4669      	mov	r1, sp
 23f593e:	a804      	add	r0, sp, #16
 23f5940:	f004 fd09 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f5944:	4631      	mov	r1, r6
 23f5946:	a808      	add	r0, sp, #32
 23f5948:	f004 fd05 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f594c:	4620      	mov	r0, r4
 23f594e:	aa08      	add	r2, sp, #32
 23f5950:	a904      	add	r1, sp, #16
 23f5952:	f7ff fc93 	bl	23f527c <_ZN11MQTTManager19parsePatriotMessageE6StringS0_>
 23f5956:	a808      	add	r0, sp, #32
 23f5958:	f004 fc66 	bl	23fa228 <_ZN6StringD1Ev>
 23f595c:	a804      	add	r0, sp, #16
 23f595e:	f004 fc63 	bl	23fa228 <_ZN6StringD1Ev>
        String subtopics = lcTopic.substring(8);                    // Skip over "patriot/"
 23f5962:	4668      	mov	r0, sp
 23f5964:	f004 fc60 	bl	23fa228 <_ZN6StringD1Ev>
}
 23f5968:	b00c      	add	sp, #48	; 0x30
 23f596a:	bd70      	pop	{r4, r5, r6, pc}
 23f596c:	1007ad5c 	.word	0x1007ad5c

023f5970 <_ZN11MQTTManager15extractFileNameEPKc>:

// The following methods are taken from Particle FW, specifically spark::StreamLogHandler.
// See https://github.com/spark/firmware/blob/develop/wiring/src/spark_wiring_logging.cpp
const char* MQTTManager::extractFileName(const char *s) {
 23f5970:	b510      	push	{r4, lr}
 23f5972:	460c      	mov	r4, r1
    const char *s1 = strrchr(s, '/');
 23f5974:	212f      	movs	r1, #47	; 0x2f
 23f5976:	4620      	mov	r0, r4
 23f5978:	f007 f9f6 	bl	23fcd68 <strrchr>
    if (s1) {
 23f597c:	b100      	cbz	r0, 23f5980 <_ZN11MQTTManager15extractFileNameEPKc+0x10>
        return s1 + 1;
 23f597e:	1c44      	adds	r4, r0, #1
    }
    return s;
}
 23f5980:	4620      	mov	r0, r4
 23f5982:	bd10      	pop	{r4, pc}

023f5984 <_ZN11MQTTManager15extractFuncNameEPKcPj>:

const char* MQTTManager::extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
 23f5984:	460b      	mov	r3, r1
const char* MQTTManager::extractFuncName(const char *s, size_t *size) {
 23f5986:	b510      	push	{r4, lr}
 23f5988:	4618      	mov	r0, r3
    for (; *s; ++s) {
 23f598a:	f813 4b01 	ldrb.w	r4, [r3], #1
 23f598e:	b12c      	cbz	r4, 23f599c <_ZN11MQTTManager15extractFuncNameEPKcPj+0x18>
        if (*s == ' ') {
 23f5990:	2c20      	cmp	r4, #32
 23f5992:	d101      	bne.n	23f5998 <_ZN11MQTTManager15extractFuncNameEPKcPj+0x14>
            s1 = s + 1;                                                                                                                         // Skip return type
 23f5994:	4619      	mov	r1, r3
 23f5996:	e7f7      	b.n	23f5988 <_ZN11MQTTManager15extractFuncNameEPKcPj+0x4>
        } else if (*s == '(') {
 23f5998:	2c28      	cmp	r4, #40	; 0x28
 23f599a:	d1f5      	bne.n	23f5988 <_ZN11MQTTManager15extractFuncNameEPKcPj+0x4>
            break;                                                                                                                         // Skip argument types
        }
    }
    *size = s - s1;
 23f599c:	1a40      	subs	r0, r0, r1
 23f599e:	6010      	str	r0, [r2, #0]
    return s1;
}
 23f59a0:	4608      	mov	r0, r1
 23f59a2:	bd10      	pop	{r4, pc}

023f59a4 <_ZN11MQTTManager3logEPKc6String>:
    //    Serial.println(s);
    log(category, s);
}

// This is our formatter. We can format messages however we want.
void MQTTManager::log(const char *category, String message) {
 23f59a4:	b570      	push	{r4, r5, r6, lr}
 23f59a6:	b096      	sub	sp, #88	; 0x58
 23f59a8:	4604      	mov	r4, r0
 23f59aa:	4615      	mov	r5, r2
         */
        String format(time_t t, const char* format_spec=NULL);

        inline String format(const char* format_spec=NULL)
        {
            return format(now(), format_spec);
 23f59ac:	f005 fb79 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
 23f59b0:	4b21      	ldr	r3, [pc, #132]	; (23f5a38 <_ZN11MQTTManager3logEPKc6String+0x94>)
 23f59b2:	4602      	mov	r2, r0
 23f59b4:	9300      	str	r3, [sp, #0]
 23f59b6:	4921      	ldr	r1, [pc, #132]	; (23f5a3c <_ZN11MQTTManager3logEPKc6String+0x98>)
 23f59b8:	17c3      	asrs	r3, r0, #31
 23f59ba:	a802      	add	r0, sp, #8
 23f59bc:	f005 fb12 	bl	23fafe4 <_ZN9TimeClass6formatExPKc>
    // As recommended by ScruffR, don't pass time argument
    String time = Time.format("%a %H:%M");
    
    if(!_logging) {
 23f59c0:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 23f59c2:	2e00      	cmp	r6, #0
 23f59c4:	d132      	bne.n	23f5a2c <_ZN11MQTTManager3logEPKc6String+0x88>
        _logging++;
 23f59c6:	2301      	movs	r3, #1
    StringSumHelper(const char *p) : String(p) {}
 23f59c8:	491d      	ldr	r1, [pc, #116]	; (23f5a40 <_ZN11MQTTManager3logEPKc6String+0x9c>)
 23f59ca:	64e3      	str	r3, [r4, #76]	; 0x4c
 23f59cc:	a806      	add	r0, sp, #24
 23f59ce:	f004 fc76 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
        // Separate topic now, allows logging patriot/ messages without causing a loop
        publish("log/"+_controllerName, time + " " + message, false);
 23f59d2:	f104 0128 	add.w	r1, r4, #40	; 0x28
 23f59d6:	a806      	add	r0, sp, #24
 23f59d8:	f004 fd68 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f59dc:	4601      	mov	r1, r0
 23f59de:	a80e      	add	r0, sp, #56	; 0x38
 23f59e0:	f004 fcb9 	bl	23fa356 <_ZN6StringC1ERKS_>
    StringSumHelper(const String &s) : String(s) {}
 23f59e4:	a902      	add	r1, sp, #8
 23f59e6:	a80a      	add	r0, sp, #40	; 0x28
 23f59e8:	f004 fcb5 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f59ec:	4915      	ldr	r1, [pc, #84]	; (23f5a44 <_ZN11MQTTManager3logEPKc6String+0xa0>)
 23f59ee:	a80a      	add	r0, sp, #40	; 0x28
 23f59f0:	f004 fd68 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f59f4:	4629      	mov	r1, r5
 23f59f6:	f004 fd59 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f59fa:	4601      	mov	r1, r0
 23f59fc:	a812      	add	r0, sp, #72	; 0x48
 23f59fe:	f004 fcaa 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f5a02:	4633      	mov	r3, r6
 23f5a04:	aa12      	add	r2, sp, #72	; 0x48
 23f5a06:	a90e      	add	r1, sp, #56	; 0x38
 23f5a08:	4620      	mov	r0, r4
 23f5a0a:	f7ff fb39 	bl	23f5080 <_ZN11MQTTManager7publishE6StringS0_b>
 23f5a0e:	a812      	add	r0, sp, #72	; 0x48
 23f5a10:	f004 fc0a 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f5a14:	a80a      	add	r0, sp, #40	; 0x28
 23f5a16:	f004 fc07 	bl	23fa228 <_ZN6StringD1Ev>
 23f5a1a:	a80e      	add	r0, sp, #56	; 0x38
 23f5a1c:	f004 fc04 	bl	23fa228 <_ZN6StringD1Ev>
 23f5a20:	a806      	add	r0, sp, #24
 23f5a22:	f004 fc01 	bl	23fa228 <_ZN6StringD1Ev>
        _logging--;
 23f5a26:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 23f5a28:	3b01      	subs	r3, #1
 23f5a2a:	64e3      	str	r3, [r4, #76]	; 0x4c
    String time = Time.format("%a %H:%M");
 23f5a2c:	a802      	add	r0, sp, #8
 23f5a2e:	f004 fbfb 	bl	23fa228 <_ZN6StringD1Ev>
    }
}
 23f5a32:	b016      	add	sp, #88	; 0x58
 23f5a34:	bd70      	pop	{r4, r5, r6, pc}
 23f5a36:	bf00      	nop
 23f5a38:	023ff070 	.word	0x023ff070
 23f5a3c:	1007ae74 	.word	0x1007ae74
 23f5a40:	023ff1fe 	.word	0x023ff1fe
 23f5a44:	023ff06e 	.word	0x023ff06e

023f5a48 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes>:
void MQTTManager::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f5a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f5a4c:	4605      	mov	r5, r0
 23f5a4e:	4617      	mov	r7, r2
 23f5a50:	b088      	sub	sp, #32
 23f5a52:	460e      	mov	r6, r1
    String s;
 23f5a54:	4668      	mov	r0, sp
 23f5a56:	494c      	ldr	r1, [pc, #304]	; (23f5b88 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x140>)
void MQTTManager::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f5a58:	4698      	mov	r8, r3
 23f5a5a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    String s;
 23f5a5c:	f004 fc2f 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    if (level < _logLevel) {
 23f5a60:	f895 3020 	ldrb.w	r3, [r5, #32]
 23f5a64:	42bb      	cmp	r3, r7
 23f5a66:	d905      	bls.n	23f5a74 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x2c>
    String s;
 23f5a68:	4668      	mov	r0, sp
 23f5a6a:	f004 fbdd 	bl	23fa228 <_ZN6StringD1Ev>
}
 23f5a6e:	b008      	add	sp, #32
 23f5a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (attr.has_file) {
 23f5a74:	7923      	ldrb	r3, [r4, #4]
 23f5a76:	07d9      	lsls	r1, r3, #31
 23f5a78:	d526      	bpl.n	23f5ac8 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x80>
        s = extractFileName(attr.file);                                                                                 // Strip directory path
 23f5a7a:	68a1      	ldr	r1, [r4, #8]
 23f5a7c:	4628      	mov	r0, r5
 23f5a7e:	f7ff ff77 	bl	23f5970 <_ZN11MQTTManager15extractFileNameEPKc>
 23f5a82:	4601      	mov	r1, r0
 23f5a84:	4668      	mov	r0, sp
 23f5a86:	f004 fc79 	bl	23fa37c <_ZN6StringaSEPKc>
        s.concat(s);                                                                                 // File name
 23f5a8a:	4669      	mov	r1, sp
 23f5a8c:	4668      	mov	r0, sp
 23f5a8e:	f004 fceb 	bl	23fa468 <_ZN6String6concatERKS_>
        if (attr.has_line) {
 23f5a92:	7923      	ldrb	r3, [r4, #4]
 23f5a94:	079a      	lsls	r2, r3, #30
 23f5a96:	d50f      	bpl.n	23f5ab8 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x70>
            s.concat(":");
 23f5a98:	493c      	ldr	r1, [pc, #240]	; (23f5b8c <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x144>)
 23f5a9a:	4668      	mov	r0, sp
 23f5a9c:	f004 fce8 	bl	23fa470 <_ZN6String6concatEPKc>
            s.concat(String(attr.line));                                                                                                                         // Line number
 23f5aa0:	220a      	movs	r2, #10
 23f5aa2:	68e1      	ldr	r1, [r4, #12]
 23f5aa4:	a804      	add	r0, sp, #16
 23f5aa6:	f004 fc8c 	bl	23fa3c2 <_ZN6StringC1Eih>
 23f5aaa:	4668      	mov	r0, sp
 23f5aac:	a904      	add	r1, sp, #16
 23f5aae:	f004 fcdb 	bl	23fa468 <_ZN6String6concatERKS_>
 23f5ab2:	a804      	add	r0, sp, #16
 23f5ab4:	f004 fbb8 	bl	23fa228 <_ZN6StringD1Ev>
        if (attr.has_function) {
 23f5ab8:	7923      	ldrb	r3, [r4, #4]
            s.concat(": ");
 23f5aba:	4668      	mov	r0, sp
        if (attr.has_function) {
 23f5abc:	075b      	lsls	r3, r3, #29
            s.concat(", ");
 23f5abe:	bf4c      	ite	mi
 23f5ac0:	4933      	ldrmi	r1, [pc, #204]	; (23f5b90 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x148>)
            s.concat(": ");
 23f5ac2:	4934      	ldrpl	r1, [pc, #208]	; (23f5b94 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x14c>)
 23f5ac4:	f004 fcd4 	bl	23fa470 <_ZN6String6concatEPKc>
    if (attr.has_function) {
 23f5ac8:	7923      	ldrb	r3, [r4, #4]
 23f5aca:	0758      	lsls	r0, r3, #29
 23f5acc:	d512      	bpl.n	23f5af4 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0xac>
        size_t n = 0;
 23f5ace:	2300      	movs	r3, #0
        s = extractFuncName(attr.function, &n);                                                                                 // Strip argument and return types
 23f5ad0:	aa04      	add	r2, sp, #16
 23f5ad2:	6921      	ldr	r1, [r4, #16]
 23f5ad4:	4628      	mov	r0, r5
        size_t n = 0;
 23f5ad6:	9304      	str	r3, [sp, #16]
        s = extractFuncName(attr.function, &n);                                                                                 // Strip argument and return types
 23f5ad8:	f7ff ff54 	bl	23f5984 <_ZN11MQTTManager15extractFuncNameEPKcPj>
 23f5adc:	4601      	mov	r1, r0
 23f5ade:	4668      	mov	r0, sp
 23f5ae0:	f004 fc4c 	bl	23fa37c <_ZN6StringaSEPKc>
        s.concat(s);
 23f5ae4:	4669      	mov	r1, sp
 23f5ae6:	4668      	mov	r0, sp
 23f5ae8:	f004 fcbe 	bl	23fa468 <_ZN6String6concatERKS_>
        s.concat("(): ");
 23f5aec:	4668      	mov	r0, sp
 23f5aee:	492a      	ldr	r1, [pc, #168]	; (23f5b98 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x150>)
 23f5af0:	f004 fcbe 	bl	23fa470 <_ZN6String6concatEPKc>
    return log_level_name(level, nullptr);
 23f5af4:	2100      	movs	r1, #0
 23f5af6:	4638      	mov	r0, r7
 23f5af8:	f002 fbb4 	bl	23f8264 <log_level_name>
 23f5afc:	4601      	mov	r1, r0
    s.concat(levelName(level));
 23f5afe:	4668      	mov	r0, sp
 23f5b00:	f004 fcb6 	bl	23fa470 <_ZN6String6concatEPKc>
    s.concat(": ");
 23f5b04:	4668      	mov	r0, sp
 23f5b06:	4923      	ldr	r1, [pc, #140]	; (23f5b94 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x14c>)
 23f5b08:	f004 fcb2 	bl	23fa470 <_ZN6String6concatEPKc>
    if (msg) {
 23f5b0c:	b11e      	cbz	r6, 23f5b16 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0xce>
        s.concat(msg);
 23f5b0e:	4631      	mov	r1, r6
 23f5b10:	4668      	mov	r0, sp
 23f5b12:	f004 fcad 	bl	23fa470 <_ZN6String6concatEPKc>
    if (attr.has_code || attr.has_details) {
 23f5b16:	7923      	ldrb	r3, [r4, #4]
 23f5b18:	f013 0f30 	tst.w	r3, #48	; 0x30
 23f5b1c:	d027      	beq.n	23f5b6e <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x126>
        s.concat(" [");
 23f5b1e:	491f      	ldr	r1, [pc, #124]	; (23f5b9c <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x154>)
 23f5b20:	4668      	mov	r0, sp
 23f5b22:	f004 fca5 	bl	23fa470 <_ZN6String6concatEPKc>
        if (attr.has_code) {
 23f5b26:	7923      	ldrb	r3, [r4, #4]
 23f5b28:	06d9      	lsls	r1, r3, #27
 23f5b2a:	d50b      	bpl.n	23f5b44 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0xfc>
            s.concat(String::format("code = %p", (intptr_t)attr.code));
 23f5b2c:	69a2      	ldr	r2, [r4, #24]
 23f5b2e:	491c      	ldr	r1, [pc, #112]	; (23f5ba0 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x158>)
 23f5b30:	a804      	add	r0, sp, #16
 23f5b32:	f004 fddf 	bl	23fa6f4 <_ZN6String6formatEPKcz>
 23f5b36:	4668      	mov	r0, sp
 23f5b38:	a904      	add	r1, sp, #16
 23f5b3a:	f004 fc95 	bl	23fa468 <_ZN6String6concatERKS_>
 23f5b3e:	a804      	add	r0, sp, #16
 23f5b40:	f004 fb72 	bl	23fa228 <_ZN6StringD1Ev>
        if (attr.has_details) {
 23f5b44:	7923      	ldrb	r3, [r4, #4]
 23f5b46:	069a      	lsls	r2, r3, #26
 23f5b48:	d50d      	bpl.n	23f5b66 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x11e>
            if (attr.has_code) {
 23f5b4a:	06db      	lsls	r3, r3, #27
 23f5b4c:	d503      	bpl.n	23f5b56 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x10e>
                s.concat(", ");
 23f5b4e:	4668      	mov	r0, sp
 23f5b50:	490f      	ldr	r1, [pc, #60]	; (23f5b90 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x148>)
 23f5b52:	f004 fc8d 	bl	23fa470 <_ZN6String6concatEPKc>
            s.concat("details = ");
 23f5b56:	4913      	ldr	r1, [pc, #76]	; (23f5ba4 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x15c>)
 23f5b58:	4668      	mov	r0, sp
 23f5b5a:	f004 fc89 	bl	23fa470 <_ZN6String6concatEPKc>
            s.concat(attr.details);
 23f5b5e:	4668      	mov	r0, sp
 23f5b60:	69e1      	ldr	r1, [r4, #28]
 23f5b62:	f004 fc85 	bl	23fa470 <_ZN6String6concatEPKc>
        s.concat(']');
 23f5b66:	215d      	movs	r1, #93	; 0x5d
 23f5b68:	4668      	mov	r0, sp
 23f5b6a:	f004 fc92 	bl	23fa492 <_ZN6String6concatEc>
    log(category, s);
 23f5b6e:	4669      	mov	r1, sp
 23f5b70:	a804      	add	r0, sp, #16
 23f5b72:	f004 fbf0 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f5b76:	4628      	mov	r0, r5
 23f5b78:	4641      	mov	r1, r8
 23f5b7a:	aa04      	add	r2, sp, #16
 23f5b7c:	f7ff ff12 	bl	23f59a4 <_ZN11MQTTManager3logEPKc6String>
 23f5b80:	a804      	add	r0, sp, #16
 23f5b82:	f004 fb51 	bl	23fa228 <_ZN6StringD1Ev>
 23f5b86:	e76f      	b.n	23f5a68 <_ZN11MQTTManager10logMessageEPKc8LogLevelS1_RK13LogAttributes+0x20>
 23f5b88:	023ff87d 	.word	0x023ff87d
 23f5b8c:	023ff203 	.word	0x023ff203
 23f5b90:	023ff06d 	.word	0x023ff06d
 23f5b94:	023ff207 	.word	0x023ff207
 23f5b98:	023ff205 	.word	0x023ff205
 23f5b9c:	023ff20a 	.word	0x023ff20a
 23f5ba0:	023ff20d 	.word	0x023ff20d
 23f5ba4:	023ff217 	.word	0x023ff217

023f5ba8 <_ZN11MQTTManager14blinkStatusLedEv>:
// Off: WiFi not connected
// 3 blinks: WiFi and/or MQTT not connected
// 2 blinks: MQTT connecting
// 1 blink: MQTT connected and subscribed
//
void MQTTManager::blinkStatusLed() {
 23f5ba8:	b510      	push	{r4, lr}
 23f5baa:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f5bac:	f002 f804 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
    
    if(millis() >= _lastBlinkTimeMs + BLINK_INTERVAL) {
 23f5bb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 23f5bb2:	33fa      	adds	r3, #250	; 0xfa
 23f5bb4:	4283      	cmp	r3, r0
 23f5bb6:	d82a      	bhi.n	23f5c0e <_ZN11MQTTManager14blinkStatusLedEv+0x66>
 23f5bb8:	f001 fffe 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
        
        _lastBlinkTimeMs = millis();
        _blinkPhase++;
 23f5bbc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        _lastBlinkTimeMs = millis();
 23f5bbe:	6460      	str	r0, [r4, #68]	; 0x44
        _blinkPhase++;
 23f5bc0:	3301      	adds	r3, #1
    return WiFi.ready();
 23f5bc2:	4813      	ldr	r0, [pc, #76]	; (23f5c10 <_ZN11MQTTManager14blinkStatusLedEv+0x68>)
        _blinkPhase++;
 23f5bc4:	64a3      	str	r3, [r4, #72]	; 0x48
    return WiFi.ready();
 23f5bc6:	f7ff f90d 	bl	23f4de4 <_ZN5spark9WiFiClass5readyEv>
        
        int nextLed = LOW;
        
        // 3 short blinks = WiFi and/or MQTT Not Connected
        if(!wifiConnected() || !mqttConnected()) {
 23f5bca:	b950      	cbnz	r0, 23f5be2 <_ZN11MQTTManager14blinkStatusLedEv+0x3a>
            if(_blinkPhase == 1 || _blinkPhase == 3 || _blinkPhase == 5) {
 23f5bcc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 23f5bce:	f023 0202 	bic.w	r2, r3, #2
 23f5bd2:	2a01      	cmp	r2, #1
 23f5bd4:	d112      	bne.n	23f5bfc <_ZN11MQTTManager14blinkStatusLedEv+0x54>
                nextLed = HIGH;
 23f5bd6:	2101      	movs	r1, #1
                _blinkPhase = 0;
            }
        }
        digitalWrite(D7, nextLed);
    }
}
 23f5bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(D7, nextLed);
 23f5bdc:	2007      	movs	r0, #7
 23f5bde:	f005 bd18 	b.w	23fb612 <digitalWrite>
        if(!wifiConnected() || !mqttConnected()) {
 23f5be2:	4620      	mov	r0, r4
 23f5be4:	f7ff f911 	bl	23f4e0a <_ZN11MQTTManager13mqttConnectedEv>
 23f5be8:	2800      	cmp	r0, #0
 23f5bea:	d0ef      	beq.n	23f5bcc <_ZN11MQTTManager14blinkStatusLedEv+0x24>
        } else if(_mqttSubscribed == false) {
 23f5bec:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
            if(_blinkPhase == 1 || _blinkPhase == 3) {
 23f5bf0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        } else if(_mqttSubscribed == false) {
 23f5bf2:	b952      	cbnz	r2, 23f5c0a <_ZN11MQTTManager14blinkStatusLedEv+0x62>
            if(_blinkPhase == 1 || _blinkPhase == 3) {
 23f5bf4:	f023 0202 	bic.w	r2, r3, #2
 23f5bf8:	2a01      	cmp	r2, #1
 23f5bfa:	e000      	b.n	23f5bfe <_ZN11MQTTManager14blinkStatusLedEv+0x56>
            if(_blinkPhase == 1 || _blinkPhase == 3 || _blinkPhase == 5) {
 23f5bfc:	2b05      	cmp	r3, #5
 23f5bfe:	d0ea      	beq.n	23f5bd6 <_ZN11MQTTManager14blinkStatusLedEv+0x2e>
                _blinkPhase = 0;
 23f5c00:	2100      	movs	r1, #0
            } else if(_blinkPhase > 8) {
 23f5c02:	2b08      	cmp	r3, #8
                _blinkPhase = 0;
 23f5c04:	bfc8      	it	gt
 23f5c06:	64a1      	strgt	r1, [r4, #72]	; 0x48
 23f5c08:	e7e6      	b.n	23f5bd8 <_ZN11MQTTManager14blinkStatusLedEv+0x30>
            if(_blinkPhase == 1) {
 23f5c0a:	2b01      	cmp	r3, #1
 23f5c0c:	e7f7      	b.n	23f5bfe <_ZN11MQTTManager14blinkStatusLedEv+0x56>
}
 23f5c0e:	bd10      	pop	{r4, pc}
 23f5c10:	1007aed0 	.word	0x1007aed0

023f5c14 <_ZN11MQTTManager4loopEv>:
{
 23f5c14:	b510      	push	{r4, lr}
 23f5c16:	4604      	mov	r4, r0
    _mqtt->loop();
 23f5c18:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23f5c1a:	f001 fdf6 	bl	23f780a <_ZN4MQTT4loopEv>
    checkNetworkStatusPeriodically();
 23f5c1e:	4620      	mov	r0, r4
 23f5c20:	f7ff f9d8 	bl	23f4fd4 <_ZN11MQTTManager30checkNetworkStatusPeriodicallyEv>
    sendAliveMsgPeriodically();
 23f5c24:	4620      	mov	r0, r4
 23f5c26:	f7ff fa69 	bl	23f50fc <_ZN11MQTTManager24sendAliveMsgPeriodicallyEv>
    blinkStatusLed();
 23f5c2a:	4620      	mov	r0, r4
}
 23f5c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    blinkStatusLed();
 23f5c30:	f7ff bfba 	b.w	23f5ba8 <_ZN11MQTTManager14blinkStatusLedEv>

023f5c34 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23f5c34:	2201      	movs	r2, #1
}
 23f5c36:	b508      	push	{r3, lr}
 23f5c38:	4b0b      	ldr	r3, [pc, #44]	; (23f5c68 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x34>)
static const String kDevicesVariableName       = "Devices";
 23f5c3a:	490c      	ldr	r1, [pc, #48]	; (23f5c6c <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x38>)
 23f5c3c:	601a      	str	r2, [r3, #0]
 23f5c3e:	480c      	ldr	r0, [pc, #48]	; (23f5c70 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x3c>)
 23f5c40:	f004 fb3d 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
static const String kChecklistVariableName     = "Checklist";
 23f5c44:	490b      	ldr	r1, [pc, #44]	; (23f5c74 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x40>)
 23f5c46:	480c      	ldr	r0, [pc, #48]	; (23f5c78 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x44>)
 23f5c48:	f004 fb39 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
static const String kStatusVariableName        = "Status";
 23f5c4c:	490b      	ldr	r1, [pc, #44]	; (23f5c7c <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x48>)
 23f5c4e:	480c      	ldr	r0, [pc, #48]	; (23f5c80 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x4c>)
 23f5c50:	f004 fb35 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
static const String kPublishName               = "patriot";
 23f5c54:	490b      	ldr	r1, [pc, #44]	; (23f5c84 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x50>)
 23f5c56:	480c      	ldr	r0, [pc, #48]	; (23f5c88 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x54>)
 23f5c58:	f004 fb31 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f5c5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
static const String kSSIDFunctionName          = "setSSID";
 23f5c60:	490a      	ldr	r1, [pc, #40]	; (23f5c8c <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x58>)
 23f5c62:	480b      	ldr	r0, [pc, #44]	; (23f5c90 <_GLOBAL__sub_I__ZN11MQTTManagerC2E6StringS0_b+0x5c>)
 23f5c64:	f004 bb2b 	b.w	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f5c68:	1007ad6c 	.word	0x1007ad6c
 23f5c6c:	023fef7c 	.word	0x023fef7c
 23f5c70:	1007ad90 	.word	0x1007ad90
 23f5c74:	023fef84 	.word	0x023fef84
 23f5c78:	1007ada0 	.word	0x1007ada0
 23f5c7c:	023fef8e 	.word	0x023fef8e
 23f5c80:	1007ad80 	.word	0x1007ad80
 23f5c84:	023fef95 	.word	0x023fef95
 23f5c88:	1007ad5c 	.word	0x1007ad5c
 23f5c8c:	023fef9d 	.word	0x023fef9d
 23f5c90:	1007ad70 	.word	0x1007ad70

023f5c94 <_ZN6Device5resetEv>:
    // begin() is called automatically when device is added.
    // Do any heavy lifting or publishing here and not in constructor.
    virtual void begin() {};
    
    // Perform hardware reset if possible
    virtual void reset() {};
 23f5c94:	4770      	bx	lr

023f5c96 <_ZN6Device5valueEv>:

    virtual String name() { return _name; };
    virtual String room() { return _room; };
    virtual String type() { return String(_type); };
    
    virtual int value() { return _value; };
 23f5c96:	6980      	ldr	r0, [r0, #24]
 23f5c98:	4770      	bx	lr

023f5c9a <_ZN6Device10brightnessEv>:
    virtual void setValue(int value);
    
    virtual void setHold(bool stopped) { return; };     // eg. Pause closing curtain
    
    virtual int brightness() { return _brightness; };
 23f5c9a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 23f5c9c:	4770      	bx	lr

023f5c9e <_ZN7Curtain5beginEv>:
    _holding = false;
}

void Curtain::begin() {
    // Handled by mcp23008
}
 23f5c9e:	4770      	bx	lr

023f5ca0 <_ZN6Device4roomEv>:
    virtual String room() { return _room; };
 23f5ca0:	b510      	push	{r4, lr}
 23f5ca2:	4604      	mov	r4, r0
 23f5ca4:	311c      	adds	r1, #28
 23f5ca6:	f004 fb56 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f5caa:	4620      	mov	r0, r4
 23f5cac:	bd10      	pop	{r4, pc}

023f5cae <_ZN6Device4nameEv>:
    virtual String name() { return _name; };
 23f5cae:	b510      	push	{r4, lr}
 23f5cb0:	4604      	mov	r4, r0
 23f5cb2:	3108      	adds	r1, #8
 23f5cb4:	f004 fb4f 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f5cb8:	4620      	mov	r0, r4
 23f5cba:	bd10      	pop	{r4, pc}

023f5cbc <_ZN6Device4typeEv>:
    virtual String type() { return String(_type); };
 23f5cbc:	b510      	push	{r4, lr}
 23f5cbe:	4604      	mov	r4, r0
 23f5cc0:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 23f5cc4:	f004 fb6c 	bl	23fa3a0 <_ZN6StringC1Ec>
 23f5cc8:	4620      	mov	r0, r4
 23f5cca:	bd10      	pop	{r4, pc}

023f5ccc <_ZN7Curtain7setHoldEb>:
    }
    _stopMillis = millis() + PULSE_MILLIS;
    pulse(true);
}

void Curtain::setHold(bool holding) {
 23f5ccc:	b508      	push	{r3, lr}
    if(holding == true) {
        if(_holding == true) {  // Already holding?
 23f5cce:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
    if(holding == true) {
 23f5cd2:	b109      	cbz	r1, 23f5cd8 <_ZN7Curtain7setHoldEb+0xc>
        if(_holding == true) {  // Already holding?
 23f5cd4:	b113      	cbz	r3, 23f5cdc <_ZN7Curtain7setHoldEb+0x10>
        //TODO: resume movement - same as setValue using old target
        
    }
    _holding = holding;
    Log.warn("Curtain setHold not implemented");
}
 23f5cd6:	bd08      	pop	{r3, pc}
        if(_holding == false) { // Not currently holding?
 23f5cd8:	2b00      	cmp	r3, #0
 23f5cda:	d0fc      	beq.n	23f5cd6 <_ZN7Curtain7setHoldEb+0xa>
    _holding = holding;
 23f5cdc:	f880 1047 	strb.w	r1, [r0, #71]	; 0x47
    Log.warn("Curtain setHold not implemented");
 23f5ce0:	4902      	ldr	r1, [pc, #8]	; (23f5cec <_ZN7Curtain7setHoldEb+0x20>)
 23f5ce2:	4803      	ldr	r0, [pc, #12]	; (23f5cf0 <_ZN7Curtain7setHoldEb+0x24>)
 23f5ce4:	f7ff f883 	bl	23f4dee <_ZNK5spark6Logger4warnEPKcz>
 23f5ce8:	e7f5      	b.n	23f5cd6 <_ZN7Curtain7setHoldEb+0xa>
 23f5cea:	bf00      	nop
 23f5cec:	023ff254 	.word	0x023ff254
 23f5cf0:	1007ae20 	.word	0x1007ae20

023f5cf4 <_ZN7CurtainC1Ea6StringS0_>:
Curtain::Curtain(int8_t relayIndex, String name, String room)
 23f5cf4:	b570      	push	{r4, r5, r6, lr}
 23f5cf6:	461e      	mov	r6, r3
 23f5cf8:	4604      	mov	r4, r0
 23f5cfa:	b088      	sub	sp, #32
 23f5cfc:	460d      	mov	r5, r1
    : Device(name, room)
 23f5cfe:	4668      	mov	r0, sp
 23f5d00:	4611      	mov	r1, r2
 23f5d02:	f004 fb28 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f5d06:	4631      	mov	r1, r6
 23f5d08:	a804      	add	r0, sp, #16
 23f5d0a:	f004 fb24 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f5d0e:	aa04      	add	r2, sp, #16
 23f5d10:	234c      	movs	r3, #76	; 0x4c
 23f5d12:	4669      	mov	r1, sp
 23f5d14:	4620      	mov	r0, r4
 23f5d16:	f000 fe41 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f5d1a:	a804      	add	r0, sp, #16
 23f5d1c:	f004 fa84 	bl	23fa228 <_ZN6StringD1Ev>
 23f5d20:	4668      	mov	r0, sp
 23f5d22:	f004 fa81 	bl	23fa228 <_ZN6StringD1Ev>
 23f5d26:	4b08      	ldr	r3, [pc, #32]	; (23f5d48 <_ZN7CurtainC1Ea6StringS0_+0x54>)
    _type  = 'C';
 23f5d28:	2243      	movs	r2, #67	; 0x43
}
 23f5d2a:	4620      	mov	r0, r4
    : Device(name, room)
 23f5d2c:	6023      	str	r3, [r4, #0]
    _stopMillis = 0;
 23f5d2e:	2300      	movs	r3, #0
    _relayIndex  = relayIndex;      // 0 (first 2 relays)
 23f5d30:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    _stopMillis = 0;
 23f5d34:	63a3      	str	r3, [r4, #56]	; 0x38
    _type  = 'C';
 23f5d36:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    _mode = 0;
 23f5d3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    _stage = 0;
 23f5d3e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
}
 23f5d42:	b008      	add	sp, #32
 23f5d44:	bd70      	pop	{r4, r5, r6, pc}
 23f5d46:	bf00      	nop
 23f5d48:	023ff390 	.word	0x023ff390

023f5d4c <_ZN7Curtain5pulseEb>:


/**
 * Start 1=close, 2=open
 */
void Curtain::pulse(bool high) {
 23f5d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    
    Log.info("Curtain pulse %s", high ? "high" : "low");
 23f5d4e:	4a11      	ldr	r2, [pc, #68]	; (23f5d94 <_ZN7Curtain5pulseEb+0x48>)
 23f5d50:	1e0d      	subs	r5, r1, #0
 23f5d52:	4b11      	ldr	r3, [pc, #68]	; (23f5d98 <_ZN7Curtain5pulseEb+0x4c>)
 23f5d54:	bf08      	it	eq
 23f5d56:	4613      	moveq	r3, r2
void Curtain::pulse(bool high) {
 23f5d58:	4604      	mov	r4, r0
    Log.info("Curtain pulse %s", high ? "high" : "low");
 23f5d5a:	461a      	mov	r2, r3
 23f5d5c:	490f      	ldr	r1, [pc, #60]	; (23f5d9c <_ZN7Curtain5pulseEb+0x50>)
 23f5d5e:	4810      	ldr	r0, [pc, #64]	; (23f5da0 <_ZN7Curtain5pulseEb+0x54>)
 23f5d60:	9301      	str	r3, [sp, #4]
 23f5d62:	f7fe fcc9 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
    int status = MCP23008::write(_relayIndex + _mode - 1, high);
 23f5d66:	f994 0044 	ldrsb.w	r0, [r4, #68]	; 0x44
 23f5d6a:	f994 2045 	ldrsb.w	r2, [r4, #69]	; 0x45
 23f5d6e:	4629      	mov	r1, r5
 23f5d70:	4410      	add	r0, r2
 23f5d72:	3801      	subs	r0, #1
 23f5d74:	f001 f91a 	bl	23f6fac <_ZN8MCP230085writeEib>
    if(status != 0) {
 23f5d78:	9b01      	ldr	r3, [sp, #4]
 23f5d7a:	b148      	cbz	r0, 23f5d90 <_ZN7Curtain5pulseEb+0x44>
        Log.error("Error pulsing relay %d %s", _relayIndex + _mode - 1, high ? "high" : "low");
 23f5d7c:	f994 1045 	ldrsb.w	r1, [r4, #69]	; 0x45
 23f5d80:	f994 2044 	ldrsb.w	r2, [r4, #68]	; 0x44
 23f5d84:	4806      	ldr	r0, [pc, #24]	; (23f5da0 <_ZN7Curtain5pulseEb+0x54>)
 23f5d86:	440a      	add	r2, r1
 23f5d88:	3a01      	subs	r2, #1
 23f5d8a:	4906      	ldr	r1, [pc, #24]	; (23f5da4 <_ZN7Curtain5pulseEb+0x58>)
 23f5d8c:	f7fe fca6 	bl	23f46dc <_ZNK5spark6Logger5errorEPKcz>
    }
}
 23f5d90:	b003      	add	sp, #12
 23f5d92:	bd30      	pop	{r4, r5, pc}
 23f5d94:	023ff279 	.word	0x023ff279
 23f5d98:	023ff274 	.word	0x023ff274
 23f5d9c:	023ff27d 	.word	0x023ff27d
 23f5da0:	1007ae20 	.word	0x1007ae20
 23f5da4:	023ff28e 	.word	0x023ff28e

023f5da8 <_ZN7Curtain8setValueEi>:
void Curtain::setValue(int percent) {
 23f5da8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(percent == _value) {
 23f5daa:	6983      	ldr	r3, [r0, #24]
void Curtain::setValue(int percent) {
 23f5dac:	4604      	mov	r4, r0
    if(percent == _value) {
 23f5dae:	428b      	cmp	r3, r1
void Curtain::setValue(int percent) {
 23f5db0:	460e      	mov	r6, r1
 23f5db2:	b08d      	sub	sp, #52	; 0x34
    if(percent == _value) {
 23f5db4:	d105      	bne.n	23f5dc2 <_ZN7Curtain8setValueEi+0x1a>
        Log.warn("Curtain setValue is the same as previous value, ignoring");
 23f5db6:	4963      	ldr	r1, [pc, #396]	; (23f5f44 <_ZN7Curtain8setValueEi+0x19c>)
 23f5db8:	4863      	ldr	r0, [pc, #396]	; (23f5f48 <_ZN7Curtain8setValueEi+0x1a0>)
 23f5dba:	f7ff f818 	bl	23f4dee <_ZNK5spark6Logger4warnEPKcz>
}
 23f5dbe:	b00d      	add	sp, #52	; 0x34
 23f5dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _startPosition = _value;
 23f5dc2:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
 23f5dc6:	f001 fef7 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
    _holding = false;
 23f5dca:	2500      	movs	r5, #0
    _startMillis = millis();
 23f5dcc:	6420      	str	r0, [r4, #64]	; 0x40
    _value = percent;           // Should this report current instead?
 23f5dce:	61a6      	str	r6, [r4, #24]
    _holding = false;
 23f5dd0:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
 23f5dd4:	f001 fef0 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
    _updateMillis = millis() + MILLIS_PER_UPDATE;
 23f5dd8:	f500 727a 	add.w	r2, r0, #1000	; 0x3e8
 23f5ddc:	63e2      	str	r2, [r4, #60]	; 0x3c
    Log.info("_updateMillis = %ld",_updateMillis);
 23f5dde:	495b      	ldr	r1, [pc, #364]	; (23f5f4c <_ZN7Curtain8setValueEi+0x1a4>)
 23f5de0:	4859      	ldr	r0, [pc, #356]	; (23f5f48 <_ZN7Curtain8setValueEi+0x1a0>)
 23f5de2:	f7fe fc89 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
    IoT::publishMQTT("/ack/" + _name + "/set",String(percent));
 23f5de6:	f104 0708 	add.w	r7, r4, #8
    StringSumHelper(const char *p) : String(p) {}
 23f5dea:	4959      	ldr	r1, [pc, #356]	; (23f5f50 <_ZN7Curtain8setValueEi+0x1a8>)
 23f5dec:	4668      	mov	r0, sp
 23f5dee:	f004 fa66 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f5df2:	4639      	mov	r1, r7
 23f5df4:	4668      	mov	r0, sp
 23f5df6:	f004 fb59 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f5dfa:	4956      	ldr	r1, [pc, #344]	; (23f5f54 <_ZN7Curtain8setValueEi+0x1ac>)
 23f5dfc:	f004 fb62 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f5e00:	4601      	mov	r1, r0
 23f5e02:	a808      	add	r0, sp, #32
 23f5e04:	f004 faa7 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f5e08:	220a      	movs	r2, #10
 23f5e0a:	4631      	mov	r1, r6
 23f5e0c:	a804      	add	r0, sp, #16
 23f5e0e:	f004 fad8 	bl	23fa3c2 <_ZN6StringC1Eih>
 23f5e12:	462a      	mov	r2, r5
 23f5e14:	a904      	add	r1, sp, #16
 23f5e16:	a808      	add	r0, sp, #32
 23f5e18:	f7fe fdba 	bl	23f4990 <_ZN3IoT11publishMQTTE6StringS0_b>
 23f5e1c:	a804      	add	r0, sp, #16
 23f5e1e:	f004 fa03 	bl	23fa228 <_ZN6StringD1Ev>
 23f5e22:	a808      	add	r0, sp, #32
 23f5e24:	f004 fa00 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f5e28:	4668      	mov	r0, sp
 23f5e2a:	f004 f9fd 	bl	23fa228 <_ZN6StringD1Ev>
    StringSumHelper(const String &s) : String(s) {}
 23f5e2e:	4639      	mov	r1, r7
 23f5e30:	4668      	mov	r0, sp
 23f5e32:	f004 fa90 	bl	23fa356 <_ZN6StringC1ERKS_>
    IoT::publishMQTT(_name + "/get",String(percent));
 23f5e36:	4948      	ldr	r1, [pc, #288]	; (23f5f58 <_ZN7Curtain8setValueEi+0x1b0>)
 23f5e38:	4668      	mov	r0, sp
 23f5e3a:	f004 fb43 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f5e3e:	4601      	mov	r1, r0
 23f5e40:	a808      	add	r0, sp, #32
 23f5e42:	f004 fa88 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f5e46:	220a      	movs	r2, #10
 23f5e48:	4631      	mov	r1, r6
 23f5e4a:	a804      	add	r0, sp, #16
 23f5e4c:	f004 fab9 	bl	23fa3c2 <_ZN6StringC1Eih>
 23f5e50:	462a      	mov	r2, r5
 23f5e52:	a904      	add	r1, sp, #16
 23f5e54:	a808      	add	r0, sp, #32
 23f5e56:	f7fe fd9b 	bl	23f4990 <_ZN3IoT11publishMQTTE6StringS0_b>
 23f5e5a:	a804      	add	r0, sp, #16
 23f5e5c:	f004 f9e4 	bl	23fa228 <_ZN6StringD1Ev>
 23f5e60:	a808      	add	r0, sp, #32
 23f5e62:	f004 f9e1 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f5e66:	4668      	mov	r0, sp
 23f5e68:	f004 f9de 	bl	23fa228 <_ZN6StringD1Ev>
    StringSumHelper(const String &s) : String(s) {}
 23f5e6c:	4639      	mov	r1, r7
 23f5e6e:	4668      	mov	r0, sp
 23f5e70:	f004 fa71 	bl	23fa356 <_ZN6StringC1ERKS_>
    IoT::publishMQTT(_name + "/position",String(_startPosition));
 23f5e74:	4939      	ldr	r1, [pc, #228]	; (23f5f5c <_ZN7Curtain8setValueEi+0x1b4>)
 23f5e76:	4668      	mov	r0, sp
 23f5e78:	f004 fb24 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f5e7c:	4601      	mov	r1, r0
 23f5e7e:	a808      	add	r0, sp, #32
 23f5e80:	f004 fa69 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f5e84:	220a      	movs	r2, #10
 23f5e86:	f994 1048 	ldrsb.w	r1, [r4, #72]	; 0x48
 23f5e8a:	a804      	add	r0, sp, #16
 23f5e8c:	f004 fa99 	bl	23fa3c2 <_ZN6StringC1Eih>
 23f5e90:	462a      	mov	r2, r5
 23f5e92:	a904      	add	r1, sp, #16
 23f5e94:	a808      	add	r0, sp, #32
 23f5e96:	f7fe fd7b 	bl	23f4990 <_ZN3IoT11publishMQTTE6StringS0_b>
 23f5e9a:	a804      	add	r0, sp, #16
 23f5e9c:	f004 f9c4 	bl	23fa228 <_ZN6StringD1Ev>
 23f5ea0:	a808      	add	r0, sp, #32
 23f5ea2:	f004 f9c1 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f5ea6:	4668      	mov	r0, sp
 23f5ea8:	f004 f9be 	bl	23fa228 <_ZN6StringD1Ev>
    if(_value > _startPosition) {
 23f5eac:	f994 3048 	ldrsb.w	r3, [r4, #72]	; 0x48
 23f5eb0:	69a2      	ldr	r2, [r4, #24]
 23f5eb2:	429a      	cmp	r2, r3
 23f5eb4:	dd33      	ble.n	23f5f1e <_ZN7Curtain8setValueEi+0x176>
        _mode = OPEN_CURTAIN;
 23f5eb6:	2302      	movs	r3, #2
    StringSumHelper(const String &s) : String(s) {}
 23f5eb8:	4639      	mov	r1, r7
 23f5eba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 23f5ebe:	4668      	mov	r0, sp
 23f5ec0:	f004 fa49 	bl	23fa356 <_ZN6StringC1ERKS_>
        IoT::publishMQTT(_name + "/state", "increasing");
 23f5ec4:	4926      	ldr	r1, [pc, #152]	; (23f5f60 <_ZN7Curtain8setValueEi+0x1b8>)
 23f5ec6:	4668      	mov	r0, sp
 23f5ec8:	f004 fafc 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f5ecc:	4601      	mov	r1, r0
 23f5ece:	a804      	add	r0, sp, #16
 23f5ed0:	f004 fa41 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f5ed4:	4923      	ldr	r1, [pc, #140]	; (23f5f64 <_ZN7Curtain8setValueEi+0x1bc>)
        IoT::publishMQTT(_name + "/state", "decreasing");
 23f5ed6:	a808      	add	r0, sp, #32
 23f5ed8:	f004 f9f1 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f5edc:	462a      	mov	r2, r5
 23f5ede:	a908      	add	r1, sp, #32
 23f5ee0:	a804      	add	r0, sp, #16
 23f5ee2:	f7fe fd55 	bl	23f4990 <_ZN3IoT11publishMQTTE6StringS0_b>
 23f5ee6:	a808      	add	r0, sp, #32
 23f5ee8:	f004 f99e 	bl	23fa228 <_ZN6StringD1Ev>
 23f5eec:	a804      	add	r0, sp, #16
 23f5eee:	f004 f99b 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f5ef2:	4668      	mov	r0, sp
 23f5ef4:	f004 f998 	bl	23fa228 <_ZN6StringD1Ev>
    if(_value == 0 || _value == 100) {
 23f5ef8:	69a3      	ldr	r3, [r4, #24]
 23f5efa:	b30b      	cbz	r3, 23f5f40 <_ZN7Curtain8setValueEi+0x198>
        _stage = 1;
 23f5efc:	2b64      	cmp	r3, #100	; 0x64
 23f5efe:	bf0c      	ite	eq
 23f5f00:	2303      	moveq	r3, #3
 23f5f02:	2301      	movne	r3, #1
 23f5f04:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 23f5f08:	f001 fe56 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
    _stopMillis = millis() + PULSE_MILLIS;
 23f5f0c:	3064      	adds	r0, #100	; 0x64
 23f5f0e:	63a0      	str	r0, [r4, #56]	; 0x38
    pulse(true);
 23f5f10:	2101      	movs	r1, #1
 23f5f12:	4620      	mov	r0, r4
}
 23f5f14:	b00d      	add	sp, #52	; 0x34
 23f5f16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    pulse(true);
 23f5f1a:	f7ff bf17 	b.w	23f5d4c <_ZN7Curtain5pulseEb>
        _mode = CLOSE_CURTAIN;
 23f5f1e:	2301      	movs	r3, #1
    StringSumHelper(const String &s) : String(s) {}
 23f5f20:	4639      	mov	r1, r7
 23f5f22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 23f5f26:	4668      	mov	r0, sp
 23f5f28:	f004 fa15 	bl	23fa356 <_ZN6StringC1ERKS_>
        IoT::publishMQTT(_name + "/state", "decreasing");
 23f5f2c:	490c      	ldr	r1, [pc, #48]	; (23f5f60 <_ZN7Curtain8setValueEi+0x1b8>)
 23f5f2e:	4668      	mov	r0, sp
 23f5f30:	f004 fac8 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f5f34:	4601      	mov	r1, r0
 23f5f36:	a804      	add	r0, sp, #16
 23f5f38:	f004 fa0d 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f5f3c:	490a      	ldr	r1, [pc, #40]	; (23f5f68 <_ZN7Curtain8setValueEi+0x1c0>)
 23f5f3e:	e7ca      	b.n	23f5ed6 <_ZN7Curtain8setValueEi+0x12e>
        _stage = 3;
 23f5f40:	2303      	movs	r3, #3
 23f5f42:	e7df      	b.n	23f5f04 <_ZN7Curtain8setValueEi+0x15c>
 23f5f44:	023ff2a8 	.word	0x023ff2a8
 23f5f48:	1007ae20 	.word	0x1007ae20
 23f5f4c:	023ff2e1 	.word	0x023ff2e1
 23f5f50:	023ff081 	.word	0x023ff081
 23f5f54:	023ff2f5 	.word	0x023ff2f5
 23f5f58:	023ff2fa 	.word	0x023ff2fa
 23f5f5c:	023ff3cc 	.word	0x023ff3cc
 23f5f60:	023ff2ff 	.word	0x023ff2ff
 23f5f64:	023ff306 	.word	0x023ff306
 23f5f68:	023ff311 	.word	0x023ff311

023f5f6c <_ZN7Curtain19isTimeToChangePulseEv>:

bool Curtain::isCurtainRunning() {
    return(_stage != 0);
}

bool Curtain::isTimeToChangePulse() {
 23f5f6c:	b510      	push	{r4, lr}
 23f5f6e:	4604      	mov	r4, r0
 23f5f70:	f001 fe22 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
    return(millis() >= _stopMillis);
 23f5f74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 23f5f76:	4283      	cmp	r3, r0
 23f5f78:	bf8c      	ite	hi
 23f5f7a:	2000      	movhi	r0, #0
 23f5f7c:	2001      	movls	r0, #1
 23f5f7e:	bd10      	pop	{r4, pc}

023f5f80 <_ZN7Curtain4loopEv>:
{
 23f5f80:	b530      	push	{r4, r5, lr}
    if(isCurtainRunning()) {
 23f5f82:	f990 3046 	ldrsb.w	r3, [r0, #70]	; 0x46
{
 23f5f86:	4604      	mov	r4, r0
 23f5f88:	b08d      	sub	sp, #52	; 0x34
    if(isCurtainRunning()) {
 23f5f8a:	2b00      	cmp	r3, #0
 23f5f8c:	d05b      	beq.n	23f6046 <_ZN7Curtain4loopEv+0xc6>
        if(isTimeToChangePulse()) {
 23f5f8e:	f7ff ffed 	bl	23f5f6c <_ZN7Curtain19isTimeToChangePulseEv>
 23f5f92:	b310      	cbz	r0, 23f5fda <_ZN7Curtain4loopEv+0x5a>
            switch(_stage) {
 23f5f94:	f994 2046 	ldrsb.w	r2, [r4, #70]	; 0x46
 23f5f98:	1e53      	subs	r3, r2, #1
 23f5f9a:	2b03      	cmp	r3, #3
 23f5f9c:	f200 8096 	bhi.w	23f60cc <_ZN7Curtain4loopEv+0x14c>
 23f5fa0:	e8df f003 	tbb	[pc, r3]
 23f5fa4:	71615302 	.word	0x71615302
                    Log.info("Curtain end-of-start pulse");
 23f5fa8:	494b      	ldr	r1, [pc, #300]	; (23f60d8 <_ZN7Curtain4loopEv+0x158>)
 23f5faa:	484c      	ldr	r0, [pc, #304]	; (23f60dc <_ZN7Curtain4loopEv+0x15c>)
 23f5fac:	f7fe fba4 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
                    pulse(false);
 23f5fb0:	2100      	movs	r1, #0
 23f5fb2:	4620      	mov	r0, r4
 23f5fb4:	f7ff feca 	bl	23f5d4c <_ZN7Curtain5pulseEb>
 23f5fb8:	f001 fdfe 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
                    _stopMillis = millis() + ((FULL_TIME_MILLIS *  abs(_startPosition - _value)) / 100) - PULSE_MILLIS;
 23f5fbc:	69a2      	ldr	r2, [r4, #24]
 23f5fbe:	f994 3048 	ldrsb.w	r3, [r4, #72]	; 0x48
 23f5fc2:	1a9b      	subs	r3, r3, r2
 23f5fc4:	223c      	movs	r2, #60	; 0x3c
 23f5fc6:	2b00      	cmp	r3, #0
 23f5fc8:	bfb8      	it	lt
 23f5fca:	425b      	neglt	r3, r3
 23f5fcc:	fb02 0003 	mla	r0, r2, r3, r0
                    _stage = 2;
 23f5fd0:	2302      	movs	r3, #2
                    _stopMillis = millis() + ((FULL_TIME_MILLIS *  abs(_startPosition - _value)) / 100) - PULSE_MILLIS;
 23f5fd2:	3864      	subs	r0, #100	; 0x64
 23f5fd4:	63a0      	str	r0, [r4, #56]	; 0x38
                    _stage = 3;
 23f5fd6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 23f5fda:	f001 fded 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
        if(millis() >= _updateMillis) {
 23f5fde:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f5fe0:	4298      	cmp	r0, r3
 23f5fe2:	d330      	bcc.n	23f6046 <_ZN7Curtain4loopEv+0xc6>
            _updateMillis += MILLIS_PER_UPDATE;
 23f5fe4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 23f5fe8:	63e3      	str	r3, [r4, #60]	; 0x3c
 23f5fea:	f001 fde5 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
            int percentDelta = (int)((millis() - _startMillis) / MILLIS_PER_PERCENT);
 23f5fee:	6c25      	ldr	r5, [r4, #64]	; 0x40
            if(_mode == CLOSE_CURTAIN) percentDelta = -percentDelta;
 23f5ff0:	f994 3045 	ldrsb.w	r3, [r4, #69]	; 0x45
            int percentDelta = (int)((millis() - _startMillis) / MILLIS_PER_PERCENT);
 23f5ff4:	1b40      	subs	r0, r0, r5
 23f5ff6:	253c      	movs	r5, #60	; 0x3c
 23f5ff8:	fbb0 f5f5 	udiv	r5, r0, r5
            if(_mode == CLOSE_CURTAIN) percentDelta = -percentDelta;
 23f5ffc:	2b01      	cmp	r3, #1
 23f5ffe:	f104 0108 	add.w	r1, r4, #8
 23f6002:	a804      	add	r0, sp, #16
 23f6004:	bf08      	it	eq
 23f6006:	426d      	negeq	r5, r5
 23f6008:	f004 f9a5 	bl	23fa356 <_ZN6StringC1ERKS_>
            IoT::publishMQTT(_name + "/position", String(_startPosition + percentDelta));
 23f600c:	4934      	ldr	r1, [pc, #208]	; (23f60e0 <_ZN7Curtain4loopEv+0x160>)
 23f600e:	a804      	add	r0, sp, #16
 23f6010:	f004 fa58 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f6014:	4601      	mov	r1, r0
 23f6016:	4668      	mov	r0, sp
 23f6018:	f004 f99d 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f601c:	f994 1048 	ldrsb.w	r1, [r4, #72]	; 0x48
 23f6020:	220a      	movs	r2, #10
 23f6022:	4429      	add	r1, r5
 23f6024:	a808      	add	r0, sp, #32
 23f6026:	f004 f9cc 	bl	23fa3c2 <_ZN6StringC1Eih>
 23f602a:	2200      	movs	r2, #0
 23f602c:	a908      	add	r1, sp, #32
 23f602e:	4668      	mov	r0, sp
 23f6030:	f7fe fcae 	bl	23f4990 <_ZN3IoT11publishMQTTE6StringS0_b>
 23f6034:	a808      	add	r0, sp, #32
 23f6036:	f004 f8f7 	bl	23fa228 <_ZN6StringD1Ev>
 23f603a:	4668      	mov	r0, sp
 23f603c:	f004 f8f4 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f6040:	a804      	add	r0, sp, #16
 23f6042:	f004 f8f1 	bl	23fa228 <_ZN6StringD1Ev>
};
 23f6046:	b00d      	add	sp, #52	; 0x34
 23f6048:	bd30      	pop	{r4, r5, pc}
                    Log.info("Curtain start-of-end pulse");
 23f604a:	4926      	ldr	r1, [pc, #152]	; (23f60e4 <_ZN7Curtain4loopEv+0x164>)
 23f604c:	4823      	ldr	r0, [pc, #140]	; (23f60dc <_ZN7Curtain4loopEv+0x15c>)
 23f604e:	f7fe fb53 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
                    pulse(true);
 23f6052:	2101      	movs	r1, #1
 23f6054:	4620      	mov	r0, r4
 23f6056:	f7ff fe79 	bl	23f5d4c <_ZN7Curtain5pulseEb>
 23f605a:	f001 fdad 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
                    _stopMillis = millis() + PULSE_MILLIS;
 23f605e:	3064      	adds	r0, #100	; 0x64
                    _stage = 3;
 23f6060:	2303      	movs	r3, #3
                    _stopMillis = millis() + PULSE_MILLIS;
 23f6062:	63a0      	str	r0, [r4, #56]	; 0x38
                    _stage = 3;
 23f6064:	e7b7      	b.n	23f5fd6 <_ZN7Curtain4loopEv+0x56>
                    Log.info("Curtain end-of-end pulse");
 23f6066:	4920      	ldr	r1, [pc, #128]	; (23f60e8 <_ZN7Curtain4loopEv+0x168>)
 23f6068:	481c      	ldr	r0, [pc, #112]	; (23f60dc <_ZN7Curtain4loopEv+0x15c>)
 23f606a:	f7fe fb45 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
                    pulse(false);
 23f606e:	2100      	movs	r1, #0
 23f6070:	4620      	mov	r0, r4
 23f6072:	f7ff fe6b 	bl	23f5d4c <_ZN7Curtain5pulseEb>
 23f6076:	f001 fd9f 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
                    _stopMillis = millis() + FULL_TIME_MILLIS - PULSE_MILLIS;
 23f607a:	f500 50b8 	add.w	r0, r0, #5888	; 0x1700
 23f607e:	300c      	adds	r0, #12
                    _stage = 4;
 23f6080:	2304      	movs	r3, #4
                    _stopMillis = millis() + FULL_TIME_MILLIS - PULSE_MILLIS;
 23f6082:	63a0      	str	r0, [r4, #56]	; 0x38
                    _stage = 4;
 23f6084:	e7a7      	b.n	23f5fd6 <_ZN7Curtain4loopEv+0x56>
                    _stage = 0;
 23f6086:	2500      	movs	r5, #0
    StringSumHelper(const String &s) : String(s) {}
 23f6088:	f104 0108 	add.w	r1, r4, #8
 23f608c:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
 23f6090:	a804      	add	r0, sp, #16
 23f6092:	f004 f960 	bl	23fa356 <_ZN6StringC1ERKS_>
                    IoT::publishMQTT(_name + "/state", "stopped");
 23f6096:	4915      	ldr	r1, [pc, #84]	; (23f60ec <_ZN7Curtain4loopEv+0x16c>)
 23f6098:	a804      	add	r0, sp, #16
 23f609a:	f004 fa13 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f609e:	4601      	mov	r1, r0
 23f60a0:	4668      	mov	r0, sp
 23f60a2:	f004 f958 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f60a6:	4912      	ldr	r1, [pc, #72]	; (23f60f0 <_ZN7Curtain4loopEv+0x170>)
 23f60a8:	a808      	add	r0, sp, #32
 23f60aa:	f004 f908 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f60ae:	462a      	mov	r2, r5
 23f60b0:	a908      	add	r1, sp, #32
 23f60b2:	4668      	mov	r0, sp
 23f60b4:	f7fe fc6c 	bl	23f4990 <_ZN3IoT11publishMQTTE6StringS0_b>
 23f60b8:	a808      	add	r0, sp, #32
 23f60ba:	f004 f8b5 	bl	23fa228 <_ZN6StringD1Ev>
 23f60be:	4668      	mov	r0, sp
 23f60c0:	f004 f8b2 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f60c4:	a804      	add	r0, sp, #16
 23f60c6:	f004 f8af 	bl	23fa228 <_ZN6StringD1Ev>
                    break;
 23f60ca:	e786      	b.n	23f5fda <_ZN7Curtain4loopEv+0x5a>
                    Log.error("Invalid _stage %d",_stage);
 23f60cc:	4909      	ldr	r1, [pc, #36]	; (23f60f4 <_ZN7Curtain4loopEv+0x174>)
 23f60ce:	4803      	ldr	r0, [pc, #12]	; (23f60dc <_ZN7Curtain4loopEv+0x15c>)
 23f60d0:	f7fe fb04 	bl	23f46dc <_ZNK5spark6Logger5errorEPKcz>
 23f60d4:	e781      	b.n	23f5fda <_ZN7Curtain4loopEv+0x5a>
 23f60d6:	bf00      	nop
 23f60d8:	023ff31c 	.word	0x023ff31c
 23f60dc:	1007ae20 	.word	0x1007ae20
 23f60e0:	023ff3cc 	.word	0x023ff3cc
 23f60e4:	023ff337 	.word	0x023ff337
 23f60e8:	023ff352 	.word	0x023ff352
 23f60ec:	023ff2ff 	.word	0x023ff2ff
 23f60f0:	023ff36b 	.word	0x023ff36b
 23f60f4:	023ff373 	.word	0x023ff373

023f60f8 <_ZN6Device7setHoldEb>:
    virtual void setHold(bool stopped) { return; };     // eg. Pause closing curtain
 23f60f8:	4770      	bx	lr

023f60fa <_ZN6Device5beginEv>:
    virtual void begin() {};
 23f60fa:	4770      	bx	lr

023f60fc <_ZN10NCD4SwitchC1Ea6StringS0_>:
/**
 * Constructor
 * @param switchIndex is the switch number on the NCD board (0-3)
 * @param name String name used to address the relay.
 */
NCD4Switch::NCD4Switch(int8_t switchIndex, String name, String room)
 23f60fc:	b570      	push	{r4, r5, r6, lr}
 23f60fe:	461e      	mov	r6, r3
 23f6100:	4604      	mov	r4, r0
 23f6102:	b088      	sub	sp, #32
 23f6104:	460d      	mov	r5, r1
    : Device(name, room)
 23f6106:	4668      	mov	r0, sp
 23f6108:	4611      	mov	r1, r2
 23f610a:	f004 f924 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f610e:	4631      	mov	r1, r6
 23f6110:	a804      	add	r0, sp, #16
 23f6112:	f004 f920 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f6116:	4669      	mov	r1, sp
 23f6118:	234c      	movs	r3, #76	; 0x4c
 23f611a:	aa04      	add	r2, sp, #16
 23f611c:	4620      	mov	r0, r4
 23f611e:	f000 fc3d 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f6122:	a804      	add	r0, sp, #16
 23f6124:	f004 f880 	bl	23fa228 <_ZN6StringD1Ev>
 23f6128:	4668      	mov	r0, sp
 23f612a:	f004 f87d 	bl	23fa228 <_ZN6StringD1Ev>
 23f612e:	4b0b      	ldr	r3, [pc, #44]	; (23f615c <_ZN10NCD4SwitchC1Ea6StringS0_+0x60>)
{
    _lastPollTime = 0;
    _type         = 'S';
    
    if(switchIndex > 0 && switchIndex <= 3) {
 23f6130:	1e69      	subs	r1, r5, #1
    : Device(name, room)
 23f6132:	6023      	str	r3, [r4, #0]
    _lastPollTime = 0;
 23f6134:	2300      	movs	r3, #0
 23f6136:	63a3      	str	r3, [r4, #56]	; 0x38
    _type         = 'S';
 23f6138:	2353      	movs	r3, #83	; 0x53
 23f613a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if(switchIndex > 0 && switchIndex <= 3) {
 23f613e:	b2cb      	uxtb	r3, r1
 23f6140:	2b02      	cmp	r3, #2
 23f6142:	f04f 0310 	mov.w	r3, #16
        _switchBitmap = 0x10 << (switchIndex-1);
    } else {
        _switchBitmap = 0x10;   // If 0 or invalid, set to first switch
    }
}
 23f6146:	4620      	mov	r0, r4
        _switchBitmap = 0x10;   // If 0 or invalid, set to first switch
 23f6148:	bf8f      	iteee	hi
 23f614a:	4619      	movhi	r1, r3
        _switchBitmap = 0x10 << (switchIndex-1);
 23f614c:	b249      	sxtbls	r1, r1
 23f614e:	fa03 f101 	lslls.w	r1, r3, r1
 23f6152:	b249      	sxtbls	r1, r1
 23f6154:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
}
 23f6158:	b008      	add	sp, #32
 23f615a:	bd70      	pop	{r4, r5, r6, pc}
 23f615c:	023ff3e0 	.word	0x023ff3e0

023f6160 <_ZN10NCD4Switch10isSwitchOnEv>:

/**
 * isSwitchOn
 * Return state of switch (inverted: low = 100, high = 0)
 */
bool NCD4Switch::isSwitchOn() {
 23f6160:	b510      	push	{r4, lr}
 23f6162:	4604      	mov	r4, r0
    int data = MCP23008::read();
 23f6164:	f000 fed2 	bl	23f6f0c <_ZN8MCP230084readEv>
    return(data & _switchBitmap);    // Inverted by IPOL register
 23f6168:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
 23f616c:	4203      	tst	r3, r0
}
 23f616e:	bf14      	ite	ne
 23f6170:	2001      	movne	r0, #1
 23f6172:	2000      	moveq	r0, #0
 23f6174:	bd10      	pop	{r4, pc}

023f6176 <_ZN10NCD4Switch19isTimeToCheckSwitchEv>:
/**
 * isTimeToCheckSwitch()
 * @return bool if enough time has elapsed to sample switch again
 */
bool NCD4Switch::isTimeToCheckSwitch()
{
 23f6176:	b510      	push	{r4, lr}
 23f6178:	4604      	mov	r4, r0
 23f617a:	f001 fd1d 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
    long currentTime = millis();
    if (currentTime < _lastPollTime + POLL_INTERVAL_MILLIS)
 23f617e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23f6180:	3363      	adds	r3, #99	; 0x63
 23f6182:	4283      	cmp	r3, r0
    {
        return false;
    }
    _lastPollTime = currentTime;
 23f6184:	bfb6      	itet	lt
 23f6186:	63a0      	strlt	r0, [r4, #56]	; 0x38
        return false;
 23f6188:	2000      	movge	r0, #0
    return true;
 23f618a:	2001      	movlt	r0, #1
}
 23f618c:	bd10      	pop	{r4, pc}

023f618e <_ZN10NCD4Switch15didSwitchChangeEv>:
/**
 * didSwitchChange()
 * @return bool if switch has changed since last reading
 */
bool NCD4Switch::didSwitchChange()
{
 23f618e:	b510      	push	{r4, lr}
 23f6190:	4604      	mov	r4, r0
    int newValue = isSwitchOn() ? 100 : 0;
 23f6192:	f7ff ffe5 	bl	23f6160 <_ZN10NCD4Switch10isSwitchOnEv>
 23f6196:	2800      	cmp	r0, #0
    bool oldState = (_value != 0);
    
    if(oldState == false && newValue == 100) {
 23f6198:	69a0      	ldr	r0, [r4, #24]
    int newValue = isSwitchOn() ? 100 : 0;
 23f619a:	bf14      	ite	ne
 23f619c:	2364      	movne	r3, #100	; 0x64
 23f619e:	2300      	moveq	r3, #0
    if(oldState == false && newValue == 100) {
 23f61a0:	b920      	cbnz	r0, 23f61ac <_ZN10NCD4Switch15didSwitchChangeEv+0x1e>
 23f61a2:	2b64      	cmp	r3, #100	; 0x64
 23f61a4:	d101      	bne.n	23f61aa <_ZN10NCD4Switch15didSwitchChangeEv+0x1c>
        return true;
    }
    
    if(oldState == true && newValue == 0) {
        _value = 0;
        return true;
 23f61a6:	2001      	movs	r0, #1
        _value = 0;
 23f61a8:	61a3      	str	r3, [r4, #24]
    }
    
    return false;
}
 23f61aa:	bd10      	pop	{r4, pc}
    if(oldState == true && newValue == 0) {
 23f61ac:	2b00      	cmp	r3, #0
 23f61ae:	d0fa      	beq.n	23f61a6 <_ZN10NCD4Switch15didSwitchChangeEv+0x18>
    return false;
 23f61b0:	2000      	movs	r0, #0
 23f61b2:	e7fa      	b.n	23f61aa <_ZN10NCD4Switch15didSwitchChangeEv+0x1c>

023f61b4 <_ZN10NCD4Switch6notifyEv>:
/**
 * notify()
 * Publish switch state
 */
void NCD4Switch::notify()
{
 23f61b4:	b510      	push	{r4, lr}
 23f61b6:	4604      	mov	r4, r0
 23f61b8:	b090      	sub	sp, #64	; 0x40
    String message = String(_value);
 23f61ba:	220a      	movs	r2, #10
 23f61bc:	6981      	ldr	r1, [r0, #24]
 23f61be:	4668      	mov	r0, sp
 23f61c0:	f004 f8ff 	bl	23fa3c2 <_ZN6StringC1Eih>
    StringSumHelper(const String &s) : String(s) {}
 23f61c4:	f104 0108 	add.w	r1, r4, #8
 23f61c8:	a804      	add	r0, sp, #16
 23f61ca:	f004 f8c4 	bl	23fa356 <_ZN6StringC1ERKS_>
    IoT::publishMQTT(_name + "/get/position",message);
 23f61ce:	490f      	ldr	r1, [pc, #60]	; (23f620c <_ZN10NCD4Switch6notifyEv+0x58>)
 23f61d0:	a804      	add	r0, sp, #16
 23f61d2:	f004 f977 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f61d6:	4601      	mov	r1, r0
 23f61d8:	a808      	add	r0, sp, #32
 23f61da:	f004 f8bc 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f61de:	4669      	mov	r1, sp
 23f61e0:	a80c      	add	r0, sp, #48	; 0x30
 23f61e2:	f004 f8b8 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f61e6:	2200      	movs	r2, #0
 23f61e8:	a90c      	add	r1, sp, #48	; 0x30
 23f61ea:	a808      	add	r0, sp, #32
 23f61ec:	f7fe fbd0 	bl	23f4990 <_ZN3IoT11publishMQTTE6StringS0_b>
 23f61f0:	a80c      	add	r0, sp, #48	; 0x30
 23f61f2:	f004 f819 	bl	23fa228 <_ZN6StringD1Ev>
 23f61f6:	a808      	add	r0, sp, #32
 23f61f8:	f004 f816 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f61fc:	a804      	add	r0, sp, #16
 23f61fe:	f004 f813 	bl	23fa228 <_ZN6StringD1Ev>
    String message = String(_value);
 23f6202:	4668      	mov	r0, sp
 23f6204:	f004 f810 	bl	23fa228 <_ZN6StringD1Ev>
}
 23f6208:	b010      	add	sp, #64	; 0x40
 23f620a:	bd10      	pop	{r4, pc}
 23f620c:	023ff3c8 	.word	0x023ff3c8

023f6210 <_ZN10NCD4Switch4loopEv>:
{
 23f6210:	b510      	push	{r4, lr}
 23f6212:	4604      	mov	r4, r0
    if (isTimeToCheckSwitch())
 23f6214:	f7ff ffaf 	bl	23f6176 <_ZN10NCD4Switch19isTimeToCheckSwitchEv>
 23f6218:	b140      	cbz	r0, 23f622c <_ZN10NCD4Switch4loopEv+0x1c>
        if (didSwitchChange())
 23f621a:	4620      	mov	r0, r4
 23f621c:	f7ff ffb7 	bl	23f618e <_ZN10NCD4Switch15didSwitchChangeEv>
 23f6220:	b120      	cbz	r0, 23f622c <_ZN10NCD4Switch4loopEv+0x1c>
            notify();
 23f6222:	4620      	mov	r0, r4
}
 23f6224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            notify();
 23f6228:	f7ff bfc4 	b.w	23f61b4 <_ZN10NCD4Switch6notifyEv>
}
 23f622c:	bd10      	pop	{r4, pc}

023f622e <_ZN9NCD8Light5beginEv>:
    _type           = 'L';
}

void NCD8Light::begin() {
    // Initialization done by PCA9634
}
 23f622e:	4770      	bx	lr

023f6230 <_ZN9NCD8Light5resetEv>:

void NCD8Light::reset() {
 23f6230:	b508      	push	{r3, lr}
    Log.error("NCD8Light reset");
 23f6232:	4904      	ldr	r1, [pc, #16]	; (23f6244 <_ZN9NCD8Light5resetEv+0x14>)
 23f6234:	4804      	ldr	r0, [pc, #16]	; (23f6248 <_ZN9NCD8Light5resetEv+0x18>)
 23f6236:	f7fe fa51 	bl	23f46dc <_ZNK5spark6Logger5errorEPKcz>
    PCA9634::reset();
}
 23f623a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    PCA9634::reset();
 23f623e:	f000 bfa1 	b.w	23f7184 <_ZN7PCA96345resetEv>
 23f6242:	bf00      	nop
 23f6244:	023ff418 	.word	0x023ff418
 23f6248:	1007ae20 	.word	0x1007ae20

023f624c <_ZN9NCD8LightC1Ei6StringS0_ii>:
NCD8Light::NCD8Light(int lightNum, String name, String room, int duration, int curve)
 23f624c:	b570      	push	{r4, r5, r6, lr}
 23f624e:	461e      	mov	r6, r3
 23f6250:	4604      	mov	r4, r0
 23f6252:	b088      	sub	sp, #32
 23f6254:	460d      	mov	r5, r1
                     : Device(name, room)
 23f6256:	4668      	mov	r0, sp
 23f6258:	4611      	mov	r1, r2
 23f625a:	f004 f87c 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f625e:	4631      	mov	r1, r6
 23f6260:	a804      	add	r0, sp, #16
 23f6262:	f004 f878 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f6266:	aa04      	add	r2, sp, #16
 23f6268:	234c      	movs	r3, #76	; 0x4c
 23f626a:	4669      	mov	r1, sp
 23f626c:	4620      	mov	r0, r4
 23f626e:	f000 fb95 	bl	23f699c <_ZN6DeviceC1E6StringS0_c>
 23f6272:	a804      	add	r0, sp, #16
 23f6274:	f003 ffd8 	bl	23fa228 <_ZN6StringD1Ev>
 23f6278:	4668      	mov	r0, sp
 23f627a:	f003 ffd5 	bl	23fa228 <_ZN6StringD1Ev>
 23f627e:	4b0a      	ldr	r3, [pc, #40]	; (23f62a8 <_ZN9NCD8LightC1Ei6StringS0_ii+0x5c>)
    _value          = 0;                // Base Device class
 23f6280:	2200      	movs	r2, #0
                     : Device(name, room)
 23f6282:	6023      	str	r3, [r4, #0]
    _dimmingMSecs   = duration;         // Default 2000
 23f6284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
}
 23f6286:	4620      	mov	r0, r4
    _dimmingMSecs   = duration;         // Default 2000
 23f6288:	63e3      	str	r3, [r4, #60]	; 0x3c
    _curve          = curve;            // Default 2
 23f628a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    _lightNum       = lightNum-1;       // Convert to 0 based
 23f628c:	3d01      	subs	r5, #1
    _curve          = curve;            // Default 2
 23f628e:	6423      	str	r3, [r4, #64]	; 0x40
    _currentLevel   = 0.0;              // These 2 used to perform dimming
 23f6290:	2300      	movs	r3, #0
 23f6292:	6463      	str	r3, [r4, #68]	; 0x44
    _targetLevel    = 0.0;
 23f6294:	64a3      	str	r3, [r4, #72]	; 0x48
    _incrementPerMillisecond = 0.0;
 23f6296:	64e3      	str	r3, [r4, #76]	; 0x4c
    _type           = 'L';
 23f6298:	234c      	movs	r3, #76	; 0x4c
    _lightNum       = lightNum-1;       // Convert to 0 based
 23f629a:	63a5      	str	r5, [r4, #56]	; 0x38
    _value          = 0;                // Base Device class
 23f629c:	61a2      	str	r2, [r4, #24]
    _lastUpdateTime = 0;
 23f629e:	6522      	str	r2, [r4, #80]	; 0x50
    _type           = 'L';
 23f62a0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 23f62a4:	b008      	add	sp, #32
 23f62a6:	bd70      	pop	{r4, r5, r6, pc}
 23f62a8:	023ff430 	.word	0x023ff430
 23f62ac:	00000000 	.word	0x00000000

023f62b0 <_ZN9NCD8Light18startSmoothDimmingEv>:
/**
 * Start smooth dimming
 * Use float _currentValue to smoothly transition
 * An alternative approach would be to calculate # msecs per step
 */
void NCD8Light::startSmoothDimming() {
 23f62b0:	b510      	push	{r4, lr}
 23f62b2:	ed2d 8b02 	vpush	{d8}
    if(abs(_currentLevel - _targetLevel) > 0.001) { // if !=
 23f62b6:	ed90 7a12 	vldr	s14, [r0, #72]	; 0x48
 23f62ba:	edd0 7a11 	vldr	s15, [r0, #68]	; 0x44
 23f62be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 23f62c2:	eef0 7ae7 	vabs.f32	s15, s15
void NCD8Light::startSmoothDimming() {
 23f62c6:	4604      	mov	r4, r0
    if(abs(_currentLevel - _targetLevel) > 0.001) { // if !=
 23f62c8:	ee17 0a90 	vmov	r0, s15
 23f62cc:	f7fc fd90 	bl	23f2df0 <__aeabi_f2d>
 23f62d0:	a319      	add	r3, pc, #100	; (adr r3, 23f6338 <_ZN9NCD8Light18startSmoothDimmingEv+0x88>)
 23f62d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f62d6:	f7fd f873 	bl	23f33c0 <__aeabi_dcmpgt>
 23f62da:	b1e0      	cbz	r0, 23f6316 <_ZN9NCD8Light18startSmoothDimmingEv+0x66>
 23f62dc:	f001 fc6c 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
        _lastUpdateTime = millis();
        float delta = _targetLevel - _currentLevel;
 23f62e0:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 23f62e4:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
 23f62e8:	ee38 8a67 	vsub.f32	s16, s16, s15
        _incrementPerMillisecond = delta / _dimmingMSecs;
 23f62ec:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 23f62f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f62f4:	eec8 8a27 	vdiv.f32	s17, s16, s15
        if(abs(_incrementPerMillisecond) < 0.001) {
 23f62f8:	eef0 7ae8 	vabs.f32	s15, s17
        _lastUpdateTime = millis();
 23f62fc:	6520      	str	r0, [r4, #80]	; 0x50
        if(abs(_incrementPerMillisecond) < 0.001) {
 23f62fe:	ee17 0a90 	vmov	r0, s15
 23f6302:	f7fc fd75 	bl	23f2df0 <__aeabi_f2d>
 23f6306:	a30c      	add	r3, pc, #48	; (adr r3, 23f6338 <_ZN9NCD8Light18startSmoothDimmingEv+0x88>)
 23f6308:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f630c:	f7fd f83a 	bl	23f3384 <__aeabi_dcmplt>
 23f6310:	b920      	cbnz	r0, 23f631c <_ZN9NCD8Light18startSmoothDimmingEv+0x6c>
        _incrementPerMillisecond = delta / _dimmingMSecs;
 23f6312:	edc4 8a13 	vstr	s17, [r4, #76]	; 0x4c
            } else {
                _incrementPerMillisecond = -0.001;
            }
        }
    }
}
 23f6316:	ecbd 8b02 	vpop	{d8}
 23f631a:	bd10      	pop	{r4, pc}
            if(delta > 0) {
 23f631c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23f6320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                _incrementPerMillisecond = 0.001;
 23f6324:	bfcc      	ite	gt
 23f6326:	4b02      	ldrgt	r3, [pc, #8]	; (23f6330 <_ZN9NCD8Light18startSmoothDimmingEv+0x80>)
                _incrementPerMillisecond = -0.001;
 23f6328:	4b02      	ldrle	r3, [pc, #8]	; (23f6334 <_ZN9NCD8Light18startSmoothDimmingEv+0x84>)
 23f632a:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 23f632c:	e7f3      	b.n	23f6316 <_ZN9NCD8Light18startSmoothDimmingEv+0x66>
 23f632e:	bf00      	nop
 23f6330:	3a83126f 	.word	0x3a83126f
 23f6334:	ba83126f 	.word	0xba83126f
 23f6338:	d2f1a9fc 	.word	0xd2f1a9fc
 23f633c:	3f50624d 	.word	0x3f50624d

023f6340 <_ZN9NCD8Light12convertTo255Ei>:


/**
 Convert 0 => 0, 100 => 255 with exponential scale
 */
int NCD8Light::convertTo255(int value) {
 23f6340:	b510      	push	{r4, lr}
 23f6342:	4604      	mov	r4, r0
 23f6344:	ed2d 8b04 	vpush	{d8-d9}
    if(value == 0) return 0;
 23f6348:	4608      	mov	r0, r1
 23f634a:	b1f9      	cbz	r1, 23f638c <_ZN9NCD8Light12convertTo255Ei+0x4c>
    if(value == 100) return 255;
 23f634c:	2964      	cmp	r1, #100	; 0x64
 23f634e:	d05c      	beq.n	23f640a <_ZN9NCD8Light12convertTo255Ei+0xca>
    float expValue = pow(CURVE_BASE, float(value)) - 1.0;
 23f6350:	ee07 1a90 	vmov	s15, r1
 23f6354:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 23f6358:	ee18 0a10 	vmov	r0, s16
 23f635c:	f7fc fd48 	bl	23f2df0 <__aeabi_f2d>
    float linValue = (float)value * 255 / 100;
 23f6360:	eddf 8a2d 	vldr	s17, [pc, #180]	; 23f6418 <_ZN9NCD8Light12convertTo255Ei+0xd8>
 23f6364:	ec41 0b11 	vmov	d1, r0, r1
 23f6368:	ed9f 0b29 	vldr	d0, [pc, #164]	; 23f6410 <_ZN9NCD8Light12convertTo255Ei+0xd0>
 23f636c:	f005 fb9c 	bl	23fbaa8 <pow>
 23f6370:	ee28 8a28 	vmul.f32	s16, s16, s17
 23f6374:	eddf 7a29 	vldr	s15, [pc, #164]	; 23f641c <_ZN9NCD8Light12convertTo255Ei+0xdc>
    // Curve argument specifies curve shape
    // 0 = Linear
    // 1 = Exponential
    // 2 = 50/50 split
    // 3 = 75/25 split
    if(_curve == 0) {           // Linear
 23f6378:	6c24      	ldr	r4, [r4, #64]	; 0x40
 23f637a:	ec51 0b10 	vmov	r0, r1, d0
    float linValue = (float)value * 255 / 100;
 23f637e:	ee88 9a27 	vdiv.f32	s18, s16, s15
    if(_curve == 0) {           // Linear
 23f6382:	b934      	cbnz	r4, 23f6392 <_ZN9NCD8Light12convertTo255Ei+0x52>
        return linValue;
 23f6384:	eefd 7ac9 	vcvt.s32.f32	s15, s18
    } else if(_curve == 1) {    // Exponential (redundant)
        return expValue;
 23f6388:	ee17 0a90 	vmov	r0, s15
    float linearPart = linValue * linAmount;
    float exponentialPart = expValue * expAmount;
//    Log.info("Linear %.2f * %.2f, Exp %.2f * %.2f",linValue,linAmount,expValue,expAmount);
    float combinedValue = constrain(exponentialPart + linearPart, 0.0, 255.0);
    return round(combinedValue);
}
 23f638c:	ecbd 8b04 	vpop	{d8-d9}
 23f6390:	bd10      	pop	{r4, pc}
    float expValue = pow(CURVE_BASE, float(value)) - 1.0;
 23f6392:	2200      	movs	r2, #0
 23f6394:	4b22      	ldr	r3, [pc, #136]	; (23f6420 <_ZN9NCD8Light12convertTo255Ei+0xe0>)
 23f6396:	f7fc fbcb 	bl	23f2b30 <__aeabi_dsub>
 23f639a:	f7fd f851 	bl	23f3440 <__aeabi_d2f>
    } else if(_curve == 1) {    // Exponential (redundant)
 23f639e:	2c01      	cmp	r4, #1
    float expValue = pow(CURVE_BASE, float(value)) - 1.0;
 23f63a0:	ee08 0a10 	vmov	s16, r0
    } else if(_curve == 1) {    // Exponential (redundant)
 23f63a4:	d102      	bne.n	23f63ac <_ZN9NCD8Light12convertTo255Ei+0x6c>
        return expValue;
 23f63a6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23f63aa:	e7ed      	b.n	23f6388 <_ZN9NCD8Light12convertTo255Ei+0x48>
    float linAmount = (float)(_curve - 1) / (float)_curve;    // 0.5
 23f63ac:	1e63      	subs	r3, r4, #1
 23f63ae:	ee07 3a90 	vmov	s15, r3
 23f63b2:	ee07 4a10 	vmov	s14, r4
 23f63b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f63ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    float expAmount = 1.0 / _curve;             // 0.5
 23f63be:	4620      	mov	r0, r4
    float linAmount = (float)(_curve - 1) / (float)_curve;    // 0.5
 23f63c0:	eec7 9a87 	vdiv.f32	s19, s15, s14
    float expAmount = 1.0 / _curve;             // 0.5
 23f63c4:	f7fc fd02 	bl	23f2dcc <__aeabi_i2d>
 23f63c8:	4602      	mov	r2, r0
 23f63ca:	460b      	mov	r3, r1
 23f63cc:	2000      	movs	r0, #0
 23f63ce:	4914      	ldr	r1, [pc, #80]	; (23f6420 <_ZN9NCD8Light12convertTo255Ei+0xe0>)
 23f63d0:	f7fc fe90 	bl	23f30f4 <__aeabi_ddiv>
 23f63d4:	f7fd f834 	bl	23f3440 <__aeabi_d2f>
    float exponentialPart = expValue * expAmount;
 23f63d8:	ee07 0a90 	vmov	s15, r0
 23f63dc:	ee67 7a88 	vmul.f32	s15, s15, s16
    float combinedValue = constrain(exponentialPart + linearPart, 0.0, 255.0);
 23f63e0:	eee9 7a29 	vfma.f32	s15, s18, s19
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 23f63e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23f63e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f63ec:	d40a      	bmi.n	23f6404 <_ZN9NCD8Light12convertTo255Ei+0xc4>
 23f63ee:	eef4 7a68 	vcmp.f32	s15, s17
 23f63f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f63f6:	fe78 7aa7 	vselgt.f32	s15, s17, s15
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 23f63fa:	fef8 7a67 	vrinta.f32	s15, s15
    return round(combinedValue);
 23f63fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f6402:	e7c1      	b.n	23f6388 <_ZN9NCD8Light12convertTo255Ei+0x48>
 23f6404:	eddf 7a07 	vldr	s15, [pc, #28]	; 23f6424 <_ZN9NCD8Light12convertTo255Ei+0xe4>
 23f6408:	e7f7      	b.n	23f63fa <_ZN9NCD8Light12convertTo255Ei+0xba>
    if(value == 100) return 255;
 23f640a:	20ff      	movs	r0, #255	; 0xff
 23f640c:	e7be      	b.n	23f638c <_ZN9NCD8Light12convertTo255Ei+0x4c>
 23f640e:	bf00      	nop
 23f6410:	bfb7e3db 	.word	0xbfb7e3db
 23f6414:	3ff0e98b 	.word	0x3ff0e98b
 23f6418:	437f0000 	.word	0x437f0000
 23f641c:	42c80000 	.word	0x42c80000
 23f6420:	3ff00000 	.word	0x3ff00000
 23f6424:	00000000 	.word	0x00000000

023f6428 <_ZN9NCD8Light9outputPWMEv>:
void NCD8Light::outputPWM() {
 23f6428:	b510      	push	{r4, lr}
    int current255 = convertTo255(_currentLevel);
 23f642a:	edd0 7a11 	vldr	s15, [r0, #68]	; 0x44
 23f642e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f6432:	ee17 1a90 	vmov	r1, s15
void NCD8Light::outputPWM() {
 23f6436:	4604      	mov	r4, r0
    int current255 = convertTo255(_currentLevel);
 23f6438:	f7ff ff82 	bl	23f6340 <_ZN9NCD8Light12convertTo255Ei>
 23f643c:	4601      	mov	r1, r0
    PCA9634::outputPWM(_lightNum, current255);
 23f643e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 23f6440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PCA9634::outputPWM(_lightNum, current255);
 23f6444:	f000 beb8 	b.w	23f71b8 <_ZN7PCA96349outputPWMEii>

023f6448 <_ZN9NCD8Light8setValueEi>:
    int checkedValue = constrain(newValue, 0, 100);
 23f6448:	2964      	cmp	r1, #100	; 0x64
 23f644a:	bfa8      	it	ge
 23f644c:	2164      	movge	r1, #100	; 0x64
    if( checkedValue == _value ) {
 23f644e:	6982      	ldr	r2, [r0, #24]
 23f6450:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 23f6454:	428a      	cmp	r2, r1
 23f6456:	d101      	bne.n	23f645c <_ZN9NCD8Light8setValueEi+0x14>
        outputPWM();
 23f6458:	f7ff bfe6 	b.w	23f6428 <_ZN9NCD8Light9outputPWMEv>
    _targetLevel = (float)checkedValue;
 23f645c:	ee07 1a90 	vmov	s15, r1
 23f6460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if(_dimmingMSecs == 0) {
 23f6464:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _targetLevel = (float)checkedValue;
 23f6466:	edc0 7a12 	vstr	s15, [r0, #72]	; 0x48
    if(_dimmingMSecs == 0) {
 23f646a:	b91a      	cbnz	r2, 23f6474 <_ZN9NCD8Light8setValueEi+0x2c>
        _currentLevel = _targetLevel;
 23f646c:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
        _value = checkedValue;
 23f6470:	6181      	str	r1, [r0, #24]
 23f6472:	e7f1      	b.n	23f6458 <_ZN9NCD8Light8setValueEi+0x10>
        startSmoothDimming();
 23f6474:	f7ff bf1c 	b.w	23f62b0 <_ZN9NCD8Light18startSmoothDimmingEv>

023f6478 <_ZN9NCD8Light4loopEv>:
{
 23f6478:	b510      	push	{r4, lr}
    if(abs(_currentLevel - _targetLevel) < 0.001) { // if ==
 23f647a:	ed90 7a12 	vldr	s14, [r0, #72]	; 0x48
 23f647e:	edd0 7a11 	vldr	s15, [r0, #68]	; 0x44
 23f6482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 23f6486:	eef0 7ae7 	vabs.f32	s15, s15
{
 23f648a:	4604      	mov	r4, r0
    if(abs(_currentLevel - _targetLevel) < 0.001) { // if ==
 23f648c:	ee17 0a90 	vmov	r0, s15
 23f6490:	f7fc fcae 	bl	23f2df0 <__aeabi_f2d>
 23f6494:	a326      	add	r3, pc, #152	; (adr r3, 23f6530 <_ZN9NCD8Light4loopEv+0xb8>)
 23f6496:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f649a:	f7fc ff73 	bl	23f3384 <__aeabi_dcmplt>
 23f649e:	2800      	cmp	r0, #0
 23f64a0:	d13f      	bne.n	23f6522 <_ZN9NCD8Light4loopEv+0xaa>
 23f64a2:	f001 fb89 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
    unsigned long millisSinceLastUpdate = (loopTime - _lastUpdateTime);
 23f64a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
    _currentLevel += _incrementPerMillisecond * millisSinceLastUpdate;
 23f64a8:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
    unsigned long millisSinceLastUpdate = (loopTime - _lastUpdateTime);
 23f64ac:	1ac3      	subs	r3, r0, r3
    _currentLevel += _incrementPerMillisecond * millisSinceLastUpdate;
 23f64ae:	ee07 3a90 	vmov	s15, r3
    if(_incrementPerMillisecond > 0) {  // Going up?
 23f64b2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    _currentLevel += _incrementPerMillisecond * millisSinceLastUpdate;
 23f64b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 23f64ba:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
    if(_incrementPerMillisecond > 0) {  // Going up?
 23f64be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    _currentLevel += _incrementPerMillisecond * millisSinceLastUpdate;
 23f64c2:	eee6 7a87 	vfma.f32	s15, s13, s14
 23f64c6:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 23f64ca:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
        if(_currentLevel > _targetLevel) {
 23f64ce:	eef4 7ac7 	vcmpe.f32	s15, s14
    if(_incrementPerMillisecond > 0) {  // Going up?
 23f64d2:	dd05      	ble.n	23f64e0 <_ZN9NCD8Light4loopEv+0x68>
        if(_currentLevel > _targetLevel) {
 23f64d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f64d8:	dd05      	ble.n	23f64e6 <_ZN9NCD8Light4loopEv+0x6e>
            _currentLevel = _targetLevel;
 23f64da:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
 23f64de:	e002      	b.n	23f64e6 <_ZN9NCD8Light4loopEv+0x6e>
        if(_currentLevel < _targetLevel) {
 23f64e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f64e4:	d4f9      	bmi.n	23f64da <_ZN9NCD8Light4loopEv+0x62>
    _currentLevel = constrain(_currentLevel, 0.0, 100.0);
 23f64e6:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 23f64ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23f64ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f64f2:	d413      	bmi.n	23f651c <_ZN9NCD8Light4loopEv+0xa4>
 23f64f4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 23f6528 <_ZN9NCD8Light4loopEv+0xb0>
 23f64f8:	eef4 7a47 	vcmp.f32	s15, s14
 23f64fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f6500:	fe77 7a27 	vselgt.f32	s15, s14, s15
 23f6504:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
    _value = (int)_currentLevel;
 23f6508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    _lastUpdateTime = loopTime;
 23f650c:	6520      	str	r0, [r4, #80]	; 0x50
    _value = (int)_currentLevel;
 23f650e:	edc4 7a06 	vstr	s15, [r4, #24]
    outputPWM();
 23f6512:	4620      	mov	r0, r4
};
 23f6514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    outputPWM();
 23f6518:	f7ff bf86 	b.w	23f6428 <_ZN9NCD8Light9outputPWMEv>
 23f651c:	eddf 7a03 	vldr	s15, [pc, #12]	; 23f652c <_ZN9NCD8Light4loopEv+0xb4>
 23f6520:	e7f0      	b.n	23f6504 <_ZN9NCD8Light4loopEv+0x8c>
};
 23f6522:	bd10      	pop	{r4, pc}
 23f6524:	f3af 8000 	nop.w
 23f6528:	42c80000 	.word	0x42c80000
 23f652c:	00000000 	.word	0x00000000
 23f6530:	d2f1a9fc 	.word	0xd2f1a9fc
 23f6534:	3f50624d 	.word	0x3f50624d

023f6538 <_ZN6Device4loopEv>:
    virtual int  getChangedValue();
    
    virtual void setLatLong(float latitude, float longitude);

    // Perform things continuously, such as fading or slewing
    virtual void loop() {};
 23f6538:	4770      	bx	lr

023f653a <_ZN6Device15getChangedValueEv>:
    }
}

// Check if device has changed and return new value or -1
int  Device::getChangedValue() {
    if( _value == _previous ) {
 23f653a:	6983      	ldr	r3, [r0, #24]
 23f653c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 23f653e:	4293      	cmp	r3, r2
        //Don't put a log here. This is called almost every loop.
        return -1;
 23f6540:	bf0c      	ite	eq
 23f6542:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    }
    // Log here is ok because it only occurs when value changes
    //Log.info("Device "+_name+" getChangedValue() changed");
    _previous = _value;
 23f6546:	62c3      	strne	r3, [r0, #44]	; 0x2c
    return _value;
}
 23f6548:	4618      	mov	r0, r3
 23f654a:	4770      	bx	lr

023f654c <_ZN6Device10setLatLongEff>:
    return device->getChangedValue();
}

void Device::setLatLong(float latitude, float longitude) {
    // Nothing to do. Device will override if needed.
}
 23f654c:	4770      	bx	lr

023f654e <_ZN6Device4mqttE6StringS0_>:

void Device::mqtt(String topic, String message) {
    // Nothing to do. Device will override if needed.
}
 23f654e:	4770      	bx	lr

023f6550 <_ZN6Device16calculateDevicesEv>:

// The Devices variable is used by Alexa discovery and ReportState and iOS app.
// It is a comma delimited list of <T>:<Name>
// Note: Alexa skill hasn't been updated to support @<room>, so removing it for now.
String Device::calculateDevices()
{
 23f6550:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f6552:	b08d      	sub	sp, #52	; 0x34
 23f6554:	4605      	mov	r5, r0
    String devices = "";
 23f6556:	4924      	ldr	r1, [pc, #144]	; (23f65e8 <_ZN6Device16calculateDevicesEv+0x98>)
 23f6558:	4668      	mov	r0, sp
 23f655a:	f003 feb0 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f655e:	4b23      	ldr	r3, [pc, #140]	; (23f65ec <_ZN6Device16calculateDevicesEv+0x9c>)

        if(ptr->_type != 'X') {     // Ignore Checklist items
            devices += String(ptr->_type)+":";
 23f6560:	4e23      	ldr	r6, [pc, #140]	; (23f65f0 <_ZN6Device16calculateDevicesEv+0xa0>)
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f6562:	681c      	ldr	r4, [r3, #0]
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23f6564:	4f23      	ldr	r7, [pc, #140]	; (23f65f4 <_ZN6Device16calculateDevicesEv+0xa4>)
 23f6566:	b364      	cbz	r4, 23f65c2 <_ZN6Device16calculateDevicesEv+0x72>
        if(ptr->_type != 'X') {     // Ignore Checklist items
 23f6568:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 23f656c:	2958      	cmp	r1, #88	; 0x58
 23f656e:	d026      	beq.n	23f65be <_ZN6Device16calculateDevicesEv+0x6e>
            devices += String(ptr->_type)+":";
 23f6570:	a804      	add	r0, sp, #16
 23f6572:	f003 ff15 	bl	23fa3a0 <_ZN6StringC1Ec>
    StringSumHelper(const String &s) : String(s) {}
 23f6576:	a904      	add	r1, sp, #16
 23f6578:	a808      	add	r0, sp, #32
 23f657a:	f003 feec 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f657e:	4631      	mov	r1, r6
 23f6580:	a808      	add	r0, sp, #32
 23f6582:	f003 ff9f 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f6586:	4601      	mov	r1, r0
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f6588:	4668      	mov	r0, sp
 23f658a:	f003 ff6d 	bl	23fa468 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 23f658e:	a808      	add	r0, sp, #32
 23f6590:	f003 fe4a 	bl	23fa228 <_ZN6StringD1Ev>
 23f6594:	a804      	add	r0, sp, #16
 23f6596:	f003 fe47 	bl	23fa228 <_ZN6StringD1Ev>
            devices += String(ptr->_name);
 23f659a:	f104 0108 	add.w	r1, r4, #8
 23f659e:	a808      	add	r0, sp, #32
 23f65a0:	f003 fed9 	bl	23fa356 <_ZN6StringC1ERKS_>
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f65a4:	a908      	add	r1, sp, #32
 23f65a6:	4668      	mov	r0, sp
 23f65a8:	f003 ff5e 	bl	23fa468 <_ZN6String6concatERKS_>
 23f65ac:	a808      	add	r0, sp, #32
 23f65ae:	f003 fe3b 	bl	23fa228 <_ZN6StringD1Ev>
            if (ptr->_next != NULL) {
 23f65b2:	6863      	ldr	r3, [r4, #4]
 23f65b4:	b11b      	cbz	r3, 23f65be <_ZN6Device16calculateDevicesEv+0x6e>
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23f65b6:	4639      	mov	r1, r7
 23f65b8:	4668      	mov	r0, sp
 23f65ba:	f003 ff59 	bl	23fa470 <_ZN6String6concatEPKc>
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f65be:	6864      	ldr	r4, [r4, #4]
 23f65c0:	e7d1      	b.n	23f6566 <_ZN6Device16calculateDevicesEv+0x16>
                devices += ",";
            }
        }
    }
    if(devices.length() >= particle::protocol:: MAX_VARIABLE_VALUE_LENGTH) {
 23f65c2:	9b02      	ldr	r3, [sp, #8]
 23f65c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 23f65c8:	d309      	bcc.n	23f65de <_ZN6Device16calculateDevicesEv+0x8e>
        return("Devices variable is too long. Need to extend to a 2nd variable");
 23f65ca:	4628      	mov	r0, r5
 23f65cc:	490a      	ldr	r1, [pc, #40]	; (23f65f8 <_ZN6Device16calculateDevicesEv+0xa8>)
 23f65ce:	f003 fe76 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    String devices = "";
 23f65d2:	4668      	mov	r0, sp
 23f65d4:	f003 fe28 	bl	23fa228 <_ZN6StringD1Ev>
    }
    return devices;
}
 23f65d8:	4628      	mov	r0, r5
 23f65da:	b00d      	add	sp, #52	; 0x34
 23f65dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return devices;
 23f65de:	4669      	mov	r1, sp
 23f65e0:	4628      	mov	r0, r5
 23f65e2:	f003 fe9e 	bl	23fa322 <_ZN6StringC1EOS_>
 23f65e6:	e7f4      	b.n	23f65d2 <_ZN6Device16calculateDevicesEv+0x82>
 23f65e8:	023ff87d 	.word	0x023ff87d
 23f65ec:	1007ad58 	.word	0x1007ad58
 23f65f0:	023ff203 	.word	0x023ff203
 23f65f4:	023ff100 	.word	0x023ff100
 23f65f8:	023ff468 	.word	0x023ff468

023f65fc <_ZN6Device13setBrightnessEi>:
    if(_value != 0) {
 23f65fc:	6982      	ldr	r2, [r0, #24]
    _brightness = value;
 23f65fe:	6341      	str	r1, [r0, #52]	; 0x34
    if(_value != 0) {
 23f6600:	b112      	cbz	r2, 23f6608 <_ZN6Device13setBrightnessEi+0xc>
        setValue(value);
 23f6602:	6803      	ldr	r3, [r0, #0]
 23f6604:	699b      	ldr	r3, [r3, #24]
 23f6606:	4718      	bx	r3
}
 23f6608:	4770      	bx	lr
	...

023f660c <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
 23f660c:	b530      	push	{r4, r5, lr}
 23f660e:	4614      	mov	r4, r2
 23f6610:	b085      	sub	sp, #20
 23f6612:	4603      	mov	r3, r0
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
 23f6614:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
 23f6616:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
 23f6618:	4798      	blx	r3
    inline unsigned int length(void) const {return len;}
 23f661a:	9802      	ldr	r0, [sp, #8]
        size = str.length();
 23f661c:	6020      	str	r0, [r4, #0]
        data = malloc(size);
 23f661e:	f001 ffef 	bl	23f8600 <malloc>
 23f6622:	6028      	str	r0, [r5, #0]
        if (!data) {
 23f6624:	b150      	cbz	r0, 23f663c <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
 23f6626:	6822      	ldr	r2, [r4, #0]
 23f6628:	9900      	ldr	r1, [sp, #0]
 23f662a:	f006 faf9 	bl	23fcc20 <memcpy>
        return 0;
 23f662e:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
 23f6630:	4668      	mov	r0, sp
 23f6632:	f003 fdf9 	bl	23fa228 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
 23f6636:	4620      	mov	r0, r4
 23f6638:	b005      	add	sp, #20
 23f663a:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
 23f663c:	4c00      	ldr	r4, [pc, #0]	; (23f6640 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
 23f663e:	e7f7      	b.n	23f6630 <_ZZN10CloudClass20register_variable_fnIF6StringvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
 23f6640:	fffffefc 	.word	0xfffffefc

023f6644 <_ZN10CloudClass8variableI6StringJRFS1_vEEEEbRKT_DpOT0_.isra.0>:
    static inline bool variable(const T &name, ArgsT&&... args)
 23f6644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        spark_variable_t extra = {};
 23f6646:	2300      	movs	r3, #0
 23f6648:	e9cd 3301 	strd	r3, r3, [sp, #4]
        extra.size = sizeof(extra);
 23f664c:	230c      	movs	r3, #12
 23f664e:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.copy = [](const void* var, void** data, size_t* size) {
 23f6652:	4b04      	ldr	r3, [pc, #16]	; (23f6664 <_ZN10CloudClass8variableI6StringJRFS1_vEEEEbRKT_DpOT0_.isra.0+0x20>)
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
 23f6654:	2204      	movs	r2, #4
        extra.copy = [](const void* var, void** data, size_t* size) {
 23f6656:	9303      	str	r3, [sp, #12]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
 23f6658:	ab01      	add	r3, sp, #4
 23f665a:	f001 fe9d 	bl	23f8398 <spark_variable>
    }
 23f665e:	b005      	add	sp, #20
 23f6660:	f85d fb04 	ldr.w	pc, [sp], #4
 23f6664:	023f660d 	.word	0x023f660d

023f6668 <_ZN6Device15calculateStatusEv>:
String Device::calculateStatus() {
 23f6668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f666c:	b08c      	sub	sp, #48	; 0x30
 23f666e:	4605      	mov	r5, r0
                return timeStr(now());
 23f6670:	f004 fd17 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
 23f6674:	17c3      	asrs	r3, r0, #31
 23f6676:	4602      	mov	r2, r0
 23f6678:	a804      	add	r0, sp, #16
 23f667a:	f004 fc0d 	bl	23fae98 <_ZN9TimeClass7timeStrEx>
    StringSumHelper(const String &s) : String(s) {}
 23f667e:	a904      	add	r1, sp, #16
 23f6680:	a808      	add	r0, sp, #32
 23f6682:	f003 fe68 	bl	23fa356 <_ZN6StringC1ERKS_>
    String status = Time.timeStr() + ": ";
 23f6686:	4937      	ldr	r1, [pc, #220]	; (23f6764 <_ZN6Device15calculateStatusEv+0xfc>)
 23f6688:	a808      	add	r0, sp, #32
 23f668a:	f003 ff1b 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f668e:	4601      	mov	r1, r0
 23f6690:	4668      	mov	r0, sp
 23f6692:	f003 fe60 	bl	23fa356 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 23f6696:	a808      	add	r0, sp, #32
 23f6698:	f003 fdc6 	bl	23fa228 <_ZN6StringD1Ev>
 23f669c:	a804      	add	r0, sp, #16
 23f669e:	f003 fdc3 	bl	23fa228 <_ZN6StringD1Ev>
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f66a2:	4b31      	ldr	r3, [pc, #196]	; (23f6768 <_ZN6Device15calculateStatusEv+0x100>)
            status += String(ptr->_type)+":";
 23f66a4:	4e31      	ldr	r6, [pc, #196]	; (23f676c <_ZN6Device15calculateStatusEv+0x104>)
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f66a6:	681c      	ldr	r4, [r3, #0]
    StringSumHelper(const char *p) : String(p) {}
 23f66a8:	4f31      	ldr	r7, [pc, #196]	; (23f6770 <_ZN6Device15calculateStatusEv+0x108>)
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23f66aa:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 23f6778 <_ZN6Device15calculateStatusEv+0x110>
 23f66ae:	2c00      	cmp	r4, #0
 23f66b0:	d043      	beq.n	23f673a <_ZN6Device15calculateStatusEv+0xd2>
        if(ptr->_type != 'X') {     // Ignore checklist items
 23f66b2:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 23f66b6:	2958      	cmp	r1, #88	; 0x58
 23f66b8:	d03d      	beq.n	23f6736 <_ZN6Device15calculateStatusEv+0xce>
            status += String(ptr->_type)+":";
 23f66ba:	a804      	add	r0, sp, #16
 23f66bc:	f003 fe70 	bl	23fa3a0 <_ZN6StringC1Ec>
    StringSumHelper(const String &s) : String(s) {}
 23f66c0:	a904      	add	r1, sp, #16
 23f66c2:	a808      	add	r0, sp, #32
 23f66c4:	f003 fe47 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f66c8:	4631      	mov	r1, r6
 23f66ca:	a808      	add	r0, sp, #32
 23f66cc:	f003 fefa 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f66d0:	4601      	mov	r1, r0
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f66d2:	4668      	mov	r0, sp
 23f66d4:	f003 fec8 	bl	23fa468 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 23f66d8:	a808      	add	r0, sp, #32
 23f66da:	f003 fda5 	bl	23fa228 <_ZN6StringD1Ev>
 23f66de:	a804      	add	r0, sp, #16
 23f66e0:	f003 fda2 	bl	23fa228 <_ZN6StringD1Ev>
            status += String(ptr->_name);
 23f66e4:	f104 0108 	add.w	r1, r4, #8
 23f66e8:	a808      	add	r0, sp, #32
 23f66ea:	f003 fe34 	bl	23fa356 <_ZN6StringC1ERKS_>
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f66ee:	a908      	add	r1, sp, #32
 23f66f0:	4668      	mov	r0, sp
 23f66f2:	f003 feb9 	bl	23fa468 <_ZN6String6concatERKS_>
 23f66f6:	a808      	add	r0, sp, #32
 23f66f8:	f003 fd96 	bl	23fa228 <_ZN6StringD1Ev>
    StringSumHelper(const char *p) : String(p) {}
 23f66fc:	4639      	mov	r1, r7
 23f66fe:	a808      	add	r0, sp, #32
 23f6700:	f003 fddd 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
            status += "="+String(ptr->_value);
 23f6704:	220a      	movs	r2, #10
 23f6706:	69a1      	ldr	r1, [r4, #24]
 23f6708:	a804      	add	r0, sp, #16
 23f670a:	f003 fe5a 	bl	23fa3c2 <_ZN6StringC1Eih>
 23f670e:	a904      	add	r1, sp, #16
 23f6710:	a808      	add	r0, sp, #32
 23f6712:	f003 fecb 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f6716:	4601      	mov	r1, r0
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f6718:	4668      	mov	r0, sp
 23f671a:	f003 fea5 	bl	23fa468 <_ZN6String6concatERKS_>
 23f671e:	a804      	add	r0, sp, #16
 23f6720:	f003 fd82 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f6724:	a808      	add	r0, sp, #32
 23f6726:	f003 fd7f 	bl	23fa228 <_ZN6StringD1Ev>
            if (ptr->_next != NULL) {
 23f672a:	6863      	ldr	r3, [r4, #4]
 23f672c:	b11b      	cbz	r3, 23f6736 <_ZN6Device15calculateStatusEv+0xce>
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23f672e:	4641      	mov	r1, r8
 23f6730:	4668      	mov	r0, sp
 23f6732:	f003 fe9d 	bl	23fa470 <_ZN6String6concatEPKc>
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f6736:	6864      	ldr	r4, [r4, #4]
 23f6738:	e7b9      	b.n	23f66ae <_ZN6Device15calculateStatusEv+0x46>
    if(status.length() >= particle::protocol:: MAX_VARIABLE_VALUE_LENGTH) {
 23f673a:	9b02      	ldr	r3, [sp, #8]
 23f673c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 23f6740:	d30a      	bcc.n	23f6758 <_ZN6Device15calculateStatusEv+0xf0>
        return("Status variable is too long. Need to extend to a 2nd variable");
 23f6742:	4628      	mov	r0, r5
 23f6744:	490b      	ldr	r1, [pc, #44]	; (23f6774 <_ZN6Device15calculateStatusEv+0x10c>)
 23f6746:	f003 fdba 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    String status = Time.timeStr() + ": ";
 23f674a:	4668      	mov	r0, sp
 23f674c:	f003 fd6c 	bl	23fa228 <_ZN6StringD1Ev>
}
 23f6750:	4628      	mov	r0, r5
 23f6752:	b00c      	add	sp, #48	; 0x30
 23f6754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return status;
 23f6758:	4669      	mov	r1, sp
 23f675a:	4628      	mov	r0, r5
 23f675c:	f003 fde1 	bl	23fa322 <_ZN6StringC1EOS_>
 23f6760:	e7f3      	b.n	23f674a <_ZN6Device15calculateStatusEv+0xe2>
 23f6762:	bf00      	nop
 23f6764:	023ff207 	.word	0x023ff207
 23f6768:	1007ad58 	.word	0x1007ad58
 23f676c:	023ff203 	.word	0x023ff203
 23f6770:	023ff4a7 	.word	0x023ff4a7
 23f6774:	023ff4a9 	.word	0x023ff4a9
 23f6778:	023ff100 	.word	0x023ff100

023f677c <_ZN6Device8setValueEi>:
void Device::setValue(int value) {
 23f677c:	b570      	push	{r4, r5, r6, lr}
 23f677e:	4604      	mov	r4, r0
 23f6780:	b08c      	sub	sp, #48	; 0x30
 23f6782:	460d      	mov	r5, r1
    StringSumHelper(const char *p) : String(p) {}
 23f6784:	4668      	mov	r0, sp
 23f6786:	4919      	ldr	r1, [pc, #100]	; (23f67ec <_ZN6Device8setValueEi+0x70>)
 23f6788:	f003 fd99 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("Device " + _name + " setValue " + String(value) + ", was "+String(_value));
 23f678c:	f104 0108 	add.w	r1, r4, #8
 23f6790:	4668      	mov	r0, sp
 23f6792:	f003 fe8b 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f6796:	4916      	ldr	r1, [pc, #88]	; (23f67f0 <_ZN6Device8setValueEi+0x74>)
 23f6798:	f003 fe94 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f679c:	4606      	mov	r6, r0
 23f679e:	220a      	movs	r2, #10
 23f67a0:	4629      	mov	r1, r5
 23f67a2:	a804      	add	r0, sp, #16
 23f67a4:	f003 fe0d 	bl	23fa3c2 <_ZN6StringC1Eih>
 23f67a8:	a904      	add	r1, sp, #16
 23f67aa:	4630      	mov	r0, r6
 23f67ac:	f003 fe7e 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f67b0:	4910      	ldr	r1, [pc, #64]	; (23f67f4 <_ZN6Device8setValueEi+0x78>)
 23f67b2:	f003 fe87 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f67b6:	4606      	mov	r6, r0
 23f67b8:	220a      	movs	r2, #10
 23f67ba:	69a1      	ldr	r1, [r4, #24]
 23f67bc:	a808      	add	r0, sp, #32
 23f67be:	f003 fe00 	bl	23fa3c2 <_ZN6StringC1Eih>
 23f67c2:	a908      	add	r1, sp, #32
 23f67c4:	4630      	mov	r0, r6
 23f67c6:	f003 fe71 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f67ca:	6801      	ldr	r1, [r0, #0]
 23f67cc:	480a      	ldr	r0, [pc, #40]	; (23f67f8 <_ZN6Device8setValueEi+0x7c>)
 23f67ce:	f7fd ff93 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
 23f67d2:	a808      	add	r0, sp, #32
 23f67d4:	f003 fd28 	bl	23fa228 <_ZN6StringD1Ev>
 23f67d8:	a804      	add	r0, sp, #16
 23f67da:	f003 fd25 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f67de:	4668      	mov	r0, sp
 23f67e0:	f003 fd22 	bl	23fa228 <_ZN6StringD1Ev>
    _value = value;
 23f67e4:	61a5      	str	r5, [r4, #24]
}
 23f67e6:	b00c      	add	sp, #48	; 0x30
 23f67e8:	bd70      	pop	{r4, r5, r6, pc}
 23f67ea:	bf00      	nop
 23f67ec:	023ff4e7 	.word	0x023ff4e7
 23f67f0:	023ff4ef 	.word	0x023ff4ef
 23f67f4:	023ff4fa 	.word	0x023ff4fa
 23f67f8:	1007ae20 	.word	0x1007ae20

023f67fc <_ZN6Device7setSSIDE6String>:
int Device::setSSID(String info) {
 23f67fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    int comma = info.indexOf(',');
 23f67fe:	212c      	movs	r1, #44	; 0x2c
int Device::setSSID(String info) {
 23f6800:	b09d      	sub	sp, #116	; 0x74
 23f6802:	4604      	mov	r4, r0
    int comma = info.indexOf(',');
 23f6804:	f003 fefa 	bl	23fa5fc <_ZNK6String7indexOfEc>
    if(comma <= 0) {  // -1 if comma missing
 23f6808:	1e05      	subs	r5, r0, #0
 23f680a:	dc13      	bgt.n	23f6834 <_ZN6Device7setSSIDE6String+0x38>
    StringSumHelper(const char *p) : String(p) {}
 23f680c:	4931      	ldr	r1, [pc, #196]	; (23f68d4 <_ZN6Device7setSSIDE6String+0xd8>)
 23f680e:	a809      	add	r0, sp, #36	; 0x24
 23f6810:	f003 fd55 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
        Log.error("setSSID info incorrect: " + info);
 23f6814:	4621      	mov	r1, r4
 23f6816:	a809      	add	r0, sp, #36	; 0x24
 23f6818:	f003 fe48 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f681c:	6801      	ldr	r1, [r0, #0]
 23f681e:	482e      	ldr	r0, [pc, #184]	; (23f68d8 <_ZN6Device7setSSIDE6String+0xdc>)
 23f6820:	f7fd ff5c 	bl	23f46dc <_ZNK5spark6Logger5errorEPKcz>
class StringSumHelper : public String
 23f6824:	a809      	add	r0, sp, #36	; 0x24
 23f6826:	f003 fcff 	bl	23fa228 <_ZN6StringD1Ev>
        return -1;
 23f682a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 23f682e:	4620      	mov	r0, r4
 23f6830:	b01d      	add	sp, #116	; 0x74
 23f6832:	bdf0      	pop	{r4, r5, r6, r7, pc}
    String ssid = info.substring(start, comma);
 23f6834:	462b      	mov	r3, r5
 23f6836:	2200      	movs	r2, #0
 23f6838:	4621      	mov	r1, r4
 23f683a:	a801      	add	r0, sp, #4
 23f683c:	f003 fee2 	bl	23fa604 <_ZNK6String9substringEjj>
    String password = info.substring(comma+1);
 23f6840:	1c6a      	adds	r2, r5, #1
 23f6842:	4621      	mov	r1, r4
 23f6844:	a805      	add	r0, sp, #20
 23f6846:	f003 feff 	bl	23fa648 <_ZNK6String9substringEj>
    StringSumHelper(const char *p) : String(p) {}
 23f684a:	4924      	ldr	r1, [pc, #144]	; (23f68dc <_ZN6Device7setSSIDE6String+0xe0>)
 23f684c:	a809      	add	r0, sp, #36	; 0x24
 23f684e:	f003 fd36 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("Setting SSID/password: " + ssid + ", " + password);
 23f6852:	a901      	add	r1, sp, #4
 23f6854:	a809      	add	r0, sp, #36	; 0x24
 23f6856:	f003 fe29 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f685a:	4921      	ldr	r1, [pc, #132]	; (23f68e0 <_ZN6Device7setSSIDE6String+0xe4>)
 23f685c:	f003 fe32 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f6860:	a905      	add	r1, sp, #20
 23f6862:	f003 fe23 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f6866:	6801      	ldr	r1, [r0, #0]
 23f6868:	481b      	ldr	r0, [pc, #108]	; (23f68d8 <_ZN6Device7setSSIDE6String+0xdc>)
 23f686a:	f7fd ff45 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23f686e:	a809      	add	r0, sp, #36	; 0x24
 23f6870:	f003 fcda 	bl	23fa228 <_ZN6StringD1Ev>
    const char * c_str() const { return buffer; }
 23f6874:	9f01      	ldr	r7, [sp, #4]
 23f6876:	9d05      	ldr	r5, [sp, #20]
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
 23f6878:	b347      	cbz	r7, 23f68cc <_ZN6Device7setSSIDE6String+0xd0>
 23f687a:	4638      	mov	r0, r7
 23f687c:	f7fd f81c 	bl	23f38b8 <strlen>
 23f6880:	4606      	mov	r6, r0
 23f6882:	b32d      	cbz	r5, 23f68d0 <_ZN6Device7setSSIDE6String+0xd4>
 23f6884:	4628      	mov	r0, r5
 23f6886:	f7fd f817 	bl	23f38b8 <strlen>
 23f688a:	4604      	mov	r4, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
 23f688c:	2238      	movs	r2, #56	; 0x38
 23f688e:	2100      	movs	r1, #0
 23f6890:	eb0d 0002 	add.w	r0, sp, r2
 23f6894:	f006 f9eb 	bl	23fcc6e <memset>
        creds.size = sizeof(creds);
 23f6898:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
 23f689a:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
 23f689e:	2303      	movs	r3, #3
 23f68a0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 23f68a4:	2300      	movs	r3, #0
 23f68a6:	480f      	ldr	r0, [pc, #60]	; (23f68e4 <_ZN6Device7setSSIDE6String+0xe8>)
 23f68a8:	4619      	mov	r1, r3
 23f68aa:	aa09      	add	r2, sp, #36	; 0x24
 23f68ac:	6840      	ldr	r0, [r0, #4]
        creds.password_len = passwordLen;
 23f68ae:	940d      	str	r4, [sp, #52]	; 0x34
        creds.password = password;
 23f68b0:	e9cd 650b 	strd	r6, r5, [sp, #44]	; 0x2c
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 23f68b4:	f001 fe42 	bl	23f853c <network_set_credentials>
 23f68b8:	fab0 f480 	clz	r4, r0
    String password = info.substring(comma+1);
 23f68bc:	a805      	add	r0, sp, #20
 23f68be:	f003 fcb3 	bl	23fa228 <_ZN6StringD1Ev>
    String ssid = info.substring(start, comma);
 23f68c2:	a801      	add	r0, sp, #4
 23f68c4:	0964      	lsrs	r4, r4, #5
 23f68c6:	f003 fcaf 	bl	23fa228 <_ZN6StringD1Ev>
 23f68ca:	e7b0      	b.n	23f682e <_ZN6Device7setSSIDE6String+0x32>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
 23f68cc:	463e      	mov	r6, r7
 23f68ce:	e7d8      	b.n	23f6882 <_ZN6Device7setSSIDE6String+0x86>
 23f68d0:	462c      	mov	r4, r5
 23f68d2:	e7db      	b.n	23f688c <_ZN6Device7setSSIDE6String+0x90>
 23f68d4:	023ff501 	.word	0x023ff501
 23f68d8:	1007ae20 	.word	0x1007ae20
 23f68dc:	023ff51a 	.word	0x023ff51a
 23f68e0:	023ff06d 	.word	0x023ff06d
 23f68e4:	1007aed0 	.word	0x1007aed0

023f68e8 <_ZN6Device18calculateChecklistEv>:

// The Checklist variable is used by the Checklist iOS app.
// It is a comma delimited list of <Name>=0|1
String Device::calculateChecklist()
{
 23f68e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    String newChecklist = "";
 23f68ea:	4925      	ldr	r1, [pc, #148]	; (23f6980 <_ZN6Device18calculateChecklistEv+0x98>)
{
 23f68ec:	b089      	sub	sp, #36	; 0x24
 23f68ee:	4604      	mov	r4, r0
    String newChecklist = "";
 23f68f0:	f003 fce5 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f68f4:	4b23      	ldr	r3, [pc, #140]	; (23f6984 <_ZN6Device18calculateChecklistEv+0x9c>)
    StringSumHelper(const char *p) : String(p) {}
 23f68f6:	4e24      	ldr	r6, [pc, #144]	; (23f6988 <_ZN6Device18calculateChecklistEv+0xa0>)
 23f68f8:	681d      	ldr	r5, [r3, #0]
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23f68fa:	4f24      	ldr	r7, [pc, #144]	; (23f698c <_ZN6Device18calculateChecklistEv+0xa4>)
 23f68fc:	b375      	cbz	r5, 23f695c <_ZN6Device18calculateChecklistEv+0x74>
        if(ptr->_type == 'X') {
 23f68fe:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 23f6902:	2b58      	cmp	r3, #88	; 0x58
 23f6904:	d128      	bne.n	23f6958 <_ZN6Device18calculateChecklistEv+0x70>
            newChecklist += String(ptr->_name);
 23f6906:	f105 0108 	add.w	r1, r5, #8
 23f690a:	a804      	add	r0, sp, #16
 23f690c:	f003 fd23 	bl	23fa356 <_ZN6StringC1ERKS_>
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f6910:	a904      	add	r1, sp, #16
 23f6912:	4620      	mov	r0, r4
 23f6914:	f003 fda8 	bl	23fa468 <_ZN6String6concatERKS_>
 23f6918:	a804      	add	r0, sp, #16
 23f691a:	f003 fc85 	bl	23fa228 <_ZN6StringD1Ev>
    StringSumHelper(const char *p) : String(p) {}
 23f691e:	4631      	mov	r1, r6
 23f6920:	a804      	add	r0, sp, #16
 23f6922:	f003 fccc 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
            newChecklist += "="+String(ptr->_value);
 23f6926:	220a      	movs	r2, #10
 23f6928:	69a9      	ldr	r1, [r5, #24]
 23f692a:	4668      	mov	r0, sp
 23f692c:	f003 fd49 	bl	23fa3c2 <_ZN6StringC1Eih>
 23f6930:	4669      	mov	r1, sp
 23f6932:	a804      	add	r0, sp, #16
 23f6934:	f003 fdba 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f6938:	4601      	mov	r1, r0
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
 23f693a:	4620      	mov	r0, r4
 23f693c:	f003 fd94 	bl	23fa468 <_ZN6String6concatERKS_>
 23f6940:	4668      	mov	r0, sp
 23f6942:	f003 fc71 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f6946:	a804      	add	r0, sp, #16
 23f6948:	f003 fc6e 	bl	23fa228 <_ZN6StringD1Ev>
            if (ptr->_next != NULL) {
 23f694c:	686b      	ldr	r3, [r5, #4]
 23f694e:	b11b      	cbz	r3, 23f6958 <_ZN6Device18calculateChecklistEv+0x70>
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23f6950:	4639      	mov	r1, r7
 23f6952:	4620      	mov	r0, r4
 23f6954:	f003 fd8c 	bl	23fa470 <_ZN6String6concatEPKc>
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f6958:	686d      	ldr	r5, [r5, #4]
 23f695a:	e7cf      	b.n	23f68fc <_ZN6Device18calculateChecklistEv+0x14>
                newChecklist += ",";
            }
        }
    }
    if(newChecklist.length() >= particle::protocol:: MAX_VARIABLE_VALUE_LENGTH) {
 23f695c:	68a3      	ldr	r3, [r4, #8]
 23f695e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 23f6962:	d303      	bcc.n	23f696c <_ZN6Device18calculateChecklistEv+0x84>
        Log.error("Checklist variable is too long. Need to extend to a 2nd variable");
 23f6964:	490a      	ldr	r1, [pc, #40]	; (23f6990 <_ZN6Device18calculateChecklistEv+0xa8>)
 23f6966:	480b      	ldr	r0, [pc, #44]	; (23f6994 <_ZN6Device18calculateChecklistEv+0xac>)
 23f6968:	f7fd feb8 	bl	23f46dc <_ZNK5spark6Logger5errorEPKcz>
    }
    if(newChecklist.length() == 0) { Log.info("No checklist items"); }
 23f696c:	68a3      	ldr	r3, [r4, #8]
 23f696e:	b91b      	cbnz	r3, 23f6978 <_ZN6Device18calculateChecklistEv+0x90>
 23f6970:	4909      	ldr	r1, [pc, #36]	; (23f6998 <_ZN6Device18calculateChecklistEv+0xb0>)
 23f6972:	4808      	ldr	r0, [pc, #32]	; (23f6994 <_ZN6Device18calculateChecklistEv+0xac>)
 23f6974:	f7fd fec0 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
    return newChecklist;
}
 23f6978:	4620      	mov	r0, r4
 23f697a:	b009      	add	sp, #36	; 0x24
 23f697c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f697e:	bf00      	nop
 23f6980:	023ff87d 	.word	0x023ff87d
 23f6984:	1007ad58 	.word	0x1007ad58
 23f6988:	023ff4a7 	.word	0x023ff4a7
 23f698c:	023ff100 	.word	0x023ff100
 23f6990:	023ff532 	.word	0x023ff532
 23f6994:	1007ae20 	.word	0x1007ae20
 23f6998:	023ff573 	.word	0x023ff573

023f699c <_ZN6DeviceC1E6StringS0_c>:
Device::Device(String name, String room, char type)
 23f699c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
: _next(NULL), _name(name), _room(room), _value(0), _previous(0), _type(type), _brightness(100)
 23f699e:	2600      	movs	r6, #0
Device::Device(String name, String room, char type)
 23f69a0:	4604      	mov	r4, r0
 23f69a2:	4617      	mov	r7, r2
 23f69a4:	461d      	mov	r5, r3
: _next(NULL), _name(name), _room(room), _value(0), _previous(0), _type(type), _brightness(100)
 23f69a6:	4b09      	ldr	r3, [pc, #36]	; (23f69cc <_ZN6DeviceC1E6StringS0_c+0x30>)
 23f69a8:	6046      	str	r6, [r0, #4]
 23f69aa:	6003      	str	r3, [r0, #0]
 23f69ac:	3008      	adds	r0, #8
 23f69ae:	f003 fcd2 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f69b2:	4639      	mov	r1, r7
 23f69b4:	61a6      	str	r6, [r4, #24]
 23f69b6:	f104 001c 	add.w	r0, r4, #28
 23f69ba:	f003 fccc 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f69be:	2364      	movs	r3, #100	; 0x64
}
 23f69c0:	4620      	mov	r0, r4
: _next(NULL), _name(name), _room(room), _value(0), _previous(0), _type(type), _brightness(100)
 23f69c2:	62e6      	str	r6, [r4, #44]	; 0x2c
 23f69c4:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 23f69c8:	6363      	str	r3, [r4, #52]	; 0x34
}
 23f69ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f69cc:	023ff5d8 	.word	0x023ff5d8

023f69d0 <_ZN6Device3addEPS_>:
{
 23f69d0:	b530      	push	{r4, r5, lr}
 23f69d2:	4604      	mov	r4, r0
 23f69d4:	b089      	sub	sp, #36	; 0x24
    StringSumHelper(const char *p) : String(p) {}
 23f69d6:	4916      	ldr	r1, [pc, #88]	; (23f6a30 <_ZN6Device3addEPS_+0x60>)
 23f69d8:	a804      	add	r0, sp, #16
 23f69da:	f003 fc70 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("addDevice name: "+String(device->name()));
 23f69de:	6823      	ldr	r3, [r4, #0]
 23f69e0:	4621      	mov	r1, r4
 23f69e2:	689b      	ldr	r3, [r3, #8]
 23f69e4:	4668      	mov	r0, sp
 23f69e6:	4798      	blx	r3
 23f69e8:	4669      	mov	r1, sp
 23f69ea:	a804      	add	r0, sp, #16
 23f69ec:	f003 fd5e 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f69f0:	6801      	ldr	r1, [r0, #0]
 23f69f2:	4810      	ldr	r0, [pc, #64]	; (23f6a34 <_ZN6Device3addEPS_+0x64>)
 23f69f4:	f7fd fe80 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
    if(_devices == NULL) {
 23f69f8:	4d0f      	ldr	r5, [pc, #60]	; (23f6a38 <_ZN6Device3addEPS_+0x68>)
    Log.info("addDevice name: "+String(device->name()));
 23f69fa:	4668      	mov	r0, sp
 23f69fc:	f003 fc14 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f6a00:	a804      	add	r0, sp, #16
 23f6a02:	f003 fc11 	bl	23fa228 <_ZN6StringD1Ev>
    if(_devices == NULL) {
 23f6a06:	682b      	ldr	r3, [r5, #0]
 23f6a08:	b95b      	cbnz	r3, 23f6a22 <_ZN6Device3addEPS_+0x52>
        Log.info("  first device");
 23f6a0a:	490c      	ldr	r1, [pc, #48]	; (23f6a3c <_ZN6Device3addEPS_+0x6c>)
 23f6a0c:	4809      	ldr	r0, [pc, #36]	; (23f6a34 <_ZN6Device3addEPS_+0x64>)
 23f6a0e:	f7fd fe73 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
        _devices = device;
 23f6a12:	602c      	str	r4, [r5, #0]
    device->begin();
 23f6a14:	4620      	mov	r0, r4
 23f6a16:	6823      	ldr	r3, [r4, #0]
 23f6a18:	681b      	ldr	r3, [r3, #0]
}
 23f6a1a:	b009      	add	sp, #36	; 0x24
 23f6a1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    device->begin();
 23f6a20:	4718      	bx	r3
        while(ptr->_next != NULL) {
 23f6a22:	461a      	mov	r2, r3
 23f6a24:	685b      	ldr	r3, [r3, #4]
 23f6a26:	2b00      	cmp	r3, #0
 23f6a28:	d1fb      	bne.n	23f6a22 <_ZN6Device3addEPS_+0x52>
        ptr->_next = device;
 23f6a2a:	6054      	str	r4, [r2, #4]
 23f6a2c:	e7f2      	b.n	23f6a14 <_ZN6Device3addEPS_+0x44>
 23f6a2e:	bf00      	nop
 23f6a30:	023ff586 	.word	0x023ff586
 23f6a34:	1007ae20 	.word	0x1007ae20
 23f6a38:	1007ad58 	.word	0x1007ad58
 23f6a3c:	023ff597 	.word	0x023ff597

023f6a40 <_ZN6Device8resetAllEv>:
{
 23f6a40:	b510      	push	{r4, lr}
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f6a42:	4b05      	ldr	r3, [pc, #20]	; (23f6a58 <_ZN6Device8resetAllEv+0x18>)
 23f6a44:	681c      	ldr	r4, [r3, #0]
 23f6a46:	b12c      	cbz	r4, 23f6a54 <_ZN6Device8resetAllEv+0x14>
        ptr->reset();
 23f6a48:	6823      	ldr	r3, [r4, #0]
 23f6a4a:	4620      	mov	r0, r4
 23f6a4c:	685b      	ldr	r3, [r3, #4]
 23f6a4e:	4798      	blx	r3
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f6a50:	6864      	ldr	r4, [r4, #4]
 23f6a52:	e7f8      	b.n	23f6a46 <_ZN6Device8resetAllEv+0x6>
}
 23f6a54:	bd10      	pop	{r4, pc}
 23f6a56:	bf00      	nop
 23f6a58:	1007ad58 	.word	0x1007ad58

023f6a5c <_ZN6Device7loopAllEv>:
{
 23f6a5c:	b510      	push	{r4, lr}
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f6a5e:	4b05      	ldr	r3, [pc, #20]	; (23f6a74 <_ZN6Device7loopAllEv+0x18>)
 23f6a60:	681c      	ldr	r4, [r3, #0]
 23f6a62:	b12c      	cbz	r4, 23f6a70 <_ZN6Device7loopAllEv+0x14>
        ptr->loop();
 23f6a64:	6823      	ldr	r3, [r4, #0]
 23f6a66:	4620      	mov	r0, r4
 23f6a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f6a6a:	4798      	blx	r3
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f6a6c:	6864      	ldr	r4, [r4, #4]
 23f6a6e:	e7f8      	b.n	23f6a62 <_ZN6Device7loopAllEv+0x6>
}
 23f6a70:	bd10      	pop	{r4, pc}
 23f6a72:	bf00      	nop
 23f6a74:	1007ad58 	.word	0x1007ad58

023f6a78 <_ZN6Device5countEv>:
    int i = 0;
 23f6a78:	2000      	movs	r0, #0
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next) i++;
 23f6a7a:	4b03      	ldr	r3, [pc, #12]	; (23f6a88 <_ZN6Device5countEv+0x10>)
 23f6a7c:	681b      	ldr	r3, [r3, #0]
 23f6a7e:	b113      	cbz	r3, 23f6a86 <_ZN6Device5countEv+0xe>
 23f6a80:	685b      	ldr	r3, [r3, #4]
 23f6a82:	3001      	adds	r0, #1
 23f6a84:	e7fb      	b.n	23f6a7e <_ZN6Device5countEv+0x6>
}
 23f6a86:	4770      	bx	lr
 23f6a88:	1007ad58 	.word	0x1007ad58

023f6a8c <_ZN6Device3getE6String>:
{
 23f6a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f6a8e:	4606      	mov	r6, r0
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f6a90:	2500      	movs	r5, #0
    Device *ptr = _devices;
 23f6a92:	4b0e      	ldr	r3, [pc, #56]	; (23f6acc <_ZN6Device3getE6String+0x40>)
{
 23f6a94:	b085      	sub	sp, #20
    Device *ptr = _devices;
 23f6a96:	681c      	ldr	r4, [r3, #0]
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f6a98:	f7ff ffee 	bl	23f6a78 <_ZN6Device5countEv>
 23f6a9c:	42a8      	cmp	r0, r5
 23f6a9e:	dd11      	ble.n	23f6ac4 <_ZN6Device3getE6String+0x38>
 23f6aa0:	b18c      	cbz	r4, 23f6ac6 <_ZN6Device3getE6String+0x3a>
        if (ptr->name().equalsIgnoreCase(name)) {
 23f6aa2:	6823      	ldr	r3, [r4, #0]
 23f6aa4:	4621      	mov	r1, r4
 23f6aa6:	4668      	mov	r0, sp
 23f6aa8:	689b      	ldr	r3, [r3, #8]
 23f6aaa:	4798      	blx	r3
 23f6aac:	4631      	mov	r1, r6
 23f6aae:	4668      	mov	r0, sp
 23f6ab0:	f003 fd51 	bl	23fa556 <_ZNK6String16equalsIgnoreCaseERKS_>
 23f6ab4:	4607      	mov	r7, r0
 23f6ab6:	4668      	mov	r0, sp
 23f6ab8:	f003 fbb6 	bl	23fa228 <_ZN6StringD1Ev>
 23f6abc:	b91f      	cbnz	r7, 23f6ac6 <_ZN6Device3getE6String+0x3a>
        ptr = ptr->_next;
 23f6abe:	6864      	ldr	r4, [r4, #4]
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f6ac0:	3501      	adds	r5, #1
 23f6ac2:	e7e9      	b.n	23f6a98 <_ZN6Device3getE6String+0xc>
    return NULL;
 23f6ac4:	2400      	movs	r4, #0
}
 23f6ac6:	4620      	mov	r0, r4
 23f6ac8:	b005      	add	sp, #20
 23f6aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f6acc:	1007ad58 	.word	0x1007ad58

023f6ad0 <_ZN6Device8setValueE6Stringi>:
int Device::setValue(String name, int value) {
 23f6ad0:	b530      	push	{r4, r5, lr}
 23f6ad2:	b085      	sub	sp, #20
 23f6ad4:	460d      	mov	r5, r1
    Device *ptr = get(name);
 23f6ad6:	4601      	mov	r1, r0
 23f6ad8:	4668      	mov	r0, sp
 23f6ada:	f003 fc3c 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f6ade:	4668      	mov	r0, sp
 23f6ae0:	f7ff ffd4 	bl	23f6a8c <_ZN6Device3getE6String>
 23f6ae4:	4604      	mov	r4, r0
 23f6ae6:	4668      	mov	r0, sp
 23f6ae8:	f003 fb9e 	bl	23fa228 <_ZN6StringD1Ev>
    if( ptr == NULL ) return -1;
 23f6aec:	b13c      	cbz	r4, 23f6afe <_ZN6Device8setValueE6Stringi+0x2e>
    ptr->setValue(value);
 23f6aee:	6823      	ldr	r3, [r4, #0]
 23f6af0:	4620      	mov	r0, r4
 23f6af2:	4629      	mov	r1, r5
 23f6af4:	699b      	ldr	r3, [r3, #24]
 23f6af6:	4798      	blx	r3
    return 0;
 23f6af8:	2000      	movs	r0, #0
}
 23f6afa:	b005      	add	sp, #20
 23f6afc:	bd30      	pop	{r4, r5, pc}
    if( ptr == NULL ) return -1;
 23f6afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f6b02:	e7fa      	b.n	23f6afa <_ZN6Device8setValueE6Stringi+0x2a>

023f6b04 <_ZN6Device15getChangedValueE6String>:
int  Device::getChangedValue(String name) {
 23f6b04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f6b06:	4601      	mov	r1, r0
    Device *device = get(name);
 23f6b08:	4668      	mov	r0, sp
 23f6b0a:	f003 fc24 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f6b0e:	4668      	mov	r0, sp
 23f6b10:	f7ff ffbc 	bl	23f6a8c <_ZN6Device3getE6String>
 23f6b14:	4604      	mov	r4, r0
 23f6b16:	4668      	mov	r0, sp
 23f6b18:	f003 fb86 	bl	23fa228 <_ZN6StringD1Ev>
    if( device == NULL ) {
 23f6b1c:	b134      	cbz	r4, 23f6b2c <_ZN6Device15getChangedValueE6String+0x28>
    return device->getChangedValue();
 23f6b1e:	4620      	mov	r0, r4
 23f6b20:	6823      	ldr	r3, [r4, #0]
 23f6b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 23f6b24:	b004      	add	sp, #16
 23f6b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return device->getChangedValue();
 23f6b2a:	4718      	bx	r3
}
 23f6b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f6b30:	b004      	add	sp, #16
 23f6b32:	bd10      	pop	{r4, pc}

023f6b34 <_ZN6Device13setAllLatLongEff>:
void Device::setAllLatLong(float latitude, float longitude) {
 23f6b34:	b538      	push	{r3, r4, r5, lr}
 23f6b36:	ed2d 8b02 	vpush	{d8}
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f6b3a:	2500      	movs	r5, #0
void Device::setAllLatLong(float latitude, float longitude) {
 23f6b3c:	eeb0 8a40 	vmov.f32	s16, s0
 23f6b40:	eef0 8a60 	vmov.f32	s17, s1
    Device *ptr = _devices;
 23f6b44:	4b0a      	ldr	r3, [pc, #40]	; (23f6b70 <_ZN6Device13setAllLatLongEff+0x3c>)
 23f6b46:	681c      	ldr	r4, [r3, #0]
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f6b48:	f7ff ff96 	bl	23f6a78 <_ZN6Device5countEv>
 23f6b4c:	42a8      	cmp	r0, r5
 23f6b4e:	dd0b      	ble.n	23f6b68 <_ZN6Device13setAllLatLongEff+0x34>
 23f6b50:	b154      	cbz	r4, 23f6b68 <_ZN6Device13setAllLatLongEff+0x34>
        ptr->setLatLong(latitude,longitude);
 23f6b52:	6823      	ldr	r3, [r4, #0]
 23f6b54:	4620      	mov	r0, r4
 23f6b56:	eef0 0a68 	vmov.f32	s1, s17
 23f6b5a:	eeb0 0a48 	vmov.f32	s0, s16
 23f6b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f6b60:	4798      	blx	r3
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f6b62:	3501      	adds	r5, #1
        ptr = ptr->_next;
 23f6b64:	6864      	ldr	r4, [r4, #4]
    for (int i = 0; i < count() && ptr != NULL; i++)
 23f6b66:	e7ef      	b.n	23f6b48 <_ZN6Device13setAllLatLongEff+0x14>
}
 23f6b68:	ecbd 8b02 	vpop	{d8}
 23f6b6c:	bd38      	pop	{r3, r4, r5, pc}
 23f6b6e:	bf00      	nop
 23f6b70:	1007ad58 	.word	0x1007ad58

023f6b74 <_ZN6Device7mqttAllE6StringS0_>:
{
 23f6b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f6b76:	4605      	mov	r5, r0
 23f6b78:	460e      	mov	r6, r1
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f6b7a:	4b10      	ldr	r3, [pc, #64]	; (23f6bbc <_ZN6Device7mqttAllE6StringS0_+0x48>)
{
 23f6b7c:	b089      	sub	sp, #36	; 0x24
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f6b7e:	681c      	ldr	r4, [r3, #0]
 23f6b80:	b1cc      	cbz	r4, 23f6bb6 <_ZN6Device7mqttAllE6StringS0_+0x42>
        if(ptr->_type == 'W') {
 23f6b82:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 23f6b86:	2b57      	cmp	r3, #87	; 0x57
 23f6b88:	d113      	bne.n	23f6bb2 <_ZN6Device7mqttAllE6StringS0_+0x3e>
            ptr->mqtt(topic, message);
 23f6b8a:	6823      	ldr	r3, [r4, #0]
 23f6b8c:	4629      	mov	r1, r5
 23f6b8e:	4668      	mov	r0, sp
 23f6b90:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 23f6b92:	f003 fbe0 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f6b96:	4631      	mov	r1, r6
 23f6b98:	a804      	add	r0, sp, #16
 23f6b9a:	f003 fbdc 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f6b9e:	4669      	mov	r1, sp
 23f6ba0:	4620      	mov	r0, r4
 23f6ba2:	aa04      	add	r2, sp, #16
 23f6ba4:	47b8      	blx	r7
 23f6ba6:	a804      	add	r0, sp, #16
 23f6ba8:	f003 fb3e 	bl	23fa228 <_ZN6StringD1Ev>
 23f6bac:	4668      	mov	r0, sp
 23f6bae:	f003 fb3b 	bl	23fa228 <_ZN6StringD1Ev>
    for (Device *ptr = _devices; ptr != NULL; ptr = ptr->_next)
 23f6bb2:	6864      	ldr	r4, [r4, #4]
 23f6bb4:	e7e4      	b.n	23f6b80 <_ZN6Device7mqttAllE6StringS0_+0xc>
}
 23f6bb6:	b009      	add	sp, #36	; 0x24
 23f6bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f6bba:	bf00      	nop
 23f6bbc:	1007ad58 	.word	0x1007ad58

023f6bc0 <_ZN6Device6exposeEv>:
{
 23f6bc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(!Particle.variable(kDevicesVariableName, calculateDevices))
 23f6bc2:	4c31      	ldr	r4, [pc, #196]	; (23f6c88 <_ZN6Device6exposeEv+0xc8>)
 23f6bc4:	4931      	ldr	r1, [pc, #196]	; (23f6c8c <_ZN6Device6exposeEv+0xcc>)
 23f6bc6:	6820      	ldr	r0, [r4, #0]
 23f6bc8:	f7ff fd3c 	bl	23f6644 <_ZN10CloudClass8variableI6StringJRFS1_vEEEEbRKT_DpOT0_.isra.0>
 23f6bcc:	b988      	cbnz	r0, 23f6bf2 <_ZN6Device6exposeEv+0x32>
    StringSumHelper(const char *p) : String(p) {}
 23f6bce:	4930      	ldr	r1, [pc, #192]	; (23f6c90 <_ZN6Device6exposeEv+0xd0>)
 23f6bd0:	4668      	mov	r0, sp
 23f6bd2:	f003 fb74 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
        Log.error("Error: Unable to expose " + kDevicesVariableName + " variable");
 23f6bd6:	4621      	mov	r1, r4
 23f6bd8:	4668      	mov	r0, sp
 23f6bda:	f003 fc67 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f6bde:	492d      	ldr	r1, [pc, #180]	; (23f6c94 <_ZN6Device6exposeEv+0xd4>)
 23f6be0:	f003 fc70 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f6be4:	6801      	ldr	r1, [r0, #0]
 23f6be6:	482c      	ldr	r0, [pc, #176]	; (23f6c98 <_ZN6Device6exposeEv+0xd8>)
 23f6be8:	f7fd fd78 	bl	23f46dc <_ZNK5spark6Logger5errorEPKcz>
class StringSumHelper : public String
 23f6bec:	4668      	mov	r0, sp
 23f6bee:	f003 fb1b 	bl	23fa228 <_ZN6StringD1Ev>
    if(!Particle.variable(kChecklistVariableName, calculateChecklist))
 23f6bf2:	4c2a      	ldr	r4, [pc, #168]	; (23f6c9c <_ZN6Device6exposeEv+0xdc>)
 23f6bf4:	492a      	ldr	r1, [pc, #168]	; (23f6ca0 <_ZN6Device6exposeEv+0xe0>)
 23f6bf6:	6820      	ldr	r0, [r4, #0]
 23f6bf8:	f7ff fd24 	bl	23f6644 <_ZN10CloudClass8variableI6StringJRFS1_vEEEEbRKT_DpOT0_.isra.0>
 23f6bfc:	b988      	cbnz	r0, 23f6c22 <_ZN6Device6exposeEv+0x62>
    StringSumHelper(const char *p) : String(p) {}
 23f6bfe:	4924      	ldr	r1, [pc, #144]	; (23f6c90 <_ZN6Device6exposeEv+0xd0>)
 23f6c00:	4668      	mov	r0, sp
 23f6c02:	f003 fb5c 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
        Log.error("Error: Unable to expose " + kChecklistVariableName + " variable");
 23f6c06:	4621      	mov	r1, r4
 23f6c08:	4668      	mov	r0, sp
 23f6c0a:	f003 fc4f 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f6c0e:	4921      	ldr	r1, [pc, #132]	; (23f6c94 <_ZN6Device6exposeEv+0xd4>)
 23f6c10:	f003 fc58 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f6c14:	6801      	ldr	r1, [r0, #0]
 23f6c16:	4820      	ldr	r0, [pc, #128]	; (23f6c98 <_ZN6Device6exposeEv+0xd8>)
 23f6c18:	f7fd fd60 	bl	23f46dc <_ZNK5spark6Logger5errorEPKcz>
class StringSumHelper : public String
 23f6c1c:	4668      	mov	r0, sp
 23f6c1e:	f003 fb03 	bl	23fa228 <_ZN6StringD1Ev>
    if(!Particle.variable(kStatusVariableName, Device::calculateStatus))
 23f6c22:	4c20      	ldr	r4, [pc, #128]	; (23f6ca4 <_ZN6Device6exposeEv+0xe4>)
 23f6c24:	4920      	ldr	r1, [pc, #128]	; (23f6ca8 <_ZN6Device6exposeEv+0xe8>)
 23f6c26:	6820      	ldr	r0, [r4, #0]
 23f6c28:	f7ff fd0c 	bl	23f6644 <_ZN10CloudClass8variableI6StringJRFS1_vEEEEbRKT_DpOT0_.isra.0>
 23f6c2c:	b988      	cbnz	r0, 23f6c52 <_ZN6Device6exposeEv+0x92>
    StringSumHelper(const char *p) : String(p) {}
 23f6c2e:	4918      	ldr	r1, [pc, #96]	; (23f6c90 <_ZN6Device6exposeEv+0xd0>)
 23f6c30:	4668      	mov	r0, sp
 23f6c32:	f003 fb44 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
        Log.error("Error: Unable to expose " + kStatusVariableName + " variable");
 23f6c36:	4621      	mov	r1, r4
 23f6c38:	4668      	mov	r0, sp
 23f6c3a:	f003 fc37 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f6c3e:	4915      	ldr	r1, [pc, #84]	; (23f6c94 <_ZN6Device6exposeEv+0xd4>)
 23f6c40:	f003 fc40 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f6c44:	6801      	ldr	r1, [r0, #0]
 23f6c46:	4814      	ldr	r0, [pc, #80]	; (23f6c98 <_ZN6Device6exposeEv+0xd8>)
 23f6c48:	f7fd fd48 	bl	23f46dc <_ZNK5spark6Logger5errorEPKcz>
class StringSumHelper : public String
 23f6c4c:	4668      	mov	r0, sp
 23f6c4e:	f003 faeb 	bl	23fa228 <_ZN6StringD1Ev>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 23f6c52:	4c16      	ldr	r4, [pc, #88]	; (23f6cac <_ZN6Device6exposeEv+0xec>)
 23f6c54:	4916      	ldr	r1, [pc, #88]	; (23f6cb0 <_ZN6Device6exposeEv+0xf0>)
 23f6c56:	6822      	ldr	r2, [r4, #0]
 23f6c58:	4816      	ldr	r0, [pc, #88]	; (23f6cb4 <_ZN6Device6exposeEv+0xf4>)
 23f6c5a:	f001 fde5 	bl	23f8828 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    if(!Particle.function(kSSIDFunctionName, Device::setSSID))
 23f6c5e:	b988      	cbnz	r0, 23f6c84 <_ZN6Device6exposeEv+0xc4>
    StringSumHelper(const char *p) : String(p) {}
 23f6c60:	490b      	ldr	r1, [pc, #44]	; (23f6c90 <_ZN6Device6exposeEv+0xd0>)
 23f6c62:	4668      	mov	r0, sp
 23f6c64:	f003 fb2b 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
        Log.error("Error: Unable to expose " + kSSIDFunctionName + " function");
 23f6c68:	4621      	mov	r1, r4
 23f6c6a:	4668      	mov	r0, sp
 23f6c6c:	f003 fc1e 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f6c70:	4911      	ldr	r1, [pc, #68]	; (23f6cb8 <_ZN6Device6exposeEv+0xf8>)
 23f6c72:	f003 fc27 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f6c76:	6801      	ldr	r1, [r0, #0]
 23f6c78:	4807      	ldr	r0, [pc, #28]	; (23f6c98 <_ZN6Device6exposeEv+0xd8>)
 23f6c7a:	f7fd fd2f 	bl	23f46dc <_ZNK5spark6Logger5errorEPKcz>
class StringSumHelper : public String
 23f6c7e:	4668      	mov	r0, sp
 23f6c80:	f003 fad2 	bl	23fa228 <_ZN6StringD1Ev>
}
 23f6c84:	b004      	add	sp, #16
 23f6c86:	bd10      	pop	{r4, pc}
 23f6c88:	1007ade0 	.word	0x1007ade0
 23f6c8c:	023f6551 	.word	0x023f6551
 23f6c90:	023ff5a6 	.word	0x023ff5a6
 23f6c94:	023ff49d 	.word	0x023ff49d
 23f6c98:	1007ae20 	.word	0x1007ae20
 23f6c9c:	1007adf0 	.word	0x1007adf0
 23f6ca0:	023f68e9 	.word	0x023f68e9
 23f6ca4:	1007add0 	.word	0x1007add0
 23f6ca8:	023f6669 	.word	0x023f6669
 23f6cac:	1007adc0 	.word	0x1007adc0
 23f6cb0:	023f67fd 	.word	0x023f67fd
 23f6cb4:	023f87fd 	.word	0x023f87fd
 23f6cb8:	023ff5bf 	.word	0x023ff5bf

023f6cbc <_ZN6Device13publishStatesEv>:


// Publish each device name and its value in response to patriot/query
// New format: patriot/state/<room>/<T>/<name>
void Device::publishStates() {
 23f6cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f6cbe:	4b29      	ldr	r3, [pc, #164]	; (23f6d64 <_ZN6Device13publishStatesEv+0xa8>)
    StringSumHelper(const char *p) : String(p) {}
 23f6cc0:	4f29      	ldr	r7, [pc, #164]	; (23f6d68 <_ZN6Device13publishStatesEv+0xac>)
 23f6cc2:	681c      	ldr	r4, [r3, #0]
        IoT::publishMQTT("state/"+ptr->room()+"/"+ptr->type()+"/"+ptr->name(), String(ptr->_value));
 23f6cc4:	4e29      	ldr	r6, [pc, #164]	; (23f6d6c <_ZN6Device13publishStatesEv+0xb0>)
void Device::publishStates() {
 23f6cc6:	b099      	sub	sp, #100	; 0x64
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f6cc8:	2c00      	cmp	r4, #0
 23f6cca:	d048      	beq.n	23f6d5e <_ZN6Device13publishStatesEv+0xa2>
 23f6ccc:	4639      	mov	r1, r7
 23f6cce:	a804      	add	r0, sp, #16
 23f6cd0:	f003 faf5 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
        IoT::publishMQTT("state/"+ptr->room()+"/"+ptr->type()+"/"+ptr->name(), String(ptr->_value));
 23f6cd4:	6823      	ldr	r3, [r4, #0]
 23f6cd6:	4621      	mov	r1, r4
 23f6cd8:	68db      	ldr	r3, [r3, #12]
 23f6cda:	4668      	mov	r0, sp
 23f6cdc:	4798      	blx	r3
 23f6cde:	4669      	mov	r1, sp
 23f6ce0:	a804      	add	r0, sp, #16
 23f6ce2:	f003 fbe3 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f6ce6:	4631      	mov	r1, r6
 23f6ce8:	f003 fbec 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f6cec:	4605      	mov	r5, r0
 23f6cee:	6823      	ldr	r3, [r4, #0]
 23f6cf0:	4621      	mov	r1, r4
 23f6cf2:	691b      	ldr	r3, [r3, #16]
 23f6cf4:	a808      	add	r0, sp, #32
 23f6cf6:	4798      	blx	r3
 23f6cf8:	4628      	mov	r0, r5
 23f6cfa:	a908      	add	r1, sp, #32
 23f6cfc:	f003 fbd6 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f6d00:	4631      	mov	r1, r6
 23f6d02:	f003 fbdf 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f6d06:	4605      	mov	r5, r0
 23f6d08:	6823      	ldr	r3, [r4, #0]
 23f6d0a:	4621      	mov	r1, r4
 23f6d0c:	689b      	ldr	r3, [r3, #8]
 23f6d0e:	a80c      	add	r0, sp, #48	; 0x30
 23f6d10:	4798      	blx	r3
 23f6d12:	a90c      	add	r1, sp, #48	; 0x30
 23f6d14:	4628      	mov	r0, r5
 23f6d16:	f003 fbc9 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f6d1a:	4601      	mov	r1, r0
 23f6d1c:	a814      	add	r0, sp, #80	; 0x50
 23f6d1e:	f003 fb1a 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f6d22:	69a1      	ldr	r1, [r4, #24]
 23f6d24:	220a      	movs	r2, #10
 23f6d26:	a810      	add	r0, sp, #64	; 0x40
 23f6d28:	f003 fb4b 	bl	23fa3c2 <_ZN6StringC1Eih>
 23f6d2c:	2200      	movs	r2, #0
 23f6d2e:	a910      	add	r1, sp, #64	; 0x40
 23f6d30:	a814      	add	r0, sp, #80	; 0x50
 23f6d32:	f7fd fe2d 	bl	23f4990 <_ZN3IoT11publishMQTTE6StringS0_b>
 23f6d36:	a810      	add	r0, sp, #64	; 0x40
 23f6d38:	f003 fa76 	bl	23fa228 <_ZN6StringD1Ev>
 23f6d3c:	a814      	add	r0, sp, #80	; 0x50
 23f6d3e:	f003 fa73 	bl	23fa228 <_ZN6StringD1Ev>
 23f6d42:	a80c      	add	r0, sp, #48	; 0x30
 23f6d44:	f003 fa70 	bl	23fa228 <_ZN6StringD1Ev>
 23f6d48:	a808      	add	r0, sp, #32
 23f6d4a:	f003 fa6d 	bl	23fa228 <_ZN6StringD1Ev>
 23f6d4e:	4668      	mov	r0, sp
 23f6d50:	f003 fa6a 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f6d54:	a804      	add	r0, sp, #16
 23f6d56:	f003 fa67 	bl	23fa228 <_ZN6StringD1Ev>
    for (Device* ptr = _devices; ptr != NULL; ptr = ptr->_next) {
 23f6d5a:	6864      	ldr	r4, [r4, #4]
 23f6d5c:	e7b4      	b.n	23f6cc8 <_ZN6Device13publishStatesEv+0xc>
    }
}
 23f6d5e:	b019      	add	sp, #100	; 0x64
 23f6d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f6d62:	bf00      	nop
 23f6d64:	1007ad58 	.word	0x1007ad58
 23f6d68:	023ff5c9 	.word	0x023ff5c9
 23f6d6c:	023ff5ce 	.word	0x023ff5ce

023f6d70 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c>:
 23f6d70:	b508      	push	{r3, lr}
static const String kDevicesVariableName       = "Devices";
 23f6d72:	490b      	ldr	r1, [pc, #44]	; (23f6da0 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x30>)
 23f6d74:	480b      	ldr	r0, [pc, #44]	; (23f6da4 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x34>)
 23f6d76:	f003 faa2 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
static const String kChecklistVariableName     = "Checklist";
 23f6d7a:	490b      	ldr	r1, [pc, #44]	; (23f6da8 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x38>)
 23f6d7c:	480b      	ldr	r0, [pc, #44]	; (23f6dac <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x3c>)
 23f6d7e:	f003 fa9e 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
static const String kStatusVariableName        = "Status";
 23f6d82:	490b      	ldr	r1, [pc, #44]	; (23f6db0 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x40>)
 23f6d84:	480b      	ldr	r0, [pc, #44]	; (23f6db4 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x44>)
 23f6d86:	f003 fa9a 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
static const String kPublishName               = "patriot";
 23f6d8a:	490b      	ldr	r1, [pc, #44]	; (23f6db8 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x48>)
 23f6d8c:	480b      	ldr	r0, [pc, #44]	; (23f6dbc <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x4c>)
 23f6d8e:	f003 fa96 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f6d92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
static const String kSSIDFunctionName          = "setSSID";
 23f6d96:	490a      	ldr	r1, [pc, #40]	; (23f6dc0 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x50>)
 23f6d98:	480a      	ldr	r0, [pc, #40]	; (23f6dc4 <_GLOBAL__sub_I__ZN6DeviceC2E6StringS0_c+0x54>)
 23f6d9a:	f003 ba90 	b.w	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
 23f6d9e:	bf00      	nop
 23f6da0:	023fef7c 	.word	0x023fef7c
 23f6da4:	1007ade0 	.word	0x1007ade0
 23f6da8:	023fef84 	.word	0x023fef84
 23f6dac:	1007adf0 	.word	0x1007adf0
 23f6db0:	023fef8e 	.word	0x023fef8e
 23f6db4:	1007add0 	.word	0x1007add0
 23f6db8:	023fef95 	.word	0x023fef95
 23f6dbc:	1007adb0 	.word	0x1007adb0
 23f6dc0:	023fef9d 	.word	0x023fef9d
 23f6dc4:	1007adc0 	.word	0x1007adc0

023f6dc8 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 23f6dc8:	6803      	ldr	r3, [r0, #0]
 23f6dca:	b2c9      	uxtb	r1, r1
 23f6dcc:	689b      	ldr	r3, [r3, #8]
 23f6dce:	4718      	bx	r3

023f6dd0 <_ZN8MCP2300810initializeEii>:
int8_t MCP23008::_iomap;
int8_t MCP23008::_current;
unsigned long MCP23008::_lastReadMillis;

// For I2CIO4R4G5LE board this s/b 0xf0 if all i/o's are inputs
int MCP23008::initialize(int address, int iomap) {
 23f6dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int  status;
    int  retries;
    
    _address = address; // 0x20 = no jumpers
    _iomap = iomap;     // 1's = input
    _current = 0;
 23f6dd2:	2300      	movs	r3, #0
 23f6dd4:	4a36      	ldr	r2, [pc, #216]	; (23f6eb0 <_ZN8MCP2300810initializeEii+0xe0>)
    _address = address; // 0x20 = no jumpers
 23f6dd6:	4d37      	ldr	r5, [pc, #220]	; (23f6eb4 <_ZN8MCP2300810initializeEii+0xe4>)
    _current = 0;
 23f6dd8:	7013      	strb	r3, [r2, #0]
    _iomap = iomap;     // 1's = input
 23f6dda:	4e37      	ldr	r6, [pc, #220]	; (23f6eb8 <_ZN8MCP2300810initializeEii+0xe8>)
    _lastReadMillis = 0;
 23f6ddc:	4a37      	ldr	r2, [pc, #220]	; (23f6ebc <_ZN8MCP2300810initializeEii+0xec>)
    _iomap = iomap;     // 1's = input
 23f6dde:	7031      	strb	r1, [r6, #0]
    _lastReadMillis = 0;
 23f6de0:	6013      	str	r3, [r2, #0]
    _address = address; // 0x20 = no jumpers
 23f6de2:	7028      	strb	r0, [r5, #0]

    // Only the first device on the I2C link needs to enable it
    if(!Wire.isEnabled()) {
 23f6de4:	f004 fc60 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6de8:	f001 fdf8 	bl	23f89dc <_ZN7TwoWire9isEnabledEv>
 23f6dec:	b918      	cbnz	r0, 23f6df6 <_ZN8MCP2300810initializeEii+0x26>
        Wire.begin();
 23f6dee:	f004 fc5b 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6df2:	f001 fdb3 	bl	23f895c <_ZN7TwoWire5beginEv>
int MCP23008::initialize(int address, int iomap) {
 23f6df6:	2704      	movs	r7, #4
    }

    retries = 0;
    do {
        Wire.beginTransmission(_address);
 23f6df8:	f004 fc56 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6dfc:	f995 1000 	ldrsb.w	r1, [r5]
 23f6e00:	f001 fde2 	bl	23f89c8 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(0x00);           // Select IO Direction register
 23f6e04:	f004 fc50 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6e08:	2100      	movs	r1, #0
 23f6e0a:	f7ff ffdd 	bl	23f6dc8 <_ZN7TwoWire5writeEi.isra.0>
        Wire.write(_iomap);          // 0 output, 1 input
 23f6e0e:	f004 fc4b 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6e12:	f996 1000 	ldrsb.w	r1, [r6]
 23f6e16:	f7ff ffd7 	bl	23f6dc8 <_ZN7TwoWire5writeEi.isra.0>
        status = Wire.endTransmission();    // Write 'em, Dano
 23f6e1a:	f004 fc45 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6e1e:	f001 fdda 	bl	23f89d6 <_ZN7TwoWire15endTransmissionEv>
    } while( status != 0 && retries++ < 3);
 23f6e22:	4604      	mov	r4, r0
 23f6e24:	b118      	cbz	r0, 23f6e2e <_ZN8MCP2300810initializeEii+0x5e>
 23f6e26:	3f01      	subs	r7, #1
 23f6e28:	d1e6      	bne.n	23f6df8 <_ZN8MCP2300810initializeEii+0x28>
    if(status != 0) {
        Log.error("MCP23008 Set IODIR failed");
 23f6e2a:	4925      	ldr	r1, [pc, #148]	; (23f6ec0 <_ZN8MCP2300810initializeEii+0xf0>)
 23f6e2c:	e036      	b.n	23f6e9c <_ZN8MCP2300810initializeEii+0xcc>
 23f6e2e:	2704      	movs	r7, #4
        return status;
    }
    
    retries = 0;
    do {
        Wire.beginTransmission(_address);
 23f6e30:	f004 fc3a 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6e34:	f995 1000 	ldrsb.w	r1, [r5]
 23f6e38:	f001 fdc6 	bl	23f89c8 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(0x06);               // Select pull-up resistor register
 23f6e3c:	f004 fc34 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6e40:	2106      	movs	r1, #6
 23f6e42:	f7ff ffc1 	bl	23f6dc8 <_ZN7TwoWire5writeEi.isra.0>
        Wire.write(_iomap);              // pull-ups enabled on all inputs
 23f6e46:	f004 fc2f 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6e4a:	f996 1000 	ldrsb.w	r1, [r6]
 23f6e4e:	f7ff ffbb 	bl	23f6dc8 <_ZN7TwoWire5writeEi.isra.0>
        status = Wire.endTransmission();
 23f6e52:	f004 fc29 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6e56:	f001 fdbe 	bl	23f89d6 <_ZN7TwoWire15endTransmissionEv>
    } while( status != 0 && retries++ < 3);
 23f6e5a:	4604      	mov	r4, r0
 23f6e5c:	b118      	cbz	r0, 23f6e66 <_ZN8MCP2300810initializeEii+0x96>
 23f6e5e:	3f01      	subs	r7, #1
 23f6e60:	d1e6      	bne.n	23f6e30 <_ZN8MCP2300810initializeEii+0x60>
    if(status != 0) {
        Log.error("MCP23008 Set GPPU failed");
 23f6e62:	4918      	ldr	r1, [pc, #96]	; (23f6ec4 <_ZN8MCP2300810initializeEii+0xf4>)
 23f6e64:	e01a      	b.n	23f6e9c <_ZN8MCP2300810initializeEii+0xcc>
 23f6e66:	2704      	movs	r7, #4
        return status;
    }

    retries = 0;
    do {
        Wire.beginTransmission(_address);
 23f6e68:	f004 fc1e 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6e6c:	f995 1000 	ldrsb.w	r1, [r5]
 23f6e70:	f001 fdaa 	bl	23f89c8 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(0x01);               // Polarity register
 23f6e74:	f004 fc18 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6e78:	2101      	movs	r1, #1
 23f6e7a:	f7ff ffa5 	bl	23f6dc8 <_ZN7TwoWire5writeEi.isra.0>
        Wire.write(_iomap);             // Invert all inputs
 23f6e7e:	f004 fc13 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6e82:	f996 1000 	ldrsb.w	r1, [r6]
 23f6e86:	f7ff ff9f 	bl	23f6dc8 <_ZN7TwoWire5writeEi.isra.0>
        status = Wire.endTransmission();
 23f6e8a:	f004 fc0d 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6e8e:	f001 fda2 	bl	23f89d6 <_ZN7TwoWire15endTransmissionEv>
    } while( status != 0 && retries++ < 3);
 23f6e92:	4604      	mov	r4, r0
 23f6e94:	b130      	cbz	r0, 23f6ea4 <_ZN8MCP2300810initializeEii+0xd4>
 23f6e96:	3f01      	subs	r7, #1
 23f6e98:	d1e6      	bne.n	23f6e68 <_ZN8MCP2300810initializeEii+0x98>
    if(status != 0) {
        Log.error("MCP23008 set polarity failed");
 23f6e9a:	490b      	ldr	r1, [pc, #44]	; (23f6ec8 <_ZN8MCP2300810initializeEii+0xf8>)
        Log.error("MCP23008 Set IODIR failed");
 23f6e9c:	480b      	ldr	r0, [pc, #44]	; (23f6ecc <_ZN8MCP2300810initializeEii+0xfc>)
 23f6e9e:	f7fd fc1d 	bl	23f46dc <_ZNK5spark6Logger5errorEPKcz>
        return status;
 23f6ea2:	e003      	b.n	23f6eac <_ZN8MCP2300810initializeEii+0xdc>
        return status;
    }

    Log.info("MCP23008 initialize success");
 23f6ea4:	490a      	ldr	r1, [pc, #40]	; (23f6ed0 <_ZN8MCP2300810initializeEii+0x100>)
 23f6ea6:	4809      	ldr	r0, [pc, #36]	; (23f6ecc <_ZN8MCP2300810initializeEii+0xfc>)
 23f6ea8:	f7fd fc26 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
    return 0;
}
 23f6eac:	4620      	mov	r0, r4
 23f6eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f6eb0:	1007ae06 	.word	0x1007ae06
 23f6eb4:	1007ae05 	.word	0x1007ae05
 23f6eb8:	1007ae04 	.word	0x1007ae04
 23f6ebc:	1007ae00 	.word	0x1007ae00
 23f6ec0:	023ff662 	.word	0x023ff662
 23f6ec4:	023ff649 	.word	0x023ff649
 23f6ec8:	023ff610 	.word	0x023ff610
 23f6ecc:	1007ae20 	.word	0x1007ae20
 23f6ed0:	023ff62d 	.word	0x023ff62d

023f6ed4 <_ZN8MCP230085resetEv>:

int MCP23008::reset() {
 23f6ed4:	b508      	push	{r3, lr}
    Log.warn("MCP23008 Resetting");
 23f6ed6:	4909      	ldr	r1, [pc, #36]	; (23f6efc <_ZN8MCP230085resetEv+0x28>)
 23f6ed8:	4809      	ldr	r0, [pc, #36]	; (23f6f00 <_ZN8MCP230085resetEv+0x2c>)
 23f6eda:	f7fd ff88 	bl	23f4dee <_ZNK5spark6Logger4warnEPKcz>
    Wire.reset();
 23f6ede:	f004 fbe3 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6ee2:	f001 fd7f 	bl	23f89e4 <_ZN7TwoWire5resetEv>
    return initialize(_address, _iomap);
 23f6ee6:	4b07      	ldr	r3, [pc, #28]	; (23f6f04 <_ZN8MCP230085resetEv+0x30>)
 23f6ee8:	f993 1000 	ldrsb.w	r1, [r3]
 23f6eec:	4b06      	ldr	r3, [pc, #24]	; (23f6f08 <_ZN8MCP230085resetEv+0x34>)
 23f6eee:	f993 0000 	ldrsb.w	r0, [r3]
}
 23f6ef2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return initialize(_address, _iomap);
 23f6ef6:	f7ff bf6b 	b.w	23f6dd0 <_ZN8MCP2300810initializeEii>
 23f6efa:	bf00      	nop
 23f6efc:	023ff67c 	.word	0x023ff67c
 23f6f00:	1007ae20 	.word	0x1007ae20
 23f6f04:	1007ae04 	.word	0x1007ae04
 23f6f08:	1007ae05 	.word	0x1007ae05

023f6f0c <_ZN8MCP230084readEv>:

int MCP23008::read() {
 23f6f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f6f0e:	f000 fe53 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
    int retries = 0;
    int status;
    
    if(millis() < _lastReadMillis + POLL_MILLIS) {
 23f6f12:	4e20      	ldr	r6, [pc, #128]	; (23f6f94 <_ZN8MCP230084readEv+0x88>)
 23f6f14:	6833      	ldr	r3, [r6, #0]
 23f6f16:	3364      	adds	r3, #100	; 0x64
 23f6f18:	4283      	cmp	r3, r0
 23f6f1a:	d904      	bls.n	23f6f26 <_ZN8MCP230084readEv+0x1a>
        return _current;
 23f6f1c:	4b1e      	ldr	r3, [pc, #120]	; (23f6f98 <_ZN8MCP230084readEv+0x8c>)
 23f6f1e:	f993 4000 	ldrsb.w	r4, [r3]
        _lastReadMillis = millis(); // Don't update if read failed
        return(_current);    // Inverted ?
    }
    Log.error("MCP23008 Error reading switch");
    return 0;
}
 23f6f22:	4620      	mov	r0, r4
 23f6f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f6f26:	2504      	movs	r5, #4
        Wire.beginTransmission(_address);
 23f6f28:	4f1c      	ldr	r7, [pc, #112]	; (23f6f9c <_ZN8MCP230084readEv+0x90>)
 23f6f2a:	f004 fbbd 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6f2e:	f997 1000 	ldrsb.w	r1, [r7]
 23f6f32:	f001 fd49 	bl	23f89c8 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(0x09);       // GPIO Register
 23f6f36:	f004 fbb7 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6f3a:	2109      	movs	r1, #9
 23f6f3c:	f7ff ff44 	bl	23f6dc8 <_ZN7TwoWire5writeEi.isra.0>
        status = Wire.endTransmission();
 23f6f40:	f004 fbb2 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6f44:	f001 fd47 	bl	23f89d6 <_ZN7TwoWire15endTransmissionEv>
    } while(status != 0 && retries++ < 3);
 23f6f48:	4604      	mov	r4, r0
 23f6f4a:	b140      	cbz	r0, 23f6f5e <_ZN8MCP230084readEv+0x52>
 23f6f4c:	3d01      	subs	r5, #1
 23f6f4e:	d1ec      	bne.n	23f6f2a <_ZN8MCP230084readEv+0x1e>
        Log.error("MCP23008 Error selecting GPIO register");
 23f6f50:	4913      	ldr	r1, [pc, #76]	; (23f6fa0 <_ZN8MCP230084readEv+0x94>)
 23f6f52:	e000      	b.n	23f6f56 <_ZN8MCP230084readEv+0x4a>
    Log.error("MCP23008 Error reading switch");
 23f6f54:	4913      	ldr	r1, [pc, #76]	; (23f6fa4 <_ZN8MCP230084readEv+0x98>)
        Log.error("MCP23008 Error selecting GPIO register");
 23f6f56:	4814      	ldr	r0, [pc, #80]	; (23f6fa8 <_ZN8MCP230084readEv+0x9c>)
 23f6f58:	f7fd fbc0 	bl	23f46dc <_ZNK5spark6Logger5errorEPKcz>
        return status;
 23f6f5c:	e7e1      	b.n	23f6f22 <_ZN8MCP230084readEv+0x16>
    Wire.requestFrom(_address, 1);      // Read 1 byte
 23f6f5e:	f004 fba3 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6f62:	2201      	movs	r2, #1
 23f6f64:	7839      	ldrb	r1, [r7, #0]
 23f6f66:	f001 fd28 	bl	23f89ba <_ZN7TwoWire11requestFromEhj>
    if (Wire.available() == 1)
 23f6f6a:	f004 fb9d 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6f6e:	6803      	ldr	r3, [r0, #0]
 23f6f70:	691b      	ldr	r3, [r3, #16]
 23f6f72:	4798      	blx	r3
 23f6f74:	2801      	cmp	r0, #1
 23f6f76:	d1ed      	bne.n	23f6f54 <_ZN8MCP230084readEv+0x48>
        _current = Wire.read();
 23f6f78:	f004 fb96 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6f7c:	6803      	ldr	r3, [r0, #0]
 23f6f7e:	4c06      	ldr	r4, [pc, #24]	; (23f6f98 <_ZN8MCP230084readEv+0x8c>)
 23f6f80:	695b      	ldr	r3, [r3, #20]
 23f6f82:	4798      	blx	r3
 23f6f84:	7020      	strb	r0, [r4, #0]
 23f6f86:	f000 fe17 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
        return(_current);    // Inverted ?
 23f6f8a:	f994 4000 	ldrsb.w	r4, [r4]
        _lastReadMillis = millis(); // Don't update if read failed
 23f6f8e:	6030      	str	r0, [r6, #0]
        return(_current);    // Inverted ?
 23f6f90:	e7c7      	b.n	23f6f22 <_ZN8MCP230084readEv+0x16>
 23f6f92:	bf00      	nop
 23f6f94:	1007ae00 	.word	0x1007ae00
 23f6f98:	1007ae06 	.word	0x1007ae06
 23f6f9c:	1007ae05 	.word	0x1007ae05
 23f6fa0:	023ff6ad 	.word	0x023ff6ad
 23f6fa4:	023ff68f 	.word	0x023ff68f
 23f6fa8:	1007ae20 	.word	0x1007ae20

023f6fac <_ZN8MCP230085writeEib>:

int MCP23008::write(int ioNum, bool value) {
 23f6fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f6fae:	4606      	mov	r6, r0
    Log.info("MCP23008 write ioNum %d = %d",ioNum,value);
    // Add or remove bit from current _value
    int bitmap = 0x01 << ioNum;
 23f6fb0:	2401      	movs	r4, #1
int MCP23008::write(int ioNum, bool value) {
 23f6fb2:	460d      	mov	r5, r1
    Log.info("MCP23008 write ioNum %d = %d",ioNum,value);
 23f6fb4:	460b      	mov	r3, r1
 23f6fb6:	4602      	mov	r2, r0
 23f6fb8:	491c      	ldr	r1, [pc, #112]	; (23f702c <_ZN8MCP230085writeEib+0x80>)
 23f6fba:	481d      	ldr	r0, [pc, #116]	; (23f7030 <_ZN8MCP230085writeEib+0x84>)
 23f6fbc:	f7fd fb9c 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
    int bitmap = 0x01 << ioNum;
 23f6fc0:	fa04 f006 	lsl.w	r0, r4, r6
 23f6fc4:	4c1b      	ldr	r4, [pc, #108]	; (23f7034 <_ZN8MCP230085writeEib+0x88>)
    if(value==true) {   // Set bit
        _current |= bitmap;
 23f6fc6:	b242      	sxtb	r2, r0
 23f6fc8:	7823      	ldrb	r3, [r4, #0]
    if(value==true) {   // Set bit
 23f6fca:	b35d      	cbz	r5, 23f7024 <_ZN8MCP230085writeEib+0x78>
        _current |= bitmap;
 23f6fcc:	431a      	orrs	r2, r3
    } else {
        _current &= (0xff ^ bitmap);
 23f6fce:	b252      	sxtb	r2, r2
    }
    Log.info("MCP23008 writing %x",_current);
 23f6fd0:	4919      	ldr	r1, [pc, #100]	; (23f7038 <_ZN8MCP230085writeEib+0x8c>)
 23f6fd2:	4817      	ldr	r0, [pc, #92]	; (23f7030 <_ZN8MCP230085writeEib+0x84>)
 23f6fd4:	7022      	strb	r2, [r4, #0]
 23f6fd6:	2603      	movs	r6, #3
 23f6fd8:	f7fd fb8e 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>

    int retryCount = 3;
    int status;
    do {
        Wire.beginTransmission(_address);
 23f6fdc:	4f17      	ldr	r7, [pc, #92]	; (23f703c <_ZN8MCP230085writeEib+0x90>)
 23f6fde:	f004 fb63 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6fe2:	f997 1000 	ldrsb.w	r1, [r7]
 23f6fe6:	f001 fcef 	bl	23f89c8 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(0x09);   // GPIO register
 23f6fea:	f004 fb5d 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6fee:	2109      	movs	r1, #9
 23f6ff0:	f7ff feea 	bl	23f6dc8 <_ZN7TwoWire5writeEi.isra.0>
        
        Wire.write(_current);
 23f6ff4:	f004 fb58 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f6ff8:	f994 1000 	ldrsb.w	r1, [r4]
 23f6ffc:	f7ff fee4 	bl	23f6dc8 <_ZN7TwoWire5writeEi.isra.0>
        
        status = Wire.endTransmission();
 23f7000:	f004 fb52 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f7004:	f001 fce7 	bl	23f89d6 <_ZN7TwoWire15endTransmissionEv>
        retryCount--;
    } while(status != 0 && retryCount > 0);
 23f7008:	4605      	mov	r5, r0
 23f700a:	b148      	cbz	r0, 23f7020 <_ZN8MCP230085writeEib+0x74>
 23f700c:	3e01      	subs	r6, #1
 23f700e:	d1e6      	bne.n	23f6fde <_ZN8MCP230085writeEib+0x32>
    
    if(status != 0) {
        Log.error("MCP23008 write failed, value = %x", _current);
 23f7010:	f994 2000 	ldrsb.w	r2, [r4]
 23f7014:	490a      	ldr	r1, [pc, #40]	; (23f7040 <_ZN8MCP230085writeEib+0x94>)
 23f7016:	4806      	ldr	r0, [pc, #24]	; (23f7030 <_ZN8MCP230085writeEib+0x84>)
 23f7018:	f7fd fb60 	bl	23f46dc <_ZNK5spark6Logger5errorEPKcz>
        reset();
 23f701c:	f7ff ff5a 	bl	23f6ed4 <_ZN8MCP230085resetEv>
    }
    return status;
}
 23f7020:	4628      	mov	r0, r5
 23f7022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _current &= (0xff ^ bitmap);
 23f7024:	ea23 0202 	bic.w	r2, r3, r2
 23f7028:	e7d1      	b.n	23f6fce <_ZN8MCP230085writeEib+0x22>
 23f702a:	bf00      	nop
 23f702c:	023ff6d4 	.word	0x023ff6d4
 23f7030:	1007ae20 	.word	0x1007ae20
 23f7034:	1007ae06 	.word	0x1007ae06
 23f7038:	023ff6f1 	.word	0x023ff6f1
 23f703c:	1007ae05 	.word	0x1007ae05
 23f7040:	023ff705 	.word	0x023ff705

023f7044 <_ZN7TwoWire5writeEi.isra.0>:
 23f7044:	6803      	ldr	r3, [r0, #0]
 23f7046:	b2c9      	uxtb	r1, r1
 23f7048:	689b      	ldr	r3, [r3, #8]
 23f704a:	4718      	bx	r3

023f704c <_ZN7PCA963410initializeEi>:

#include "IoT.h"

int8_t PCA9634::address;

int PCA9634::initialize(int boardAddress) {
 23f704c:	b530      	push	{r4, r5, lr}
    int status;
    
    address = boardAddress;
 23f704e:	4c47      	ldr	r4, [pc, #284]	; (23f716c <_ZN7PCA963410initializeEi+0x120>)
int PCA9634::initialize(int boardAddress) {
 23f7050:	b089      	sub	sp, #36	; 0x24
    address = boardAddress;
 23f7052:	7020      	strb	r0, [r4, #0]

    // Only the first device on the I2C link needs to enable it
    if(!Wire.isEnabled()) {
 23f7054:	f004 fb28 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f7058:	f001 fcc0 	bl	23f89dc <_ZN7TwoWire9isEnabledEv>
 23f705c:	b918      	cbnz	r0, 23f7066 <_ZN7PCA963410initializeEi+0x1a>
        Wire.begin();
 23f705e:	f004 fb23 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f7062:	f001 fc7b 	bl	23f895c <_ZN7TwoWire5beginEv>
    }

    Wire.beginTransmission(address);   // Seems unnecessary
 23f7066:	f004 fb1f 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f706a:	f994 1000 	ldrsb.w	r1, [r4]
 23f706e:	f001 fcab 	bl	23f89c8 <_ZN7TwoWire17beginTransmissionEi>
    status = Wire.endTransmission();
 23f7072:	f004 fb19 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f7076:	f001 fcae 	bl	23f89d6 <_ZN7TwoWire15endTransmissionEv>

    if(status == 0) {
 23f707a:	4605      	mov	r5, r0
 23f707c:	2800      	cmp	r0, #0
 23f707e:	d15e      	bne.n	23f713e <_ZN7PCA963410initializeEi+0xf2>
        //TODO: handle additional errors
        Wire.beginTransmission(address);
 23f7080:	f004 fb12 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f7084:	f994 1000 	ldrsb.w	r1, [r4]
 23f7088:	f001 fc9e 	bl	23f89c8 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(0);          // Control register - No AI, point to reg0 Mode1
 23f708c:	f004 fb0c 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f7090:	4629      	mov	r1, r5
 23f7092:	f7ff ffd7 	bl	23f7044 <_ZN7TwoWire5writeEi.isra.0>
        Wire.write(0);          // Mode1 reg. Osc on, disable AI, subaddrs, allcall
 23f7096:	f004 fb07 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f709a:	4629      	mov	r1, r5
 23f709c:	f7ff ffd2 	bl	23f7044 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
 23f70a0:	f004 fb02 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f70a4:	f001 fc97 	bl	23f89d6 <_ZN7TwoWire15endTransmissionEv>

        Wire.beginTransmission(address);
 23f70a8:	f004 fafe 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f70ac:	f994 1000 	ldrsb.w	r1, [r4]
 23f70b0:	f001 fc8a 	bl	23f89c8 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(1);          // Mode2 register
 23f70b4:	f004 faf8 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f70b8:	2101      	movs	r1, #1
 23f70ba:	f7ff ffc3 	bl	23f7044 <_ZN7TwoWire5writeEi.isra.0>
        Wire.write(0x04);       // Dimming, Not inverted, totem-pole
 23f70be:	f004 faf3 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f70c2:	2104      	movs	r1, #4
 23f70c4:	f7ff ffbe 	bl	23f7044 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
 23f70c8:	f004 faee 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f70cc:	f001 fc83 	bl	23f89d6 <_ZN7TwoWire15endTransmissionEv>

        Wire.beginTransmission(address);
 23f70d0:	f004 faea 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f70d4:	f994 1000 	ldrsb.w	r1, [r4]
 23f70d8:	f001 fc76 	bl	23f89c8 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(0x8c);       // AI + LEDOUT0
 23f70dc:	f004 fae4 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f70e0:	218c      	movs	r1, #140	; 0x8c
 23f70e2:	f7ff ffaf 	bl	23f7044 <_ZN7TwoWire5writeEi.isra.0>
        Wire.write(0xaa);       // LEDOUT0 LEDs 0-3 dimming
 23f70e6:	f004 fadf 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f70ea:	21aa      	movs	r1, #170	; 0xaa
 23f70ec:	f7ff ffaa 	bl	23f7044 <_ZN7TwoWire5writeEi.isra.0>
        Wire.write(0xaa);       // LEDOUT1 LEDS 4-7 dimming
 23f70f0:	f004 fada 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f70f4:	21aa      	movs	r1, #170	; 0xaa
 23f70f6:	f7ff ffa5 	bl	23f7044 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
 23f70fa:	f004 fad5 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f70fe:	f001 fc6a 	bl	23f89d6 <_ZN7TwoWire15endTransmissionEv>
    StringSumHelper(const char *p) : String(p) {}
 23f7102:	491b      	ldr	r1, [pc, #108]	; (23f7170 <_ZN7PCA963410initializeEi+0x124>)
 23f7104:	a804      	add	r0, sp, #16
 23f7106:	f003 f8da 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>

        Log.info("PCA9634 Initialize address " + String(address) + " success");
 23f710a:	220a      	movs	r2, #10
 23f710c:	f994 1000 	ldrsb.w	r1, [r4]
 23f7110:	4668      	mov	r0, sp
 23f7112:	f003 f956 	bl	23fa3c2 <_ZN6StringC1Eih>
 23f7116:	4669      	mov	r1, sp
 23f7118:	a804      	add	r0, sp, #16
 23f711a:	f003 f9c7 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f711e:	4915      	ldr	r1, [pc, #84]	; (23f7174 <_ZN7PCA963410initializeEi+0x128>)
 23f7120:	f003 f9d0 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f7124:	6801      	ldr	r1, [r0, #0]
 23f7126:	4814      	ldr	r0, [pc, #80]	; (23f7178 <_ZN7PCA963410initializeEi+0x12c>)
 23f7128:	f7fd fae6 	bl	23f46f8 <_ZNK5spark6Logger4infoEPKcz>
        
    } else {
        Log.error("PCA9634 Initialize " + String(address) + " FAILED!");
 23f712c:	4668      	mov	r0, sp
 23f712e:	f003 f87b 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f7132:	a804      	add	r0, sp, #16
 23f7134:	f003 f878 	bl	23fa228 <_ZN6StringD1Ev>
    }

    return status;
}
 23f7138:	4628      	mov	r0, r5
 23f713a:	b009      	add	sp, #36	; 0x24
 23f713c:	bd30      	pop	{r4, r5, pc}
    StringSumHelper(const char *p) : String(p) {}
 23f713e:	490f      	ldr	r1, [pc, #60]	; (23f717c <_ZN7PCA963410initializeEi+0x130>)
 23f7140:	a804      	add	r0, sp, #16
 23f7142:	f003 f8bc 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
        Log.error("PCA9634 Initialize " + String(address) + " FAILED!");
 23f7146:	220a      	movs	r2, #10
 23f7148:	f994 1000 	ldrsb.w	r1, [r4]
 23f714c:	4668      	mov	r0, sp
 23f714e:	f003 f938 	bl	23fa3c2 <_ZN6StringC1Eih>
 23f7152:	4669      	mov	r1, sp
 23f7154:	a804      	add	r0, sp, #16
 23f7156:	f003 f9a9 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f715a:	4909      	ldr	r1, [pc, #36]	; (23f7180 <_ZN7PCA963410initializeEi+0x134>)
 23f715c:	f003 f9b2 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f7160:	6801      	ldr	r1, [r0, #0]
 23f7162:	4805      	ldr	r0, [pc, #20]	; (23f7178 <_ZN7PCA963410initializeEi+0x12c>)
 23f7164:	f7fd faba 	bl	23f46dc <_ZNK5spark6Logger5errorEPKcz>
 23f7168:	e7e0      	b.n	23f712c <_ZN7PCA963410initializeEi+0xe0>
 23f716a:	bf00      	nop
 23f716c:	1007ae07 	.word	0x1007ae07
 23f7170:	023ff727 	.word	0x023ff727
 23f7174:	023ff640 	.word	0x023ff640
 23f7178:	1007ae20 	.word	0x1007ae20
 23f717c:	023ff743 	.word	0x023ff743
 23f7180:	023ff757 	.word	0x023ff757

023f7184 <_ZN7PCA96345resetEv>:

void PCA9634::reset() {
 23f7184:	b508      	push	{r3, lr}
    Log.error("Resetting PCA9634");
 23f7186:	4909      	ldr	r1, [pc, #36]	; (23f71ac <_ZN7PCA96345resetEv+0x28>)
 23f7188:	4809      	ldr	r0, [pc, #36]	; (23f71b0 <_ZN7PCA96345resetEv+0x2c>)
 23f718a:	f7fd faa7 	bl	23f46dc <_ZNK5spark6Logger5errorEPKcz>
    Wire.reset();
 23f718e:	f004 fa8b 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f7192:	f001 fc27 	bl	23f89e4 <_ZN7TwoWire5resetEv>
    // Do we need any delay here?
    Wire.begin();
 23f7196:	f004 fa87 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f719a:	f001 fbdf 	bl	23f895c <_ZN7TwoWire5beginEv>
//    Wire.write(0x5a);
//    byte status = Wire.endTransmission();
//    if(status != 0){
//        Log.error("resetPCA9634 reset write failed");
//    }
    initialize(address);
 23f719e:	4b05      	ldr	r3, [pc, #20]	; (23f71b4 <_ZN7PCA96345resetEv+0x30>)
 23f71a0:	f993 0000 	ldrsb.w	r0, [r3]
}
 23f71a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    initialize(address);
 23f71a8:	f7ff bf50 	b.w	23f704c <_ZN7PCA963410initializeEi>
 23f71ac:	023ff760 	.word	0x023ff760
 23f71b0:	1007ae20 	.word	0x1007ae20
 23f71b4:	1007ae07 	.word	0x1007ae07

023f71b8 <_ZN7PCA96349outputPWMEii>:

// 8 bit PWM level 0-255
void PCA9634::outputPWM(int lightNum, int level) {
 23f71b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f71bc:	4605      	mov	r5, r0
 23f71be:	460c      	mov	r4, r1
    int reg = 2 + lightNum;
 23f71c0:	2606      	movs	r6, #6
    
    int retryCount = 5;
    byte status;
    do {
        Wire.beginTransmission(address);
 23f71c2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 23f7264 <_ZN7PCA96349outputPWMEii+0xac>
void PCA9634::outputPWM(int lightNum, int level) {
 23f71c6:	b08c      	sub	sp, #48	; 0x30
    int reg = 2 + lightNum;
 23f71c8:	1c87      	adds	r7, r0, #2
        Wire.beginTransmission(address);
 23f71ca:	f004 fa6d 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f71ce:	f998 1000 	ldrsb.w	r1, [r8]
 23f71d2:	f001 fbf9 	bl	23f89c8 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(reg);
 23f71d6:	f004 fa67 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f71da:	4639      	mov	r1, r7
 23f71dc:	f7ff ff32 	bl	23f7044 <_ZN7TwoWire5writeEi.isra.0>
        Wire.write(level);
 23f71e0:	f004 fa62 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f71e4:	4621      	mov	r1, r4
 23f71e6:	f7ff ff2d 	bl	23f7044 <_ZN7TwoWire5writeEi.isra.0>
        status = Wire.endTransmission();
 23f71ea:	f004 fa5d 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23f71ee:	f001 fbf2 	bl	23f89d6 <_ZN7TwoWire15endTransmissionEv>
        retryCount--;
    } while(status != 0 && retryCount >= 0);
 23f71f2:	b368      	cbz	r0, 23f7250 <_ZN7PCA96349outputPWMEii+0x98>
 23f71f4:	3e01      	subs	r6, #1
 23f71f6:	d1e8      	bne.n	23f71ca <_ZN7PCA96349outputPWMEii+0x12>
 23f71f8:	4917      	ldr	r1, [pc, #92]	; (23f7258 <_ZN7PCA96349outputPWMEii+0xa0>)
 23f71fa:	a804      	add	r0, sp, #16
 23f71fc:	f003 f85f 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    
    if(status != 0) {
        Log.error("PCA9634 outputPWM write failed for light "+String(lightNum)+", level = "+String(level));
 23f7200:	220a      	movs	r2, #10
 23f7202:	4629      	mov	r1, r5
 23f7204:	4668      	mov	r0, sp
 23f7206:	f003 f8dc 	bl	23fa3c2 <_ZN6StringC1Eih>
 23f720a:	4669      	mov	r1, sp
 23f720c:	a804      	add	r0, sp, #16
 23f720e:	f003 f94d 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f7212:	4912      	ldr	r1, [pc, #72]	; (23f725c <_ZN7PCA96349outputPWMEii+0xa4>)
 23f7214:	f003 f956 	bl	23fa4c4 <_ZplRK15StringSumHelperPKc>
 23f7218:	4605      	mov	r5, r0
 23f721a:	220a      	movs	r2, #10
 23f721c:	4621      	mov	r1, r4
 23f721e:	a808      	add	r0, sp, #32
 23f7220:	f003 f8cf 	bl	23fa3c2 <_ZN6StringC1Eih>
 23f7224:	a908      	add	r1, sp, #32
 23f7226:	4628      	mov	r0, r5
 23f7228:	f003 f940 	bl	23fa4ac <_ZplRK15StringSumHelperRK6String>
 23f722c:	6801      	ldr	r1, [r0, #0]
 23f722e:	480c      	ldr	r0, [pc, #48]	; (23f7260 <_ZN7PCA96349outputPWMEii+0xa8>)
 23f7230:	f7fd fa54 	bl	23f46dc <_ZNK5spark6Logger5errorEPKcz>
 23f7234:	a808      	add	r0, sp, #32
 23f7236:	f002 fff7 	bl	23fa228 <_ZN6StringD1Ev>
 23f723a:	4668      	mov	r0, sp
 23f723c:	f002 fff4 	bl	23fa228 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23f7240:	a804      	add	r0, sp, #16
 23f7242:	f002 fff1 	bl	23fa228 <_ZN6StringD1Ev>
        reset();
    }
}
 23f7246:	b00c      	add	sp, #48	; 0x30
 23f7248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        reset();
 23f724c:	f7ff bf9a 	b.w	23f7184 <_ZN7PCA96345resetEv>
}
 23f7250:	b00c      	add	sp, #48	; 0x30
 23f7252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f7256:	bf00      	nop
 23f7258:	023ff772 	.word	0x023ff772
 23f725c:	023ff79c 	.word	0x023ff79c
 23f7260:	1007ae20 	.word	0x1007ae20
 23f7264:	1007ae07 	.word	0x1007ae07

023f7268 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
 23f7268:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
 23f726c:	b510      	push	{r4, lr}
 23f726e:	4604      	mov	r4, r0
            this->mqtt = mqtt;
 23f7270:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
 23f7272:	b113      	cbz	r3, 23f727a <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
 23f7274:	6d88      	ldr	r0, [r1, #88]	; 0x58
 23f7276:	f000 fc21 	bl	23f7abc <os_mutex_lock>
#endif
#endif
#endif
        }
 23f727a:	4620      	mov	r0, r4
 23f727c:	bd10      	pop	{r4, pc}

023f727e <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
 23f727e:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
 23f7280:	6803      	ldr	r3, [r0, #0]
        ~MutexLocker() {
 23f7282:	4604      	mov	r4, r0
            if (mqtt->thread)
 23f7284:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 23f7288:	b112      	cbz	r2, 23f7290 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
 23f728a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 23f728c:	f000 fc24 	bl	23f7ad8 <os_mutex_unlock>
#endif
#endif
#endif
        }
 23f7290:	4620      	mov	r0, r4
 23f7292:	bd10      	pop	{r4, pc}

023f7294 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
 23f7294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f7296:	461f      	mov	r7, r3
 23f7298:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 23f729c:	4604      	mov	r4, r0
 23f729e:	460d      	mov	r5, r1
 23f72a0:	4616      	mov	r6, r2
    if (thread) {
 23f72a2:	b123      	cbz	r3, 23f72ae <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1a>
        this->thread = true;
 23f72a4:	2301      	movs	r3, #1
        os_mutex_create(&mutex_lock);
 23f72a6:	3058      	adds	r0, #88	; 0x58
        this->thread = true;
 23f72a8:	7103      	strb	r3, [r0, #4]
        os_mutex_create(&mutex_lock);
 23f72aa:	f000 fbf9 	bl	23f7aa0 <os_mutex_create>
    }
    this->callback = callback;
 23f72ae:	9b08      	ldr	r3, [sp, #32]
 23f72b0:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
 23f72b2:	2300      	movs	r3, #0
 23f72b4:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
 23f72b6:	b106      	cbz	r6, 23f72ba <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x26>
        this->ip = ip;
 23f72b8:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
 23f72ba:	b125      	cbz	r5, 23f72c6 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x32>
        this->domain = domain;
 23f72bc:	4629      	mov	r1, r5
 23f72be:	f104 0038 	add.w	r0, r4, #56	; 0x38
 23f72c2:	f003 f85b 	bl	23fa37c <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 23f72c6:	9b06      	ldr	r3, [sp, #24]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 23f72c8:	69e0      	ldr	r0, [r4, #28]
    this->keepalive = keepalive;
 23f72ca:	6523      	str	r3, [r4, #80]	; 0x50
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 23f72cc:	9b07      	ldr	r3, [sp, #28]
    this->port = port;
 23f72ce:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 23f72d2:	2bff      	cmp	r3, #255	; 0xff
 23f72d4:	bfb8      	it	lt
 23f72d6:	23ff      	movlt	r3, #255	; 0xff
 23f72d8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 23f72dc:	b108      	cbz	r0, 23f72e2 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x4e>
      delete[] buffer;
 23f72de:	f7fc fb2c 	bl	23f393a <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 23f72e2:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 23f72e6:	f7fc fb26 	bl	23f3936 <_Znaj>
 23f72ea:	61e0      	str	r0, [r4, #28]
}
 23f72ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

023f72f0 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
 23f72f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f72f4:	4604      	mov	r4, r0
            bool thread) {
 23f72f6:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
 23f72f8:	4698      	mov	r8, r3
 23f72fa:	4617      	mov	r7, r2
 23f72fc:	460e      	mov	r6, r1
            bool thread) {
 23f72fe:	f003 fd33 	bl	23fad68 <_ZN9TCPClientC1Ev>
 23f7302:	490d      	ldr	r1, [pc, #52]	; (23f7338 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
 23f7304:	61e5      	str	r5, [r4, #28]
 23f7306:	f104 0038 	add.w	r0, r4, #56	; 0x38
 23f730a:	f002 ffd8 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
 23f730e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 23f7312:	22ff      	movs	r2, #255	; 0xff
 23f7314:	e9cd 8302 	strd	r8, r3, [sp, #8]
 23f7318:	230f      	movs	r3, #15
 23f731a:	4620      	mov	r0, r4
 23f731c:	e9cd 3200 	strd	r3, r2, [sp]
 23f7320:	4631      	mov	r1, r6
 23f7322:	463b      	mov	r3, r7
 23f7324:	462a      	mov	r2, r5
            bool thread) {
 23f7326:	64a5      	str	r5, [r4, #72]	; 0x48
 23f7328:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
 23f732c:	f7ff ffb2 	bl	23f7294 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
 23f7330:	4620      	mov	r0, r4
 23f7332:	b004      	add	sp, #16
 23f7334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f7338:	023ff87d 	.word	0x023ff87d

023f733c <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 23f733c:	b510      	push	{r4, lr}
 23f733e:	4604      	mov	r4, r0
    while(!_client.available()) {}
 23f7340:	4620      	mov	r0, r4
 23f7342:	f003 fc6d 	bl	23fac20 <_ZN9TCPClient9availableEv>
 23f7346:	2800      	cmp	r0, #0
 23f7348:	d0fa      	beq.n	23f7340 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 23f734a:	4620      	mov	r0, r4
 23f734c:	f003 fa52 	bl	23fa7f4 <_ZN9TCPClient4readEv>
}
 23f7350:	b2c0      	uxtb	r0, r0
 23f7352:	bd10      	pop	{r4, pc}

023f7354 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 23f7354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t len = 0;
    buffer[len++] = readByte();
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 23f7358:	f04f 0901 	mov.w	r9, #1
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 23f735c:	4605      	mov	r5, r0
 23f735e:	4688      	mov	r8, r1
    buffer[len++] = readByte();
 23f7360:	f7ff ffec 	bl	23f733c <_ZN4MQTT8readByteEv>
    uint16_t length = 0;
 23f7364:	2700      	movs	r7, #0
    buffer[len++] = readByte();
 23f7366:	464c      	mov	r4, r9
 23f7368:	69eb      	ldr	r3, [r5, #28]
 23f736a:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 23f736c:	69eb      	ldr	r3, [r5, #28]
 23f736e:	f893 a000 	ldrb.w	sl, [r3]
 23f7372:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 23f7376:	4628      	mov	r0, r5
 23f7378:	f7ff ffe0 	bl	23f733c <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 23f737c:	4626      	mov	r6, r4
 23f737e:	69eb      	ldr	r3, [r5, #28]
 23f7380:	3401      	adds	r4, #1
 23f7382:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 23f7384:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 23f7388:	fb13 f309 	smulbb	r3, r3, r9
 23f738c:	441f      	add	r7, r3
        multiplier *= 128;
    } while ((digit & 128) != 0);
 23f738e:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
 23f7390:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 23f7392:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 23f7394:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
 23f7398:	d4ed      	bmi.n	23f7376 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
 23f739a:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 23f739c:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
 23f73a0:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
 23f73a4:	d11e      	bne.n	23f73e4 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 23f73a6:	4628      	mov	r0, r5
 23f73a8:	f7ff ffc8 	bl	23f733c <_ZN4MQTT8readByteEv>
 23f73ac:	69eb      	ldr	r3, [r5, #28]
 23f73ae:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
 23f73b0:	4628      	mov	r0, r5
 23f73b2:	f7ff ffc3 	bl	23f733c <_ZN4MQTT8readByteEv>
 23f73b6:	1cf4      	adds	r4, r6, #3
 23f73b8:	69eb      	ldr	r3, [r5, #28]
        buffer[len++] = readByte();
 23f73ba:	3602      	adds	r6, #2
        buffer[len++] = readByte();
 23f73bc:	b2b6      	uxth	r6, r6
 23f73be:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 23f73c0:	2602      	movs	r6, #2
        buffer[len++] = readByte();
 23f73c2:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 23f73c4:	b2b6      	uxth	r6, r6
 23f73c6:	42be      	cmp	r6, r7
 23f73c8:	d20e      	bcs.n	23f73e8 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
 23f73ca:	4628      	mov	r0, r5
 23f73cc:	f7ff ffb6 	bl	23f733c <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 23f73d0:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
    for (uint16_t i = start;i<length;i++) {
 23f73d4:	3601      	adds	r6, #1
        if (len < this->maxpacketsize) {
 23f73d6:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 23f73d8:	bf84      	itt	hi
 23f73da:	69eb      	ldrhi	r3, [r5, #28]
 23f73dc:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 23f73de:	3401      	adds	r4, #1
 23f73e0:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
 23f73e2:	e7ef      	b.n	23f73c4 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
 23f73e4:	2600      	movs	r6, #0
 23f73e6:	e7ed      	b.n	23f73c4 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
 23f73e8:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 23f73ec:	42a3      	cmp	r3, r4
 23f73ee:	bf2c      	ite	cs
 23f73f0:	4620      	movcs	r0, r4
 23f73f2:	2000      	movcc	r0, #0
 23f73f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023f73f8 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 23f73f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f73fc:	4615      	mov	r5, r2
 23f73fe:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 23f7400:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 23f7402:	4607      	mov	r7, r0
    uint8_t llen = 0;
 23f7404:	2300      	movs	r3, #0
    do {
        digit = len % 128;
 23f7406:	4696      	mov	lr, r2
 23f7408:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
 23f740c:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 23f7410:	a802      	add	r0, sp, #8
            digit |= 0x80;
 23f7412:	bf88      	it	hi
 23f7414:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        lenBuf[pos++] = digit;
 23f7418:	1c5c      	adds	r4, r3, #1
        llen++;
    } while(len > 0);
 23f741a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
 23f741e:	4403      	add	r3, r0
        len = len / 128;
 23f7420:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
 23f7424:	b2e4      	uxtb	r4, r4
 23f7426:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
 23f742a:	d81e      	bhi.n	23f746a <_ZN4MQTT5writeEhPht+0x72>

    buf[4-llen] = header;
 23f742c:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
 23f7430:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
 23f7434:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
 23f7436:	4622      	mov	r2, r4
 23f7438:	a901      	add	r1, sp, #4
 23f743a:	4428      	add	r0, r5
    buf[4-llen] = header;
 23f743c:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
 23f7440:	f005 fbee 	bl	23fcc20 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 23f7444:	1c72      	adds	r2, r6, #1
 23f7446:	4422      	add	r2, r4
 23f7448:	4641      	mov	r1, r8
 23f744a:	4638      	mov	r0, r7
 23f744c:	f003 f9bd 	bl	23fa7ca <_ZN9TCPClient5writeEPKhj>
 23f7450:	4605      	mov	r5, r0
 23f7452:	f000 fbb1 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 23f7456:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
 23f7458:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 23f745a:	4432      	add	r2, r6
 23f745c:	b2a8      	uxth	r0, r5
}
 23f745e:	1a13      	subs	r3, r2, r0
 23f7460:	4258      	negs	r0, r3
 23f7462:	4158      	adcs	r0, r3
 23f7464:	b002      	add	sp, #8
 23f7466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
 23f746a:	4623      	mov	r3, r4
 23f746c:	e7cb      	b.n	23f7406 <_ZN4MQTT5writeEhPht+0xe>

023f746e <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 23f746e:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 23f7470:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f7472:	4605      	mov	r5, r0
    pos += 2;
 23f7474:	b298      	uxth	r0, r3
 23f7476:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
 23f7478:	5cce      	ldrb	r6, [r1, r3]
 23f747a:	b29c      	uxth	r4, r3
 23f747c:	b14e      	cbz	r6, 23f7492 <_ZN4MQTT11writeStringEPKcPht+0x24>
 23f747e:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
 23f7482:	1c5f      	adds	r7, r3, #1
 23f7484:	4584      	cmp	ip, r0
 23f7486:	d904      	bls.n	23f7492 <_ZN4MQTT11writeStringEPKcPht+0x24>
        buf[pos++] = *idp++;
 23f7488:	1c44      	adds	r4, r0, #1
 23f748a:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
 23f748c:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
 23f748e:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
 23f7490:	e7f2      	b.n	23f7478 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 23f7492:	b299      	uxth	r1, r3
 23f7494:	1a41      	subs	r1, r0, r1
 23f7496:	440a      	add	r2, r1
 23f7498:	0a21      	lsrs	r1, r4, #8
 23f749a:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 23f749e:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
 23f74a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f74a4 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 23f74a4:	b538      	push	{r3, r4, r5, lr}
 23f74a6:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
 23f74a8:	f003 fadc 	bl	23faa64 <_ZN9TCPClient9connectedEv>
 23f74ac:	2800      	cmp	r0, #0
 23f74ae:	bf14      	ite	ne
 23f74b0:	2501      	movne	r5, #1
 23f74b2:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
 23f74b4:	d102      	bne.n	23f74bc <_ZN4MQTT11isConnectedEv+0x18>
 23f74b6:	4620      	mov	r0, r4
 23f74b8:	f003 fc0c 	bl	23facd4 <_ZN9TCPClient4stopEv>
    return rc;
}
 23f74bc:	4628      	mov	r0, r5
 23f74be:	bd38      	pop	{r3, r4, r5, pc}

023f74c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 23f74c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f74c4:	b088      	sub	sp, #32
 23f74c6:	4604      	mov	r4, r0
 23f74c8:	4689      	mov	r9, r1
 23f74ca:	4617      	mov	r7, r2
 23f74cc:	461e      	mov	r6, r3
 23f74ce:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 23f74d2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    if (!isConnected()) {
 23f74d6:	f7ff ffe5 	bl	23f74a4 <_ZN4MQTT11isConnectedEv>
 23f74da:	4605      	mov	r5, r0
 23f74dc:	2800      	cmp	r0, #0
 23f74de:	f040 80cd 	bne.w	23f767c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
 23f74e2:	4621      	mov	r1, r4
 23f74e4:	a801      	add	r0, sp, #4
 23f74e6:	f7ff febf 	bl	23f7268 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
 23f74ea:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f74ec:	2900      	cmp	r1, #0
 23f74ee:	f040 8088 	bne.w	23f7602 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
 23f74f2:	462b      	mov	r3, r5
 23f74f4:	4620      	mov	r0, r4
 23f74f6:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 23f74fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 23f74fc:	f003 fa34 	bl	23fa968 <_ZN9TCPClient7connectEPKctm>
        if (result) {
 23f7500:	2800      	cmp	r0, #0
 23f7502:	d07a      	beq.n	23f75fa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
 23f7504:	2301      	movs	r3, #1
 23f7506:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
 23f7508:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 23f750c:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
 23f750e:	2b04      	cmp	r3, #4
 23f7510:	4b5b      	ldr	r3, [pc, #364]	; (23f7680 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
 23f7512:	f040 8081 	bne.w	23f7618 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 23f7516:	6818      	ldr	r0, [r3, #0]
 23f7518:	8899      	ldrh	r1, [r3, #4]
 23f751a:	799b      	ldrb	r3, [r3, #6]
 23f751c:	f8ad 100c 	strh.w	r1, [sp, #12]
 23f7520:	f88d 300e 	strb.w	r3, [sp, #14]
 23f7524:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 23f7526:	f8c2 0005 	str.w	r0, [r2, #5]
 23f752a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 23f752e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 23f7532:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
 23f7534:	230c      	movs	r3, #12
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 23f7536:	f8a2 1009 	strh.w	r1, [r2, #9]
            if (willTopic) {
 23f753a:	f1b8 0f00 	cmp.w	r8, #0
 23f753e:	f000 8081 	beq.w	23f7644 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 23f7542:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 23f7546:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 23f754a:	0140      	lsls	r0, r0, #5
 23f754c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 23f7550:	f040 0006 	orr.w	r0, r0, #6
 23f7554:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
 23f7556:	f1ba 0f00 	cmp.w	sl, #0
 23f755a:	d101      	bne.n	23f7560 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
 23f755c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
 23f7560:	b11f      	cbz	r7, 23f756a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
 23f7562:	2e00      	cmp	r6, #0
 23f7564:	d170      	bne.n	23f7648 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
 23f7566:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
 23f756a:	69e2      	ldr	r2, [r4, #28]
 23f756c:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
 23f756e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 23f7570:	69e1      	ldr	r1, [r4, #28]
 23f7572:	1c58      	adds	r0, r3, #1
 23f7574:	1212      	asrs	r2, r2, #8
 23f7576:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 23f7578:	69e1      	ldr	r1, [r4, #28]
 23f757a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 23f757c:	1c9a      	adds	r2, r3, #2
 23f757e:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 23f7580:	3303      	adds	r3, #3
 23f7582:	4649      	mov	r1, r9
 23f7584:	4620      	mov	r0, r4
 23f7586:	69e2      	ldr	r2, [r4, #28]
 23f7588:	f7ff ff71 	bl	23f746e <_ZN4MQTT11writeStringEPKcPht>
 23f758c:	4603      	mov	r3, r0
            if (willTopic) {
 23f758e:	f1b8 0f00 	cmp.w	r8, #0
 23f7592:	d00b      	beq.n	23f75ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
 23f7594:	4641      	mov	r1, r8
 23f7596:	69e2      	ldr	r2, [r4, #28]
 23f7598:	4620      	mov	r0, r4
 23f759a:	f7ff ff68 	bl	23f746e <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 23f759e:	69e2      	ldr	r2, [r4, #28]
                length = writeString(willTopic, buffer, length);
 23f75a0:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
 23f75a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 23f75a4:	4620      	mov	r0, r4
 23f75a6:	f7ff ff62 	bl	23f746e <_ZN4MQTT11writeStringEPKcPht>
 23f75aa:	4603      	mov	r3, r0
            if(user != NULL) {
 23f75ac:	b167      	cbz	r7, 23f75c8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
 23f75ae:	4639      	mov	r1, r7
 23f75b0:	4620      	mov	r0, r4
 23f75b2:	69e2      	ldr	r2, [r4, #28]
 23f75b4:	f7ff ff5b 	bl	23f746e <_ZN4MQTT11writeStringEPKcPht>
 23f75b8:	4603      	mov	r3, r0
                if(pass != NULL) {
 23f75ba:	b12e      	cbz	r6, 23f75c8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
 23f75bc:	4631      	mov	r1, r6
 23f75be:	4620      	mov	r0, r4
 23f75c0:	69e2      	ldr	r2, [r4, #28]
 23f75c2:	f7ff ff54 	bl	23f746e <_ZN4MQTT11writeStringEPKcPht>
 23f75c6:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
 23f75c8:	3b05      	subs	r3, #5
 23f75ca:	2110      	movs	r1, #16
 23f75cc:	69e2      	ldr	r2, [r4, #28]
 23f75ce:	b29b      	uxth	r3, r3
 23f75d0:	4620      	mov	r0, r4
 23f75d2:	f7ff ff11 	bl	23f73f8 <_ZN4MQTT5writeEhPht>
 23f75d6:	f000 faef 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 23f75da:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            lastInActivity = lastOutActivity = millis();
 23f75de:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
            while (!_client.available()) {
 23f75e2:	4620      	mov	r0, r4
 23f75e4:	f003 fb1c 	bl	23fac20 <_ZN9TCPClient9availableEv>
 23f75e8:	bb88      	cbnz	r0, 23f764e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
 23f75ea:	f000 fae5 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 23f75ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23f75f0:	1ac0      	subs	r0, r0, r3
 23f75f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 23f75f4:	4373      	muls	r3, r6
 23f75f6:	4298      	cmp	r0, r3
 23f75f8:	d9f3      	bls.n	23f75e2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
 23f75fa:	4620      	mov	r0, r4
 23f75fc:	f003 fb6a 	bl	23facd4 <_ZN9TCPClient4stopEv>
 23f7600:	e035      	b.n	23f766e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
 23f7602:	a802      	add	r0, sp, #8
 23f7604:	f001 fa72 	bl	23f8aec <_ZN9IPAddressC1EPKh>
 23f7608:	462b      	mov	r3, r5
 23f760a:	4620      	mov	r0, r4
 23f760c:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 23f7610:	a902      	add	r1, sp, #8
 23f7612:	f003 fa89 	bl	23fab28 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23f7616:	e773      	b.n	23f7500 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 23f7618:	f8d3 0007 	ldr.w	r0, [r3, #7]
 23f761c:	f8d3 100b 	ldr.w	r1, [r3, #11]
 23f7620:	f10d 0c08 	add.w	ip, sp, #8
 23f7624:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 23f7628:	7bdb      	ldrb	r3, [r3, #15]
 23f762a:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 23f762e:	ab02      	add	r3, sp, #8
 23f7630:	cb03      	ldmia	r3!, {r0, r1}
 23f7632:	f8c2 0005 	str.w	r0, [r2, #5]
 23f7636:	f8c2 1009 	str.w	r1, [r2, #9]
 23f763a:	f89c 3000 	ldrb.w	r3, [ip]
 23f763e:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 23f7640:	230e      	movs	r3, #14
 23f7642:	e77a      	b.n	23f753a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
 23f7644:	2002      	movs	r0, #2
 23f7646:	e786      	b.n	23f7556 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
 23f7648:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 23f764c:	e78d      	b.n	23f756a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
 23f764e:	4620      	mov	r0, r4
 23f7650:	a902      	add	r1, sp, #8
 23f7652:	f7ff fe7f 	bl	23f7354 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
 23f7656:	2804      	cmp	r0, #4
 23f7658:	d1cf      	bne.n	23f75fa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
 23f765a:	69e3      	ldr	r3, [r4, #28]
 23f765c:	78de      	ldrb	r6, [r3, #3]
 23f765e:	2e00      	cmp	r6, #0
 23f7660:	d1cb      	bne.n	23f75fa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
 23f7662:	f000 faa9 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
                    return true;
 23f7666:	2501      	movs	r5, #1
                    lastInActivity = millis();
 23f7668:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 23f766a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
 23f766e:	a801      	add	r0, sp, #4
 23f7670:	f7ff fe05 	bl	23f727e <_ZN4MQTT11MutexLockerD1Ev>
}
 23f7674:	4628      	mov	r0, r5
 23f7676:	b008      	add	sp, #32
 23f7678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
 23f767c:	2500      	movs	r5, #0
 23f767e:	e7f9      	b.n	23f7674 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
 23f7680:	023feca4 	.word	0x023feca4

023f7684 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 23f7684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f7688:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 23f768c:	4604      	mov	r4, r0
 23f768e:	468b      	mov	fp, r1
 23f7690:	4616      	mov	r6, r2
 23f7692:	461f      	mov	r7, r3
 23f7694:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 23f7698:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    if (isConnected()) {
 23f769c:	f7ff ff02 	bl	23f74a4 <_ZN4MQTT11isConnectedEv>
 23f76a0:	4682      	mov	sl, r0
 23f76a2:	2800      	cmp	r0, #0
 23f76a4:	d051      	beq.n	23f774a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
 23f76a6:	4621      	mov	r1, r4
 23f76a8:	a801      	add	r0, sp, #4
 23f76aa:	f7ff fddd 	bl	23f7268 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
 23f76ae:	2100      	movs	r1, #0
 23f76b0:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 23f76b4:	69e0      	ldr	r0, [r4, #28]
 23f76b6:	f005 fada 	bl	23fcc6e <memset>
        length = writeString(topic, buffer, length);
 23f76ba:	2305      	movs	r3, #5
 23f76bc:	4659      	mov	r1, fp
 23f76be:	4620      	mov	r0, r4
 23f76c0:	69e2      	ldr	r2, [r4, #28]
 23f76c2:	f7ff fed4 	bl	23f746e <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
 23f76c6:	1e6b      	subs	r3, r5, #1
 23f76c8:	2b01      	cmp	r3, #1
 23f76ca:	d815      	bhi.n	23f76f8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
 23f76cc:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 23f76ce:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
 23f76d0:	3101      	adds	r1, #1
 23f76d2:	b289      	uxth	r1, r1
 23f76d4:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 23f76d6:	0a09      	lsrs	r1, r1, #8
 23f76d8:	5419      	strb	r1, [r3, r0]
 23f76da:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 23f76dc:	69e3      	ldr	r3, [r4, #28]
 23f76de:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 23f76e0:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
 23f76e2:	3002      	adds	r0, #2
 23f76e4:	b280      	uxth	r0, r0
 23f76e6:	5499      	strb	r1, [r3, r2]
            if (messageid != NULL)
 23f76e8:	f1b8 0f00 	cmp.w	r8, #0
 23f76ec:	d004      	beq.n	23f76f8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
 23f76ee:	8c23      	ldrh	r3, [r4, #32]
 23f76f0:	1c5a      	adds	r2, r3, #1
 23f76f2:	8422      	strh	r2, [r4, #32]
 23f76f4:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 23f76f8:	2100      	movs	r1, #0
 23f76fa:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 23f76fc:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
 23f76fe:	69e2      	ldr	r2, [r4, #28]
 23f7700:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 23f7702:	d90a      	bls.n	23f771a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
 23f7704:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
 23f7708:	459c      	cmp	ip, r3
 23f770a:	d906      	bls.n	23f771a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
 23f770c:	f816 c001 	ldrb.w	ip, [r6, r1]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 23f7710:	3101      	adds	r1, #1
            buffer[length++] = payload[i];
 23f7712:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 23f7716:	b289      	uxth	r1, r1
 23f7718:	e7ef      	b.n	23f76fa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
 23f771a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 23f771e:	2900      	cmp	r1, #0
 23f7720:	bf0c      	ite	eq
 23f7722:	2130      	moveq	r1, #48	; 0x30
 23f7724:	2131      	movne	r1, #49	; 0x31
        if (dup) {
 23f7726:	f1b9 0f00 	cmp.w	r9, #0
 23f772a:	d001      	beq.n	23f7730 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
 23f772c:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
 23f7730:	2d02      	cmp	r5, #2
 23f7732:	d10e      	bne.n	23f7752 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
 23f7734:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
 23f7738:	3b05      	subs	r3, #5
 23f773a:	4620      	mov	r0, r4
 23f773c:	b29b      	uxth	r3, r3
 23f773e:	f7ff fe5b 	bl	23f73f8 <_ZN4MQTT5writeEhPht>
 23f7742:	4682      	mov	sl, r0
        MutexLocker lock(this);
 23f7744:	a801      	add	r0, sp, #4
 23f7746:	f7ff fd9a 	bl	23f727e <_ZN4MQTT11MutexLockerD1Ev>
}
 23f774a:	4650      	mov	r0, sl
 23f774c:	b003      	add	sp, #12
 23f774e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
 23f7752:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 23f7754:	bf08      	it	eq
 23f7756:	f041 0102 	orreq.w	r1, r1, #2
 23f775a:	e7ed      	b.n	23f7738 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

023f775c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 23f775c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 23f775e:	9c08      	ldr	r4, [sp, #32]
 23f7760:	9403      	str	r4, [sp, #12]
 23f7762:	2400      	movs	r4, #0
 23f7764:	9402      	str	r4, [sp, #8]
 23f7766:	f89d 401c 	ldrb.w	r4, [sp, #28]
 23f776a:	9401      	str	r4, [sp, #4]
 23f776c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 23f7770:	9400      	str	r4, [sp, #0]
 23f7772:	f7ff ff87 	bl	23f7684 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 23f7776:	b004      	add	sp, #16
 23f7778:	bd10      	pop	{r4, pc}

023f777a <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
 23f777a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f777c:	4604      	mov	r4, r0
 23f777e:	460e      	mov	r6, r1
    if (isConnected()) {
 23f7780:	f7ff fe90 	bl	23f74a4 <_ZN4MQTT11isConnectedEv>
 23f7784:	4605      	mov	r5, r0
 23f7786:	b1c8      	cbz	r0, 23f77bc <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
 23f7788:	4621      	mov	r1, r4
 23f778a:	a801      	add	r0, sp, #4
 23f778c:	f7ff fd6c 	bl	23f7268 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 23f7790:	2262      	movs	r2, #98	; 0x62
 23f7792:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 23f7794:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 23f7796:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 23f7798:	2202      	movs	r2, #2
 23f779a:	69e3      	ldr	r3, [r4, #28]
 23f779c:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 23f779e:	69e3      	ldr	r3, [r4, #28]
 23f77a0:	0a32      	lsrs	r2, r6, #8
 23f77a2:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 23f77a4:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 23f77a6:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 23f77a8:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
 23f77aa:	69e1      	ldr	r1, [r4, #28]
 23f77ac:	f003 f80d 	bl	23fa7ca <_ZN9TCPClient5writeEPKhj>
 23f77b0:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
 23f77b2:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
 23f77b4:	bf18      	it	ne
 23f77b6:	2501      	movne	r5, #1
        MutexLocker lock(this);
 23f77b8:	f7ff fd61 	bl	23f727e <_ZN4MQTT11MutexLockerD1Ev>
}
 23f77bc:	4628      	mov	r0, r5
 23f77be:	b002      	add	sp, #8
 23f77c0:	bd70      	pop	{r4, r5, r6, pc}

023f77c2 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
 23f77c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f77c4:	4604      	mov	r4, r0
 23f77c6:	460e      	mov	r6, r1
    if (isConnected()) {
 23f77c8:	f7ff fe6c 	bl	23f74a4 <_ZN4MQTT11isConnectedEv>
 23f77cc:	4605      	mov	r5, r0
 23f77ce:	b1c8      	cbz	r0, 23f7804 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
 23f77d0:	4621      	mov	r1, r4
 23f77d2:	a801      	add	r0, sp, #4
 23f77d4:	f7ff fd48 	bl	23f7268 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 23f77d8:	2272      	movs	r2, #114	; 0x72
 23f77da:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 23f77dc:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 23f77de:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 23f77e0:	2202      	movs	r2, #2
 23f77e2:	69e3      	ldr	r3, [r4, #28]
 23f77e4:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 23f77e6:	69e3      	ldr	r3, [r4, #28]
 23f77e8:	0a32      	lsrs	r2, r6, #8
 23f77ea:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 23f77ec:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 23f77ee:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 23f77f0:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
 23f77f2:	69e1      	ldr	r1, [r4, #28]
 23f77f4:	f002 ffe9 	bl	23fa7ca <_ZN9TCPClient5writeEPKhj>
 23f77f8:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
 23f77fa:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
 23f77fc:	bf18      	it	ne
 23f77fe:	2501      	movne	r5, #1
        MutexLocker lock(this);
 23f7800:	f7ff fd3d 	bl	23f727e <_ZN4MQTT11MutexLockerD1Ev>
}
 23f7804:	4628      	mov	r0, r5
 23f7806:	b002      	add	sp, #8
 23f7808:	bd70      	pop	{r4, r5, r6, pc}

023f780a <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
 23f780a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f780e:	ed2d 8b02 	vpush	{d8}
 23f7812:	b087      	sub	sp, #28
 23f7814:	af00      	add	r7, sp, #0
 23f7816:	4604      	mov	r4, r0
    if (isConnected()) {
 23f7818:	f7ff fe44 	bl	23f74a4 <_ZN4MQTT11isConnectedEv>
 23f781c:	4681      	mov	r9, r0
 23f781e:	b1f8      	cbz	r0, 23f7860 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
 23f7820:	4621      	mov	r1, r4
 23f7822:	f107 0014 	add.w	r0, r7, #20
 23f7826:	f7ff fd1f 	bl	23f7268 <_ZN4MQTT11MutexLockerC1EPS_>
 23f782a:	f000 f9c5 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 23f782e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23f7832:	6d23      	ldr	r3, [r4, #80]	; 0x50
 23f7834:	4606      	mov	r6, r0
 23f7836:	4353      	muls	r3, r2
 23f7838:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 23f783a:	1a82      	subs	r2, r0, r2
 23f783c:	429a      	cmp	r2, r3
 23f783e:	d803      	bhi.n	23f7848 <_ZN4MQTT4loopEv+0x3e>
 23f7840:	6a62      	ldr	r2, [r4, #36]	; 0x24
 23f7842:	1a82      	subs	r2, r0, r2
 23f7844:	4293      	cmp	r3, r2
 23f7846:	d221      	bcs.n	23f788c <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
 23f7848:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 23f784c:	b17b      	cbz	r3, 23f786e <_ZN4MQTT4loopEv+0x64>
                _client.stop();
 23f784e:	4620      	mov	r0, r4
 23f7850:	f003 fa40 	bl	23facd4 <_ZN9TCPClient4stopEv>
                return false;
 23f7854:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
 23f7858:	f107 0014 	add.w	r0, r7, #20
 23f785c:	f7ff fd0f 	bl	23f727e <_ZN4MQTT11MutexLockerD1Ev>
}
 23f7860:	4648      	mov	r0, r9
 23f7862:	371c      	adds	r7, #28
 23f7864:	46bd      	mov	sp, r7
 23f7866:	ecbd 8b02 	vpop	{d8}
 23f786a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
 23f786e:	21c0      	movs	r1, #192	; 0xc0
 23f7870:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 23f7872:	4620      	mov	r0, r4
                buffer[0] = MQTTPINGREQ;
 23f7874:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 23f7876:	69e2      	ldr	r2, [r4, #28]
 23f7878:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 23f787a:	69e1      	ldr	r1, [r4, #28]
 23f787c:	2202      	movs	r2, #2
 23f787e:	f002 ffa4 	bl	23fa7ca <_ZN9TCPClient5writeEPKhj>
                pingOutstanding = true;
 23f7882:	2301      	movs	r3, #1
                lastInActivity = t;
 23f7884:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
 23f7888:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
 23f788c:	4620      	mov	r0, r4
 23f788e:	f003 f9c7 	bl	23fac20 <_ZN9TCPClient9availableEv>
 23f7892:	2800      	cmp	r0, #0
 23f7894:	d0e0      	beq.n	23f7858 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
 23f7896:	4620      	mov	r0, r4
 23f7898:	f107 0113 	add.w	r1, r7, #19
 23f789c:	f7ff fd5a 	bl	23f7354 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
 23f78a0:	4683      	mov	fp, r0
 23f78a2:	2800      	cmp	r0, #0
 23f78a4:	d0d8      	beq.n	23f7858 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
 23f78a6:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
 23f78a8:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 23f78aa:	7819      	ldrb	r1, [r3, #0]
 23f78ac:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 23f78b0:	2a30      	cmp	r2, #48	; 0x30
 23f78b2:	d17f      	bne.n	23f79b4 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
 23f78b4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 23f78b8:	f1ba 0f00 	cmp.w	sl, #0
 23f78bc:	d0cc      	beq.n	23f7858 <_ZN4MQTT4loopEv+0x4e>
                        }
 23f78be:	466a      	mov	r2, sp
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 23f78c0:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
 23f78c4:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 23f78c8:	eb03 020c 	add.w	r2, r3, ip
 23f78cc:	7851      	ldrb	r1, [r2, #1]
 23f78ce:	7895      	ldrb	r5, [r2, #2]
 23f78d0:	eb05 2501 	add.w	r5, r5, r1, lsl #8
                        char topic[tl+1];
 23f78d4:	4669      	mov	r1, sp
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 23f78d6:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
 23f78d8:	f105 0208 	add.w	r2, r5, #8
 23f78dc:	08d2      	lsrs	r2, r2, #3
 23f78de:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
 23f78e2:	4695      	mov	sp, r2
 23f78e4:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
 23f78e6:	f10c 0203 	add.w	r2, ip, #3
 23f78ea:	60fa      	str	r2, [r7, #12]
 23f78ec:	eb03 0e02 	add.w	lr, r3, r2
 23f78f0:	eb0d 0205 	add.w	r2, sp, r5
 23f78f4:	f8c7 d008 	str.w	sp, [r7, #8]
 23f78f8:	607a      	str	r2, [r7, #4]
 23f78fa:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
 23f78fe:	428a      	cmp	r2, r1
 23f7900:	d006      	beq.n	23f7910 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
 23f7902:	460a      	mov	r2, r1
 23f7904:	f81e 8b01 	ldrb.w	r8, [lr], #1
 23f7908:	f802 8b01 	strb.w	r8, [r2], #1
 23f790c:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
 23f790e:	e7f4      	b.n	23f78fa <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
 23f7910:	2200      	movs	r2, #0
 23f7912:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 23f7914:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 23f7918:	68f9      	ldr	r1, [r7, #12]
 23f791a:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
 23f791e:	ebab 020c 	sub.w	r2, fp, ip
 23f7922:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 23f7924:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
 23f7928:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 23f792c:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 23f792e:	d125      	bne.n	23f797c <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 23f7930:	f813 e001 	ldrb.w	lr, [r3, r1]
 23f7934:	4419      	add	r1, r3
 23f7936:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
 23f793a:	f10c 0105 	add.w	r1, ip, #5
 23f793e:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
 23f7940:	3a02      	subs	r2, #2
 23f7942:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 23f7944:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
 23f7948:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 23f794a:	2240      	movs	r2, #64	; 0x40
 23f794c:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 23f794e:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 23f7952:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 23f7954:	69e3      	ldr	r3, [r4, #28]
 23f7956:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
 23f795a:	69e3      	ldr	r3, [r4, #28]
 23f795c:	ea4f 221b 	mov.w	r2, fp, lsr #8
 23f7960:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 23f7962:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 23f7964:	2204      	movs	r2, #4
                            buffer[3] = (msgId & 0xFF);
 23f7966:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
 23f796a:	4620      	mov	r0, r4
 23f796c:	69e1      	ldr	r1, [r4, #28]
 23f796e:	f002 ff2c 	bl	23fa7ca <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
 23f7972:	6266      	str	r6, [r4, #36]	; 0x24
 23f7974:	ee18 3a10 	vmov	r3, s16
 23f7978:	469d      	mov	sp, r3
 23f797a:	e76d      	b.n	23f7858 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 23f797c:	f1b8 0f04 	cmp.w	r8, #4
 23f7980:	d115      	bne.n	23f79ae <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 23f7982:	f813 e001 	ldrb.w	lr, [r3, r1]
 23f7986:	4419      	add	r1, r3
 23f7988:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
 23f798c:	f10c 0105 	add.w	r1, ip, #5
 23f7990:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
 23f7992:	3a02      	subs	r2, #2
 23f7994:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 23f7996:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
 23f799a:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
 23f799c:	2250      	movs	r2, #80	; 0x50
 23f799e:	69e3      	ldr	r3, [r4, #28]
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 23f79a0:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
 23f79a4:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
 23f79a6:	2202      	movs	r2, #2
 23f79a8:	69e3      	ldr	r3, [r4, #28]
 23f79aa:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
 23f79ac:	e7d5      	b.n	23f795a <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
 23f79ae:	4419      	add	r1, r3
 23f79b0:	47d0      	blx	sl
 23f79b2:	e7df      	b.n	23f7974 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
 23f79b4:	2a50      	cmp	r2, #80	; 0x50
 23f79b6:	d108      	bne.n	23f79ca <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
 23f79b8:	789a      	ldrb	r2, [r3, #2]
 23f79ba:	78d9      	ldrb	r1, [r3, #3]
                    this->publishRelease(msgId);
 23f79bc:	4620      	mov	r0, r4
                    msgId = (buffer[2] << 8) + buffer[3];
 23f79be:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
 23f79c2:	b289      	uxth	r1, r1
 23f79c4:	f7ff fed9 	bl	23f777a <_ZN4MQTT14publishReleaseEt>
 23f79c8:	e746      	b.n	23f7858 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
 23f79ca:	2a40      	cmp	r2, #64	; 0x40
 23f79cc:	d112      	bne.n	23f79f4 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
 23f79ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 23f79d0:	2a00      	cmp	r2, #0
 23f79d2:	f43f af41 	beq.w	23f7858 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 23f79d6:	f1bb 0f04 	cmp.w	fp, #4
 23f79da:	f47f af3d 	bne.w	23f7858 <_ZN4MQTT4loopEv+0x4e>
 23f79de:	f011 0f06 	tst.w	r1, #6
 23f79e2:	f47f af39 	bne.w	23f7858 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
 23f79e6:	7899      	ldrb	r1, [r3, #2]
 23f79e8:	78d8      	ldrb	r0, [r3, #3]
 23f79ea:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
 23f79ee:	b280      	uxth	r0, r0
 23f79f0:	4790      	blx	r2
 23f79f2:	e731      	b.n	23f7858 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
 23f79f4:	2a60      	cmp	r2, #96	; 0x60
 23f79f6:	d108      	bne.n	23f7a0a <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
 23f79f8:	789a      	ldrb	r2, [r3, #2]
 23f79fa:	78d9      	ldrb	r1, [r3, #3]
                this->publishComplete(msgId);
 23f79fc:	4620      	mov	r0, r4
                msgId = (buffer[2] << 8) + buffer[3];
 23f79fe:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
 23f7a02:	b289      	uxth	r1, r1
 23f7a04:	f7ff fedd 	bl	23f77c2 <_ZN4MQTT15publishCompleteEt>
 23f7a08:	e726      	b.n	23f7858 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
 23f7a0a:	2a70      	cmp	r2, #112	; 0x70
 23f7a0c:	d0df      	beq.n	23f79ce <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
 23f7a0e:	2a90      	cmp	r2, #144	; 0x90
 23f7a10:	f43f af22 	beq.w	23f7858 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
 23f7a14:	2ac0      	cmp	r2, #192	; 0xc0
 23f7a16:	d10a      	bne.n	23f7a2e <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
 23f7a18:	22d0      	movs	r2, #208	; 0xd0
 23f7a1a:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 23f7a1c:	2200      	movs	r2, #0
 23f7a1e:	69e3      	ldr	r3, [r4, #28]
                    _client.write(buffer,2);
 23f7a20:	4620      	mov	r0, r4
                    buffer[1] = 0;
 23f7a22:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 23f7a24:	69e1      	ldr	r1, [r4, #28]
 23f7a26:	2202      	movs	r2, #2
 23f7a28:	f002 fecf 	bl	23fa7ca <_ZN9TCPClient5writeEPKhj>
 23f7a2c:	e714      	b.n	23f7858 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
 23f7a2e:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
 23f7a30:	bf04      	itt	eq
 23f7a32:	2300      	moveq	r3, #0
 23f7a34:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
 23f7a38:	e70e      	b.n	23f7858 <_ZN4MQTT4loopEv+0x4e>

023f7a3a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 23f7a3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f7a3c:	4604      	mov	r4, r0
 23f7a3e:	460f      	mov	r7, r1
 23f7a40:	4616      	mov	r6, r2
    if (isConnected()) {
 23f7a42:	f7ff fd2f 	bl	23f74a4 <_ZN4MQTT11isConnectedEv>
 23f7a46:	4605      	mov	r5, r0
 23f7a48:	b310      	cbz	r0, 23f7a90 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
 23f7a4a:	4621      	mov	r1, r4
 23f7a4c:	a801      	add	r0, sp, #4
 23f7a4e:	f7ff fc0b 	bl	23f7268 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
 23f7a52:	8c23      	ldrh	r3, [r4, #32]
 23f7a54:	3301      	adds	r3, #1
 23f7a56:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 23f7a58:	b1eb      	cbz	r3, 23f7a96 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
 23f7a5a:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
 23f7a5c:	8c23      	ldrh	r3, [r4, #32]
 23f7a5e:	69e2      	ldr	r2, [r4, #28]
 23f7a60:	0a1b      	lsrs	r3, r3, #8
 23f7a62:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 23f7a64:	69e3      	ldr	r3, [r4, #28]
 23f7a66:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 23f7a68:	4639      	mov	r1, r7
        buffer[length++] = (nextMsgId & 0xFF);
 23f7a6a:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 23f7a6c:	69e2      	ldr	r2, [r4, #28]
 23f7a6e:	2307      	movs	r3, #7
 23f7a70:	4620      	mov	r0, r4
 23f7a72:	f7ff fcfc 	bl	23f746e <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 23f7a76:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 23f7a78:	2182      	movs	r1, #130	; 0x82
        buffer[length++] = qos;
 23f7a7a:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 23f7a7c:	3804      	subs	r0, #4
 23f7a7e:	b283      	uxth	r3, r0
 23f7a80:	69e2      	ldr	r2, [r4, #28]
 23f7a82:	4620      	mov	r0, r4
 23f7a84:	f7ff fcb8 	bl	23f73f8 <_ZN4MQTT5writeEhPht>
 23f7a88:	4605      	mov	r5, r0
        MutexLocker lock(this);
 23f7a8a:	a801      	add	r0, sp, #4
 23f7a8c:	f7ff fbf7 	bl	23f727e <_ZN4MQTT11MutexLockerD1Ev>
}
 23f7a90:	4628      	mov	r0, r5
 23f7a92:	b003      	add	sp, #12
 23f7a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
 23f7a96:	2301      	movs	r3, #1
 23f7a98:	e7df      	b.n	23f7a5a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

023f7a9a <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
 23f7a9a:	2200      	movs	r2, #0
 23f7a9c:	f7ff bfcd 	b.w	23f7a3a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

023f7aa0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 23f7aa0:	b509      	push	{r0, r3, lr}
 23f7aa2:	4804      	ldr	r0, [pc, #16]	; (23f7ab4 <os_mutex_create+0x14>)
 23f7aa4:	6800      	ldr	r0, [r0, #0]
 23f7aa6:	4b04      	ldr	r3, [pc, #16]	; (23f7ab8 <os_mutex_create+0x18>)
 23f7aa8:	4403      	add	r3, r0
 23f7aaa:	681b      	ldr	r3, [r3, #0]
 23f7aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f7aae:	9302      	str	r3, [sp, #8]
 23f7ab0:	bd09      	pop	{r0, r3, pc}
 23f7ab2:	0000      	.short	0x0000
 23f7ab4:	1007aad8 	.word	0x1007aad8
 23f7ab8:	00000030 	.word	0x00000030

023f7abc <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 23f7abc:	b509      	push	{r0, r3, lr}
 23f7abe:	4804      	ldr	r0, [pc, #16]	; (23f7ad0 <os_mutex_lock+0x14>)
 23f7ac0:	6800      	ldr	r0, [r0, #0]
 23f7ac2:	4b04      	ldr	r3, [pc, #16]	; (23f7ad4 <os_mutex_lock+0x18>)
 23f7ac4:	4403      	add	r3, r0
 23f7ac6:	681b      	ldr	r3, [r3, #0]
 23f7ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23f7aca:	9302      	str	r3, [sp, #8]
 23f7acc:	bd09      	pop	{r0, r3, pc}
 23f7ace:	0000      	.short	0x0000
 23f7ad0:	1007aad8 	.word	0x1007aad8
 23f7ad4:	00000030 	.word	0x00000030

023f7ad8 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 23f7ad8:	b509      	push	{r0, r3, lr}
 23f7ada:	4804      	ldr	r0, [pc, #16]	; (23f7aec <os_mutex_unlock+0x14>)
 23f7adc:	6800      	ldr	r0, [r0, #0]
 23f7ade:	4b04      	ldr	r3, [pc, #16]	; (23f7af0 <os_mutex_unlock+0x18>)
 23f7ae0:	4403      	add	r3, r0
 23f7ae2:	681b      	ldr	r3, [r3, #0]
 23f7ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f7ae6:	9302      	str	r3, [sp, #8]
 23f7ae8:	bd09      	pop	{r0, r3, pc}
 23f7aea:	0000      	.short	0x0000
 23f7aec:	1007aad8 	.word	0x1007aad8
 23f7af0:	00000030 	.word	0x00000030

023f7af4 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23f7af4:	b509      	push	{r0, r3, lr}
 23f7af6:	4804      	ldr	r0, [pc, #16]	; (23f7b08 <os_mutex_recursive_create+0x14>)
 23f7af8:	6800      	ldr	r0, [r0, #0]
 23f7afa:	4b04      	ldr	r3, [pc, #16]	; (23f7b0c <os_mutex_recursive_create+0x18>)
 23f7afc:	4403      	add	r3, r0
 23f7afe:	681b      	ldr	r3, [r3, #0]
 23f7b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f7b02:	9302      	str	r3, [sp, #8]
 23f7b04:	bd09      	pop	{r0, r3, pc}
 23f7b06:	0000      	.short	0x0000
 23f7b08:	1007aad8 	.word	0x1007aad8
 23f7b0c:	00000030 	.word	0x00000030

023f7b10 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23f7b10:	b509      	push	{r0, r3, lr}
 23f7b12:	4804      	ldr	r0, [pc, #16]	; (23f7b24 <os_mutex_recursive_destroy+0x14>)
 23f7b14:	6800      	ldr	r0, [r0, #0]
 23f7b16:	4b04      	ldr	r3, [pc, #16]	; (23f7b28 <os_mutex_recursive_destroy+0x18>)
 23f7b18:	4403      	add	r3, r0
 23f7b1a:	681b      	ldr	r3, [r3, #0]
 23f7b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f7b1e:	9302      	str	r3, [sp, #8]
 23f7b20:	bd09      	pop	{r0, r3, pc}
 23f7b22:	0000      	.short	0x0000
 23f7b24:	1007aad8 	.word	0x1007aad8
 23f7b28:	00000030 	.word	0x00000030

023f7b2c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23f7b2c:	b509      	push	{r0, r3, lr}
 23f7b2e:	4804      	ldr	r0, [pc, #16]	; (23f7b40 <os_mutex_recursive_lock+0x14>)
 23f7b30:	6800      	ldr	r0, [r0, #0]
 23f7b32:	4b04      	ldr	r3, [pc, #16]	; (23f7b44 <os_mutex_recursive_lock+0x18>)
 23f7b34:	4403      	add	r3, r0
 23f7b36:	681b      	ldr	r3, [r3, #0]
 23f7b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f7b3a:	9302      	str	r3, [sp, #8]
 23f7b3c:	bd09      	pop	{r0, r3, pc}
 23f7b3e:	0000      	.short	0x0000
 23f7b40:	1007aad8 	.word	0x1007aad8
 23f7b44:	00000030 	.word	0x00000030

023f7b48 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23f7b48:	b509      	push	{r0, r3, lr}
 23f7b4a:	4804      	ldr	r0, [pc, #16]	; (23f7b5c <os_mutex_recursive_unlock+0x14>)
 23f7b4c:	6800      	ldr	r0, [r0, #0]
 23f7b4e:	4b04      	ldr	r3, [pc, #16]	; (23f7b60 <os_mutex_recursive_unlock+0x18>)
 23f7b50:	4403      	add	r3, r0
 23f7b52:	681b      	ldr	r3, [r3, #0]
 23f7b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f7b56:	9302      	str	r3, [sp, #8]
 23f7b58:	bd09      	pop	{r0, r3, pc}
 23f7b5a:	0000      	.short	0x0000
 23f7b5c:	1007aad8 	.word	0x1007aad8
 23f7b60:	00000030 	.word	0x00000030

023f7b64 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, hal_watchdog_reset_flagged_deprecated, bool(void))
DYNALIB_FN(17, hal_core, hal_watchdog_refresh_deprecated, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
 23f7b64:	b509      	push	{r0, r3, lr}
 23f7b66:	4804      	ldr	r0, [pc, #16]	; (23f7b78 <HAL_Core_Runtime_Info+0x14>)
 23f7b68:	6800      	ldr	r0, [r0, #0]
 23f7b6a:	4b04      	ldr	r3, [pc, #16]	; (23f7b7c <HAL_Core_Runtime_Info+0x18>)
 23f7b6c:	4403      	add	r3, r0
 23f7b6e:	681b      	ldr	r3, [r3, #0]
 23f7b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f7b72:	9302      	str	r3, [sp, #8]
 23f7b74:	bd09      	pop	{r0, r3, pc}
 23f7b76:	0000      	.short	0x0000
 23f7b78:	1007aad8 	.word	0x1007aad8
 23f7b7c:	0000001c 	.word	0x0000001c

023f7b80 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23f7b80:	b509      	push	{r0, r3, lr}
 23f7b82:	4804      	ldr	r0, [pc, #16]	; (23f7b94 <HAL_RNG_GetRandomNumber+0x14>)
 23f7b84:	6800      	ldr	r0, [r0, #0]
 23f7b86:	4b04      	ldr	r3, [pc, #16]	; (23f7b98 <HAL_RNG_GetRandomNumber+0x18>)
 23f7b88:	4403      	add	r3, r0
 23f7b8a:	681b      	ldr	r3, [r3, #0]
 23f7b8c:	685b      	ldr	r3, [r3, #4]
 23f7b8e:	9302      	str	r3, [sp, #8]
 23f7b90:	bd09      	pop	{r0, r3, pc}
 23f7b92:	0000      	.short	0x0000
 23f7b94:	1007aad8 	.word	0x1007aad8
 23f7b98:	00000000 	.word	0x00000000

023f7b9c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23f7b9c:	b509      	push	{r0, r3, lr}
 23f7b9e:	4804      	ldr	r0, [pc, #16]	; (23f7bb0 <HAL_Delay_Microseconds+0x14>)
 23f7ba0:	6800      	ldr	r0, [r0, #0]
 23f7ba2:	4b04      	ldr	r3, [pc, #16]	; (23f7bb4 <HAL_Delay_Microseconds+0x18>)
 23f7ba4:	4403      	add	r3, r0
 23f7ba6:	681b      	ldr	r3, [r3, #0]
 23f7ba8:	68db      	ldr	r3, [r3, #12]
 23f7baa:	9302      	str	r3, [sp, #8]
 23f7bac:	bd09      	pop	{r0, r3, pc}
 23f7bae:	0000      	.short	0x0000
 23f7bb0:	1007aad8 	.word	0x1007aad8
 23f7bb4:	00000000 	.word	0x00000000

023f7bb8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23f7bb8:	b509      	push	{r0, r3, lr}
 23f7bba:	4804      	ldr	r0, [pc, #16]	; (23f7bcc <HAL_Timer_Get_Milli_Seconds+0x14>)
 23f7bbc:	6800      	ldr	r0, [r0, #0]
 23f7bbe:	4b04      	ldr	r3, [pc, #16]	; (23f7bd0 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23f7bc0:	4403      	add	r3, r0
 23f7bc2:	681b      	ldr	r3, [r3, #0]
 23f7bc4:	695b      	ldr	r3, [r3, #20]
 23f7bc6:	9302      	str	r3, [sp, #8]
 23f7bc8:	bd09      	pop	{r0, r3, pc}
 23f7bca:	0000      	.short	0x0000
 23f7bcc:	1007aad8 	.word	0x1007aad8
 23f7bd0:	00000000 	.word	0x00000000

023f7bd4 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 23f7bd4:	b509      	push	{r0, r3, lr}
 23f7bd6:	4804      	ldr	r0, [pc, #16]	; (23f7be8 <HAL_EEPROM_Init+0x14>)
 23f7bd8:	6800      	ldr	r0, [r0, #0]
 23f7bda:	4b04      	ldr	r3, [pc, #16]	; (23f7bec <HAL_EEPROM_Init+0x18>)
 23f7bdc:	4403      	add	r3, r0
 23f7bde:	681b      	ldr	r3, [r3, #0]
 23f7be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f7be2:	9302      	str	r3, [sp, #8]
 23f7be4:	bd09      	pop	{r0, r3, pc}
 23f7be6:	0000      	.short	0x0000
 23f7be8:	1007aad8 	.word	0x1007aad8
 23f7bec:	00000000 	.word	0x00000000

023f7bf0 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 23f7bf0:	b509      	push	{r0, r3, lr}
 23f7bf2:	4804      	ldr	r0, [pc, #16]	; (23f7c04 <HAL_EEPROM_Get+0x14>)
 23f7bf4:	6800      	ldr	r0, [r0, #0]
 23f7bf6:	4b04      	ldr	r3, [pc, #16]	; (23f7c08 <HAL_EEPROM_Get+0x18>)
 23f7bf8:	4403      	add	r3, r0
 23f7bfa:	681b      	ldr	r3, [r3, #0]
 23f7bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f7bfe:	9302      	str	r3, [sp, #8]
 23f7c00:	bd09      	pop	{r0, r3, pc}
 23f7c02:	0000      	.short	0x0000
 23f7c04:	1007aad8 	.word	0x1007aad8
 23f7c08:	00000000 	.word	0x00000000

023f7c0c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 23f7c0c:	b509      	push	{r0, r3, lr}
 23f7c0e:	4804      	ldr	r0, [pc, #16]	; (23f7c20 <HAL_EEPROM_Put+0x14>)
 23f7c10:	6800      	ldr	r0, [r0, #0]
 23f7c12:	4b04      	ldr	r3, [pc, #16]	; (23f7c24 <HAL_EEPROM_Put+0x18>)
 23f7c14:	4403      	add	r3, r0
 23f7c16:	681b      	ldr	r3, [r3, #0]
 23f7c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f7c1a:	9302      	str	r3, [sp, #8]
 23f7c1c:	bd09      	pop	{r0, r3, pc}
 23f7c1e:	0000      	.short	0x0000
 23f7c20:	1007aad8 	.word	0x1007aad8
 23f7c24:	00000000 	.word	0x00000000

023f7c28 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 23f7c28:	b509      	push	{r0, r3, lr}
 23f7c2a:	4804      	ldr	r0, [pc, #16]	; (23f7c3c <hal_rtc_time_is_valid+0x14>)
 23f7c2c:	6800      	ldr	r0, [r0, #0]
 23f7c2e:	4b04      	ldr	r3, [pc, #16]	; (23f7c40 <hal_rtc_time_is_valid+0x18>)
 23f7c30:	4403      	add	r3, r0
 23f7c32:	681b      	ldr	r3, [r3, #0]
 23f7c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f7c36:	9302      	str	r3, [sp, #8]
 23f7c38:	bd09      	pop	{r0, r3, pc}
 23f7c3a:	0000      	.short	0x0000
 23f7c3c:	1007aad8 	.word	0x1007aad8
 23f7c40:	00000000 	.word	0x00000000

023f7c44 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 23f7c44:	b509      	push	{r0, r3, lr}
 23f7c46:	4804      	ldr	r0, [pc, #16]	; (23f7c58 <hal_rtc_get_time+0x14>)
 23f7c48:	6800      	ldr	r0, [r0, #0]
 23f7c4a:	4b04      	ldr	r3, [pc, #16]	; (23f7c5c <hal_rtc_get_time+0x18>)
 23f7c4c:	4403      	add	r3, r0
 23f7c4e:	681b      	ldr	r3, [r3, #0]
 23f7c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 23f7c52:	9302      	str	r3, [sp, #8]
 23f7c54:	bd09      	pop	{r0, r3, pc}
 23f7c56:	0000      	.short	0x0000
 23f7c58:	1007aad8 	.word	0x1007aad8
 23f7c5c:	00000000 	.word	0x00000000

023f7c60 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23f7c60:	b509      	push	{r0, r3, lr}
 23f7c62:	4804      	ldr	r0, [pc, #16]	; (23f7c74 <hal_gpio_mode+0x14>)
 23f7c64:	6800      	ldr	r0, [r0, #0]
 23f7c66:	4b04      	ldr	r3, [pc, #16]	; (23f7c78 <hal_gpio_mode+0x18>)
 23f7c68:	4403      	add	r3, r0
 23f7c6a:	681b      	ldr	r3, [r3, #0]
 23f7c6c:	689b      	ldr	r3, [r3, #8]
 23f7c6e:	9302      	str	r3, [sp, #8]
 23f7c70:	bd09      	pop	{r0, r3, pc}
 23f7c72:	0000      	.short	0x0000
 23f7c74:	1007aad8 	.word	0x1007aad8
 23f7c78:	00000014 	.word	0x00000014

023f7c7c <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23f7c7c:	b509      	push	{r0, r3, lr}
 23f7c7e:	4804      	ldr	r0, [pc, #16]	; (23f7c90 <hal_gpio_get_mode+0x14>)
 23f7c80:	6800      	ldr	r0, [r0, #0]
 23f7c82:	4b04      	ldr	r3, [pc, #16]	; (23f7c94 <hal_gpio_get_mode+0x18>)
 23f7c84:	4403      	add	r3, r0
 23f7c86:	681b      	ldr	r3, [r3, #0]
 23f7c88:	68db      	ldr	r3, [r3, #12]
 23f7c8a:	9302      	str	r3, [sp, #8]
 23f7c8c:	bd09      	pop	{r0, r3, pc}
 23f7c8e:	0000      	.short	0x0000
 23f7c90:	1007aad8 	.word	0x1007aad8
 23f7c94:	00000014 	.word	0x00000014

023f7c98 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23f7c98:	b509      	push	{r0, r3, lr}
 23f7c9a:	4804      	ldr	r0, [pc, #16]	; (23f7cac <hal_gpio_write+0x14>)
 23f7c9c:	6800      	ldr	r0, [r0, #0]
 23f7c9e:	4b04      	ldr	r3, [pc, #16]	; (23f7cb0 <hal_gpio_write+0x18>)
 23f7ca0:	4403      	add	r3, r0
 23f7ca2:	681b      	ldr	r3, [r3, #0]
 23f7ca4:	691b      	ldr	r3, [r3, #16]
 23f7ca6:	9302      	str	r3, [sp, #8]
 23f7ca8:	bd09      	pop	{r0, r3, pc}
 23f7caa:	0000      	.short	0x0000
 23f7cac:	1007aad8 	.word	0x1007aad8
 23f7cb0:	00000014 	.word	0x00000014

023f7cb4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23f7cb4:	b509      	push	{r0, r3, lr}
 23f7cb6:	4804      	ldr	r0, [pc, #16]	; (23f7cc8 <hal_i2c_begin+0x14>)
 23f7cb8:	6800      	ldr	r0, [r0, #0]
 23f7cba:	4b04      	ldr	r3, [pc, #16]	; (23f7ccc <hal_i2c_begin+0x18>)
 23f7cbc:	4403      	add	r3, r0
 23f7cbe:	681b      	ldr	r3, [r3, #0]
 23f7cc0:	68db      	ldr	r3, [r3, #12]
 23f7cc2:	9302      	str	r3, [sp, #8]
 23f7cc4:	bd09      	pop	{r0, r3, pc}
 23f7cc6:	0000      	.short	0x0000
 23f7cc8:	1007aad8 	.word	0x1007aad8
 23f7ccc:	00000010 	.word	0x00000010

023f7cd0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23f7cd0:	b509      	push	{r0, r3, lr}
 23f7cd2:	4804      	ldr	r0, [pc, #16]	; (23f7ce4 <hal_i2c_begin_transmission+0x14>)
 23f7cd4:	6800      	ldr	r0, [r0, #0]
 23f7cd6:	4b04      	ldr	r3, [pc, #16]	; (23f7ce8 <hal_i2c_begin_transmission+0x18>)
 23f7cd8:	4403      	add	r3, r0
 23f7cda:	681b      	ldr	r3, [r3, #0]
 23f7cdc:	699b      	ldr	r3, [r3, #24]
 23f7cde:	9302      	str	r3, [sp, #8]
 23f7ce0:	bd09      	pop	{r0, r3, pc}
 23f7ce2:	0000      	.short	0x0000
 23f7ce4:	1007aad8 	.word	0x1007aad8
 23f7ce8:	00000010 	.word	0x00000010

023f7cec <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23f7cec:	b509      	push	{r0, r3, lr}
 23f7cee:	4804      	ldr	r0, [pc, #16]	; (23f7d00 <hal_i2c_end_transmission+0x14>)
 23f7cf0:	6800      	ldr	r0, [r0, #0]
 23f7cf2:	4b04      	ldr	r3, [pc, #16]	; (23f7d04 <hal_i2c_end_transmission+0x18>)
 23f7cf4:	4403      	add	r3, r0
 23f7cf6:	681b      	ldr	r3, [r3, #0]
 23f7cf8:	69db      	ldr	r3, [r3, #28]
 23f7cfa:	9302      	str	r3, [sp, #8]
 23f7cfc:	bd09      	pop	{r0, r3, pc}
 23f7cfe:	0000      	.short	0x0000
 23f7d00:	1007aad8 	.word	0x1007aad8
 23f7d04:	00000010 	.word	0x00000010

023f7d08 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23f7d08:	b509      	push	{r0, r3, lr}
 23f7d0a:	4804      	ldr	r0, [pc, #16]	; (23f7d1c <hal_i2c_write+0x14>)
 23f7d0c:	6800      	ldr	r0, [r0, #0]
 23f7d0e:	4b04      	ldr	r3, [pc, #16]	; (23f7d20 <hal_i2c_write+0x18>)
 23f7d10:	4403      	add	r3, r0
 23f7d12:	681b      	ldr	r3, [r3, #0]
 23f7d14:	6a1b      	ldr	r3, [r3, #32]
 23f7d16:	9302      	str	r3, [sp, #8]
 23f7d18:	bd09      	pop	{r0, r3, pc}
 23f7d1a:	0000      	.short	0x0000
 23f7d1c:	1007aad8 	.word	0x1007aad8
 23f7d20:	00000010 	.word	0x00000010

023f7d24 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23f7d24:	b509      	push	{r0, r3, lr}
 23f7d26:	4804      	ldr	r0, [pc, #16]	; (23f7d38 <hal_i2c_available+0x14>)
 23f7d28:	6800      	ldr	r0, [r0, #0]
 23f7d2a:	4b04      	ldr	r3, [pc, #16]	; (23f7d3c <hal_i2c_available+0x18>)
 23f7d2c:	4403      	add	r3, r0
 23f7d2e:	681b      	ldr	r3, [r3, #0]
 23f7d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f7d32:	9302      	str	r3, [sp, #8]
 23f7d34:	bd09      	pop	{r0, r3, pc}
 23f7d36:	0000      	.short	0x0000
 23f7d38:	1007aad8 	.word	0x1007aad8
 23f7d3c:	00000010 	.word	0x00000010

023f7d40 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23f7d40:	b509      	push	{r0, r3, lr}
 23f7d42:	4804      	ldr	r0, [pc, #16]	; (23f7d54 <hal_i2c_read+0x14>)
 23f7d44:	6800      	ldr	r0, [r0, #0]
 23f7d46:	4b04      	ldr	r3, [pc, #16]	; (23f7d58 <hal_i2c_read+0x18>)
 23f7d48:	4403      	add	r3, r0
 23f7d4a:	681b      	ldr	r3, [r3, #0]
 23f7d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f7d4e:	9302      	str	r3, [sp, #8]
 23f7d50:	bd09      	pop	{r0, r3, pc}
 23f7d52:	0000      	.short	0x0000
 23f7d54:	1007aad8 	.word	0x1007aad8
 23f7d58:	00000010 	.word	0x00000010

023f7d5c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23f7d5c:	b509      	push	{r0, r3, lr}
 23f7d5e:	4804      	ldr	r0, [pc, #16]	; (23f7d70 <hal_i2c_peek+0x14>)
 23f7d60:	6800      	ldr	r0, [r0, #0]
 23f7d62:	4b04      	ldr	r3, [pc, #16]	; (23f7d74 <hal_i2c_peek+0x18>)
 23f7d64:	4403      	add	r3, r0
 23f7d66:	681b      	ldr	r3, [r3, #0]
 23f7d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f7d6a:	9302      	str	r3, [sp, #8]
 23f7d6c:	bd09      	pop	{r0, r3, pc}
 23f7d6e:	0000      	.short	0x0000
 23f7d70:	1007aad8 	.word	0x1007aad8
 23f7d74:	00000010 	.word	0x00000010

023f7d78 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23f7d78:	b509      	push	{r0, r3, lr}
 23f7d7a:	4804      	ldr	r0, [pc, #16]	; (23f7d8c <hal_i2c_flush+0x14>)
 23f7d7c:	6800      	ldr	r0, [r0, #0]
 23f7d7e:	4b04      	ldr	r3, [pc, #16]	; (23f7d90 <hal_i2c_flush+0x18>)
 23f7d80:	4403      	add	r3, r0
 23f7d82:	681b      	ldr	r3, [r3, #0]
 23f7d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f7d86:	9302      	str	r3, [sp, #8]
 23f7d88:	bd09      	pop	{r0, r3, pc}
 23f7d8a:	0000      	.short	0x0000
 23f7d8c:	1007aad8 	.word	0x1007aad8
 23f7d90:	00000010 	.word	0x00000010

023f7d94 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23f7d94:	b509      	push	{r0, r3, lr}
 23f7d96:	4804      	ldr	r0, [pc, #16]	; (23f7da8 <hal_i2c_is_enabled+0x14>)
 23f7d98:	6800      	ldr	r0, [r0, #0]
 23f7d9a:	4b04      	ldr	r3, [pc, #16]	; (23f7dac <hal_i2c_is_enabled+0x18>)
 23f7d9c:	4403      	add	r3, r0
 23f7d9e:	681b      	ldr	r3, [r3, #0]
 23f7da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f7da2:	9302      	str	r3, [sp, #8]
 23f7da4:	bd09      	pop	{r0, r3, pc}
 23f7da6:	0000      	.short	0x0000
 23f7da8:	1007aad8 	.word	0x1007aad8
 23f7dac:	00000010 	.word	0x00000010

023f7db0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23f7db0:	b509      	push	{r0, r3, lr}
 23f7db2:	4804      	ldr	r0, [pc, #16]	; (23f7dc4 <hal_i2c_init+0x14>)
 23f7db4:	6800      	ldr	r0, [r0, #0]
 23f7db6:	4b04      	ldr	r3, [pc, #16]	; (23f7dc8 <hal_i2c_init+0x18>)
 23f7db8:	4403      	add	r3, r0
 23f7dba:	681b      	ldr	r3, [r3, #0]
 23f7dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f7dbe:	9302      	str	r3, [sp, #8]
 23f7dc0:	bd09      	pop	{r0, r3, pc}
 23f7dc2:	0000      	.short	0x0000
 23f7dc4:	1007aad8 	.word	0x1007aad8
 23f7dc8:	00000010 	.word	0x00000010

023f7dcc <hal_i2c_reset>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
 23f7dcc:	b509      	push	{r0, r3, lr}
 23f7dce:	4804      	ldr	r0, [pc, #16]	; (23f7de0 <hal_i2c_reset+0x14>)
 23f7dd0:	6800      	ldr	r0, [r0, #0]
 23f7dd2:	4b04      	ldr	r3, [pc, #16]	; (23f7de4 <hal_i2c_reset+0x18>)
 23f7dd4:	4403      	add	r3, r0
 23f7dd6:	681b      	ldr	r3, [r3, #0]
 23f7dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f7dda:	9302      	str	r3, [sp, #8]
 23f7ddc:	bd09      	pop	{r0, r3, pc}
 23f7dde:	0000      	.short	0x0000
 23f7de0:	1007aad8 	.word	0x1007aad8
 23f7de4:	00000010 	.word	0x00000010

023f7de8 <hal_i2c_request_ex>:
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23f7de8:	b509      	push	{r0, r3, lr}
 23f7dea:	4804      	ldr	r0, [pc, #16]	; (23f7dfc <hal_i2c_request_ex+0x14>)
 23f7dec:	6800      	ldr	r0, [r0, #0]
 23f7dee:	4b04      	ldr	r3, [pc, #16]	; (23f7e00 <hal_i2c_request_ex+0x18>)
 23f7df0:	4403      	add	r3, r0
 23f7df2:	681b      	ldr	r3, [r3, #0]
 23f7df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f7df6:	9302      	str	r3, [sp, #8]
 23f7df8:	bd09      	pop	{r0, r3, pc}
 23f7dfa:	0000      	.short	0x0000
 23f7dfc:	1007aad8 	.word	0x1007aad8
 23f7e00:	00000010 	.word	0x00000010

023f7e04 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
 23f7e04:	b509      	push	{r0, r3, lr}
 23f7e06:	4804      	ldr	r0, [pc, #16]	; (23f7e18 <if_index_to_name+0x14>)
 23f7e08:	6800      	ldr	r0, [r0, #0]
 23f7e0a:	4b04      	ldr	r3, [pc, #16]	; (23f7e1c <if_index_to_name+0x18>)
 23f7e0c:	4403      	add	r3, r0
 23f7e0e:	681b      	ldr	r3, [r3, #0]
 23f7e10:	695b      	ldr	r3, [r3, #20]
 23f7e12:	9302      	str	r3, [sp, #8]
 23f7e14:	bd09      	pop	{r0, r3, pc}
 23f7e16:	0000      	.short	0x0000
 23f7e18:	1007aad8 	.word	0x1007aad8
 23f7e1c:	00000054 	.word	0x00000054

023f7e20 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23f7e20:	b509      	push	{r0, r3, lr}
 23f7e22:	4804      	ldr	r0, [pc, #16]	; (23f7e34 <inet_inet_ntop+0x14>)
 23f7e24:	6800      	ldr	r0, [r0, #0]
 23f7e26:	4b04      	ldr	r3, [pc, #16]	; (23f7e38 <inet_inet_ntop+0x18>)
 23f7e28:	4403      	add	r3, r0
 23f7e2a:	681b      	ldr	r3, [r3, #0]
 23f7e2c:	695b      	ldr	r3, [r3, #20]
 23f7e2e:	9302      	str	r3, [sp, #8]
 23f7e30:	bd09      	pop	{r0, r3, pc}
 23f7e32:	0000      	.short	0x0000
 23f7e34:	1007aad8 	.word	0x1007aad8
 23f7e38:	0000004c 	.word	0x0000004c

023f7e3c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
 23f7e3c:	b509      	push	{r0, r3, lr}
 23f7e3e:	4804      	ldr	r0, [pc, #16]	; (23f7e50 <inet_htonl+0x14>)
 23f7e40:	6800      	ldr	r0, [r0, #0]
 23f7e42:	4b04      	ldr	r3, [pc, #16]	; (23f7e54 <inet_htonl+0x18>)
 23f7e44:	4403      	add	r3, r0
 23f7e46:	681b      	ldr	r3, [r3, #0]
 23f7e48:	6a1b      	ldr	r3, [r3, #32]
 23f7e4a:	9302      	str	r3, [sp, #8]
 23f7e4c:	bd09      	pop	{r0, r3, pc}
 23f7e4e:	0000      	.short	0x0000
 23f7e50:	1007aad8 	.word	0x1007aad8
 23f7e54:	0000004c 	.word	0x0000004c

023f7e58 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
 23f7e58:	b509      	push	{r0, r3, lr}
 23f7e5a:	4804      	ldr	r0, [pc, #16]	; (23f7e6c <inet_htons+0x14>)
 23f7e5c:	6800      	ldr	r0, [r0, #0]
 23f7e5e:	4b04      	ldr	r3, [pc, #16]	; (23f7e70 <inet_htons+0x18>)
 23f7e60:	4403      	add	r3, r0
 23f7e62:	681b      	ldr	r3, [r3, #0]
 23f7e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f7e66:	9302      	str	r3, [sp, #8]
 23f7e68:	bd09      	pop	{r0, r3, pc}
 23f7e6a:	0000      	.short	0x0000
 23f7e6c:	1007aad8 	.word	0x1007aad8
 23f7e70:	0000004c 	.word	0x0000004c

023f7e74 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23f7e74:	b509      	push	{r0, r3, lr}
 23f7e76:	4804      	ldr	r0, [pc, #16]	; (23f7e88 <netdb_freeaddrinfo+0x14>)
 23f7e78:	6800      	ldr	r0, [r0, #0]
 23f7e7a:	4b04      	ldr	r3, [pc, #16]	; (23f7e8c <netdb_freeaddrinfo+0x18>)
 23f7e7c:	4403      	add	r3, r0
 23f7e7e:	681b      	ldr	r3, [r3, #0]
 23f7e80:	689b      	ldr	r3, [r3, #8]
 23f7e82:	9302      	str	r3, [sp, #8]
 23f7e84:	bd09      	pop	{r0, r3, pc}
 23f7e86:	0000      	.short	0x0000
 23f7e88:	1007aad8 	.word	0x1007aad8
 23f7e8c:	00000050 	.word	0x00000050

023f7e90 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23f7e90:	b509      	push	{r0, r3, lr}
 23f7e92:	4804      	ldr	r0, [pc, #16]	; (23f7ea4 <netdb_getaddrinfo+0x14>)
 23f7e94:	6800      	ldr	r0, [r0, #0]
 23f7e96:	4b04      	ldr	r3, [pc, #16]	; (23f7ea8 <netdb_getaddrinfo+0x18>)
 23f7e98:	4403      	add	r3, r0
 23f7e9a:	681b      	ldr	r3, [r3, #0]
 23f7e9c:	68db      	ldr	r3, [r3, #12]
 23f7e9e:	9302      	str	r3, [sp, #8]
 23f7ea0:	bd09      	pop	{r0, r3, pc}
 23f7ea2:	0000      	.short	0x0000
 23f7ea4:	1007aad8 	.word	0x1007aad8
 23f7ea8:	00000050 	.word	0x00000050

023f7eac <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
 23f7eac:	b509      	push	{r0, r3, lr}
 23f7eae:	4804      	ldr	r0, [pc, #16]	; (23f7ec0 <sock_setsockopt+0x14>)
 23f7eb0:	6800      	ldr	r0, [r0, #0]
 23f7eb2:	4b04      	ldr	r3, [pc, #16]	; (23f7ec4 <sock_setsockopt+0x18>)
 23f7eb4:	4403      	add	r3, r0
 23f7eb6:	681b      	ldr	r3, [r3, #0]
 23f7eb8:	699b      	ldr	r3, [r3, #24]
 23f7eba:	9302      	str	r3, [sp, #8]
 23f7ebc:	bd09      	pop	{r0, r3, pc}
 23f7ebe:	0000      	.short	0x0000
 23f7ec0:	1007aad8 	.word	0x1007aad8
 23f7ec4:	00000020 	.word	0x00000020

023f7ec8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
 23f7ec8:	b509      	push	{r0, r3, lr}
 23f7eca:	4804      	ldr	r0, [pc, #16]	; (23f7edc <sock_close+0x14>)
 23f7ecc:	6800      	ldr	r0, [r0, #0]
 23f7ece:	4b04      	ldr	r3, [pc, #16]	; (23f7ee0 <sock_close+0x18>)
 23f7ed0:	4403      	add	r3, r0
 23f7ed2:	681b      	ldr	r3, [r3, #0]
 23f7ed4:	69db      	ldr	r3, [r3, #28]
 23f7ed6:	9302      	str	r3, [sp, #8]
 23f7ed8:	bd09      	pop	{r0, r3, pc}
 23f7eda:	0000      	.short	0x0000
 23f7edc:	1007aad8 	.word	0x1007aad8
 23f7ee0:	00000020 	.word	0x00000020

023f7ee4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
 23f7ee4:	b509      	push	{r0, r3, lr}
 23f7ee6:	4804      	ldr	r0, [pc, #16]	; (23f7ef8 <sock_connect+0x14>)
 23f7ee8:	6800      	ldr	r0, [r0, #0]
 23f7eea:	4b04      	ldr	r3, [pc, #16]	; (23f7efc <sock_connect+0x18>)
 23f7eec:	4403      	add	r3, r0
 23f7eee:	681b      	ldr	r3, [r3, #0]
 23f7ef0:	6a1b      	ldr	r3, [r3, #32]
 23f7ef2:	9302      	str	r3, [sp, #8]
 23f7ef4:	bd09      	pop	{r0, r3, pc}
 23f7ef6:	0000      	.short	0x0000
 23f7ef8:	1007aad8 	.word	0x1007aad8
 23f7efc:	00000020 	.word	0x00000020

023f7f00 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
 23f7f00:	b509      	push	{r0, r3, lr}
 23f7f02:	4804      	ldr	r0, [pc, #16]	; (23f7f14 <sock_recv+0x14>)
 23f7f04:	6800      	ldr	r0, [r0, #0]
 23f7f06:	4b04      	ldr	r3, [pc, #16]	; (23f7f18 <sock_recv+0x18>)
 23f7f08:	4403      	add	r3, r0
 23f7f0a:	681b      	ldr	r3, [r3, #0]
 23f7f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f7f0e:	9302      	str	r3, [sp, #8]
 23f7f10:	bd09      	pop	{r0, r3, pc}
 23f7f12:	0000      	.short	0x0000
 23f7f14:	1007aad8 	.word	0x1007aad8
 23f7f18:	00000020 	.word	0x00000020

023f7f1c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
 23f7f1c:	b509      	push	{r0, r3, lr}
 23f7f1e:	4804      	ldr	r0, [pc, #16]	; (23f7f30 <sock_send+0x14>)
 23f7f20:	6800      	ldr	r0, [r0, #0]
 23f7f22:	4b04      	ldr	r3, [pc, #16]	; (23f7f34 <sock_send+0x18>)
 23f7f24:	4403      	add	r3, r0
 23f7f26:	681b      	ldr	r3, [r3, #0]
 23f7f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f7f2a:	9302      	str	r3, [sp, #8]
 23f7f2c:	bd09      	pop	{r0, r3, pc}
 23f7f2e:	0000      	.short	0x0000
 23f7f30:	1007aad8 	.word	0x1007aad8
 23f7f34:	00000020 	.word	0x00000020

023f7f38 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
 23f7f38:	b509      	push	{r0, r3, lr}
 23f7f3a:	4804      	ldr	r0, [pc, #16]	; (23f7f4c <sock_socket+0x14>)
 23f7f3c:	6800      	ldr	r0, [r0, #0]
 23f7f3e:	4b04      	ldr	r3, [pc, #16]	; (23f7f50 <sock_socket+0x18>)
 23f7f40:	4403      	add	r3, r0
 23f7f42:	681b      	ldr	r3, [r3, #0]
 23f7f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23f7f46:	9302      	str	r3, [sp, #8]
 23f7f48:	bd09      	pop	{r0, r3, pc}
 23f7f4a:	0000      	.short	0x0000
 23f7f4c:	1007aad8 	.word	0x1007aad8
 23f7f50:	00000020 	.word	0x00000020

023f7f54 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23f7f54:	b509      	push	{r0, r3, lr}
 23f7f56:	4804      	ldr	r0, [pc, #16]	; (23f7f68 <hal_spi_init+0x14>)
 23f7f58:	6800      	ldr	r0, [r0, #0]
 23f7f5a:	4b04      	ldr	r3, [pc, #16]	; (23f7f6c <hal_spi_init+0x18>)
 23f7f5c:	4403      	add	r3, r0
 23f7f5e:	681b      	ldr	r3, [r3, #0]
 23f7f60:	69db      	ldr	r3, [r3, #28]
 23f7f62:	9302      	str	r3, [sp, #8]
 23f7f64:	bd09      	pop	{r0, r3, pc}
 23f7f66:	0000      	.short	0x0000
 23f7f68:	1007aad8 	.word	0x1007aad8
 23f7f6c:	00000018 	.word	0x00000018

023f7f70 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23f7f70:	b509      	push	{r0, r3, lr}
 23f7f72:	4804      	ldr	r0, [pc, #16]	; (23f7f84 <hal_spi_is_enabled+0x14>)
 23f7f74:	6800      	ldr	r0, [r0, #0]
 23f7f76:	4b04      	ldr	r3, [pc, #16]	; (23f7f88 <hal_spi_is_enabled+0x18>)
 23f7f78:	4403      	add	r3, r0
 23f7f7a:	681b      	ldr	r3, [r3, #0]
 23f7f7c:	6a1b      	ldr	r3, [r3, #32]
 23f7f7e:	9302      	str	r3, [sp, #8]
 23f7f80:	bd09      	pop	{r0, r3, pc}
 23f7f82:	0000      	.short	0x0000
 23f7f84:	1007aad8 	.word	0x1007aad8
 23f7f88:	00000018 	.word	0x00000018

023f7f8c <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23f7f8c:	b509      	push	{r0, r3, lr}
 23f7f8e:	4804      	ldr	r0, [pc, #16]	; (23f7fa0 <hal_usart_end+0x14>)
 23f7f90:	6800      	ldr	r0, [r0, #0]
 23f7f92:	4b04      	ldr	r3, [pc, #16]	; (23f7fa4 <hal_usart_end+0x18>)
 23f7f94:	4403      	add	r3, r0
 23f7f96:	681b      	ldr	r3, [r3, #0]
 23f7f98:	689b      	ldr	r3, [r3, #8]
 23f7f9a:	9302      	str	r3, [sp, #8]
 23f7f9c:	bd09      	pop	{r0, r3, pc}
 23f7f9e:	0000      	.short	0x0000
 23f7fa0:	1007aad8 	.word	0x1007aad8
 23f7fa4:	00000024 	.word	0x00000024

023f7fa8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23f7fa8:	b509      	push	{r0, r3, lr}
 23f7faa:	4804      	ldr	r0, [pc, #16]	; (23f7fbc <hal_usart_write+0x14>)
 23f7fac:	6800      	ldr	r0, [r0, #0]
 23f7fae:	4b04      	ldr	r3, [pc, #16]	; (23f7fc0 <hal_usart_write+0x18>)
 23f7fb0:	4403      	add	r3, r0
 23f7fb2:	681b      	ldr	r3, [r3, #0]
 23f7fb4:	68db      	ldr	r3, [r3, #12]
 23f7fb6:	9302      	str	r3, [sp, #8]
 23f7fb8:	bd09      	pop	{r0, r3, pc}
 23f7fba:	0000      	.short	0x0000
 23f7fbc:	1007aad8 	.word	0x1007aad8
 23f7fc0:	00000024 	.word	0x00000024

023f7fc4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23f7fc4:	b509      	push	{r0, r3, lr}
 23f7fc6:	4804      	ldr	r0, [pc, #16]	; (23f7fd8 <hal_usart_available+0x14>)
 23f7fc8:	6800      	ldr	r0, [r0, #0]
 23f7fca:	4b04      	ldr	r3, [pc, #16]	; (23f7fdc <hal_usart_available+0x18>)
 23f7fcc:	4403      	add	r3, r0
 23f7fce:	681b      	ldr	r3, [r3, #0]
 23f7fd0:	691b      	ldr	r3, [r3, #16]
 23f7fd2:	9302      	str	r3, [sp, #8]
 23f7fd4:	bd09      	pop	{r0, r3, pc}
 23f7fd6:	0000      	.short	0x0000
 23f7fd8:	1007aad8 	.word	0x1007aad8
 23f7fdc:	00000024 	.word	0x00000024

023f7fe0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23f7fe0:	b509      	push	{r0, r3, lr}
 23f7fe2:	4804      	ldr	r0, [pc, #16]	; (23f7ff4 <hal_usart_read+0x14>)
 23f7fe4:	6800      	ldr	r0, [r0, #0]
 23f7fe6:	4b04      	ldr	r3, [pc, #16]	; (23f7ff8 <hal_usart_read+0x18>)
 23f7fe8:	4403      	add	r3, r0
 23f7fea:	681b      	ldr	r3, [r3, #0]
 23f7fec:	695b      	ldr	r3, [r3, #20]
 23f7fee:	9302      	str	r3, [sp, #8]
 23f7ff0:	bd09      	pop	{r0, r3, pc}
 23f7ff2:	0000      	.short	0x0000
 23f7ff4:	1007aad8 	.word	0x1007aad8
 23f7ff8:	00000024 	.word	0x00000024

023f7ffc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23f7ffc:	b509      	push	{r0, r3, lr}
 23f7ffe:	4804      	ldr	r0, [pc, #16]	; (23f8010 <hal_usart_peek+0x14>)
 23f8000:	6800      	ldr	r0, [r0, #0]
 23f8002:	4b04      	ldr	r3, [pc, #16]	; (23f8014 <hal_usart_peek+0x18>)
 23f8004:	4403      	add	r3, r0
 23f8006:	681b      	ldr	r3, [r3, #0]
 23f8008:	699b      	ldr	r3, [r3, #24]
 23f800a:	9302      	str	r3, [sp, #8]
 23f800c:	bd09      	pop	{r0, r3, pc}
 23f800e:	0000      	.short	0x0000
 23f8010:	1007aad8 	.word	0x1007aad8
 23f8014:	00000024 	.word	0x00000024

023f8018 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23f8018:	b509      	push	{r0, r3, lr}
 23f801a:	4804      	ldr	r0, [pc, #16]	; (23f802c <hal_usart_flush+0x14>)
 23f801c:	6800      	ldr	r0, [r0, #0]
 23f801e:	4b04      	ldr	r3, [pc, #16]	; (23f8030 <hal_usart_flush+0x18>)
 23f8020:	4403      	add	r3, r0
 23f8022:	681b      	ldr	r3, [r3, #0]
 23f8024:	69db      	ldr	r3, [r3, #28]
 23f8026:	9302      	str	r3, [sp, #8]
 23f8028:	bd09      	pop	{r0, r3, pc}
 23f802a:	0000      	.short	0x0000
 23f802c:	1007aad8 	.word	0x1007aad8
 23f8030:	00000024 	.word	0x00000024

023f8034 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23f8034:	b509      	push	{r0, r3, lr}
 23f8036:	4804      	ldr	r0, [pc, #16]	; (23f8048 <hal_usart_is_enabled+0x14>)
 23f8038:	6800      	ldr	r0, [r0, #0]
 23f803a:	4b04      	ldr	r3, [pc, #16]	; (23f804c <hal_usart_is_enabled+0x18>)
 23f803c:	4403      	add	r3, r0
 23f803e:	681b      	ldr	r3, [r3, #0]
 23f8040:	6a1b      	ldr	r3, [r3, #32]
 23f8042:	9302      	str	r3, [sp, #8]
 23f8044:	bd09      	pop	{r0, r3, pc}
 23f8046:	0000      	.short	0x0000
 23f8048:	1007aad8 	.word	0x1007aad8
 23f804c:	00000024 	.word	0x00000024

023f8050 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23f8050:	b509      	push	{r0, r3, lr}
 23f8052:	4804      	ldr	r0, [pc, #16]	; (23f8064 <hal_usart_available_data_for_write+0x14>)
 23f8054:	6800      	ldr	r0, [r0, #0]
 23f8056:	4b04      	ldr	r3, [pc, #16]	; (23f8068 <hal_usart_available_data_for_write+0x18>)
 23f8058:	4403      	add	r3, r0
 23f805a:	681b      	ldr	r3, [r3, #0]
 23f805c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f805e:	9302      	str	r3, [sp, #8]
 23f8060:	bd09      	pop	{r0, r3, pc}
 23f8062:	0000      	.short	0x0000
 23f8064:	1007aad8 	.word	0x1007aad8
 23f8068:	00000024 	.word	0x00000024

023f806c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23f806c:	b509      	push	{r0, r3, lr}
 23f806e:	4804      	ldr	r0, [pc, #16]	; (23f8080 <hal_usart_begin_config+0x14>)
 23f8070:	6800      	ldr	r0, [r0, #0]
 23f8072:	4b04      	ldr	r3, [pc, #16]	; (23f8084 <hal_usart_begin_config+0x18>)
 23f8074:	4403      	add	r3, r0
 23f8076:	681b      	ldr	r3, [r3, #0]
 23f8078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f807a:	9302      	str	r3, [sp, #8]
 23f807c:	bd09      	pop	{r0, r3, pc}
 23f807e:	0000      	.short	0x0000
 23f8080:	1007aad8 	.word	0x1007aad8
 23f8084:	00000024 	.word	0x00000024

023f8088 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23f8088:	b509      	push	{r0, r3, lr}
 23f808a:	4804      	ldr	r0, [pc, #16]	; (23f809c <hal_usart_init_ex+0x14>)
 23f808c:	6800      	ldr	r0, [r0, #0]
 23f808e:	4b04      	ldr	r3, [pc, #16]	; (23f80a0 <hal_usart_init_ex+0x18>)
 23f8090:	4403      	add	r3, r0
 23f8092:	681b      	ldr	r3, [r3, #0]
 23f8094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f8096:	9302      	str	r3, [sp, #8]
 23f8098:	bd09      	pop	{r0, r3, pc}
 23f809a:	0000      	.short	0x0000
 23f809c:	1007aad8 	.word	0x1007aad8
 23f80a0:	00000024 	.word	0x00000024

023f80a4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23f80a4:	b509      	push	{r0, r3, lr}
 23f80a6:	4804      	ldr	r0, [pc, #16]	; (23f80b8 <HAL_USB_USART_Init+0x14>)
 23f80a8:	6800      	ldr	r0, [r0, #0]
 23f80aa:	4b04      	ldr	r3, [pc, #16]	; (23f80bc <HAL_USB_USART_Init+0x18>)
 23f80ac:	4403      	add	r3, r0
 23f80ae:	681b      	ldr	r3, [r3, #0]
 23f80b0:	681b      	ldr	r3, [r3, #0]
 23f80b2:	9302      	str	r3, [sp, #8]
 23f80b4:	bd09      	pop	{r0, r3, pc}
 23f80b6:	0000      	.short	0x0000
 23f80b8:	1007aad8 	.word	0x1007aad8
 23f80bc:	00000034 	.word	0x00000034

023f80c0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23f80c0:	b509      	push	{r0, r3, lr}
 23f80c2:	4804      	ldr	r0, [pc, #16]	; (23f80d4 <HAL_USB_USART_Begin+0x14>)
 23f80c4:	6800      	ldr	r0, [r0, #0]
 23f80c6:	4b04      	ldr	r3, [pc, #16]	; (23f80d8 <HAL_USB_USART_Begin+0x18>)
 23f80c8:	4403      	add	r3, r0
 23f80ca:	681b      	ldr	r3, [r3, #0]
 23f80cc:	685b      	ldr	r3, [r3, #4]
 23f80ce:	9302      	str	r3, [sp, #8]
 23f80d0:	bd09      	pop	{r0, r3, pc}
 23f80d2:	0000      	.short	0x0000
 23f80d4:	1007aad8 	.word	0x1007aad8
 23f80d8:	00000034 	.word	0x00000034

023f80dc <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23f80dc:	b509      	push	{r0, r3, lr}
 23f80de:	4804      	ldr	r0, [pc, #16]	; (23f80f0 <HAL_USB_USART_End+0x14>)
 23f80e0:	6800      	ldr	r0, [r0, #0]
 23f80e2:	4b04      	ldr	r3, [pc, #16]	; (23f80f4 <HAL_USB_USART_End+0x18>)
 23f80e4:	4403      	add	r3, r0
 23f80e6:	681b      	ldr	r3, [r3, #0]
 23f80e8:	689b      	ldr	r3, [r3, #8]
 23f80ea:	9302      	str	r3, [sp, #8]
 23f80ec:	bd09      	pop	{r0, r3, pc}
 23f80ee:	0000      	.short	0x0000
 23f80f0:	1007aad8 	.word	0x1007aad8
 23f80f4:	00000034 	.word	0x00000034

023f80f8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23f80f8:	b509      	push	{r0, r3, lr}
 23f80fa:	4804      	ldr	r0, [pc, #16]	; (23f810c <HAL_USB_USART_Available_Data+0x14>)
 23f80fc:	6800      	ldr	r0, [r0, #0]
 23f80fe:	4b04      	ldr	r3, [pc, #16]	; (23f8110 <HAL_USB_USART_Available_Data+0x18>)
 23f8100:	4403      	add	r3, r0
 23f8102:	681b      	ldr	r3, [r3, #0]
 23f8104:	691b      	ldr	r3, [r3, #16]
 23f8106:	9302      	str	r3, [sp, #8]
 23f8108:	bd09      	pop	{r0, r3, pc}
 23f810a:	0000      	.short	0x0000
 23f810c:	1007aad8 	.word	0x1007aad8
 23f8110:	00000034 	.word	0x00000034

023f8114 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23f8114:	b509      	push	{r0, r3, lr}
 23f8116:	4804      	ldr	r0, [pc, #16]	; (23f8128 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23f8118:	6800      	ldr	r0, [r0, #0]
 23f811a:	4b04      	ldr	r3, [pc, #16]	; (23f812c <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23f811c:	4403      	add	r3, r0
 23f811e:	681b      	ldr	r3, [r3, #0]
 23f8120:	695b      	ldr	r3, [r3, #20]
 23f8122:	9302      	str	r3, [sp, #8]
 23f8124:	bd09      	pop	{r0, r3, pc}
 23f8126:	0000      	.short	0x0000
 23f8128:	1007aad8 	.word	0x1007aad8
 23f812c:	00000034 	.word	0x00000034

023f8130 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f8130:	b509      	push	{r0, r3, lr}
 23f8132:	4804      	ldr	r0, [pc, #16]	; (23f8144 <HAL_USB_USART_Receive_Data+0x14>)
 23f8134:	6800      	ldr	r0, [r0, #0]
 23f8136:	4b04      	ldr	r3, [pc, #16]	; (23f8148 <HAL_USB_USART_Receive_Data+0x18>)
 23f8138:	4403      	add	r3, r0
 23f813a:	681b      	ldr	r3, [r3, #0]
 23f813c:	699b      	ldr	r3, [r3, #24]
 23f813e:	9302      	str	r3, [sp, #8]
 23f8140:	bd09      	pop	{r0, r3, pc}
 23f8142:	0000      	.short	0x0000
 23f8144:	1007aad8 	.word	0x1007aad8
 23f8148:	00000034 	.word	0x00000034

023f814c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f814c:	b509      	push	{r0, r3, lr}
 23f814e:	4804      	ldr	r0, [pc, #16]	; (23f8160 <HAL_USB_USART_Send_Data+0x14>)
 23f8150:	6800      	ldr	r0, [r0, #0]
 23f8152:	4b04      	ldr	r3, [pc, #16]	; (23f8164 <HAL_USB_USART_Send_Data+0x18>)
 23f8154:	4403      	add	r3, r0
 23f8156:	681b      	ldr	r3, [r3, #0]
 23f8158:	69db      	ldr	r3, [r3, #28]
 23f815a:	9302      	str	r3, [sp, #8]
 23f815c:	bd09      	pop	{r0, r3, pc}
 23f815e:	0000      	.short	0x0000
 23f8160:	1007aad8 	.word	0x1007aad8
 23f8164:	00000034 	.word	0x00000034

023f8168 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23f8168:	b509      	push	{r0, r3, lr}
 23f816a:	4804      	ldr	r0, [pc, #16]	; (23f817c <HAL_USB_USART_Flush_Data+0x14>)
 23f816c:	6800      	ldr	r0, [r0, #0]
 23f816e:	4b04      	ldr	r3, [pc, #16]	; (23f8180 <HAL_USB_USART_Flush_Data+0x18>)
 23f8170:	4403      	add	r3, r0
 23f8172:	681b      	ldr	r3, [r3, #0]
 23f8174:	6a1b      	ldr	r3, [r3, #32]
 23f8176:	9302      	str	r3, [sp, #8]
 23f8178:	bd09      	pop	{r0, r3, pc}
 23f817a:	0000      	.short	0x0000
 23f817c:	1007aad8 	.word	0x1007aad8
 23f8180:	00000034 	.word	0x00000034

023f8184 <hal_watchdog_set_config>:

#if HAL_PLATFORM_HW_WATCHDOG

DYNALIB_BEGIN(hal_watchdog)

DYNALIB_FN(0, hal_watchdog, hal_watchdog_set_config, int(hal_watchdog_instance_t, const hal_watchdog_config_t*, void*))
 23f8184:	b509      	push	{r0, r3, lr}
 23f8186:	4804      	ldr	r0, [pc, #16]	; (23f8198 <hal_watchdog_set_config+0x14>)
 23f8188:	6800      	ldr	r0, [r0, #0]
 23f818a:	4b04      	ldr	r3, [pc, #16]	; (23f819c <hal_watchdog_set_config+0x18>)
 23f818c:	4403      	add	r3, r0
 23f818e:	681b      	ldr	r3, [r3, #0]
 23f8190:	681b      	ldr	r3, [r3, #0]
 23f8192:	9302      	str	r3, [sp, #8]
 23f8194:	bd09      	pop	{r0, r3, pc}
 23f8196:	0000      	.short	0x0000
 23f8198:	1007aad8 	.word	0x1007aad8
 23f819c:	0000006c 	.word	0x0000006c

023f81a0 <hal_watchdog_start>:
DYNALIB_FN(1, hal_watchdog, hal_watchdog_on_expired_callback, int(hal_watchdog_instance_t, hal_watchdog_on_expired_callback_t, void*, void*))
DYNALIB_FN(2, hal_watchdog, hal_watchdog_start, int(hal_watchdog_instance_t, void*))
 23f81a0:	b509      	push	{r0, r3, lr}
 23f81a2:	4804      	ldr	r0, [pc, #16]	; (23f81b4 <hal_watchdog_start+0x14>)
 23f81a4:	6800      	ldr	r0, [r0, #0]
 23f81a6:	4b04      	ldr	r3, [pc, #16]	; (23f81b8 <hal_watchdog_start+0x18>)
 23f81a8:	4403      	add	r3, r0
 23f81aa:	681b      	ldr	r3, [r3, #0]
 23f81ac:	689b      	ldr	r3, [r3, #8]
 23f81ae:	9302      	str	r3, [sp, #8]
 23f81b0:	bd09      	pop	{r0, r3, pc}
 23f81b2:	0000      	.short	0x0000
 23f81b4:	1007aad8 	.word	0x1007aad8
 23f81b8:	0000006c 	.word	0x0000006c

023f81bc <hal_watchdog_refresh>:
DYNALIB_FN(3, hal_watchdog, hal_watchdog_stop, int(hal_watchdog_instance_t, void*))
DYNALIB_FN(4, hal_watchdog, hal_watchdog_refresh, int(hal_watchdog_instance_t, void*))
 23f81bc:	b509      	push	{r0, r3, lr}
 23f81be:	4804      	ldr	r0, [pc, #16]	; (23f81d0 <hal_watchdog_refresh+0x14>)
 23f81c0:	6800      	ldr	r0, [r0, #0]
 23f81c2:	4b04      	ldr	r3, [pc, #16]	; (23f81d4 <hal_watchdog_refresh+0x18>)
 23f81c4:	4403      	add	r3, r0
 23f81c6:	681b      	ldr	r3, [r3, #0]
 23f81c8:	691b      	ldr	r3, [r3, #16]
 23f81ca:	9302      	str	r3, [sp, #8]
 23f81cc:	bd09      	pop	{r0, r3, pc}
 23f81ce:	0000      	.short	0x0000
 23f81d0:	1007aad8 	.word	0x1007aad8
 23f81d4:	0000006c 	.word	0x0000006c

023f81d8 <hal_watchdog_get_info>:
DYNALIB_FN(5, hal_watchdog, hal_watchdog_get_info, int(hal_watchdog_instance_t, hal_watchdog_info_t*, void*))
 23f81d8:	b509      	push	{r0, r3, lr}
 23f81da:	4804      	ldr	r0, [pc, #16]	; (23f81ec <hal_watchdog_get_info+0x14>)
 23f81dc:	6800      	ldr	r0, [r0, #0]
 23f81de:	4b04      	ldr	r3, [pc, #16]	; (23f81f0 <hal_watchdog_get_info+0x18>)
 23f81e0:	4403      	add	r3, r0
 23f81e2:	681b      	ldr	r3, [r3, #0]
 23f81e4:	695b      	ldr	r3, [r3, #20]
 23f81e6:	9302      	str	r3, [sp, #8]
 23f81e8:	bd09      	pop	{r0, r3, pc}
 23f81ea:	0000      	.short	0x0000
 23f81ec:	1007aad8 	.word	0x1007aad8
 23f81f0:	0000006c 	.word	0x0000006c

023f81f4 <wlan_select_antenna>:
#else
DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
#endif
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 23f81f4:	b509      	push	{r0, r3, lr}
 23f81f6:	4804      	ldr	r0, [pc, #16]	; (23f8208 <wlan_select_antenna+0x14>)
 23f81f8:	6800      	ldr	r0, [r0, #0]
 23f81fa:	4b04      	ldr	r3, [pc, #16]	; (23f820c <wlan_select_antenna+0x18>)
 23f81fc:	4403      	add	r3, r0
 23f81fe:	681b      	ldr	r3, [r3, #0]
 23f8200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f8202:	9302      	str	r3, [sp, #8]
 23f8204:	bd09      	pop	{r0, r3, pc}
 23f8206:	0000      	.short	0x0000
 23f8208:	1007aad8 	.word	0x1007aad8
 23f820c:	0000005c 	.word	0x0000005c

023f8210 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23f8210:	b509      	push	{r0, r3, lr}
 23f8212:	4804      	ldr	r0, [pc, #16]	; (23f8224 <panic_+0x14>)
 23f8214:	6800      	ldr	r0, [r0, #0]
 23f8216:	4b04      	ldr	r3, [pc, #16]	; (23f8228 <panic_+0x18>)
 23f8218:	4403      	add	r3, r0
 23f821a:	681b      	ldr	r3, [r3, #0]
 23f821c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f821e:	9302      	str	r3, [sp, #8]
 23f8220:	bd09      	pop	{r0, r3, pc}
 23f8222:	0000      	.short	0x0000
 23f8224:	1007aad8 	.word	0x1007aad8
 23f8228:	00000048 	.word	0x00000048

023f822c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23f822c:	b509      	push	{r0, r3, lr}
 23f822e:	4804      	ldr	r0, [pc, #16]	; (23f8240 <log_message+0x14>)
 23f8230:	6800      	ldr	r0, [r0, #0]
 23f8232:	4b04      	ldr	r3, [pc, #16]	; (23f8244 <log_message+0x18>)
 23f8234:	4403      	add	r3, r0
 23f8236:	681b      	ldr	r3, [r3, #0]
 23f8238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f823a:	9302      	str	r3, [sp, #8]
 23f823c:	bd09      	pop	{r0, r3, pc}
 23f823e:	0000      	.short	0x0000
 23f8240:	1007aad8 	.word	0x1007aad8
 23f8244:	00000048 	.word	0x00000048

023f8248 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23f8248:	b509      	push	{r0, r3, lr}
 23f824a:	4804      	ldr	r0, [pc, #16]	; (23f825c <log_message_v+0x14>)
 23f824c:	6800      	ldr	r0, [r0, #0]
 23f824e:	4b04      	ldr	r3, [pc, #16]	; (23f8260 <log_message_v+0x18>)
 23f8250:	4403      	add	r3, r0
 23f8252:	681b      	ldr	r3, [r3, #0]
 23f8254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f8256:	9302      	str	r3, [sp, #8]
 23f8258:	bd09      	pop	{r0, r3, pc}
 23f825a:	0000      	.short	0x0000
 23f825c:	1007aad8 	.word	0x1007aad8
 23f8260:	00000048 	.word	0x00000048

023f8264 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23f8264:	b509      	push	{r0, r3, lr}
 23f8266:	4804      	ldr	r0, [pc, #16]	; (23f8278 <log_level_name+0x14>)
 23f8268:	6800      	ldr	r0, [r0, #0]
 23f826a:	4b04      	ldr	r3, [pc, #16]	; (23f827c <log_level_name+0x18>)
 23f826c:	4403      	add	r3, r0
 23f826e:	681b      	ldr	r3, [r3, #0]
 23f8270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23f8272:	9302      	str	r3, [sp, #8]
 23f8274:	bd09      	pop	{r0, r3, pc}
 23f8276:	0000      	.short	0x0000
 23f8278:	1007aad8 	.word	0x1007aad8
 23f827c:	00000048 	.word	0x00000048

023f8280 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23f8280:	b509      	push	{r0, r3, lr}
 23f8282:	4804      	ldr	r0, [pc, #16]	; (23f8294 <log_set_callbacks+0x14>)
 23f8284:	6800      	ldr	r0, [r0, #0]
 23f8286:	4b04      	ldr	r3, [pc, #16]	; (23f8298 <log_set_callbacks+0x18>)
 23f8288:	4403      	add	r3, r0
 23f828a:	681b      	ldr	r3, [r3, #0]
 23f828c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23f828e:	9302      	str	r3, [sp, #8]
 23f8290:	bd09      	pop	{r0, r3, pc}
 23f8292:	0000      	.short	0x0000
 23f8294:	1007aad8 	.word	0x1007aad8
 23f8298:	00000048 	.word	0x00000048

023f829c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 23f829c:	b509      	push	{r0, r3, lr}
 23f829e:	4804      	ldr	r0, [pc, #16]	; (23f82b0 <system_mode+0x14>)
 23f82a0:	6800      	ldr	r0, [r0, #0]
 23f82a2:	4b04      	ldr	r3, [pc, #16]	; (23f82b4 <system_mode+0x18>)
 23f82a4:	4403      	add	r3, r0
 23f82a6:	681b      	ldr	r3, [r3, #0]
 23f82a8:	681b      	ldr	r3, [r3, #0]
 23f82aa:	9302      	str	r3, [sp, #8]
 23f82ac:	bd09      	pop	{r0, r3, pc}
 23f82ae:	0000      	.short	0x0000
 23f82b0:	1007aad8 	.word	0x1007aad8
 23f82b4:	00000008 	.word	0x00000008

023f82b8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23f82b8:	b509      	push	{r0, r3, lr}
 23f82ba:	4804      	ldr	r0, [pc, #16]	; (23f82cc <set_system_mode+0x14>)
 23f82bc:	6800      	ldr	r0, [r0, #0]
 23f82be:	4b04      	ldr	r3, [pc, #16]	; (23f82d0 <set_system_mode+0x18>)
 23f82c0:	4403      	add	r3, r0
 23f82c2:	681b      	ldr	r3, [r3, #0]
 23f82c4:	685b      	ldr	r3, [r3, #4]
 23f82c6:	9302      	str	r3, [sp, #8]
 23f82c8:	bd09      	pop	{r0, r3, pc}
 23f82ca:	0000      	.short	0x0000
 23f82cc:	1007aad8 	.word	0x1007aad8
 23f82d0:	00000008 	.word	0x00000008

023f82d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23f82d4:	b509      	push	{r0, r3, lr}
 23f82d6:	4804      	ldr	r0, [pc, #16]	; (23f82e8 <system_delay_ms+0x14>)
 23f82d8:	6800      	ldr	r0, [r0, #0]
 23f82da:	4b04      	ldr	r3, [pc, #16]	; (23f82ec <system_delay_ms+0x18>)
 23f82dc:	4403      	add	r3, r0
 23f82de:	681b      	ldr	r3, [r3, #0]
 23f82e0:	695b      	ldr	r3, [r3, #20]
 23f82e2:	9302      	str	r3, [sp, #8]
 23f82e4:	bd09      	pop	{r0, r3, pc}
 23f82e6:	0000      	.short	0x0000
 23f82e8:	1007aad8 	.word	0x1007aad8
 23f82ec:	00000008 	.word	0x00000008

023f82f0 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
 23f82f0:	b509      	push	{r0, r3, lr}
 23f82f2:	4804      	ldr	r0, [pc, #16]	; (23f8304 <system_subscribe_event+0x14>)
 23f82f4:	6800      	ldr	r0, [r0, #0]
 23f82f6:	4b04      	ldr	r3, [pc, #16]	; (23f8308 <system_subscribe_event+0x18>)
 23f82f8:	4403      	add	r3, r0
 23f82fa:	681b      	ldr	r3, [r3, #0]
 23f82fc:	6a1b      	ldr	r3, [r3, #32]
 23f82fe:	9302      	str	r3, [sp, #8]
 23f8300:	bd09      	pop	{r0, r3, pc}
 23f8302:	0000      	.short	0x0000
 23f8304:	1007aad8 	.word	0x1007aad8
 23f8308:	00000008 	.word	0x00000008

023f830c <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23f830c:	b509      	push	{r0, r3, lr}
 23f830e:	4804      	ldr	r0, [pc, #16]	; (23f8320 <system_thread_set_state+0x14>)
 23f8310:	6800      	ldr	r0, [r0, #0]
 23f8312:	4b04      	ldr	r3, [pc, #16]	; (23f8324 <system_thread_set_state+0x18>)
 23f8314:	4403      	add	r3, r0
 23f8316:	681b      	ldr	r3, [r3, #0]
 23f8318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f831a:	9302      	str	r3, [sp, #8]
 23f831c:	bd09      	pop	{r0, r3, pc}
 23f831e:	0000      	.short	0x0000
 23f8320:	1007aad8 	.word	0x1007aad8
 23f8324:	00000008 	.word	0x00000008

023f8328 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 23f8328:	b509      	push	{r0, r3, lr}
 23f832a:	4804      	ldr	r0, [pc, #16]	; (23f833c <system_thread_get_state+0x14>)
 23f832c:	6800      	ldr	r0, [r0, #0]
 23f832e:	4b04      	ldr	r3, [pc, #16]	; (23f8340 <system_thread_get_state+0x18>)
 23f8330:	4403      	add	r3, r0
 23f8332:	681b      	ldr	r3, [r3, #0]
 23f8334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f8336:	9302      	str	r3, [sp, #8]
 23f8338:	bd09      	pop	{r0, r3, pc}
 23f833a:	0000      	.short	0x0000
 23f833c:	1007aad8 	.word	0x1007aad8
 23f8340:	00000008 	.word	0x00000008

023f8344 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23f8344:	b509      	push	{r0, r3, lr}
 23f8346:	4804      	ldr	r0, [pc, #16]	; (23f8358 <system_ctrl_set_app_request_handler+0x14>)
 23f8348:	6800      	ldr	r0, [r0, #0]
 23f834a:	4b04      	ldr	r3, [pc, #16]	; (23f835c <system_ctrl_set_app_request_handler+0x18>)
 23f834c:	4403      	add	r3, r0
 23f834e:	681b      	ldr	r3, [r3, #0]
 23f8350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23f8354:	9302      	str	r3, [sp, #8]
 23f8356:	bd09      	pop	{r0, r3, pc}
 23f8358:	1007aad8 	.word	0x1007aad8
 23f835c:	00000008 	.word	0x00000008

023f8360 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23f8360:	b509      	push	{r0, r3, lr}
 23f8362:	4804      	ldr	r0, [pc, #16]	; (23f8374 <system_ctrl_set_result+0x14>)
 23f8364:	6800      	ldr	r0, [r0, #0]
 23f8366:	4b04      	ldr	r3, [pc, #16]	; (23f8378 <system_ctrl_set_result+0x18>)
 23f8368:	4403      	add	r3, r0
 23f836a:	681b      	ldr	r3, [r3, #0]
 23f836c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23f8370:	9302      	str	r3, [sp, #8]
 23f8372:	bd09      	pop	{r0, r3, pc}
 23f8374:	1007aad8 	.word	0x1007aad8
 23f8378:	00000008 	.word	0x00000008

023f837c <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 23f837c:	b509      	push	{r0, r3, lr}
 23f837e:	4804      	ldr	r0, [pc, #16]	; (23f8390 <system_reset+0x14>)
 23f8380:	6800      	ldr	r0, [r0, #0]
 23f8382:	4b04      	ldr	r3, [pc, #16]	; (23f8394 <system_reset+0x18>)
 23f8384:	4403      	add	r3, r0
 23f8386:	681b      	ldr	r3, [r3, #0]
 23f8388:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 23f838c:	9302      	str	r3, [sp, #8]
 23f838e:	bd09      	pop	{r0, r3, pc}
 23f8390:	1007aad8 	.word	0x1007aad8
 23f8394:	00000008 	.word	0x00000008

023f8398 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 23f8398:	b509      	push	{r0, r3, lr}
 23f839a:	4804      	ldr	r0, [pc, #16]	; (23f83ac <spark_variable+0x14>)
 23f839c:	6800      	ldr	r0, [r0, #0]
 23f839e:	4b04      	ldr	r3, [pc, #16]	; (23f83b0 <spark_variable+0x18>)
 23f83a0:	4403      	add	r3, r0
 23f83a2:	681b      	ldr	r3, [r3, #0]
 23f83a4:	681b      	ldr	r3, [r3, #0]
 23f83a6:	9302      	str	r3, [sp, #8]
 23f83a8:	bd09      	pop	{r0, r3, pc}
 23f83aa:	0000      	.short	0x0000
 23f83ac:	1007aad8 	.word	0x1007aad8
 23f83b0:	0000002c 	.word	0x0000002c

023f83b4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 23f83b4:	b509      	push	{r0, r3, lr}
 23f83b6:	4804      	ldr	r0, [pc, #16]	; (23f83c8 <spark_function+0x14>)
 23f83b8:	6800      	ldr	r0, [r0, #0]
 23f83ba:	4b04      	ldr	r3, [pc, #16]	; (23f83cc <spark_function+0x18>)
 23f83bc:	4403      	add	r3, r0
 23f83be:	681b      	ldr	r3, [r3, #0]
 23f83c0:	685b      	ldr	r3, [r3, #4]
 23f83c2:	9302      	str	r3, [sp, #8]
 23f83c4:	bd09      	pop	{r0, r3, pc}
 23f83c6:	0000      	.short	0x0000
 23f83c8:	1007aad8 	.word	0x1007aad8
 23f83cc:	0000002c 	.word	0x0000002c

023f83d0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23f83d0:	b509      	push	{r0, r3, lr}
 23f83d2:	4804      	ldr	r0, [pc, #16]	; (23f83e4 <spark_process+0x14>)
 23f83d4:	6800      	ldr	r0, [r0, #0]
 23f83d6:	4b04      	ldr	r3, [pc, #16]	; (23f83e8 <spark_process+0x18>)
 23f83d8:	4403      	add	r3, r0
 23f83da:	681b      	ldr	r3, [r3, #0]
 23f83dc:	689b      	ldr	r3, [r3, #8]
 23f83de:	9302      	str	r3, [sp, #8]
 23f83e0:	bd09      	pop	{r0, r3, pc}
 23f83e2:	0000      	.short	0x0000
 23f83e4:	1007aad8 	.word	0x1007aad8
 23f83e8:	0000002c 	.word	0x0000002c

023f83ec <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23f83ec:	b509      	push	{r0, r3, lr}
 23f83ee:	4804      	ldr	r0, [pc, #16]	; (23f8400 <spark_cloud_flag_connected+0x14>)
 23f83f0:	6800      	ldr	r0, [r0, #0]
 23f83f2:	4b04      	ldr	r3, [pc, #16]	; (23f8404 <spark_cloud_flag_connected+0x18>)
 23f83f4:	4403      	add	r3, r0
 23f83f6:	681b      	ldr	r3, [r3, #0]
 23f83f8:	695b      	ldr	r3, [r3, #20]
 23f83fa:	9302      	str	r3, [sp, #8]
 23f83fc:	bd09      	pop	{r0, r3, pc}
 23f83fe:	0000      	.short	0x0000
 23f8400:	1007aad8 	.word	0x1007aad8
 23f8404:	0000002c 	.word	0x0000002c

023f8408 <spark_subscribe>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 23f8408:	b509      	push	{r0, r3, lr}
 23f840a:	4804      	ldr	r0, [pc, #16]	; (23f841c <spark_subscribe+0x14>)
 23f840c:	6800      	ldr	r0, [r0, #0]
 23f840e:	4b04      	ldr	r3, [pc, #16]	; (23f8420 <spark_subscribe+0x18>)
 23f8410:	4403      	add	r3, r0
 23f8412:	681b      	ldr	r3, [r3, #0]
 23f8414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f8416:	9302      	str	r3, [sp, #8]
 23f8418:	bd09      	pop	{r0, r3, pc}
 23f841a:	0000      	.short	0x0000
 23f841c:	1007aad8 	.word	0x1007aad8
 23f8420:	0000002c 	.word	0x0000002c

023f8424 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 23f8424:	b509      	push	{r0, r3, lr}
 23f8426:	4804      	ldr	r0, [pc, #16]	; (23f8438 <spark_sync_time_pending+0x14>)
 23f8428:	6800      	ldr	r0, [r0, #0]
 23f842a:	4b04      	ldr	r3, [pc, #16]	; (23f843c <spark_sync_time_pending+0x18>)
 23f842c:	4403      	add	r3, r0
 23f842e:	681b      	ldr	r3, [r3, #0]
 23f8430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f8432:	9302      	str	r3, [sp, #8]
 23f8434:	bd09      	pop	{r0, r3, pc}
 23f8436:	0000      	.short	0x0000
 23f8438:	1007aad8 	.word	0x1007aad8
 23f843c:	0000002c 	.word	0x0000002c

023f8440 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23f8440:	b509      	push	{r0, r3, lr}
 23f8442:	4804      	ldr	r0, [pc, #16]	; (23f8454 <spark_set_random_seed_from_cloud_handler+0x14>)
 23f8444:	6800      	ldr	r0, [r0, #0]
 23f8446:	4b04      	ldr	r3, [pc, #16]	; (23f8458 <spark_set_random_seed_from_cloud_handler+0x18>)
 23f8448:	4403      	add	r3, r0
 23f844a:	681b      	ldr	r3, [r3, #0]
 23f844c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f844e:	9302      	str	r3, [sp, #8]
 23f8450:	bd09      	pop	{r0, r3, pc}
 23f8452:	0000      	.short	0x0000
 23f8454:	1007aad8 	.word	0x1007aad8
 23f8458:	0000002c 	.word	0x0000002c

023f845c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23f845c:	b509      	push	{r0, r3, lr}
 23f845e:	4804      	ldr	r0, [pc, #16]	; (23f8470 <network_connect+0x14>)
 23f8460:	6800      	ldr	r0, [r0, #0]
 23f8462:	4b04      	ldr	r3, [pc, #16]	; (23f8474 <network_connect+0x18>)
 23f8464:	4403      	add	r3, r0
 23f8466:	681b      	ldr	r3, [r3, #0]
 23f8468:	685b      	ldr	r3, [r3, #4]
 23f846a:	9302      	str	r3, [sp, #8]
 23f846c:	bd09      	pop	{r0, r3, pc}
 23f846e:	0000      	.short	0x0000
 23f8470:	1007aad8 	.word	0x1007aad8
 23f8474:	00000028 	.word	0x00000028

023f8478 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23f8478:	b509      	push	{r0, r3, lr}
 23f847a:	4804      	ldr	r0, [pc, #16]	; (23f848c <network_connecting+0x14>)
 23f847c:	6800      	ldr	r0, [r0, #0]
 23f847e:	4b04      	ldr	r3, [pc, #16]	; (23f8490 <network_connecting+0x18>)
 23f8480:	4403      	add	r3, r0
 23f8482:	681b      	ldr	r3, [r3, #0]
 23f8484:	689b      	ldr	r3, [r3, #8]
 23f8486:	9302      	str	r3, [sp, #8]
 23f8488:	bd09      	pop	{r0, r3, pc}
 23f848a:	0000      	.short	0x0000
 23f848c:	1007aad8 	.word	0x1007aad8
 23f8490:	00000028 	.word	0x00000028

023f8494 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23f8494:	b509      	push	{r0, r3, lr}
 23f8496:	4804      	ldr	r0, [pc, #16]	; (23f84a8 <network_disconnect+0x14>)
 23f8498:	6800      	ldr	r0, [r0, #0]
 23f849a:	4b04      	ldr	r3, [pc, #16]	; (23f84ac <network_disconnect+0x18>)
 23f849c:	4403      	add	r3, r0
 23f849e:	681b      	ldr	r3, [r3, #0]
 23f84a0:	68db      	ldr	r3, [r3, #12]
 23f84a2:	9302      	str	r3, [sp, #8]
 23f84a4:	bd09      	pop	{r0, r3, pc}
 23f84a6:	0000      	.short	0x0000
 23f84a8:	1007aad8 	.word	0x1007aad8
 23f84ac:	00000028 	.word	0x00000028

023f84b0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23f84b0:	b509      	push	{r0, r3, lr}
 23f84b2:	4804      	ldr	r0, [pc, #16]	; (23f84c4 <network_ready+0x14>)
 23f84b4:	6800      	ldr	r0, [r0, #0]
 23f84b6:	4b04      	ldr	r3, [pc, #16]	; (23f84c8 <network_ready+0x18>)
 23f84b8:	4403      	add	r3, r0
 23f84ba:	681b      	ldr	r3, [r3, #0]
 23f84bc:	691b      	ldr	r3, [r3, #16]
 23f84be:	9302      	str	r3, [sp, #8]
 23f84c0:	bd09      	pop	{r0, r3, pc}
 23f84c2:	0000      	.short	0x0000
 23f84c4:	1007aad8 	.word	0x1007aad8
 23f84c8:	00000028 	.word	0x00000028

023f84cc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23f84cc:	b509      	push	{r0, r3, lr}
 23f84ce:	4804      	ldr	r0, [pc, #16]	; (23f84e0 <network_on+0x14>)
 23f84d0:	6800      	ldr	r0, [r0, #0]
 23f84d2:	4b04      	ldr	r3, [pc, #16]	; (23f84e4 <network_on+0x18>)
 23f84d4:	4403      	add	r3, r0
 23f84d6:	681b      	ldr	r3, [r3, #0]
 23f84d8:	695b      	ldr	r3, [r3, #20]
 23f84da:	9302      	str	r3, [sp, #8]
 23f84dc:	bd09      	pop	{r0, r3, pc}
 23f84de:	0000      	.short	0x0000
 23f84e0:	1007aad8 	.word	0x1007aad8
 23f84e4:	00000028 	.word	0x00000028

023f84e8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23f84e8:	b509      	push	{r0, r3, lr}
 23f84ea:	4804      	ldr	r0, [pc, #16]	; (23f84fc <network_off+0x14>)
 23f84ec:	6800      	ldr	r0, [r0, #0]
 23f84ee:	4b04      	ldr	r3, [pc, #16]	; (23f8500 <network_off+0x18>)
 23f84f0:	4403      	add	r3, r0
 23f84f2:	681b      	ldr	r3, [r3, #0]
 23f84f4:	699b      	ldr	r3, [r3, #24]
 23f84f6:	9302      	str	r3, [sp, #8]
 23f84f8:	bd09      	pop	{r0, r3, pc}
 23f84fa:	0000      	.short	0x0000
 23f84fc:	1007aad8 	.word	0x1007aad8
 23f8500:	00000028 	.word	0x00000028

023f8504 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23f8504:	b509      	push	{r0, r3, lr}
 23f8506:	4804      	ldr	r0, [pc, #16]	; (23f8518 <network_listen+0x14>)
 23f8508:	6800      	ldr	r0, [r0, #0]
 23f850a:	4b04      	ldr	r3, [pc, #16]	; (23f851c <network_listen+0x18>)
 23f850c:	4403      	add	r3, r0
 23f850e:	681b      	ldr	r3, [r3, #0]
 23f8510:	69db      	ldr	r3, [r3, #28]
 23f8512:	9302      	str	r3, [sp, #8]
 23f8514:	bd09      	pop	{r0, r3, pc}
 23f8516:	0000      	.short	0x0000
 23f8518:	1007aad8 	.word	0x1007aad8
 23f851c:	00000028 	.word	0x00000028

023f8520 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23f8520:	b509      	push	{r0, r3, lr}
 23f8522:	4804      	ldr	r0, [pc, #16]	; (23f8534 <network_listening+0x14>)
 23f8524:	6800      	ldr	r0, [r0, #0]
 23f8526:	4b04      	ldr	r3, [pc, #16]	; (23f8538 <network_listening+0x18>)
 23f8528:	4403      	add	r3, r0
 23f852a:	681b      	ldr	r3, [r3, #0]
 23f852c:	6a1b      	ldr	r3, [r3, #32]
 23f852e:	9302      	str	r3, [sp, #8]
 23f8530:	bd09      	pop	{r0, r3, pc}
 23f8532:	0000      	.short	0x0000
 23f8534:	1007aad8 	.word	0x1007aad8
 23f8538:	00000028 	.word	0x00000028

023f853c <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
 23f853c:	b509      	push	{r0, r3, lr}
 23f853e:	4804      	ldr	r0, [pc, #16]	; (23f8550 <network_set_credentials+0x14>)
 23f8540:	6800      	ldr	r0, [r0, #0]
 23f8542:	4b04      	ldr	r3, [pc, #16]	; (23f8554 <network_set_credentials+0x18>)
 23f8544:	4403      	add	r3, r0
 23f8546:	681b      	ldr	r3, [r3, #0]
 23f8548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f854a:	9302      	str	r3, [sp, #8]
 23f854c:	bd09      	pop	{r0, r3, pc}
 23f854e:	0000      	.short	0x0000
 23f8550:	1007aad8 	.word	0x1007aad8
 23f8554:	00000028 	.word	0x00000028

023f8558 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23f8558:	b509      	push	{r0, r3, lr}
 23f855a:	4804      	ldr	r0, [pc, #16]	; (23f856c <network_set_listen_timeout+0x14>)
 23f855c:	6800      	ldr	r0, [r0, #0]
 23f855e:	4b04      	ldr	r3, [pc, #16]	; (23f8570 <network_set_listen_timeout+0x18>)
 23f8560:	4403      	add	r3, r0
 23f8562:	681b      	ldr	r3, [r3, #0]
 23f8564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f8566:	9302      	str	r3, [sp, #8]
 23f8568:	bd09      	pop	{r0, r3, pc}
 23f856a:	0000      	.short	0x0000
 23f856c:	1007aad8 	.word	0x1007aad8
 23f8570:	00000028 	.word	0x00000028

023f8574 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23f8574:	b509      	push	{r0, r3, lr}
 23f8576:	4804      	ldr	r0, [pc, #16]	; (23f8588 <network_get_listen_timeout+0x14>)
 23f8578:	6800      	ldr	r0, [r0, #0]
 23f857a:	4b04      	ldr	r3, [pc, #16]	; (23f858c <network_get_listen_timeout+0x18>)
 23f857c:	4403      	add	r3, r0
 23f857e:	681b      	ldr	r3, [r3, #0]
 23f8580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f8582:	9302      	str	r3, [sp, #8]
 23f8584:	bd09      	pop	{r0, r3, pc}
 23f8586:	0000      	.short	0x0000
 23f8588:	1007aad8 	.word	0x1007aad8
 23f858c:	00000028 	.word	0x00000028

023f8590 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23f8590:	b509      	push	{r0, r3, lr}
 23f8592:	4804      	ldr	r0, [pc, #16]	; (23f85a4 <network_is_on+0x14>)
 23f8594:	6800      	ldr	r0, [r0, #0]
 23f8596:	4b04      	ldr	r3, [pc, #16]	; (23f85a8 <network_is_on+0x18>)
 23f8598:	4403      	add	r3, r0
 23f859a:	681b      	ldr	r3, [r3, #0]
 23f859c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f859e:	9302      	str	r3, [sp, #8]
 23f85a0:	bd09      	pop	{r0, r3, pc}
 23f85a2:	0000      	.short	0x0000
 23f85a4:	1007aad8 	.word	0x1007aad8
 23f85a8:	00000028 	.word	0x00000028

023f85ac <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23f85ac:	b509      	push	{r0, r3, lr}
 23f85ae:	4804      	ldr	r0, [pc, #16]	; (23f85c0 <network_is_off+0x14>)
 23f85b0:	6800      	ldr	r0, [r0, #0]
 23f85b2:	4b04      	ldr	r3, [pc, #16]	; (23f85c4 <network_is_off+0x18>)
 23f85b4:	4403      	add	r3, r0
 23f85b6:	681b      	ldr	r3, [r3, #0]
 23f85b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f85ba:	9302      	str	r3, [sp, #8]
 23f85bc:	bd09      	pop	{r0, r3, pc}
 23f85be:	0000      	.short	0x0000
 23f85c0:	1007aad8 	.word	0x1007aad8
 23f85c4:	00000028 	.word	0x00000028

023f85c8 <network_preferred>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_preferred, network_handle_t(network_handle_t, bool, void*))
 23f85c8:	b509      	push	{r0, r3, lr}
 23f85ca:	4804      	ldr	r0, [pc, #16]	; (23f85dc <network_preferred+0x14>)
 23f85cc:	6800      	ldr	r0, [r0, #0]
 23f85ce:	4b04      	ldr	r3, [pc, #16]	; (23f85e0 <network_preferred+0x18>)
 23f85d0:	4403      	add	r3, r0
 23f85d2:	681b      	ldr	r3, [r3, #0]
 23f85d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f85d6:	9302      	str	r3, [sp, #8]
 23f85d8:	bd09      	pop	{r0, r3, pc}
 23f85da:	0000      	.short	0x0000
 23f85dc:	1007aad8 	.word	0x1007aad8
 23f85e0:	00000028 	.word	0x00000028

023f85e4 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23f85e4:	b509      	push	{r0, r3, lr}
 23f85e6:	4804      	ldr	r0, [pc, #16]	; (23f85f8 <network_is_preferred+0x14>)
 23f85e8:	6800      	ldr	r0, [r0, #0]
 23f85ea:	4b04      	ldr	r3, [pc, #16]	; (23f85fc <network_is_preferred+0x18>)
 23f85ec:	4403      	add	r3, r0
 23f85ee:	681b      	ldr	r3, [r3, #0]
 23f85f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f85f2:	9302      	str	r3, [sp, #8]
 23f85f4:	bd09      	pop	{r0, r3, pc}
 23f85f6:	0000      	.short	0x0000
 23f85f8:	1007aad8 	.word	0x1007aad8
 23f85fc:	00000028 	.word	0x00000028

023f8600 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23f8600:	b509      	push	{r0, r3, lr}
 23f8602:	4804      	ldr	r0, [pc, #16]	; (23f8614 <malloc+0x14>)
 23f8604:	6800      	ldr	r0, [r0, #0]
 23f8606:	4b04      	ldr	r3, [pc, #16]	; (23f8618 <malloc+0x18>)
 23f8608:	4403      	add	r3, r0
 23f860a:	681b      	ldr	r3, [r3, #0]
 23f860c:	681b      	ldr	r3, [r3, #0]
 23f860e:	9302      	str	r3, [sp, #8]
 23f8610:	bd09      	pop	{r0, r3, pc}
 23f8612:	0000      	.short	0x0000
 23f8614:	1007aad8 	.word	0x1007aad8
 23f8618:	00000004 	.word	0x00000004

023f861c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23f861c:	b509      	push	{r0, r3, lr}
 23f861e:	4804      	ldr	r0, [pc, #16]	; (23f8630 <free+0x14>)
 23f8620:	6800      	ldr	r0, [r0, #0]
 23f8622:	4b04      	ldr	r3, [pc, #16]	; (23f8634 <free+0x18>)
 23f8624:	4403      	add	r3, r0
 23f8626:	681b      	ldr	r3, [r3, #0]
 23f8628:	685b      	ldr	r3, [r3, #4]
 23f862a:	9302      	str	r3, [sp, #8]
 23f862c:	bd09      	pop	{r0, r3, pc}
 23f862e:	0000      	.short	0x0000
 23f8630:	1007aad8 	.word	0x1007aad8
 23f8634:	00000004 	.word	0x00000004

023f8638 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23f8638:	b509      	push	{r0, r3, lr}
 23f863a:	4804      	ldr	r0, [pc, #16]	; (23f864c <realloc+0x14>)
 23f863c:	6800      	ldr	r0, [r0, #0]
 23f863e:	4b04      	ldr	r3, [pc, #16]	; (23f8650 <realloc+0x18>)
 23f8640:	4403      	add	r3, r0
 23f8642:	681b      	ldr	r3, [r3, #0]
 23f8644:	689b      	ldr	r3, [r3, #8]
 23f8646:	9302      	str	r3, [sp, #8]
 23f8648:	bd09      	pop	{r0, r3, pc}
 23f864a:	0000      	.short	0x0000
 23f864c:	1007aad8 	.word	0x1007aad8
 23f8650:	00000004 	.word	0x00000004

023f8654 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 23f8654:	b509      	push	{r0, r3, lr}
 23f8656:	4804      	ldr	r0, [pc, #16]	; (23f8668 <siprintf+0x14>)
 23f8658:	6800      	ldr	r0, [r0, #0]
 23f865a:	4b04      	ldr	r3, [pc, #16]	; (23f866c <siprintf+0x18>)
 23f865c:	4403      	add	r3, r0
 23f865e:	681b      	ldr	r3, [r3, #0]
 23f8660:	691b      	ldr	r3, [r3, #16]
 23f8662:	9302      	str	r3, [sp, #8]
 23f8664:	bd09      	pop	{r0, r3, pc}
 23f8666:	0000      	.short	0x0000
 23f8668:	1007aad8 	.word	0x1007aad8
 23f866c:	00000004 	.word	0x00000004

023f8670 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 23f8670:	b509      	push	{r0, r3, lr}
 23f8672:	4804      	ldr	r0, [pc, #16]	; (23f8684 <snprintf+0x14>)
 23f8674:	6800      	ldr	r0, [r0, #0]
 23f8676:	4b04      	ldr	r3, [pc, #16]	; (23f8688 <snprintf+0x18>)
 23f8678:	4403      	add	r3, r0
 23f867a:	681b      	ldr	r3, [r3, #0]
 23f867c:	69db      	ldr	r3, [r3, #28]
 23f867e:	9302      	str	r3, [sp, #8]
 23f8680:	bd09      	pop	{r0, r3, pc}
 23f8682:	0000      	.short	0x0000
 23f8684:	1007aad8 	.word	0x1007aad8
 23f8688:	00000004 	.word	0x00000004

023f868c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23f868c:	b509      	push	{r0, r3, lr}
 23f868e:	4804      	ldr	r0, [pc, #16]	; (23f86a0 <vsnprintf+0x14>)
 23f8690:	6800      	ldr	r0, [r0, #0]
 23f8692:	4b04      	ldr	r3, [pc, #16]	; (23f86a4 <vsnprintf+0x18>)
 23f8694:	4403      	add	r3, r0
 23f8696:	681b      	ldr	r3, [r3, #0]
 23f8698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f869a:	9302      	str	r3, [sp, #8]
 23f869c:	bd09      	pop	{r0, r3, pc}
 23f869e:	0000      	.short	0x0000
 23f86a0:	1007aad8 	.word	0x1007aad8
 23f86a4:	00000004 	.word	0x00000004

023f86a8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23f86a8:	b509      	push	{r0, r3, lr}
 23f86aa:	4804      	ldr	r0, [pc, #16]	; (23f86bc <abort+0x14>)
 23f86ac:	6800      	ldr	r0, [r0, #0]
 23f86ae:	4b04      	ldr	r3, [pc, #16]	; (23f86c0 <abort+0x18>)
 23f86b0:	4403      	add	r3, r0
 23f86b2:	681b      	ldr	r3, [r3, #0]
 23f86b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f86b6:	9302      	str	r3, [sp, #8]
 23f86b8:	bd09      	pop	{r0, r3, pc}
 23f86ba:	0000      	.short	0x0000
 23f86bc:	1007aad8 	.word	0x1007aad8
 23f86c0:	00000004 	.word	0x00000004

023f86c4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23f86c4:	b509      	push	{r0, r3, lr}
 23f86c6:	4804      	ldr	r0, [pc, #16]	; (23f86d8 <_malloc_r+0x14>)
 23f86c8:	6800      	ldr	r0, [r0, #0]
 23f86ca:	4b04      	ldr	r3, [pc, #16]	; (23f86dc <_malloc_r+0x18>)
 23f86cc:	4403      	add	r3, r0
 23f86ce:	681b      	ldr	r3, [r3, #0]
 23f86d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f86d2:	9302      	str	r3, [sp, #8]
 23f86d4:	bd09      	pop	{r0, r3, pc}
 23f86d6:	0000      	.short	0x0000
 23f86d8:	1007aad8 	.word	0x1007aad8
 23f86dc:	00000004 	.word	0x00000004

023f86e0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23f86e0:	b509      	push	{r0, r3, lr}
 23f86e2:	4804      	ldr	r0, [pc, #16]	; (23f86f4 <__errno+0x14>)
 23f86e4:	6800      	ldr	r0, [r0, #0]
 23f86e6:	4b04      	ldr	r3, [pc, #16]	; (23f86f8 <__errno+0x18>)
 23f86e8:	4403      	add	r3, r0
 23f86ea:	681b      	ldr	r3, [r3, #0]
 23f86ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f86ee:	9302      	str	r3, [sp, #8]
 23f86f0:	bd09      	pop	{r0, r3, pc}
 23f86f2:	0000      	.short	0x0000
 23f86f4:	1007aad8 	.word	0x1007aad8
 23f86f8:	00000004 	.word	0x00000004

023f86fc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23f86fc:	b509      	push	{r0, r3, lr}
 23f86fe:	4804      	ldr	r0, [pc, #16]	; (23f8710 <__assert_func+0x14>)
 23f8700:	6800      	ldr	r0, [r0, #0]
 23f8702:	4b04      	ldr	r3, [pc, #16]	; (23f8714 <__assert_func+0x18>)
 23f8704:	4403      	add	r3, r0
 23f8706:	681b      	ldr	r3, [r3, #0]
 23f8708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f870a:	9302      	str	r3, [sp, #8]
 23f870c:	bd09      	pop	{r0, r3, pc}
 23f870e:	0000      	.short	0x0000
 23f8710:	1007aad8 	.word	0x1007aad8
 23f8714:	00000004 	.word	0x00000004

023f8718 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23f8718:	b509      	push	{r0, r3, lr}
 23f871a:	4804      	ldr	r0, [pc, #16]	; (23f872c <newlib_impure_ptr_callback+0x14>)
 23f871c:	6800      	ldr	r0, [r0, #0]
 23f871e:	4b04      	ldr	r3, [pc, #16]	; (23f8730 <newlib_impure_ptr_callback+0x18>)
 23f8720:	4403      	add	r3, r0
 23f8722:	681b      	ldr	r3, [r3, #0]
 23f8724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f8726:	9302      	str	r3, [sp, #8]
 23f8728:	bd09      	pop	{r0, r3, pc}
 23f872a:	0000      	.short	0x0000
 23f872c:	1007aad8 	.word	0x1007aad8
 23f8730:	00000004 	.word	0x00000004

023f8734 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 23f8734:	b509      	push	{r0, r3, lr}
 23f8736:	4804      	ldr	r0, [pc, #16]	; (23f8748 <strftime+0x14>)
 23f8738:	6800      	ldr	r0, [r0, #0]
 23f873a:	4b04      	ldr	r3, [pc, #16]	; (23f874c <strftime+0x18>)
 23f873c:	4403      	add	r3, r0
 23f873e:	681b      	ldr	r3, [r3, #0]
 23f8740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f8742:	9302      	str	r3, [sp, #8]
 23f8744:	bd09      	pop	{r0, r3, pc}
 23f8746:	0000      	.short	0x0000
 23f8748:	1007aad8 	.word	0x1007aad8
 23f874c:	00000004 	.word	0x00000004

023f8750 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
 23f8750:	b509      	push	{r0, r3, lr}
 23f8752:	4804      	ldr	r0, [pc, #16]	; (23f8764 <localtime_r+0x14>)
 23f8754:	6800      	ldr	r0, [r0, #0]
 23f8756:	4b04      	ldr	r3, [pc, #16]	; (23f8768 <localtime_r+0x18>)
 23f8758:	4403      	add	r3, r0
 23f875a:	681b      	ldr	r3, [r3, #0]
 23f875c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f875e:	9302      	str	r3, [sp, #8]
 23f8760:	bd09      	pop	{r0, r3, pc}
 23f8762:	0000      	.short	0x0000
 23f8764:	1007aad8 	.word	0x1007aad8
 23f8768:	00000004 	.word	0x00000004

023f876c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23f876c:	2100      	movs	r1, #0
 23f876e:	f7ff bdb1 	b.w	23f82d4 <system_delay_ms>

023f8772 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23f8772:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23f8774:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23f8776:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23f8778:	b17c      	cbz	r4, 23f879a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23f877a:	6863      	ldr	r3, [r4, #4]
 23f877c:	3b01      	subs	r3, #1
 23f877e:	6063      	str	r3, [r4, #4]
 23f8780:	b95b      	cbnz	r3, 23f879a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23f8782:	6823      	ldr	r3, [r4, #0]
 23f8784:	4620      	mov	r0, r4
 23f8786:	689b      	ldr	r3, [r3, #8]
 23f8788:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f878a:	68a3      	ldr	r3, [r4, #8]
 23f878c:	3b01      	subs	r3, #1
 23f878e:	60a3      	str	r3, [r4, #8]
 23f8790:	b91b      	cbnz	r3, 23f879a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23f8792:	6823      	ldr	r3, [r4, #0]
 23f8794:	4620      	mov	r0, r4
 23f8796:	68db      	ldr	r3, [r3, #12]
 23f8798:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23f879a:	4628      	mov	r0, r5
 23f879c:	bd38      	pop	{r3, r4, r5, pc}

023f879e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23f879e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23f87a0:	6843      	ldr	r3, [r0, #4]
    {
 23f87a2:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23f87a4:	3b01      	subs	r3, #1
 23f87a6:	6043      	str	r3, [r0, #4]
 23f87a8:	b963      	cbnz	r3, 23f87c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23f87aa:	6803      	ldr	r3, [r0, #0]
 23f87ac:	689b      	ldr	r3, [r3, #8]
 23f87ae:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f87b0:	68a3      	ldr	r3, [r4, #8]
 23f87b2:	3b01      	subs	r3, #1
 23f87b4:	60a3      	str	r3, [r4, #8]
 23f87b6:	b92b      	cbnz	r3, 23f87c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23f87b8:	6823      	ldr	r3, [r4, #0]
 23f87ba:	4620      	mov	r0, r4
    }
 23f87bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23f87c0:	68db      	ldr	r3, [r3, #12]
 23f87c2:	4718      	bx	r3
    }
 23f87c4:	bd10      	pop	{r4, pc}

023f87c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f87c6:	b570      	push	{r4, r5, r6, lr}
 23f87c8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f87ca:	e9d0 5300 	ldrd	r5, r3, [r0]
 23f87ce:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23f87d2:	42ae      	cmp	r6, r5
 23f87d4:	d004      	beq.n	23f87e0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23f87d6:	4628      	mov	r0, r5
 23f87d8:	f001 fd26 	bl	23fa228 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23f87dc:	3510      	adds	r5, #16
 23f87de:	e7f8      	b.n	23f87d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23f87e0:	6820      	ldr	r0, [r4, #0]
 23f87e2:	f7ff ff1b 	bl	23f861c <free>
    AllocatorT::free(data_);
}
 23f87e6:	4620      	mov	r0, r4
 23f87e8:	bd70      	pop	{r4, r5, r6, pc}
	...

023f87ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23f87ec:	2300      	movs	r3, #0
 23f87ee:	4802      	ldr	r0, [pc, #8]	; (23f87f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23f87f0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23f87f2:	f7ff b97f 	b.w	23f7af4 <os_mutex_recursive_create>
 23f87f6:	bf00      	nop
 23f87f8:	1007ae08 	.word	0x1007ae08

023f87fc <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 23f87fc:	b510      	push	{r4, lr}
 23f87fe:	b088      	sub	sp, #32
 23f8800:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 23f8802:	4668      	mov	r0, sp
 23f8804:	f001 fd5b 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 23f8808:	4669      	mov	r1, sp
 23f880a:	a804      	add	r0, sp, #16
 23f880c:	f001 fda3 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f8810:	a804      	add	r0, sp, #16
 23f8812:	47a0      	blx	r4
 23f8814:	4604      	mov	r4, r0
 23f8816:	a804      	add	r0, sp, #16
 23f8818:	f001 fd06 	bl	23fa228 <_ZN6StringD1Ev>
    String p(param);
 23f881c:	4668      	mov	r0, sp
 23f881e:	f001 fd03 	bl	23fa228 <_ZN6StringD1Ev>
}
 23f8822:	4620      	mov	r0, r4
 23f8824:	b008      	add	sp, #32
 23f8826:	bd10      	pop	{r4, pc}

023f8828 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 23f8828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 23f882a:	2300      	movs	r3, #0
         size = sizeof(*this);
 23f882c:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 23f882e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 23f8832:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 23f8834:	4669      	mov	r1, sp
 23f8836:	461a      	mov	r2, r3
 23f8838:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 23f883a:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 23f883e:	f8ad 4000 	strh.w	r4, [sp]
 23f8842:	f7ff fdb7 	bl	23f83b4 <spark_function>
}
 23f8846:	b004      	add	sp, #16
 23f8848:	bd10      	pop	{r4, pc}

023f884a <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f884a:	2200      	movs	r2, #0
 23f884c:	6840      	ldr	r0, [r0, #4]
 23f884e:	4611      	mov	r1, r2
 23f8850:	f7ff be66 	b.w	23f8520 <network_listening>

023f8854 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f8854:	2200      	movs	r2, #0
 23f8856:	6840      	ldr	r0, [r0, #4]
 23f8858:	4611      	mov	r1, r2
 23f885a:	f7ff be8b 	b.w	23f8574 <network_get_listen_timeout>

023f885e <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f885e:	2200      	movs	r2, #0
 23f8860:	6840      	ldr	r0, [r0, #4]
 23f8862:	f7ff be79 	b.w	23f8558 <network_set_listen_timeout>

023f8866 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f8866:	2200      	movs	r2, #0
 23f8868:	6840      	ldr	r0, [r0, #4]
 23f886a:	f081 0101 	eor.w	r1, r1, #1
 23f886e:	f7ff be49 	b.w	23f8504 <network_listen>

023f8872 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f8872:	2300      	movs	r3, #0
 23f8874:	6840      	ldr	r0, [r0, #4]
 23f8876:	461a      	mov	r2, r3
 23f8878:	4619      	mov	r1, r3
 23f887a:	f7ff be35 	b.w	23f84e8 <network_off>

023f887e <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f887e:	2300      	movs	r3, #0
 23f8880:	6840      	ldr	r0, [r0, #4]
 23f8882:	461a      	mov	r2, r3
 23f8884:	4619      	mov	r1, r3
 23f8886:	f7ff be21 	b.w	23f84cc <network_on>

023f888a <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23f888a:	2200      	movs	r2, #0
 23f888c:	6840      	ldr	r0, [r0, #4]
 23f888e:	4611      	mov	r1, r2
 23f8890:	f7ff be0e 	b.w	23f84b0 <network_ready>

023f8894 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f8894:	2200      	movs	r2, #0
 23f8896:	6840      	ldr	r0, [r0, #4]
 23f8898:	4611      	mov	r1, r2
 23f889a:	f7ff bded 	b.w	23f8478 <network_connecting>

023f889e <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f889e:	2200      	movs	r2, #0
 23f88a0:	2102      	movs	r1, #2
 23f88a2:	6840      	ldr	r0, [r0, #4]
 23f88a4:	f7ff bdf6 	b.w	23f8494 <network_disconnect>

023f88a8 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f88a8:	2300      	movs	r3, #0
 23f88aa:	6840      	ldr	r0, [r0, #4]
 23f88ac:	461a      	mov	r2, r3
 23f88ae:	f7ff bdd5 	b.w	23f845c <network_connect>
	...

023f88b4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23f88b4:	2203      	movs	r2, #3
 23f88b6:	4b02      	ldr	r3, [pc, #8]	; (23f88c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23f88b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23f88ba:	4a02      	ldr	r2, [pc, #8]	; (23f88c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23f88bc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23f88be:	4770      	bx	lr
 23f88c0:	1007ae0c 	.word	0x1007ae0c
 23f88c4:	023ff7b8 	.word	0x023ff7b8

023f88c8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23f88c8:	4770      	bx	lr

023f88ca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23f88ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f88cc:	4606      	mov	r6, r0
 23f88ce:	4615      	mov	r5, r2
 23f88d0:	460c      	mov	r4, r1
 23f88d2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23f88d4:	42bc      	cmp	r4, r7
 23f88d6:	d006      	beq.n	23f88e6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23f88d8:	6833      	ldr	r3, [r6, #0]
 23f88da:	4630      	mov	r0, r6
 23f88dc:	689b      	ldr	r3, [r3, #8]
 23f88de:	f814 1b01 	ldrb.w	r1, [r4], #1
 23f88e2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23f88e4:	e7f6      	b.n	23f88d4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23f88e6:	4628      	mov	r0, r5
 23f88e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f88ea <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23f88ea:	2200      	movs	r2, #0
 23f88ec:	7c00      	ldrb	r0, [r0, #16]
 23f88ee:	f7ff ba0b 	b.w	23f7d08 <hal_i2c_write>

023f88f2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23f88f2:	2100      	movs	r1, #0
 23f88f4:	7c00      	ldrb	r0, [r0, #16]
 23f88f6:	f7ff ba15 	b.w	23f7d24 <hal_i2c_available>

023f88fa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23f88fa:	2100      	movs	r1, #0
 23f88fc:	7c00      	ldrb	r0, [r0, #16]
 23f88fe:	f7ff ba1f 	b.w	23f7d40 <hal_i2c_read>

023f8902 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23f8902:	2100      	movs	r1, #0
 23f8904:	7c00      	ldrb	r0, [r0, #16]
 23f8906:	f7ff ba29 	b.w	23f7d5c <hal_i2c_peek>

023f890a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23f890a:	2100      	movs	r1, #0
 23f890c:	7c00      	ldrb	r0, [r0, #16]
 23f890e:	f7ff ba33 	b.w	23f7d78 <hal_i2c_flush>

023f8912 <_ZN7TwoWireD0Ev>:
 23f8912:	b510      	push	{r4, lr}
 23f8914:	4604      	mov	r4, r0
 23f8916:	2114      	movs	r1, #20
 23f8918:	f7fb f811 	bl	23f393e <_ZdlPvj>
 23f891c:	4620      	mov	r0, r4
 23f891e:	bd10      	pop	{r4, pc}

023f8920 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23f8920:	b538      	push	{r3, r4, r5, lr}
 23f8922:	4604      	mov	r4, r0
 23f8924:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23f8926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f892a:	2200      	movs	r2, #0
 23f892c:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23f8930:	4b09      	ldr	r3, [pc, #36]	; (23f8958 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23f8932:	4608      	mov	r0, r1
  _i2c = i2c;
 23f8934:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23f8936:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23f8938:	4629      	mov	r1, r5
 23f893a:	f7ff fa39 	bl	23f7db0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23f893e:	30bf      	adds	r0, #191	; 0xbf
 23f8940:	d108      	bne.n	23f8954 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23f8942:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23f8944:	07db      	lsls	r3, r3, #31
 23f8946:	d505      	bpl.n	23f8954 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23f8948:	6868      	ldr	r0, [r5, #4]
 23f894a:	f7ff fe67 	bl	23f861c <free>
    free(conf.tx_buffer);
 23f894e:	68e8      	ldr	r0, [r5, #12]
 23f8950:	f7ff fe64 	bl	23f861c <free>
}
 23f8954:	4620      	mov	r0, r4
 23f8956:	bd38      	pop	{r3, r4, r5, pc}
 23f8958:	023ff7fc 	.word	0x023ff7fc

023f895c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23f895c:	2300      	movs	r3, #0
 23f895e:	7c00      	ldrb	r0, [r0, #16]
 23f8960:	461a      	mov	r2, r3
 23f8962:	4619      	mov	r1, r3
 23f8964:	f7ff b9a6 	b.w	23f7cb4 <hal_i2c_begin>

023f8968 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23f8968:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 23f896a:	2200      	movs	r2, #0
 23f896c:	2314      	movs	r3, #20
 23f896e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 23f8972:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 23f8976:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23f8978:	7c00      	ldrb	r0, [r0, #16]
 23f897a:	f88d 3008 	strb.w	r3, [sp, #8]
 23f897e:	684b      	ldr	r3, [r1, #4]
 23f8980:	9303      	str	r3, [sp, #12]
 23f8982:	68cb      	ldr	r3, [r1, #12]
 23f8984:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 23f8986:	7a0b      	ldrb	r3, [r1, #8]
 23f8988:	a901      	add	r1, sp, #4
 23f898a:	9305      	str	r3, [sp, #20]
 23f898c:	f7ff fa2c 	bl	23f7de8 <hal_i2c_request_ex>
}
 23f8990:	b007      	add	sp, #28
 23f8992:	f85d fb04 	ldr.w	pc, [sp], #4

023f8996 <_ZN7TwoWire11requestFromEhjh>:
{
 23f8996:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23f8998:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 23f899a:	f88d 1000 	strb.w	r1, [sp]
 23f899e:	f04f 0164 	mov.w	r1, #100	; 0x64
 23f89a2:	bf18      	it	ne
 23f89a4:	2301      	movne	r3, #1
 23f89a6:	9103      	str	r1, [sp, #12]
 23f89a8:	4669      	mov	r1, sp
    size_ = size;
 23f89aa:	9201      	str	r2, [sp, #4]
 23f89ac:	f88d 3008 	strb.w	r3, [sp, #8]
 23f89b0:	f7ff ffda 	bl	23f8968 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23f89b4:	b005      	add	sp, #20
 23f89b6:	f85d fb04 	ldr.w	pc, [sp], #4

023f89ba <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 23f89ba:	2301      	movs	r3, #1
 23f89bc:	f7ff bfeb 	b.w	23f8996 <_ZN7TwoWire11requestFromEhjh>

023f89c0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23f89c0:	2200      	movs	r2, #0
 23f89c2:	7c00      	ldrb	r0, [r0, #16]
 23f89c4:	f7ff b984 	b.w	23f7cd0 <hal_i2c_begin_transmission>

023f89c8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 23f89c8:	b2c9      	uxtb	r1, r1
 23f89ca:	f7ff bff9 	b.w	23f89c0 <_ZN7TwoWire17beginTransmissionEh>

023f89ce <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23f89ce:	2200      	movs	r2, #0
 23f89d0:	7c00      	ldrb	r0, [r0, #16]
 23f89d2:	f7ff b98b 	b.w	23f7cec <hal_i2c_end_transmission>

023f89d6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23f89d6:	2101      	movs	r1, #1
 23f89d8:	f7ff bff9 	b.w	23f89ce <_ZN7TwoWire15endTransmissionEh>

023f89dc <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
 23f89dc:	2100      	movs	r1, #0
 23f89de:	7c00      	ldrb	r0, [r0, #16]
 23f89e0:	f7ff b9d8 	b.w	23f7d94 <hal_i2c_is_enabled>

023f89e4 <_ZN7TwoWire5resetEv>:
}

int TwoWire::reset()
{
  return hal_i2c_reset(_i2c, 0, NULL);
 23f89e4:	2200      	movs	r2, #0
 23f89e6:	7c00      	ldrb	r0, [r0, #16]
 23f89e8:	4611      	mov	r1, r2
 23f89ea:	f7ff b9ef 	b.w	23f7dcc <hal_i2c_reset>

023f89ee <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23f89ee:	4770      	bx	lr

023f89f0 <_ZN9IPAddressD0Ev>:
 23f89f0:	b510      	push	{r4, lr}
 23f89f2:	4604      	mov	r4, r0
 23f89f4:	2118      	movs	r1, #24
 23f89f6:	f7fa ffa2 	bl	23f393e <_ZdlPvj>
 23f89fa:	4620      	mov	r0, r4
 23f89fc:	bd10      	pop	{r4, pc}

023f89fe <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23f89fe:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23f8a00:	7d03      	ldrb	r3, [r0, #20]
{
 23f8a02:	460e      	mov	r6, r1
	if (address.v==6) {
 23f8a04:	2b06      	cmp	r3, #6
 23f8a06:	f04f 0400 	mov.w	r4, #0
{
 23f8a0a:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f8a0c:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23f8a10:	d012      	beq.n	23f8a38 <_ZNK9IPAddress7printToER5Print+0x3a>
 23f8a12:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23f8a16:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23f8a1a:	220a      	movs	r2, #10
 23f8a1c:	4630      	mov	r0, r6
 23f8a1e:	f001 fb74 	bl	23fa10a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23f8a22:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23f8a24:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23f8a26:	d019      	beq.n	23f8a5c <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23f8a28:	2c00      	cmp	r4, #0
 23f8a2a:	d0f4      	beq.n	23f8a16 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23f8a2c:	212e      	movs	r1, #46	; 0x2e
 23f8a2e:	4630      	mov	r0, r6
 23f8a30:	f001 fb68 	bl	23fa104 <_ZN5Print5printEc>
 23f8a34:	4404      	add	r4, r0
 23f8a36:	e7ee      	b.n	23f8a16 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f8a38:	232f      	movs	r3, #47	; 0x2f
 23f8a3a:	466a      	mov	r2, sp
 23f8a3c:	4639      	mov	r1, r7
 23f8a3e:	200a      	movs	r0, #10
		buf[0] = 0;
 23f8a40:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f8a44:	f7ff f9ec 	bl	23f7e20 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23f8a48:	4668      	mov	r0, sp
 23f8a4a:	f7fa ff35 	bl	23f38b8 <strlen>
 23f8a4e:	6833      	ldr	r3, [r6, #0]
 23f8a50:	4602      	mov	r2, r0
 23f8a52:	4669      	mov	r1, sp
 23f8a54:	4630      	mov	r0, r6
 23f8a56:	68db      	ldr	r3, [r3, #12]
 23f8a58:	4798      	blx	r3
 23f8a5a:	4604      	mov	r4, r0
    }
    return n;
}
 23f8a5c:	4620      	mov	r0, r4
 23f8a5e:	b00d      	add	sp, #52	; 0x34
 23f8a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023f8a64 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23f8a64:	b510      	push	{r4, lr}
 23f8a66:	4604      	mov	r4, r0
 23f8a68:	4b04      	ldr	r3, [pc, #16]	; (23f8a7c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23f8a6a:	2211      	movs	r2, #17
 23f8a6c:	2100      	movs	r1, #0
 23f8a6e:	f840 3b04 	str.w	r3, [r0], #4
 23f8a72:	f004 f8fc 	bl	23fcc6e <memset>
}
 23f8a76:	4620      	mov	r0, r4
 23f8a78:	bd10      	pop	{r4, pc}
 23f8a7a:	bf00      	nop
 23f8a7c:	023ff824 	.word	0x023ff824

023f8a80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23f8a80:	4603      	mov	r3, r0
 23f8a82:	4a07      	ldr	r2, [pc, #28]	; (23f8aa0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23f8a84:	b510      	push	{r4, lr}
 23f8a86:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23f8a8a:	f101 0210 	add.w	r2, r1, #16
 23f8a8e:	f851 4b04 	ldr.w	r4, [r1], #4
 23f8a92:	4291      	cmp	r1, r2
 23f8a94:	f843 4b04 	str.w	r4, [r3], #4
 23f8a98:	d1f9      	bne.n	23f8a8e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23f8a9a:	780a      	ldrb	r2, [r1, #0]
 23f8a9c:	701a      	strb	r2, [r3, #0]
}
 23f8a9e:	bd10      	pop	{r4, pc}
 23f8aa0:	023ff824 	.word	0x023ff824

023f8aa4 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
 23f8aa4:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
 23f8aa6:	2b04      	cmp	r3, #4
 23f8aa8:	d104      	bne.n	23f8ab4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
 23f8aaa:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23f8aac:	3800      	subs	r0, #0
 23f8aae:	bf18      	it	ne
 23f8ab0:	2001      	movne	r0, #1
 23f8ab2:	4770      	bx	lr
    } else if (version() == 6) {
 23f8ab4:	2b06      	cmp	r3, #6
 23f8ab6:	d107      	bne.n	23f8ac8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23f8ab8:	6843      	ldr	r3, [r0, #4]
 23f8aba:	b93b      	cbnz	r3, 23f8acc <_ZNK9IPAddresscvbEv+0x28>
 23f8abc:	6883      	ldr	r3, [r0, #8]
 23f8abe:	b92b      	cbnz	r3, 23f8acc <_ZNK9IPAddresscvbEv+0x28>
 23f8ac0:	68c3      	ldr	r3, [r0, #12]
 23f8ac2:	b91b      	cbnz	r3, 23f8acc <_ZNK9IPAddresscvbEv+0x28>
 23f8ac4:	6900      	ldr	r0, [r0, #16]
 23f8ac6:	e7f1      	b.n	23f8aac <_ZNK9IPAddresscvbEv+0x8>
        return false;
 23f8ac8:	2000      	movs	r0, #0
 23f8aca:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23f8acc:	2001      	movs	r0, #1
}
 23f8ace:	4770      	bx	lr

023f8ad0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23f8ad0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23f8ad2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23f8ad6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23f8ada:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23f8ade:	2304      	movs	r3, #4
 23f8ae0:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23f8ae4:	6041      	str	r1, [r0, #4]
 23f8ae6:	7503      	strb	r3, [r0, #20]
}
 23f8ae8:	bd10      	pop	{r4, pc}
	...

023f8aec <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23f8aec:	b507      	push	{r0, r1, r2, lr}
 23f8aee:	4b06      	ldr	r3, [pc, #24]	; (23f8b08 <_ZN9IPAddressC1EPKh+0x1c>)
 23f8af0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23f8af2:	78cb      	ldrb	r3, [r1, #3]
 23f8af4:	9300      	str	r3, [sp, #0]
 23f8af6:	788b      	ldrb	r3, [r1, #2]
 23f8af8:	784a      	ldrb	r2, [r1, #1]
 23f8afa:	7809      	ldrb	r1, [r1, #0]
 23f8afc:	f7ff ffe8 	bl	23f8ad0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23f8b00:	b003      	add	sp, #12
 23f8b02:	f85d fb04 	ldr.w	pc, [sp], #4
 23f8b06:	bf00      	nop
 23f8b08:	023ff824 	.word	0x023ff824

023f8b0c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23f8b0c:	2201      	movs	r2, #1
 23f8b0e:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23f8b12:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23f8b16:	4618      	mov	r0, r3
 23f8b18:	2901      	cmp	r1, #1
 23f8b1a:	d108      	bne.n	23f8b2e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23f8b1c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23f8b20:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23f8b24:	3a01      	subs	r2, #1
 23f8b26:	f103 0310 	add.w	r3, r3, #16
 23f8b2a:	d1f2      	bne.n	23f8b12 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23f8b2c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23f8b2e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23f8b30:	bf04      	itt	eq
 23f8b32:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23f8b36:	1852      	addeq	r2, r2, r1
 23f8b38:	e7f4      	b.n	23f8b24 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023f8b3a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23f8b3a:	b40e      	push	{r1, r2, r3}
 23f8b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f8b3e:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f8b40:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23f8b42:	af00      	add	r7, sp, #0
 23f8b44:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23f8b48:	f855 2b04 	ldr.w	r2, [r5], #4
 23f8b4c:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f8b4e:	462b      	mov	r3, r5
 23f8b50:	1878      	adds	r0, r7, r1
 23f8b52:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23f8b54:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f8b56:	f7ff fd99 	bl	23f868c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23f8b5a:	280f      	cmp	r0, #15
 23f8b5c:	687a      	ldr	r2, [r7, #4]
 23f8b5e:	d91a      	bls.n	23f8b96 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23f8b60:	f100 0308 	add.w	r3, r0, #8
 23f8b64:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23f8b68:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23f8b6a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f8b6e:	1c41      	adds	r1, r0, #1
 23f8b70:	462b      	mov	r3, r5
 23f8b72:	4668      	mov	r0, sp
        va_start(args, fmt);
 23f8b74:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f8b76:	f7ff fd89 	bl	23f868c <vsnprintf>
        if (n > 0) {
 23f8b7a:	1e02      	subs	r2, r0, #0
 23f8b7c:	dd04      	ble.n	23f8b88 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23f8b7e:	6823      	ldr	r3, [r4, #0]
 23f8b80:	4669      	mov	r1, sp
 23f8b82:	4620      	mov	r0, r4
 23f8b84:	689b      	ldr	r3, [r3, #8]
 23f8b86:	4798      	blx	r3
 23f8b88:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23f8b8a:	3720      	adds	r7, #32
 23f8b8c:	46bd      	mov	sp, r7
 23f8b8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23f8b92:	b003      	add	sp, #12
 23f8b94:	4770      	bx	lr
    } else if (n > 0) {
 23f8b96:	2800      	cmp	r0, #0
 23f8b98:	d0f7      	beq.n	23f8b8a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23f8b9a:	6823      	ldr	r3, [r4, #0]
 23f8b9c:	4602      	mov	r2, r0
 23f8b9e:	689b      	ldr	r3, [r3, #8]
 23f8ba0:	4620      	mov	r0, r4
 23f8ba2:	f107 0110 	add.w	r1, r7, #16
 23f8ba6:	4798      	blx	r3
}
 23f8ba8:	e7ef      	b.n	23f8b8a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023f8baa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f8baa:	b538      	push	{r3, r4, r5, lr}
 23f8bac:	680b      	ldr	r3, [r1, #0]
 23f8bae:	4604      	mov	r4, r0
 23f8bb0:	6003      	str	r3, [r0, #0]
 23f8bb2:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23f8bb4:	6843      	ldr	r3, [r0, #4]
 23f8bb6:	429d      	cmp	r5, r3
 23f8bb8:	d008      	beq.n	23f8bcc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23f8bba:	b115      	cbz	r5, 23f8bc2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23f8bbc:	686b      	ldr	r3, [r5, #4]
 23f8bbe:	3301      	adds	r3, #1
 23f8bc0:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23f8bc2:	6860      	ldr	r0, [r4, #4]
 23f8bc4:	b108      	cbz	r0, 23f8bca <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23f8bc6:	f7ff fdea 	bl	23f879e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23f8bca:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f8bcc:	bd38      	pop	{r3, r4, r5, pc}

023f8bce <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23f8bce:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23f8bd0:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23f8bd2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23f8bd6:	2201      	movs	r2, #1
 23f8bd8:	689b      	ldr	r3, [r3, #8]
 23f8bda:	f10d 0107 	add.w	r1, sp, #7
 23f8bde:	4798      	blx	r3
}
 23f8be0:	b003      	add	sp, #12
 23f8be2:	f85d fb04 	ldr.w	pc, [sp], #4

023f8be6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f8be6:	460b      	mov	r3, r1
 23f8be8:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23f8bea:	2200      	movs	r2, #0
 23f8bec:	b510      	push	{r4, lr}
 23f8bee:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23f8bf0:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23f8bf4:	6083      	str	r3, [r0, #8]
    if (t) {
 23f8bf6:	b90b      	cbnz	r3, 23f8bfc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23f8bf8:	4620      	mov	r0, r4
 23f8bfa:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23f8bfc:	f7ff ffd5 	bl	23f8baa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23f8c00:	e7fa      	b.n	23f8bf8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023f8c02 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23f8c02:	6883      	ldr	r3, [r0, #8]
 23f8c04:	b1eb      	cbz	r3, 23f8c42 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23f8c06:	781a      	ldrb	r2, [r3, #0]
 23f8c08:	2a03      	cmp	r2, #3
 23f8c0a:	d81a      	bhi.n	23f8c42 <_ZNK5spark9JSONValue4typeEv+0x40>
 23f8c0c:	e8df f002 	tbb	[pc, r2]
 23f8c10:	1b021704 	.word	0x1b021704
 23f8c14:	2005      	movs	r0, #5
 23f8c16:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23f8c18:	6802      	ldr	r2, [r0, #0]
 23f8c1a:	685b      	ldr	r3, [r3, #4]
 23f8c1c:	6852      	ldr	r2, [r2, #4]
 23f8c1e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23f8c20:	282d      	cmp	r0, #45	; 0x2d
 23f8c22:	d012      	beq.n	23f8c4a <_ZNK5spark9JSONValue4typeEv+0x48>
 23f8c24:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23f8c28:	2b09      	cmp	r3, #9
 23f8c2a:	d90e      	bls.n	23f8c4a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23f8c2c:	2874      	cmp	r0, #116	; 0x74
 23f8c2e:	d00e      	beq.n	23f8c4e <_ZNK5spark9JSONValue4typeEv+0x4c>
 23f8c30:	2866      	cmp	r0, #102	; 0x66
 23f8c32:	d00c      	beq.n	23f8c4e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23f8c34:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23f8c38:	4258      	negs	r0, r3
 23f8c3a:	4158      	adcs	r0, r3
 23f8c3c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23f8c3e:	2006      	movs	r0, #6
 23f8c40:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23f8c42:	2000      	movs	r0, #0
 23f8c44:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23f8c46:	2004      	movs	r0, #4
 23f8c48:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23f8c4a:	2003      	movs	r0, #3
 23f8c4c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23f8c4e:	2002      	movs	r0, #2
}
 23f8c50:	4770      	bx	lr

023f8c52 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23f8c52:	b510      	push	{r4, lr}
 23f8c54:	4604      	mov	r4, r0
    switch (type()) {
 23f8c56:	f7ff ffd4 	bl	23f8c02 <_ZNK5spark9JSONValue4typeEv>
 23f8c5a:	2802      	cmp	r0, #2
 23f8c5c:	d00e      	beq.n	23f8c7c <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23f8c5e:	1ec3      	subs	r3, r0, #3
 23f8c60:	b2db      	uxtb	r3, r3
 23f8c62:	2b01      	cmp	r3, #1
 23f8c64:	d814      	bhi.n	23f8c90 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23f8c66:	6822      	ldr	r2, [r4, #0]
 23f8c68:	68a3      	ldr	r3, [r4, #8]
 23f8c6a:	6850      	ldr	r0, [r2, #4]
 23f8c6c:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23f8c6e:	220a      	movs	r2, #10
}
 23f8c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23f8c74:	2100      	movs	r1, #0
 23f8c76:	4418      	add	r0, r3
 23f8c78:	f004 bf36 	b.w	23fdae8 <strtol>
        const char* const s = d_->json + t_->start;
 23f8c7c:	6822      	ldr	r2, [r4, #0]
 23f8c7e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23f8c80:	6852      	ldr	r2, [r2, #4]
 23f8c82:	685b      	ldr	r3, [r3, #4]
 23f8c84:	5cd0      	ldrb	r0, [r2, r3]
 23f8c86:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23f8c8a:	4258      	negs	r0, r3
 23f8c8c:	4158      	adcs	r0, r3
}
 23f8c8e:	bd10      	pop	{r4, pc}
    switch (type()) {
 23f8c90:	2000      	movs	r0, #0
 23f8c92:	e7fc      	b.n	23f8c8e <_ZNK5spark9JSONValue5toIntEv+0x3c>

023f8c94 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f8c94:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23f8c96:	2300      	movs	r3, #0
 23f8c98:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23f8c9a:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23f8c9e:	480e      	ldr	r0, [pc, #56]	; (23f8cd8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23f8ca0:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23f8ca4:	b1a9      	cbz	r1, 23f8cd2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23f8ca6:	780b      	ldrb	r3, [r1, #0]
 23f8ca8:	2b03      	cmp	r3, #3
 23f8caa:	d006      	beq.n	23f8cba <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23f8cac:	b98b      	cbnz	r3, 23f8cd2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23f8cae:	6813      	ldr	r3, [r2, #0]
 23f8cb0:	6858      	ldr	r0, [r3, #4]
 23f8cb2:	684b      	ldr	r3, [r1, #4]
 23f8cb4:	5cc3      	ldrb	r3, [r0, r3]
 23f8cb6:	2b6e      	cmp	r3, #110	; 0x6e
 23f8cb8:	d007      	beq.n	23f8cca <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23f8cba:	6813      	ldr	r3, [r2, #0]
 23f8cbc:	684d      	ldr	r5, [r1, #4]
 23f8cbe:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23f8cc0:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23f8cc2:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23f8cc4:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23f8cc6:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23f8cc8:	60e3      	str	r3, [r4, #12]
 23f8cca:	4611      	mov	r1, r2
 23f8ccc:	4620      	mov	r0, r4
 23f8cce:	f7ff ff6c 	bl	23f8baa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23f8cd2:	4620      	mov	r0, r4
 23f8cd4:	bd38      	pop	{r3, r4, r5, pc}
 23f8cd6:	bf00      	nop
 23f8cd8:	023ff87d 	.word	0x023ff87d

023f8cdc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f8cdc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23f8cde:	2500      	movs	r5, #0
 23f8ce0:	460b      	mov	r3, r1
 23f8ce2:	4604      	mov	r4, r0
 23f8ce4:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23f8ce6:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23f8cea:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23f8cee:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23f8cf2:	b14b      	cbz	r3, 23f8d08 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23f8cf4:	781a      	ldrb	r2, [r3, #0]
 23f8cf6:	2a01      	cmp	r2, #1
 23f8cf8:	d106      	bne.n	23f8d08 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23f8cfa:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23f8cfe:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23f8d00:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23f8d02:	6143      	str	r3, [r0, #20]
 23f8d04:	f7ff ff51 	bl	23f8baa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23f8d08:	4620      	mov	r0, r4
 23f8d0a:	bd38      	pop	{r3, r4, r5, pc}

023f8d0c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23f8d0c:	b510      	push	{r4, lr}
    if (!n_) {
 23f8d0e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23f8d10:	4604      	mov	r4, r0
    if (!n_) {
 23f8d12:	b163      	cbz	r3, 23f8d2e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23f8d14:	6880      	ldr	r0, [r0, #8]
    --n_;
 23f8d16:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23f8d18:	60e0      	str	r0, [r4, #12]
    ++t_;
 23f8d1a:	3010      	adds	r0, #16
 23f8d1c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23f8d1e:	6120      	str	r0, [r4, #16]
    --n_;
 23f8d20:	6163      	str	r3, [r4, #20]
    if (n_) {
 23f8d22:	b113      	cbz	r3, 23f8d2a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23f8d24:	f7ff fef2 	bl	23f8b0c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23f8d28:	60a0      	str	r0, [r4, #8]
    return true;
 23f8d2a:	2001      	movs	r0, #1
 23f8d2c:	e000      	b.n	23f8d30 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23f8d2e:	4618      	mov	r0, r3
}
 23f8d30:	bd10      	pop	{r4, pc}

023f8d32 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f8d32:	b510      	push	{r4, lr}
    write('}');
 23f8d34:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f8d36:	4604      	mov	r4, r0
    write('}');
 23f8d38:	f7ff ff49 	bl	23f8bce <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23f8d3c:	2301      	movs	r3, #1
}
 23f8d3e:	4620      	mov	r0, r4
    state_ = NEXT;
 23f8d40:	7123      	strb	r3, [r4, #4]
}
 23f8d42:	bd10      	pop	{r4, pc}

023f8d44 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23f8d44:	b508      	push	{r3, lr}
    switch (state_) {
 23f8d46:	7903      	ldrb	r3, [r0, #4]
 23f8d48:	2b01      	cmp	r3, #1
 23f8d4a:	d002      	beq.n	23f8d52 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23f8d4c:	2b02      	cmp	r3, #2
 23f8d4e:	d004      	beq.n	23f8d5a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23f8d50:	bd08      	pop	{r3, pc}
        write(',');
 23f8d52:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23f8d54:	f7ff ff3b 	bl	23f8bce <_ZN5spark10JSONWriter5writeEc>
}
 23f8d58:	e7fa      	b.n	23f8d50 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23f8d5a:	213a      	movs	r1, #58	; 0x3a
 23f8d5c:	e7fa      	b.n	23f8d54 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023f8d5e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23f8d5e:	b510      	push	{r4, lr}
 23f8d60:	4604      	mov	r4, r0
    writeSeparator();
 23f8d62:	f7ff ffef 	bl	23f8d44 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23f8d66:	4620      	mov	r0, r4
 23f8d68:	217b      	movs	r1, #123	; 0x7b
 23f8d6a:	f7ff ff30 	bl	23f8bce <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23f8d6e:	2300      	movs	r3, #0
}
 23f8d70:	4620      	mov	r0, r4
    state_ = BEGIN;
 23f8d72:	7123      	strb	r3, [r4, #4]
}
 23f8d74:	bd10      	pop	{r4, pc}
	...

023f8d78 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23f8d78:	b513      	push	{r0, r1, r4, lr}
 23f8d7a:	4604      	mov	r4, r0
 23f8d7c:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f8d7e:	f7ff ffe1 	bl	23f8d44 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23f8d82:	6823      	ldr	r3, [r4, #0]
 23f8d84:	4620      	mov	r0, r4
 23f8d86:	68db      	ldr	r3, [r3, #12]
 23f8d88:	9a01      	ldr	r2, [sp, #4]
 23f8d8a:	4903      	ldr	r1, [pc, #12]	; (23f8d98 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23f8d8c:	4798      	blx	r3
    state_ = NEXT;
 23f8d8e:	2301      	movs	r3, #1
}
 23f8d90:	4620      	mov	r0, r4
    state_ = NEXT;
 23f8d92:	7123      	strb	r3, [r4, #4]
}
 23f8d94:	b002      	add	sp, #8
 23f8d96:	bd10      	pop	{r4, pc}
 23f8d98:	023ff6ee 	.word	0x023ff6ee

023f8d9c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23f8d9c:	b513      	push	{r0, r1, r4, lr}
 23f8d9e:	4604      	mov	r4, r0
 23f8da0:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f8da2:	f7ff ffcf 	bl	23f8d44 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23f8da6:	6823      	ldr	r3, [r4, #0]
 23f8da8:	4620      	mov	r0, r4
 23f8daa:	68db      	ldr	r3, [r3, #12]
 23f8dac:	9a01      	ldr	r2, [sp, #4]
 23f8dae:	4903      	ldr	r1, [pc, #12]	; (23f8dbc <_ZN5spark10JSONWriter5valueEj+0x20>)
 23f8db0:	4798      	blx	r3
    state_ = NEXT;
 23f8db2:	2301      	movs	r3, #1
}
 23f8db4:	4620      	mov	r0, r4
    state_ = NEXT;
 23f8db6:	7123      	strb	r3, [r4, #4]
}
 23f8db8:	b002      	add	sp, #8
 23f8dba:	bd10      	pop	{r4, pc}
 23f8dbc:	023ff830 	.word	0x023ff830

023f8dc0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f8dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f8dc4:	460d      	mov	r5, r1
 23f8dc6:	4690      	mov	r8, r2
    write('"');
 23f8dc8:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f8dca:	4604      	mov	r4, r0
 23f8dcc:	462f      	mov	r7, r5
    write('"');
 23f8dce:	f7ff fefe 	bl	23f8bce <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23f8dd2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23f8e78 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23f8dd6:	44a8      	add	r8, r5
    while (s != end) {
 23f8dd8:	4547      	cmp	r7, r8
 23f8dda:	46ba      	mov	sl, r7
 23f8ddc:	d03d      	beq.n	23f8e5a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23f8dde:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23f8de2:	2e22      	cmp	r6, #34	; 0x22
 23f8de4:	d006      	beq.n	23f8df4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f8de6:	2e5c      	cmp	r6, #92	; 0x5c
 23f8de8:	d004      	beq.n	23f8df4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f8dea:	4630      	mov	r0, r6
 23f8dec:	f003 ff08 	bl	23fcc00 <isprint>
 23f8df0:	2800      	cmp	r0, #0
 23f8df2:	d1f1      	bne.n	23f8dd8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23f8df4:	6823      	ldr	r3, [r4, #0]
 23f8df6:	4629      	mov	r1, r5
 23f8df8:	4620      	mov	r0, r4
 23f8dfa:	689b      	ldr	r3, [r3, #8]
 23f8dfc:	ebaa 0205 	sub.w	r2, sl, r5
 23f8e00:	4798      	blx	r3
            write('\\');
 23f8e02:	215c      	movs	r1, #92	; 0x5c
 23f8e04:	4620      	mov	r0, r4
 23f8e06:	f7ff fee2 	bl	23f8bce <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23f8e0a:	2e0d      	cmp	r6, #13
 23f8e0c:	d80a      	bhi.n	23f8e24 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23f8e0e:	2e07      	cmp	r6, #7
 23f8e10:	d91c      	bls.n	23f8e4c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f8e12:	f1a6 0308 	sub.w	r3, r6, #8
 23f8e16:	2b05      	cmp	r3, #5
 23f8e18:	d818      	bhi.n	23f8e4c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f8e1a:	e8df f003 	tbb	[pc, r3]
 23f8e1e:	0f0d      	.short	0x0f0d
 23f8e20:	15131711 	.word	0x15131711
 23f8e24:	2e22      	cmp	r6, #34	; 0x22
 23f8e26:	d001      	beq.n	23f8e2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23f8e28:	2e5c      	cmp	r6, #92	; 0x5c
 23f8e2a:	d10f      	bne.n	23f8e4c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23f8e2c:	4631      	mov	r1, r6
                write('b');
 23f8e2e:	4620      	mov	r0, r4
 23f8e30:	f7ff fecd 	bl	23f8bce <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23f8e34:	463d      	mov	r5, r7
    while (s != end) {
 23f8e36:	e7cf      	b.n	23f8dd8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23f8e38:	2162      	movs	r1, #98	; 0x62
 23f8e3a:	e7f8      	b.n	23f8e2e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23f8e3c:	2174      	movs	r1, #116	; 0x74
 23f8e3e:	e7f6      	b.n	23f8e2e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23f8e40:	216e      	movs	r1, #110	; 0x6e
 23f8e42:	e7f4      	b.n	23f8e2e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23f8e44:	2166      	movs	r1, #102	; 0x66
 23f8e46:	e7f2      	b.n	23f8e2e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23f8e48:	2172      	movs	r1, #114	; 0x72
 23f8e4a:	e7f0      	b.n	23f8e2e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23f8e4c:	6823      	ldr	r3, [r4, #0]
 23f8e4e:	4632      	mov	r2, r6
 23f8e50:	4649      	mov	r1, r9
 23f8e52:	4620      	mov	r0, r4
 23f8e54:	68db      	ldr	r3, [r3, #12]
 23f8e56:	4798      	blx	r3
                break;
 23f8e58:	e7ec      	b.n	23f8e34 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23f8e5a:	42bd      	cmp	r5, r7
 23f8e5c:	d005      	beq.n	23f8e6a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23f8e5e:	6823      	ldr	r3, [r4, #0]
 23f8e60:	4629      	mov	r1, r5
 23f8e62:	4620      	mov	r0, r4
 23f8e64:	689b      	ldr	r3, [r3, #8]
 23f8e66:	1b7a      	subs	r2, r7, r5
 23f8e68:	4798      	blx	r3
    }
    write('"');
 23f8e6a:	2122      	movs	r1, #34	; 0x22
 23f8e6c:	4620      	mov	r0, r4
 23f8e6e:	f7ff feae 	bl	23f8bce <_ZN5spark10JSONWriter5writeEc>
}
 23f8e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f8e76:	bf00      	nop
 23f8e78:	023ff833 	.word	0x023ff833

023f8e7c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23f8e7c:	b513      	push	{r0, r1, r4, lr}
 23f8e7e:	4604      	mov	r4, r0
 23f8e80:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f8e84:	f7ff ff5e 	bl	23f8d44 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23f8e88:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f8e8c:	4620      	mov	r0, r4
 23f8e8e:	f7ff ff97 	bl	23f8dc0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23f8e92:	2302      	movs	r3, #2
}
 23f8e94:	4620      	mov	r0, r4
    state_ = VALUE;
 23f8e96:	7123      	strb	r3, [r4, #4]
}
 23f8e98:	b002      	add	sp, #8
 23f8e9a:	bd10      	pop	{r4, pc}

023f8e9c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23f8e9c:	b513      	push	{r0, r1, r4, lr}
 23f8e9e:	4604      	mov	r4, r0
 23f8ea0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f8ea4:	f7ff ff4e 	bl	23f8d44 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23f8ea8:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f8eac:	4620      	mov	r0, r4
 23f8eae:	f7ff ff87 	bl	23f8dc0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23f8eb2:	2301      	movs	r3, #1
}
 23f8eb4:	4620      	mov	r0, r4
    state_ = NEXT;
 23f8eb6:	7123      	strb	r3, [r4, #4]
}
 23f8eb8:	b002      	add	sp, #8
 23f8eba:	bd10      	pop	{r4, pc}

023f8ebc <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23f8ebc:	6880      	ldr	r0, [r0, #8]
 23f8ebe:	6803      	ldr	r3, [r0, #0]
 23f8ec0:	68db      	ldr	r3, [r3, #12]
 23f8ec2:	4718      	bx	r3

023f8ec4 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23f8ec4:	4770      	bx	lr

023f8ec6 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23f8ec6:	4608      	mov	r0, r1
 23f8ec8:	b111      	cbz	r1, 23f8ed0 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23f8eca:	680b      	ldr	r3, [r1, #0]
 23f8ecc:	685b      	ldr	r3, [r3, #4]
 23f8ece:	4718      	bx	r3
}
 23f8ed0:	4770      	bx	lr

023f8ed2 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23f8ed2:	4770      	bx	lr

023f8ed4 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23f8ed4:	4770      	bx	lr

023f8ed6 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23f8ed6:	4770      	bx	lr

023f8ed8 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23f8ed8:	4770      	bx	lr

023f8eda <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23f8eda:	b538      	push	{r3, r4, r5, lr}
 23f8edc:	4604      	mov	r4, r0
 23f8ede:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23f8ee0:	6800      	ldr	r0, [r0, #0]
 23f8ee2:	212e      	movs	r1, #46	; 0x2e
 23f8ee4:	f003 ff07 	bl	23fccf6 <strchrnul>
    size = s - category;
 23f8ee8:	6823      	ldr	r3, [r4, #0]
 23f8eea:	1ac3      	subs	r3, r0, r3
 23f8eec:	602b      	str	r3, [r5, #0]
    if (size) {
 23f8eee:	b123      	cbz	r3, 23f8efa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23f8ef0:	7803      	ldrb	r3, [r0, #0]
 23f8ef2:	b103      	cbz	r3, 23f8ef6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23f8ef4:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
 23f8ef6:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8ef8:	6020      	str	r0, [r4, #0]
}
 23f8efa:	4618      	mov	r0, r3
 23f8efc:	bd38      	pop	{r3, r4, r5, pc}

023f8efe <_ZN5spark16JSONStreamWriterD0Ev>:
 23f8efe:	b510      	push	{r4, lr}
 23f8f00:	4604      	mov	r4, r0
 23f8f02:	210c      	movs	r1, #12
 23f8f04:	f7fa fd1b 	bl	23f393e <_ZdlPvj>
 23f8f08:	4620      	mov	r0, r4
 23f8f0a:	bd10      	pop	{r4, pc}

023f8f0c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23f8f0c:	b510      	push	{r4, lr}
 23f8f0e:	4604      	mov	r4, r0
 23f8f10:	2104      	movs	r1, #4
 23f8f12:	f7fa fd14 	bl	23f393e <_ZdlPvj>
 23f8f16:	4620      	mov	r0, r4
 23f8f18:	bd10      	pop	{r4, pc}

023f8f1a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23f8f1a:	b510      	push	{r4, lr}
 23f8f1c:	4604      	mov	r4, r0
 23f8f1e:	2104      	movs	r1, #4
 23f8f20:	f7fa fd0d 	bl	23f393e <_ZdlPvj>
 23f8f24:	4620      	mov	r0, r4
 23f8f26:	bd10      	pop	{r4, pc}

023f8f28 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23f8f28:	f7fe be00 	b.w	23f7b2c <os_mutex_recursive_lock>

023f8f2c <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23f8f2c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23f8f2e:	f7fa fcb9 	bl	23f38a4 <strcmp>
}
 23f8f32:	fab0 f080 	clz	r0, r0
 23f8f36:	0940      	lsrs	r0, r0, #5
 23f8f38:	bd08      	pop	{r3, pc}

023f8f3a <__tcf_1>:
 23f8f3a:	4770      	bx	lr

023f8f3c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23f8f3c:	b510      	push	{r4, lr}
 23f8f3e:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23f8f40:	f002 f9b4 	bl	23fb2ac <_Z16_fetch_usbserialv>
 23f8f44:	4284      	cmp	r4, r0
 23f8f46:	d105      	bne.n	23f8f54 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23f8f48:	f002 f9b0 	bl	23fb2ac <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23f8f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23f8f50:	f002 b9a0 	b.w	23fb294 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23f8f54:	f002 fbfc 	bl	23fb750 <_Z22__fetch_global_Serial1v>
 23f8f58:	4284      	cmp	r4, r0
 23f8f5a:	d105      	bne.n	23f8f68 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23f8f5c:	f002 fbf8 	bl	23fb750 <_Z22__fetch_global_Serial1v>
}
 23f8f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23f8f64:	f002 b939 	b.w	23fb1da <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23f8f68:	b12c      	cbz	r4, 23f8f76 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23f8f6a:	6823      	ldr	r3, [r4, #0]
 23f8f6c:	4620      	mov	r0, r4
}
 23f8f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f8f72:	685b      	ldr	r3, [r3, #4]
 23f8f74:	4718      	bx	r3
 23f8f76:	bd10      	pop	{r4, pc}

023f8f78 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f8f78:	680b      	ldr	r3, [r1, #0]
 23f8f7a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23f8f7c:	684b      	ldr	r3, [r1, #4]
 23f8f7e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23f8f80:	b113      	cbz	r3, 23f8f88 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23f8f82:	685a      	ldr	r2, [r3, #4]
 23f8f84:	3201      	adds	r2, #1
 23f8f86:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f8f88:	4770      	bx	lr

023f8f8a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23f8f8a:	b513      	push	{r0, r1, r4, lr}
 23f8f8c:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23f8f8e:	4608      	mov	r0, r1
 23f8f90:	9101      	str	r1, [sp, #4]
 23f8f92:	f7fa fc91 	bl	23f38b8 <strlen>
 23f8f96:	4602      	mov	r2, r0
 23f8f98:	4620      	mov	r0, r4
 23f8f9a:	9901      	ldr	r1, [sp, #4]
}
 23f8f9c:	b002      	add	sp, #8
 23f8f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23f8fa2:	f7ff bf7b 	b.w	23f8e9c <_ZN5spark10JSONWriter5valueEPKcj>

023f8fa6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23f8fa6:	b513      	push	{r0, r1, r4, lr}
 23f8fa8:	4604      	mov	r4, r0
    write(str, strlen(str));
 23f8faa:	4608      	mov	r0, r1
 23f8fac:	9101      	str	r1, [sp, #4]
 23f8fae:	f7fa fc83 	bl	23f38b8 <strlen>
 23f8fb2:	4602      	mov	r2, r0
 23f8fb4:	4620      	mov	r0, r4
 23f8fb6:	6823      	ldr	r3, [r4, #0]
 23f8fb8:	9901      	ldr	r1, [sp, #4]
 23f8fba:	68db      	ldr	r3, [r3, #12]
}
 23f8fbc:	b002      	add	sp, #8
 23f8fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23f8fc2:	4718      	bx	r3

023f8fc4 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23f8fc4:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23f8fc6:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23f8fc8:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23f8fcc:	2201      	movs	r2, #1
 23f8fce:	68db      	ldr	r3, [r3, #12]
 23f8fd0:	f10d 0107 	add.w	r1, sp, #7
 23f8fd4:	4798      	blx	r3
}
 23f8fd6:	b003      	add	sp, #12
 23f8fd8:	f85d fb04 	ldr.w	pc, [sp], #4

023f8fdc <_ZN5spark6detail9LogFilterC1E8LogLevel>:
        capacity_(0) {
 23f8fdc:	2200      	movs	r2, #0
        level_(level) {
 23f8fde:	7601      	strb	r1, [r0, #24]
 23f8fe0:	e9c0 2200 	strd	r2, r2, [r0]
 23f8fe4:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23f8fe8:	e9c0 2204 	strd	r2, r2, [r0, #16]
}
 23f8fec:	4770      	bx	lr

023f8fee <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23f8fee:	680a      	ldr	r2, [r1, #0]
 23f8ff0:	b510      	push	{r4, lr}
 23f8ff2:	6002      	str	r2, [r0, #0]
 23f8ff4:	684a      	ldr	r2, [r1, #4]
 23f8ff6:	6042      	str	r2, [r0, #4]
 23f8ff8:	2200      	movs	r2, #0
 23f8ffa:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23f8ffe:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f9000:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f9002:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f9004:	6084      	str	r4, [r0, #8]
 23f9006:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f9008:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f900a:	60c4      	str	r4, [r0, #12]
 23f900c:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23f900e:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f9010:	6104      	str	r4, [r0, #16]
 23f9012:	bd10      	pop	{r4, pc}

023f9014 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23f9014:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23f9018:	f04f 0a14 	mov.w	sl, #20
 23f901c:	e9d0 8400 	ldrd	r8, r4, [r0]
 23f9020:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23f9022:	4645      	mov	r5, r8
 23f9024:	fb0a f404 	mul.w	r4, sl, r4
 23f9028:	9300      	str	r3, [sp, #0]
 23f902a:	4b17      	ldr	r3, [pc, #92]	; (23f9088 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23f902c:	10a4      	asrs	r4, r4, #2
 23f902e:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23f9030:	2c00      	cmp	r4, #0
 23f9032:	dd21      	ble.n	23f9078 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23f9034:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23f9036:	fb0a f006 	mul.w	r0, sl, r6
 23f903a:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23f903e:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23f9042:	463a      	mov	r2, r7
 23f9044:	455f      	cmp	r7, fp
 23f9046:	bf28      	it	cs
 23f9048:	465a      	movcs	r2, fp
 23f904a:	5828      	ldr	r0, [r5, r0]
 23f904c:	9101      	str	r1, [sp, #4]
 23f904e:	f003 fe64 	bl	23fcd1a <strncmp>
                if (cmp == 0) {
 23f9052:	2800      	cmp	r0, #0
 23f9054:	f04f 0301 	mov.w	r3, #1
 23f9058:	9901      	ldr	r1, [sp, #4]
 23f905a:	d10b      	bne.n	23f9074 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23f905c:	455f      	cmp	r7, fp
 23f905e:	d103      	bne.n	23f9068 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23f9060:	9a00      	ldr	r2, [sp, #0]
 23f9062:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23f9064:	4634      	mov	r4, r6
 23f9066:	e7e3      	b.n	23f9030 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23f9068:	d9fc      	bls.n	23f9064 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23f906a:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23f906c:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23f9070:	3e01      	subs	r6, #1
 23f9072:	e7f7      	b.n	23f9064 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23f9074:	dbf9      	blt.n	23f906a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23f9076:	e7f5      	b.n	23f9064 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23f9078:	eba5 0508 	sub.w	r5, r5, r8
}
 23f907c:	4802      	ldr	r0, [pc, #8]	; (23f9088 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23f907e:	10ad      	asrs	r5, r5, #2
 23f9080:	4368      	muls	r0, r5
 23f9082:	b003      	add	sp, #12
 23f9084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9088:	cccccccd 	.word	0xcccccccd

023f908c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23f908c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23f908e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23f9090:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23f9092:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23f9094:	b303      	cbz	r3, 23f90d8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23f9096:	b1f9      	cbz	r1, 23f90d8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23f9098:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23f909a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23f909e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23f90a0:	a903      	add	r1, sp, #12
 23f90a2:	a801      	add	r0, sp, #4
 23f90a4:	f7ff ff19 	bl	23f8eda <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23f90a8:	4601      	mov	r1, r0
 23f90aa:	b1a8      	cbz	r0, 23f90d8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23f90ac:	f10d 030b 	add.w	r3, sp, #11
 23f90b0:	4620      	mov	r0, r4
 23f90b2:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23f90b4:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23f90b8:	f7ff ffac 	bl	23f9014 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23f90bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23f90c0:	b153      	cbz	r3, 23f90d8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23f90c2:	6823      	ldr	r3, [r4, #0]
 23f90c4:	2414      	movs	r4, #20
 23f90c6:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23f90ca:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23f90ce:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23f90d0:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23f90d2:	bfa8      	it	ge
 23f90d4:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23f90d6:	e7e3      	b.n	23f90a0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23f90d8:	4628      	mov	r0, r5
 23f90da:	b004      	add	sp, #16
 23f90dc:	bd70      	pop	{r4, r5, r6, pc}

023f90de <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23f90de:	b40e      	push	{r1, r2, r3}
 23f90e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f90e2:	b08c      	sub	sp, #48	; 0x30
 23f90e4:	af00      	add	r7, sp, #0
 23f90e6:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23f90ea:	f855 2b04 	ldr.w	r2, [r5], #4
 23f90ee:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f90f0:	462b      	mov	r3, r5
 23f90f2:	2120      	movs	r1, #32
 23f90f4:	f107 0010 	add.w	r0, r7, #16
 23f90f8:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23f90fa:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f90fc:	f7ff fac6 	bl	23f868c <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23f9100:	281f      	cmp	r0, #31
 23f9102:	687a      	ldr	r2, [r7, #4]
 23f9104:	d91a      	bls.n	23f913c <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23f9106:	f100 0308 	add.w	r3, r0, #8
 23f910a:	f023 0307 	bic.w	r3, r3, #7
        }
 23f910e:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23f9110:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f9114:	1c41      	adds	r1, r0, #1
 23f9116:	462b      	mov	r3, r5
 23f9118:	4668      	mov	r0, sp
        va_start(args, fmt);
 23f911a:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f911c:	f7ff fab6 	bl	23f868c <vsnprintf>
        if (n > 0) {
 23f9120:	1e02      	subs	r2, r0, #0
 23f9122:	dd04      	ble.n	23f912e <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23f9124:	6823      	ldr	r3, [r4, #0]
 23f9126:	4669      	mov	r1, sp
 23f9128:	4620      	mov	r0, r4
 23f912a:	68db      	ldr	r3, [r3, #12]
 23f912c:	4798      	blx	r3
 23f912e:	46b5      	mov	sp, r6
}
 23f9130:	3730      	adds	r7, #48	; 0x30
 23f9132:	46bd      	mov	sp, r7
 23f9134:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23f9138:	b003      	add	sp, #12
 23f913a:	4770      	bx	lr
    } else if (n > 0) {
 23f913c:	2800      	cmp	r0, #0
 23f913e:	d0f7      	beq.n	23f9130 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23f9140:	6823      	ldr	r3, [r4, #0]
 23f9142:	4602      	mov	r2, r0
 23f9144:	68db      	ldr	r3, [r3, #12]
 23f9146:	4620      	mov	r0, r4
 23f9148:	f107 0110 	add.w	r1, r7, #16
 23f914c:	4798      	blx	r3
}
 23f914e:	e7ef      	b.n	23f9130 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023f9150 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23f9150:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23f9152:	4c08      	ldr	r4, [pc, #32]	; (23f9174 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23f9154:	e8d4 3f8f 	ldab	r3, [r4]
 23f9158:	07db      	lsls	r3, r3, #31
 23f915a:	d409      	bmi.n	23f9170 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23f915c:	4620      	mov	r0, r4
 23f915e:	f7fa fbfd 	bl	23f395c <__cxa_guard_acquire>
 23f9162:	b128      	cbz	r0, 23f9170 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23f9164:	4620      	mov	r0, r4
 23f9166:	f7fa fbfe 	bl	23f3966 <__cxa_guard_release>
 23f916a:	4803      	ldr	r0, [pc, #12]	; (23f9178 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23f916c:	f003 fd3a 	bl	23fcbe4 <atexit>
}
 23f9170:	4802      	ldr	r0, [pc, #8]	; (23f917c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23f9172:	bd10      	pop	{r4, pc}
 23f9174:	1007ae18 	.word	0x1007ae18
 23f9178:	023f8ed3 	.word	0x023f8ed3
 23f917c:	1007aae0 	.word	0x1007aae0

023f9180 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23f9180:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23f9182:	4c08      	ldr	r4, [pc, #32]	; (23f91a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23f9184:	e8d4 3f8f 	ldab	r3, [r4]
 23f9188:	07db      	lsls	r3, r3, #31
 23f918a:	d409      	bmi.n	23f91a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23f918c:	4620      	mov	r0, r4
 23f918e:	f7fa fbe5 	bl	23f395c <__cxa_guard_acquire>
 23f9192:	b128      	cbz	r0, 23f91a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23f9194:	4620      	mov	r0, r4
 23f9196:	f7fa fbe6 	bl	23f3966 <__cxa_guard_release>
 23f919a:	4803      	ldr	r0, [pc, #12]	; (23f91a8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23f919c:	f003 fd22 	bl	23fcbe4 <atexit>
    return &factory;
}
 23f91a0:	4802      	ldr	r0, [pc, #8]	; (23f91ac <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23f91a2:	bd10      	pop	{r4, pc}
 23f91a4:	1007ae1c 	.word	0x1007ae1c
 23f91a8:	023f8f3b 	.word	0x023f8f3b
 23f91ac:	1007aae4 	.word	0x1007aae4

023f91b0 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23f91b0:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23f91b2:	2500      	movs	r5, #0
 23f91b4:	4604      	mov	r4, r0
 23f91b6:	e9c0 5500 	strd	r5, r5, [r0]
 23f91ba:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23f91be:	6085      	str	r5, [r0, #8]
 23f91c0:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23f91c2:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23f91c6:	f7fe fc95 	bl	23f7af4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23f91ca:	f7ff ffc1 	bl	23f9150 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23f91ce:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23f91d0:	f7ff ffd6 	bl	23f9180 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23f91d4:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23f91d6:	6220      	str	r0, [r4, #32]
}
 23f91d8:	4620      	mov	r0, r4
 23f91da:	bd38      	pop	{r3, r4, r5, pc}

023f91dc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23f91dc:	b510      	push	{r4, lr}
    static LogManager mgr;
 23f91de:	4c0a      	ldr	r4, [pc, #40]	; (23f9208 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23f91e0:	e8d4 3f8f 	ldab	r3, [r4]
 23f91e4:	07db      	lsls	r3, r3, #31
 23f91e6:	d40c      	bmi.n	23f9202 <_ZN5spark10LogManager8instanceEv+0x26>
 23f91e8:	4620      	mov	r0, r4
 23f91ea:	f7fa fbb7 	bl	23f395c <__cxa_guard_acquire>
 23f91ee:	b140      	cbz	r0, 23f9202 <_ZN5spark10LogManager8instanceEv+0x26>
 23f91f0:	4806      	ldr	r0, [pc, #24]	; (23f920c <_ZN5spark10LogManager8instanceEv+0x30>)
 23f91f2:	f7ff ffdd 	bl	23f91b0 <_ZN5spark10LogManagerC1Ev>
 23f91f6:	4620      	mov	r0, r4
 23f91f8:	f7fa fbb5 	bl	23f3966 <__cxa_guard_release>
 23f91fc:	4804      	ldr	r0, [pc, #16]	; (23f9210 <_ZN5spark10LogManager8instanceEv+0x34>)
 23f91fe:	f003 fcf1 	bl	23fcbe4 <atexit>
    return &mgr;
}
 23f9202:	4802      	ldr	r0, [pc, #8]	; (23f920c <_ZN5spark10LogManager8instanceEv+0x30>)
 23f9204:	bd10      	pop	{r4, pc}
 23f9206:	bf00      	nop
 23f9208:	1007ae14 	.word	0x1007ae14
 23f920c:	1007ae24 	.word	0x1007ae24
 23f9210:	023f9729 	.word	0x023f9729

023f9214 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23f9214:	2300      	movs	r3, #0
 23f9216:	4a02      	ldr	r2, [pc, #8]	; (23f9220 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23f9218:	4902      	ldr	r1, [pc, #8]	; (23f9224 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23f921a:	4803      	ldr	r0, [pc, #12]	; (23f9228 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23f921c:	f7ff b830 	b.w	23f8280 <log_set_callbacks>
 23f9220:	023f953d 	.word	0x023f953d
 23f9224:	023f94c9 	.word	0x023f94c9
 23f9228:	023f9449 	.word	0x023f9449

023f922c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23f922c:	2300      	movs	r3, #0
 23f922e:	461a      	mov	r2, r3
 23f9230:	4619      	mov	r1, r3
 23f9232:	4618      	mov	r0, r3
 23f9234:	f7ff b824 	b.w	23f8280 <log_set_callbacks>

023f9238 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23f9238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f923a:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23f923c:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23f923e:	4668      	mov	r0, sp
 23f9240:	f7ff fe9a 	bl	23f8f78 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23f9244:	466a      	mov	r2, sp
 23f9246:	4629      	mov	r1, r5
 23f9248:	4620      	mov	r0, r4
 23f924a:	f7ff fd47 	bl	23f8cdc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23f924e:	a801      	add	r0, sp, #4
 23f9250:	f7ff fa8f 	bl	23f8772 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f9254:	4620      	mov	r0, r4
 23f9256:	b003      	add	sp, #12
 23f9258:	bd30      	pop	{r4, r5, pc}

023f925a <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23f925a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f925c:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23f925e:	68cd      	ldr	r5, [r1, #12]
 23f9260:	4668      	mov	r0, sp
 23f9262:	f7ff fe89 	bl	23f8f78 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23f9266:	466a      	mov	r2, sp
 23f9268:	4629      	mov	r1, r5
 23f926a:	4620      	mov	r0, r4
 23f926c:	f7ff fd12 	bl	23f8c94 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23f9270:	a801      	add	r0, sp, #4
 23f9272:	f7ff fa7e 	bl	23f8772 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f9276:	4620      	mov	r0, r4
 23f9278:	b003      	add	sp, #12
 23f927a:	bd30      	pop	{r4, r5, pc}

023f927c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23f927c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f927e:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23f9280:	690d      	ldr	r5, [r1, #16]
 23f9282:	4668      	mov	r0, sp
 23f9284:	f7ff fe78 	bl	23f8f78 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23f9288:	466a      	mov	r2, sp
 23f928a:	4629      	mov	r1, r5
 23f928c:	4620      	mov	r0, r4
 23f928e:	f7ff fcaa 	bl	23f8be6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23f9292:	a801      	add	r0, sp, #4
 23f9294:	f7ff fa6d 	bl	23f8772 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f9298:	4620      	mov	r0, r4
 23f929a:	b003      	add	sp, #12
 23f929c:	bd30      	pop	{r4, r5, pc}
	...

023f92a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23f92a0:	b570      	push	{r4, r5, r6, lr}
 23f92a2:	b08a      	sub	sp, #40	; 0x28
 23f92a4:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23f92a6:	4601      	mov	r1, r0
 23f92a8:	a804      	add	r0, sp, #16
 23f92aa:	f7ff ffc5 	bl	23f9238 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23f92ae:	4e14      	ldr	r6, [pc, #80]	; (23f9300 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23f92b0:	a804      	add	r0, sp, #16
 23f92b2:	f7ff fd2b 	bl	23f8d0c <_ZN5spark18JSONObjectIterator4nextEv>
 23f92b6:	b1e8      	cbz	r0, 23f92f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23f92b8:	4668      	mov	r0, sp
 23f92ba:	a904      	add	r1, sp, #16
 23f92bc:	f7ff ffcd 	bl	23f925a <_ZNK5spark18JSONObjectIterator4nameEv>
 23f92c0:	4631      	mov	r1, r6
 23f92c2:	9802      	ldr	r0, [sp, #8]
 23f92c4:	f7ff fe32 	bl	23f8f2c <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23f92c8:	4604      	mov	r4, r0
 23f92ca:	b110      	cbz	r0, 23f92d2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23f92cc:	1e2c      	subs	r4, r5, #0
 23f92ce:	bf18      	it	ne
 23f92d0:	2401      	movne	r4, #1
 23f92d2:	a801      	add	r0, sp, #4
 23f92d4:	f7ff fa4d 	bl	23f8772 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f92d8:	2c00      	cmp	r4, #0
 23f92da:	d0e9      	beq.n	23f92b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23f92dc:	4668      	mov	r0, sp
 23f92de:	a904      	add	r1, sp, #16
 23f92e0:	f7ff ffcc 	bl	23f927c <_ZNK5spark18JSONObjectIterator5valueEv>
 23f92e4:	4668      	mov	r0, sp
 23f92e6:	f7ff fcb4 	bl	23f8c52 <_ZNK5spark9JSONValue5toIntEv>
 23f92ea:	6028      	str	r0, [r5, #0]
 23f92ec:	a801      	add	r0, sp, #4
 23f92ee:	f7ff fa40 	bl	23f8772 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f92f2:	e7dd      	b.n	23f92b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23f92f4:	a805      	add	r0, sp, #20
 23f92f6:	f7ff fa3c 	bl	23f8772 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f92fa:	b00a      	add	sp, #40	; 0x28
 23f92fc:	bd70      	pop	{r4, r5, r6, pc}
 23f92fe:	bf00      	nop
 23f9300:	023ff839 	.word	0x023ff839

023f9304 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23f9304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f9306:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23f9308:	4913      	ldr	r1, [pc, #76]	; (23f9358 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23f930a:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23f930c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23f930e:	f7fa fac9 	bl	23f38a4 <strcmp>
 23f9312:	b950      	cbnz	r0, 23f932a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23f9314:	f001 ffca 	bl	23fb2ac <_Z16_fetch_usbserialv>
 23f9318:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f931c:	f001 ffb6 	bl	23fb28c <_ZN9USBSerial5beginEl>
}
 23f9320:	b003      	add	sp, #12
 23f9322:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23f9326:	f001 bfc1 	b.w	23fb2ac <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23f932a:	4620      	mov	r0, r4
 23f932c:	490b      	ldr	r1, [pc, #44]	; (23f935c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23f932e:	f7fa fab9 	bl	23f38a4 <strcmp>
 23f9332:	b978      	cbnz	r0, 23f9354 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23f9334:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23f9338:	a901      	add	r1, sp, #4
 23f933a:	4628      	mov	r0, r5
        int baud = 9600;
 23f933c:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23f933e:	f7ff ffaf 	bl	23f92a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23f9342:	f002 fa05 	bl	23fb750 <_Z22__fetch_global_Serial1v>
 23f9346:	9901      	ldr	r1, [sp, #4]
 23f9348:	f001 ff44 	bl	23fb1d4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23f934c:	f002 fa00 	bl	23fb750 <_Z22__fetch_global_Serial1v>
}
 23f9350:	b003      	add	sp, #12
 23f9352:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23f9354:	2000      	movs	r0, #0
 23f9356:	e7fb      	b.n	23f9350 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23f9358:	023ff83e 	.word	0x023ff83e
 23f935c:	023ff845 	.word	0x023ff845

023f9360 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f9360:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f9362:	2614      	movs	r6, #20
 23f9364:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f9368:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f936a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f936e:	42ae      	cmp	r6, r5
 23f9370:	d004      	beq.n	23f937c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23f9372:	4628      	mov	r0, r5
 23f9374:	f000 ff58 	bl	23fa228 <_ZN6StringD1Ev>
 23f9378:	3514      	adds	r5, #20
 23f937a:	e7f8      	b.n	23f936e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f937c:	6820      	ldr	r0, [r4, #0]
 23f937e:	f7ff f94d 	bl	23f861c <free>
}
 23f9382:	4620      	mov	r0, r4
 23f9384:	bd70      	pop	{r4, r5, r6, pc}

023f9386 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f9386:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f9388:	2614      	movs	r6, #20
 23f938a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f938e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f9390:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f9394:	42ae      	cmp	r6, r5
 23f9396:	d005      	beq.n	23f93a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23f9398:	f105 0008 	add.w	r0, r5, #8
 23f939c:	f7ff fff3 	bl	23f9386 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23f93a0:	3514      	adds	r5, #20
 23f93a2:	e7f7      	b.n	23f9394 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f93a4:	6820      	ldr	r0, [r4, #0]
 23f93a6:	f7ff f939 	bl	23f861c <free>
}
 23f93aa:	4620      	mov	r0, r4
 23f93ac:	bd70      	pop	{r4, r5, r6, pc}

023f93ae <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23f93ae:	b510      	push	{r4, lr}
 23f93b0:	4604      	mov	r4, r0
 23f93b2:	300c      	adds	r0, #12
 23f93b4:	f7ff ffe7 	bl	23f9386 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23f93b8:	4620      	mov	r0, r4
 23f93ba:	f7ff fa04 	bl	23f87c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23f93be:	4620      	mov	r0, r4
 23f93c0:	bd10      	pop	{r4, pc}
	...

023f93c4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23f93c4:	b510      	push	{r4, lr}
 23f93c6:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23f93c8:	4b03      	ldr	r3, [pc, #12]	; (23f93d8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23f93ca:	f840 3b04 	str.w	r3, [r0], #4
 23f93ce:	f7ff ffee 	bl	23f93ae <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23f93d2:	4620      	mov	r0, r4
 23f93d4:	bd10      	pop	{r4, pc}
 23f93d6:	bf00      	nop
 23f93d8:	023ff22c 	.word	0x023ff22c

023f93dc <_ZN5spark16StreamLogHandlerD0Ev>:
 23f93dc:	b510      	push	{r4, lr}
 23f93de:	4604      	mov	r4, r0
 23f93e0:	f7ff fff0 	bl	23f93c4 <_ZN5spark16StreamLogHandlerD1Ev>
 23f93e4:	4620      	mov	r0, r4
 23f93e6:	2124      	movs	r1, #36	; 0x24
 23f93e8:	f7fa faa9 	bl	23f393e <_ZdlPvj>
 23f93ec:	4620      	mov	r0, r4
 23f93ee:	bd10      	pop	{r4, pc}

023f93f0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23f93f0:	b510      	push	{r4, lr}
 23f93f2:	4604      	mov	r4, r0
 23f93f4:	4b02      	ldr	r3, [pc, #8]	; (23f9400 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23f93f6:	6003      	str	r3, [r0, #0]
 23f93f8:	f7ff ffe4 	bl	23f93c4 <_ZN5spark16StreamLogHandlerD1Ev>
 23f93fc:	4620      	mov	r0, r4
 23f93fe:	bd10      	pop	{r4, pc}
 23f9400:	023ff8cc 	.word	0x023ff8cc

023f9404 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23f9404:	b510      	push	{r4, lr}
 23f9406:	4604      	mov	r4, r0
 23f9408:	f7ff fff2 	bl	23f93f0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23f940c:	4620      	mov	r0, r4
 23f940e:	2124      	movs	r1, #36	; 0x24
 23f9410:	f7fa fa95 	bl	23f393e <_ZdlPvj>
 23f9414:	4620      	mov	r0, r4
 23f9416:	bd10      	pop	{r4, pc}

023f9418 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23f9418:	2200      	movs	r2, #0
 23f941a:	e9c0 2200 	strd	r2, r2, [r0]
 23f941e:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23f9420:	b510      	push	{r4, lr}
 23f9422:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f9424:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f9426:	6004      	str	r4, [r0, #0]
 23f9428:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f942a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f942c:	6044      	str	r4, [r0, #4]
 23f942e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f9430:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f9432:	6084      	str	r4, [r0, #8]
}
 23f9434:	bd10      	pop	{r4, pc}

023f9436 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23f9436:	b510      	push	{r4, lr}
 23f9438:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23f943a:	6803      	ldr	r3, [r0, #0]
 23f943c:	6818      	ldr	r0, [r3, #0]
 23f943e:	f7fe fb83 	bl	23f7b48 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23f9442:	4620      	mov	r0, r4
 23f9444:	bd10      	pop	{r4, pc}
	...

023f9448 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23f9448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f944c:	b087      	sub	sp, #28
 23f944e:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23f9450:	4b1c      	ldr	r3, [pc, #112]	; (23f94c4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23f9452:	4680      	mov	r8, r0
 23f9454:	685b      	ldr	r3, [r3, #4]
 23f9456:	4689      	mov	r9, r1
 23f9458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23f945c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23f945e:	b96b      	cbnz	r3, 23f947c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23f9460:	f7ff febc 	bl	23f91dc <_ZN5spark10LogManager8instanceEv>
 23f9464:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23f9466:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23f946a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f946c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23f946e:	f7ff fd5b 	bl	23f8f28 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23f9472:	7b23      	ldrb	r3, [r4, #12]
 23f9474:	b12b      	cbz	r3, 23f9482 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23f9476:	a805      	add	r0, sp, #20
 23f9478:	f7ff ffdd 	bl	23f9436 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23f947c:	b007      	add	sp, #28
 23f947e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23f9482:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23f9484:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23f9488:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23f948a:	e9d4 5300 	ldrd	r5, r3, [r4]
 23f948e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23f9492:	45aa      	cmp	sl, r5
 23f9494:	d012      	beq.n	23f94bc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23f9496:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23f949a:	4631      	mov	r1, r6
 23f949c:	1d38      	adds	r0, r7, #4
 23f949e:	f7ff fdf5 	bl	23f908c <_ZNK5spark6detail9LogFilter5levelEPKc>
 23f94a2:	4581      	cmp	r9, r0
 23f94a4:	d3f5      	bcc.n	23f9492 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23f94a6:	9a03      	ldr	r2, [sp, #12]
 23f94a8:	683b      	ldr	r3, [r7, #0]
 23f94aa:	9200      	str	r2, [sp, #0]
 23f94ac:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23f94b0:	464a      	mov	r2, r9
 23f94b2:	4633      	mov	r3, r6
 23f94b4:	4641      	mov	r1, r8
 23f94b6:	4638      	mov	r0, r7
 23f94b8:	47d8      	blx	fp
 23f94ba:	e7ea      	b.n	23f9492 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23f94bc:	2300      	movs	r3, #0
 23f94be:	7323      	strb	r3, [r4, #12]
 23f94c0:	e7d9      	b.n	23f9476 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23f94c2:	bf00      	nop
 23f94c4:	e000ed00 	.word	0xe000ed00

023f94c8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23f94c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f94cc:	469b      	mov	fp, r3
 23f94ce:	4b1a      	ldr	r3, [pc, #104]	; (23f9538 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23f94d0:	4680      	mov	r8, r0
 23f94d2:	685b      	ldr	r3, [r3, #4]
 23f94d4:	4689      	mov	r9, r1
 23f94d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23f94da:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23f94dc:	b96b      	cbnz	r3, 23f94fa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23f94de:	f7ff fe7d 	bl	23f91dc <_ZN5spark10LogManager8instanceEv>
 23f94e2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23f94e4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23f94e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f94ea:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23f94ec:	f7ff fd1c 	bl	23f8f28 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23f94f0:	7b23      	ldrb	r3, [r4, #12]
 23f94f2:	b12b      	cbz	r3, 23f9500 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23f94f4:	a801      	add	r0, sp, #4
 23f94f6:	f7ff ff9e 	bl	23f9436 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23f94fa:	b003      	add	sp, #12
 23f94fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23f9500:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23f9502:	b2f6      	uxtb	r6, r6
 23f9504:	7323      	strb	r3, [r4, #12]
 23f9506:	e9d4 5300 	ldrd	r5, r3, [r4]
 23f950a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23f950e:	4555      	cmp	r5, sl
 23f9510:	d00e      	beq.n	23f9530 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23f9512:	f855 7b04 	ldr.w	r7, [r5], #4
 23f9516:	4659      	mov	r1, fp
 23f9518:	1d38      	adds	r0, r7, #4
 23f951a:	f7ff fdb7 	bl	23f908c <_ZNK5spark6detail9LogFilter5levelEPKc>
 23f951e:	4286      	cmp	r6, r0
 23f9520:	d3f5      	bcc.n	23f950e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23f9522:	683b      	ldr	r3, [r7, #0]
 23f9524:	464a      	mov	r2, r9
 23f9526:	4641      	mov	r1, r8
 23f9528:	4638      	mov	r0, r7
 23f952a:	68db      	ldr	r3, [r3, #12]
 23f952c:	4798      	blx	r3
 23f952e:	e7ee      	b.n	23f950e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23f9530:	2300      	movs	r3, #0
 23f9532:	7323      	strb	r3, [r4, #12]
 23f9534:	e7de      	b.n	23f94f4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23f9536:	bf00      	nop
 23f9538:	e000ed00 	.word	0xe000ed00

023f953c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23f953c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f9540:	4b16      	ldr	r3, [pc, #88]	; (23f959c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23f9542:	4605      	mov	r5, r0
 23f9544:	685b      	ldr	r3, [r3, #4]
 23f9546:	460f      	mov	r7, r1
 23f9548:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23f954c:	bb1b      	cbnz	r3, 23f9596 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23f954e:	f7ff fe45 	bl	23f91dc <_ZN5spark10LogManager8instanceEv>
 23f9552:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23f9554:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23f9558:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f955a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23f955c:	f7ff fce4 	bl	23f8f28 <_ZN14RecursiveMutex4lockEv.isra.0>
 23f9560:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23f9564:	2446      	movs	r4, #70	; 0x46
 23f9566:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23f956a:	45b0      	cmp	r8, r6
 23f956c:	d109      	bne.n	23f9582 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23f956e:	a801      	add	r0, sp, #4
 23f9570:	f7ff ff61 	bl	23f9436 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23f9574:	42a5      	cmp	r5, r4
 23f9576:	bfb4      	ite	lt
 23f9578:	2000      	movlt	r0, #0
 23f957a:	2001      	movge	r0, #1
}
 23f957c:	b002      	add	sp, #8
 23f957e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23f9582:	f856 0b04 	ldr.w	r0, [r6], #4
 23f9586:	4639      	mov	r1, r7
 23f9588:	3004      	adds	r0, #4
 23f958a:	f7ff fd7f 	bl	23f908c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23f958e:	4284      	cmp	r4, r0
 23f9590:	bfa8      	it	ge
 23f9592:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23f9594:	e7e9      	b.n	23f956a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23f9596:	2000      	movs	r0, #0
 23f9598:	e7f0      	b.n	23f957c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23f959a:	bf00      	nop
 23f959c:	e000ed00 	.word	0xe000ed00

023f95a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23f95a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f95a2:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23f95a6:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23f95a8:	4604      	mov	r4, r0
 23f95aa:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f95ac:	db0d      	blt.n	23f95ca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23f95ae:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23f95b0:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23f95b2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23f95b4:	dd04      	ble.n	23f95c0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23f95b6:	00b9      	lsls	r1, r7, #2
 23f95b8:	f7ff f83e 	bl	23f8638 <realloc>
            if (!d) {
 23f95bc:	b918      	cbnz	r0, 23f95c6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23f95be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23f95c0:	f7ff f82c 	bl	23f861c <free>
        T* d = nullptr;
 23f95c4:	2000      	movs	r0, #0
        data_ = d;
 23f95c6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23f95c8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23f95ca:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23f95cc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23f95ce:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23f95d2:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f95d4:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23f95d8:	1d08      	adds	r0, r1, #4
 23f95da:	f003 fb2e 	bl	23fcc3a <memmove>
    new(p) T(std::move(value));
 23f95de:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23f95e2:	6863      	ldr	r3, [r4, #4]
    return true;
 23f95e4:	2001      	movs	r0, #1
    ++size_;
 23f95e6:	3301      	adds	r3, #1
 23f95e8:	6063      	str	r3, [r4, #4]
    return true;
 23f95ea:	e7e8      	b.n	23f95be <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023f95ec <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23f95ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f95ee:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23f95f0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23f95f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f95f6:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23f95f8:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23f95fa:	f7ff fc95 	bl	23f8f28 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23f95fe:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f9602:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23f9606:	4293      	cmp	r3, r2
 23f9608:	4619      	mov	r1, r3
 23f960a:	d00a      	beq.n	23f9622 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23f960c:	6809      	ldr	r1, [r1, #0]
 23f960e:	3304      	adds	r3, #4
 23f9610:	42a9      	cmp	r1, r5
 23f9612:	d1f8      	bne.n	23f9606 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23f9614:	a801      	add	r0, sp, #4
 23f9616:	f7ff ff0e 	bl	23f9436 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23f961a:	2500      	movs	r5, #0
}
 23f961c:	4628      	mov	r0, r5
 23f961e:	b003      	add	sp, #12
 23f9620:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23f9622:	4629      	mov	r1, r5
 23f9624:	4620      	mov	r0, r4
 23f9626:	f7ff ffbb 	bl	23f95a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23f962a:	4605      	mov	r5, r0
 23f962c:	2800      	cmp	r0, #0
 23f962e:	d0f1      	beq.n	23f9614 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23f9630:	6863      	ldr	r3, [r4, #4]
 23f9632:	2b01      	cmp	r3, #1
 23f9634:	d101      	bne.n	23f963a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23f9636:	f7ff fded 	bl	23f9214 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23f963a:	a801      	add	r0, sp, #4
 23f963c:	f7ff fefb 	bl	23f9436 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23f9640:	e7ec      	b.n	23f961c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023f9642 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23f9642:	460b      	mov	r3, r1
 23f9644:	b570      	push	{r4, r5, r6, lr}
 23f9646:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23f9648:	e9d0 0200 	ldrd	r0, r2, [r0]
 23f964c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23f9650:	4282      	cmp	r2, r0
 23f9652:	d00f      	beq.n	23f9674 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23f9654:	4601      	mov	r1, r0
            if (*p == value) {
 23f9656:	681d      	ldr	r5, [r3, #0]
 23f9658:	f851 6b04 	ldr.w	r6, [r1], #4
 23f965c:	42ae      	cmp	r6, r5
 23f965e:	d107      	bne.n	23f9670 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f9660:	1a52      	subs	r2, r2, r1
 23f9662:	f003 faea 	bl	23fcc3a <memmove>
    return true;
 23f9666:	2001      	movs	r0, #1
    --size_;
 23f9668:	6863      	ldr	r3, [r4, #4]
 23f966a:	3b01      	subs	r3, #1
 23f966c:	6063      	str	r3, [r4, #4]
}
 23f966e:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23f9670:	4608      	mov	r0, r1
 23f9672:	e7ed      	b.n	23f9650 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23f9674:	2000      	movs	r0, #0
 23f9676:	e7fa      	b.n	23f966e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023f9678 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23f9678:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23f967a:	b570      	push	{r4, r5, r6, lr}
 23f967c:	4604      	mov	r4, r0
 23f967e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23f9682:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23f9686:	42ae      	cmp	r6, r5
 23f9688:	d015      	beq.n	23f96b6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23f968a:	4620      	mov	r0, r4
 23f968c:	f105 0110 	add.w	r1, r5, #16
 23f9690:	f7ff ffd7 	bl	23f9642 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23f9694:	6863      	ldr	r3, [r4, #4]
 23f9696:	b90b      	cbnz	r3, 23f969c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23f9698:	f7ff fdc8 	bl	23f922c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23f969c:	69e0      	ldr	r0, [r4, #28]
 23f969e:	6929      	ldr	r1, [r5, #16]
 23f96a0:	6803      	ldr	r3, [r0, #0]
 23f96a2:	68db      	ldr	r3, [r3, #12]
 23f96a4:	4798      	blx	r3
        if (h.stream) {
 23f96a6:	6969      	ldr	r1, [r5, #20]
 23f96a8:	b119      	cbz	r1, 23f96b2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23f96aa:	6a20      	ldr	r0, [r4, #32]
 23f96ac:	6803      	ldr	r3, [r0, #0]
 23f96ae:	68db      	ldr	r3, [r3, #12]
 23f96b0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23f96b2:	3518      	adds	r5, #24
 23f96b4:	e7e7      	b.n	23f9686 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23f96b6:	2618      	movs	r6, #24
 23f96b8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23f96bc:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f96c0:	42ae      	cmp	r6, r5
 23f96c2:	d004      	beq.n	23f96ce <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23f96c4:	4628      	mov	r0, r5
 23f96c6:	f000 fdaf 	bl	23fa228 <_ZN6StringD1Ev>
 23f96ca:	3518      	adds	r5, #24
 23f96cc:	e7f8      	b.n	23f96c0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23f96ce:	2300      	movs	r3, #0
 23f96d0:	6163      	str	r3, [r4, #20]
}
 23f96d2:	bd70      	pop	{r4, r5, r6, pc}

023f96d4 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23f96d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f96d6:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23f96d8:	f7ff fda8 	bl	23f922c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23f96dc:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23f96e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f96e2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23f96e4:	f7ff fc20 	bl	23f8f28 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23f96e8:	4620      	mov	r0, r4
 23f96ea:	f7ff ffc5 	bl	23f9678 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23f96ee:	a801      	add	r0, sp, #4
 23f96f0:	f7ff fea1 	bl	23f9436 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23f96f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f96f6:	b108      	cbz	r0, 23f96fc <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23f96f8:	f7fe fa0a 	bl	23f7b10 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23f96fc:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23f9700:	2618      	movs	r6, #24
 23f9702:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f9706:	42ae      	cmp	r6, r5
 23f9708:	d004      	beq.n	23f9714 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23f970a:	4628      	mov	r0, r5
 23f970c:	f000 fd8c 	bl	23fa228 <_ZN6StringD1Ev>
 23f9710:	3518      	adds	r5, #24
 23f9712:	e7f8      	b.n	23f9706 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23f9714:	6920      	ldr	r0, [r4, #16]
 23f9716:	f7fe ff81 	bl	23f861c <free>
 23f971a:	6820      	ldr	r0, [r4, #0]
 23f971c:	f7fe ff7e 	bl	23f861c <free>
}
 23f9720:	4620      	mov	r0, r4
 23f9722:	b002      	add	sp, #8
 23f9724:	bd70      	pop	{r4, r5, r6, pc}
	...

023f9728 <__tcf_2>:
    static LogManager mgr;
 23f9728:	4801      	ldr	r0, [pc, #4]	; (23f9730 <__tcf_2+0x8>)
 23f972a:	f7ff bfd3 	b.w	23f96d4 <_ZN5spark10LogManagerD1Ev>
 23f972e:	bf00      	nop
 23f9730:	1007ae24 	.word	0x1007ae24

023f9734 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23f9734:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f9736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f9738:	4604      	mov	r4, r0
 23f973a:	460d      	mov	r5, r1
 23f973c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f973e:	d915      	bls.n	23f976c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23f9740:	4290      	cmp	r0, r2
 23f9742:	d214      	bcs.n	23f976e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23f9744:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f9748:	1a75      	subs	r5, r6, r1
 23f974a:	f1a1 0714 	sub.w	r7, r1, #20
 23f974e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f9750:	42b7      	cmp	r7, r6
 23f9752:	d01a      	beq.n	23f978a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23f9754:	b11c      	cbz	r4, 23f975e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23f9756:	4631      	mov	r1, r6
 23f9758:	4620      	mov	r0, r4
 23f975a:	f7ff fc48 	bl	23f8fee <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23f975e:	f106 0008 	add.w	r0, r6, #8
 23f9762:	f7ff fe10 	bl	23f9386 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23f9766:	3e14      	subs	r6, #20
 23f9768:	3c14      	subs	r4, #20
 23f976a:	e7f1      	b.n	23f9750 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23f976c:	d00d      	beq.n	23f978a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23f976e:	42b5      	cmp	r5, r6
 23f9770:	d00b      	beq.n	23f978a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23f9772:	b11c      	cbz	r4, 23f977c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23f9774:	4629      	mov	r1, r5
 23f9776:	4620      	mov	r0, r4
 23f9778:	f7ff fc39 	bl	23f8fee <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23f977c:	f105 0008 	add.w	r0, r5, #8
 23f9780:	f7ff fe01 	bl	23f9386 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23f9784:	3514      	adds	r5, #20
 23f9786:	3414      	adds	r4, #20
 23f9788:	e7f1      	b.n	23f976e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23f978a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f978c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f978c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f978e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f9790:	4604      	mov	r4, r0
 23f9792:	460d      	mov	r5, r1
 23f9794:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f9796:	d916      	bls.n	23f97c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23f9798:	4290      	cmp	r0, r2
 23f979a:	d215      	bcs.n	23f97c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23f979c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f97a0:	1a75      	subs	r5, r6, r1
 23f97a2:	f1a1 0714 	sub.w	r7, r1, #20
 23f97a6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f97a8:	42b7      	cmp	r7, r6
 23f97aa:	d01c      	beq.n	23f97e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23f97ac:	b12c      	cbz	r4, 23f97ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
class LogCategoryFilter {
 23f97ae:	4631      	mov	r1, r6
 23f97b0:	4620      	mov	r0, r4
 23f97b2:	f000 fdb6 	bl	23fa322 <_ZN6StringC1EOS_>
 23f97b6:	7c33      	ldrb	r3, [r6, #16]
 23f97b8:	7423      	strb	r3, [r4, #16]
 23f97ba:	4630      	mov	r0, r6
 23f97bc:	f000 fd34 	bl	23fa228 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f97c0:	3e14      	subs	r6, #20
 23f97c2:	3c14      	subs	r4, #20
 23f97c4:	e7f0      	b.n	23f97a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f97c6:	d00e      	beq.n	23f97e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23f97c8:	42b5      	cmp	r5, r6
 23f97ca:	d00c      	beq.n	23f97e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23f97cc:	b12c      	cbz	r4, 23f97da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23f97ce:	4629      	mov	r1, r5
 23f97d0:	4620      	mov	r0, r4
 23f97d2:	f000 fda6 	bl	23fa322 <_ZN6StringC1EOS_>
 23f97d6:	7c2b      	ldrb	r3, [r5, #16]
 23f97d8:	7423      	strb	r3, [r4, #16]
 23f97da:	4628      	mov	r0, r5
 23f97dc:	f000 fd24 	bl	23fa228 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f97e0:	3514      	adds	r5, #20
 23f97e2:	3414      	adds	r4, #20
 23f97e4:	e7f0      	b.n	23f97c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23f97e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f97e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23f97e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
 23f97ea:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23f97ec:	4605      	mov	r5, r0
        if (n > 0) {
 23f97ee:	dd13      	ble.n	23f9818 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23f97f0:	2714      	movs	r7, #20
    return ::malloc(size);
 23f97f2:	fb07 f006 	mul.w	r0, r7, r6
 23f97f6:	f7fe ff03 	bl	23f8600 <malloc>
            if (!d) {
 23f97fa:	4604      	mov	r4, r0
 23f97fc:	b158      	cbz	r0, 23f9816 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
 23f97fe:	e9d5 1200 	ldrd	r1, r2, [r5]
 23f9802:	fb07 1202 	mla	r2, r7, r2, r1
 23f9806:	f7ff ffc1 	bl	23f978c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f980a:	6828      	ldr	r0, [r5, #0]
 23f980c:	f7fe ff06 	bl	23f861c <free>
        return true;
 23f9810:	2001      	movs	r0, #1
        data_ = d;
 23f9812:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23f9814:	60ae      	str	r6, [r5, #8]
    }
 23f9816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
 23f9818:	2400      	movs	r4, #0
 23f981a:	e7f6      	b.n	23f980a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>

023f981c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23f981c:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f981e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23f9822:	e9c0 3300 	strd	r3, r3, [r0]
 23f9826:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f9828:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f982a:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f982c:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f982e:	4299      	cmp	r1, r3
 23f9830:	dd17      	ble.n	23f9862 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
 23f9832:	f7ff ffd9 	bl	23f97e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23f9836:	b1a0      	cbz	r0, 23f9862 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f9838:	e9d5 6300 	ldrd	r6, r3, [r5]
 23f983c:	f04f 0814 	mov.w	r8, #20
 23f9840:	fb08 6803 	mla	r8, r8, r3, r6
 23f9844:	6827      	ldr	r7, [r4, #0]
        for (; it != end; ++it, ++dest) {
 23f9846:	45b0      	cmp	r8, r6
 23f9848:	d009      	beq.n	23f985e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x42>
            new(dest) T(*it);
 23f984a:	b12f      	cbz	r7, 23f9858 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x3c>
 23f984c:	4631      	mov	r1, r6
 23f984e:	4638      	mov	r0, r7
 23f9850:	f000 fd81 	bl	23fa356 <_ZN6StringC1ERKS_>
 23f9854:	7c33      	ldrb	r3, [r6, #16]
 23f9856:	743b      	strb	r3, [r7, #16]
        for (; it != end; ++it, ++dest) {
 23f9858:	3614      	adds	r6, #20
 23f985a:	3714      	adds	r7, #20
 23f985c:	e7f3      	b.n	23f9846 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x2a>
        size_ = vector.size_;
 23f985e:	686b      	ldr	r3, [r5, #4]
 23f9860:	6063      	str	r3, [r4, #4]
}
 23f9862:	4620      	mov	r0, r4
 23f9864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f9868 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f9868:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f986a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f986c:	4604      	mov	r4, r0
 23f986e:	460d      	mov	r5, r1
 23f9870:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f9872:	d914      	bls.n	23f989e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23f9874:	4290      	cmp	r0, r2
 23f9876:	d213      	bcs.n	23f98a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23f9878:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23f987c:	1a75      	subs	r5, r6, r1
 23f987e:	f1a1 0710 	sub.w	r7, r1, #16
 23f9882:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f9884:	42b7      	cmp	r7, r6
 23f9886:	d018      	beq.n	23f98ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23f9888:	b11c      	cbz	r4, 23f9892 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23f988a:	4631      	mov	r1, r6
 23f988c:	4620      	mov	r0, r4
 23f988e:	f000 fd48 	bl	23fa322 <_ZN6StringC1EOS_>
                end->~T();
 23f9892:	4630      	mov	r0, r6
 23f9894:	f000 fcc8 	bl	23fa228 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f9898:	3e10      	subs	r6, #16
 23f989a:	3c10      	subs	r4, #16
 23f989c:	e7f2      	b.n	23f9884 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f989e:	d00c      	beq.n	23f98ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23f98a0:	42b5      	cmp	r5, r6
 23f98a2:	d00a      	beq.n	23f98ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23f98a4:	b11c      	cbz	r4, 23f98ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23f98a6:	4629      	mov	r1, r5
 23f98a8:	4620      	mov	r0, r4
 23f98aa:	f000 fd3a 	bl	23fa322 <_ZN6StringC1EOS_>
                p->~T();
 23f98ae:	4628      	mov	r0, r5
 23f98b0:	f000 fcba 	bl	23fa228 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f98b4:	3510      	adds	r5, #16
 23f98b6:	3410      	adds	r4, #16
 23f98b8:	e7f2      	b.n	23f98a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23f98ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f98bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23f98bc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23f98be:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23f98c0:	4605      	mov	r5, r0
        if (n > 0) {
 23f98c2:	dd11      	ble.n	23f98e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23f98c4:	0130      	lsls	r0, r6, #4
 23f98c6:	f7fe fe9b 	bl	23f8600 <malloc>
            if (!d) {
 23f98ca:	4604      	mov	r4, r0
 23f98cc:	b158      	cbz	r0, 23f98e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23f98ce:	e9d5 1200 	ldrd	r1, r2, [r5]
 23f98d2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23f98d6:	f7ff ffc7 	bl	23f9868 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f98da:	6828      	ldr	r0, [r5, #0]
 23f98dc:	f7fe fe9e 	bl	23f861c <free>
        return true;
 23f98e0:	2001      	movs	r0, #1
        data_ = d;
 23f98e2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23f98e4:	60ae      	str	r6, [r5, #8]
    }
 23f98e6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23f98e8:	2400      	movs	r4, #0
 23f98ea:	e7f6      	b.n	23f98da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023f98ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23f98ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f98f0:	4690      	mov	r8, r2
        capacity_(0) {
 23f98f2:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23f98f4:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23f98f6:	b095      	sub	sp, #84	; 0x54
 23f98f8:	9103      	str	r1, [sp, #12]
    return size_;
 23f98fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23f98fe:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23f9900:	4299      	cmp	r1, r3
        capacity_(0) {
 23f9902:	e9c0 3300 	strd	r3, r3, [r0]
 23f9906:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23f990a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23f990e:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23f9912:	7602      	strb	r2, [r0, #24]
 23f9914:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23f9916:	dc23      	bgt.n	23f9960 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23f9918:	e9d8 5700 	ldrd	r5, r7, [r8]
 23f991c:	2314      	movs	r3, #20
 23f991e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23f9922:	42af      	cmp	r7, r5
 23f9924:	d03b      	beq.n	23f999e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23f9926:	4629      	mov	r1, r5
 23f9928:	a80b      	add	r0, sp, #44	; 0x2c
 23f992a:	f000 fcfa 	bl	23fa322 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23f992e:	a90b      	add	r1, sp, #44	; 0x2c
 23f9930:	a80f      	add	r0, sp, #60	; 0x3c
 23f9932:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23f9934:	f000 fcf5 	bl	23fa322 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f9938:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23f993c:	4299      	cmp	r1, r3
 23f993e:	da1b      	bge.n	23f9978 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23f9940:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23f9942:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23f9944:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23f9948:	4631      	mov	r1, r6
 23f994a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23f994e:	f106 0010 	add.w	r0, r6, #16
 23f9952:	f7ff ff89 	bl	23f9868 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23f9956:	b9ee      	cbnz	r6, 23f9994 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23f9958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23f995a:	3301      	adds	r3, #1
 23f995c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23f995e:	e011      	b.n	23f9984 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23f9960:	a808      	add	r0, sp, #32
 23f9962:	f7ff ffab 	bl	23f98bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23f9966:	2800      	cmp	r0, #0
 23f9968:	d1d6      	bne.n	23f9918 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23f996a:	a808      	add	r0, sp, #32
 23f996c:	f7fe ff2b 	bl	23f87c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23f9970:	4620      	mov	r0, r4
 23f9972:	b015      	add	sp, #84	; 0x54
 23f9974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f9978:	3101      	adds	r1, #1
 23f997a:	a808      	add	r0, sp, #32
 23f997c:	f7ff ff9e 	bl	23f98bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23f9980:	2800      	cmp	r0, #0
 23f9982:	d1dd      	bne.n	23f9940 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23f9984:	a80f      	add	r0, sp, #60	; 0x3c
 23f9986:	f000 fc4f 	bl	23fa228 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23f998a:	a80b      	add	r0, sp, #44	; 0x2c
 23f998c:	f000 fc4c 	bl	23fa228 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23f9990:	3514      	adds	r5, #20
 23f9992:	e7c6      	b.n	23f9922 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23f9994:	4630      	mov	r0, r6
 23f9996:	a90f      	add	r1, sp, #60	; 0x3c
 23f9998:	f000 fcc3 	bl	23fa322 <_ZN6StringC1EOS_>
 23f999c:	e7dc      	b.n	23f9958 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23f999e:	2600      	movs	r6, #0
 23f99a0:	f04f 0914 	mov.w	r9, #20
 23f99a4:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23f99a8:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23f99aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23f99ae:	429e      	cmp	r6, r3
 23f99b0:	da7c      	bge.n	23f9aac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23f99b2:	0133      	lsls	r3, r6, #4
 23f99b4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23f99b6:	9306      	str	r3, [sp, #24]
        if (!category) {
 23f99b8:	b90b      	cbnz	r3, 23f99be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23f99ba:	3601      	adds	r6, #1
 23f99bc:	e7f5      	b.n	23f99aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23f99be:	2300      	movs	r3, #0
 23f99c0:	9307      	str	r3, [sp, #28]
 23f99c2:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23f99c6:	ad0b      	add	r5, sp, #44	; 0x2c
 23f99c8:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23f99ca:	a907      	add	r1, sp, #28
 23f99cc:	a806      	add	r0, sp, #24
 23f99ce:	f7ff fa84 	bl	23f8eda <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23f99d2:	4682      	mov	sl, r0
 23f99d4:	2800      	cmp	r0, #0
 23f99d6:	d0f0      	beq.n	23f99ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23f99d8:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23f99dc:	4601      	mov	r1, r0
            bool found = false;
 23f99de:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23f99e2:	4628      	mov	r0, r5
 23f99e4:	9a07      	ldr	r2, [sp, #28]
 23f99e6:	f10d 0317 	add.w	r3, sp, #23
 23f99ea:	f7ff fb13 	bl	23f9014 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f99ee:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23f99f2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f99f4:	2f00      	cmp	r7, #0
 23f99f6:	d14a      	bne.n	23f9a8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23f99f8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23f99fc:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23f9a00:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23f9a04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f9a08:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23f9a0c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23f9a10:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f9a12:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23f9a16:	4293      	cmp	r3, r2
 23f9a18:	db17      	blt.n	23f9a4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23f9a1a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23f9a1e:	f1ba 0f00 	cmp.w	sl, #0
 23f9a22:	dd30      	ble.n	23f9a86 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23f9a24:	fb09 f00a 	mul.w	r0, r9, sl
 23f9a28:	f7fe fdea 	bl	23f8600 <malloc>
            if (!d) {
 23f9a2c:	4683      	mov	fp, r0
 23f9a2e:	b360      	cbz	r0, 23f9a8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23f9a30:	e9d5 1200 	ldrd	r1, r2, [r5]
 23f9a34:	fb09 1202 	mla	r2, r9, r2, r1
 23f9a38:	f7ff fe7c 	bl	23f9734 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23f9a3c:	6828      	ldr	r0, [r5, #0]
 23f9a3e:	f7fe fded 	bl	23f861c <free>
        data_ = d;
 23f9a42:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23f9a46:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23f9a4a:	682b      	ldr	r3, [r5, #0]
 23f9a4c:	9a01      	ldr	r2, [sp, #4]
 23f9a4e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23f9a52:	686a      	ldr	r2, [r5, #4]
 23f9a54:	4651      	mov	r1, sl
 23f9a56:	fb09 3202 	mla	r2, r9, r2, r3
 23f9a5a:	f10a 0014 	add.w	r0, sl, #20
 23f9a5e:	f7ff fe69 	bl	23f9734 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23f9a62:	f1ba 0f00 	cmp.w	sl, #0
 23f9a66:	d003      	beq.n	23f9a70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23f9a68:	4650      	mov	r0, sl
 23f9a6a:	a90f      	add	r1, sp, #60	; 0x3c
 23f9a6c:	f7ff fabf 	bl	23f8fee <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23f9a70:	686b      	ldr	r3, [r5, #4]
 23f9a72:	3301      	adds	r3, #1
 23f9a74:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23f9a76:	a811      	add	r0, sp, #68	; 0x44
 23f9a78:	f7ff fc85 	bl	23f9386 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f9a7c:	b13f      	cbz	r7, 23f9a8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23f9a7e:	a80b      	add	r0, sp, #44	; 0x2c
 23f9a80:	f7ff fc81 	bl	23f9386 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23f9a84:	e771      	b.n	23f996a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23f9a86:	46bb      	mov	fp, r7
 23f9a88:	e7d8      	b.n	23f9a3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f9a8a:	2701      	movs	r7, #1
 23f9a8c:	e7f3      	b.n	23f9a76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23f9a8e:	9b01      	ldr	r3, [sp, #4]
 23f9a90:	682d      	ldr	r5, [r5, #0]
 23f9a92:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23f9a96:	9b06      	ldr	r3, [sp, #24]
 23f9a98:	781b      	ldrb	r3, [r3, #0]
 23f9a9a:	b92b      	cbnz	r3, 23f9aa8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23f9a9c:	f8d8 3000 	ldr.w	r3, [r8]
 23f9aa0:	9a02      	ldr	r2, [sp, #8]
 23f9aa2:	4413      	add	r3, r2
 23f9aa4:	7c1b      	ldrb	r3, [r3, #16]
 23f9aa6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23f9aa8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23f9aaa:	e78e      	b.n	23f99ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f9aac:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f9aae:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f9ab0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f9ab2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f9ab4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f9ab6:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23f9ab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23f9aba:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f9abc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f9abe:	60a2      	str	r2, [r4, #8]
 23f9ac0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23f9ac2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f9ac4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f9ac6:	60e2      	str	r2, [r4, #12]
 23f9ac8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23f9aca:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f9acc:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23f9ace:	6122      	str	r2, [r4, #16]
 23f9ad0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23f9ad2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23f9ad4:	9b03      	ldr	r3, [sp, #12]
 23f9ad6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23f9ad8:	6162      	str	r2, [r4, #20]
 23f9ada:	7623      	strb	r3, [r4, #24]
 23f9adc:	e7cf      	b.n	23f9a7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023f9ae0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23f9ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f9ae2:	4604      	mov	r4, r0
        filter_(level, filters) {
 23f9ae4:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23f9ae6:	4617      	mov	r7, r2
 23f9ae8:	b087      	sub	sp, #28
 23f9aea:	460d      	mov	r5, r1
        stream_(&stream) {
 23f9aec:	4668      	mov	r0, sp
 23f9aee:	4619      	mov	r1, r3
 23f9af0:	f7ff fe94 	bl	23f981c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f9af4:	4b0b      	ldr	r3, [pc, #44]	; (23f9b24 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23f9af6:	4669      	mov	r1, sp
 23f9af8:	f846 3b04 	str.w	r3, [r6], #4
 23f9afc:	a803      	add	r0, sp, #12
 23f9afe:	f7ff fe8d 	bl	23f981c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f9b02:	4639      	mov	r1, r7
 23f9b04:	aa03      	add	r2, sp, #12
 23f9b06:	4630      	mov	r0, r6
 23f9b08:	f7ff fef0 	bl	23f98ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f9b0c:	a803      	add	r0, sp, #12
 23f9b0e:	f7ff fc27 	bl	23f9360 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f9b12:	4668      	mov	r0, sp
 23f9b14:	f7ff fc24 	bl	23f9360 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23f9b18:	4620      	mov	r0, r4
        stream_(&stream) {
 23f9b1a:	4b03      	ldr	r3, [pc, #12]	; (23f9b28 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23f9b1c:	6225      	str	r5, [r4, #32]
 23f9b1e:	6023      	str	r3, [r4, #0]
}
 23f9b20:	b007      	add	sp, #28
 23f9b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f9b24:	023ff22c 	.word	0x023ff22c
 23f9b28:	023ff8b4 	.word	0x023ff8b4

023f9b2c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23f9b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f9b2e:	460f      	mov	r7, r1
 23f9b30:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23f9b32:	4638      	mov	r0, r7
 23f9b34:	491c      	ldr	r1, [pc, #112]	; (23f9ba8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23f9b36:	4616      	mov	r6, r2
 23f9b38:	461d      	mov	r5, r3
 23f9b3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23f9b3c:	f7f9 feb2 	bl	23f38a4 <strcmp>
 23f9b40:	b9c0      	cbnz	r0, 23f9b74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23f9b42:	b1a4      	cbz	r4, 23f9b6e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23f9b44:	4629      	mov	r1, r5
 23f9b46:	a801      	add	r0, sp, #4
 23f9b48:	f7ff fc66 	bl	23f9418 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23f9b4c:	2024      	movs	r0, #36	; 0x24
 23f9b4e:	4917      	ldr	r1, [pc, #92]	; (23f9bac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23f9b50:	f001 fe8e 	bl	23fb870 <_ZnwjRKSt9nothrow_t>
 23f9b54:	4605      	mov	r5, r0
 23f9b56:	b130      	cbz	r0, 23f9b66 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23f9b58:	ab01      	add	r3, sp, #4
 23f9b5a:	4632      	mov	r2, r6
 23f9b5c:	4621      	mov	r1, r4
 23f9b5e:	f7ff ffbf 	bl	23f9ae0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f9b62:	4b13      	ldr	r3, [pc, #76]	; (23f9bb0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23f9b64:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23f9b66:	a801      	add	r0, sp, #4
 23f9b68:	f7ff fbfa 	bl	23f9360 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f9b6c:	462c      	mov	r4, r5
}
 23f9b6e:	4620      	mov	r0, r4
 23f9b70:	b005      	add	sp, #20
 23f9b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23f9b74:	4638      	mov	r0, r7
 23f9b76:	490f      	ldr	r1, [pc, #60]	; (23f9bb4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23f9b78:	f7f9 fe94 	bl	23f38a4 <strcmp>
 23f9b7c:	b990      	cbnz	r0, 23f9ba4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23f9b7e:	2c00      	cmp	r4, #0
 23f9b80:	d0f5      	beq.n	23f9b6e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23f9b82:	4629      	mov	r1, r5
 23f9b84:	a801      	add	r0, sp, #4
 23f9b86:	f7ff fc47 	bl	23f9418 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23f9b8a:	2024      	movs	r0, #36	; 0x24
 23f9b8c:	4907      	ldr	r1, [pc, #28]	; (23f9bac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23f9b8e:	f001 fe6f 	bl	23fb870 <_ZnwjRKSt9nothrow_t>
 23f9b92:	4605      	mov	r5, r0
 23f9b94:	2800      	cmp	r0, #0
 23f9b96:	d0e6      	beq.n	23f9b66 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23f9b98:	4632      	mov	r2, r6
 23f9b9a:	4621      	mov	r1, r4
 23f9b9c:	ab01      	add	r3, sp, #4
 23f9b9e:	f7ff ff9f 	bl	23f9ae0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f9ba2:	e7e0      	b.n	23f9b66 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23f9ba4:	2400      	movs	r4, #0
 23f9ba6:	e7e2      	b.n	23f9b6e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23f9ba8:	023ff84d 	.word	0x023ff84d
 23f9bac:	023ffaac 	.word	0x023ffaac
 23f9bb0:	023ff8cc 	.word	0x023ff8cc
 23f9bb4:	023ff851 	.word	0x023ff851

023f9bb8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23f9bb8:	4b01      	ldr	r3, [pc, #4]	; (23f9bc0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23f9bba:	4a02      	ldr	r2, [pc, #8]	; (23f9bc4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23f9bbc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23f9bbe:	4770      	bx	lr
 23f9bc0:	1007ae20 	.word	0x1007ae20
 23f9bc4:	023ff862 	.word	0x023ff862

023f9bc8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f9bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f9bcc:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23f9bce:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f9bd2:	4604      	mov	r4, r0
 23f9bd4:	460e      	mov	r6, r1
 23f9bd6:	4617      	mov	r7, r2
 23f9bd8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23f9bda:	f001 fb67 	bl	23fb2ac <_Z16_fetch_usbserialv>
 23f9bde:	4581      	cmp	r9, r0
 23f9be0:	d04d      	beq.n	23f9c7e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23f9be2:	792b      	ldrb	r3, [r5, #4]
 23f9be4:	0719      	lsls	r1, r3, #28
 23f9be6:	d504      	bpl.n	23f9bf2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23f9be8:	4620      	mov	r0, r4
 23f9bea:	696a      	ldr	r2, [r5, #20]
 23f9bec:	4954      	ldr	r1, [pc, #336]	; (23f9d40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23f9bee:	f7ff fa76 	bl	23f90de <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23f9bf2:	f1b8 0f00 	cmp.w	r8, #0
 23f9bf6:	d00d      	beq.n	23f9c14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23f9bf8:	215b      	movs	r1, #91	; 0x5b
 23f9bfa:	4620      	mov	r0, r4
 23f9bfc:	f7ff f9e2 	bl	23f8fc4 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23f9c00:	4641      	mov	r1, r8
 23f9c02:	4620      	mov	r0, r4
 23f9c04:	f7ff f9cf 	bl	23f8fa6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23f9c08:	6823      	ldr	r3, [r4, #0]
 23f9c0a:	2202      	movs	r2, #2
 23f9c0c:	4620      	mov	r0, r4
 23f9c0e:	68db      	ldr	r3, [r3, #12]
 23f9c10:	494c      	ldr	r1, [pc, #304]	; (23f9d44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23f9c12:	4798      	blx	r3
    if (attr.has_file) {
 23f9c14:	792b      	ldrb	r3, [r5, #4]
 23f9c16:	07da      	lsls	r2, r3, #31
 23f9c18:	d524      	bpl.n	23f9c64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23f9c1a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23f9c1e:	212f      	movs	r1, #47	; 0x2f
 23f9c20:	4640      	mov	r0, r8
 23f9c22:	f003 f8a1 	bl	23fcd68 <strrchr>
    if (s1) {
 23f9c26:	b108      	cbz	r0, 23f9c2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23f9c28:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23f9c2c:	4641      	mov	r1, r8
 23f9c2e:	4620      	mov	r0, r4
 23f9c30:	f7ff f9b9 	bl	23f8fa6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23f9c34:	792b      	ldrb	r3, [r5, #4]
 23f9c36:	079b      	lsls	r3, r3, #30
 23f9c38:	d508      	bpl.n	23f9c4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23f9c3a:	213a      	movs	r1, #58	; 0x3a
 23f9c3c:	4620      	mov	r0, r4
 23f9c3e:	f7ff f9c1 	bl	23f8fc4 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23f9c42:	4620      	mov	r0, r4
 23f9c44:	68ea      	ldr	r2, [r5, #12]
 23f9c46:	4940      	ldr	r1, [pc, #256]	; (23f9d48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23f9c48:	f7ff fa49 	bl	23f90de <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23f9c4c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23f9c4e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23f9c50:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23f9c54:	4620      	mov	r0, r4
            write(", ", 2);
 23f9c56:	f04f 0202 	mov.w	r2, #2
 23f9c5a:	68db      	ldr	r3, [r3, #12]
 23f9c5c:	bf14      	ite	ne
 23f9c5e:	493b      	ldrne	r1, [pc, #236]	; (23f9d4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23f9c60:	493b      	ldreq	r1, [pc, #236]	; (23f9d50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23f9c62:	4798      	blx	r3
    if (attr.has_function) {
 23f9c64:	792b      	ldrb	r3, [r5, #4]
 23f9c66:	0758      	lsls	r0, r3, #29
 23f9c68:	d51d      	bpl.n	23f9ca6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23f9c6a:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23f9c6c:	460b      	mov	r3, r1
 23f9c6e:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23f9c70:	f813 0b01 	ldrb.w	r0, [r3], #1
 23f9c74:	b160      	cbz	r0, 23f9c90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23f9c76:	2820      	cmp	r0, #32
 23f9c78:	d108      	bne.n	23f9c8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23f9c7a:	4619      	mov	r1, r3
 23f9c7c:	e7f7      	b.n	23f9c6e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23f9c7e:	4835      	ldr	r0, [pc, #212]	; (23f9d54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23f9c80:	f000 f983 	bl	23f9f8a <_ZN5spark12NetworkClass9listeningEv>
 23f9c84:	2800      	cmp	r0, #0
 23f9c86:	d0ac      	beq.n	23f9be2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23f9c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23f9c8c:	2828      	cmp	r0, #40	; 0x28
 23f9c8e:	d1ee      	bne.n	23f9c6e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23f9c90:	6823      	ldr	r3, [r4, #0]
 23f9c92:	1a52      	subs	r2, r2, r1
 23f9c94:	4620      	mov	r0, r4
 23f9c96:	68db      	ldr	r3, [r3, #12]
 23f9c98:	4798      	blx	r3
        write("(): ", 4);
 23f9c9a:	6823      	ldr	r3, [r4, #0]
 23f9c9c:	2204      	movs	r2, #4
 23f9c9e:	4620      	mov	r0, r4
 23f9ca0:	68db      	ldr	r3, [r3, #12]
 23f9ca2:	492d      	ldr	r1, [pc, #180]	; (23f9d58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23f9ca4:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23f9ca6:	2100      	movs	r1, #0
 23f9ca8:	4638      	mov	r0, r7
 23f9caa:	f7fe fadb 	bl	23f8264 <log_level_name>
 23f9cae:	4601      	mov	r1, r0
    write(s);
 23f9cb0:	4620      	mov	r0, r4
 23f9cb2:	f7ff f978 	bl	23f8fa6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23f9cb6:	6823      	ldr	r3, [r4, #0]
 23f9cb8:	2202      	movs	r2, #2
 23f9cba:	4620      	mov	r0, r4
 23f9cbc:	68db      	ldr	r3, [r3, #12]
 23f9cbe:	4924      	ldr	r1, [pc, #144]	; (23f9d50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23f9cc0:	4798      	blx	r3
    if (msg) {
 23f9cc2:	b11e      	cbz	r6, 23f9ccc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23f9cc4:	4631      	mov	r1, r6
 23f9cc6:	4620      	mov	r0, r4
 23f9cc8:	f7ff f96d 	bl	23f8fa6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23f9ccc:	792b      	ldrb	r3, [r5, #4]
 23f9cce:	f013 0f30 	tst.w	r3, #48	; 0x30
 23f9cd2:	d02c      	beq.n	23f9d2e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23f9cd4:	6823      	ldr	r3, [r4, #0]
 23f9cd6:	4921      	ldr	r1, [pc, #132]	; (23f9d5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23f9cd8:	68db      	ldr	r3, [r3, #12]
 23f9cda:	2202      	movs	r2, #2
 23f9cdc:	4620      	mov	r0, r4
 23f9cde:	4798      	blx	r3
        if (attr.has_code) {
 23f9ce0:	792b      	ldrb	r3, [r5, #4]
 23f9ce2:	06d9      	lsls	r1, r3, #27
 23f9ce4:	d50a      	bpl.n	23f9cfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23f9ce6:	6823      	ldr	r3, [r4, #0]
 23f9ce8:	2207      	movs	r2, #7
 23f9cea:	4620      	mov	r0, r4
 23f9cec:	491c      	ldr	r1, [pc, #112]	; (23f9d60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23f9cee:	68db      	ldr	r3, [r3, #12]
 23f9cf0:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23f9cf2:	4620      	mov	r0, r4
 23f9cf4:	69aa      	ldr	r2, [r5, #24]
 23f9cf6:	491b      	ldr	r1, [pc, #108]	; (23f9d64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23f9cf8:	f7ff f9f1 	bl	23f90de <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23f9cfc:	792b      	ldrb	r3, [r5, #4]
 23f9cfe:	069a      	lsls	r2, r3, #26
 23f9d00:	d511      	bpl.n	23f9d26 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23f9d02:	06db      	lsls	r3, r3, #27
 23f9d04:	d505      	bpl.n	23f9d12 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23f9d06:	6823      	ldr	r3, [r4, #0]
 23f9d08:	2202      	movs	r2, #2
 23f9d0a:	4620      	mov	r0, r4
 23f9d0c:	68db      	ldr	r3, [r3, #12]
 23f9d0e:	490f      	ldr	r1, [pc, #60]	; (23f9d4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23f9d10:	4798      	blx	r3
            write("details = ", 10);
 23f9d12:	6823      	ldr	r3, [r4, #0]
 23f9d14:	4620      	mov	r0, r4
 23f9d16:	4914      	ldr	r1, [pc, #80]	; (23f9d68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23f9d18:	220a      	movs	r2, #10
 23f9d1a:	68db      	ldr	r3, [r3, #12]
 23f9d1c:	4798      	blx	r3
            write(attr.details);
 23f9d1e:	4620      	mov	r0, r4
 23f9d20:	69e9      	ldr	r1, [r5, #28]
 23f9d22:	f7ff f940 	bl	23f8fa6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23f9d26:	215d      	movs	r1, #93	; 0x5d
 23f9d28:	4620      	mov	r0, r4
 23f9d2a:	f7ff f94b 	bl	23f8fc4 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23f9d2e:	6823      	ldr	r3, [r4, #0]
 23f9d30:	4620      	mov	r0, r4
}
 23f9d32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23f9d36:	2202      	movs	r2, #2
 23f9d38:	68db      	ldr	r3, [r3, #12]
 23f9d3a:	490c      	ldr	r1, [pc, #48]	; (23f9d6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23f9d3c:	4718      	bx	r3
 23f9d3e:	bf00      	nop
 23f9d40:	023ff866 	.word	0x023ff866
 23f9d44:	023ff86d 	.word	0x023ff86d
 23f9d48:	023ff6ee 	.word	0x023ff6ee
 23f9d4c:	023ff06d 	.word	0x023ff06d
 23f9d50:	023ff207 	.word	0x023ff207
 23f9d54:	1007ae4c 	.word	0x1007ae4c
 23f9d58:	023ff205 	.word	0x023ff205
 23f9d5c:	023ff20a 	.word	0x023ff20a
 23f9d60:	023ff870 	.word	0x023ff870
 23f9d64:	023ff878 	.word	0x023ff878
 23f9d68:	023ff217 	.word	0x023ff217
 23f9d6c:	023ff87b 	.word	0x023ff87b

023f9d70 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23f9d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f9d74:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23f9d76:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23f9d78:	460d      	mov	r5, r1
 23f9d7a:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23f9d7c:	f001 fa96 	bl	23fb2ac <_Z16_fetch_usbserialv>
 23f9d80:	4287      	cmp	r7, r0
 23f9d82:	d007      	beq.n	23f9d94 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23f9d84:	6a20      	ldr	r0, [r4, #32]
 23f9d86:	4632      	mov	r2, r6
 23f9d88:	6803      	ldr	r3, [r0, #0]
 23f9d8a:	4629      	mov	r1, r5
}
 23f9d8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23f9d90:	68db      	ldr	r3, [r3, #12]
 23f9d92:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23f9d94:	4803      	ldr	r0, [pc, #12]	; (23f9da4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23f9d96:	f000 f8f8 	bl	23f9f8a <_ZN5spark12NetworkClass9listeningEv>
 23f9d9a:	2800      	cmp	r0, #0
 23f9d9c:	d0f2      	beq.n	23f9d84 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23f9d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f9da2:	bf00      	nop
 23f9da4:	1007ae4c 	.word	0x1007ae4c

023f9da8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f9da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f9dac:	b085      	sub	sp, #20
    return stream_;
 23f9dae:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23f9db2:	4605      	mov	r5, r0
 23f9db4:	460f      	mov	r7, r1
 23f9db6:	4690      	mov	r8, r2
 23f9db8:	461e      	mov	r6, r3
 23f9dba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23f9dbc:	f001 fa76 	bl	23fb2ac <_Z16_fetch_usbserialv>
 23f9dc0:	4581      	cmp	r9, r0
 23f9dc2:	d105      	bne.n	23f9dd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23f9dc4:	4849      	ldr	r0, [pc, #292]	; (23f9eec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23f9dc6:	f000 f8e0 	bl	23f9f8a <_ZN5spark12NetworkClass9listeningEv>
 23f9dca:	2800      	cmp	r0, #0
 23f9dcc:	f040 808a 	bne.w	23f9ee4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23f9dd0:	f04f 0900 	mov.w	r9, #0
 23f9dd4:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23f9dd6:	4a46      	ldr	r2, [pc, #280]	; (23f9ef0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23f9dd8:	a801      	add	r0, sp, #4
 23f9dda:	9201      	str	r2, [sp, #4]
 23f9ddc:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23f9dde:	f88d 9008 	strb.w	r9, [sp, #8]
 23f9de2:	f7fe ffbc 	bl	23f8d5e <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23f9de6:	4649      	mov	r1, r9
 23f9de8:	4640      	mov	r0, r8
 23f9dea:	f7fe fa3b 	bl	23f8264 <log_level_name>
 23f9dee:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23f9df0:	4940      	ldr	r1, [pc, #256]	; (23f9ef4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23f9df2:	2201      	movs	r2, #1
 23f9df4:	a801      	add	r0, sp, #4
 23f9df6:	f7ff f841 	bl	23f8e7c <_ZN5spark10JSONWriter4nameEPKcj>
 23f9dfa:	4641      	mov	r1, r8
 23f9dfc:	f7ff f8c5 	bl	23f8f8a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23f9e00:	b13f      	cbz	r7, 23f9e12 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23f9e02:	493d      	ldr	r1, [pc, #244]	; (23f9ef8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23f9e04:	2201      	movs	r2, #1
 23f9e06:	a801      	add	r0, sp, #4
 23f9e08:	f7ff f838 	bl	23f8e7c <_ZN5spark10JSONWriter4nameEPKcj>
 23f9e0c:	4639      	mov	r1, r7
 23f9e0e:	f7ff f8bc 	bl	23f8f8a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23f9e12:	b13e      	cbz	r6, 23f9e24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23f9e14:	4939      	ldr	r1, [pc, #228]	; (23f9efc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23f9e16:	2201      	movs	r2, #1
 23f9e18:	a801      	add	r0, sp, #4
 23f9e1a:	f7ff f82f 	bl	23f8e7c <_ZN5spark10JSONWriter4nameEPKcj>
 23f9e1e:	4631      	mov	r1, r6
 23f9e20:	f7ff f8b3 	bl	23f8f8a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23f9e24:	7923      	ldrb	r3, [r4, #4]
 23f9e26:	07df      	lsls	r7, r3, #31
 23f9e28:	d50e      	bpl.n	23f9e48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23f9e2a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23f9e2c:	212f      	movs	r1, #47	; 0x2f
 23f9e2e:	4630      	mov	r0, r6
 23f9e30:	f002 ff9a 	bl	23fcd68 <strrchr>
    if (s1) {
 23f9e34:	b100      	cbz	r0, 23f9e38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23f9e36:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23f9e38:	4931      	ldr	r1, [pc, #196]	; (23f9f00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23f9e3a:	2201      	movs	r2, #1
 23f9e3c:	a801      	add	r0, sp, #4
 23f9e3e:	f7ff f81d 	bl	23f8e7c <_ZN5spark10JSONWriter4nameEPKcj>
 23f9e42:	4631      	mov	r1, r6
 23f9e44:	f7ff f8a1 	bl	23f8f8a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23f9e48:	7923      	ldrb	r3, [r4, #4]
 23f9e4a:	079e      	lsls	r6, r3, #30
 23f9e4c:	d507      	bpl.n	23f9e5e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23f9e4e:	492d      	ldr	r1, [pc, #180]	; (23f9f04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23f9e50:	2202      	movs	r2, #2
 23f9e52:	a801      	add	r0, sp, #4
 23f9e54:	f7ff f812 	bl	23f8e7c <_ZN5spark10JSONWriter4nameEPKcj>
 23f9e58:	68e1      	ldr	r1, [r4, #12]
 23f9e5a:	f7fe ff8d 	bl	23f8d78 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23f9e5e:	7923      	ldrb	r3, [r4, #4]
 23f9e60:	0758      	lsls	r0, r3, #29
 23f9e62:	d514      	bpl.n	23f9e8e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23f9e64:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23f9e66:	4633      	mov	r3, r6
 23f9e68:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23f9e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f9e6e:	b12a      	cbz	r2, 23f9e7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23f9e70:	2a20      	cmp	r2, #32
 23f9e72:	d101      	bne.n	23f9e78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23f9e74:	461e      	mov	r6, r3
 23f9e76:	e7f7      	b.n	23f9e68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23f9e78:	2a28      	cmp	r2, #40	; 0x28
 23f9e7a:	d1f5      	bne.n	23f9e68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23f9e7c:	2202      	movs	r2, #2
 23f9e7e:	4922      	ldr	r1, [pc, #136]	; (23f9f08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23f9e80:	a801      	add	r0, sp, #4
 23f9e82:	f7fe fffb 	bl	23f8e7c <_ZN5spark10JSONWriter4nameEPKcj>
 23f9e86:	4631      	mov	r1, r6
 23f9e88:	1bba      	subs	r2, r7, r6
 23f9e8a:	f7ff f807 	bl	23f8e9c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23f9e8e:	7923      	ldrb	r3, [r4, #4]
 23f9e90:	0719      	lsls	r1, r3, #28
 23f9e92:	d507      	bpl.n	23f9ea4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23f9e94:	491d      	ldr	r1, [pc, #116]	; (23f9f0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23f9e96:	2201      	movs	r2, #1
 23f9e98:	a801      	add	r0, sp, #4
 23f9e9a:	f7fe ffef 	bl	23f8e7c <_ZN5spark10JSONWriter4nameEPKcj>
 23f9e9e:	6961      	ldr	r1, [r4, #20]
 23f9ea0:	f7fe ff7c 	bl	23f8d9c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23f9ea4:	7923      	ldrb	r3, [r4, #4]
 23f9ea6:	06da      	lsls	r2, r3, #27
 23f9ea8:	d508      	bpl.n	23f9ebc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23f9eaa:	2204      	movs	r2, #4
 23f9eac:	4918      	ldr	r1, [pc, #96]	; (23f9f10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23f9eae:	eb0d 0002 	add.w	r0, sp, r2
 23f9eb2:	f7fe ffe3 	bl	23f8e7c <_ZN5spark10JSONWriter4nameEPKcj>
 23f9eb6:	69a1      	ldr	r1, [r4, #24]
 23f9eb8:	f7fe ff5e 	bl	23f8d78 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23f9ebc:	7923      	ldrb	r3, [r4, #4]
 23f9ebe:	069b      	lsls	r3, r3, #26
 23f9ec0:	d507      	bpl.n	23f9ed2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23f9ec2:	4914      	ldr	r1, [pc, #80]	; (23f9f14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23f9ec4:	2206      	movs	r2, #6
 23f9ec6:	a801      	add	r0, sp, #4
 23f9ec8:	f7fe ffd8 	bl	23f8e7c <_ZN5spark10JSONWriter4nameEPKcj>
 23f9ecc:	69e1      	ldr	r1, [r4, #28]
 23f9ece:	f7ff f85c 	bl	23f8f8a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23f9ed2:	a801      	add	r0, sp, #4
 23f9ed4:	f7fe ff2d 	bl	23f8d32 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23f9ed8:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23f9eda:	2202      	movs	r2, #2
 23f9edc:	6803      	ldr	r3, [r0, #0]
 23f9ede:	490e      	ldr	r1, [pc, #56]	; (23f9f18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23f9ee0:	68db      	ldr	r3, [r3, #12]
 23f9ee2:	4798      	blx	r3
}
 23f9ee4:	b005      	add	sp, #20
 23f9ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23f9eea:	bf00      	nop
 23f9eec:	1007ae4c 	.word	0x1007ae4c
 23f9ef0:	023ff89c 	.word	0x023ff89c
 23f9ef4:	023ff843 	.word	0x023ff843
 23f9ef8:	023ff87e 	.word	0x023ff87e
 23f9efc:	023ffec0 	.word	0x023ffec0
 23f9f00:	023fee33 	.word	0x023fee33
 23f9f04:	023ff880 	.word	0x023ff880
 23f9f08:	023ff883 	.word	0x023ff883
 23f9f0c:	023ff2fd 	.word	0x023ff2fd
 23f9f10:	023ff886 	.word	0x023ff886
 23f9f14:	023ff88b 	.word	0x023ff88b
 23f9f18:	023ff87b 	.word	0x023ff87b

023f9f1c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23f9f1c:	2300      	movs	r3, #0
 23f9f1e:	6840      	ldr	r0, [r0, #4]
 23f9f20:	461a      	mov	r2, r3
 23f9f22:	f7fe ba9b 	b.w	23f845c <network_connect>

023f9f26 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23f9f26:	2200      	movs	r2, #0
 23f9f28:	2102      	movs	r1, #2
 23f9f2a:	6840      	ldr	r0, [r0, #4]
 23f9f2c:	f7fe bab2 	b.w	23f8494 <network_disconnect>

023f9f30 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23f9f30:	2200      	movs	r2, #0
 23f9f32:	6840      	ldr	r0, [r0, #4]
 23f9f34:	4611      	mov	r1, r2
 23f9f36:	f7fe ba9f 	b.w	23f8478 <network_connecting>

023f9f3a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23f9f3a:	2200      	movs	r2, #0
 23f9f3c:	6840      	ldr	r0, [r0, #4]
 23f9f3e:	4611      	mov	r1, r2
 23f9f40:	f7fe bab6 	b.w	23f84b0 <network_ready>

023f9f44 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23f9f44:	2300      	movs	r3, #0
 23f9f46:	6840      	ldr	r0, [r0, #4]
 23f9f48:	461a      	mov	r2, r3
 23f9f4a:	4619      	mov	r1, r3
 23f9f4c:	f7fe babe 	b.w	23f84cc <network_on>

023f9f50 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23f9f50:	2300      	movs	r3, #0
 23f9f52:	6840      	ldr	r0, [r0, #4]
 23f9f54:	461a      	mov	r2, r3
 23f9f56:	4619      	mov	r1, r3
 23f9f58:	f7fe bac6 	b.w	23f84e8 <network_off>

023f9f5c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23f9f5c:	2100      	movs	r1, #0
 23f9f5e:	6840      	ldr	r0, [r0, #4]
 23f9f60:	f7fe bb16 	b.w	23f8590 <network_is_on>

023f9f64 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23f9f64:	2100      	movs	r1, #0
 23f9f66:	6840      	ldr	r0, [r0, #4]
 23f9f68:	f7fe bb20 	b.w	23f85ac <network_is_off>

023f9f6c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23f9f6c:	2200      	movs	r2, #0
 23f9f6e:	6840      	ldr	r0, [r0, #4]
 23f9f70:	f081 0101 	eor.w	r1, r1, #1
 23f9f74:	f7fe bac6 	b.w	23f8504 <network_listen>

023f9f78 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23f9f78:	2200      	movs	r2, #0
 23f9f7a:	6840      	ldr	r0, [r0, #4]
 23f9f7c:	f7fe baec 	b.w	23f8558 <network_set_listen_timeout>

023f9f80 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23f9f80:	2200      	movs	r2, #0
 23f9f82:	6840      	ldr	r0, [r0, #4]
 23f9f84:	4611      	mov	r1, r2
 23f9f86:	f7fe baf5 	b.w	23f8574 <network_get_listen_timeout>

023f9f8a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23f9f8a:	2200      	movs	r2, #0
 23f9f8c:	6840      	ldr	r0, [r0, #4]
 23f9f8e:	4611      	mov	r1, r2
 23f9f90:	f7fe bac6 	b.w	23f8520 <network_listening>

023f9f94 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_preferred(*this, preferred, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23f9f94:	2100      	movs	r1, #0
 23f9f96:	6840      	ldr	r0, [r0, #4]
 23f9f98:	f7fe bb24 	b.w	23f85e4 <network_is_preferred>

023f9f9c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23f9f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f9fa0:	b095      	sub	sp, #84	; 0x54
 23f9fa2:	4614      	mov	r4, r2
 23f9fa4:	460d      	mov	r5, r1
 23f9fa6:	4607      	mov	r7, r0
    IPAddress addr;
 23f9fa8:	f7fe fd5c 	bl	23f8a64 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23f9fac:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23f9fae:	221c      	movs	r2, #28
 23f9fb0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23f9fb2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23f9fb4:	f002 fe5b 	bl	23fcc6e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23f9fb8:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23f9fba:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23f9fbc:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23f9fbe:	2100      	movs	r1, #0
 23f9fc0:	466b      	mov	r3, sp
 23f9fc2:	aa0c      	add	r2, sp, #48	; 0x30
 23f9fc4:	f7fd ff64 	bl	23f7e90 <netdb_getaddrinfo>
    if (!r) {
 23f9fc8:	4604      	mov	r4, r0
 23f9fca:	2800      	cmp	r0, #0
 23f9fcc:	d14b      	bne.n	23fa066 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f9fce:	4602      	mov	r2, r0
 23f9fd0:	2101      	movs	r1, #1
 23f9fd2:	6868      	ldr	r0, [r5, #4]
 23f9fd4:	f7fe fa6c 	bl	23f84b0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f9fd8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f9fda:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f9fdc:	4622      	mov	r2, r4
 23f9fde:	6868      	ldr	r0, [r5, #4]
 23f9fe0:	f7fe fa66 	bl	23f84b0 <network_ready>
        bool ok = false;
 23f9fe4:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f9fe6:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f9fe8:	9e00      	ldr	r6, [sp, #0]
 23f9fea:	2e00      	cmp	r6, #0
 23f9fec:	d03b      	beq.n	23fa066 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23f9fee:	2900      	cmp	r1, #0
 23f9ff0:	d139      	bne.n	23fa066 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23f9ff2:	6873      	ldr	r3, [r6, #4]
 23f9ff4:	2b02      	cmp	r3, #2
 23f9ff6:	d003      	beq.n	23fa000 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23f9ff8:	2b0a      	cmp	r3, #10
 23f9ffa:	d011      	beq.n	23fa020 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f9ffc:	69f6      	ldr	r6, [r6, #28]
 23f9ffe:	e7f4      	b.n	23f9fea <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fa000:	f1b8 0f00 	cmp.w	r8, #0
 23fa004:	d0fa      	beq.n	23f9ffc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fa006:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fa008:	a806      	add	r0, sp, #24
 23fa00a:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fa00c:	1d3c      	adds	r4, r7, #4
 23fa00e:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fa010:	f7fe fd6c 	bl	23f8aec <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fa014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fa016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fa018:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fa01a:	4641      	mov	r1, r8
 23fa01c:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fa01e:	e7ed      	b.n	23f9ffc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fa020:	f1b9 0f00 	cmp.w	r9, #0
 23fa024:	d0ea      	beq.n	23f9ffc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fa026:	2210      	movs	r2, #16
 23fa028:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fa02a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fa02c:	f002 fe1f 	bl	23fcc6e <memset>
                    a.v = 6;
 23fa030:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fa032:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fa034:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fa038:	f104 0308 	add.w	r3, r4, #8
 23fa03c:	3418      	adds	r4, #24
 23fa03e:	462a      	mov	r2, r5
 23fa040:	6818      	ldr	r0, [r3, #0]
 23fa042:	6859      	ldr	r1, [r3, #4]
 23fa044:	3308      	adds	r3, #8
 23fa046:	c203      	stmia	r2!, {r0, r1}
 23fa048:	42a3      	cmp	r3, r4
 23fa04a:	4615      	mov	r5, r2
 23fa04c:	d1f7      	bne.n	23fa03e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fa04e:	a901      	add	r1, sp, #4
 23fa050:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fa052:	1d3c      	adds	r4, r7, #4
 23fa054:	ad07      	add	r5, sp, #28
 23fa056:	f7fe fd13 	bl	23f8a80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fa05a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fa05c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fa05e:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fa060:	4649      	mov	r1, r9
 23fa062:	7023      	strb	r3, [r4, #0]
                    break;
 23fa064:	e7ca      	b.n	23f9ffc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fa066:	9800      	ldr	r0, [sp, #0]
 23fa068:	f7fd ff04 	bl	23f7e74 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fa06c:	4638      	mov	r0, r7
 23fa06e:	b015      	add	sp, #84	; 0x54
 23fa070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fa074 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23fa074:	3803      	subs	r0, #3
 23fa076:	2802      	cmp	r0, #2
 23fa078:	bf9a      	itte	ls
 23fa07a:	4b02      	ldrls	r3, [pc, #8]	; (23fa084 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23fa07c:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23fa080:	4801      	ldrhi	r0, [pc, #4]	; (23fa088 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23fa082:	4770      	bx	lr
 23fa084:	023ff90c 	.word	0x023ff90c
 23fa088:	1007ae4c 	.word	0x1007ae4c

023fa08c <_ZN5spark12NetworkClass9preferredEb>:
NetworkClass& NetworkClass::preferred(bool preferred) {
 23fa08c:	b508      	push	{r3, lr}
    network_handle_t network = network_preferred(*this, preferred, nullptr);
 23fa08e:	2200      	movs	r2, #0
 23fa090:	6840      	ldr	r0, [r0, #4]
 23fa092:	f7fe fa99 	bl	23f85c8 <network_preferred>
}
 23fa096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23fa09a:	f7ff bfeb 	b.w	23fa074 <_ZN5spark12NetworkClass4fromEm>
	...

023fa0a0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fa0a0:	4b02      	ldr	r3, [pc, #8]	; (23fa0ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fa0a2:	4a03      	ldr	r2, [pc, #12]	; (23fa0b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fa0a4:	601a      	str	r2, [r3, #0]
 23fa0a6:	2200      	movs	r2, #0
 23fa0a8:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fa0aa:	4770      	bx	lr
 23fa0ac:	1007ae4c 	.word	0x1007ae4c
 23fa0b0:	023ff920 	.word	0x023ff920

023fa0b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fa0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fa0b6:	4606      	mov	r6, r0
 23fa0b8:	460d      	mov	r5, r1
  size_t n = 0;
 23fa0ba:	2400      	movs	r4, #0
 23fa0bc:	188f      	adds	r7, r1, r2
  while (size--) {
 23fa0be:	42bd      	cmp	r5, r7
 23fa0c0:	d00c      	beq.n	23fa0dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fa0c2:	6833      	ldr	r3, [r6, #0]
 23fa0c4:	4630      	mov	r0, r6
 23fa0c6:	689b      	ldr	r3, [r3, #8]
 23fa0c8:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fa0cc:	4798      	blx	r3
     if (chunk>=0)
 23fa0ce:	1e03      	subs	r3, r0, #0
 23fa0d0:	db01      	blt.n	23fa0d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fa0d2:	441c      	add	r4, r3
  while (size--) {
 23fa0d4:	e7f3      	b.n	23fa0be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fa0d6:	2c00      	cmp	r4, #0
 23fa0d8:	bf08      	it	eq
 23fa0da:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fa0dc:	4620      	mov	r0, r4
 23fa0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fa0e0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fa0e0:	b513      	push	{r0, r1, r4, lr}
 23fa0e2:	4604      	mov	r4, r0
    }
 23fa0e4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fa0e6:	b159      	cbz	r1, 23fa100 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fa0e8:	9101      	str	r1, [sp, #4]
 23fa0ea:	f7f9 fbe5 	bl	23f38b8 <strlen>
 23fa0ee:	4602      	mov	r2, r0
 23fa0f0:	4620      	mov	r0, r4
 23fa0f2:	6823      	ldr	r3, [r4, #0]
 23fa0f4:	9901      	ldr	r1, [sp, #4]
 23fa0f6:	68db      	ldr	r3, [r3, #12]
    }
 23fa0f8:	b002      	add	sp, #8
 23fa0fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fa0fe:	4718      	bx	r3
    }
 23fa100:	b002      	add	sp, #8
 23fa102:	bd10      	pop	{r4, pc}

023fa104 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fa104:	6803      	ldr	r3, [r0, #0]
 23fa106:	689b      	ldr	r3, [r3, #8]
 23fa108:	4718      	bx	r3

023fa10a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fa10a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fa10c:	2a01      	cmp	r2, #1
 23fa10e:	bf98      	it	ls
 23fa110:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fa112:	b530      	push	{r4, r5, lr}
 23fa114:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fa116:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fa11a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fa11c:	460d      	mov	r5, r1
 23fa11e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fa122:	fb01 5312 	mls	r3, r1, r2, r5
 23fa126:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fa12a:	2b09      	cmp	r3, #9
 23fa12c:	bf94      	ite	ls
 23fa12e:	3330      	addls	r3, #48	; 0x30
 23fa130:	3337      	addhi	r3, #55	; 0x37
 23fa132:	b2db      	uxtb	r3, r3
  } while(n);
 23fa134:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fa136:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fa13a:	d9ef      	bls.n	23fa11c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fa13c:	4621      	mov	r1, r4
 23fa13e:	f7ff ffcf 	bl	23fa0e0 <_ZN5Print5writeEPKc>
}
 23fa142:	b00b      	add	sp, #44	; 0x2c
 23fa144:	bd30      	pop	{r4, r5, pc}
	...

023fa148 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fa148:	2200      	movs	r2, #0
 23fa14a:	4b01      	ldr	r3, [pc, #4]	; (23fa150 <_GLOBAL__sub_I_RGB+0x8>)
 23fa14c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fa14e:	4770      	bx	lr
 23fa150:	1007ae54 	.word	0x1007ae54

023fa154 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fa154:	b510      	push	{r4, lr}
 23fa156:	4604      	mov	r4, r0
 23fa158:	4608      	mov	r0, r1
{
    _spi = spi;
 23fa15a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fa15c:	f7fd fefa 	bl	23f7f54 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fa160:	2300      	movs	r3, #0
}
 23fa162:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fa164:	6063      	str	r3, [r4, #4]
}
 23fa166:	bd10      	pop	{r4, pc}

023fa168 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 23fa168:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa16c:	ec57 6b10 	vmov	r6, r7, d0
 23fa170:	4680      	mov	r8, r0
 23fa172:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
 23fa174:	2200      	movs	r2, #0
 23fa176:	2300      	movs	r3, #0
 23fa178:	ee10 0a10 	vmov	r0, s0
 23fa17c:	4639      	mov	r1, r7
 23fa17e:	f7f9 f901 	bl	23f3384 <__aeabi_dcmplt>
 23fa182:	b128      	cbz	r0, 23fa190 <_Z4dtoadhPc+0x28>
        val = -val;
 23fa184:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 23fa188:	461f      	mov	r7, r3
        *sout++ = '-';
 23fa18a:	232d      	movs	r3, #45	; 0x2d
 23fa18c:	f804 3b01 	strb.w	r3, [r4], #1
 23fa190:	2300      	movs	r3, #0
    }
    long scale = 1;
 23fa192:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 23fa196:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 23fa198:	b2d9      	uxtb	r1, r3
 23fa19a:	4588      	cmp	r8, r1
 23fa19c:	d903      	bls.n	23fa1a6 <_Z4dtoadhPc+0x3e>
        scale *= 10;
 23fa19e:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
 23fa1a2:	3301      	adds	r3, #1
 23fa1a4:	e7f8      	b.n	23fa198 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
 23fa1a6:	4648      	mov	r0, r9
 23fa1a8:	f7f8 fe10 	bl	23f2dcc <__aeabi_i2d>
 23fa1ac:	4632      	mov	r2, r6
 23fa1ae:	463b      	mov	r3, r7
 23fa1b0:	f7f8 fe76 	bl	23f2ea0 <__aeabi_dmul>
 23fa1b4:	4606      	mov	r6, r0
 23fa1b6:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
 23fa1b8:	f7f9 f9de 	bl	23f3578 <__aeabi_d2ulz>
 23fa1bc:	468a      	mov	sl, r1
 23fa1be:	4605      	mov	r5, r0
 23fa1c0:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
 23fa1c2:	f7f8 fe37 	bl	23f2e34 <__aeabi_ul2d>
 23fa1c6:	4602      	mov	r2, r0
 23fa1c8:	460b      	mov	r3, r1
 23fa1ca:	4630      	mov	r0, r6
 23fa1cc:	4639      	mov	r1, r7
 23fa1ce:	f7f8 fcaf 	bl	23f2b30 <__aeabi_dsub>
 23fa1d2:	2200      	movs	r2, #0
 23fa1d4:	4b13      	ldr	r3, [pc, #76]	; (23fa224 <_Z4dtoadhPc+0xbc>)
 23fa1d6:	f7f9 f8e9 	bl	23f33ac <__aeabi_dcmpge>
 23fa1da:	b110      	cbz	r0, 23fa1e2 <_Z4dtoadhPc+0x7a>
        fixed++;
 23fa1dc:	3501      	adds	r5, #1
 23fa1de:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
 23fa1e2:	464a      	mov	r2, r9
 23fa1e4:	4628      	mov	r0, r5
 23fa1e6:	4659      	mov	r1, fp
 23fa1e8:	17d3      	asrs	r3, r2, #31
 23fa1ea:	f7f9 f979 	bl	23f34e0 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 23fa1ee:	2301      	movs	r3, #1
 23fa1f0:	4615      	mov	r5, r2
 23fa1f2:	4621      	mov	r1, r4
 23fa1f4:	220a      	movs	r2, #10
 23fa1f6:	f001 f8da 	bl	23fb3ae <ultoa>
    if (prec) {
 23fa1fa:	f1b8 0f00 	cmp.w	r8, #0
 23fa1fe:	d00e      	beq.n	23fa21e <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
 23fa200:	4620      	mov	r0, r4
 23fa202:	f7f9 fb59 	bl	23f38b8 <strlen>
        *sout++ = '.';
 23fa206:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 23fa208:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 23fa20a:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 23fa20c:	220a      	movs	r2, #10
 23fa20e:	4643      	mov	r3, r8
 23fa210:	4628      	mov	r0, r5
 23fa212:	3101      	adds	r1, #1
    }
}
 23fa214:	b001      	add	sp, #4
 23fa216:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
 23fa21a:	f001 b8c8 	b.w	23fb3ae <ultoa>
}
 23fa21e:	b001      	add	sp, #4
 23fa220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa224:	3fe00000 	.word	0x3fe00000

023fa228 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23fa228:	b510      	push	{r4, lr}
 23fa22a:	4604      	mov	r4, r0
{
    free(buffer);
 23fa22c:	6800      	ldr	r0, [r0, #0]
 23fa22e:	f7fe f9f5 	bl	23f861c <free>
}
 23fa232:	4620      	mov	r0, r4
 23fa234:	bd10      	pop	{r4, pc}

023fa236 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23fa236:	b510      	push	{r4, lr}
 23fa238:	4604      	mov	r4, r0
    if (buffer) {
 23fa23a:	6800      	ldr	r0, [r0, #0]
 23fa23c:	b108      	cbz	r0, 23fa242 <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23fa23e:	f7fe f9ed 	bl	23f861c <free>
    }
    buffer = nullptr;
 23fa242:	2300      	movs	r3, #0
    capacity = len = 0;
 23fa244:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23fa248:	6023      	str	r3, [r4, #0]
}
 23fa24a:	bd10      	pop	{r4, pc}

023fa24c <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fa24c:	b538      	push	{r3, r4, r5, lr}
 23fa24e:	4604      	mov	r4, r0
 23fa250:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fa252:	6800      	ldr	r0, [r0, #0]
 23fa254:	3101      	adds	r1, #1
 23fa256:	f7fe f9ef 	bl	23f8638 <realloc>
    if (newbuffer) {
 23fa25a:	b110      	cbz	r0, 23fa262 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
 23fa25c:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23fa260:	2001      	movs	r0, #1
    }
    return 0;
}
 23fa262:	bd38      	pop	{r3, r4, r5, pc}

023fa264 <_ZN6String7reserveEj>:
{
 23fa264:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
 23fa266:	6803      	ldr	r3, [r0, #0]
{
 23fa268:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
 23fa26a:	b123      	cbz	r3, 23fa276 <_ZN6String7reserveEj+0x12>
 23fa26c:	6843      	ldr	r3, [r0, #4]
 23fa26e:	428b      	cmp	r3, r1
 23fa270:	d301      	bcc.n	23fa276 <_ZN6String7reserveEj+0x12>
 23fa272:	2001      	movs	r0, #1
}
 23fa274:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23fa276:	4620      	mov	r0, r4
 23fa278:	f7ff ffe8 	bl	23fa24c <_ZN6String12changeBufferEj>
 23fa27c:	2800      	cmp	r0, #0
 23fa27e:	d0f9      	beq.n	23fa274 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23fa280:	68a3      	ldr	r3, [r4, #8]
 23fa282:	2b00      	cmp	r3, #0
 23fa284:	d1f5      	bne.n	23fa272 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23fa286:	6822      	ldr	r2, [r4, #0]
 23fa288:	7013      	strb	r3, [r2, #0]
 23fa28a:	e7f2      	b.n	23fa272 <_ZN6String7reserveEj+0xe>

023fa28c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fa28c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa28e:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23fa290:	4611      	mov	r1, r2
 23fa292:	9201      	str	r2, [sp, #4]
{
 23fa294:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23fa296:	f7ff ffe5 	bl	23fa264 <_ZN6String7reserveEj>
 23fa29a:	9a01      	ldr	r2, [sp, #4]
 23fa29c:	b928      	cbnz	r0, 23fa2aa <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23fa29e:	4620      	mov	r0, r4
 23fa2a0:	f7ff ffc9 	bl	23fa236 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23fa2a4:	4620      	mov	r0, r4
 23fa2a6:	b003      	add	sp, #12
 23fa2a8:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23fa2aa:	4629      	mov	r1, r5
    len = length;
 23fa2ac:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23fa2ae:	6820      	ldr	r0, [r4, #0]
 23fa2b0:	f002 fcb6 	bl	23fcc20 <memcpy>
    buffer[len] = 0;
 23fa2b4:	2100      	movs	r1, #0
 23fa2b6:	6822      	ldr	r2, [r4, #0]
 23fa2b8:	68a3      	ldr	r3, [r4, #8]
 23fa2ba:	54d1      	strb	r1, [r2, r3]
    return *this;
 23fa2bc:	e7f2      	b.n	23fa2a4 <_ZN6String4copyEPKcj+0x18>

023fa2be <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
 23fa2be:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fa2c0:	b513      	push	{r0, r1, r4, lr}
 23fa2c2:	4604      	mov	r4, r0
    capacity = 0;
 23fa2c4:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fa2c8:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fa2ca:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23fa2cc:	b141      	cbz	r1, 23fa2e0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
 23fa2ce:	4608      	mov	r0, r1
 23fa2d0:	9101      	str	r1, [sp, #4]
 23fa2d2:	f7f9 faf1 	bl	23f38b8 <strlen>
 23fa2d6:	9901      	ldr	r1, [sp, #4]
 23fa2d8:	4602      	mov	r2, r0
 23fa2da:	4620      	mov	r0, r4
 23fa2dc:	f7ff ffd6 	bl	23fa28c <_ZN6String4copyEPKcj>
}
 23fa2e0:	4620      	mov	r0, r4
 23fa2e2:	b002      	add	sp, #8
 23fa2e4:	bd10      	pop	{r4, pc}

023fa2e6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fa2e6:	b538      	push	{r3, r4, r5, lr}
 23fa2e8:	4605      	mov	r5, r0
    if (buffer) {
 23fa2ea:	6800      	ldr	r0, [r0, #0]
{
 23fa2ec:	460c      	mov	r4, r1
    if (buffer) {
 23fa2ee:	b170      	cbz	r0, 23fa30e <_ZN6String4moveERS_+0x28>
        if (capacity >= rhs.len && rhs.buffer) {
 23fa2f0:	686a      	ldr	r2, [r5, #4]
 23fa2f2:	688b      	ldr	r3, [r1, #8]
 23fa2f4:	429a      	cmp	r2, r3
 23fa2f6:	d308      	bcc.n	23fa30a <_ZN6String4moveERS_+0x24>
 23fa2f8:	6809      	ldr	r1, [r1, #0]
 23fa2fa:	b131      	cbz	r1, 23fa30a <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
 23fa2fc:	f002 fd05 	bl	23fcd0a <strcpy>
            len = rhs.len;
 23fa300:	68a3      	ldr	r3, [r4, #8]
 23fa302:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
 23fa304:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity = rhs.capacity;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity = 0;
    rhs.len = 0;
 23fa306:	60a3      	str	r3, [r4, #8]
}
 23fa308:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
 23fa30a:	f7fe f987 	bl	23f861c <free>
    buffer = rhs.buffer;
 23fa30e:	6823      	ldr	r3, [r4, #0]
 23fa310:	602b      	str	r3, [r5, #0]
    capacity = rhs.capacity;
 23fa312:	6863      	ldr	r3, [r4, #4]
 23fa314:	606b      	str	r3, [r5, #4]
    len = rhs.len;
 23fa316:	68a3      	ldr	r3, [r4, #8]
 23fa318:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
 23fa31a:	2300      	movs	r3, #0
    rhs.capacity = 0;
 23fa31c:	e9c4 3300 	strd	r3, r3, [r4]
 23fa320:	e7f1      	b.n	23fa306 <_ZN6String4moveERS_+0x20>

023fa322 <_ZN6StringC1EOS_>:
    buffer = nullptr;
 23fa322:	2300      	movs	r3, #0
String::String(String &&rval)
 23fa324:	b510      	push	{r4, lr}
 23fa326:	4604      	mov	r4, r0
    capacity = 0;
 23fa328:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fa32c:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fa32e:	7303      	strb	r3, [r0, #12]
    move(rval);
 23fa330:	f7ff ffd9 	bl	23fa2e6 <_ZN6String4moveERS_>
}
 23fa334:	4620      	mov	r0, r4
 23fa336:	bd10      	pop	{r4, pc}

023fa338 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23fa338:	4288      	cmp	r0, r1
{
 23fa33a:	b510      	push	{r4, lr}
 23fa33c:	4604      	mov	r4, r0
    if (this == &rhs) {
 23fa33e:	d005      	beq.n	23fa34c <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23fa340:	680b      	ldr	r3, [r1, #0]
 23fa342:	b12b      	cbz	r3, 23fa350 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23fa344:	688a      	ldr	r2, [r1, #8]
 23fa346:	4619      	mov	r1, r3
 23fa348:	f7ff ffa0 	bl	23fa28c <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fa34c:	4620      	mov	r0, r4
 23fa34e:	bd10      	pop	{r4, pc}
        invalidate();
 23fa350:	f7ff ff71 	bl	23fa236 <_ZN6String10invalidateEv>
 23fa354:	e7fa      	b.n	23fa34c <_ZN6StringaSERKS_+0x14>

023fa356 <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23fa356:	2300      	movs	r3, #0
String::String(const String &value)
 23fa358:	b510      	push	{r4, lr}
 23fa35a:	4604      	mov	r4, r0
    capacity = 0;
 23fa35c:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fa360:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fa362:	7303      	strb	r3, [r0, #12]
    *this = value;
 23fa364:	f7ff ffe8 	bl	23fa338 <_ZN6StringaSERKS_>
}
 23fa368:	4620      	mov	r0, r4
 23fa36a:	bd10      	pop	{r4, pc}

023fa36c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
    if (this != &rval) {
 23fa36c:	4288      	cmp	r0, r1
{
 23fa36e:	b510      	push	{r4, lr}
 23fa370:	4604      	mov	r4, r0
    if (this != &rval) {
 23fa372:	d001      	beq.n	23fa378 <_ZN6StringaSEOS_+0xc>
        move(rval);
 23fa374:	f7ff ffb7 	bl	23fa2e6 <_ZN6String4moveERS_>
    }
    return *this;
}
 23fa378:	4620      	mov	r0, r4
 23fa37a:	bd10      	pop	{r4, pc}

023fa37c <_ZN6StringaSEPKc>:
    return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 23fa37c:	b513      	push	{r0, r1, r4, lr}
 23fa37e:	4604      	mov	r4, r0
    if (cstr) {
 23fa380:	b159      	cbz	r1, 23fa39a <_ZN6StringaSEPKc+0x1e>
        copy(cstr, strlen(cstr));
 23fa382:	4608      	mov	r0, r1
 23fa384:	9101      	str	r1, [sp, #4]
 23fa386:	f7f9 fa97 	bl	23f38b8 <strlen>
 23fa38a:	9901      	ldr	r1, [sp, #4]
 23fa38c:	4602      	mov	r2, r0
 23fa38e:	4620      	mov	r0, r4
 23fa390:	f7ff ff7c 	bl	23fa28c <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fa394:	4620      	mov	r0, r4
 23fa396:	b002      	add	sp, #8
 23fa398:	bd10      	pop	{r4, pc}
        invalidate();
 23fa39a:	f7ff ff4c 	bl	23fa236 <_ZN6String10invalidateEv>
 23fa39e:	e7f9      	b.n	23fa394 <_ZN6StringaSEPKc+0x18>

023fa3a0 <_ZN6StringC1Ec>:
    buffer = nullptr;
 23fa3a0:	2300      	movs	r3, #0
String::String(char c)
 23fa3a2:	b513      	push	{r0, r1, r4, lr}
 23fa3a4:	4604      	mov	r4, r0
    char buf[2] = {};
 23fa3a6:	f8ad 3004 	strh.w	r3, [sp, #4]
    capacity = 0;
 23fa3aa:	e9c0 3300 	strd	r3, r3, [r0]
    buf[0] = c;
 23fa3ae:	f88d 1004 	strb.w	r1, [sp, #4]
    len = 0;
 23fa3b2:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fa3b4:	7303      	strb	r3, [r0, #12]
    *this = buf;
 23fa3b6:	a901      	add	r1, sp, #4
 23fa3b8:	f7ff ffe0 	bl	23fa37c <_ZN6StringaSEPKc>
}
 23fa3bc:	4620      	mov	r0, r4
 23fa3be:	b002      	add	sp, #8
 23fa3c0:	bd10      	pop	{r4, pc}

023fa3c2 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 23fa3c2:	b570      	push	{r4, r5, r6, lr}
 23fa3c4:	460d      	mov	r5, r1
    buffer = nullptr;
 23fa3c6:	2100      	movs	r1, #0
String::String(int value, unsigned char base)
 23fa3c8:	4616      	mov	r6, r2
 23fa3ca:	4604      	mov	r4, r0
 23fa3cc:	b08a      	sub	sp, #40	; 0x28
    capacity = 0;
 23fa3ce:	e9c0 1100 	strd	r1, r1, [r0]
    len = 0;
 23fa3d2:	6081      	str	r1, [r0, #8]
    flags = 0;
 23fa3d4:	7301      	strb	r1, [r0, #12]
    char buf[34] = {};
 23fa3d6:	221e      	movs	r2, #30
 23fa3d8:	a802      	add	r0, sp, #8
 23fa3da:	9101      	str	r1, [sp, #4]
 23fa3dc:	f002 fc47 	bl	23fcc6e <memset>
    itoa(value, buf, base);
 23fa3e0:	4632      	mov	r2, r6
 23fa3e2:	a901      	add	r1, sp, #4
 23fa3e4:	4628      	mov	r0, r5
 23fa3e6:	f001 f807 	bl	23fb3f8 <itoa>
    *this = buf;
 23fa3ea:	4620      	mov	r0, r4
 23fa3ec:	a901      	add	r1, sp, #4
 23fa3ee:	f7ff ffc5 	bl	23fa37c <_ZN6StringaSEPKc>
}
 23fa3f2:	4620      	mov	r0, r4
 23fa3f4:	b00a      	add	sp, #40	; 0x28
 23fa3f6:	bd70      	pop	{r4, r5, r6, pc}

023fa3f8 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
 23fa3f8:	b570      	push	{r4, r5, r6, lr}
 23fa3fa:	460d      	mov	r5, r1
    buffer = nullptr;
 23fa3fc:	2100      	movs	r1, #0
String::String(float value, int decimalPlaces)
 23fa3fe:	ee10 6a10 	vmov	r6, s0
 23fa402:	b08a      	sub	sp, #40	; 0x28
    char buf[33] = {};
 23fa404:	221d      	movs	r2, #29
String::String(float value, int decimalPlaces)
 23fa406:	4604      	mov	r4, r0
    capacity = 0;
 23fa408:	e9c0 1100 	strd	r1, r1, [r0]
    len = 0;
 23fa40c:	6081      	str	r1, [r0, #8]
    flags = 0;
 23fa40e:	7301      	strb	r1, [r0, #12]
    char buf[33] = {};
 23fa410:	a802      	add	r0, sp, #8
 23fa412:	9101      	str	r1, [sp, #4]
 23fa414:	f002 fc2b 	bl	23fcc6e <memset>
    dtoa(value, decimalPlaces, buf);
 23fa418:	4630      	mov	r0, r6
 23fa41a:	f7f8 fce9 	bl	23f2df0 <__aeabi_f2d>
 23fa41e:	b2ed      	uxtb	r5, r5
 23fa420:	ec41 0b10 	vmov	d0, r0, r1
 23fa424:	4628      	mov	r0, r5
 23fa426:	a901      	add	r1, sp, #4
 23fa428:	f7ff fe9e 	bl	23fa168 <_Z4dtoadhPc>
  *this = buf;
 23fa42c:	4620      	mov	r0, r4
 23fa42e:	a901      	add	r1, sp, #4
 23fa430:	f7ff ffa4 	bl	23fa37c <_ZN6StringaSEPKc>
}
 23fa434:	4620      	mov	r0, r4
 23fa436:	b00a      	add	sp, #40	; 0x28
 23fa438:	bd70      	pop	{r4, r5, r6, pc}

023fa43a <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23fa43a:	b570      	push	{r4, r5, r6, lr}
 23fa43c:	4605      	mov	r5, r0
    unsigned int newlen = len + length;
    if (!cstr) {
 23fa43e:	460e      	mov	r6, r1
 23fa440:	b909      	cbnz	r1, 23fa446 <_ZN6String6concatEPKcj+0xc>
        return 0;
 23fa442:	2000      	movs	r0, #0
        return 0;
    }
    strcpy(buffer + len, cstr);
    len = newlen;
    return 1;
}
 23fa444:	bd70      	pop	{r4, r5, r6, pc}
    if (length == 0) {
 23fa446:	b16a      	cbz	r2, 23fa464 <_ZN6String6concatEPKcj+0x2a>
    unsigned int newlen = len + length;
 23fa448:	6884      	ldr	r4, [r0, #8]
 23fa44a:	4414      	add	r4, r2
    if (!reserve(newlen)) {
 23fa44c:	4621      	mov	r1, r4
 23fa44e:	f7ff ff09 	bl	23fa264 <_ZN6String7reserveEj>
 23fa452:	2800      	cmp	r0, #0
 23fa454:	d0f5      	beq.n	23fa442 <_ZN6String6concatEPKcj+0x8>
    strcpy(buffer + len, cstr);
 23fa456:	6828      	ldr	r0, [r5, #0]
 23fa458:	68ab      	ldr	r3, [r5, #8]
 23fa45a:	4631      	mov	r1, r6
 23fa45c:	4418      	add	r0, r3
 23fa45e:	f002 fc54 	bl	23fcd0a <strcpy>
    len = newlen;
 23fa462:	60ac      	str	r4, [r5, #8]
        return 1;
 23fa464:	2001      	movs	r0, #1
 23fa466:	e7ed      	b.n	23fa444 <_ZN6String6concatEPKcj+0xa>

023fa468 <_ZN6String6concatERKS_>:
    return concat(s.buffer, s.len);
 23fa468:	688a      	ldr	r2, [r1, #8]
 23fa46a:	6809      	ldr	r1, [r1, #0]
 23fa46c:	f7ff bfe5 	b.w	23fa43a <_ZN6String6concatEPKcj>

023fa470 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 23fa470:	b513      	push	{r0, r1, r4, lr}
 23fa472:	4604      	mov	r4, r0
    if (!cstr) {
        return 0;
    }
    return concat(cstr, strlen(cstr));
}
 23fa474:	4608      	mov	r0, r1
    if (!cstr) {
 23fa476:	b151      	cbz	r1, 23fa48e <_ZN6String6concatEPKc+0x1e>
    return concat(cstr, strlen(cstr));
 23fa478:	9101      	str	r1, [sp, #4]
 23fa47a:	f7f9 fa1d 	bl	23f38b8 <strlen>
 23fa47e:	4602      	mov	r2, r0
 23fa480:	4620      	mov	r0, r4
 23fa482:	9901      	ldr	r1, [sp, #4]
}
 23fa484:	b002      	add	sp, #8
 23fa486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return concat(cstr, strlen(cstr));
 23fa48a:	f7ff bfd6 	b.w	23fa43a <_ZN6String6concatEPKcj>
}
 23fa48e:	b002      	add	sp, #8
 23fa490:	bd10      	pop	{r4, pc}

023fa492 <_ZN6String6concatEc>:
    return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
    char buf[2] = {};
 23fa492:	2300      	movs	r3, #0
{
 23fa494:	b507      	push	{r0, r1, r2, lr}
    buf[0] = c;
    buf[1] = 0;
    return concat(buf, 1);
 23fa496:	2201      	movs	r2, #1
    char buf[2] = {};
 23fa498:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf[0] = c;
 23fa49c:	f88d 1004 	strb.w	r1, [sp, #4]
    return concat(buf, 1);
 23fa4a0:	a901      	add	r1, sp, #4
 23fa4a2:	f7ff ffca 	bl	23fa43a <_ZN6String6concatEPKcj>
}
 23fa4a6:	b003      	add	sp, #12
 23fa4a8:	f85d fb04 	ldr.w	pc, [sp], #4

023fa4ac <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 23fa4ac:	b510      	push	{r4, lr}
    StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    if (!a.concat(rhs.buffer, rhs.len)) {
 23fa4ae:	688a      	ldr	r2, [r1, #8]
 23fa4b0:	6809      	ldr	r1, [r1, #0]
{
 23fa4b2:	4604      	mov	r4, r0
    if (!a.concat(rhs.buffer, rhs.len)) {
 23fa4b4:	f7ff ffc1 	bl	23fa43a <_ZN6String6concatEPKcj>
 23fa4b8:	b910      	cbnz	r0, 23fa4c0 <_ZplRK15StringSumHelperRK6String+0x14>
        a.invalidate();
 23fa4ba:	4620      	mov	r0, r4
 23fa4bc:	f7ff febb 	bl	23fa236 <_ZN6String10invalidateEv>
    }
    return a;
}
 23fa4c0:	4620      	mov	r0, r4
 23fa4c2:	bd10      	pop	{r4, pc}

023fa4c4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 23fa4c4:	b513      	push	{r0, r1, r4, lr}
 23fa4c6:	4604      	mov	r4, r0
    StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    if (!cstr || !a.concat(cstr, strlen(cstr))) {
 23fa4c8:	b929      	cbnz	r1, 23fa4d6 <_ZplRK15StringSumHelperPKc+0x12>
        a.invalidate();
 23fa4ca:	4620      	mov	r0, r4
 23fa4cc:	f7ff feb3 	bl	23fa236 <_ZN6String10invalidateEv>
    }
    return a;
}
 23fa4d0:	4620      	mov	r0, r4
 23fa4d2:	b002      	add	sp, #8
 23fa4d4:	bd10      	pop	{r4, pc}
    if (!cstr || !a.concat(cstr, strlen(cstr))) {
 23fa4d6:	4608      	mov	r0, r1
 23fa4d8:	9101      	str	r1, [sp, #4]
 23fa4da:	f7f9 f9ed 	bl	23f38b8 <strlen>
 23fa4de:	9901      	ldr	r1, [sp, #4]
 23fa4e0:	4602      	mov	r2, r0
 23fa4e2:	4620      	mov	r0, r4
 23fa4e4:	f7ff ffa9 	bl	23fa43a <_ZN6String6concatEPKcj>
 23fa4e8:	2800      	cmp	r0, #0
 23fa4ea:	d0ee      	beq.n	23fa4ca <_ZplRK15StringSumHelperPKc+0x6>
 23fa4ec:	e7f0      	b.n	23fa4d0 <_ZplRK15StringSumHelperPKc+0xc>

023fa4ee <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    if (!buffer || !s.buffer) {
 23fa4ee:	6802      	ldr	r2, [r0, #0]
{
 23fa4f0:	460b      	mov	r3, r1
    if (!buffer || !s.buffer) {
 23fa4f2:	6809      	ldr	r1, [r1, #0]
 23fa4f4:	b162      	cbz	r2, 23fa510 <_ZNK6String9compareToERKS_+0x22>
 23fa4f6:	b941      	cbnz	r1, 23fa50a <_ZNK6String9compareToERKS_+0x1c>
        if (s.buffer && s.len > 0) {
            return 0 - *(unsigned char *)s.buffer;
        }
        if (buffer && len > 0) {
 23fa4f8:	6880      	ldr	r0, [r0, #8]
 23fa4fa:	b160      	cbz	r0, 23fa516 <_ZNK6String9compareToERKS_+0x28>
            return *(unsigned char *)buffer;
 23fa4fc:	7810      	ldrb	r0, [r2, #0]
 23fa4fe:	4770      	bx	lr
        if (s.buffer && s.len > 0) {
 23fa500:	6898      	ldr	r0, [r3, #8]
 23fa502:	b140      	cbz	r0, 23fa516 <_ZNK6String9compareToERKS_+0x28>
            return 0 - *(unsigned char *)s.buffer;
 23fa504:	7809      	ldrb	r1, [r1, #0]
 23fa506:	4248      	negs	r0, r1
 23fa508:	4770      	bx	lr
        }
        return 0;
    }
    return strcmp(buffer, s.buffer);
 23fa50a:	4610      	mov	r0, r2
 23fa50c:	f7f9 b9ca 	b.w	23f38a4 <strcmp>
        if (s.buffer && s.len > 0) {
 23fa510:	2900      	cmp	r1, #0
 23fa512:	d1f5      	bne.n	23fa500 <_ZNK6String9compareToERKS_+0x12>
        return 0;
 23fa514:	4608      	mov	r0, r1
}
 23fa516:	4770      	bx	lr

023fa518 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
 23fa518:	b508      	push	{r3, lr}
    return (len == s2.len && compareTo(s2) == 0);
 23fa51a:	6882      	ldr	r2, [r0, #8]
 23fa51c:	688b      	ldr	r3, [r1, #8]
 23fa51e:	429a      	cmp	r2, r3
 23fa520:	d105      	bne.n	23fa52e <_ZNK6String6equalsERKS_+0x16>
 23fa522:	f7ff ffe4 	bl	23fa4ee <_ZNK6String9compareToERKS_>
 23fa526:	fab0 f080 	clz	r0, r0
 23fa52a:	0940      	lsrs	r0, r0, #5
}
 23fa52c:	bd08      	pop	{r3, pc}
    return (len == s2.len && compareTo(s2) == 0);
 23fa52e:	2000      	movs	r0, #0
 23fa530:	e7fc      	b.n	23fa52c <_ZNK6String6equalsERKS_+0x14>

023fa532 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
 23fa532:	b508      	push	{r3, lr}
    if (len == 0) {
 23fa534:	6882      	ldr	r2, [r0, #8]
 23fa536:	b93a      	cbnz	r2, 23fa548 <_ZNK6String6equalsEPKc+0x16>
        return (cstr == nullptr || *cstr == 0);
 23fa538:	b121      	cbz	r1, 23fa544 <_ZNK6String6equalsEPKc+0x12>
 23fa53a:	7808      	ldrb	r0, [r1, #0]
    }
    if (cstr == nullptr) {
        return buffer[0] == 0;
    }
    return strcmp(buffer, cstr) == 0;
 23fa53c:	fab0 f080 	clz	r0, r0
 23fa540:	0940      	lsrs	r0, r0, #5
 23fa542:	e000      	b.n	23fa546 <_ZNK6String6equalsEPKc+0x14>
        return (cstr == nullptr || *cstr == 0);
 23fa544:	2001      	movs	r0, #1
}
 23fa546:	bd08      	pop	{r3, pc}
        return buffer[0] == 0;
 23fa548:	6800      	ldr	r0, [r0, #0]
    if (cstr == nullptr) {
 23fa54a:	b909      	cbnz	r1, 23fa550 <_ZNK6String6equalsEPKc+0x1e>
        return buffer[0] == 0;
 23fa54c:	7800      	ldrb	r0, [r0, #0]
 23fa54e:	e7f5      	b.n	23fa53c <_ZNK6String6equalsEPKc+0xa>
    return strcmp(buffer, cstr) == 0;
 23fa550:	f7f9 f9a8 	bl	23f38a4 <strcmp>
 23fa554:	e7f2      	b.n	23fa53c <_ZNK6String6equalsEPKc+0xa>

023fa556 <_ZNK6String16equalsIgnoreCaseERKS_>:
    return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
    if (this == &s2) {
 23fa556:	4288      	cmp	r0, r1
{
 23fa558:	b570      	push	{r4, r5, r6, lr}
    if (this == &s2) {
 23fa55a:	d015      	beq.n	23fa588 <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
        return 1;
    }
    if (len != s2.len) {
 23fa55c:	6883      	ldr	r3, [r0, #8]
 23fa55e:	688a      	ldr	r2, [r1, #8]
 23fa560:	4293      	cmp	r3, r2
 23fa562:	d10f      	bne.n	23fa584 <_ZNK6String16equalsIgnoreCaseERKS_+0x2e>
        return 0;
    }
    if (len == 0) {
 23fa564:	b183      	cbz	r3, 23fa588 <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
 23fa566:	6804      	ldr	r4, [r0, #0]
 23fa568:	680e      	ldr	r6, [r1, #0]
        return 1;
    }
    const char *p1 = buffer;
    const char *p2 = s2.buffer;
 23fa56a:	3c01      	subs	r4, #1
    while (*p1) {
 23fa56c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 23fa570:	b150      	cbz	r0, 23fa588 <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
        if (tolower(*p1++) != tolower(*p2++)) {
 23fa572:	f003 fac3 	bl	23fdafc <tolower>
 23fa576:	4605      	mov	r5, r0
 23fa578:	f816 0b01 	ldrb.w	r0, [r6], #1
 23fa57c:	f003 fabe 	bl	23fdafc <tolower>
 23fa580:	4285      	cmp	r5, r0
 23fa582:	d0f3      	beq.n	23fa56c <_ZNK6String16equalsIgnoreCaseERKS_+0x16>
        return 0;
 23fa584:	2000      	movs	r0, #0
            return 0;
        }
    }
    return 1;
}
 23fa586:	bd70      	pop	{r4, r5, r6, pc}
        return 1;
 23fa588:	2001      	movs	r0, #1
 23fa58a:	e7fc      	b.n	23fa586 <_ZNK6String16equalsIgnoreCaseERKS_+0x30>

023fa58c <_ZNK6String10startsWithERKS_j>:
    }
    return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 23fa58c:	4613      	mov	r3, r2
 23fa58e:	b510      	push	{r4, lr}
    if (offset > len - s2.len || !buffer || !s2.buffer) {
 23fa590:	688a      	ldr	r2, [r1, #8]
 23fa592:	6884      	ldr	r4, [r0, #8]
 23fa594:	1aa4      	subs	r4, r4, r2
 23fa596:	429c      	cmp	r4, r3
 23fa598:	d30a      	bcc.n	23fa5b0 <_ZNK6String10startsWithERKS_j+0x24>
 23fa59a:	6800      	ldr	r0, [r0, #0]
 23fa59c:	b138      	cbz	r0, 23fa5ae <_ZNK6String10startsWithERKS_j+0x22>
 23fa59e:	6809      	ldr	r1, [r1, #0]
 23fa5a0:	b141      	cbz	r1, 23fa5b4 <_ZNK6String10startsWithERKS_j+0x28>
        return 0;
    }
    return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 23fa5a2:	4418      	add	r0, r3
 23fa5a4:	f002 fbb9 	bl	23fcd1a <strncmp>
 23fa5a8:	fab0 f080 	clz	r0, r0
 23fa5ac:	0940      	lsrs	r0, r0, #5
}
 23fa5ae:	bd10      	pop	{r4, pc}
        return 0;
 23fa5b0:	2000      	movs	r0, #0
 23fa5b2:	e7fc      	b.n	23fa5ae <_ZNK6String10startsWithERKS_j+0x22>
 23fa5b4:	4608      	mov	r0, r1
 23fa5b6:	e7fa      	b.n	23fa5ae <_ZNK6String10startsWithERKS_j+0x22>

023fa5b8 <_ZNK6String10startsWithERKS_>:
    if (len < s2.len) {
 23fa5b8:	6882      	ldr	r2, [r0, #8]
 23fa5ba:	688b      	ldr	r3, [r1, #8]
 23fa5bc:	429a      	cmp	r2, r3
 23fa5be:	d302      	bcc.n	23fa5c6 <_ZNK6String10startsWithERKS_+0xe>
    return startsWith(s2, 0);
 23fa5c0:	2200      	movs	r2, #0
 23fa5c2:	f7ff bfe3 	b.w	23fa58c <_ZNK6String10startsWithERKS_j>
}
 23fa5c6:	2000      	movs	r0, #0
 23fa5c8:	4770      	bx	lr

023fa5ca <_ZNK6StringixEj>:
    return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
    if (index >= len || !buffer) {
 23fa5ca:	6883      	ldr	r3, [r0, #8]
 23fa5cc:	428b      	cmp	r3, r1
 23fa5ce:	d903      	bls.n	23fa5d8 <_ZNK6StringixEj+0xe>
 23fa5d0:	6800      	ldr	r0, [r0, #0]
 23fa5d2:	b110      	cbz	r0, 23fa5da <_ZNK6StringixEj+0x10>
        return 0;
    }
    return buffer[index];
 23fa5d4:	5c40      	ldrb	r0, [r0, r1]
 23fa5d6:	4770      	bx	lr
        return 0;
 23fa5d8:	2000      	movs	r0, #0
}
 23fa5da:	4770      	bx	lr

023fa5dc <_ZNK6String6charAtEj>:
    return operator[](loc);
 23fa5dc:	f7ff bff5 	b.w	23fa5ca <_ZNK6StringixEj>

023fa5e0 <_ZNK6String7indexOfEcj>:
{
    return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
 23fa5e0:	b510      	push	{r4, lr}
    if (fromIndex >= len) {
 23fa5e2:	6883      	ldr	r3, [r0, #8]
 23fa5e4:	4293      	cmp	r3, r2
 23fa5e6:	d906      	bls.n	23fa5f6 <_ZNK6String7indexOfEcj+0x16>
        return -1;
    }
    const char* temp = strchr(buffer + fromIndex, ch);
 23fa5e8:	6804      	ldr	r4, [r0, #0]
 23fa5ea:	18a0      	adds	r0, r4, r2
 23fa5ec:	f002 fb76 	bl	23fccdc <strchr>
    if (temp == nullptr) {
 23fa5f0:	b108      	cbz	r0, 23fa5f6 <_ZNK6String7indexOfEcj+0x16>
        return -1;
    }
    return temp - buffer;
 23fa5f2:	1b00      	subs	r0, r0, r4
}
 23fa5f4:	bd10      	pop	{r4, pc}
        return -1;
 23fa5f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fa5fa:	e7fb      	b.n	23fa5f4 <_ZNK6String7indexOfEcj+0x14>

023fa5fc <_ZNK6String7indexOfEc>:
    return indexOf(c, 0);
 23fa5fc:	2200      	movs	r2, #0
 23fa5fe:	f7ff bfef 	b.w	23fa5e0 <_ZNK6String7indexOfEcj>
	...

023fa604 <_ZNK6String9substringEjj>:
{
    return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 23fa604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fa606:	461d      	mov	r5, r3
    if (left > right) {
 23fa608:	429a      	cmp	r2, r3
 23fa60a:	bf88      	it	hi
 23fa60c:	4613      	movhi	r3, r2
{
 23fa60e:	460f      	mov	r7, r1
 23fa610:	4614      	mov	r4, r2
    if (left > right) {
 23fa612:	bf88      	it	hi
 23fa614:	462c      	movhi	r4, r5
        unsigned int temp = right;
        right = left;
        left = temp;
    }
    String out;
 23fa616:	490b      	ldr	r1, [pc, #44]	; (23fa644 <_ZNK6String9substringEjj+0x40>)
    if (left > right) {
 23fa618:	bf88      	it	hi
 23fa61a:	461d      	movhi	r5, r3
{
 23fa61c:	4606      	mov	r6, r0
    String out;
 23fa61e:	f7ff fe4e 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    if (left > len) {
 23fa622:	68bb      	ldr	r3, [r7, #8]
 23fa624:	42a3      	cmp	r3, r4
 23fa626:	d30a      	bcc.n	23fa63e <_ZNK6String9substringEjj+0x3a>
        return out;
    }
    if (right > len) {
        right = len;
    }
    out.copy(&buffer[left], right - left);
 23fa628:	6839      	ldr	r1, [r7, #0]
 23fa62a:	42ab      	cmp	r3, r5
 23fa62c:	bf94      	ite	ls
 23fa62e:	ebc4 0203 	rsbls	r2, r4, r3
 23fa632:	ebc4 0205 	rsbhi	r2, r4, r5
 23fa636:	4630      	mov	r0, r6
 23fa638:	4421      	add	r1, r4
 23fa63a:	f7ff fe27 	bl	23fa28c <_ZN6String4copyEPKcj>
    return out;
}
 23fa63e:	4630      	mov	r0, r6
 23fa640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fa642:	bf00      	nop
 23fa644:	023ff87d 	.word	0x023ff87d

023fa648 <_ZNK6String9substringEj>:
{
 23fa648:	b510      	push	{r4, lr}
 23fa64a:	4604      	mov	r4, r0
    return substring(left, len);
 23fa64c:	688b      	ldr	r3, [r1, #8]
 23fa64e:	f7ff ffd9 	bl	23fa604 <_ZNK6String9substringEjj>
}
 23fa652:	4620      	mov	r0, r4
 23fa654:	bd10      	pop	{r4, pc}

023fa656 <_ZN6String11toLowerCaseEv>:
    buffer[len] = 0;
    return *this;
}

String& String::toLowerCase(void)
{
 23fa656:	b538      	push	{r3, r4, r5, lr}
    if (buffer) {
 23fa658:	6804      	ldr	r4, [r0, #0]
{
 23fa65a:	4605      	mov	r5, r0
    if (buffer) {
 23fa65c:	b13c      	cbz	r4, 23fa66e <_ZN6String11toLowerCaseEv+0x18>
 23fa65e:	3c01      	subs	r4, #1
        for (char *p = buffer; *p; p++) {
 23fa660:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 23fa664:	b118      	cbz	r0, 23fa66e <_ZN6String11toLowerCaseEv+0x18>
            *p = tolower(*p);
 23fa666:	f003 fa49 	bl	23fdafc <tolower>
 23fa66a:	7020      	strb	r0, [r4, #0]
        for (char *p = buffer; *p; p++) {
 23fa66c:	e7f8      	b.n	23fa660 <_ZN6String11toLowerCaseEv+0xa>
        }
    }
    return *this;
}
 23fa66e:	4628      	mov	r0, r5
 23fa670:	bd38      	pop	{r3, r4, r5, pc}

023fa672 <_ZN6String4trimEv>:
    }
    return *this;
}

String& String::trim(void)
{
 23fa672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!buffer || len == 0) {
 23fa676:	6806      	ldr	r6, [r0, #0]
{
 23fa678:	4605      	mov	r5, r0
    if (!buffer || len == 0) {
 23fa67a:	b306      	cbz	r6, 23fa6be <_ZN6String4trimEv+0x4c>
 23fa67c:	6884      	ldr	r4, [r0, #8]
 23fa67e:	b1f4      	cbz	r4, 23fa6be <_ZN6String4trimEv+0x4c>
 23fa680:	46b0      	mov	r8, r6
 23fa682:	4647      	mov	r7, r8
        return *this;
    }
    char *begin = buffer;
    while (isspace(*begin)) {
 23fa684:	f818 0b01 	ldrb.w	r0, [r8], #1
 23fa688:	f002 fac2 	bl	23fcc10 <isspace>
 23fa68c:	2800      	cmp	r0, #0
 23fa68e:	d1f8      	bne.n	23fa682 <_ZN6String4trimEv+0x10>
        begin++;
    }
    char *end = buffer + len - 1;
 23fa690:	3c01      	subs	r4, #1
 23fa692:	4434      	add	r4, r6
    while (isspace(*end) && end >= begin) {
 23fa694:	7820      	ldrb	r0, [r4, #0]
 23fa696:	f002 fabb 	bl	23fcc10 <isspace>
 23fa69a:	b118      	cbz	r0, 23fa6a4 <_ZN6String4trimEv+0x32>
 23fa69c:	42a7      	cmp	r7, r4
 23fa69e:	d801      	bhi.n	23fa6a4 <_ZN6String4trimEv+0x32>
        end--;
 23fa6a0:	3c01      	subs	r4, #1
    while (isspace(*end) && end >= begin) {
 23fa6a2:	e7f7      	b.n	23fa694 <_ZN6String4trimEv+0x22>
    }
    len = end + 1 - begin;
 23fa6a4:	1c62      	adds	r2, r4, #1
 23fa6a6:	1bd2      	subs	r2, r2, r7
    if (begin > buffer) {
 23fa6a8:	42be      	cmp	r6, r7
    len = end + 1 - begin;
 23fa6aa:	60aa      	str	r2, [r5, #8]
    if (begin > buffer) {
 23fa6ac:	d203      	bcs.n	23fa6b6 <_ZN6String4trimEv+0x44>
        memcpy(buffer, begin, len);
 23fa6ae:	4639      	mov	r1, r7
 23fa6b0:	4630      	mov	r0, r6
 23fa6b2:	f002 fab5 	bl	23fcc20 <memcpy>
    }
    buffer[len] = 0;
 23fa6b6:	2100      	movs	r1, #0
 23fa6b8:	682a      	ldr	r2, [r5, #0]
 23fa6ba:	68ab      	ldr	r3, [r5, #8]
 23fa6bc:	54d1      	strb	r1, [r2, r3]
  return *this;
}
 23fa6be:	4628      	mov	r0, r5
 23fa6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fa6c4 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
    if (buffer) {
 23fa6c4:	6800      	ldr	r0, [r0, #0]
 23fa6c6:	b108      	cbz	r0, 23fa6cc <_ZNK6String5toIntEv+0x8>
        return atol(buffer);
 23fa6c8:	f002 ba95 	b.w	23fcbf6 <atol>
    }
    return 0;
}
 23fa6cc:	4770      	bx	lr
	...

023fa6d0 <_ZNK6String7toFloatEv>:
    }
    return 0;
}

float String::toFloat(void) const
{
 23fa6d0:	b508      	push	{r3, lr}
    if (buffer) {
 23fa6d2:	6800      	ldr	r0, [r0, #0]
 23fa6d4:	b140      	cbz	r0, 23fa6e8 <_ZNK6String7toFloatEv+0x18>
        return float(atof(buffer));
 23fa6d6:	f002 fa8b 	bl	23fcbf0 <atof>
 23fa6da:	ec51 0b10 	vmov	r0, r1, d0
 23fa6de:	f7f8 feaf 	bl	23f3440 <__aeabi_d2f>
 23fa6e2:	ee00 0a10 	vmov	s0, r0
    }
    return 0;
}
 23fa6e6:	bd08      	pop	{r3, pc}
    return 0;
 23fa6e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 23fa6f0 <_ZNK6String7toFloatEv+0x20>
 23fa6ec:	e7fb      	b.n	23fa6e6 <_ZNK6String7toFloatEv+0x16>
 23fa6ee:	bf00      	nop
 23fa6f0:	00000000 	.word	0x00000000

023fa6f4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 23fa6f4:	b40e      	push	{r1, r2, r3}
 23fa6f6:	b570      	push	{r4, r5, r6, lr}
 23fa6f8:	b087      	sub	sp, #28
 23fa6fa:	ad0b      	add	r5, sp, #44	; 0x2c
 23fa6fc:	f855 2b04 	ldr.w	r2, [r5], #4
 23fa700:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 23fa702:	462b      	mov	r3, r5
 23fa704:	2105      	movs	r1, #5
 23fa706:	a804      	add	r0, sp, #16
 23fa708:	9201      	str	r2, [sp, #4]
    va_start(marker, fmt);
 23fa70a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 23fa70c:	f7fd ffbe 	bl	23f868c <vsnprintf>
 23fa710:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 23fa712:	490b      	ldr	r1, [pc, #44]	; (23fa740 <_ZN6String6formatEPKcz+0x4c>)
 23fa714:	4620      	mov	r0, r4
 23fa716:	f7ff fdd2 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 23fa71a:	4631      	mov	r1, r6
 23fa71c:	4620      	mov	r0, r4
 23fa71e:	f7ff fda1 	bl	23fa264 <_ZN6String7reserveEj>
    if (result.buffer) {
 23fa722:	6820      	ldr	r0, [r4, #0]
 23fa724:	b130      	cbz	r0, 23fa734 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 23fa726:	462b      	mov	r3, r5
 23fa728:	9a01      	ldr	r2, [sp, #4]
 23fa72a:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 23fa72c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 23fa72e:	f7fd ffad 	bl	23f868c <vsnprintf>
        va_end(marker);
        result.len = n;
 23fa732:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 23fa734:	4620      	mov	r0, r4
 23fa736:	b007      	add	sp, #28
 23fa738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fa73c:	b003      	add	sp, #12
 23fa73e:	4770      	bx	lr
 23fa740:	023ff87d 	.word	0x023ff87d

023fa744 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 23fa744:	b507      	push	{r0, r1, r2, lr}
 23fa746:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23fa748:	2100      	movs	r1, #0
{
 23fa74a:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23fa74c:	9100      	str	r1, [sp, #0]
 23fa74e:	2001      	movs	r0, #1
 23fa750:	218c      	movs	r1, #140	; 0x8c
 23fa752:	f7fd fe13 	bl	23f837c <system_reset>
}
 23fa756:	b003      	add	sp, #12
 23fa758:	f85d fb04 	ldr.w	pc, [sp], #4

023fa75c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 23fa75c:	4601      	mov	r1, r0
    reset(0, flags);
 23fa75e:	2000      	movs	r0, #0
 23fa760:	f7ff bff0 	b.w	23fa744 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

023fa764 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 23fa764:	2000      	movs	r0, #0
 23fa766:	f7ff bff9 	b.w	23fa75c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

023fa76a <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
 23fa76a:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
 23fa76c:	2420      	movs	r4, #32
{
 23fa76e:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
 23fa770:	4622      	mov	r2, r4
 23fa772:	2100      	movs	r1, #0
 23fa774:	4668      	mov	r0, sp
 23fa776:	f002 fa7a 	bl	23fcc6e <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
 23fa77a:	2100      	movs	r1, #0
 23fa77c:	4668      	mov	r0, sp
    info.size = sizeof(info);
 23fa77e:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
 23fa782:	f7fd f9ef 	bl	23f7b64 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
 23fa786:	9801      	ldr	r0, [sp, #4]
 23fa788:	b008      	add	sp, #32
 23fa78a:	bd10      	pop	{r4, pc}

023fa78c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fa78c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fa78e:	2000      	movs	r0, #0
 23fa790:	4b04      	ldr	r3, [pc, #16]	; (23fa7a4 <_GLOBAL__sub_I_System+0x18>)
 23fa792:	601a      	str	r2, [r3, #0]
 23fa794:	4b04      	ldr	r3, [pc, #16]	; (23fa7a8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fa796:	4a05      	ldr	r2, [pc, #20]	; (23fa7ac <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fa798:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fa79c:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fa79e:	f7fd bd8b 	b.w	23f82b8 <set_system_mode>
 23fa7a2:	bf00      	nop
 23fa7a4:	1007ae70 	.word	0x1007ae70
 23fa7a8:	1007ae64 	.word	0x1007ae64
 23fa7ac:	ffff0000 	.word	0xffff0000

023fa7b0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
 23fa7b0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
 23fa7b2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
 23fa7b4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
 23fa7b8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 23fa7ba:	2201      	movs	r2, #1
 23fa7bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fa7c0:	f10d 0107 	add.w	r1, sp, #7
 23fa7c4:	47a0      	blx	r4
}
 23fa7c6:	b002      	add	sp, #8
 23fa7c8:	bd10      	pop	{r4, pc}

023fa7ca <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
 23fa7ca:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
 23fa7cc:	6803      	ldr	r3, [r0, #0]
 23fa7ce:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 23fa7d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fa7d4:	46a4      	mov	ip, r4
}
 23fa7d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
 23fa7da:	4760      	bx	ip

023fa7dc <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
 23fa7dc:	b513      	push	{r0, r1, r4, lr}
 23fa7de:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 23fa7e0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
 23fa7e2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 23fa7e6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 23fa7e8:	f10d 0107 	add.w	r1, sp, #7
 23fa7ec:	2201      	movs	r2, #1
 23fa7ee:	47a0      	blx	r4
}
 23fa7f0:	b002      	add	sp, #8
 23fa7f2:	bd10      	pop	{r4, pc}

023fa7f4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
 23fa7f4:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fa7f6:	6943      	ldr	r3, [r0, #20]
 23fa7f8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 23fa7fa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fa7fe:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23fa802:	429a      	cmp	r2, r3
 23fa804:	d008      	beq.n	23fa818 <_ZN9TCPClient4readEv+0x24>
 23fa806:	6963      	ldr	r3, [r4, #20]
 23fa808:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 23fa80c:	1c51      	adds	r1, r2, #1
 23fa80e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 23fa812:	4413      	add	r3, r2
 23fa814:	7918      	ldrb	r0, [r3, #4]
}
 23fa816:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 23fa818:	6803      	ldr	r3, [r0, #0]
 23fa81a:	691b      	ldr	r3, [r3, #16]
 23fa81c:	4798      	blx	r3
 23fa81e:	2800      	cmp	r0, #0
 23fa820:	d1f1      	bne.n	23fa806 <_ZN9TCPClient4readEv+0x12>
 23fa822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fa826:	e7f6      	b.n	23fa816 <_ZN9TCPClient4readEv+0x22>

023fa828 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
 23fa828:	4770      	bx	lr

023fa82a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
 23fa82a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
 23fa82c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
 23fa82e:	43c0      	mvns	r0, r0
 23fa830:	0fc0      	lsrs	r0, r0, #31
 23fa832:	4770      	bx	lr

023fa834 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fa834:	4770      	bx	lr
	...

023fa838 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fa838:	4b06      	ldr	r3, [pc, #24]	; (23fa854 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fa83a:	b510      	push	{r4, lr}
	    ||
 23fa83c:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fa83e:	f100 040c 	add.w	r4, r0, #12
 23fa842:	d005      	beq.n	23fa850 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fa844:	4608      	mov	r0, r1
 23fa846:	f001 f81b 	bl	23fb880 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fa84a:	2800      	cmp	r0, #0
 23fa84c:	bf08      	it	eq
 23fa84e:	2400      	moveq	r4, #0
      }
 23fa850:	4620      	mov	r0, r4
 23fa852:	bd10      	pop	{r4, pc}
 23fa854:	023ff7a8 	.word	0x023ff7a8

023fa858 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fa858:	b510      	push	{r4, lr}
 23fa85a:	4604      	mov	r4, r0
 23fa85c:	21ac      	movs	r1, #172	; 0xac
 23fa85e:	f7f9 f86e 	bl	23f393e <_ZdlPvj>
 23fa862:	4620      	mov	r0, r4
 23fa864:	bd10      	pop	{r4, pc}

023fa866 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 23fa866:	21ac      	movs	r1, #172	; 0xac
 23fa868:	f7f9 b869 	b.w	23f393e <_ZdlPvj>

023fa86c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
 23fa86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 23fa870:	f04f 0800 	mov.w	r8, #0
 23fa874:	461c      	mov	r4, r3
 23fa876:	b086      	sub	sp, #24
 23fa878:	f8c0 8004 	str.w	r8, [r0, #4]
 23fa87c:	4605      	mov	r5, r0
 23fa87e:	460e      	mov	r6, r1
 23fa880:	4617      	mov	r7, r2
    struct timeval tv = {};
 23fa882:	4641      	mov	r1, r8
 23fa884:	2210      	movs	r2, #16
 23fa886:	a802      	add	r0, sp, #8
 23fa888:	f002 f9f1 	bl	23fcc6e <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
 23fa88c:	1c63      	adds	r3, r4, #1
 23fa88e:	d009      	beq.n	23fa8a4 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
 23fa890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fa894:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
 23fa898:	fb03 4412 	mls	r4, r3, r2, r4
 23fa89c:	435c      	muls	r4, r3
        tv.tv_sec = timeout / 1000;
 23fa89e:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
 23fa8a2:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
 23fa8a4:	2310      	movs	r3, #16
 23fa8a6:	6968      	ldr	r0, [r5, #20]
 23fa8a8:	9300      	str	r3, [sp, #0]
 23fa8aa:	f241 0205 	movw	r2, #4101	; 0x1005
 23fa8ae:	f640 71ff 	movw	r1, #4095	; 0xfff
 23fa8b2:	6800      	ldr	r0, [r0, #0]
 23fa8b4:	ab02      	add	r3, sp, #8
 23fa8b6:	f7fd faf9 	bl	23f7eac <sock_setsockopt>
    if (ret < 0) {
 23fa8ba:	2800      	cmp	r0, #0
 23fa8bc:	da07      	bge.n	23fa8ce <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
 23fa8be:	f7fd ff0f 	bl	23f86e0 <__errno>
 23fa8c2:	6803      	ldr	r3, [r0, #0]
        return 0;
 23fa8c4:	2000      	movs	r0, #0
 23fa8c6:	606b      	str	r3, [r5, #4]
}
 23fa8c8:	b006      	add	sp, #24
 23fa8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
 23fa8ce:	6968      	ldr	r0, [r5, #20]
 23fa8d0:	2300      	movs	r3, #0
 23fa8d2:	463a      	mov	r2, r7
 23fa8d4:	4631      	mov	r1, r6
 23fa8d6:	6800      	ldr	r0, [r0, #0]
 23fa8d8:	f7fd fb20 	bl	23f7f1c <sock_send>
    if (ret < 0) {
 23fa8dc:	1e03      	subs	r3, r0, #0
 23fa8de:	dbee      	blt.n	23fa8be <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
 23fa8e0:	4618      	mov	r0, r3
 23fa8e2:	e7f1      	b.n	23fa8c8 <_ZN9TCPClient5writeEPKhjm+0x5c>

023fa8e4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 23fa8e4:	b538      	push	{r3, r4, r5, lr}
 23fa8e6:	4b0b      	ldr	r3, [pc, #44]	; (23fa914 <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 23fa8e8:	6984      	ldr	r4, [r0, #24]
 23fa8ea:	4605      	mov	r5, r0
 23fa8ec:	6003      	str	r3, [r0, #0]
 23fa8ee:	b17c      	cbz	r4, 23fa910 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 23fa8f0:	6863      	ldr	r3, [r4, #4]
 23fa8f2:	3b01      	subs	r3, #1
 23fa8f4:	6063      	str	r3, [r4, #4]
 23fa8f6:	b95b      	cbnz	r3, 23fa910 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 23fa8f8:	6823      	ldr	r3, [r4, #0]
 23fa8fa:	4620      	mov	r0, r4
 23fa8fc:	689b      	ldr	r3, [r3, #8]
 23fa8fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fa900:	68a3      	ldr	r3, [r4, #8]
 23fa902:	3b01      	subs	r3, #1
 23fa904:	60a3      	str	r3, [r4, #8]
 23fa906:	b91b      	cbnz	r3, 23fa910 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 23fa908:	6823      	ldr	r3, [r4, #0]
 23fa90a:	4620      	mov	r0, r4
 23fa90c:	68db      	ldr	r3, [r3, #12]
 23fa90e:	4798      	blx	r3
 23fa910:	4628      	mov	r0, r5
 23fa912:	bd38      	pop	{r3, r4, r5, pc}
 23fa914:	023ff998 	.word	0x023ff998

023fa918 <_ZN9TCPClientD0Ev>:
 23fa918:	b510      	push	{r4, lr}
 23fa91a:	4604      	mov	r4, r0
 23fa91c:	f7ff ffe2 	bl	23fa8e4 <_ZN9TCPClientD1Ev>
 23fa920:	4620      	mov	r0, r4
 23fa922:	211c      	movs	r1, #28
 23fa924:	f7f9 f80b 	bl	23f393e <_ZdlPvj>
 23fa928:	4620      	mov	r0, r4
 23fa92a:	bd10      	pop	{r4, pc}

023fa92c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
 23fa92c:	b530      	push	{r4, r5, lr}
 23fa92e:	4604      	mov	r4, r0
 23fa930:	b087      	sub	sp, #28
        return *this = IPAddress(address);
 23fa932:	4668      	mov	r0, sp
 23fa934:	f7fe f8da 	bl	23f8aec <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fa938:	ad01      	add	r5, sp, #4
 23fa93a:	3404      	adds	r4, #4
 23fa93c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fa93e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fa940:	682b      	ldr	r3, [r5, #0]
 23fa942:	7023      	strb	r3, [r4, #0]
    }
 23fa944:	b007      	add	sp, #28
 23fa946:	bd30      	pop	{r4, r5, pc}

023fa948 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
 23fa948:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 23fa94a:	4604      	mov	r4, r0
 23fa94c:	4606      	mov	r6, r0
      { return _M_ptr; }
 23fa94e:	694d      	ldr	r5, [r1, #20]
 23fa950:	4b04      	ldr	r3, [pc, #16]	; (23fa964 <_ZN9TCPClient8remoteIPEv+0x1c>)
 23fa952:	358c      	adds	r5, #140	; 0x8c
 23fa954:	f844 3b04 	str.w	r3, [r4], #4
 23fa958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fa95a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fa95c:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 23fa95e:	4630      	mov	r0, r6
 23fa960:	7023      	strb	r3, [r4, #0]
 23fa962:	bd70      	pop	{r4, r5, r6, pc}
 23fa964:	023ff824 	.word	0x023ff824

023fa968 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fa968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fa96c:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
 23fa96e:	2400      	movs	r4, #0
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fa970:	4698      	mov	r8, r3
    stop();
 23fa972:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fa974:	b093      	sub	sp, #76	; 0x4c
    stop();
 23fa976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fa978:	4606      	mov	r6, r0
 23fa97a:	4617      	mov	r7, r2
    stop();
 23fa97c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23fa97e:	4628      	mov	r0, r5
 23fa980:	466b      	mov	r3, sp
 23fa982:	4622      	mov	r2, r4
 23fa984:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
 23fa986:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23fa988:	f7fd fa82 	bl	23f7e90 <netdb_getaddrinfo>
 23fa98c:	4605      	mov	r5, r0
 23fa98e:	2800      	cmp	r0, #0
 23fa990:	d163      	bne.n	23faa5a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
 23fa992:	9b00      	ldr	r3, [sp, #0]
 23fa994:	2b00      	cmp	r3, #0
 23fa996:	d04b      	beq.n	23faa30 <_ZN9TCPClient7connectEPKctm+0xc8>
 23fa998:	695b      	ldr	r3, [r3, #20]
 23fa99a:	2b00      	cmp	r3, #0
 23fa99c:	d048      	beq.n	23faa30 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
 23fa99e:	a806      	add	r0, sp, #24
 23fa9a0:	f7fe f860 	bl	23f8a64 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
 23fa9a4:	9b00      	ldr	r3, [sp, #0]
 23fa9a6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
 23fa9a8:	7863      	ldrb	r3, [r4, #1]
 23fa9aa:	2b02      	cmp	r3, #2
 23fa9ac:	d104      	bne.n	23fa9b8 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
 23fa9ae:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
 23fa9b0:	a806      	add	r0, sp, #24
 23fa9b2:	f7ff ffbb 	bl	23fa92c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
 23fa9b6:	e026      	b.n	23faa06 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
 23fa9b8:	2b0a      	cmp	r3, #10
 23fa9ba:	d124      	bne.n	23faa06 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
 23fa9bc:	2211      	movs	r2, #17
 23fa9be:	4629      	mov	r1, r5
 23fa9c0:	a801      	add	r0, sp, #4
 23fa9c2:	f002 f954 	bl	23fcc6e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
 23fa9c6:	68a3      	ldr	r3, [r4, #8]
 23fa9c8:	2b00      	cmp	r3, #0
 23fa9ca:	d038      	beq.n	23faa3e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fa9cc:	f104 0308 	add.w	r3, r4, #8
 23fa9d0:	f10d 0c04 	add.w	ip, sp, #4
 23fa9d4:	3418      	adds	r4, #24
 23fa9d6:	4662      	mov	r2, ip
 23fa9d8:	6818      	ldr	r0, [r3, #0]
 23fa9da:	6859      	ldr	r1, [r3, #4]
 23fa9dc:	3308      	adds	r3, #8
 23fa9de:	c203      	stmia	r2!, {r0, r1}
 23fa9e0:	42a3      	cmp	r3, r4
 23fa9e2:	4694      	mov	ip, r2
 23fa9e4:	d1f7      	bne.n	23fa9d6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
 23fa9e6:	2306      	movs	r3, #6
            addr = IPAddress(a);
 23fa9e8:	a901      	add	r1, sp, #4
 23fa9ea:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
 23fa9ec:	f88d 3014 	strb.w	r3, [sp, #20]
 23fa9f0:	ac07      	add	r4, sp, #28
            addr = IPAddress(a);
 23fa9f2:	f7fe f845 	bl	23f8a80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fa9f6:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23fa9fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23fa9fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23faa00:	f8dc 3000 	ldr.w	r3, [ip]
 23faa04:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
 23faa06:	a806      	add	r0, sp, #24
 23faa08:	f7fe f84c 	bl	23f8aa4 <_ZNK9IPAddresscvbEv>
        if (addr) {
 23faa0c:	b180      	cbz	r0, 23faa30 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
 23faa0e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 23faa10:	ac0d      	add	r4, sp, #52	; 0x34
 23faa12:	f8d3 9020 	ldr.w	r9, [r3, #32]
 23faa16:	4b12      	ldr	r3, [pc, #72]	; (23faa60 <_ZN9TCPClient7connectEPKctm+0xf8>)
 23faa18:	ad07      	add	r5, sp, #28
 23faa1a:	930c      	str	r3, [sp, #48]	; 0x30
 23faa1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23faa1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23faa20:	682b      	ldr	r3, [r5, #0]
 23faa22:	463a      	mov	r2, r7
 23faa24:	7023      	strb	r3, [r4, #0]
 23faa26:	4630      	mov	r0, r6
 23faa28:	4643      	mov	r3, r8
 23faa2a:	a90c      	add	r1, sp, #48	; 0x30
 23faa2c:	47c8      	blx	r9
 23faa2e:	4605      	mov	r5, r0
    SCOPE_GUARD({
 23faa30:	9800      	ldr	r0, [sp, #0]
 23faa32:	f7fd fa1f 	bl	23f7e74 <netdb_freeaddrinfo>
}
 23faa36:	4628      	mov	r0, r5
 23faa38:	b013      	add	sp, #76	; 0x4c
 23faa3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
 23faa3e:	68e3      	ldr	r3, [r4, #12]
 23faa40:	2b00      	cmp	r3, #0
 23faa42:	d1c3      	bne.n	23fa9cc <_ZN9TCPClient7connectEPKctm+0x64>
 23faa44:	f64f 70ff 	movw	r0, #65535	; 0xffff
 23faa48:	f8d4 9010 	ldr.w	r9, [r4, #16]
 23faa4c:	f7fd f9f6 	bl	23f7e3c <inet_htonl>
 23faa50:	4581      	cmp	r9, r0
 23faa52:	d1bb      	bne.n	23fa9cc <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
 23faa54:	f104 0114 	add.w	r1, r4, #20
 23faa58:	e7aa      	b.n	23fa9b0 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23faa5a:	4625      	mov	r5, r4
 23faa5c:	e7e8      	b.n	23faa30 <_ZN9TCPClient7connectEPKctm+0xc8>
 23faa5e:	bf00      	nop
 23faa60:	023ff824 	.word	0x023ff824

023faa64 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
 23faa64:	b538      	push	{r3, r4, r5, lr}
 23faa66:	6943      	ldr	r3, [r0, #20]
 23faa68:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
 23faa6a:	681a      	ldr	r2, [r3, #0]
 23faa6c:	2a00      	cmp	r2, #0
 23faa6e:	da10      	bge.n	23faa92 <_ZN9TCPClient9connectedEv+0x2e>
 23faa70:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23faa74:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23faa78:	429a      	cmp	r2, r3
 23faa7a:	d10a      	bne.n	23faa92 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
 23faa7c:	6803      	ldr	r3, [r0, #0]
 23faa7e:	691b      	ldr	r3, [r3, #16]
 23faa80:	4798      	blx	r3
        if (!rv) {
 23faa82:	4604      	mov	r4, r0
 23faa84:	b928      	cbnz	r0, 23faa92 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
 23faa86:	682b      	ldr	r3, [r5, #0]
 23faa88:	4628      	mov	r0, r5
 23faa8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23faa8c:	4798      	blx	r3
        rv = available();
 23faa8e:	4620      	mov	r0, r4
}
 23faa90:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
 23faa92:	2001      	movs	r0, #1
 23faa94:	e7fc      	b.n	23faa90 <_ZN9TCPClient9connectedEv+0x2c>

023faa96 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
 23faa96:	b510      	push	{r4, lr}
 23faa98:	6943      	ldr	r3, [r0, #20]
 23faa9a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 23faa9c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23faaa0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23faaa4:	429a      	cmp	r2, r3
 23faaa6:	d005      	beq.n	23faab4 <_ZN9TCPClient4peekEv+0x1e>
 23faaa8:	6963      	ldr	r3, [r4, #20]
 23faaaa:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 23faaae:	4413      	add	r3, r2
 23faab0:	7918      	ldrb	r0, [r3, #4]
}
 23faab2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 23faab4:	6803      	ldr	r3, [r0, #0]
 23faab6:	691b      	ldr	r3, [r3, #16]
 23faab8:	4798      	blx	r3
 23faaba:	2800      	cmp	r0, #0
 23faabc:	d1f4      	bne.n	23faaa8 <_ZN9TCPClient4peekEv+0x12>
 23faabe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23faac2:	e7f6      	b.n	23faab2 <_ZN9TCPClient4peekEv+0x1c>

023faac4 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
 23faac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23faac6:	6943      	ldr	r3, [r0, #20]
 23faac8:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
 23faaca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23faace:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
int TCPClient::read(uint8_t *buffer, size_t size) {
 23faad2:	4605      	mov	r5, r0
    if (bufferCount() || available()) {
 23faad4:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
 23faad6:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
 23faad8:	d016      	beq.n	23fab08 <_ZN9TCPClient4readEPhj+0x44>
 23faada:	6969      	ldr	r1, [r5, #20]
        memcpy(buffer, &d_->buffer[d_->offset], read);
 23faadc:	4630      	mov	r0, r6
    return d_->total - d_->offset;
 23faade:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 23faae2:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 23faae6:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 23faae8:	42bc      	cmp	r4, r7
 23faaea:	bf28      	it	cs
 23faaec:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
 23faaee:	3304      	adds	r3, #4
 23faaf0:	4622      	mov	r2, r4
 23faaf2:	4419      	add	r1, r3
 23faaf4:	f002 f894 	bl	23fcc20 <memcpy>
 23faaf8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
 23faafa:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 23faafe:	4423      	add	r3, r4
 23fab00:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 23fab04:	4620      	mov	r0, r4
 23fab06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
 23fab08:	6803      	ldr	r3, [r0, #0]
 23fab0a:	691b      	ldr	r3, [r3, #16]
 23fab0c:	4798      	blx	r3
 23fab0e:	2800      	cmp	r0, #0
 23fab10:	d1e3      	bne.n	23faada <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
 23fab12:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 23fab16:	e7f5      	b.n	23fab04 <_ZN9TCPClient4readEPhj+0x40>

023fab18 <_ZN9TCPClient12flush_bufferEv>:
    d_->offset = 0;
 23fab18:	2300      	movs	r3, #0
 23fab1a:	6942      	ldr	r2, [r0, #20]
 23fab1c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 23fab20:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
 23fab22:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 23fab26:	4770      	bx	lr

023fab28 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23fab28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fab2c:	460c      	mov	r4, r1
 23fab2e:	4605      	mov	r5, r0
 23fab30:	461f      	mov	r7, r3
    stop();
 23fab32:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23fab34:	b08a      	sub	sp, #40	; 0x28
    stop();
 23fab36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23fab38:	4616      	mov	r6, r2
    stop();
 23fab3a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
 23fab3c:	7d23      	ldrb	r3, [r4, #20]
 23fab3e:	2206      	movs	r2, #6
 23fab40:	2b04      	cmp	r3, #4
 23fab42:	bf0c      	ite	eq
 23fab44:	2002      	moveq	r0, #2
 23fab46:	200a      	movne	r0, #10
 23fab48:	2101      	movs	r1, #1
 23fab4a:	f8d5 8014 	ldr.w	r8, [r5, #20]
 23fab4e:	f7fd f9f3 	bl	23f7f38 <sock_socket>
 23fab52:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
 23fab56:	696b      	ldr	r3, [r5, #20]
 23fab58:	681b      	ldr	r3, [r3, #0]
 23fab5a:	2b00      	cmp	r3, #0
 23fab5c:	da08      	bge.n	23fab70 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
 23fab5e:	682b      	ldr	r3, [r5, #0]
 23fab60:	4628      	mov	r0, r5
 23fab62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fab64:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
 23fab66:	4798      	blx	r3
}
 23fab68:	4620      	mov	r0, r4
 23fab6a:	b00a      	add	sp, #40	; 0x28
 23fab6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
 23fab70:	4628      	mov	r0, r5
 23fab72:	f7ff ffd1 	bl	23fab18 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
 23fab76:	b1b7      	cbz	r7, 23faba6 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
 23fab78:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fab7a:	a903      	add	r1, sp, #12
 23fab7c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
 23fab7e:	9303      	str	r3, [sp, #12]
 23fab80:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fab84:	f7fd f93e 	bl	23f7e04 <if_index_to_name>
 23fab88:	2800      	cmp	r0, #0
 23fab8a:	d1e8      	bne.n	23fab5e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
 23fab8c:	2306      	movs	r3, #6
 23fab8e:	6968      	ldr	r0, [r5, #20]
 23fab90:	9300      	str	r3, [sp, #0]
 23fab92:	f241 020b 	movw	r2, #4107	; 0x100b
 23fab96:	f640 71ff 	movw	r1, #4095	; 0xfff
 23fab9a:	6800      	ldr	r0, [r0, #0]
 23fab9c:	ab03      	add	r3, sp, #12
 23fab9e:	f7fd f985 	bl	23f7eac <sock_setsockopt>
 23faba2:	2800      	cmp	r0, #0
 23faba4:	d1db      	bne.n	23fab5e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
 23faba6:	221c      	movs	r2, #28
 23faba8:	2100      	movs	r1, #0
 23fabaa:	a803      	add	r0, sp, #12
 23fabac:	f002 f85f 	bl	23fcc6e <memset>
    if (ip.version() == 4) {
 23fabb0:	7d23      	ldrb	r3, [r4, #20]
 23fabb2:	2b04      	cmp	r3, #4
 23fabb4:	d11d      	bne.n	23fabf2 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
 23fabb6:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
 23fabba:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
 23fabbc:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
 23fabc0:	f7fd f94a 	bl	23f7e58 <inet_htons>
 23fabc4:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
 23fabc8:	6860      	ldr	r0, [r4, #4]
 23fabca:	f7fd f937 	bl	23f7e3c <inet_htonl>
 23fabce:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
 23fabd0:	696b      	ldr	r3, [r5, #20]
 23fabd2:	221c      	movs	r2, #28
 23fabd4:	6818      	ldr	r0, [r3, #0]
 23fabd6:	a903      	add	r1, sp, #12
 23fabd8:	f7fd f984 	bl	23f7ee4 <sock_connect>
 23fabdc:	2800      	cmp	r0, #0
 23fabde:	d1be      	bne.n	23fab5e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
 23fabe0:	696d      	ldr	r5, [r5, #20]
 23fabe2:	3404      	adds	r4, #4
 23fabe4:	358c      	adds	r5, #140	; 0x8c
 23fabe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fabe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23fabea:	6823      	ldr	r3, [r4, #0]
    return 1; // success
 23fabec:	2401      	movs	r4, #1
 23fabee:	702b      	strb	r3, [r5, #0]
 23fabf0:	e7ba      	b.n	23fab68 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
 23fabf2:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
 23fabf6:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
 23fabf8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
 23fabfc:	f7fd f92c 	bl	23f7e58 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
 23fac00:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
 23fac02:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
 23fac06:	1d23      	adds	r3, r4, #4
 23fac08:	f104 0714 	add.w	r7, r4, #20
 23fac0c:	4632      	mov	r2, r6
 23fac0e:	6818      	ldr	r0, [r3, #0]
 23fac10:	6859      	ldr	r1, [r3, #4]
 23fac12:	3308      	adds	r3, #8
 23fac14:	c203      	stmia	r2!, {r0, r1}
 23fac16:	42bb      	cmp	r3, r7
 23fac18:	4616      	mov	r6, r2
 23fac1a:	d1f7      	bne.n	23fac0c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
 23fac1c:	e7d8      	b.n	23fabd0 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

023fac20 <_ZN9TCPClient9availableEv>:
{
 23fac20:	b530      	push	{r4, r5, lr}
 23fac22:	6942      	ldr	r2, [r0, #20]
 23fac24:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
 23fac26:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
 23fac2a:	b08b      	sub	sp, #44	; 0x2c
    if (d_->total && (d_->offset == d_->total)) {
 23fac2c:	b12b      	cbz	r3, 23fac3a <_ZN9TCPClient9availableEv+0x1a>
 23fac2e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 23fac32:	429a      	cmp	r2, r3
 23fac34:	d101      	bne.n	23fac3a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
 23fac36:	f7ff ff6f 	bl	23fab18 <_ZN9TCPClient12flush_bufferEv>
 23fac3a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
 23fac3c:	6808      	ldr	r0, [r1, #0]
 23fac3e:	2800      	cmp	r0, #0
 23fac40:	db18      	blt.n	23fac74 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
 23fac42:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
 23fac46:	2d7f      	cmp	r5, #127	; 0x7f
 23fac48:	d814      	bhi.n	23fac74 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
 23fac4a:	3104      	adds	r1, #4
 23fac4c:	2308      	movs	r3, #8
 23fac4e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
 23fac52:	4429      	add	r1, r5
 23fac54:	f7fd f954 	bl	23f7f00 <sock_recv>
            if (ret > 0) {
 23fac58:	2800      	cmp	r0, #0
 23fac5a:	dd13      	ble.n	23fac84 <_ZN9TCPClient9availableEv+0x64>
 23fac5c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
 23fac5e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fac62:	b90a      	cbnz	r2, 23fac68 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
 23fac64:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 23fac68:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 23fac6a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fac6e:	4410      	add	r0, r2
 23fac70:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 23fac74:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
 23fac76:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 23fac7a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 23fac7e:	1ac0      	subs	r0, r0, r3
 23fac80:	b00b      	add	sp, #44	; 0x2c
 23fac82:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
 23fac84:	f7fd fd2c 	bl	23f86e0 <__errno>
 23fac88:	6803      	ldr	r3, [r0, #0]
 23fac8a:	2b0b      	cmp	r3, #11
 23fac8c:	d0f2      	beq.n	23fac74 <_ZN9TCPClient9availableEv+0x54>
 23fac8e:	f7fd fd27 	bl	23f86e0 <__errno>
 23fac92:	6803      	ldr	r3, [r0, #0]
 23fac94:	2b0b      	cmp	r3, #11
 23fac96:	d0ed      	beq.n	23fac74 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
 23fac98:	2320      	movs	r3, #32
 23fac9a:	2500      	movs	r5, #0
 23fac9c:	e9cd 3502 	strd	r3, r5, [sp, #8]
 23faca0:	f7fd fd1e 	bl	23f86e0 <__errno>
 23faca4:	6803      	ldr	r3, [r0, #0]
 23faca6:	aa02      	add	r2, sp, #8
 23faca8:	9301      	str	r3, [sp, #4]
 23facaa:	4b08      	ldr	r3, [pc, #32]	; (23faccc <_ZN9TCPClient9availableEv+0xac>)
 23facac:	2032      	movs	r0, #50	; 0x32
 23facae:	4908      	ldr	r1, [pc, #32]	; (23facd0 <_ZN9TCPClient9availableEv+0xb0>)
 23facb0:	9300      	str	r3, [sp, #0]
 23facb2:	462b      	mov	r3, r5
 23facb4:	f7fd faba 	bl	23f822c <log_message>
                    sock_close(d_->sock);
 23facb8:	6963      	ldr	r3, [r4, #20]
 23facba:	6818      	ldr	r0, [r3, #0]
 23facbc:	f7fd f904 	bl	23f7ec8 <sock_close>
                    d_->sock = -1;
 23facc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23facc4:	6963      	ldr	r3, [r4, #20]
 23facc6:	601a      	str	r2, [r3, #0]
 23facc8:	e7d4      	b.n	23fac74 <_ZN9TCPClient9availableEv+0x54>
 23facca:	bf00      	nop
 23faccc:	023ff963 	.word	0x023ff963
 23facd0:	023ff95c 	.word	0x023ff95c

023facd4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
 23facd4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
 23facd6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
 23facd8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
 23facda:	6818      	ldr	r0, [r3, #0]
 23facdc:	2800      	cmp	r0, #0
 23facde:	db01      	blt.n	23face4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
 23face0:	f7fd f8f2 	bl	23f7ec8 <sock_close>
    d_->sock = -1;
 23face4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23face8:	6963      	ldr	r3, [r4, #20]
    void clear() { memset(&address, 0, sizeof (address)); }
 23facea:	2100      	movs	r1, #0
 23facec:	601a      	str	r2, [r3, #0]
 23facee:	6960      	ldr	r0, [r4, #20]
 23facf0:	2211      	movs	r2, #17
 23facf2:	308c      	adds	r0, #140	; 0x8c
 23facf4:	f001 ffbb 	bl	23fcc6e <memset>
    flush_buffer();
 23facf8:	4620      	mov	r0, r4
}
 23facfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
 23facfe:	f7ff bf0b 	b.w	23fab18 <_ZN9TCPClient12flush_bufferEv>

023fad02 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 23fad02:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 23fad04:	b510      	push	{r4, lr}
 23fad06:	4604      	mov	r4, r0
          total(0) {
 23fad08:	6001      	str	r1, [r0, #0]
 23fad0a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 23fad0e:	3088      	adds	r0, #136	; 0x88
 23fad10:	f7fd fea8 	bl	23f8a64 <_ZN9IPAddressC1Ev>
}
 23fad14:	4620      	mov	r0, r4
 23fad16:	bd10      	pop	{r4, pc}

023fad18 <_ZN9TCPClientC1Ei>:
 23fad18:	2300      	movs	r3, #0
 23fad1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
TCPClient::TCPClient(sock_handle_t sock)
 23fad1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fad20:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
 23fad24:	4a0e      	ldr	r2, [pc, #56]	; (23fad60 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 23fad26:	6103      	str	r3, [r0, #16]
 23fad28:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fad2a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
 23fad2c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fad2e:	20ac      	movs	r0, #172	; 0xac
 23fad30:	9101      	str	r1, [sp, #4]
 23fad32:	f7f8 fdfe 	bl	23f3932 <_Znwj>
	  auto __pi = ::new (__mem)
 23fad36:	1e05      	subs	r5, r0, #0
 23fad38:	f105 060c 	add.w	r6, r5, #12
 23fad3c:	d008      	beq.n	23fad50 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 23fad3e:	2301      	movs	r3, #1
 23fad40:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 23fad44:	4b07      	ldr	r3, [pc, #28]	; (23fad64 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 23fad46:	4630      	mov	r0, r6
 23fad48:	9901      	ldr	r1, [sp, #4]
 23fad4a:	602b      	str	r3, [r5, #0]
 23fad4c:	f7ff ffd9 	bl	23fad02 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
 23fad50:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 23fad52:	e9c4 6505 	strd	r6, r5, [r4, #20]
 23fad56:	f7ff fedf 	bl	23fab18 <_ZN9TCPClient12flush_bufferEv>
}
 23fad5a:	b002      	add	sp, #8
 23fad5c:	bd70      	pop	{r4, r5, r6, pc}
 23fad5e:	bf00      	nop
 23fad60:	023ff998 	.word	0x023ff998
 23fad64:	023ff97c 	.word	0x023ff97c

023fad68 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
 23fad68:	b510      	push	{r4, lr}
 23fad6a:	4604      	mov	r4, r0
        : TCPClient(-1) {
 23fad6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23fad70:	f7ff ffd2 	bl	23fad18 <_ZN9TCPClientC1Ei>
}
 23fad74:	4620      	mov	r0, r4
 23fad76:	bd10      	pop	{r4, pc}

023fad78 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 23fad78:	b510      	push	{r4, lr}
 23fad7a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 23fad7c:	6800      	ldr	r0, [r0, #0]
 23fad7e:	2800      	cmp	r0, #0
 23fad80:	db01      	blt.n	23fad86 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
 23fad82:	f7fd f8a1 	bl	23f7ec8 <sock_close>
    }
}
 23fad86:	4620      	mov	r0, r4
 23fad88:	bd10      	pop	{r4, pc}

023fad8a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 23fad8a:	300c      	adds	r0, #12
 23fad8c:	f7ff bff4 	b.w	23fad78 <_ZN9TCPClient4DataD1Ev>

023fad90 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 23fad90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 23fad94:	4a15      	ldr	r2, [pc, #84]	; (23fadec <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 23fad96:	f8df 8060 	ldr.w	r8, [pc, #96]	; 23fadf8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 23fad9a:	e9d2 6300 	ldrd	r6, r3, [r2]
 23fad9e:	1980      	adds	r0, r0, r6
 23fada0:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
 23fada4:	4b12      	ldr	r3, [pc, #72]	; (23fadf0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 23fada6:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 23fada8:	e9d3 6700 	ldrd	r6, r7, [r3]
 23fadac:	1986      	adds	r6, r0, r6
 23fadae:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
 23fadb2:	e9d8 2300 	ldrd	r2, r3, [r8]
 23fadb6:	42bb      	cmp	r3, r7
 23fadb8:	bf08      	it	eq
 23fadba:	42b2      	cmpeq	r2, r6
 23fadbc:	d013      	beq.n	23fade6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 23fadbe:	a903      	add	r1, sp, #12
 23fadc0:	4668      	mov	r0, sp
 23fadc2:	e9cd 6700 	strd	r6, r7, [sp]
 23fadc6:	f7fd fcc3 	bl	23f8750 <localtime_r>
	calendar_time.tm_year += 1900;
 23fadca:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23fadcc:	4d09      	ldr	r5, [pc, #36]	; (23fadf4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 23fadce:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23fadd2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 23fadd4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23fadd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fadd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23fadda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23faddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 23fadde:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23fade2:	6823      	ldr	r3, [r4, #0]
 23fade4:	602b      	str	r3, [r5, #0]
    }
}
 23fade6:	b00c      	add	sp, #48	; 0x30
 23fade8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fadec:	1007aea8 	.word	0x1007aea8
 23fadf0:	1007aea0 	.word	0x1007aea0
 23fadf4:	1007ae7c 	.word	0x1007ae7c
 23fadf8:	1007aeb0 	.word	0x1007aeb0

023fadfc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 23fadfc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 23fadfe:	2000      	movs	r0, #0
 23fae00:	f7fd fb10 	bl	23f8424 <spark_sync_time_pending>
 23fae04:	b128      	cbz	r0, 23fae12 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fae06:	f7fd faf1 	bl	23f83ec <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 23fae0a:	f080 0001 	eor.w	r0, r0, #1
 23fae0e:	b2c0      	uxtb	r0, r0
    }
 23fae10:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 23fae12:	2001      	movs	r0, #1
 23fae14:	e7fc      	b.n	23fae10 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

023fae18 <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
 23fae18:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23fae1a:	f7ff ffb9 	bl	23fad90 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
 23fae1e:	4b02      	ldr	r3, [pc, #8]	; (23fae28 <_ZN9TimeClass7weekdayEx+0x10>)
 23fae20:	6998      	ldr	r0, [r3, #24]
}
 23fae22:	3001      	adds	r0, #1
 23fae24:	bd08      	pop	{r3, pc}
 23fae26:	bf00      	nop
 23fae28:	1007ae7c 	.word	0x1007ae7c

023fae2c <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 23fae2c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23fae2e:	f7ff ffaf 	bl	23fad90 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 23fae32:	4b02      	ldr	r3, [pc, #8]	; (23fae3c <_ZN9TimeClass5monthEx+0x10>)
 23fae34:	6918      	ldr	r0, [r3, #16]
}
 23fae36:	3001      	adds	r0, #1
 23fae38:	bd08      	pop	{r3, pc}
 23fae3a:	bf00      	nop
 23fae3c:	1007ae7c 	.word	0x1007ae7c

023fae40 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
 23fae40:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 23fae44:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23fae48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 23fae4c:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 23fae4e:	d411      	bmi.n	23fae74 <_ZN9TimeClass4zoneEf+0x34>
 23fae50:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
 23fae54:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23fae58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fae5c:	dc0a      	bgt.n	23fae74 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 23fae5e:	eddf 7a06 	vldr	s15, [pc, #24]	; 23fae78 <_ZN9TimeClass4zoneEf+0x38>
 23fae62:	ee60 7a27 	vmul.f32	s15, s0, s15
 23fae66:	ee17 0a90 	vmov	r0, s15
 23fae6a:	f7f8 fb51 	bl	23f3510 <__aeabi_f2lz>
 23fae6e:	4b03      	ldr	r3, [pc, #12]	; (23fae7c <_ZN9TimeClass4zoneEf+0x3c>)
 23fae70:	e9c3 0100 	strd	r0, r1, [r3]
}
 23fae74:	bd08      	pop	{r3, pc}
 23fae76:	bf00      	nop
 23fae78:	45610000 	.word	0x45610000
 23fae7c:	1007aea8 	.word	0x1007aea8

023fae80 <_ZN9TimeClass8beginDSTEv>:
    dst_cache = offset * 3600;
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
 23fae80:	4b03      	ldr	r3, [pc, #12]	; (23fae90 <_ZN9TimeClass8beginDSTEv+0x10>)
 23fae82:	e9d3 0100 	ldrd	r0, r1, [r3]
 23fae86:	4b03      	ldr	r3, [pc, #12]	; (23fae94 <_ZN9TimeClass8beginDSTEv+0x14>)
 23fae88:	e9c3 0100 	strd	r0, r1, [r3]
}
 23fae8c:	4770      	bx	lr
 23fae8e:	bf00      	nop
 23fae90:	1007aaf0 	.word	0x1007aaf0
 23fae94:	1007aea0 	.word	0x1007aea0

023fae98 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 23fae98:	b530      	push	{r4, r5, lr}
 23fae9a:	b093      	sub	sp, #76	; 0x4c
 23fae9c:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
 23faea0:	4b19      	ldr	r3, [pc, #100]	; (23faf08 <_ZN9TimeClass7timeStrEx+0x70>)
{
 23faea2:	4604      	mov	r4, r0
    t += time_zone_cache;
 23faea4:	e9d3 1000 	ldrd	r1, r0, [r3]
 23faea8:	9b01      	ldr	r3, [sp, #4]
 23faeaa:	1852      	adds	r2, r2, r1
 23faeac:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
 23faeb0:	4816      	ldr	r0, [pc, #88]	; (23faf0c <_ZN9TimeClass7timeStrEx+0x74>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 23faeb2:	2500      	movs	r5, #0
    t += dst_current_cache;
 23faeb4:	e9d0 1000 	ldrd	r1, r0, [r0]
 23faeb8:	1852      	adds	r2, r2, r1
 23faeba:	eb43 0300 	adc.w	r3, r3, r0
 23faebe:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 23faec2:	2224      	movs	r2, #36	; 0x24
 23faec4:	2100      	movs	r1, #0
 23faec6:	eb0d 0002 	add.w	r0, sp, r2
 23faeca:	f001 fed0 	bl	23fcc6e <memset>
    localtime_r(&t, &calendar_time);
 23faece:	a909      	add	r1, sp, #36	; 0x24
 23faed0:	4668      	mov	r0, sp
 23faed2:	f7fd fc3d 	bl	23f8750 <localtime_r>
    char ascstr[26] = {};
 23faed6:	2216      	movs	r2, #22
 23faed8:	4629      	mov	r1, r5
 23faeda:	a803      	add	r0, sp, #12
 23faedc:	9502      	str	r5, [sp, #8]
 23faede:	f001 fec6 	bl	23fcc6e <memset>
    asctime_r(&calendar_time, ascstr);
 23faee2:	a902      	add	r1, sp, #8
 23faee4:	a809      	add	r0, sp, #36	; 0x24
 23faee6:	f001 fe57 	bl	23fcb98 <asctime_r>
    int len = strlen(ascstr);
 23faeea:	a802      	add	r0, sp, #8
 23faeec:	f7f8 fce4 	bl	23f38b8 <strlen>
    ascstr[len-1] = 0; // remove final newline
 23faef0:	ab12      	add	r3, sp, #72	; 0x48
 23faef2:	4418      	add	r0, r3
 23faef4:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 23faef8:	a902      	add	r1, sp, #8
 23faefa:	4620      	mov	r0, r4
 23faefc:	f7ff f9df 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
}
 23faf00:	4620      	mov	r0, r4
 23faf02:	b013      	add	sp, #76	; 0x4c
 23faf04:	bd30      	pop	{r4, r5, pc}
 23faf06:	bf00      	nop
 23faf08:	1007aea8 	.word	0x1007aea8
 23faf0c:	1007aea0 	.word	0x1007aea0

023faf10 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 23faf10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23faf14:	b0a4      	sub	sp, #144	; 0x90
 23faf16:	4607      	mov	r7, r0
 23faf18:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23faf1a:	a814      	add	r0, sp, #80	; 0x50
{
 23faf1c:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23faf1e:	223f      	movs	r2, #63	; 0x3f
{
 23faf20:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23faf22:	f001 ff0e 	bl	23fcd42 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 23faf26:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 23faf28:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 23faf2a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 23faf2e:	f7f8 fcc3 	bl	23f38b8 <strlen>
 23faf32:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 23faf34:	bb4c      	cbnz	r4, 23faf8a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
 23faf36:	4929      	ldr	r1, [pc, #164]	; (23fafdc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
 23faf38:	a803      	add	r0, sp, #12
 23faf3a:	f001 fee6 	bl	23fcd0a <strcpy>
{
 23faf3e:	2600      	movs	r6, #0
 23faf40:	ac14      	add	r4, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 23faf42:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 23faf46:	45b1      	cmp	r9, r6
 23faf48:	d934      	bls.n	23fafb4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 23faf4a:	7823      	ldrb	r3, [r4, #0]
 23faf4c:	f106 0a01 	add.w	sl, r6, #1
 23faf50:	2b25      	cmp	r3, #37	; 0x25
 23faf52:	d117      	bne.n	23faf84 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
 23faf54:	7863      	ldrb	r3, [r4, #1]
 23faf56:	2b7a      	cmp	r3, #122	; 0x7a
 23faf58:	d114      	bne.n	23faf84 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
 23faf5a:	a803      	add	r0, sp, #12
 23faf5c:	f7f8 fcac 	bl	23f38b8 <strlen>
 23faf60:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 23faf62:	ab14      	add	r3, sp, #80	; 0x50
 23faf64:	1830      	adds	r0, r6, r0
 23faf66:	4418      	add	r0, r3
 23faf68:	eba9 0206 	sub.w	r2, r9, r6
 23faf6c:	1ca1      	adds	r1, r4, #2
 23faf6e:	f001 fe57 	bl	23fcc20 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 23faf72:	462a      	mov	r2, r5
 23faf74:	a903      	add	r1, sp, #12
 23faf76:	4620      	mov	r0, r4
 23faf78:	f001 fe52 	bl	23fcc20 <memcpy>
            len = strlen(format_str);
 23faf7c:	a814      	add	r0, sp, #80	; 0x50
 23faf7e:	f7f8 fc9b 	bl	23f38b8 <strlen>
 23faf82:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
 23faf84:	4656      	mov	r6, sl
 23faf86:	3401      	adds	r4, #1
 23faf88:	e7db      	b.n	23faf42 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 23faf8a:	233c      	movs	r3, #60	; 0x3c
 23faf8c:	fb94 f2f3 	sdiv	r2, r4, r3
 23faf90:	2a00      	cmp	r2, #0
 23faf92:	bfb8      	it	lt
 23faf94:	4252      	neglt	r2, r2
 23faf96:	fbb2 f1f3 	udiv	r1, r2, r3
 23faf9a:	fb03 2211 	mls	r2, r3, r1, r2
 23faf9e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 23fafa2:	9200      	str	r2, [sp, #0]
 23fafa4:	fb94 f3f3 	sdiv	r3, r4, r3
 23fafa8:	2110      	movs	r1, #16
 23fafaa:	4a0d      	ldr	r2, [pc, #52]	; (23fafe0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 23fafac:	a803      	add	r0, sp, #12
 23fafae:	f7fd fb5f 	bl	23f8670 <snprintf>
 23fafb2:	e7c4      	b.n	23faf3e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 23fafb4:	2100      	movs	r1, #0
 23fafb6:	222e      	movs	r2, #46	; 0x2e
 23fafb8:	a808      	add	r0, sp, #32
 23fafba:	9107      	str	r1, [sp, #28]
 23fafbc:	f001 fe57 	bl	23fcc6e <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 23fafc0:	4643      	mov	r3, r8
 23fafc2:	aa14      	add	r2, sp, #80	; 0x50
 23fafc4:	2132      	movs	r1, #50	; 0x32
 23fafc6:	a807      	add	r0, sp, #28
 23fafc8:	f7fd fbb4 	bl	23f8734 <strftime>
    return String(buf);
 23fafcc:	4638      	mov	r0, r7
 23fafce:	a907      	add	r1, sp, #28
 23fafd0:	f7ff f975 	bl	23fa2be <_ZN6StringC1EPK19__FlashStringHelper>
}
 23fafd4:	4638      	mov	r0, r7
 23fafd6:	b024      	add	sp, #144	; 0x90
 23fafd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fafdc:	023ff9dc 	.word	0x023ff9dc
 23fafe0:	023ff9de 	.word	0x023ff9de

023fafe4 <_ZN9TimeClass6formatExPKc>:
{
 23fafe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fafe6:	b08d      	sub	sp, #52	; 0x34
 23fafe8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 23fafea:	4604      	mov	r4, r0
 23fafec:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 23faff0:	b915      	cbnz	r5, 23faff8 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 23faff2:	4b19      	ldr	r3, [pc, #100]	; (23fb058 <_ZN9TimeClass6formatExPKc+0x74>)
 23faff4:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 23faff6:	b12d      	cbz	r5, 23fb004 <_ZN9TimeClass6formatExPKc+0x20>
 23faff8:	4b18      	ldr	r3, [pc, #96]	; (23fb05c <_ZN9TimeClass6formatExPKc+0x78>)
 23faffa:	4628      	mov	r0, r5
 23faffc:	6819      	ldr	r1, [r3, #0]
 23faffe:	f7f8 fc51 	bl	23f38a4 <strcmp>
 23fb002:	b938      	cbnz	r0, 23fb014 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 23fb004:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fb008:	4620      	mov	r0, r4
 23fb00a:	f7ff ff45 	bl	23fae98 <_ZN9TimeClass7timeStrEx>
}
 23fb00e:	4620      	mov	r0, r4
 23fb010:	b00d      	add	sp, #52	; 0x34
 23fb012:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 23fb014:	9900      	ldr	r1, [sp, #0]
 23fb016:	4e12      	ldr	r6, [pc, #72]	; (23fb060 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 23fb018:	4f12      	ldr	r7, [pc, #72]	; (23fb064 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 23fb01a:	e9d6 3200 	ldrd	r3, r2, [r6]
 23fb01e:	185b      	adds	r3, r3, r1
 23fb020:	9901      	ldr	r1, [sp, #4]
 23fb022:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
 23fb026:	e9d7 0100 	ldrd	r0, r1, [r7]
 23fb02a:	181b      	adds	r3, r3, r0
 23fb02c:	eb42 0201 	adc.w	r2, r2, r1
 23fb030:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 23fb034:	2100      	movs	r1, #0
 23fb036:	2224      	movs	r2, #36	; 0x24
 23fb038:	a803      	add	r0, sp, #12
 23fb03a:	f001 fe18 	bl	23fcc6e <memset>
    localtime_r(&t, &calendar_time);
 23fb03e:	a903      	add	r1, sp, #12
 23fb040:	4668      	mov	r0, sp
 23fb042:	f7fd fb85 	bl	23f8750 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 23fb046:	6832      	ldr	r2, [r6, #0]
 23fb048:	683b      	ldr	r3, [r7, #0]
 23fb04a:	4620      	mov	r0, r4
 23fb04c:	4413      	add	r3, r2
 23fb04e:	a903      	add	r1, sp, #12
 23fb050:	462a      	mov	r2, r5
 23fb052:	f7ff ff5d 	bl	23faf10 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 23fb056:	e7da      	b.n	23fb00e <_ZN9TimeClass6formatExPKc+0x2a>
 23fb058:	1007ae78 	.word	0x1007ae78
 23fb05c:	1007aae8 	.word	0x1007aae8
 23fb060:	1007aea8 	.word	0x1007aea8
 23fb064:	1007aea0 	.word	0x1007aea0

023fb068 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 23fb068:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 23fb06a:	2000      	movs	r0, #0
 23fb06c:	f7fc fddc 	bl	23f7c28 <hal_rtc_time_is_valid>
    if (rtcstate)
 23fb070:	4604      	mov	r4, r0
 23fb072:	b9a0      	cbnz	r0, 23fb09e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 23fb074:	f7fd f912 	bl	23f829c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 23fb078:	2801      	cmp	r0, #1
 23fb07a:	d110      	bne.n	23fb09e <_ZN9TimeClass7isValidEv+0x36>
 23fb07c:	4620      	mov	r0, r4
 23fb07e:	f7fd f953 	bl	23f8328 <system_thread_get_state>
 23fb082:	b960      	cbnz	r0, 23fb09e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 23fb084:	f7ff feba 	bl	23fadfc <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 23fb088:	b910      	cbnz	r0, 23fb090 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 23fb08a:	f7fd f9a1 	bl	23f83d0 <spark_process>
        while (_while() && !_condition()) {
 23fb08e:	e7f9      	b.n	23fb084 <_ZN9TimeClass7isValidEv+0x1c>
 23fb090:	f7ff feb4 	bl	23fadfc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 23fb094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 23fb098:	2000      	movs	r0, #0
 23fb09a:	f7fc bdc5 	b.w	23f7c28 <hal_rtc_time_is_valid>
}
 23fb09e:	4620      	mov	r0, r4
 23fb0a0:	bd10      	pop	{r4, pc}

023fb0a2 <_ZN9TimeClass3nowEv>:
{
 23fb0a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 23fb0a4:	f7ff ffe0 	bl	23fb068 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 23fb0a8:	2210      	movs	r2, #16
 23fb0aa:	2100      	movs	r1, #0
 23fb0ac:	4668      	mov	r0, sp
 23fb0ae:	f001 fdde 	bl	23fcc6e <memset>
    hal_rtc_get_time(&tv, nullptr);
 23fb0b2:	2100      	movs	r1, #0
 23fb0b4:	4668      	mov	r0, sp
 23fb0b6:	f7fc fdc5 	bl	23f7c44 <hal_rtc_get_time>
}
 23fb0ba:	9800      	ldr	r0, [sp, #0]
 23fb0bc:	b005      	add	sp, #20
 23fb0be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fb0c4 <_ZN9TimeClass4hourEv>:
{
 23fb0c4:	b508      	push	{r3, lr}
	return hour(now());
 23fb0c6:	f7ff ffec 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23fb0ca:	17c1      	asrs	r1, r0, #31
 23fb0cc:	f7ff fe60 	bl	23fad90 <_ZL22Refresh_UnixTime_Cachex>
}
 23fb0d0:	4b01      	ldr	r3, [pc, #4]	; (23fb0d8 <_ZN9TimeClass4hourEv+0x14>)
 23fb0d2:	6898      	ldr	r0, [r3, #8]
 23fb0d4:	bd08      	pop	{r3, pc}
 23fb0d6:	bf00      	nop
 23fb0d8:	1007ae7c 	.word	0x1007ae7c

023fb0dc <_ZN9TimeClass3dayEv>:
{
 23fb0dc:	b508      	push	{r3, lr}
	return day(now());
 23fb0de:	f7ff ffe0 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23fb0e2:	17c1      	asrs	r1, r0, #31
 23fb0e4:	f7ff fe54 	bl	23fad90 <_ZL22Refresh_UnixTime_Cachex>
}
 23fb0e8:	4b01      	ldr	r3, [pc, #4]	; (23fb0f0 <_ZN9TimeClass3dayEv+0x14>)
 23fb0ea:	68d8      	ldr	r0, [r3, #12]
 23fb0ec:	bd08      	pop	{r3, pc}
 23fb0ee:	bf00      	nop
 23fb0f0:	1007ae7c 	.word	0x1007ae7c

023fb0f4 <_ZN9TimeClass7weekdayEv>:
{
 23fb0f4:	b508      	push	{r3, lr}
	return weekday(now());
 23fb0f6:	f7ff ffd4 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
}
 23fb0fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
 23fb0fe:	17c1      	asrs	r1, r0, #31
 23fb100:	f7ff be8a 	b.w	23fae18 <_ZN9TimeClass7weekdayEx>

023fb104 <_ZN9TimeClass5monthEv>:
{
 23fb104:	b508      	push	{r3, lr}
	return month(now());
 23fb106:	f7ff ffcc 	bl	23fb0a2 <_ZN9TimeClass3nowEv>
}
 23fb10a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 23fb10e:	17c1      	asrs	r1, r0, #31
 23fb110:	f7ff be8c 	b.w	23fae2c <_ZN9TimeClass5monthEx>

023fb114 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fb114:	4b02      	ldr	r3, [pc, #8]	; (23fb120 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fb116:	681a      	ldr	r2, [r3, #0]
 23fb118:	4b02      	ldr	r3, [pc, #8]	; (23fb124 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fb11a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fb11c:	4770      	bx	lr
 23fb11e:	bf00      	nop
 23fb120:	1007aae8 	.word	0x1007aae8
 23fb124:	1007ae78 	.word	0x1007ae78

023fb128 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fb128:	4770      	bx	lr

023fb12a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fb12a:	7441      	strb	r1, [r0, #17]
}
 23fb12c:	4770      	bx	lr

023fb12e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fb12e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fb130:	7c00      	ldrb	r0, [r0, #16]
 23fb132:	f7fc ff8d 	bl	23f8050 <hal_usart_available_data_for_write>
}
 23fb136:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fb13a:	bd08      	pop	{r3, pc}

023fb13c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fb13c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fb13e:	7c00      	ldrb	r0, [r0, #16]
 23fb140:	f7fc ff40 	bl	23f7fc4 <hal_usart_available>
}
 23fb144:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fb148:	bd08      	pop	{r3, pc}

023fb14a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fb14a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fb14c:	7c00      	ldrb	r0, [r0, #16]
 23fb14e:	f7fc ff55 	bl	23f7ffc <hal_usart_peek>
}
 23fb152:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fb156:	bd08      	pop	{r3, pc}

023fb158 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fb158:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fb15a:	7c00      	ldrb	r0, [r0, #16]
 23fb15c:	f7fc ff40 	bl	23f7fe0 <hal_usart_read>
}
 23fb160:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fb164:	bd08      	pop	{r3, pc}

023fb166 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fb166:	7c00      	ldrb	r0, [r0, #16]
 23fb168:	f7fc bf56 	b.w	23f8018 <hal_usart_flush>

023fb16c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fb16c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fb16e:	7c45      	ldrb	r5, [r0, #17]
{
 23fb170:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fb172:	b12d      	cbz	r5, 23fb180 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fb174:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fb176:	b003      	add	sp, #12
 23fb178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fb17c:	f7fc bf14 	b.w	23f7fa8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fb180:	7c00      	ldrb	r0, [r0, #16]
 23fb182:	9101      	str	r1, [sp, #4]
 23fb184:	f7fc ff64 	bl	23f8050 <hal_usart_available_data_for_write>
 23fb188:	2800      	cmp	r0, #0
 23fb18a:	9901      	ldr	r1, [sp, #4]
 23fb18c:	dcf2      	bgt.n	23fb174 <_ZN11USARTSerial5writeEh+0x8>
}
 23fb18e:	4628      	mov	r0, r5
 23fb190:	b003      	add	sp, #12
 23fb192:	bd30      	pop	{r4, r5, pc}

023fb194 <_ZN11USARTSerialD0Ev>:
 23fb194:	b510      	push	{r4, lr}
 23fb196:	4604      	mov	r4, r0
 23fb198:	2114      	movs	r1, #20
 23fb19a:	f7f8 fbd0 	bl	23f393e <_ZdlPvj>
 23fb19e:	4620      	mov	r0, r4
 23fb1a0:	bd10      	pop	{r4, pc}
	...

023fb1a4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fb1a4:	b510      	push	{r4, lr}
 23fb1a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fb1aa:	4604      	mov	r4, r0
 23fb1ac:	4608      	mov	r0, r1
 23fb1ae:	4611      	mov	r1, r2
 23fb1b0:	2200      	movs	r2, #0
 23fb1b2:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fb1b6:	4b04      	ldr	r3, [pc, #16]	; (23fb1c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fb1b8:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fb1ba:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fb1bc:	2301      	movs	r3, #1
 23fb1be:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fb1c0:	f7fc ff62 	bl	23f8088 <hal_usart_init_ex>
}
 23fb1c4:	4620      	mov	r0, r4
 23fb1c6:	bd10      	pop	{r4, pc}
 23fb1c8:	023ffa10 	.word	0x023ffa10

023fb1cc <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fb1cc:	2300      	movs	r3, #0
 23fb1ce:	7c00      	ldrb	r0, [r0, #16]
 23fb1d0:	f7fc bf4c 	b.w	23f806c <hal_usart_begin_config>

023fb1d4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fb1d4:	2200      	movs	r2, #0
 23fb1d6:	f7ff bff9 	b.w	23fb1cc <_ZN11USARTSerial5beginEmm>

023fb1da <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fb1da:	7c00      	ldrb	r0, [r0, #16]
 23fb1dc:	f7fc bed6 	b.w	23f7f8c <hal_usart_end>

023fb1e0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fb1e0:	7c00      	ldrb	r0, [r0, #16]
 23fb1e2:	f7fc bf27 	b.w	23f8034 <hal_usart_is_enabled>

023fb1e6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fb1e6:	7441      	strb	r1, [r0, #17]
}
 23fb1e8:	4770      	bx	lr

023fb1ea <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fb1ea:	4770      	bx	lr

023fb1ec <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fb1ec:	4770      	bx	lr

023fb1ee <_ZN9USBSerial4readEv>:
{
 23fb1ee:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fb1f0:	2100      	movs	r1, #0
 23fb1f2:	7c00      	ldrb	r0, [r0, #16]
 23fb1f4:	f7fc ff9c 	bl	23f8130 <HAL_USB_USART_Receive_Data>
}
 23fb1f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fb1fc:	bd08      	pop	{r3, pc}

023fb1fe <_ZN9USBSerial4peekEv>:
{
 23fb1fe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fb200:	2101      	movs	r1, #1
 23fb202:	7c00      	ldrb	r0, [r0, #16]
 23fb204:	f7fc ff94 	bl	23f8130 <HAL_USB_USART_Receive_Data>
}
 23fb208:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fb20c:	bd08      	pop	{r3, pc}

023fb20e <_ZN9USBSerial17availableForWriteEv>:
{
 23fb20e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fb210:	7c00      	ldrb	r0, [r0, #16]
 23fb212:	f7fc ff7f 	bl	23f8114 <HAL_USB_USART_Available_Data_For_Write>
}
 23fb216:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fb21a:	bd08      	pop	{r3, pc}

023fb21c <_ZN9USBSerial9availableEv>:
{
 23fb21c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fb21e:	7c00      	ldrb	r0, [r0, #16]
 23fb220:	f7fc ff6a 	bl	23f80f8 <HAL_USB_USART_Available_Data>
}
 23fb224:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fb228:	bd08      	pop	{r3, pc}

023fb22a <_ZN9USBSerial5writeEh>:
{
 23fb22a:	b513      	push	{r0, r1, r4, lr}
 23fb22c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fb22e:	7c00      	ldrb	r0, [r0, #16]
{
 23fb230:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fb232:	f7fc ff6f 	bl	23f8114 <HAL_USB_USART_Available_Data_For_Write>
 23fb236:	2800      	cmp	r0, #0
 23fb238:	9901      	ldr	r1, [sp, #4]
 23fb23a:	dc01      	bgt.n	23fb240 <_ZN9USBSerial5writeEh+0x16>
 23fb23c:	7c60      	ldrb	r0, [r4, #17]
 23fb23e:	b120      	cbz	r0, 23fb24a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fb240:	7c20      	ldrb	r0, [r4, #16]
 23fb242:	f7fc ff83 	bl	23f814c <HAL_USB_USART_Send_Data>
 23fb246:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fb24a:	b002      	add	sp, #8
 23fb24c:	bd10      	pop	{r4, pc}

023fb24e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fb24e:	7c00      	ldrb	r0, [r0, #16]
 23fb250:	f7fc bf8a 	b.w	23f8168 <HAL_USB_USART_Flush_Data>

023fb254 <_ZN9USBSerialD0Ev>:
 23fb254:	b510      	push	{r4, lr}
 23fb256:	4604      	mov	r4, r0
 23fb258:	2114      	movs	r1, #20
 23fb25a:	f7f8 fb70 	bl	23f393e <_ZdlPvj>
 23fb25e:	4620      	mov	r0, r4
 23fb260:	bd10      	pop	{r4, pc}
	...

023fb264 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fb264:	b510      	push	{r4, lr}
 23fb266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fb26a:	4604      	mov	r4, r0
 23fb26c:	4608      	mov	r0, r1
 23fb26e:	2100      	movs	r1, #0
 23fb270:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fb274:	4b04      	ldr	r3, [pc, #16]	; (23fb288 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fb276:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fb278:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fb27a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fb27c:	4611      	mov	r1, r2
  _blocking = true;
 23fb27e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fb280:	f7fc ff10 	bl	23f80a4 <HAL_USB_USART_Init>
}
 23fb284:	4620      	mov	r0, r4
 23fb286:	bd10      	pop	{r4, pc}
 23fb288:	023ffa40 	.word	0x023ffa40

023fb28c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fb28c:	2200      	movs	r2, #0
 23fb28e:	7c00      	ldrb	r0, [r0, #16]
 23fb290:	f7fc bf16 	b.w	23f80c0 <HAL_USB_USART_Begin>

023fb294 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fb294:	7c00      	ldrb	r0, [r0, #16]
 23fb296:	f7fc bf21 	b.w	23f80dc <HAL_USB_USART_End>

023fb29a <_Z19acquireSerialBufferv>:
{
 23fb29a:	b510      	push	{r4, lr}
 23fb29c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fb29e:	2214      	movs	r2, #20
 23fb2a0:	2100      	movs	r1, #0
 23fb2a2:	f001 fce4 	bl	23fcc6e <memset>
}
 23fb2a6:	4620      	mov	r0, r4
 23fb2a8:	bd10      	pop	{r4, pc}
	...

023fb2ac <_Z16_fetch_usbserialv>:
{
 23fb2ac:	b510      	push	{r4, lr}
 23fb2ae:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fb2b0:	a803      	add	r0, sp, #12
 23fb2b2:	f7ff fff2 	bl	23fb29a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fb2b6:	4c0c      	ldr	r4, [pc, #48]	; (23fb2e8 <_Z16_fetch_usbserialv+0x3c>)
 23fb2b8:	e8d4 1f8f 	ldab	r1, [r4]
 23fb2bc:	f011 0101 	ands.w	r1, r1, #1
 23fb2c0:	d10f      	bne.n	23fb2e2 <_Z16_fetch_usbserialv+0x36>
 23fb2c2:	4620      	mov	r0, r4
 23fb2c4:	9101      	str	r1, [sp, #4]
 23fb2c6:	f7f8 fb49 	bl	23f395c <__cxa_guard_acquire>
 23fb2ca:	9901      	ldr	r1, [sp, #4]
 23fb2cc:	b148      	cbz	r0, 23fb2e2 <_Z16_fetch_usbserialv+0x36>
 23fb2ce:	aa03      	add	r2, sp, #12
 23fb2d0:	4806      	ldr	r0, [pc, #24]	; (23fb2ec <_Z16_fetch_usbserialv+0x40>)
 23fb2d2:	f7ff ffc7 	bl	23fb264 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fb2d6:	4620      	mov	r0, r4
 23fb2d8:	f7f8 fb45 	bl	23f3966 <__cxa_guard_release>
 23fb2dc:	4804      	ldr	r0, [pc, #16]	; (23fb2f0 <_Z16_fetch_usbserialv+0x44>)
 23fb2de:	f001 fc81 	bl	23fcbe4 <atexit>
	return _usbserial;
}
 23fb2e2:	4802      	ldr	r0, [pc, #8]	; (23fb2ec <_Z16_fetch_usbserialv+0x40>)
 23fb2e4:	b008      	add	sp, #32
 23fb2e6:	bd10      	pop	{r4, pc}
 23fb2e8:	1007aeb8 	.word	0x1007aeb8
 23fb2ec:	1007aebc 	.word	0x1007aebc
 23fb2f0:	023fb1eb 	.word	0x023fb1eb

023fb2f4 <_ZN8particle13WatchdogClass4initERKNS_21WatchdogConfigurationE>:
LOG_SOURCE_CATEGORY("wiring.watchdog")

namespace particle {

int WatchdogClass::init(const WatchdogConfiguration& config) {
    instance_ = config.watchdogInstance();
 23fb2f4:	2200      	movs	r2, #0
 23fb2f6:	7402      	strb	r2, [r0, #16]
    return hal_watchdog_set_config(instance_, config.halConfig(), nullptr);
 23fb2f8:	4610      	mov	r0, r2
 23fb2fa:	f7fc bf43 	b.w	23f8184 <hal_watchdog_set_config>

023fb2fe <_ZN8particle13WatchdogClass5startEv>:
}

int WatchdogClass::start() {
    return hal_watchdog_start(instance_, nullptr);
 23fb2fe:	2100      	movs	r1, #0
 23fb300:	7c00      	ldrb	r0, [r0, #16]
 23fb302:	f7fc bf4d 	b.w	23f81a0 <hal_watchdog_start>

023fb306 <_ZN8particle13WatchdogClass7refreshEv>:
int WatchdogClass::stop() {
    return hal_watchdog_stop(instance_, nullptr);
}

int WatchdogClass::refresh() {
    return hal_watchdog_refresh(instance_, nullptr);
 23fb306:	2100      	movs	r1, #0
 23fb308:	7c00      	ldrb	r0, [r0, #16]
 23fb30a:	f7fc bf57 	b.w	23f81bc <hal_watchdog_refresh>

023fb30e <_ZN8particle13WatchdogClass7getInfoERNS_12WatchdogInfoE>:
}

int WatchdogClass::getInfo(WatchdogInfo& info) {
    return hal_watchdog_get_info(instance_, info.halInfo(), nullptr);
 23fb30e:	2200      	movs	r2, #0
 23fb310:	7c00      	ldrb	r0, [r0, #16]
 23fb312:	3124      	adds	r1, #36	; 0x24
 23fb314:	f7fc bf60 	b.w	23f81d8 <hal_watchdog_get_info>

023fb318 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fb318:	2200      	movs	r2, #0
 23fb31a:	6840      	ldr	r0, [r0, #4]
 23fb31c:	4611      	mov	r1, r2
 23fb31e:	f7fd b8ff 	b.w	23f8520 <network_listening>

023fb322 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fb322:	2200      	movs	r2, #0
 23fb324:	6840      	ldr	r0, [r0, #4]
 23fb326:	4611      	mov	r1, r2
 23fb328:	f7fd b924 	b.w	23f8574 <network_get_listen_timeout>

023fb32c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fb32c:	2200      	movs	r2, #0
 23fb32e:	6840      	ldr	r0, [r0, #4]
 23fb330:	f7fd b912 	b.w	23f8558 <network_set_listen_timeout>

023fb334 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fb334:	2200      	movs	r2, #0
 23fb336:	6840      	ldr	r0, [r0, #4]
 23fb338:	f081 0101 	eor.w	r1, r1, #1
 23fb33c:	f7fd b8e2 	b.w	23f8504 <network_listen>

023fb340 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fb340:	2300      	movs	r3, #0
 23fb342:	6840      	ldr	r0, [r0, #4]
 23fb344:	461a      	mov	r2, r3
 23fb346:	4619      	mov	r1, r3
 23fb348:	f7fd b8ce 	b.w	23f84e8 <network_off>

023fb34c <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fb34c:	2300      	movs	r3, #0
 23fb34e:	6840      	ldr	r0, [r0, #4]
 23fb350:	461a      	mov	r2, r3
 23fb352:	4619      	mov	r1, r3
 23fb354:	f7fd b8ba 	b.w	23f84cc <network_on>

023fb358 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fb358:	2200      	movs	r2, #0
 23fb35a:	6840      	ldr	r0, [r0, #4]
 23fb35c:	4611      	mov	r1, r2
 23fb35e:	f7fd b88b 	b.w	23f8478 <network_connecting>

023fb362 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fb362:	2200      	movs	r2, #0
 23fb364:	2102      	movs	r1, #2
 23fb366:	6840      	ldr	r0, [r0, #4]
 23fb368:	f7fd b894 	b.w	23f8494 <network_disconnect>

023fb36c <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fb36c:	2300      	movs	r3, #0
 23fb36e:	6840      	ldr	r0, [r0, #4]
 23fb370:	461a      	mov	r2, r3
 23fb372:	f7fd b873 	b.w	23f845c <network_connect>
	...

023fb378 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fb378:	2204      	movs	r2, #4
 23fb37a:	4b02      	ldr	r3, [pc, #8]	; (23fb384 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fb37c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fb37e:	4a02      	ldr	r2, [pc, #8]	; (23fb388 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fb380:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fb382:	4770      	bx	lr
 23fb384:	1007aed0 	.word	0x1007aed0
 23fb388:	023ffa70 	.word	0x023ffa70

023fb38c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 23fb38c:	b510      	push	{r4, lr}
 23fb38e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 23fb390:	f7f8 fa92 	bl	23f38b8 <strlen>
 23fb394:	3801      	subs	r0, #1
 23fb396:	1823      	adds	r3, r4, r0
 23fb398:	4620      	mov	r0, r4
	while(i<j){
 23fb39a:	4283      	cmp	r3, r0
 23fb39c:	d906      	bls.n	23fb3ac <_Z11str_reversePc+0x20>
		c = *i;
 23fb39e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 23fb3a0:	7819      	ldrb	r1, [r3, #0]
 23fb3a2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 23fb3a6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 23fb3aa:	e7f6      	b.n	23fb39a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 23fb3ac:	bd10      	pop	{r4, pc}

023fb3ae <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 23fb3ae:	b570      	push	{r4, r5, r6, lr}
 23fb3b0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 23fb3b2:	1e91      	subs	r1, r2, #2
 23fb3b4:	2922      	cmp	r1, #34	; 0x22
 23fb3b6:	d81d      	bhi.n	23fb3f4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
 23fb3b8:	4625      	mov	r5, r4

	div_t result;
	while(a){
 23fb3ba:	b930      	cbnz	r0, 23fb3ca <ultoa+0x1c>
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 23fb3bc:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
 23fb3be:	4423      	add	r3, r4
 23fb3c0:	429d      	cmp	r5, r3
 23fb3c2:	d210      	bcs.n	23fb3e6 <ultoa+0x38>
            *ptr++ = '0';
 23fb3c4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
 23fb3c8:	e7fa      	b.n	23fb3c0 <ultoa+0x12>
            result.quot = a/radix;
 23fb3ca:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 23fb3ce:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 23fb3d2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 23fb3d4:	2809      	cmp	r0, #9
                *ptr += '0';
 23fb3d6:	bf94      	ite	ls
 23fb3d8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
 23fb3da:	3157      	addhi	r1, #87	; 0x57
 23fb3dc:	b2c9      	uxtb	r1, r1
            a = result.quot;
 23fb3de:	4630      	mov	r0, r6
 23fb3e0:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 23fb3e4:	e7e9      	b.n	23fb3ba <ultoa+0xc>

	*ptr = '\0';
 23fb3e6:	2300      	movs	r3, #0
	str_reverse(buffer);
 23fb3e8:	4620      	mov	r0, r4
	*ptr = '\0';
 23fb3ea:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
 23fb3ec:	f7ff ffce 	bl	23fb38c <_Z11str_reversePc>
	return buffer;
 23fb3f0:	4620      	mov	r0, r4
}
 23fb3f2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 23fb3f4:	2000      	movs	r0, #0
 23fb3f6:	e7fc      	b.n	23fb3f2 <ultoa+0x44>

023fb3f8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 23fb3f8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 23fb3fa:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 23fb3fc:	460c      	mov	r4, r1
 23fb3fe:	4615      	mov	r5, r2
	if(a<0){
 23fb400:	da0d      	bge.n	23fb41e <itoa+0x26>
		*buffer = '-';
 23fb402:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 23fb404:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23fb408:	bf0c      	ite	eq
 23fb40a:	4618      	moveq	r0, r3
 23fb40c:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 23fb40e:	2301      	movs	r3, #1
		*buffer = '-';
 23fb410:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 23fb412:	462a      	mov	r2, r5
 23fb414:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 23fb416:	f7ff ffca 	bl	23fb3ae <ultoa>
	}
	return buffer;
}
 23fb41a:	4620      	mov	r0, r4
 23fb41c:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 23fb41e:	2301      	movs	r3, #1
 23fb420:	e7f9      	b.n	23fb416 <itoa+0x1e>
	...

023fb424 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fb424:	4b01      	ldr	r3, [pc, #4]	; (23fb42c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fb426:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fb428:	4770      	bx	lr
 23fb42a:	bf00      	nop
 23fb42c:	1007aafc 	.word	0x1007aafc

023fb430 <serialEventRun>:
{
 23fb430:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fb432:	4b0f      	ldr	r3, [pc, #60]	; (23fb470 <serialEventRun+0x40>)
 23fb434:	b143      	cbz	r3, 23fb448 <serialEventRun+0x18>
 23fb436:	f7ff ff39 	bl	23fb2ac <_Z16_fetch_usbserialv>
 23fb43a:	6803      	ldr	r3, [r0, #0]
 23fb43c:	691b      	ldr	r3, [r3, #16]
 23fb43e:	4798      	blx	r3
 23fb440:	2800      	cmp	r0, #0
 23fb442:	dd01      	ble.n	23fb448 <serialEventRun+0x18>
        serialEvent();
 23fb444:	e000      	b.n	23fb448 <serialEventRun+0x18>
 23fb446:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fb448:	4b0a      	ldr	r3, [pc, #40]	; (23fb474 <serialEventRun+0x44>)
 23fb44a:	b143      	cbz	r3, 23fb45e <serialEventRun+0x2e>
 23fb44c:	f000 f980 	bl	23fb750 <_Z22__fetch_global_Serial1v>
 23fb450:	6803      	ldr	r3, [r0, #0]
 23fb452:	691b      	ldr	r3, [r3, #16]
 23fb454:	4798      	blx	r3
 23fb456:	2800      	cmp	r0, #0
 23fb458:	dd01      	ble.n	23fb45e <serialEventRun+0x2e>
        serialEvent1();
 23fb45a:	e000      	b.n	23fb45e <serialEventRun+0x2e>
 23fb45c:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fb45e:	4b06      	ldr	r3, [pc, #24]	; (23fb478 <serialEventRun+0x48>)
 23fb460:	b10b      	cbz	r3, 23fb466 <serialEventRun+0x36>
 23fb462:	f000 f9bb 	bl	23fb7dc <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fb466:	4b05      	ldr	r3, [pc, #20]	; (23fb47c <serialEventRun+0x4c>)
 23fb468:	b10b      	cbz	r3, 23fb46e <serialEventRun+0x3e>
 23fb46a:	f000 f9ed 	bl	23fb848 <_Z15serialEventRun3v>
}
 23fb46e:	bd08      	pop	{r3, pc}
	...

023fb480 <_post_loop>:
{
 23fb480:	b508      	push	{r3, lr}
	serialEventRun();
 23fb482:	f7ff ffd5 	bl	23fb430 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fb486:	f7fc fb97 	bl	23f7bb8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fb48a:	4b01      	ldr	r3, [pc, #4]	; (23fb490 <_post_loop+0x10>)
 23fb48c:	6018      	str	r0, [r3, #0]
}
 23fb48e:	bd08      	pop	{r3, pc}
 23fb490:	1007aeec 	.word	0x1007aeec

023fb494 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fb494:	4805      	ldr	r0, [pc, #20]	; (23fb4ac <_Z33system_initialize_user_backup_ramv+0x18>)
 23fb496:	4a06      	ldr	r2, [pc, #24]	; (23fb4b0 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fb498:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fb49a:	1a12      	subs	r2, r2, r0
 23fb49c:	4905      	ldr	r1, [pc, #20]	; (23fb4b4 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fb49e:	f001 fbbf 	bl	23fcc20 <memcpy>
    __backup_sram_signature = signature;
 23fb4a2:	4b05      	ldr	r3, [pc, #20]	; (23fb4b8 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fb4a4:	4a05      	ldr	r2, [pc, #20]	; (23fb4bc <_Z33system_initialize_user_backup_ramv+0x28>)
 23fb4a6:	601a      	str	r2, [r3, #0]
}
 23fb4a8:	bd08      	pop	{r3, pc}
 23fb4aa:	bf00      	nop
 23fb4ac:	1007b400 	.word	0x1007b400
 23fb4b0:	1007b404 	.word	0x1007b404
 23fb4b4:	085ff780 	.word	0x085ff780
 23fb4b8:	1007b400 	.word	0x1007b400
 23fb4bc:	9a271c1e 	.word	0x9a271c1e

023fb4c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fb4c0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fb4c2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fb4c4:	461a      	mov	r2, r3
 23fb4c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fb4ca:	9300      	str	r3, [sp, #0]
 23fb4cc:	f7fc ff48 	bl	23f8360 <system_ctrl_set_result>
}
 23fb4d0:	b003      	add	sp, #12
 23fb4d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fb4d8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fb4d8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fb4da:	8843      	ldrh	r3, [r0, #2]
 23fb4dc:	2b0a      	cmp	r3, #10
 23fb4de:	d008      	beq.n	23fb4f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fb4e0:	2b50      	cmp	r3, #80	; 0x50
 23fb4e2:	d10b      	bne.n	23fb4fc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fb4e4:	4b09      	ldr	r3, [pc, #36]	; (23fb50c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fb4e6:	681b      	ldr	r3, [r3, #0]
 23fb4e8:	b14b      	cbz	r3, 23fb4fe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fb4ea:	b003      	add	sp, #12
 23fb4ec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fb4f0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fb4f2:	f7ff ffe5 	bl	23fb4c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fb4f6:	b003      	add	sp, #12
 23fb4f8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fb4fc:	2300      	movs	r3, #0
 23fb4fe:	461a      	mov	r2, r3
 23fb500:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fb504:	9300      	str	r3, [sp, #0]
 23fb506:	f7fc ff2b 	bl	23f8360 <system_ctrl_set_result>
}
 23fb50a:	e7f4      	b.n	23fb4f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fb50c:	1007aedc 	.word	0x1007aedc

023fb510 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fb510:	2100      	movs	r1, #0
{
 23fb512:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fb514:	4811      	ldr	r0, [pc, #68]	; (23fb55c <module_user_init_hook+0x4c>)
 23fb516:	f7fd f8ff 	bl	23f8718 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fb51a:	4b11      	ldr	r3, [pc, #68]	; (23fb560 <module_user_init_hook+0x50>)
 23fb51c:	681a      	ldr	r2, [r3, #0]
 23fb51e:	4b11      	ldr	r3, [pc, #68]	; (23fb564 <module_user_init_hook+0x54>)
 23fb520:	429a      	cmp	r2, r3
 23fb522:	bf0c      	ite	eq
 23fb524:	2201      	moveq	r2, #1
 23fb526:	2200      	movne	r2, #0
 23fb528:	4b0f      	ldr	r3, [pc, #60]	; (23fb568 <module_user_init_hook+0x58>)
 23fb52a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fb52c:	d001      	beq.n	23fb532 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fb52e:	f7ff ffb1 	bl	23fb494 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fb532:	f7fc fb25 	bl	23f7b80 <HAL_RNG_GetRandomNumber>
 23fb536:	4604      	mov	r4, r0
    srand(seed);
 23fb538:	f001 fba2 	bl	23fcc80 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fb53c:	4b0b      	ldr	r3, [pc, #44]	; (23fb56c <module_user_init_hook+0x5c>)
 23fb53e:	b113      	cbz	r3, 23fb546 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fb540:	4620      	mov	r0, r4
 23fb542:	e000      	b.n	23fb546 <module_user_init_hook+0x36>
 23fb544:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fb546:	2100      	movs	r1, #0
 23fb548:	4808      	ldr	r0, [pc, #32]	; (23fb56c <module_user_init_hook+0x5c>)
 23fb54a:	f7fc ff79 	bl	23f8440 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fb54e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fb552:	2100      	movs	r1, #0
 23fb554:	4806      	ldr	r0, [pc, #24]	; (23fb570 <module_user_init_hook+0x60>)
 23fb556:	f7fc bef5 	b.w	23f8344 <system_ctrl_set_app_request_handler>
 23fb55a:	bf00      	nop
 23fb55c:	023fb425 	.word	0x023fb425
 23fb560:	1007b400 	.word	0x1007b400
 23fb564:	9a271c1e 	.word	0x9a271c1e
 23fb568:	1007aed8 	.word	0x1007aed8
 23fb56c:	00000000 	.word	0x00000000
 23fb570:	023fb4d9 	.word	0x023fb4d9

023fb574 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fb574:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fb576:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fb578:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fb57a:	d902      	bls.n	23fb582 <pinAvailable+0xe>
    return false;
 23fb57c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fb57e:	b003      	add	sp, #12
 23fb580:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fb582:	f1a0 030f 	sub.w	r3, r0, #15
 23fb586:	2b02      	cmp	r3, #2
 23fb588:	d90b      	bls.n	23fb5a2 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fb58a:	2801      	cmp	r0, #1
 23fb58c:	d821      	bhi.n	23fb5d2 <pinAvailable+0x5e>
 23fb58e:	f000 f88b 	bl	23fb6a8 <_Z19__fetch_global_Wirev>
 23fb592:	2100      	movs	r1, #0
 23fb594:	7c00      	ldrb	r0, [r0, #16]
 23fb596:	f7fc fbfd 	bl	23f7d94 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fb59a:	f080 0001 	eor.w	r0, r0, #1
 23fb59e:	b2c0      	uxtb	r0, r0
 23fb5a0:	e7ed      	b.n	23fb57e <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fb5a2:	4d11      	ldr	r5, [pc, #68]	; (23fb5e8 <pinAvailable+0x74>)
 23fb5a4:	e8d5 1f8f 	ldab	r1, [r5]
 23fb5a8:	f011 0101 	ands.w	r1, r1, #1
 23fb5ac:	d10b      	bne.n	23fb5c6 <pinAvailable+0x52>
 23fb5ae:	4628      	mov	r0, r5
 23fb5b0:	9101      	str	r1, [sp, #4]
 23fb5b2:	f7f8 f9d3 	bl	23f395c <__cxa_guard_acquire>
 23fb5b6:	9901      	ldr	r1, [sp, #4]
 23fb5b8:	b128      	cbz	r0, 23fb5c6 <pinAvailable+0x52>
 23fb5ba:	480c      	ldr	r0, [pc, #48]	; (23fb5ec <pinAvailable+0x78>)
 23fb5bc:	f7fe fdca 	bl	23fa154 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fb5c0:	4628      	mov	r0, r5
 23fb5c2:	f7f8 f9d0 	bl	23f3966 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fb5c6:	4b09      	ldr	r3, [pc, #36]	; (23fb5ec <pinAvailable+0x78>)
 23fb5c8:	7818      	ldrb	r0, [r3, #0]
 23fb5ca:	f7fc fcd1 	bl	23f7f70 <hal_spi_is_enabled>
 23fb5ce:	2800      	cmp	r0, #0
 23fb5d0:	d1d4      	bne.n	23fb57c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fb5d2:	3c08      	subs	r4, #8
 23fb5d4:	2c01      	cmp	r4, #1
 23fb5d6:	d805      	bhi.n	23fb5e4 <pinAvailable+0x70>
 23fb5d8:	f000 f8ba 	bl	23fb750 <_Z22__fetch_global_Serial1v>
 23fb5dc:	7c00      	ldrb	r0, [r0, #16]
 23fb5de:	f7fc fd29 	bl	23f8034 <hal_usart_is_enabled>
 23fb5e2:	e7da      	b.n	23fb59a <pinAvailable+0x26>
  return true; // 'pin' is available
 23fb5e4:	2001      	movs	r0, #1
 23fb5e6:	e7ca      	b.n	23fb57e <pinAvailable+0xa>
 23fb5e8:	1007aee0 	.word	0x1007aee0
 23fb5ec:	1007aee4 	.word	0x1007aee4

023fb5f0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fb5f0:	281b      	cmp	r0, #27
{
 23fb5f2:	b538      	push	{r3, r4, r5, lr}
 23fb5f4:	4604      	mov	r4, r0
 23fb5f6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fb5f8:	d80a      	bhi.n	23fb610 <pinMode+0x20>
 23fb5fa:	29ff      	cmp	r1, #255	; 0xff
 23fb5fc:	d008      	beq.n	23fb610 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fb5fe:	f7ff ffb9 	bl	23fb574 <pinAvailable>
 23fb602:	b128      	cbz	r0, 23fb610 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fb604:	4629      	mov	r1, r5
 23fb606:	4620      	mov	r0, r4
}
 23fb608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fb60c:	f7fc bb28 	b.w	23f7c60 <hal_gpio_mode>
}
 23fb610:	bd38      	pop	{r3, r4, r5, pc}

023fb612 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fb612:	b538      	push	{r3, r4, r5, lr}
 23fb614:	4604      	mov	r4, r0
 23fb616:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fb618:	f7fc fb30 	bl	23f7c7c <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fb61c:	28ff      	cmp	r0, #255	; 0xff
 23fb61e:	d010      	beq.n	23fb642 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fb620:	2806      	cmp	r0, #6
 23fb622:	d804      	bhi.n	23fb62e <digitalWrite+0x1c>
 23fb624:	234d      	movs	r3, #77	; 0x4d
 23fb626:	fa23 f000 	lsr.w	r0, r3, r0
 23fb62a:	07c3      	lsls	r3, r0, #31
 23fb62c:	d409      	bmi.n	23fb642 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fb62e:	4620      	mov	r0, r4
 23fb630:	f7ff ffa0 	bl	23fb574 <pinAvailable>
 23fb634:	b128      	cbz	r0, 23fb642 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fb636:	4629      	mov	r1, r5
 23fb638:	4620      	mov	r0, r4
}
 23fb63a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fb63e:	f7fc bb2b 	b.w	23f7c98 <hal_gpio_write>
}
 23fb642:	bd38      	pop	{r3, r4, r5, pc}

023fb644 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 23fb644:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 23fb646:	4c08      	ldr	r4, [pc, #32]	; (23fb668 <_Z21__fetch_global_EEPROMv+0x24>)
 23fb648:	e8d4 3f8f 	ldab	r3, [r4]
 23fb64c:	07db      	lsls	r3, r3, #31
 23fb64e:	d408      	bmi.n	23fb662 <_Z21__fetch_global_EEPROMv+0x1e>
 23fb650:	4620      	mov	r0, r4
 23fb652:	f7f8 f983 	bl	23f395c <__cxa_guard_acquire>
 23fb656:	b120      	cbz	r0, 23fb662 <_Z21__fetch_global_EEPROMv+0x1e>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 23fb658:	f7fc fabc 	bl	23f7bd4 <HAL_EEPROM_Init>
 23fb65c:	4620      	mov	r0, r4
 23fb65e:	f7f8 f982 	bl	23f3966 <__cxa_guard_release>
	return eeprom;
}
 23fb662:	4802      	ldr	r0, [pc, #8]	; (23fb66c <_Z21__fetch_global_EEPROMv+0x28>)
 23fb664:	bd10      	pop	{r4, pc}
 23fb666:	bf00      	nop
 23fb668:	1007aef0 	.word	0x1007aef0
 23fb66c:	1007aef4 	.word	0x1007aef4

023fb670 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fb670:	4770      	bx	lr
	...

023fb674 <_Z17acquireWireBufferv>:
{
 23fb674:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fb676:	4b0a      	ldr	r3, [pc, #40]	; (23fb6a0 <_Z17acquireWireBufferv+0x2c>)
{
 23fb678:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fb67a:	6003      	str	r3, [r0, #0]
 23fb67c:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fb67e:	4909      	ldr	r1, [pc, #36]	; (23fb6a4 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fb680:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fb682:	2020      	movs	r0, #32
 23fb684:	f000 f8f6 	bl	23fb874 <_ZnajRKSt9nothrow_t>
	};
 23fb688:	2520      	movs	r5, #32
 23fb68a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fb68c:	4905      	ldr	r1, [pc, #20]	; (23fb6a4 <_Z17acquireWireBufferv+0x30>)
 23fb68e:	4628      	mov	r0, r5
	};
 23fb690:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fb692:	f000 f8ef 	bl	23fb874 <_ZnajRKSt9nothrow_t>
	};
 23fb696:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fb69a:	4620      	mov	r0, r4
 23fb69c:	bd38      	pop	{r3, r4, r5, pc}
 23fb69e:	bf00      	nop
 23fb6a0:	00010018 	.word	0x00010018
 23fb6a4:	023ffaac 	.word	0x023ffaac

023fb6a8 <_Z19__fetch_global_Wirev>:
{
 23fb6a8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fb6aa:	4d0e      	ldr	r5, [pc, #56]	; (23fb6e4 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fb6ac:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fb6ae:	e8d5 1f8f 	ldab	r1, [r5]
 23fb6b2:	f011 0401 	ands.w	r4, r1, #1
 23fb6b6:	d111      	bne.n	23fb6dc <_Z19__fetch_global_Wirev+0x34>
 23fb6b8:	4628      	mov	r0, r5
 23fb6ba:	f7f8 f94f 	bl	23f395c <__cxa_guard_acquire>
 23fb6be:	b168      	cbz	r0, 23fb6dc <_Z19__fetch_global_Wirev+0x34>
 23fb6c0:	4668      	mov	r0, sp
 23fb6c2:	f7ff ffd7 	bl	23fb674 <_Z17acquireWireBufferv>
 23fb6c6:	466a      	mov	r2, sp
 23fb6c8:	4621      	mov	r1, r4
 23fb6ca:	4807      	ldr	r0, [pc, #28]	; (23fb6e8 <_Z19__fetch_global_Wirev+0x40>)
 23fb6cc:	f7fd f928 	bl	23f8920 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fb6d0:	4628      	mov	r0, r5
 23fb6d2:	f7f8 f948 	bl	23f3966 <__cxa_guard_release>
 23fb6d6:	4805      	ldr	r0, [pc, #20]	; (23fb6ec <_Z19__fetch_global_Wirev+0x44>)
 23fb6d8:	f001 fa84 	bl	23fcbe4 <atexit>
	return wire;
}
 23fb6dc:	4802      	ldr	r0, [pc, #8]	; (23fb6e8 <_Z19__fetch_global_Wirev+0x40>)
 23fb6de:	b007      	add	sp, #28
 23fb6e0:	bd30      	pop	{r4, r5, pc}
 23fb6e2:	bf00      	nop
 23fb6e4:	1007aef8 	.word	0x1007aef8
 23fb6e8:	1007aefc 	.word	0x1007aefc
 23fb6ec:	023fb671 	.word	0x023fb671

023fb6f0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fb6f0:	4770      	bx	lr
	...

023fb6f4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fb6f4:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fb6f6:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fb6f8:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fb6fa:	462a      	mov	r2, r5
 23fb6fc:	2100      	movs	r1, #0
 23fb6fe:	f001 fab6 	bl	23fcc6e <memset>
 23fb702:	8025      	strh	r5, [r4, #0]
 23fb704:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fb706:	4907      	ldr	r1, [pc, #28]	; (23fb724 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fb708:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fb70a:	8125      	strh	r5, [r4, #8]
 23fb70c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fb70e:	f000 f8b1 	bl	23fb874 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fb712:	4904      	ldr	r1, [pc, #16]	; (23fb724 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fb714:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fb716:	4628      	mov	r0, r5
 23fb718:	f000 f8ac 	bl	23fb874 <_ZnajRKSt9nothrow_t>
    };
 23fb71c:	60e0      	str	r0, [r4, #12]
}
 23fb71e:	4620      	mov	r0, r4
 23fb720:	bd38      	pop	{r3, r4, r5, pc}
 23fb722:	bf00      	nop
 23fb724:	023ffaac 	.word	0x023ffaac

023fb728 <__tcf_2>:
 23fb728:	4770      	bx	lr

023fb72a <__tcf_1>:
 23fb72a:	4770      	bx	lr

023fb72c <_Z20acquireSerial1Bufferv>:
{
 23fb72c:	b510      	push	{r4, lr}
 23fb72e:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fb730:	f7ff ffe0 	bl	23fb6f4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fb734:	4620      	mov	r0, r4
 23fb736:	bd10      	pop	{r4, pc}

023fb738 <_Z20acquireSerial2Bufferv>:
 23fb738:	b510      	push	{r4, lr}
 23fb73a:	4604      	mov	r4, r0
 23fb73c:	f7ff ffda 	bl	23fb6f4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fb740:	4620      	mov	r0, r4
 23fb742:	bd10      	pop	{r4, pc}

023fb744 <_Z20acquireSerial3Bufferv>:
 23fb744:	b510      	push	{r4, lr}
 23fb746:	4604      	mov	r4, r0
 23fb748:	f7ff ffd4 	bl	23fb6f4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fb74c:	4620      	mov	r0, r4
 23fb74e:	bd10      	pop	{r4, pc}

023fb750 <_Z22__fetch_global_Serial1v>:
{
 23fb750:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fb752:	4d0e      	ldr	r5, [pc, #56]	; (23fb78c <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fb754:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fb756:	e8d5 1f8f 	ldab	r1, [r5]
 23fb75a:	f011 0401 	ands.w	r4, r1, #1
 23fb75e:	d111      	bne.n	23fb784 <_Z22__fetch_global_Serial1v+0x34>
 23fb760:	4628      	mov	r0, r5
 23fb762:	f7f8 f8fb 	bl	23f395c <__cxa_guard_acquire>
 23fb766:	b168      	cbz	r0, 23fb784 <_Z22__fetch_global_Serial1v+0x34>
 23fb768:	a801      	add	r0, sp, #4
 23fb76a:	f7ff ffdf 	bl	23fb72c <_Z20acquireSerial1Bufferv>
 23fb76e:	4621      	mov	r1, r4
 23fb770:	aa01      	add	r2, sp, #4
 23fb772:	4807      	ldr	r0, [pc, #28]	; (23fb790 <_Z22__fetch_global_Serial1v+0x40>)
 23fb774:	f7ff fd16 	bl	23fb1a4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fb778:	4628      	mov	r0, r5
 23fb77a:	f7f8 f8f4 	bl	23f3966 <__cxa_guard_release>
 23fb77e:	4805      	ldr	r0, [pc, #20]	; (23fb794 <_Z22__fetch_global_Serial1v+0x44>)
 23fb780:	f001 fa30 	bl	23fcbe4 <atexit>
    return serial1;
}
 23fb784:	4802      	ldr	r0, [pc, #8]	; (23fb790 <_Z22__fetch_global_Serial1v+0x40>)
 23fb786:	b007      	add	sp, #28
 23fb788:	bd30      	pop	{r4, r5, pc}
 23fb78a:	bf00      	nop
 23fb78c:	1007af10 	.word	0x1007af10
 23fb790:	1007af1c 	.word	0x1007af1c
 23fb794:	023fb6f1 	.word	0x023fb6f1

023fb798 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fb798:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fb79a:	4c0d      	ldr	r4, [pc, #52]	; (23fb7d0 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fb79c:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fb79e:	e8d4 3f8f 	ldab	r3, [r4]
 23fb7a2:	07db      	lsls	r3, r3, #31
 23fb7a4:	d411      	bmi.n	23fb7ca <_Z22__fetch_global_Serial2v+0x32>
 23fb7a6:	4620      	mov	r0, r4
 23fb7a8:	f7f8 f8d8 	bl	23f395c <__cxa_guard_acquire>
 23fb7ac:	b168      	cbz	r0, 23fb7ca <_Z22__fetch_global_Serial2v+0x32>
 23fb7ae:	a801      	add	r0, sp, #4
 23fb7b0:	f7ff ffc2 	bl	23fb738 <_Z20acquireSerial2Bufferv>
 23fb7b4:	2101      	movs	r1, #1
 23fb7b6:	aa01      	add	r2, sp, #4
 23fb7b8:	4806      	ldr	r0, [pc, #24]	; (23fb7d4 <_Z22__fetch_global_Serial2v+0x3c>)
 23fb7ba:	f7ff fcf3 	bl	23fb1a4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fb7be:	4620      	mov	r0, r4
 23fb7c0:	f7f8 f8d1 	bl	23f3966 <__cxa_guard_release>
 23fb7c4:	4804      	ldr	r0, [pc, #16]	; (23fb7d8 <_Z22__fetch_global_Serial2v+0x40>)
 23fb7c6:	f001 fa0d 	bl	23fcbe4 <atexit>
	return serial2;
}
 23fb7ca:	4802      	ldr	r0, [pc, #8]	; (23fb7d4 <_Z22__fetch_global_Serial2v+0x3c>)
 23fb7cc:	b006      	add	sp, #24
 23fb7ce:	bd10      	pop	{r4, pc}
 23fb7d0:	1007af14 	.word	0x1007af14
 23fb7d4:	1007af30 	.word	0x1007af30
 23fb7d8:	023fb72b 	.word	0x023fb72b

023fb7dc <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fb7dc:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fb7de:	f7ff ffdb 	bl	23fb798 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fb7e2:	4b07      	ldr	r3, [pc, #28]	; (23fb800 <_Z15serialEventRun2v+0x24>)
 23fb7e4:	4604      	mov	r4, r0
 23fb7e6:	b153      	cbz	r3, 23fb7fe <_Z15serialEventRun2v+0x22>
 23fb7e8:	f7ff fcfa 	bl	23fb1e0 <_ZN11USARTSerial9isEnabledEv>
 23fb7ec:	b138      	cbz	r0, 23fb7fe <_Z15serialEventRun2v+0x22>
 23fb7ee:	6823      	ldr	r3, [r4, #0]
 23fb7f0:	4620      	mov	r0, r4
 23fb7f2:	691b      	ldr	r3, [r3, #16]
 23fb7f4:	4798      	blx	r3
 23fb7f6:	2800      	cmp	r0, #0
 23fb7f8:	dd01      	ble.n	23fb7fe <_Z15serialEventRun2v+0x22>
        handler();
 23fb7fa:	e000      	b.n	23fb7fe <_Z15serialEventRun2v+0x22>
 23fb7fc:	bf00      	nop
}
 23fb7fe:	bd10      	pop	{r4, pc}
 23fb800:	00000000 	.word	0x00000000

023fb804 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fb804:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fb806:	4c0d      	ldr	r4, [pc, #52]	; (23fb83c <_Z22__fetch_global_Serial3v+0x38>)
{
 23fb808:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fb80a:	e8d4 3f8f 	ldab	r3, [r4]
 23fb80e:	07db      	lsls	r3, r3, #31
 23fb810:	d411      	bmi.n	23fb836 <_Z22__fetch_global_Serial3v+0x32>
 23fb812:	4620      	mov	r0, r4
 23fb814:	f7f8 f8a2 	bl	23f395c <__cxa_guard_acquire>
 23fb818:	b168      	cbz	r0, 23fb836 <_Z22__fetch_global_Serial3v+0x32>
 23fb81a:	a801      	add	r0, sp, #4
 23fb81c:	f7ff ff92 	bl	23fb744 <_Z20acquireSerial3Bufferv>
 23fb820:	2102      	movs	r1, #2
 23fb822:	aa01      	add	r2, sp, #4
 23fb824:	4806      	ldr	r0, [pc, #24]	; (23fb840 <_Z22__fetch_global_Serial3v+0x3c>)
 23fb826:	f7ff fcbd 	bl	23fb1a4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fb82a:	4620      	mov	r0, r4
 23fb82c:	f7f8 f89b 	bl	23f3966 <__cxa_guard_release>
 23fb830:	4804      	ldr	r0, [pc, #16]	; (23fb844 <_Z22__fetch_global_Serial3v+0x40>)
 23fb832:	f001 f9d7 	bl	23fcbe4 <atexit>
	return serial3;
}
 23fb836:	4802      	ldr	r0, [pc, #8]	; (23fb840 <_Z22__fetch_global_Serial3v+0x3c>)
 23fb838:	b006      	add	sp, #24
 23fb83a:	bd10      	pop	{r4, pc}
 23fb83c:	1007af18 	.word	0x1007af18
 23fb840:	1007af44 	.word	0x1007af44
 23fb844:	023fb729 	.word	0x023fb729

023fb848 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fb848:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fb84a:	f7ff ffdb 	bl	23fb804 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fb84e:	4b07      	ldr	r3, [pc, #28]	; (23fb86c <_Z15serialEventRun3v+0x24>)
 23fb850:	4604      	mov	r4, r0
 23fb852:	b153      	cbz	r3, 23fb86a <_Z15serialEventRun3v+0x22>
 23fb854:	f7ff fcc4 	bl	23fb1e0 <_ZN11USARTSerial9isEnabledEv>
 23fb858:	b138      	cbz	r0, 23fb86a <_Z15serialEventRun3v+0x22>
 23fb85a:	6823      	ldr	r3, [r4, #0]
 23fb85c:	4620      	mov	r0, r4
 23fb85e:	691b      	ldr	r3, [r3, #16]
 23fb860:	4798      	blx	r3
 23fb862:	2800      	cmp	r0, #0
 23fb864:	dd01      	ble.n	23fb86a <_Z15serialEventRun3v+0x22>
        handler();
 23fb866:	e000      	b.n	23fb86a <_Z15serialEventRun3v+0x22>
 23fb868:	bf00      	nop
}
 23fb86a:	bd10      	pop	{r4, pc}
 23fb86c:	00000000 	.word	0x00000000

023fb870 <_ZnwjRKSt9nothrow_t>:
 23fb870:	f7f8 b85f 	b.w	23f3932 <_Znwj>

023fb874 <_ZnajRKSt9nothrow_t>:
 23fb874:	f7f8 b85f 	b.w	23f3936 <_Znaj>

023fb878 <_ZSt25__throw_bad_function_callv>:
 23fb878:	b508      	push	{r3, lr}
 23fb87a:	f7fc ff15 	bl	23f86a8 <abort>
	...

023fb880 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23fb880:	4901      	ldr	r1, [pc, #4]	; (23fb888 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23fb882:	f000 b8f9 	b.w	23fba78 <_ZNKSt9type_infoeqERKS_>
 23fb886:	bf00      	nop
 23fb888:	023ffac8 	.word	0x023ffac8

023fb88c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23fb88c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23fb88e:	2400      	movs	r4, #0
 23fb890:	2310      	movs	r3, #16
 23fb892:	4615      	mov	r5, r2
 23fb894:	6812      	ldr	r2, [r2, #0]
 23fb896:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23fb89a:	6803      	ldr	r3, [r0, #0]
 23fb89c:	e9cd 4400 	strd	r4, r4, [sp]
 23fb8a0:	699e      	ldr	r6, [r3, #24]
 23fb8a2:	466b      	mov	r3, sp
 23fb8a4:	47b0      	blx	r6
 23fb8a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23fb8aa:	f003 0306 	and.w	r3, r3, #6
 23fb8ae:	2b06      	cmp	r3, #6
 23fb8b0:	bf05      	ittet	eq
 23fb8b2:	9b00      	ldreq	r3, [sp, #0]
 23fb8b4:	2001      	moveq	r0, #1
 23fb8b6:	4620      	movne	r0, r4
 23fb8b8:	602b      	streq	r3, [r5, #0]
 23fb8ba:	b004      	add	sp, #16
 23fb8bc:	bd70      	pop	{r4, r5, r6, pc}

023fb8be <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23fb8be:	9800      	ldr	r0, [sp, #0]
 23fb8c0:	4290      	cmp	r0, r2
 23fb8c2:	bf14      	ite	ne
 23fb8c4:	2001      	movne	r0, #1
 23fb8c6:	2006      	moveq	r0, #6
 23fb8c8:	4770      	bx	lr
	...

023fb8cc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23fb8cc:	4b03      	ldr	r3, [pc, #12]	; (23fb8dc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23fb8ce:	b510      	push	{r4, lr}
 23fb8d0:	4604      	mov	r4, r0
 23fb8d2:	6003      	str	r3, [r0, #0]
 23fb8d4:	f000 f8cd 	bl	23fba72 <_ZNSt9type_infoD1Ev>
 23fb8d8:	4620      	mov	r0, r4
 23fb8da:	bd10      	pop	{r4, pc}
 23fb8dc:	023ffb08 	.word	0x023ffb08

023fb8e0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23fb8e0:	b510      	push	{r4, lr}
 23fb8e2:	4604      	mov	r4, r0
 23fb8e4:	f7ff fff2 	bl	23fb8cc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fb8e8:	2108      	movs	r1, #8
 23fb8ea:	4620      	mov	r0, r4
 23fb8ec:	f7f8 f827 	bl	23f393e <_ZdlPvj>
 23fb8f0:	4620      	mov	r0, r4
 23fb8f2:	bd10      	pop	{r4, pc}

023fb8f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23fb8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb8f8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23fb8fc:	461f      	mov	r7, r3
 23fb8fe:	4606      	mov	r6, r0
 23fb900:	4615      	mov	r5, r2
 23fb902:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23fb906:	4598      	cmp	r8, r3
 23fb908:	d107      	bne.n	23fb91a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fb90a:	9907      	ldr	r1, [sp, #28]
 23fb90c:	f000 f8b4 	bl	23fba78 <_ZNKSt9type_infoeqERKS_>
 23fb910:	b118      	cbz	r0, 23fb91a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fb912:	7165      	strb	r5, [r4, #5]
 23fb914:	2000      	movs	r0, #0
 23fb916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fb91a:	4639      	mov	r1, r7
 23fb91c:	4630      	mov	r0, r6
 23fb91e:	f000 f8ab 	bl	23fba78 <_ZNKSt9type_infoeqERKS_>
 23fb922:	2800      	cmp	r0, #0
 23fb924:	d0f6      	beq.n	23fb914 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23fb926:	2301      	movs	r3, #1
 23fb928:	f8c4 8000 	str.w	r8, [r4]
 23fb92c:	7125      	strb	r5, [r4, #4]
 23fb92e:	71a3      	strb	r3, [r4, #6]
 23fb930:	e7f0      	b.n	23fb914 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023fb932 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23fb932:	b538      	push	{r3, r4, r5, lr}
 23fb934:	4615      	mov	r5, r2
 23fb936:	461c      	mov	r4, r3
 23fb938:	f000 f89e 	bl	23fba78 <_ZNKSt9type_infoeqERKS_>
 23fb93c:	b120      	cbz	r0, 23fb948 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23fb93e:	2308      	movs	r3, #8
 23fb940:	6025      	str	r5, [r4, #0]
 23fb942:	60e3      	str	r3, [r4, #12]
 23fb944:	2306      	movs	r3, #6
 23fb946:	7123      	strb	r3, [r4, #4]
 23fb948:	bd38      	pop	{r3, r4, r5, pc}

023fb94a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23fb94a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fb94c:	4605      	mov	r5, r0
 23fb94e:	460c      	mov	r4, r1
 23fb950:	461e      	mov	r6, r3
 23fb952:	9201      	str	r2, [sp, #4]
 23fb954:	f000 f890 	bl	23fba78 <_ZNKSt9type_infoeqERKS_>
 23fb958:	b950      	cbnz	r0, 23fb970 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fb95a:	2e03      	cmp	r6, #3
 23fb95c:	d808      	bhi.n	23fb970 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fb95e:	6823      	ldr	r3, [r4, #0]
 23fb960:	4629      	mov	r1, r5
 23fb962:	9a01      	ldr	r2, [sp, #4]
 23fb964:	4620      	mov	r0, r4
 23fb966:	695b      	ldr	r3, [r3, #20]
 23fb968:	b002      	add	sp, #8
 23fb96a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fb96e:	4718      	bx	r3
 23fb970:	b002      	add	sp, #8
 23fb972:	bd70      	pop	{r4, r5, r6, pc}

023fb974 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23fb974:	4b03      	ldr	r3, [pc, #12]	; (23fb984 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23fb976:	b510      	push	{r4, lr}
 23fb978:	4604      	mov	r4, r0
 23fb97a:	6003      	str	r3, [r0, #0]
 23fb97c:	f7ff ffa6 	bl	23fb8cc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fb980:	4620      	mov	r0, r4
 23fb982:	bd10      	pop	{r4, pc}
 23fb984:	023ffb68 	.word	0x023ffb68

023fb988 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23fb988:	b510      	push	{r4, lr}
 23fb98a:	4604      	mov	r4, r0
 23fb98c:	f7ff fff2 	bl	23fb974 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23fb990:	210c      	movs	r1, #12
 23fb992:	4620      	mov	r0, r4
 23fb994:	f7f7 ffd3 	bl	23f393e <_ZdlPvj>
 23fb998:	4620      	mov	r0, r4
 23fb99a:	bd10      	pop	{r4, pc}

023fb99c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23fb99c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fb99e:	9f08      	ldr	r7, [sp, #32]
 23fb9a0:	4605      	mov	r5, r0
 23fb9a2:	460e      	mov	r6, r1
 23fb9a4:	4614      	mov	r4, r2
 23fb9a6:	4297      	cmp	r7, r2
 23fb9a8:	d00a      	beq.n	23fb9c0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23fb9aa:	68a8      	ldr	r0, [r5, #8]
 23fb9ac:	4631      	mov	r1, r6
 23fb9ae:	6802      	ldr	r2, [r0, #0]
 23fb9b0:	9708      	str	r7, [sp, #32]
 23fb9b2:	6a15      	ldr	r5, [r2, #32]
 23fb9b4:	4622      	mov	r2, r4
 23fb9b6:	46ac      	mov	ip, r5
 23fb9b8:	b003      	add	sp, #12
 23fb9ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fb9be:	4760      	bx	ip
 23fb9c0:	4619      	mov	r1, r3
 23fb9c2:	9301      	str	r3, [sp, #4]
 23fb9c4:	f000 f858 	bl	23fba78 <_ZNKSt9type_infoeqERKS_>
 23fb9c8:	9b01      	ldr	r3, [sp, #4]
 23fb9ca:	2800      	cmp	r0, #0
 23fb9cc:	d0ed      	beq.n	23fb9aa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23fb9ce:	2006      	movs	r0, #6
 23fb9d0:	b003      	add	sp, #12
 23fb9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fb9d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23fb9d4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb9d8:	460d      	mov	r5, r1
 23fb9da:	4619      	mov	r1, r3
 23fb9dc:	4681      	mov	r9, r0
 23fb9de:	4617      	mov	r7, r2
 23fb9e0:	4698      	mov	r8, r3
 23fb9e2:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23fb9e6:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23fb9ea:	f000 f845 	bl	23fba78 <_ZNKSt9type_infoeqERKS_>
 23fb9ee:	b190      	cbz	r0, 23fba16 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23fb9f0:	2d00      	cmp	r5, #0
 23fb9f2:	6034      	str	r4, [r6, #0]
 23fb9f4:	7137      	strb	r7, [r6, #4]
 23fb9f6:	db09      	blt.n	23fba0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23fb9f8:	1961      	adds	r1, r4, r5
 23fb9fa:	458a      	cmp	sl, r1
 23fb9fc:	bf0c      	ite	eq
 23fb9fe:	2106      	moveq	r1, #6
 23fba00:	2101      	movne	r1, #1
 23fba02:	71b1      	strb	r1, [r6, #6]
 23fba04:	2000      	movs	r0, #0
 23fba06:	b001      	add	sp, #4
 23fba08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fba0c:	3502      	adds	r5, #2
 23fba0e:	d1f9      	bne.n	23fba04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fba10:	2301      	movs	r3, #1
 23fba12:	71b3      	strb	r3, [r6, #6]
 23fba14:	e7f6      	b.n	23fba04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fba16:	4554      	cmp	r4, sl
 23fba18:	d106      	bne.n	23fba28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fba1a:	4659      	mov	r1, fp
 23fba1c:	4648      	mov	r0, r9
 23fba1e:	f000 f82b 	bl	23fba78 <_ZNKSt9type_infoeqERKS_>
 23fba22:	b108      	cbz	r0, 23fba28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fba24:	7177      	strb	r7, [r6, #5]
 23fba26:	e7ed      	b.n	23fba04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fba28:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23fba2c:	463a      	mov	r2, r7
 23fba2e:	4629      	mov	r1, r5
 23fba30:	6803      	ldr	r3, [r0, #0]
 23fba32:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23fba36:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23fba3a:	69dc      	ldr	r4, [r3, #28]
 23fba3c:	4643      	mov	r3, r8
 23fba3e:	46a4      	mov	ip, r4
 23fba40:	b001      	add	sp, #4
 23fba42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fba46:	4760      	bx	ip

023fba48 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23fba48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fba4c:	4607      	mov	r7, r0
 23fba4e:	460c      	mov	r4, r1
 23fba50:	4615      	mov	r5, r2
 23fba52:	461e      	mov	r6, r3
 23fba54:	f7ff ff6d 	bl	23fb932 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23fba58:	b948      	cbnz	r0, 23fba6e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23fba5a:	68b8      	ldr	r0, [r7, #8]
 23fba5c:	462a      	mov	r2, r5
 23fba5e:	4621      	mov	r1, r4
 23fba60:	6803      	ldr	r3, [r0, #0]
 23fba62:	699f      	ldr	r7, [r3, #24]
 23fba64:	4633      	mov	r3, r6
 23fba66:	46bc      	mov	ip, r7
 23fba68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23fba6c:	4760      	bx	ip
 23fba6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fba72 <_ZNSt9type_infoD1Ev>:
 23fba72:	4770      	bx	lr

023fba74 <_ZNKSt9type_info14__is_pointer_pEv>:
 23fba74:	2000      	movs	r0, #0
 23fba76:	4770      	bx	lr

023fba78 <_ZNKSt9type_infoeqERKS_>:
 23fba78:	4281      	cmp	r1, r0
 23fba7a:	b508      	push	{r3, lr}
 23fba7c:	d00e      	beq.n	23fba9c <_ZNKSt9type_infoeqERKS_+0x24>
 23fba7e:	6840      	ldr	r0, [r0, #4]
 23fba80:	7803      	ldrb	r3, [r0, #0]
 23fba82:	2b2a      	cmp	r3, #42	; 0x2a
 23fba84:	d00c      	beq.n	23fbaa0 <_ZNKSt9type_infoeqERKS_+0x28>
 23fba86:	6849      	ldr	r1, [r1, #4]
 23fba88:	780b      	ldrb	r3, [r1, #0]
 23fba8a:	2b2a      	cmp	r3, #42	; 0x2a
 23fba8c:	bf08      	it	eq
 23fba8e:	3101      	addeq	r1, #1
 23fba90:	f7f7 ff08 	bl	23f38a4 <strcmp>
 23fba94:	fab0 f080 	clz	r0, r0
 23fba98:	0940      	lsrs	r0, r0, #5
 23fba9a:	bd08      	pop	{r3, pc}
 23fba9c:	2001      	movs	r0, #1
 23fba9e:	e7fc      	b.n	23fba9a <_ZNKSt9type_infoeqERKS_+0x22>
 23fbaa0:	2000      	movs	r0, #0
 23fbaa2:	e7fa      	b.n	23fba9a <_ZNKSt9type_infoeqERKS_+0x22>
 23fbaa4:	0000      	movs	r0, r0
	...

023fbaa8 <pow>:
 23fbaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbaaa:	ed2d 8b02 	vpush	{d8}
 23fbaae:	ec57 6b10 	vmov	r6, r7, d0
 23fbab2:	ec55 4b11 	vmov	r4, r5, d1
 23fbab6:	f000 f8cb 	bl	23fbc50 <__ieee754_pow>
 23fbaba:	4b63      	ldr	r3, [pc, #396]	; (23fbc48 <pow+0x1a0>)
 23fbabc:	eeb0 8a40 	vmov.f32	s16, s0
 23fbac0:	eef0 8a60 	vmov.f32	s17, s1
 23fbac4:	f993 3000 	ldrsb.w	r3, [r3]
 23fbac8:	3301      	adds	r3, #1
 23fbaca:	d02a      	beq.n	23fbb22 <pow+0x7a>
 23fbacc:	4622      	mov	r2, r4
 23fbace:	462b      	mov	r3, r5
 23fbad0:	4620      	mov	r0, r4
 23fbad2:	4629      	mov	r1, r5
 23fbad4:	f7f7 fc7e 	bl	23f33d4 <__aeabi_dcmpun>
 23fbad8:	bb18      	cbnz	r0, 23fbb22 <pow+0x7a>
 23fbada:	4632      	mov	r2, r6
 23fbadc:	463b      	mov	r3, r7
 23fbade:	4630      	mov	r0, r6
 23fbae0:	4639      	mov	r1, r7
 23fbae2:	f7f7 fc77 	bl	23f33d4 <__aeabi_dcmpun>
 23fbae6:	2800      	cmp	r0, #0
 23fbae8:	d144      	bne.n	23fbb74 <pow+0xcc>
 23fbaea:	2200      	movs	r2, #0
 23fbaec:	2300      	movs	r3, #0
 23fbaee:	4630      	mov	r0, r6
 23fbaf0:	4639      	mov	r1, r7
 23fbaf2:	f7f7 fc3d 	bl	23f3370 <__aeabi_dcmpeq>
 23fbaf6:	b1d8      	cbz	r0, 23fbb30 <pow+0x88>
 23fbaf8:	2200      	movs	r2, #0
 23fbafa:	2300      	movs	r3, #0
 23fbafc:	4620      	mov	r0, r4
 23fbafe:	4629      	mov	r1, r5
 23fbb00:	f7f7 fc36 	bl	23f3370 <__aeabi_dcmpeq>
 23fbb04:	2800      	cmp	r0, #0
 23fbb06:	d13d      	bne.n	23fbb84 <pow+0xdc>
 23fbb08:	ec45 4b10 	vmov	d0, r4, r5
 23fbb0c:	f000 fefe 	bl	23fc90c <finite>
 23fbb10:	b138      	cbz	r0, 23fbb22 <pow+0x7a>
 23fbb12:	4620      	mov	r0, r4
 23fbb14:	4629      	mov	r1, r5
 23fbb16:	2200      	movs	r2, #0
 23fbb18:	2300      	movs	r3, #0
 23fbb1a:	f7f7 fc33 	bl	23f3384 <__aeabi_dcmplt>
 23fbb1e:	2800      	cmp	r0, #0
 23fbb20:	d15c      	bne.n	23fbbdc <pow+0x134>
 23fbb22:	eeb0 0a48 	vmov.f32	s0, s16
 23fbb26:	eef0 0a68 	vmov.f32	s1, s17
 23fbb2a:	ecbd 8b02 	vpop	{d8}
 23fbb2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fbb30:	eeb0 0a48 	vmov.f32	s0, s16
 23fbb34:	eef0 0a68 	vmov.f32	s1, s17
 23fbb38:	f000 fee8 	bl	23fc90c <finite>
 23fbb3c:	b358      	cbz	r0, 23fbb96 <pow+0xee>
 23fbb3e:	2200      	movs	r2, #0
 23fbb40:	2300      	movs	r3, #0
 23fbb42:	ec51 0b18 	vmov	r0, r1, d8
 23fbb46:	f7f7 fc13 	bl	23f3370 <__aeabi_dcmpeq>
 23fbb4a:	2800      	cmp	r0, #0
 23fbb4c:	d0e9      	beq.n	23fbb22 <pow+0x7a>
 23fbb4e:	ec47 6b10 	vmov	d0, r6, r7
 23fbb52:	f000 fedb 	bl	23fc90c <finite>
 23fbb56:	2800      	cmp	r0, #0
 23fbb58:	d0e3      	beq.n	23fbb22 <pow+0x7a>
 23fbb5a:	ec45 4b10 	vmov	d0, r4, r5
 23fbb5e:	f000 fed5 	bl	23fc90c <finite>
 23fbb62:	2800      	cmp	r0, #0
 23fbb64:	d0dd      	beq.n	23fbb22 <pow+0x7a>
 23fbb66:	f7fc fdbb 	bl	23f86e0 <__errno>
 23fbb6a:	2322      	movs	r3, #34	; 0x22
 23fbb6c:	ed9f 8b2e 	vldr	d8, [pc, #184]	; 23fbc28 <pow+0x180>
 23fbb70:	6003      	str	r3, [r0, #0]
 23fbb72:	e7d6      	b.n	23fbb22 <pow+0x7a>
 23fbb74:	4620      	mov	r0, r4
 23fbb76:	4629      	mov	r1, r5
 23fbb78:	2200      	movs	r2, #0
 23fbb7a:	2300      	movs	r3, #0
 23fbb7c:	f7f7 fbf8 	bl	23f3370 <__aeabi_dcmpeq>
 23fbb80:	2800      	cmp	r0, #0
 23fbb82:	d0ce      	beq.n	23fbb22 <pow+0x7a>
 23fbb84:	ed9f 8b2a 	vldr	d8, [pc, #168]	; 23fbc30 <pow+0x188>
 23fbb88:	eeb0 0a48 	vmov.f32	s0, s16
 23fbb8c:	eef0 0a68 	vmov.f32	s1, s17
 23fbb90:	ecbd 8b02 	vpop	{d8}
 23fbb94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fbb96:	ec47 6b10 	vmov	d0, r6, r7
 23fbb9a:	f000 feb7 	bl	23fc90c <finite>
 23fbb9e:	2800      	cmp	r0, #0
 23fbba0:	d0cd      	beq.n	23fbb3e <pow+0x96>
 23fbba2:	ec45 4b10 	vmov	d0, r4, r5
 23fbba6:	f000 feb1 	bl	23fc90c <finite>
 23fbbaa:	2800      	cmp	r0, #0
 23fbbac:	d0c7      	beq.n	23fbb3e <pow+0x96>
 23fbbae:	ee18 0a10 	vmov	r0, s16
 23fbbb2:	ec53 2b18 	vmov	r2, r3, d8
 23fbbb6:	4619      	mov	r1, r3
 23fbbb8:	f7f7 fc0c 	bl	23f33d4 <__aeabi_dcmpun>
 23fbbbc:	bb20      	cbnz	r0, 23fbc08 <pow+0x160>
 23fbbbe:	f7fc fd8f 	bl	23f86e0 <__errno>
 23fbbc2:	2222      	movs	r2, #34	; 0x22
 23fbbc4:	4603      	mov	r3, r0
 23fbbc6:	4639      	mov	r1, r7
 23fbbc8:	4630      	mov	r0, r6
 23fbbca:	601a      	str	r2, [r3, #0]
 23fbbcc:	2200      	movs	r2, #0
 23fbbce:	2300      	movs	r3, #0
 23fbbd0:	f7f7 fbd8 	bl	23f3384 <__aeabi_dcmplt>
 23fbbd4:	b948      	cbnz	r0, 23fbbea <pow+0x142>
 23fbbd6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 23fbc38 <pow+0x190>
 23fbbda:	e7a2      	b.n	23fbb22 <pow+0x7a>
 23fbbdc:	f7fc fd80 	bl	23f86e0 <__errno>
 23fbbe0:	2321      	movs	r3, #33	; 0x21
 23fbbe2:	ed9f 8b17 	vldr	d8, [pc, #92]	; 23fbc40 <pow+0x198>
 23fbbe6:	6003      	str	r3, [r0, #0]
 23fbbe8:	e79b      	b.n	23fbb22 <pow+0x7a>
 23fbbea:	ec45 4b10 	vmov	d0, r4, r5
 23fbbee:	f000 fea3 	bl	23fc938 <rint>
 23fbbf2:	4622      	mov	r2, r4
 23fbbf4:	462b      	mov	r3, r5
 23fbbf6:	ec51 0b10 	vmov	r0, r1, d0
 23fbbfa:	f7f7 fbb9 	bl	23f3370 <__aeabi_dcmpeq>
 23fbbfe:	2800      	cmp	r0, #0
 23fbc00:	d1e9      	bne.n	23fbbd6 <pow+0x12e>
 23fbc02:	ed9f 8b0f 	vldr	d8, [pc, #60]	; 23fbc40 <pow+0x198>
 23fbc06:	e78c      	b.n	23fbb22 <pow+0x7a>
 23fbc08:	f7fc fd6a 	bl	23f86e0 <__errno>
 23fbc0c:	2200      	movs	r2, #0
 23fbc0e:	2300      	movs	r3, #0
 23fbc10:	2121      	movs	r1, #33	; 0x21
 23fbc12:	6001      	str	r1, [r0, #0]
 23fbc14:	4610      	mov	r0, r2
 23fbc16:	4619      	mov	r1, r3
 23fbc18:	f7f7 fa6c 	bl	23f30f4 <__aeabi_ddiv>
 23fbc1c:	ec41 0b18 	vmov	d8, r0, r1
 23fbc20:	e77f      	b.n	23fbb22 <pow+0x7a>
 23fbc22:	bf00      	nop
 23fbc24:	f3af 8000 	nop.w
	...
 23fbc34:	3ff00000 	.word	0x3ff00000
 23fbc38:	00000000 	.word	0x00000000
 23fbc3c:	7ff00000 	.word	0x7ff00000
 23fbc40:	00000000 	.word	0x00000000
 23fbc44:	fff00000 	.word	0xfff00000
 23fbc48:	1007aaf8 	.word	0x1007aaf8
 23fbc4c:	00000000 	.word	0x00000000

023fbc50 <__ieee754_pow>:
 23fbc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbc54:	ec55 4b11 	vmov	r4, r5, d1
 23fbc58:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23fbc5c:	ea5a 0204 	orrs.w	r2, sl, r4
 23fbc60:	ed2d 8b0c 	vpush	{d8-d13}
 23fbc64:	b087      	sub	sp, #28
 23fbc66:	d01f      	beq.n	23fbca8 <__ieee754_pow+0x58>
 23fbc68:	495d      	ldr	r1, [pc, #372]	; (23fbde0 <__ieee754_pow+0x190>)
 23fbc6a:	ee10 2a10 	vmov	r2, s0
 23fbc6e:	ec57 6b10 	vmov	r6, r7, d0
 23fbc72:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 23fbc76:	46b9      	mov	r9, r7
 23fbc78:	4588      	cmp	r8, r1
 23fbc7a:	dc11      	bgt.n	23fbca0 <__ieee754_pow+0x50>
 23fbc7c:	46ab      	mov	fp, r5
 23fbc7e:	ee11 3a10 	vmov	r3, s2
 23fbc82:	d108      	bne.n	23fbc96 <__ieee754_pow+0x46>
 23fbc84:	b13e      	cbz	r6, 23fbc96 <__ieee754_pow+0x46>
 23fbc86:	4857      	ldr	r0, [pc, #348]	; (23fbde4 <__ieee754_pow+0x194>)
 23fbc88:	b007      	add	sp, #28
 23fbc8a:	ecbd 8b0c 	vpop	{d8-d13}
 23fbc8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbc92:	f000 be49 	b.w	23fc928 <nan>
 23fbc96:	4952      	ldr	r1, [pc, #328]	; (23fbde0 <__ieee754_pow+0x190>)
 23fbc98:	458a      	cmp	sl, r1
 23fbc9a:	dc01      	bgt.n	23fbca0 <__ieee754_pow+0x50>
 23fbc9c:	d10b      	bne.n	23fbcb6 <__ieee754_pow+0x66>
 23fbc9e:	b153      	cbz	r3, 23fbcb6 <__ieee754_pow+0x66>
 23fbca0:	4b51      	ldr	r3, [pc, #324]	; (23fbde8 <__ieee754_pow+0x198>)
 23fbca2:	4443      	add	r3, r8
 23fbca4:	4313      	orrs	r3, r2
 23fbca6:	d1ee      	bne.n	23fbc86 <__ieee754_pow+0x36>
 23fbca8:	ed9f 0b49 	vldr	d0, [pc, #292]	; 23fbdd0 <__ieee754_pow+0x180>
 23fbcac:	b007      	add	sp, #28
 23fbcae:	ecbd 8b0c 	vpop	{d8-d13}
 23fbcb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fbcb6:	f1b9 0f00 	cmp.w	r9, #0
 23fbcba:	db45      	blt.n	23fbd48 <__ieee754_pow+0xf8>
 23fbcbc:	2100      	movs	r1, #0
 23fbcbe:	9100      	str	r1, [sp, #0]
 23fbcc0:	b983      	cbnz	r3, 23fbce4 <__ieee754_pow+0x94>
 23fbcc2:	4b47      	ldr	r3, [pc, #284]	; (23fbde0 <__ieee754_pow+0x190>)
 23fbcc4:	459a      	cmp	sl, r3
 23fbcc6:	d05b      	beq.n	23fbd80 <__ieee754_pow+0x130>
 23fbcc8:	4b48      	ldr	r3, [pc, #288]	; (23fbdec <__ieee754_pow+0x19c>)
 23fbcca:	459a      	cmp	sl, r3
 23fbccc:	d06a      	beq.n	23fbda4 <__ieee754_pow+0x154>
 23fbcce:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
 23fbcd2:	f000 84b0 	beq.w	23fc636 <__ieee754_pow+0x9e6>
 23fbcd6:	4b46      	ldr	r3, [pc, #280]	; (23fbdf0 <__ieee754_pow+0x1a0>)
 23fbcd8:	459b      	cmp	fp, r3
 23fbcda:	d103      	bne.n	23fbce4 <__ieee754_pow+0x94>
 23fbcdc:	f1b9 0f00 	cmp.w	r9, #0
 23fbce0:	f280 850d 	bge.w	23fc6fe <__ieee754_pow+0xaae>
 23fbce4:	9202      	str	r2, [sp, #8]
 23fbce6:	ec47 6b10 	vmov	d0, r6, r7
 23fbcea:	f000 fe05 	bl	23fc8f8 <fabs>
 23fbcee:	9a02      	ldr	r2, [sp, #8]
 23fbcf0:	b94a      	cbnz	r2, 23fbd06 <__ieee754_pow+0xb6>
 23fbcf2:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23fbcf6:	4a3d      	ldr	r2, [pc, #244]	; (23fbdec <__ieee754_pow+0x19c>)
 23fbcf8:	4293      	cmp	r3, r2
 23fbcfa:	f000 83a8 	beq.w	23fc44e <__ieee754_pow+0x7fe>
 23fbcfe:	f1b8 0f00 	cmp.w	r8, #0
 23fbd02:	f000 83a4 	beq.w	23fc44e <__ieee754_pow+0x7fe>
 23fbd06:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 23fbd0a:	9a00      	ldr	r2, [sp, #0]
 23fbd0c:	3b01      	subs	r3, #1
 23fbd0e:	9304      	str	r3, [sp, #16]
 23fbd10:	4313      	orrs	r3, r2
 23fbd12:	d04e      	beq.n	23fbdb2 <__ieee754_pow+0x162>
 23fbd14:	4b37      	ldr	r3, [pc, #220]	; (23fbdf4 <__ieee754_pow+0x1a4>)
 23fbd16:	459a      	cmp	sl, r3
 23fbd18:	dd72      	ble.n	23fbe00 <__ieee754_pow+0x1b0>
 23fbd1a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 23fbd1e:	459a      	cmp	sl, r3
 23fbd20:	4b35      	ldr	r3, [pc, #212]	; (23fbdf8 <__ieee754_pow+0x1a8>)
 23fbd22:	f340 842b 	ble.w	23fc57c <__ieee754_pow+0x92c>
 23fbd26:	4598      	cmp	r8, r3
 23fbd28:	f340 83a9 	ble.w	23fc47e <__ieee754_pow+0x82e>
 23fbd2c:	f1bb 0f00 	cmp.w	fp, #0
 23fbd30:	f340 83a9 	ble.w	23fc486 <__ieee754_pow+0x836>
 23fbd34:	a328      	add	r3, pc, #160	; (adr r3, 23fbdd8 <__ieee754_pow+0x188>)
 23fbd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbd3a:	4610      	mov	r0, r2
 23fbd3c:	4619      	mov	r1, r3
 23fbd3e:	f7f7 f8af 	bl	23f2ea0 <__aeabi_dmul>
 23fbd42:	ec41 0b10 	vmov	d0, r0, r1
 23fbd46:	e7b1      	b.n	23fbcac <__ieee754_pow+0x5c>
 23fbd48:	492c      	ldr	r1, [pc, #176]	; (23fbdfc <__ieee754_pow+0x1ac>)
 23fbd4a:	458a      	cmp	sl, r1
 23fbd4c:	dc27      	bgt.n	23fbd9e <__ieee754_pow+0x14e>
 23fbd4e:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 23fbd52:	458a      	cmp	sl, r1
 23fbd54:	ddb2      	ble.n	23fbcbc <__ieee754_pow+0x6c>
 23fbd56:	ea4f 512a 	mov.w	r1, sl, asr #20
 23fbd5a:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 23fbd5e:	2914      	cmp	r1, #20
 23fbd60:	f340 847d 	ble.w	23fc65e <__ieee754_pow+0xa0e>
 23fbd64:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 23fbd68:	fa23 f001 	lsr.w	r0, r3, r1
 23fbd6c:	fa00 f101 	lsl.w	r1, r0, r1
 23fbd70:	4299      	cmp	r1, r3
 23fbd72:	d1a3      	bne.n	23fbcbc <__ieee754_pow+0x6c>
 23fbd74:	f000 0001 	and.w	r0, r0, #1
 23fbd78:	f1c0 0102 	rsb	r1, r0, #2
 23fbd7c:	9100      	str	r1, [sp, #0]
 23fbd7e:	e79f      	b.n	23fbcc0 <__ieee754_pow+0x70>
 23fbd80:	4b19      	ldr	r3, [pc, #100]	; (23fbde8 <__ieee754_pow+0x198>)
 23fbd82:	4443      	add	r3, r8
 23fbd84:	4313      	orrs	r3, r2
 23fbd86:	d08f      	beq.n	23fbca8 <__ieee754_pow+0x58>
 23fbd88:	4b1b      	ldr	r3, [pc, #108]	; (23fbdf8 <__ieee754_pow+0x1a8>)
 23fbd8a:	4598      	cmp	r8, r3
 23fbd8c:	f340 83ab 	ble.w	23fc4e6 <__ieee754_pow+0x896>
 23fbd90:	f1bb 0f00 	cmp.w	fp, #0
 23fbd94:	f2c0 8377 	blt.w	23fc486 <__ieee754_pow+0x836>
 23fbd98:	ec45 4b10 	vmov	d0, r4, r5
 23fbd9c:	e786      	b.n	23fbcac <__ieee754_pow+0x5c>
 23fbd9e:	2102      	movs	r1, #2
 23fbda0:	9100      	str	r1, [sp, #0]
 23fbda2:	e78d      	b.n	23fbcc0 <__ieee754_pow+0x70>
 23fbda4:	f1bb 0f00 	cmp.w	fp, #0
 23fbda8:	f2c0 844f 	blt.w	23fc64a <__ieee754_pow+0x9fa>
 23fbdac:	ec47 6b10 	vmov	d0, r6, r7
 23fbdb0:	e77c      	b.n	23fbcac <__ieee754_pow+0x5c>
 23fbdb2:	4632      	mov	r2, r6
 23fbdb4:	463b      	mov	r3, r7
 23fbdb6:	4610      	mov	r0, r2
 23fbdb8:	4619      	mov	r1, r3
 23fbdba:	f7f6 feb9 	bl	23f2b30 <__aeabi_dsub>
 23fbdbe:	4602      	mov	r2, r0
 23fbdc0:	460b      	mov	r3, r1
 23fbdc2:	f7f7 f997 	bl	23f30f4 <__aeabi_ddiv>
 23fbdc6:	ec41 0b10 	vmov	d0, r0, r1
 23fbdca:	e76f      	b.n	23fbcac <__ieee754_pow+0x5c>
 23fbdcc:	f3af 8000 	nop.w
 23fbdd0:	00000000 	.word	0x00000000
 23fbdd4:	3ff00000 	.word	0x3ff00000
 23fbdd8:	8800759c 	.word	0x8800759c
 23fbddc:	7e37e43c 	.word	0x7e37e43c
 23fbde0:	7ff00000 	.word	0x7ff00000
 23fbde4:	023ffba4 	.word	0x023ffba4
 23fbde8:	c0100000 	.word	0xc0100000
 23fbdec:	3ff00000 	.word	0x3ff00000
 23fbdf0:	3fe00000 	.word	0x3fe00000
 23fbdf4:	41e00000 	.word	0x41e00000
 23fbdf8:	3fefffff 	.word	0x3fefffff
 23fbdfc:	433fffff 	.word	0x433fffff
 23fbe00:	4be3      	ldr	r3, [pc, #908]	; (23fc190 <__ieee754_pow+0x540>)
 23fbe02:	2200      	movs	r2, #0
 23fbe04:	ea09 0303 	and.w	r3, r9, r3
 23fbe08:	b953      	cbnz	r3, 23fbe20 <__ieee754_pow+0x1d0>
 23fbe0a:	4be2      	ldr	r3, [pc, #904]	; (23fc194 <__ieee754_pow+0x544>)
 23fbe0c:	ec51 0b10 	vmov	r0, r1, d0
 23fbe10:	f7f7 f846 	bl	23f2ea0 <__aeabi_dmul>
 23fbe14:	f06f 0234 	mvn.w	r2, #52	; 0x34
 23fbe18:	ec41 0b10 	vmov	d0, r0, r1
 23fbe1c:	ee10 8a90 	vmov	r8, s1
 23fbe20:	ea4f 5328 	mov.w	r3, r8, asr #20
 23fbe24:	f3c8 0813 	ubfx	r8, r8, #0, #20
 23fbe28:	4edb      	ldr	r6, [pc, #876]	; (23fc198 <__ieee754_pow+0x548>)
 23fbe2a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 23fbe2e:	ea48 0606 	orr.w	r6, r8, r6
 23fbe32:	189a      	adds	r2, r3, r2
 23fbe34:	4bd9      	ldr	r3, [pc, #868]	; (23fc19c <__ieee754_pow+0x54c>)
 23fbe36:	4598      	cmp	r8, r3
 23fbe38:	9205      	str	r2, [sp, #20]
 23fbe3a:	dd07      	ble.n	23fbe4c <__ieee754_pow+0x1fc>
 23fbe3c:	4bd8      	ldr	r3, [pc, #864]	; (23fc1a0 <__ieee754_pow+0x550>)
 23fbe3e:	4598      	cmp	r8, r3
 23fbe40:	f340 8433 	ble.w	23fc6aa <__ieee754_pow+0xa5a>
 23fbe44:	3201      	adds	r2, #1
 23fbe46:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 23fbe4a:	9205      	str	r2, [sp, #20]
 23fbe4c:	2700      	movs	r7, #0
 23fbe4e:	ed9f 7bb8 	vldr	d7, [pc, #736]	; 23fc130 <__ieee754_pow+0x4e0>
 23fbe52:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 23fc138 <__ieee754_pow+0x4e8>
 23fbe56:	eeb0 da47 	vmov.f32	s26, s14
 23fbe5a:	eef0 da67 	vmov.f32	s27, s15
 23fbe5e:	eeb0 ca47 	vmov.f32	s24, s14
 23fbe62:	eef0 ca67 	vmov.f32	s25, s15
 23fbe66:	ec51 0b16 	vmov	r0, r1, d6
 23fbe6a:	ec53 2b10 	vmov	r2, r3, d0
 23fbe6e:	4633      	mov	r3, r6
 23fbe70:	1076      	asrs	r6, r6, #1
 23fbe72:	ec43 2b19 	vmov	d9, r2, r3
 23fbe76:	ec41 0b1a 	vmov	d10, r0, r1
 23fbe7a:	4602      	mov	r2, r0
 23fbe7c:	460b      	mov	r3, r1
 23fbe7e:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 23fbe82:	ec51 0b19 	vmov	r0, r1, d9
 23fbe86:	f7f6 fe53 	bl	23f2b30 <__aeabi_dsub>
 23fbe8a:	4680      	mov	r8, r0
 23fbe8c:	4689      	mov	r9, r1
 23fbe8e:	ec53 2b1a 	vmov	r2, r3, d10
 23fbe92:	ec51 0b19 	vmov	r0, r1, d9
 23fbe96:	f7f6 fe4d 	bl	23f2b34 <__adddf3>
 23fbe9a:	4602      	mov	r2, r0
 23fbe9c:	460b      	mov	r3, r1
 23fbe9e:	2000      	movs	r0, #0
 23fbea0:	49bd      	ldr	r1, [pc, #756]	; (23fc198 <__ieee754_pow+0x548>)
 23fbea2:	f7f7 f927 	bl	23f30f4 <__aeabi_ddiv>
 23fbea6:	ec41 0b1b 	vmov	d11, r0, r1
 23fbeaa:	ec53 2b1b 	vmov	r2, r3, d11
 23fbeae:	4640      	mov	r0, r8
 23fbeb0:	4649      	mov	r1, r9
 23fbeb2:	f7f6 fff5 	bl	23f2ea0 <__aeabi_dmul>
 23fbeb6:	460a      	mov	r2, r1
 23fbeb8:	f506 2300 	add.w	r3, r6, #524288	; 0x80000
 23fbebc:	ec41 0b18 	vmov	d8, r0, r1
 23fbec0:	4601      	mov	r1, r0
 23fbec2:	2000      	movs	r0, #0
 23fbec4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 23fbec8:	2100      	movs	r1, #0
 23fbeca:	4606      	mov	r6, r0
 23fbecc:	4602      	mov	r2, r0
 23fbece:	9102      	str	r1, [sp, #8]
 23fbed0:	19d9      	adds	r1, r3, r7
 23fbed2:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 23fbed6:	460f      	mov	r7, r1
 23fbed8:	460b      	mov	r3, r1
 23fbeda:	4650      	mov	r0, sl
 23fbedc:	4659      	mov	r1, fp
 23fbede:	f7f6 ffdf 	bl	23f2ea0 <__aeabi_dmul>
 23fbee2:	4602      	mov	r2, r0
 23fbee4:	460b      	mov	r3, r1
 23fbee6:	4640      	mov	r0, r8
 23fbee8:	4649      	mov	r1, r9
 23fbeea:	f7f6 fe21 	bl	23f2b30 <__aeabi_dsub>
 23fbeee:	4680      	mov	r8, r0
 23fbef0:	4689      	mov	r9, r1
 23fbef2:	4630      	mov	r0, r6
 23fbef4:	4639      	mov	r1, r7
 23fbef6:	ec53 2b1a 	vmov	r2, r3, d10
 23fbefa:	f7f6 fe19 	bl	23f2b30 <__aeabi_dsub>
 23fbefe:	4602      	mov	r2, r0
 23fbf00:	460b      	mov	r3, r1
 23fbf02:	ec51 0b19 	vmov	r0, r1, d9
 23fbf06:	f7f6 fe13 	bl	23f2b30 <__aeabi_dsub>
 23fbf0a:	4652      	mov	r2, sl
 23fbf0c:	465b      	mov	r3, fp
 23fbf0e:	f7f6 ffc7 	bl	23f2ea0 <__aeabi_dmul>
 23fbf12:	4602      	mov	r2, r0
 23fbf14:	460b      	mov	r3, r1
 23fbf16:	4640      	mov	r0, r8
 23fbf18:	4649      	mov	r1, r9
 23fbf1a:	f7f6 fe09 	bl	23f2b30 <__aeabi_dsub>
 23fbf1e:	ec53 2b1b 	vmov	r2, r3, d11
 23fbf22:	f7f6 ffbd 	bl	23f2ea0 <__aeabi_dmul>
 23fbf26:	ec53 2b18 	vmov	r2, r3, d8
 23fbf2a:	ec41 0b1a 	vmov	d10, r0, r1
 23fbf2e:	ec51 0b18 	vmov	r0, r1, d8
 23fbf32:	f7f6 ffb5 	bl	23f2ea0 <__aeabi_dmul>
 23fbf36:	4606      	mov	r6, r0
 23fbf38:	460f      	mov	r7, r1
 23fbf3a:	a381      	add	r3, pc, #516	; (adr r3, 23fc140 <__ieee754_pow+0x4f0>)
 23fbf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf40:	f7f6 ffae 	bl	23f2ea0 <__aeabi_dmul>
 23fbf44:	a380      	add	r3, pc, #512	; (adr r3, 23fc148 <__ieee754_pow+0x4f8>)
 23fbf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf4a:	f7f6 fdf3 	bl	23f2b34 <__adddf3>
 23fbf4e:	4632      	mov	r2, r6
 23fbf50:	463b      	mov	r3, r7
 23fbf52:	f7f6 ffa5 	bl	23f2ea0 <__aeabi_dmul>
 23fbf56:	a37e      	add	r3, pc, #504	; (adr r3, 23fc150 <__ieee754_pow+0x500>)
 23fbf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf5c:	f7f6 fdea 	bl	23f2b34 <__adddf3>
 23fbf60:	4632      	mov	r2, r6
 23fbf62:	463b      	mov	r3, r7
 23fbf64:	f7f6 ff9c 	bl	23f2ea0 <__aeabi_dmul>
 23fbf68:	a37b      	add	r3, pc, #492	; (adr r3, 23fc158 <__ieee754_pow+0x508>)
 23fbf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf6e:	f7f6 fde1 	bl	23f2b34 <__adddf3>
 23fbf72:	4632      	mov	r2, r6
 23fbf74:	463b      	mov	r3, r7
 23fbf76:	f7f6 ff93 	bl	23f2ea0 <__aeabi_dmul>
 23fbf7a:	a379      	add	r3, pc, #484	; (adr r3, 23fc160 <__ieee754_pow+0x510>)
 23fbf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf80:	f7f6 fdd8 	bl	23f2b34 <__adddf3>
 23fbf84:	4632      	mov	r2, r6
 23fbf86:	463b      	mov	r3, r7
 23fbf88:	f7f6 ff8a 	bl	23f2ea0 <__aeabi_dmul>
 23fbf8c:	a376      	add	r3, pc, #472	; (adr r3, 23fc168 <__ieee754_pow+0x518>)
 23fbf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf92:	f7f6 fdcf 	bl	23f2b34 <__adddf3>
 23fbf96:	4680      	mov	r8, r0
 23fbf98:	4689      	mov	r9, r1
 23fbf9a:	4632      	mov	r2, r6
 23fbf9c:	463b      	mov	r3, r7
 23fbf9e:	4630      	mov	r0, r6
 23fbfa0:	4639      	mov	r1, r7
 23fbfa2:	f7f6 ff7d 	bl	23f2ea0 <__aeabi_dmul>
 23fbfa6:	4602      	mov	r2, r0
 23fbfa8:	460b      	mov	r3, r1
 23fbfaa:	4640      	mov	r0, r8
 23fbfac:	4649      	mov	r1, r9
 23fbfae:	f04f 0800 	mov.w	r8, #0
 23fbfb2:	f7f6 ff75 	bl	23f2ea0 <__aeabi_dmul>
 23fbfb6:	4652      	mov	r2, sl
 23fbfb8:	4606      	mov	r6, r0
 23fbfba:	460f      	mov	r7, r1
 23fbfbc:	465b      	mov	r3, fp
 23fbfbe:	ec51 0b18 	vmov	r0, r1, d8
 23fbfc2:	f7f6 fdb7 	bl	23f2b34 <__adddf3>
 23fbfc6:	ec53 2b1a 	vmov	r2, r3, d10
 23fbfca:	f7f6 ff69 	bl	23f2ea0 <__aeabi_dmul>
 23fbfce:	4632      	mov	r2, r6
 23fbfd0:	463b      	mov	r3, r7
 23fbfd2:	f7f6 fdaf 	bl	23f2b34 <__adddf3>
 23fbfd6:	4652      	mov	r2, sl
 23fbfd8:	465b      	mov	r3, fp
 23fbfda:	ec41 0b19 	vmov	d9, r0, r1
 23fbfde:	4650      	mov	r0, sl
 23fbfe0:	4659      	mov	r1, fp
 23fbfe2:	f7f6 ff5d 	bl	23f2ea0 <__aeabi_dmul>
 23fbfe6:	2200      	movs	r2, #0
 23fbfe8:	4b6e      	ldr	r3, [pc, #440]	; (23fc1a4 <__ieee754_pow+0x554>)
 23fbfea:	4606      	mov	r6, r0
 23fbfec:	460f      	mov	r7, r1
 23fbfee:	f7f6 fda1 	bl	23f2b34 <__adddf3>
 23fbff2:	ec53 2b19 	vmov	r2, r3, d9
 23fbff6:	f7f6 fd9d 	bl	23f2b34 <__adddf3>
 23fbffa:	4689      	mov	r9, r1
 23fbffc:	4642      	mov	r2, r8
 23fbffe:	4650      	mov	r0, sl
 23fc000:	464b      	mov	r3, r9
 23fc002:	4659      	mov	r1, fp
 23fc004:	f7f6 ff4c 	bl	23f2ea0 <__aeabi_dmul>
 23fc008:	2200      	movs	r2, #0
 23fc00a:	4682      	mov	sl, r0
 23fc00c:	468b      	mov	fp, r1
 23fc00e:	4b65      	ldr	r3, [pc, #404]	; (23fc1a4 <__ieee754_pow+0x554>)
 23fc010:	4640      	mov	r0, r8
 23fc012:	4649      	mov	r1, r9
 23fc014:	f7f6 fd8c 	bl	23f2b30 <__aeabi_dsub>
 23fc018:	4632      	mov	r2, r6
 23fc01a:	463b      	mov	r3, r7
 23fc01c:	f7f6 fd88 	bl	23f2b30 <__aeabi_dsub>
 23fc020:	4602      	mov	r2, r0
 23fc022:	460b      	mov	r3, r1
 23fc024:	ec51 0b19 	vmov	r0, r1, d9
 23fc028:	f7f6 fd82 	bl	23f2b30 <__aeabi_dsub>
 23fc02c:	ec53 2b18 	vmov	r2, r3, d8
 23fc030:	f7f6 ff36 	bl	23f2ea0 <__aeabi_dmul>
 23fc034:	4606      	mov	r6, r0
 23fc036:	460f      	mov	r7, r1
 23fc038:	4642      	mov	r2, r8
 23fc03a:	464b      	mov	r3, r9
 23fc03c:	ec51 0b1a 	vmov	r0, r1, d10
 23fc040:	f7f6 ff2e 	bl	23f2ea0 <__aeabi_dmul>
 23fc044:	4602      	mov	r2, r0
 23fc046:	460b      	mov	r3, r1
 23fc048:	4630      	mov	r0, r6
 23fc04a:	4639      	mov	r1, r7
 23fc04c:	f7f6 fd72 	bl	23f2b34 <__adddf3>
 23fc050:	4680      	mov	r8, r0
 23fc052:	4689      	mov	r9, r1
 23fc054:	4650      	mov	r0, sl
 23fc056:	4642      	mov	r2, r8
 23fc058:	4659      	mov	r1, fp
 23fc05a:	464b      	mov	r3, r9
 23fc05c:	f7f6 fd6a 	bl	23f2b34 <__adddf3>
 23fc060:	2000      	movs	r0, #0
 23fc062:	460f      	mov	r7, r1
 23fc064:	4606      	mov	r6, r0
 23fc066:	a342      	add	r3, pc, #264	; (adr r3, 23fc170 <__ieee754_pow+0x520>)
 23fc068:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc06c:	f7f6 ff18 	bl	23f2ea0 <__aeabi_dmul>
 23fc070:	4652      	mov	r2, sl
 23fc072:	465b      	mov	r3, fp
 23fc074:	ec41 0b19 	vmov	d9, r0, r1
 23fc078:	4630      	mov	r0, r6
 23fc07a:	4639      	mov	r1, r7
 23fc07c:	f7f6 fd58 	bl	23f2b30 <__aeabi_dsub>
 23fc080:	4602      	mov	r2, r0
 23fc082:	460b      	mov	r3, r1
 23fc084:	4640      	mov	r0, r8
 23fc086:	4649      	mov	r1, r9
 23fc088:	f7f6 fd52 	bl	23f2b30 <__aeabi_dsub>
 23fc08c:	a33a      	add	r3, pc, #232	; (adr r3, 23fc178 <__ieee754_pow+0x528>)
 23fc08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc092:	f7f6 ff05 	bl	23f2ea0 <__aeabi_dmul>
 23fc096:	4680      	mov	r8, r0
 23fc098:	4689      	mov	r9, r1
 23fc09a:	4630      	mov	r0, r6
 23fc09c:	4639      	mov	r1, r7
 23fc09e:	a338      	add	r3, pc, #224	; (adr r3, 23fc180 <__ieee754_pow+0x530>)
 23fc0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc0a4:	f7f6 fefc 	bl	23f2ea0 <__aeabi_dmul>
 23fc0a8:	4602      	mov	r2, r0
 23fc0aa:	460b      	mov	r3, r1
 23fc0ac:	4640      	mov	r0, r8
 23fc0ae:	4649      	mov	r1, r9
 23fc0b0:	f7f6 fd40 	bl	23f2b34 <__adddf3>
 23fc0b4:	ec53 2b1c 	vmov	r2, r3, d12
 23fc0b8:	f7f6 fd3c 	bl	23f2b34 <__adddf3>
 23fc0bc:	4606      	mov	r6, r0
 23fc0be:	460f      	mov	r7, r1
 23fc0c0:	9805      	ldr	r0, [sp, #20]
 23fc0c2:	f7f6 fe83 	bl	23f2dcc <__aeabi_i2d>
 23fc0c6:	4632      	mov	r2, r6
 23fc0c8:	4680      	mov	r8, r0
 23fc0ca:	4689      	mov	r9, r1
 23fc0cc:	463b      	mov	r3, r7
 23fc0ce:	ec51 0b19 	vmov	r0, r1, d9
 23fc0d2:	f7f6 fd2f 	bl	23f2b34 <__adddf3>
 23fc0d6:	ec53 2b1d 	vmov	r2, r3, d13
 23fc0da:	f7f6 fd2b 	bl	23f2b34 <__adddf3>
 23fc0de:	4642      	mov	r2, r8
 23fc0e0:	464b      	mov	r3, r9
 23fc0e2:	f7f6 fd27 	bl	23f2b34 <__adddf3>
 23fc0e6:	2000      	movs	r0, #0
 23fc0e8:	4642      	mov	r2, r8
 23fc0ea:	464b      	mov	r3, r9
 23fc0ec:	4682      	mov	sl, r0
 23fc0ee:	468b      	mov	fp, r1
 23fc0f0:	f7f6 fd1e 	bl	23f2b30 <__aeabi_dsub>
 23fc0f4:	ec53 2b1d 	vmov	r2, r3, d13
 23fc0f8:	f7f6 fd1a 	bl	23f2b30 <__aeabi_dsub>
 23fc0fc:	ec53 2b19 	vmov	r2, r3, d9
 23fc100:	f7f6 fd16 	bl	23f2b30 <__aeabi_dsub>
 23fc104:	4602      	mov	r2, r0
 23fc106:	460b      	mov	r3, r1
 23fc108:	4630      	mov	r0, r6
 23fc10a:	4639      	mov	r1, r7
 23fc10c:	f7f6 fd10 	bl	23f2b30 <__aeabi_dsub>
 23fc110:	9b00      	ldr	r3, [sp, #0]
 23fc112:	9a04      	ldr	r2, [sp, #16]
 23fc114:	3b01      	subs	r3, #1
 23fc116:	4313      	orrs	r3, r2
 23fc118:	ec41 0b18 	vmov	d8, r0, r1
 23fc11c:	f040 81dc 	bne.w	23fc4d8 <__ieee754_pow+0x888>
 23fc120:	ed9f 7b19 	vldr	d7, [pc, #100]	; 23fc188 <__ieee754_pow+0x538>
 23fc124:	eeb0 9a47 	vmov.f32	s18, s14
 23fc128:	eef0 9a67 	vmov.f32	s19, s15
 23fc12c:	e03c      	b.n	23fc1a8 <__ieee754_pow+0x558>
 23fc12e:	bf00      	nop
	...
 23fc13c:	3ff00000 	.word	0x3ff00000
 23fc140:	4a454eef 	.word	0x4a454eef
 23fc144:	3fca7e28 	.word	0x3fca7e28
 23fc148:	93c9db65 	.word	0x93c9db65
 23fc14c:	3fcd864a 	.word	0x3fcd864a
 23fc150:	a91d4101 	.word	0xa91d4101
 23fc154:	3fd17460 	.word	0x3fd17460
 23fc158:	518f264d 	.word	0x518f264d
 23fc15c:	3fd55555 	.word	0x3fd55555
 23fc160:	db6fabff 	.word	0xdb6fabff
 23fc164:	3fdb6db6 	.word	0x3fdb6db6
 23fc168:	33333303 	.word	0x33333303
 23fc16c:	3fe33333 	.word	0x3fe33333
 23fc170:	e0000000 	.word	0xe0000000
 23fc174:	3feec709 	.word	0x3feec709
 23fc178:	dc3a03fd 	.word	0xdc3a03fd
 23fc17c:	3feec709 	.word	0x3feec709
 23fc180:	145b01f5 	.word	0x145b01f5
 23fc184:	be3e2fe0 	.word	0xbe3e2fe0
 23fc188:	00000000 	.word	0x00000000
 23fc18c:	bff00000 	.word	0xbff00000
 23fc190:	7ff00000 	.word	0x7ff00000
 23fc194:	43400000 	.word	0x43400000
 23fc198:	3ff00000 	.word	0x3ff00000
 23fc19c:	0003988e 	.word	0x0003988e
 23fc1a0:	000bb679 	.word	0x000bb679
 23fc1a4:	40080000 	.word	0x40080000
 23fc1a8:	2300      	movs	r3, #0
 23fc1aa:	4620      	mov	r0, r4
 23fc1ac:	4629      	mov	r1, r5
 23fc1ae:	e9cd 4500 	strd	r4, r5, [sp]
 23fc1b2:	9300      	str	r3, [sp, #0]
 23fc1b4:	e9dd 8900 	ldrd	r8, r9, [sp]
 23fc1b8:	4642      	mov	r2, r8
 23fc1ba:	464b      	mov	r3, r9
 23fc1bc:	f7f6 fcb8 	bl	23f2b30 <__aeabi_dsub>
 23fc1c0:	465b      	mov	r3, fp
 23fc1c2:	4652      	mov	r2, sl
 23fc1c4:	f7f6 fe6c 	bl	23f2ea0 <__aeabi_dmul>
 23fc1c8:	4606      	mov	r6, r0
 23fc1ca:	460f      	mov	r7, r1
 23fc1cc:	4622      	mov	r2, r4
 23fc1ce:	462b      	mov	r3, r5
 23fc1d0:	ec51 0b18 	vmov	r0, r1, d8
 23fc1d4:	f7f6 fe64 	bl	23f2ea0 <__aeabi_dmul>
 23fc1d8:	4602      	mov	r2, r0
 23fc1da:	460b      	mov	r3, r1
 23fc1dc:	4630      	mov	r0, r6
 23fc1de:	4639      	mov	r1, r7
 23fc1e0:	f7f6 fca8 	bl	23f2b34 <__adddf3>
 23fc1e4:	4642      	mov	r2, r8
 23fc1e6:	4604      	mov	r4, r0
 23fc1e8:	460d      	mov	r5, r1
 23fc1ea:	464b      	mov	r3, r9
 23fc1ec:	4659      	mov	r1, fp
 23fc1ee:	4650      	mov	r0, sl
 23fc1f0:	46a0      	mov	r8, r4
 23fc1f2:	f7f6 fe55 	bl	23f2ea0 <__aeabi_dmul>
 23fc1f6:	4606      	mov	r6, r0
 23fc1f8:	460f      	mov	r7, r1
 23fc1fa:	4620      	mov	r0, r4
 23fc1fc:	4629      	mov	r1, r5
 23fc1fe:	4632      	mov	r2, r6
 23fc200:	463b      	mov	r3, r7
 23fc202:	46a9      	mov	r9, r5
 23fc204:	f7f6 fc96 	bl	23f2b34 <__adddf3>
 23fc208:	4bd5      	ldr	r3, [pc, #852]	; (23fc560 <__ieee754_pow+0x910>)
 23fc20a:	4604      	mov	r4, r0
 23fc20c:	460d      	mov	r5, r1
 23fc20e:	4299      	cmp	r1, r3
 23fc210:	468b      	mov	fp, r1
 23fc212:	f340 813b 	ble.w	23fc48c <__ieee754_pow+0x83c>
 23fc216:	4bd3      	ldr	r3, [pc, #844]	; (23fc564 <__ieee754_pow+0x914>)
 23fc218:	440b      	add	r3, r1
 23fc21a:	4303      	orrs	r3, r0
 23fc21c:	f040 8235 	bne.w	23fc68a <__ieee754_pow+0xa3a>
 23fc220:	4640      	mov	r0, r8
 23fc222:	4649      	mov	r1, r9
 23fc224:	a3b6      	add	r3, pc, #728	; (adr r3, 23fc500 <__ieee754_pow+0x8b0>)
 23fc226:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc22a:	f7f6 fc83 	bl	23f2b34 <__adddf3>
 23fc22e:	4632      	mov	r2, r6
 23fc230:	463b      	mov	r3, r7
 23fc232:	ec41 0b18 	vmov	d8, r0, r1
 23fc236:	4620      	mov	r0, r4
 23fc238:	4629      	mov	r1, r5
 23fc23a:	f7f6 fc79 	bl	23f2b30 <__aeabi_dsub>
 23fc23e:	4602      	mov	r2, r0
 23fc240:	460b      	mov	r3, r1
 23fc242:	ec51 0b18 	vmov	r0, r1, d8
 23fc246:	f7f7 f8bb 	bl	23f33c0 <__aeabi_dcmpgt>
 23fc24a:	2800      	cmp	r0, #0
 23fc24c:	f040 821d 	bne.w	23fc68a <__ieee754_pow+0xa3a>
 23fc250:	f3cb 530a 	ubfx	r3, fp, #20, #11
 23fc254:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 23fc258:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 23fc25c:	4cc2      	ldr	r4, [pc, #776]	; (23fc568 <__ieee754_pow+0x918>)
 23fc25e:	f1bb 0f00 	cmp.w	fp, #0
 23fc262:	fa42 f303 	asr.w	r3, r2, r3
 23fc266:	f04f 0000 	mov.w	r0, #0
 23fc26a:	445b      	add	r3, fp
 23fc26c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 23fc270:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 23fc274:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 23fc278:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 23fc27c:	fa44 f402 	asr.w	r4, r4, r2
 23fc280:	f1c2 0214 	rsb	r2, r2, #20
 23fc284:	ea23 0104 	bic.w	r1, r3, r4
 23fc288:	fa4a fa02 	asr.w	sl, sl, r2
 23fc28c:	4602      	mov	r2, r0
 23fc28e:	4630      	mov	r0, r6
 23fc290:	460b      	mov	r3, r1
 23fc292:	bfb8      	it	lt
 23fc294:	f1ca 0a00 	rsblt	sl, sl, #0
 23fc298:	4639      	mov	r1, r7
 23fc29a:	f7f6 fc49 	bl	23f2b30 <__aeabi_dsub>
 23fc29e:	4602      	mov	r2, r0
 23fc2a0:	460b      	mov	r3, r1
 23fc2a2:	4606      	mov	r6, r0
 23fc2a4:	460f      	mov	r7, r1
 23fc2a6:	4640      	mov	r0, r8
 23fc2a8:	4649      	mov	r1, r9
 23fc2aa:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
 23fc2ae:	f7f6 fc41 	bl	23f2b34 <__adddf3>
 23fc2b2:	460d      	mov	r5, r1
 23fc2b4:	2400      	movs	r4, #0
 23fc2b6:	4629      	mov	r1, r5
 23fc2b8:	a393      	add	r3, pc, #588	; (adr r3, 23fc508 <__ieee754_pow+0x8b8>)
 23fc2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc2be:	4620      	mov	r0, r4
 23fc2c0:	f7f6 fdee 	bl	23f2ea0 <__aeabi_dmul>
 23fc2c4:	4632      	mov	r2, r6
 23fc2c6:	463b      	mov	r3, r7
 23fc2c8:	4606      	mov	r6, r0
 23fc2ca:	460f      	mov	r7, r1
 23fc2cc:	4620      	mov	r0, r4
 23fc2ce:	4629      	mov	r1, r5
 23fc2d0:	f7f6 fc2e 	bl	23f2b30 <__aeabi_dsub>
 23fc2d4:	4602      	mov	r2, r0
 23fc2d6:	460b      	mov	r3, r1
 23fc2d8:	4640      	mov	r0, r8
 23fc2da:	4649      	mov	r1, r9
 23fc2dc:	f7f6 fc28 	bl	23f2b30 <__aeabi_dsub>
 23fc2e0:	a38b      	add	r3, pc, #556	; (adr r3, 23fc510 <__ieee754_pow+0x8c0>)
 23fc2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc2e6:	f7f6 fddb 	bl	23f2ea0 <__aeabi_dmul>
 23fc2ea:	4680      	mov	r8, r0
 23fc2ec:	4689      	mov	r9, r1
 23fc2ee:	4620      	mov	r0, r4
 23fc2f0:	4629      	mov	r1, r5
 23fc2f2:	a389      	add	r3, pc, #548	; (adr r3, 23fc518 <__ieee754_pow+0x8c8>)
 23fc2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc2f8:	f7f6 fdd2 	bl	23f2ea0 <__aeabi_dmul>
 23fc2fc:	4602      	mov	r2, r0
 23fc2fe:	460b      	mov	r3, r1
 23fc300:	4640      	mov	r0, r8
 23fc302:	4649      	mov	r1, r9
 23fc304:	f7f6 fc16 	bl	23f2b34 <__adddf3>
 23fc308:	4680      	mov	r8, r0
 23fc30a:	4689      	mov	r9, r1
 23fc30c:	4630      	mov	r0, r6
 23fc30e:	4642      	mov	r2, r8
 23fc310:	4639      	mov	r1, r7
 23fc312:	464b      	mov	r3, r9
 23fc314:	f7f6 fc0e 	bl	23f2b34 <__adddf3>
 23fc318:	4632      	mov	r2, r6
 23fc31a:	4604      	mov	r4, r0
 23fc31c:	460d      	mov	r5, r1
 23fc31e:	463b      	mov	r3, r7
 23fc320:	f7f6 fc06 	bl	23f2b30 <__aeabi_dsub>
 23fc324:	4602      	mov	r2, r0
 23fc326:	460b      	mov	r3, r1
 23fc328:	4640      	mov	r0, r8
 23fc32a:	4649      	mov	r1, r9
 23fc32c:	f7f6 fc00 	bl	23f2b30 <__aeabi_dsub>
 23fc330:	4622      	mov	r2, r4
 23fc332:	4680      	mov	r8, r0
 23fc334:	4689      	mov	r9, r1
 23fc336:	462b      	mov	r3, r5
 23fc338:	4620      	mov	r0, r4
 23fc33a:	4629      	mov	r1, r5
 23fc33c:	f7f6 fdb0 	bl	23f2ea0 <__aeabi_dmul>
 23fc340:	4606      	mov	r6, r0
 23fc342:	460f      	mov	r7, r1
 23fc344:	a376      	add	r3, pc, #472	; (adr r3, 23fc520 <__ieee754_pow+0x8d0>)
 23fc346:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc34a:	f7f6 fda9 	bl	23f2ea0 <__aeabi_dmul>
 23fc34e:	a376      	add	r3, pc, #472	; (adr r3, 23fc528 <__ieee754_pow+0x8d8>)
 23fc350:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc354:	f7f6 fbec 	bl	23f2b30 <__aeabi_dsub>
 23fc358:	4632      	mov	r2, r6
 23fc35a:	463b      	mov	r3, r7
 23fc35c:	f7f6 fda0 	bl	23f2ea0 <__aeabi_dmul>
 23fc360:	a373      	add	r3, pc, #460	; (adr r3, 23fc530 <__ieee754_pow+0x8e0>)
 23fc362:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc366:	f7f6 fbe5 	bl	23f2b34 <__adddf3>
 23fc36a:	4632      	mov	r2, r6
 23fc36c:	463b      	mov	r3, r7
 23fc36e:	f7f6 fd97 	bl	23f2ea0 <__aeabi_dmul>
 23fc372:	a371      	add	r3, pc, #452	; (adr r3, 23fc538 <__ieee754_pow+0x8e8>)
 23fc374:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc378:	f7f6 fbda 	bl	23f2b30 <__aeabi_dsub>
 23fc37c:	4632      	mov	r2, r6
 23fc37e:	463b      	mov	r3, r7
 23fc380:	f7f6 fd8e 	bl	23f2ea0 <__aeabi_dmul>
 23fc384:	a36e      	add	r3, pc, #440	; (adr r3, 23fc540 <__ieee754_pow+0x8f0>)
 23fc386:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc38a:	f7f6 fbd3 	bl	23f2b34 <__adddf3>
 23fc38e:	4632      	mov	r2, r6
 23fc390:	463b      	mov	r3, r7
 23fc392:	f7f6 fd85 	bl	23f2ea0 <__aeabi_dmul>
 23fc396:	4602      	mov	r2, r0
 23fc398:	460b      	mov	r3, r1
 23fc39a:	4620      	mov	r0, r4
 23fc39c:	4629      	mov	r1, r5
 23fc39e:	f7f6 fbc7 	bl	23f2b30 <__aeabi_dsub>
 23fc3a2:	4606      	mov	r6, r0
 23fc3a4:	460f      	mov	r7, r1
 23fc3a6:	4620      	mov	r0, r4
 23fc3a8:	4632      	mov	r2, r6
 23fc3aa:	4629      	mov	r1, r5
 23fc3ac:	463b      	mov	r3, r7
 23fc3ae:	f7f6 fd77 	bl	23f2ea0 <__aeabi_dmul>
 23fc3b2:	2200      	movs	r2, #0
 23fc3b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23fc3b8:	ec41 0b18 	vmov	d8, r0, r1
 23fc3bc:	4630      	mov	r0, r6
 23fc3be:	4639      	mov	r1, r7
 23fc3c0:	f7f6 fbb6 	bl	23f2b30 <__aeabi_dsub>
 23fc3c4:	4602      	mov	r2, r0
 23fc3c6:	460b      	mov	r3, r1
 23fc3c8:	ec51 0b18 	vmov	r0, r1, d8
 23fc3cc:	f7f6 fe92 	bl	23f30f4 <__aeabi_ddiv>
 23fc3d0:	4642      	mov	r2, r8
 23fc3d2:	4606      	mov	r6, r0
 23fc3d4:	460f      	mov	r7, r1
 23fc3d6:	464b      	mov	r3, r9
 23fc3d8:	4620      	mov	r0, r4
 23fc3da:	4629      	mov	r1, r5
 23fc3dc:	f7f6 fd60 	bl	23f2ea0 <__aeabi_dmul>
 23fc3e0:	4642      	mov	r2, r8
 23fc3e2:	464b      	mov	r3, r9
 23fc3e4:	f7f6 fba6 	bl	23f2b34 <__adddf3>
 23fc3e8:	4602      	mov	r2, r0
 23fc3ea:	460b      	mov	r3, r1
 23fc3ec:	4630      	mov	r0, r6
 23fc3ee:	4639      	mov	r1, r7
 23fc3f0:	f7f6 fb9e 	bl	23f2b30 <__aeabi_dsub>
 23fc3f4:	4622      	mov	r2, r4
 23fc3f6:	462b      	mov	r3, r5
 23fc3f8:	f7f6 fb9a 	bl	23f2b30 <__aeabi_dsub>
 23fc3fc:	4602      	mov	r2, r0
 23fc3fe:	460b      	mov	r3, r1
 23fc400:	2000      	movs	r0, #0
 23fc402:	495a      	ldr	r1, [pc, #360]	; (23fc56c <__ieee754_pow+0x91c>)
 23fc404:	f7f6 fb94 	bl	23f2b30 <__aeabi_dsub>
 23fc408:	448b      	add	fp, r1
 23fc40a:	4602      	mov	r2, r0
 23fc40c:	460b      	mov	r3, r1
 23fc40e:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
 23fc412:	f2c0 816c 	blt.w	23fc6ee <__ieee754_pow+0xa9e>
 23fc416:	4659      	mov	r1, fp
 23fc418:	ec53 2b19 	vmov	r2, r3, d9
 23fc41c:	f7f6 fd40 	bl	23f2ea0 <__aeabi_dmul>
 23fc420:	ec41 0b10 	vmov	d0, r0, r1
 23fc424:	e442      	b.n	23fbcac <__ieee754_pow+0x5c>
 23fc426:	ec47 6b10 	vmov	d0, r6, r7
 23fc42a:	9200      	str	r2, [sp, #0]
 23fc42c:	f000 fa64 	bl	23fc8f8 <fabs>
 23fc430:	9a00      	ldr	r2, [sp, #0]
 23fc432:	2a00      	cmp	r2, #0
 23fc434:	f47f acbd 	bne.w	23fbdb2 <__ieee754_pow+0x162>
 23fc438:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23fc43c:	4a4b      	ldr	r2, [pc, #300]	; (23fc56c <__ieee754_pow+0x91c>)
 23fc43e:	4293      	cmp	r3, r2
 23fc440:	d003      	beq.n	23fc44a <__ieee754_pow+0x7fa>
 23fc442:	f1b8 0f00 	cmp.w	r8, #0
 23fc446:	f47f acb4 	bne.w	23fbdb2 <__ieee754_pow+0x162>
 23fc44a:	2300      	movs	r3, #0
 23fc44c:	9300      	str	r3, [sp, #0]
 23fc44e:	f1bb 0f00 	cmp.w	fp, #0
 23fc452:	da07      	bge.n	23fc464 <__ieee754_pow+0x814>
 23fc454:	2000      	movs	r0, #0
 23fc456:	4945      	ldr	r1, [pc, #276]	; (23fc56c <__ieee754_pow+0x91c>)
 23fc458:	ec53 2b10 	vmov	r2, r3, d0
 23fc45c:	f7f6 fe4a 	bl	23f30f4 <__aeabi_ddiv>
 23fc460:	ec41 0b10 	vmov	d0, r0, r1
 23fc464:	f1b9 0f00 	cmp.w	r9, #0
 23fc468:	f6bf ac20 	bge.w	23fbcac <__ieee754_pow+0x5c>
 23fc46c:	4b40      	ldr	r3, [pc, #256]	; (23fc570 <__ieee754_pow+0x920>)
 23fc46e:	9a00      	ldr	r2, [sp, #0]
 23fc470:	4443      	add	r3, r8
 23fc472:	4313      	orrs	r3, r2
 23fc474:	f040 812d 	bne.w	23fc6d2 <__ieee754_pow+0xa82>
 23fc478:	ec53 2b10 	vmov	r2, r3, d0
 23fc47c:	e49b      	b.n	23fbdb6 <__ieee754_pow+0x166>
 23fc47e:	f1bb 0f00 	cmp.w	fp, #0
 23fc482:	f6ff ac57 	blt.w	23fbd34 <__ieee754_pow+0xe4>
 23fc486:	ed9f 0b30 	vldr	d0, [pc, #192]	; 23fc548 <__ieee754_pow+0x8f8>
 23fc48a:	e40f      	b.n	23fbcac <__ieee754_pow+0x5c>
 23fc48c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fc490:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 23fc578 <__ieee754_pow+0x928>
 23fc494:	4563      	cmp	r3, ip
 23fc496:	f340 80f0 	ble.w	23fc67a <__ieee754_pow+0xa2a>
 23fc49a:	4b36      	ldr	r3, [pc, #216]	; (23fc574 <__ieee754_pow+0x924>)
 23fc49c:	440b      	add	r3, r1
 23fc49e:	4303      	orrs	r3, r0
 23fc4a0:	d10a      	bne.n	23fc4b8 <__ieee754_pow+0x868>
 23fc4a2:	4632      	mov	r2, r6
 23fc4a4:	463b      	mov	r3, r7
 23fc4a6:	f7f6 fb43 	bl	23f2b30 <__aeabi_dsub>
 23fc4aa:	4642      	mov	r2, r8
 23fc4ac:	464b      	mov	r3, r9
 23fc4ae:	f7f6 ff7d 	bl	23f33ac <__aeabi_dcmpge>
 23fc4b2:	2800      	cmp	r0, #0
 23fc4b4:	f43f aecc 	beq.w	23fc250 <__ieee754_pow+0x600>
 23fc4b8:	a325      	add	r3, pc, #148	; (adr r3, 23fc550 <__ieee754_pow+0x900>)
 23fc4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc4be:	ec51 0b19 	vmov	r0, r1, d9
 23fc4c2:	f7f6 fced 	bl	23f2ea0 <__aeabi_dmul>
 23fc4c6:	a322      	add	r3, pc, #136	; (adr r3, 23fc550 <__ieee754_pow+0x900>)
 23fc4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc4cc:	f7f6 fce8 	bl	23f2ea0 <__aeabi_dmul>
 23fc4d0:	ec41 0b10 	vmov	d0, r0, r1
 23fc4d4:	f7ff bbea 	b.w	23fbcac <__ieee754_pow+0x5c>
 23fc4d8:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 23fc558 <__ieee754_pow+0x908>
 23fc4dc:	eeb0 9a47 	vmov.f32	s18, s14
 23fc4e0:	eef0 9a67 	vmov.f32	s19, s15
 23fc4e4:	e660      	b.n	23fc1a8 <__ieee754_pow+0x558>
 23fc4e6:	f1bb 0f00 	cmp.w	fp, #0
 23fc4ea:	dacc      	bge.n	23fc486 <__ieee754_pow+0x836>
 23fc4ec:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23fc4f0:	ee00 4a10 	vmov	s0, r4
 23fc4f4:	ee00 3a90 	vmov	s1, r3
 23fc4f8:	f7ff bbd8 	b.w	23fbcac <__ieee754_pow+0x5c>
 23fc4fc:	f3af 8000 	nop.w
 23fc500:	652b82fe 	.word	0x652b82fe
 23fc504:	3c971547 	.word	0x3c971547
 23fc508:	00000000 	.word	0x00000000
 23fc50c:	3fe62e43 	.word	0x3fe62e43
 23fc510:	fefa39ef 	.word	0xfefa39ef
 23fc514:	3fe62e42 	.word	0x3fe62e42
 23fc518:	0ca86c39 	.word	0x0ca86c39
 23fc51c:	be205c61 	.word	0xbe205c61
 23fc520:	72bea4d0 	.word	0x72bea4d0
 23fc524:	3e663769 	.word	0x3e663769
 23fc528:	c5d26bf1 	.word	0xc5d26bf1
 23fc52c:	3ebbbd41 	.word	0x3ebbbd41
 23fc530:	af25de2c 	.word	0xaf25de2c
 23fc534:	3f11566a 	.word	0x3f11566a
 23fc538:	16bebd93 	.word	0x16bebd93
 23fc53c:	3f66c16c 	.word	0x3f66c16c
 23fc540:	5555553e 	.word	0x5555553e
 23fc544:	3fc55555 	.word	0x3fc55555
	...
 23fc550:	c2f8f359 	.word	0xc2f8f359
 23fc554:	01a56e1f 	.word	0x01a56e1f
 23fc558:	00000000 	.word	0x00000000
 23fc55c:	3ff00000 	.word	0x3ff00000
 23fc560:	408fffff 	.word	0x408fffff
 23fc564:	bf700000 	.word	0xbf700000
 23fc568:	000fffff 	.word	0x000fffff
 23fc56c:	3ff00000 	.word	0x3ff00000
 23fc570:	c0100000 	.word	0xc0100000
 23fc574:	3f6f3400 	.word	0x3f6f3400
 23fc578:	4090cbff 	.word	0x4090cbff
 23fc57c:	4598      	cmp	r8, r3
 23fc57e:	f6ff af7e 	blt.w	23fc47e <__ieee754_pow+0x82e>
 23fc582:	4b79      	ldr	r3, [pc, #484]	; (23fc768 <__ieee754_pow+0xb18>)
 23fc584:	4598      	cmp	r8, r3
 23fc586:	f73f abd1 	bgt.w	23fbd2c <__ieee754_pow+0xdc>
 23fc58a:	2200      	movs	r2, #0
 23fc58c:	4b76      	ldr	r3, [pc, #472]	; (23fc768 <__ieee754_pow+0xb18>)
 23fc58e:	ec51 0b10 	vmov	r0, r1, d0
 23fc592:	f7f6 facd 	bl	23f2b30 <__aeabi_dsub>
 23fc596:	4606      	mov	r6, r0
 23fc598:	460f      	mov	r7, r1
 23fc59a:	a363      	add	r3, pc, #396	; (adr r3, 23fc728 <__ieee754_pow+0xad8>)
 23fc59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc5a0:	f7f6 fc7e 	bl	23f2ea0 <__aeabi_dmul>
 23fc5a4:	4682      	mov	sl, r0
 23fc5a6:	468b      	mov	fp, r1
 23fc5a8:	4630      	mov	r0, r6
 23fc5aa:	4639      	mov	r1, r7
 23fc5ac:	a360      	add	r3, pc, #384	; (adr r3, 23fc730 <__ieee754_pow+0xae0>)
 23fc5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc5b2:	f7f6 fc75 	bl	23f2ea0 <__aeabi_dmul>
 23fc5b6:	2200      	movs	r2, #0
 23fc5b8:	4b6c      	ldr	r3, [pc, #432]	; (23fc76c <__ieee754_pow+0xb1c>)
 23fc5ba:	ec41 0b18 	vmov	d8, r0, r1
 23fc5be:	4630      	mov	r0, r6
 23fc5c0:	4639      	mov	r1, r7
 23fc5c2:	f7f6 fc6d 	bl	23f2ea0 <__aeabi_dmul>
 23fc5c6:	4602      	mov	r2, r0
 23fc5c8:	460b      	mov	r3, r1
 23fc5ca:	a15b      	add	r1, pc, #364	; (adr r1, 23fc738 <__ieee754_pow+0xae8>)
 23fc5cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fc5d0:	f7f6 faae 	bl	23f2b30 <__aeabi_dsub>
 23fc5d4:	4632      	mov	r2, r6
 23fc5d6:	463b      	mov	r3, r7
 23fc5d8:	f7f6 fc62 	bl	23f2ea0 <__aeabi_dmul>
 23fc5dc:	4602      	mov	r2, r0
 23fc5de:	460b      	mov	r3, r1
 23fc5e0:	2000      	movs	r0, #0
 23fc5e2:	4963      	ldr	r1, [pc, #396]	; (23fc770 <__ieee754_pow+0xb20>)
 23fc5e4:	f7f6 faa4 	bl	23f2b30 <__aeabi_dsub>
 23fc5e8:	4680      	mov	r8, r0
 23fc5ea:	4689      	mov	r9, r1
 23fc5ec:	4632      	mov	r2, r6
 23fc5ee:	463b      	mov	r3, r7
 23fc5f0:	4630      	mov	r0, r6
 23fc5f2:	4639      	mov	r1, r7
 23fc5f4:	f7f6 fc54 	bl	23f2ea0 <__aeabi_dmul>
 23fc5f8:	4602      	mov	r2, r0
 23fc5fa:	460b      	mov	r3, r1
 23fc5fc:	4640      	mov	r0, r8
 23fc5fe:	4649      	mov	r1, r9
 23fc600:	f7f6 fc4e 	bl	23f2ea0 <__aeabi_dmul>
 23fc604:	a34e      	add	r3, pc, #312	; (adr r3, 23fc740 <__ieee754_pow+0xaf0>)
 23fc606:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc60a:	f7f6 fc49 	bl	23f2ea0 <__aeabi_dmul>
 23fc60e:	4602      	mov	r2, r0
 23fc610:	460b      	mov	r3, r1
 23fc612:	ec51 0b18 	vmov	r0, r1, d8
 23fc616:	f7f6 fa8b 	bl	23f2b30 <__aeabi_dsub>
 23fc61a:	4606      	mov	r6, r0
 23fc61c:	460f      	mov	r7, r1
 23fc61e:	4650      	mov	r0, sl
 23fc620:	4659      	mov	r1, fp
 23fc622:	4632      	mov	r2, r6
 23fc624:	463b      	mov	r3, r7
 23fc626:	f7f6 fa85 	bl	23f2b34 <__adddf3>
 23fc62a:	2000      	movs	r0, #0
 23fc62c:	4652      	mov	r2, sl
 23fc62e:	465b      	mov	r3, fp
 23fc630:	4682      	mov	sl, r0
 23fc632:	468b      	mov	fp, r1
 23fc634:	e564      	b.n	23fc100 <__ieee754_pow+0x4b0>
 23fc636:	4632      	mov	r2, r6
 23fc638:	463b      	mov	r3, r7
 23fc63a:	4630      	mov	r0, r6
 23fc63c:	4639      	mov	r1, r7
 23fc63e:	f7f6 fc2f 	bl	23f2ea0 <__aeabi_dmul>
 23fc642:	ec41 0b10 	vmov	d0, r0, r1
 23fc646:	f7ff bb31 	b.w	23fbcac <__ieee754_pow+0x5c>
 23fc64a:	2000      	movs	r0, #0
 23fc64c:	4946      	ldr	r1, [pc, #280]	; (23fc768 <__ieee754_pow+0xb18>)
 23fc64e:	4632      	mov	r2, r6
 23fc650:	463b      	mov	r3, r7
 23fc652:	f7f6 fd4f 	bl	23f30f4 <__aeabi_ddiv>
 23fc656:	ec41 0b10 	vmov	d0, r0, r1
 23fc65a:	f7ff bb27 	b.w	23fbcac <__ieee754_pow+0x5c>
 23fc65e:	2b00      	cmp	r3, #0
 23fc660:	f47f aee1 	bne.w	23fc426 <__ieee754_pow+0x7d6>
 23fc664:	f1c1 0114 	rsb	r1, r1, #20
 23fc668:	fa4a f001 	asr.w	r0, sl, r1
 23fc66c:	fa00 f101 	lsl.w	r1, r0, r1
 23fc670:	4551      	cmp	r1, sl
 23fc672:	d04d      	beq.n	23fc710 <__ieee754_pow+0xac0>
 23fc674:	9300      	str	r3, [sp, #0]
 23fc676:	f7ff bb27 	b.w	23fbcc8 <__ieee754_pow+0x78>
 23fc67a:	4a3d      	ldr	r2, [pc, #244]	; (23fc770 <__ieee754_pow+0xb20>)
 23fc67c:	4293      	cmp	r3, r2
 23fc67e:	dc4e      	bgt.n	23fc71e <__ieee754_pow+0xace>
 23fc680:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fc684:	4693      	mov	fp, r2
 23fc686:	4692      	mov	sl, r2
 23fc688:	e614      	b.n	23fc2b4 <__ieee754_pow+0x664>
 23fc68a:	a32f      	add	r3, pc, #188	; (adr r3, 23fc748 <__ieee754_pow+0xaf8>)
 23fc68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc690:	ec51 0b19 	vmov	r0, r1, d9
 23fc694:	f7f6 fc04 	bl	23f2ea0 <__aeabi_dmul>
 23fc698:	a32b      	add	r3, pc, #172	; (adr r3, 23fc748 <__ieee754_pow+0xaf8>)
 23fc69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc69e:	f7f6 fbff 	bl	23f2ea0 <__aeabi_dmul>
 23fc6a2:	ec41 0b10 	vmov	d0, r0, r1
 23fc6a6:	f7ff bb01 	b.w	23fbcac <__ieee754_pow+0x5c>
 23fc6aa:	ed9f 7b29 	vldr	d7, [pc, #164]	; 23fc750 <__ieee754_pow+0xb00>
 23fc6ae:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 23fc6b2:	eeb0 da47 	vmov.f32	s26, s14
 23fc6b6:	eef0 da67 	vmov.f32	s27, s15
 23fc6ba:	ed9f 7b27 	vldr	d7, [pc, #156]	; 23fc758 <__ieee754_pow+0xb08>
 23fc6be:	eeb0 ca47 	vmov.f32	s24, s14
 23fc6c2:	eef0 ca67 	vmov.f32	s25, s15
 23fc6c6:	ed9f 7b26 	vldr	d7, [pc, #152]	; 23fc760 <__ieee754_pow+0xb10>
 23fc6ca:	ec51 0b17 	vmov	r0, r1, d7
 23fc6ce:	f7ff bbcc 	b.w	23fbe6a <__ieee754_pow+0x21a>
 23fc6d2:	9b00      	ldr	r3, [sp, #0]
 23fc6d4:	2b01      	cmp	r3, #1
 23fc6d6:	f47f aae9 	bne.w	23fbcac <__ieee754_pow+0x5c>
 23fc6da:	ee10 1a90 	vmov	r1, s1
 23fc6de:	ee10 2a10 	vmov	r2, s0
 23fc6e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fc6e6:	ec43 2b10 	vmov	d0, r2, r3
 23fc6ea:	f7ff badf 	b.w	23fbcac <__ieee754_pow+0x5c>
 23fc6ee:	4650      	mov	r0, sl
 23fc6f0:	ec43 2b10 	vmov	d0, r2, r3
 23fc6f4:	f000 f9bc 	bl	23fca70 <scalbn>
 23fc6f8:	ec51 0b10 	vmov	r0, r1, d0
 23fc6fc:	e68c      	b.n	23fc418 <__ieee754_pow+0x7c8>
 23fc6fe:	ec47 6b10 	vmov	d0, r6, r7
 23fc702:	b007      	add	sp, #28
 23fc704:	ecbd 8b0c 	vpop	{d8-d13}
 23fc708:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc70c:	f000 b832 	b.w	23fc774 <__ieee754_sqrt>
 23fc710:	f000 0001 	and.w	r0, r0, #1
 23fc714:	f1c0 0302 	rsb	r3, r0, #2
 23fc718:	9300      	str	r3, [sp, #0]
 23fc71a:	f7ff bad5 	b.w	23fbcc8 <__ieee754_pow+0x78>
 23fc71e:	151b      	asrs	r3, r3, #20
 23fc720:	e598      	b.n	23fc254 <__ieee754_pow+0x604>
 23fc722:	bf00      	nop
 23fc724:	f3af 8000 	nop.w
 23fc728:	60000000 	.word	0x60000000
 23fc72c:	3ff71547 	.word	0x3ff71547
 23fc730:	f85ddf44 	.word	0xf85ddf44
 23fc734:	3e54ae0b 	.word	0x3e54ae0b
 23fc738:	55555555 	.word	0x55555555
 23fc73c:	3fd55555 	.word	0x3fd55555
 23fc740:	652b82fe 	.word	0x652b82fe
 23fc744:	3ff71547 	.word	0x3ff71547
 23fc748:	8800759c 	.word	0x8800759c
 23fc74c:	7e37e43c 	.word	0x7e37e43c
 23fc750:	40000000 	.word	0x40000000
 23fc754:	3fe2b803 	.word	0x3fe2b803
 23fc758:	43cfd006 	.word	0x43cfd006
 23fc75c:	3e4cfdeb 	.word	0x3e4cfdeb
 23fc760:	00000000 	.word	0x00000000
 23fc764:	3ff80000 	.word	0x3ff80000
 23fc768:	3ff00000 	.word	0x3ff00000
 23fc76c:	3fd00000 	.word	0x3fd00000
 23fc770:	3fe00000 	.word	0x3fe00000

023fc774 <__ieee754_sqrt>:
 23fc774:	495e      	ldr	r1, [pc, #376]	; (23fc8f0 <__ieee754_sqrt+0x17c>)
 23fc776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fc77a:	ec55 4b10 	vmov	r4, r5, d0
 23fc77e:	43a9      	bics	r1, r5
 23fc780:	f000 8094 	beq.w	23fc8ac <__ieee754_sqrt+0x138>
 23fc784:	2d00      	cmp	r5, #0
 23fc786:	462b      	mov	r3, r5
 23fc788:	ee10 2a10 	vmov	r2, s0
 23fc78c:	dd5a      	ble.n	23fc844 <__ieee754_sqrt+0xd0>
 23fc78e:	1528      	asrs	r0, r5, #20
 23fc790:	d067      	beq.n	23fc862 <__ieee754_sqrt+0xee>
 23fc792:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23fc796:	07c1      	lsls	r1, r0, #31
 23fc798:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 23fc79c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fc7a0:	d403      	bmi.n	23fc7aa <__ieee754_sqrt+0x36>
 23fc7a2:	005b      	lsls	r3, r3, #1
 23fc7a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23fc7a8:	0052      	lsls	r2, r2, #1
 23fc7aa:	0fd1      	lsrs	r1, r2, #31
 23fc7ac:	2600      	movs	r6, #0
 23fc7ae:	107f      	asrs	r7, r7, #1
 23fc7b0:	f04f 0c16 	mov.w	ip, #22
 23fc7b4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 23fc7b8:	46b6      	mov	lr, r6
 23fc7ba:	0052      	lsls	r2, r2, #1
 23fc7bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 23fc7c0:	eb0e 0001 	add.w	r0, lr, r1
 23fc7c4:	4298      	cmp	r0, r3
 23fc7c6:	dc03      	bgt.n	23fc7d0 <__ieee754_sqrt+0x5c>
 23fc7c8:	1a1b      	subs	r3, r3, r0
 23fc7ca:	eb00 0e01 	add.w	lr, r0, r1
 23fc7ce:	440e      	add	r6, r1
 23fc7d0:	005b      	lsls	r3, r3, #1
 23fc7d2:	f1bc 0c01 	subs.w	ip, ip, #1
 23fc7d6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23fc7da:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23fc7de:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23fc7e2:	d1ed      	bne.n	23fc7c0 <__ieee754_sqrt+0x4c>
 23fc7e4:	4665      	mov	r5, ip
 23fc7e6:	2420      	movs	r4, #32
 23fc7e8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 23fc7ec:	e014      	b.n	23fc818 <__ieee754_sqrt+0xa4>
 23fc7ee:	d10a      	bne.n	23fc806 <__ieee754_sqrt+0x92>
 23fc7f0:	4290      	cmp	r0, r2
 23fc7f2:	d808      	bhi.n	23fc806 <__ieee754_sqrt+0x92>
 23fc7f4:	2800      	cmp	r0, #0
 23fc7f6:	eb00 0c01 	add.w	ip, r0, r1
 23fc7fa:	db1d      	blt.n	23fc838 <__ieee754_sqrt+0xc4>
 23fc7fc:	46f0      	mov	r8, lr
 23fc7fe:	2300      	movs	r3, #0
 23fc800:	1a12      	subs	r2, r2, r0
 23fc802:	440d      	add	r5, r1
 23fc804:	46c6      	mov	lr, r8
 23fc806:	0fd0      	lsrs	r0, r2, #31
 23fc808:	3c01      	subs	r4, #1
 23fc80a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23fc80e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 23fc812:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23fc816:	d033      	beq.n	23fc880 <__ieee754_sqrt+0x10c>
 23fc818:	4573      	cmp	r3, lr
 23fc81a:	eb01 000c 	add.w	r0, r1, ip
 23fc81e:	dde6      	ble.n	23fc7ee <__ieee754_sqrt+0x7a>
 23fc820:	2800      	cmp	r0, #0
 23fc822:	eb00 0c01 	add.w	ip, r0, r1
 23fc826:	db07      	blt.n	23fc838 <__ieee754_sqrt+0xc4>
 23fc828:	46f0      	mov	r8, lr
 23fc82a:	eba3 030e 	sub.w	r3, r3, lr
 23fc82e:	4290      	cmp	r0, r2
 23fc830:	bf88      	it	hi
 23fc832:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 23fc836:	e7e3      	b.n	23fc800 <__ieee754_sqrt+0x8c>
 23fc838:	f1bc 0f00 	cmp.w	ip, #0
 23fc83c:	dbf4      	blt.n	23fc828 <__ieee754_sqrt+0xb4>
 23fc83e:	f10e 0801 	add.w	r8, lr, #1
 23fc842:	e7f2      	b.n	23fc82a <__ieee754_sqrt+0xb6>
 23fc844:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 23fc848:	4321      	orrs	r1, r4
 23fc84a:	d028      	beq.n	23fc89e <__ieee754_sqrt+0x12a>
 23fc84c:	2d00      	cmp	r5, #0
 23fc84e:	d13d      	bne.n	23fc8cc <__ieee754_sqrt+0x158>
 23fc850:	4628      	mov	r0, r5
 23fc852:	0ad1      	lsrs	r1, r2, #11
 23fc854:	3815      	subs	r0, #21
 23fc856:	0552      	lsls	r2, r2, #21
 23fc858:	460b      	mov	r3, r1
 23fc85a:	2900      	cmp	r1, #0
 23fc85c:	d0f9      	beq.n	23fc852 <__ieee754_sqrt+0xde>
 23fc85e:	02cf      	lsls	r7, r1, #11
 23fc860:	d441      	bmi.n	23fc8e6 <__ieee754_sqrt+0x172>
 23fc862:	2400      	movs	r4, #0
 23fc864:	005b      	lsls	r3, r3, #1
 23fc866:	4625      	mov	r5, r4
 23fc868:	3401      	adds	r4, #1
 23fc86a:	02de      	lsls	r6, r3, #11
 23fc86c:	d5fa      	bpl.n	23fc864 <__ieee754_sqrt+0xf0>
 23fc86e:	4619      	mov	r1, r3
 23fc870:	4613      	mov	r3, r2
 23fc872:	40a2      	lsls	r2, r4
 23fc874:	f1c4 0420 	rsb	r4, r4, #32
 23fc878:	40e3      	lsrs	r3, r4
 23fc87a:	1b40      	subs	r0, r0, r5
 23fc87c:	430b      	orrs	r3, r1
 23fc87e:	e788      	b.n	23fc792 <__ieee754_sqrt+0x1e>
 23fc880:	4313      	orrs	r3, r2
 23fc882:	d10e      	bne.n	23fc8a2 <__ieee754_sqrt+0x12e>
 23fc884:	086c      	lsrs	r4, r5, #1
 23fc886:	07f3      	lsls	r3, r6, #31
 23fc888:	491a      	ldr	r1, [pc, #104]	; (23fc8f4 <__ieee754_sqrt+0x180>)
 23fc88a:	bf48      	it	mi
 23fc88c:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 23fc890:	eb01 0166 	add.w	r1, r1, r6, asr #1
 23fc894:	4622      	mov	r2, r4
 23fc896:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 23fc89a:	ec43 2b10 	vmov	d0, r2, r3
 23fc89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fc8a2:	1c6a      	adds	r2, r5, #1
 23fc8a4:	d01d      	beq.n	23fc8e2 <__ieee754_sqrt+0x16e>
 23fc8a6:	1c6c      	adds	r4, r5, #1
 23fc8a8:	0864      	lsrs	r4, r4, #1
 23fc8aa:	e7ec      	b.n	23fc886 <__ieee754_sqrt+0x112>
 23fc8ac:	ee10 2a10 	vmov	r2, s0
 23fc8b0:	462b      	mov	r3, r5
 23fc8b2:	ee10 0a10 	vmov	r0, s0
 23fc8b6:	4629      	mov	r1, r5
 23fc8b8:	f7f6 faf2 	bl	23f2ea0 <__aeabi_dmul>
 23fc8bc:	4622      	mov	r2, r4
 23fc8be:	462b      	mov	r3, r5
 23fc8c0:	f7f6 f938 	bl	23f2b34 <__adddf3>
 23fc8c4:	ec41 0b10 	vmov	d0, r0, r1
 23fc8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fc8cc:	4620      	mov	r0, r4
 23fc8ce:	4629      	mov	r1, r5
 23fc8d0:	f7f6 f92e 	bl	23f2b30 <__aeabi_dsub>
 23fc8d4:	4602      	mov	r2, r0
 23fc8d6:	460b      	mov	r3, r1
 23fc8d8:	f7f6 fc0c 	bl	23f30f4 <__aeabi_ddiv>
 23fc8dc:	ec41 0b10 	vmov	d0, r0, r1
 23fc8e0:	e7dd      	b.n	23fc89e <__ieee754_sqrt+0x12a>
 23fc8e2:	3601      	adds	r6, #1
 23fc8e4:	e7cf      	b.n	23fc886 <__ieee754_sqrt+0x112>
 23fc8e6:	4613      	mov	r3, r2
 23fc8e8:	2420      	movs	r4, #32
 23fc8ea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23fc8ee:	e7c3      	b.n	23fc878 <__ieee754_sqrt+0x104>
 23fc8f0:	7ff00000 	.word	0x7ff00000
 23fc8f4:	3fe00000 	.word	0x3fe00000

023fc8f8 <fabs>:
 23fc8f8:	ec51 0b10 	vmov	r0, r1, d0
 23fc8fc:	ee10 2a10 	vmov	r2, s0
 23fc900:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fc904:	ec43 2b10 	vmov	d0, r2, r3
 23fc908:	4770      	bx	lr
 23fc90a:	bf00      	nop

023fc90c <finite>:
 23fc90c:	b082      	sub	sp, #8
 23fc90e:	4805      	ldr	r0, [pc, #20]	; (23fc924 <finite+0x18>)
 23fc910:	ed8d 0b00 	vstr	d0, [sp]
 23fc914:	9b01      	ldr	r3, [sp, #4]
 23fc916:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 23fc91a:	4418      	add	r0, r3
 23fc91c:	0fc0      	lsrs	r0, r0, #31
 23fc91e:	b002      	add	sp, #8
 23fc920:	4770      	bx	lr
 23fc922:	bf00      	nop
 23fc924:	80100000 	.word	0x80100000

023fc928 <nan>:
 23fc928:	ed9f 0b01 	vldr	d0, [pc, #4]	; 23fc930 <nan+0x8>
 23fc92c:	4770      	bx	lr
 23fc92e:	bf00      	nop
 23fc930:	00000000 	.word	0x00000000
 23fc934:	7ff80000 	.word	0x7ff80000

023fc938 <rint>:
 23fc938:	ec53 2b10 	vmov	r2, r3, d0
 23fc93c:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
 23fc940:	ee10 0a10 	vmov	r0, s0
 23fc944:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
 23fc948:	2913      	cmp	r1, #19
 23fc94a:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc94c:	461c      	mov	r4, r3
 23fc94e:	b083      	sub	sp, #12
 23fc950:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
 23fc954:	dc3a      	bgt.n	23fc9cc <rint+0x94>
 23fc956:	2900      	cmp	r1, #0
 23fc958:	db30      	blt.n	23fc9bc <rint+0x84>
 23fc95a:	4d42      	ldr	r5, [pc, #264]	; (23fca64 <rint+0x12c>)
 23fc95c:	fa45 fc01 	asr.w	ip, r5, r1
 23fc960:	ea03 050c 	and.w	r5, r3, ip
 23fc964:	4315      	orrs	r5, r2
 23fc966:	d02d      	beq.n	23fc9c4 <rint+0x8c>
 23fc968:	ea03 035c 	and.w	r3, r3, ip, lsr #1
 23fc96c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 23fc970:	4318      	orrs	r0, r3
 23fc972:	d00c      	beq.n	23fc98e <rint+0x56>
 23fc974:	ea24 0c0c 	bic.w	ip, r4, ip
 23fc978:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 23fc97c:	2913      	cmp	r1, #19
 23fc97e:	fa44 f101 	asr.w	r1, r4, r1
 23fc982:	bf0c      	ite	eq
 23fc984:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 23fc988:	2000      	movne	r0, #0
 23fc98a:	ea4c 0401 	orr.w	r4, ip, r1
 23fc98e:	4936      	ldr	r1, [pc, #216]	; (23fca68 <rint+0x130>)
 23fc990:	4623      	mov	r3, r4
 23fc992:	4602      	mov	r2, r0
 23fc994:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
 23fc998:	e9de 4500 	ldrd	r4, r5, [lr]
 23fc99c:	4620      	mov	r0, r4
 23fc99e:	4629      	mov	r1, r5
 23fc9a0:	f7f6 f8c8 	bl	23f2b34 <__adddf3>
 23fc9a4:	4622      	mov	r2, r4
 23fc9a6:	462b      	mov	r3, r5
 23fc9a8:	e9cd 0100 	strd	r0, r1, [sp]
 23fc9ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fc9b0:	f7f6 f8be 	bl	23f2b30 <__aeabi_dsub>
 23fc9b4:	ec41 0b10 	vmov	d0, r0, r1
 23fc9b8:	b003      	add	sp, #12
 23fc9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fc9bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 23fc9c0:	4311      	orrs	r1, r2
 23fc9c2:	d124      	bne.n	23fca0e <rint+0xd6>
 23fc9c4:	ec43 2b10 	vmov	d0, r2, r3
 23fc9c8:	b003      	add	sp, #12
 23fc9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fc9cc:	2933      	cmp	r1, #51	; 0x33
 23fc9ce:	dd08      	ble.n	23fc9e2 <rint+0xaa>
 23fc9d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 23fc9d4:	d1f6      	bne.n	23fc9c4 <rint+0x8c>
 23fc9d6:	4619      	mov	r1, r3
 23fc9d8:	f7f6 f8ac 	bl	23f2b34 <__adddf3>
 23fc9dc:	ec41 0b10 	vmov	d0, r0, r1
 23fc9e0:	e7f2      	b.n	23fc9c8 <rint+0x90>
 23fc9e2:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 23fc9e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23fc9ea:	fa21 f10c 	lsr.w	r1, r1, ip
 23fc9ee:	420a      	tst	r2, r1
 23fc9f0:	d0e8      	beq.n	23fc9c4 <rint+0x8c>
 23fc9f2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 23fc9f6:	ea4f 0351 	mov.w	r3, r1, lsr #1
 23fc9fa:	d0c8      	beq.n	23fc98e <rint+0x56>
 23fc9fc:	ea20 0303 	bic.w	r3, r0, r3
 23fca00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23fca04:	fa40 fc0c 	asr.w	ip, r0, ip
 23fca08:	ea43 000c 	orr.w	r0, r3, ip
 23fca0c:	e7bf      	b.n	23fc98e <rint+0x56>
 23fca0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23fca12:	4a16      	ldr	r2, [pc, #88]	; (23fca6c <rint+0x134>)
 23fca14:	4318      	orrs	r0, r3
 23fca16:	4022      	ands	r2, r4
 23fca18:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 23fca1c:	4243      	negs	r3, r0
 23fca1e:	4303      	orrs	r3, r0
 23fca20:	0b1b      	lsrs	r3, r3, #12
 23fca22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 23fca26:	ea43 0702 	orr.w	r7, r3, r2
 23fca2a:	4b0f      	ldr	r3, [pc, #60]	; (23fca68 <rint+0x130>)
 23fca2c:	ee10 2a10 	vmov	r2, s0
 23fca30:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 23fca34:	463b      	mov	r3, r7
 23fca36:	e9de 6700 	ldrd	r6, r7, [lr]
 23fca3a:	4630      	mov	r0, r6
 23fca3c:	4639      	mov	r1, r7
 23fca3e:	f7f6 f879 	bl	23f2b34 <__adddf3>
 23fca42:	4632      	mov	r2, r6
 23fca44:	463b      	mov	r3, r7
 23fca46:	e9cd 0100 	strd	r0, r1, [sp]
 23fca4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fca4e:	f7f6 f86f 	bl	23f2b30 <__aeabi_dsub>
 23fca52:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fca56:	4602      	mov	r2, r0
 23fca58:	ea41 0304 	orr.w	r3, r1, r4
 23fca5c:	ec43 2b10 	vmov	d0, r2, r3
 23fca60:	b003      	add	sp, #12
 23fca62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fca64:	000fffff 	.word	0x000fffff
 23fca68:	023ffba8 	.word	0x023ffba8
 23fca6c:	fffe0000 	.word	0xfffe0000

023fca70 <scalbn>:
 23fca70:	b538      	push	{r3, r4, r5, lr}
 23fca72:	ec53 2b10 	vmov	r2, r3, d0
 23fca76:	f3c3 510a 	ubfx	r1, r3, #20, #11
 23fca7a:	469c      	mov	ip, r3
 23fca7c:	4604      	mov	r4, r0
 23fca7e:	bb89      	cbnz	r1, 23fcae4 <scalbn+0x74>
 23fca80:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 23fca84:	ee10 1a10 	vmov	r1, s0
 23fca88:	ea5c 0101 	orrs.w	r1, ip, r1
 23fca8c:	d029      	beq.n	23fcae2 <scalbn+0x72>
 23fca8e:	4d3e      	ldr	r5, [pc, #248]	; (23fcb88 <scalbn+0x118>)
 23fca90:	4619      	mov	r1, r3
 23fca92:	2200      	movs	r2, #0
 23fca94:	4b3d      	ldr	r3, [pc, #244]	; (23fcb8c <scalbn+0x11c>)
 23fca96:	ee10 0a10 	vmov	r0, s0
 23fca9a:	f7f6 fa01 	bl	23f2ea0 <__aeabi_dmul>
 23fca9e:	42ac      	cmp	r4, r5
 23fcaa0:	4602      	mov	r2, r0
 23fcaa2:	460b      	mov	r3, r1
 23fcaa4:	db16      	blt.n	23fcad4 <scalbn+0x64>
 23fcaa6:	468c      	mov	ip, r1
 23fcaa8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 23fcaac:	3936      	subs	r1, #54	; 0x36
 23fcaae:	4421      	add	r1, r4
 23fcab0:	f240 70fe 	movw	r0, #2046	; 0x7fe
 23fcab4:	4281      	cmp	r1, r0
 23fcab6:	dc21      	bgt.n	23fcafc <scalbn+0x8c>
 23fcab8:	2900      	cmp	r1, #0
 23fcaba:	dc47      	bgt.n	23fcb4c <scalbn+0xdc>
 23fcabc:	f111 0f35 	cmn.w	r1, #53	; 0x35
 23fcac0:	da34      	bge.n	23fcb2c <scalbn+0xbc>
 23fcac2:	f24c 3150 	movw	r1, #50000	; 0xc350
 23fcac6:	428c      	cmp	r4, r1
 23fcac8:	dc18      	bgt.n	23fcafc <scalbn+0x8c>
 23fcaca:	2b00      	cmp	r3, #0
 23fcacc:	a126      	add	r1, pc, #152	; (adr r1, 23fcb68 <scalbn+0xf8>)
 23fcace:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fcad2:	db43      	blt.n	23fcb5c <scalbn+0xec>
 23fcad4:	a324      	add	r3, pc, #144	; (adr r3, 23fcb68 <scalbn+0xf8>)
 23fcad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fcada:	f7f6 f9e1 	bl	23f2ea0 <__aeabi_dmul>
 23fcade:	ec41 0b10 	vmov	d0, r0, r1
 23fcae2:	bd38      	pop	{r3, r4, r5, pc}
 23fcae4:	f240 7eff 	movw	lr, #2047	; 0x7ff
 23fcae8:	4571      	cmp	r1, lr
 23fcaea:	d1e0      	bne.n	23fcaae <scalbn+0x3e>
 23fcaec:	ee10 0a10 	vmov	r0, s0
 23fcaf0:	4619      	mov	r1, r3
 23fcaf2:	f7f6 f81f 	bl	23f2b34 <__adddf3>
 23fcaf6:	ec41 0b10 	vmov	d0, r0, r1
 23fcafa:	bd38      	pop	{r3, r4, r5, pc}
 23fcafc:	2b00      	cmp	r3, #0
 23fcafe:	a11c      	add	r1, pc, #112	; (adr r1, 23fcb70 <scalbn+0x100>)
 23fcb00:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fcb04:	db07      	blt.n	23fcb16 <scalbn+0xa6>
 23fcb06:	a31a      	add	r3, pc, #104	; (adr r3, 23fcb70 <scalbn+0x100>)
 23fcb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fcb0c:	f7f6 f9c8 	bl	23f2ea0 <__aeabi_dmul>
 23fcb10:	ec41 0b10 	vmov	d0, r0, r1
 23fcb14:	bd38      	pop	{r3, r4, r5, pc}
 23fcb16:	a118      	add	r1, pc, #96	; (adr r1, 23fcb78 <scalbn+0x108>)
 23fcb18:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fcb1c:	a314      	add	r3, pc, #80	; (adr r3, 23fcb70 <scalbn+0x100>)
 23fcb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fcb22:	f7f6 f9bd 	bl	23f2ea0 <__aeabi_dmul>
 23fcb26:	ec41 0b10 	vmov	d0, r0, r1
 23fcb2a:	e7f3      	b.n	23fcb14 <scalbn+0xa4>
 23fcb2c:	4818      	ldr	r0, [pc, #96]	; (23fcb90 <scalbn+0x120>)
 23fcb2e:	3136      	adds	r1, #54	; 0x36
 23fcb30:	4614      	mov	r4, r2
 23fcb32:	4b18      	ldr	r3, [pc, #96]	; (23fcb94 <scalbn+0x124>)
 23fcb34:	ea0c 0000 	and.w	r0, ip, r0
 23fcb38:	2200      	movs	r2, #0
 23fcb3a:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
 23fcb3e:	4620      	mov	r0, r4
 23fcb40:	4629      	mov	r1, r5
 23fcb42:	f7f6 f9ad 	bl	23f2ea0 <__aeabi_dmul>
 23fcb46:	ec41 0b10 	vmov	d0, r0, r1
 23fcb4a:	bd38      	pop	{r3, r4, r5, pc}
 23fcb4c:	4810      	ldr	r0, [pc, #64]	; (23fcb90 <scalbn+0x120>)
 23fcb4e:	ea0c 0000 	and.w	r0, ip, r0
 23fcb52:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
 23fcb56:	ec43 2b10 	vmov	d0, r2, r3
 23fcb5a:	bd38      	pop	{r3, r4, r5, pc}
 23fcb5c:	a108      	add	r1, pc, #32	; (adr r1, 23fcb80 <scalbn+0x110>)
 23fcb5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fcb62:	e7b7      	b.n	23fcad4 <scalbn+0x64>
 23fcb64:	f3af 8000 	nop.w
 23fcb68:	c2f8f359 	.word	0xc2f8f359
 23fcb6c:	01a56e1f 	.word	0x01a56e1f
 23fcb70:	8800759c 	.word	0x8800759c
 23fcb74:	7e37e43c 	.word	0x7e37e43c
 23fcb78:	8800759c 	.word	0x8800759c
 23fcb7c:	fe37e43c 	.word	0xfe37e43c
 23fcb80:	c2f8f359 	.word	0xc2f8f359
 23fcb84:	81a56e1f 	.word	0x81a56e1f
 23fcb88:	ffff3cb0 	.word	0xffff3cb0
 23fcb8c:	43500000 	.word	0x43500000
 23fcb90:	800fffff 	.word	0x800fffff
 23fcb94:	3c900000 	.word	0x3c900000

023fcb98 <asctime_r>:
 23fcb98:	b510      	push	{r4, lr}
 23fcb9a:	460c      	mov	r4, r1
 23fcb9c:	6941      	ldr	r1, [r0, #20]
 23fcb9e:	b086      	sub	sp, #24
 23fcba0:	6903      	ldr	r3, [r0, #16]
 23fcba2:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 23fcba6:	6982      	ldr	r2, [r0, #24]
 23fcba8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fcbac:	9104      	str	r1, [sp, #16]
 23fcbae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 23fcbb2:	6801      	ldr	r1, [r0, #0]
 23fcbb4:	9103      	str	r1, [sp, #12]
 23fcbb6:	6841      	ldr	r1, [r0, #4]
 23fcbb8:	9102      	str	r1, [sp, #8]
 23fcbba:	6881      	ldr	r1, [r0, #8]
 23fcbbc:	9101      	str	r1, [sp, #4]
 23fcbbe:	68c1      	ldr	r1, [r0, #12]
 23fcbc0:	4620      	mov	r0, r4
 23fcbc2:	9100      	str	r1, [sp, #0]
 23fcbc4:	4904      	ldr	r1, [pc, #16]	; (23fcbd8 <asctime_r+0x40>)
 23fcbc6:	440b      	add	r3, r1
 23fcbc8:	4904      	ldr	r1, [pc, #16]	; (23fcbdc <asctime_r+0x44>)
 23fcbca:	440a      	add	r2, r1
 23fcbcc:	4904      	ldr	r1, [pc, #16]	; (23fcbe0 <asctime_r+0x48>)
 23fcbce:	f7fb fd41 	bl	23f8654 <siprintf>
 23fcbd2:	4620      	mov	r0, r4
 23fcbd4:	b006      	add	sp, #24
 23fcbd6:	bd10      	pop	{r4, pc}
 23fcbd8:	023ffbed 	.word	0x023ffbed
 23fcbdc:	023ffbd8 	.word	0x023ffbd8
 23fcbe0:	023ffbb8 	.word	0x023ffbb8

023fcbe4 <atexit>:
 23fcbe4:	2300      	movs	r3, #0
 23fcbe6:	4601      	mov	r1, r0
 23fcbe8:	461a      	mov	r2, r3
 23fcbea:	4618      	mov	r0, r3
 23fcbec:	f000 bf90 	b.w	23fdb10 <__register_exitproc>

023fcbf0 <atof>:
 23fcbf0:	2100      	movs	r1, #0
 23fcbf2:	f000 beeb 	b.w	23fd9cc <strtod>

023fcbf6 <atol>:
 23fcbf6:	220a      	movs	r2, #10
 23fcbf8:	2100      	movs	r1, #0
 23fcbfa:	f000 bf75 	b.w	23fdae8 <strtol>
	...

023fcc00 <isprint>:
 23fcc00:	4b02      	ldr	r3, [pc, #8]	; (23fcc0c <isprint+0xc>)
 23fcc02:	4418      	add	r0, r3
 23fcc04:	7840      	ldrb	r0, [r0, #1]
 23fcc06:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fcc0a:	4770      	bx	lr
 23fcc0c:	023ffce0 	.word	0x023ffce0

023fcc10 <isspace>:
 23fcc10:	4b02      	ldr	r3, [pc, #8]	; (23fcc1c <isspace+0xc>)
 23fcc12:	4418      	add	r0, r3
 23fcc14:	7840      	ldrb	r0, [r0, #1]
 23fcc16:	f000 0008 	and.w	r0, r0, #8
 23fcc1a:	4770      	bx	lr
 23fcc1c:	023ffce0 	.word	0x023ffce0

023fcc20 <memcpy>:
 23fcc20:	440a      	add	r2, r1
 23fcc22:	1e43      	subs	r3, r0, #1
 23fcc24:	4291      	cmp	r1, r2
 23fcc26:	d100      	bne.n	23fcc2a <memcpy+0xa>
 23fcc28:	4770      	bx	lr
 23fcc2a:	b510      	push	{r4, lr}
 23fcc2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fcc30:	4291      	cmp	r1, r2
 23fcc32:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fcc36:	d1f9      	bne.n	23fcc2c <memcpy+0xc>
 23fcc38:	bd10      	pop	{r4, pc}

023fcc3a <memmove>:
 23fcc3a:	4288      	cmp	r0, r1
 23fcc3c:	b510      	push	{r4, lr}
 23fcc3e:	eb01 0402 	add.w	r4, r1, r2
 23fcc42:	d902      	bls.n	23fcc4a <memmove+0x10>
 23fcc44:	4284      	cmp	r4, r0
 23fcc46:	4623      	mov	r3, r4
 23fcc48:	d807      	bhi.n	23fcc5a <memmove+0x20>
 23fcc4a:	1e43      	subs	r3, r0, #1
 23fcc4c:	42a1      	cmp	r1, r4
 23fcc4e:	d008      	beq.n	23fcc62 <memmove+0x28>
 23fcc50:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fcc54:	f803 2f01 	strb.w	r2, [r3, #1]!
 23fcc58:	e7f8      	b.n	23fcc4c <memmove+0x12>
 23fcc5a:	4402      	add	r2, r0
 23fcc5c:	4601      	mov	r1, r0
 23fcc5e:	428a      	cmp	r2, r1
 23fcc60:	d100      	bne.n	23fcc64 <memmove+0x2a>
 23fcc62:	bd10      	pop	{r4, pc}
 23fcc64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23fcc68:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23fcc6c:	e7f7      	b.n	23fcc5e <memmove+0x24>

023fcc6e <memset>:
 23fcc6e:	4402      	add	r2, r0
 23fcc70:	4603      	mov	r3, r0
 23fcc72:	4293      	cmp	r3, r2
 23fcc74:	d100      	bne.n	23fcc78 <memset+0xa>
 23fcc76:	4770      	bx	lr
 23fcc78:	f803 1b01 	strb.w	r1, [r3], #1
 23fcc7c:	e7f9      	b.n	23fcc72 <memset+0x4>
	...

023fcc80 <srand>:
 23fcc80:	b538      	push	{r3, r4, r5, lr}
 23fcc82:	4b10      	ldr	r3, [pc, #64]	; (23fccc4 <srand+0x44>)
 23fcc84:	4604      	mov	r4, r0
 23fcc86:	681d      	ldr	r5, [r3, #0]
 23fcc88:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fcc8a:	b9b3      	cbnz	r3, 23fccba <srand+0x3a>
 23fcc8c:	2018      	movs	r0, #24
 23fcc8e:	f7fb fcb7 	bl	23f8600 <malloc>
 23fcc92:	4602      	mov	r2, r0
 23fcc94:	63a8      	str	r0, [r5, #56]	; 0x38
 23fcc96:	b920      	cbnz	r0, 23fcca2 <srand+0x22>
 23fcc98:	4b0b      	ldr	r3, [pc, #44]	; (23fccc8 <srand+0x48>)
 23fcc9a:	2142      	movs	r1, #66	; 0x42
 23fcc9c:	480b      	ldr	r0, [pc, #44]	; (23fcccc <srand+0x4c>)
 23fcc9e:	f7fb fd2d 	bl	23f86fc <__assert_func>
 23fcca2:	490b      	ldr	r1, [pc, #44]	; (23fccd0 <srand+0x50>)
 23fcca4:	4b0b      	ldr	r3, [pc, #44]	; (23fccd4 <srand+0x54>)
 23fcca6:	e9c0 1300 	strd	r1, r3, [r0]
 23fccaa:	4b0b      	ldr	r3, [pc, #44]	; (23fccd8 <srand+0x58>)
 23fccac:	2100      	movs	r1, #0
 23fccae:	6083      	str	r3, [r0, #8]
 23fccb0:	230b      	movs	r3, #11
 23fccb2:	8183      	strh	r3, [r0, #12]
 23fccb4:	2001      	movs	r0, #1
 23fccb6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fccba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fccbc:	2200      	movs	r2, #0
 23fccbe:	611c      	str	r4, [r3, #16]
 23fccc0:	615a      	str	r2, [r3, #20]
 23fccc2:	bd38      	pop	{r3, r4, r5, pc}
 23fccc4:	1007aafc 	.word	0x1007aafc
 23fccc8:	023ffc11 	.word	0x023ffc11
 23fcccc:	023ffc28 	.word	0x023ffc28
 23fccd0:	abcd330e 	.word	0xabcd330e
 23fccd4:	e66d1234 	.word	0xe66d1234
 23fccd8:	0005deec 	.word	0x0005deec

023fccdc <strchr>:
 23fccdc:	b2c9      	uxtb	r1, r1
 23fccde:	4603      	mov	r3, r0
 23fcce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fcce4:	b11a      	cbz	r2, 23fccee <strchr+0x12>
 23fcce6:	428a      	cmp	r2, r1
 23fcce8:	d1f9      	bne.n	23fccde <strchr+0x2>
 23fccea:	4618      	mov	r0, r3
 23fccec:	4770      	bx	lr
 23fccee:	2900      	cmp	r1, #0
 23fccf0:	bf18      	it	ne
 23fccf2:	2300      	movne	r3, #0
 23fccf4:	e7f9      	b.n	23fccea <strchr+0xe>

023fccf6 <strchrnul>:
 23fccf6:	b510      	push	{r4, lr}
 23fccf8:	4604      	mov	r4, r0
 23fccfa:	f7ff ffef 	bl	23fccdc <strchr>
 23fccfe:	b918      	cbnz	r0, 23fcd08 <strchrnul+0x12>
 23fcd00:	4620      	mov	r0, r4
 23fcd02:	f7f6 fdd9 	bl	23f38b8 <strlen>
 23fcd06:	4420      	add	r0, r4
 23fcd08:	bd10      	pop	{r4, pc}

023fcd0a <strcpy>:
 23fcd0a:	4603      	mov	r3, r0
 23fcd0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fcd10:	f803 2b01 	strb.w	r2, [r3], #1
 23fcd14:	2a00      	cmp	r2, #0
 23fcd16:	d1f9      	bne.n	23fcd0c <strcpy+0x2>
 23fcd18:	4770      	bx	lr

023fcd1a <strncmp>:
 23fcd1a:	b510      	push	{r4, lr}
 23fcd1c:	b17a      	cbz	r2, 23fcd3e <strncmp+0x24>
 23fcd1e:	4603      	mov	r3, r0
 23fcd20:	3901      	subs	r1, #1
 23fcd22:	1884      	adds	r4, r0, r2
 23fcd24:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fcd28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23fcd2c:	4290      	cmp	r0, r2
 23fcd2e:	d101      	bne.n	23fcd34 <strncmp+0x1a>
 23fcd30:	42a3      	cmp	r3, r4
 23fcd32:	d101      	bne.n	23fcd38 <strncmp+0x1e>
 23fcd34:	1a80      	subs	r0, r0, r2
 23fcd36:	bd10      	pop	{r4, pc}
 23fcd38:	2800      	cmp	r0, #0
 23fcd3a:	d1f3      	bne.n	23fcd24 <strncmp+0xa>
 23fcd3c:	e7fa      	b.n	23fcd34 <strncmp+0x1a>
 23fcd3e:	4610      	mov	r0, r2
 23fcd40:	e7f9      	b.n	23fcd36 <strncmp+0x1c>

023fcd42 <strncpy>:
 23fcd42:	3901      	subs	r1, #1
 23fcd44:	4603      	mov	r3, r0
 23fcd46:	b510      	push	{r4, lr}
 23fcd48:	b132      	cbz	r2, 23fcd58 <strncpy+0x16>
 23fcd4a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23fcd4e:	3a01      	subs	r2, #1
 23fcd50:	f803 4b01 	strb.w	r4, [r3], #1
 23fcd54:	2c00      	cmp	r4, #0
 23fcd56:	d1f7      	bne.n	23fcd48 <strncpy+0x6>
 23fcd58:	441a      	add	r2, r3
 23fcd5a:	2100      	movs	r1, #0
 23fcd5c:	4293      	cmp	r3, r2
 23fcd5e:	d100      	bne.n	23fcd62 <strncpy+0x20>
 23fcd60:	bd10      	pop	{r4, pc}
 23fcd62:	f803 1b01 	strb.w	r1, [r3], #1
 23fcd66:	e7f9      	b.n	23fcd5c <strncpy+0x1a>

023fcd68 <strrchr>:
 23fcd68:	b538      	push	{r3, r4, r5, lr}
 23fcd6a:	4603      	mov	r3, r0
 23fcd6c:	460c      	mov	r4, r1
 23fcd6e:	b969      	cbnz	r1, 23fcd8c <strrchr+0x24>
 23fcd70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fcd74:	f7ff bfb2 	b.w	23fccdc <strchr>
 23fcd78:	1c43      	adds	r3, r0, #1
 23fcd7a:	4605      	mov	r5, r0
 23fcd7c:	4621      	mov	r1, r4
 23fcd7e:	4618      	mov	r0, r3
 23fcd80:	f7ff ffac 	bl	23fccdc <strchr>
 23fcd84:	2800      	cmp	r0, #0
 23fcd86:	d1f7      	bne.n	23fcd78 <strrchr+0x10>
 23fcd88:	4628      	mov	r0, r5
 23fcd8a:	bd38      	pop	{r3, r4, r5, pc}
 23fcd8c:	2500      	movs	r5, #0
 23fcd8e:	e7f5      	b.n	23fcd7c <strrchr+0x14>

023fcd90 <sulp>:
 23fcd90:	b570      	push	{r4, r5, r6, lr}
 23fcd92:	4604      	mov	r4, r0
 23fcd94:	460d      	mov	r5, r1
 23fcd96:	4616      	mov	r6, r2
 23fcd98:	ec45 4b10 	vmov	d0, r4, r5
 23fcd9c:	f001 fe18 	bl	23fe9d0 <__ulp>
 23fcda0:	ec51 0b10 	vmov	r0, r1, d0
 23fcda4:	b17e      	cbz	r6, 23fcdc6 <sulp+0x36>
 23fcda6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 23fcdaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 23fcdae:	2b00      	cmp	r3, #0
 23fcdb0:	dd09      	ble.n	23fcdc6 <sulp+0x36>
 23fcdb2:	051b      	lsls	r3, r3, #20
 23fcdb4:	2400      	movs	r4, #0
 23fcdb6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 23fcdba:	4622      	mov	r2, r4
 23fcdbc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 23fcdc0:	462b      	mov	r3, r5
 23fcdc2:	f7f6 f86d 	bl	23f2ea0 <__aeabi_dmul>
 23fcdc6:	bd70      	pop	{r4, r5, r6, pc}

023fcdc8 <_strtod_l>:
 23fcdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fcdcc:	461f      	mov	r7, r3
 23fcdce:	2300      	movs	r3, #0
 23fcdd0:	4604      	mov	r4, r0
 23fcdd2:	4688      	mov	r8, r1
 23fcdd4:	f04f 0a00 	mov.w	sl, #0
 23fcdd8:	f04f 0b00 	mov.w	fp, #0
 23fcddc:	ed2d 8b02 	vpush	{d8}
 23fcde0:	b09d      	sub	sp, #116	; 0x74
 23fcde2:	9318      	str	r3, [sp, #96]	; 0x60
 23fcde4:	4b9f      	ldr	r3, [pc, #636]	; (23fd064 <_strtod_l+0x29c>)
 23fcde6:	9213      	str	r2, [sp, #76]	; 0x4c
 23fcde8:	681b      	ldr	r3, [r3, #0]
 23fcdea:	4618      	mov	r0, r3
 23fcdec:	9305      	str	r3, [sp, #20]
 23fcdee:	f7f6 fd63 	bl	23f38b8 <strlen>
 23fcdf2:	4605      	mov	r5, r0
 23fcdf4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 23fcdf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fcdfa:	781a      	ldrb	r2, [r3, #0]
 23fcdfc:	2a2b      	cmp	r2, #43	; 0x2b
 23fcdfe:	d04e      	beq.n	23fce9e <_strtod_l+0xd6>
 23fce00:	d83b      	bhi.n	23fce7a <_strtod_l+0xb2>
 23fce02:	2a0d      	cmp	r2, #13
 23fce04:	d834      	bhi.n	23fce70 <_strtod_l+0xa8>
 23fce06:	2a08      	cmp	r2, #8
 23fce08:	d834      	bhi.n	23fce74 <_strtod_l+0xac>
 23fce0a:	2a00      	cmp	r2, #0
 23fce0c:	d03e      	beq.n	23fce8c <_strtod_l+0xc4>
 23fce0e:	2300      	movs	r3, #0
 23fce10:	930a      	str	r3, [sp, #40]	; 0x28
 23fce12:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 23fce14:	7833      	ldrb	r3, [r6, #0]
 23fce16:	2b30      	cmp	r3, #48	; 0x30
 23fce18:	f040 80b0 	bne.w	23fcf7c <_strtod_l+0x1b4>
 23fce1c:	7873      	ldrb	r3, [r6, #1]
 23fce1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 23fce22:	2b58      	cmp	r3, #88	; 0x58
 23fce24:	d168      	bne.n	23fcef8 <_strtod_l+0x130>
 23fce26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fce28:	a917      	add	r1, sp, #92	; 0x5c
 23fce2a:	9702      	str	r7, [sp, #8]
 23fce2c:	4620      	mov	r0, r4
 23fce2e:	9301      	str	r3, [sp, #4]
 23fce30:	ab18      	add	r3, sp, #96	; 0x60
 23fce32:	4a8d      	ldr	r2, [pc, #564]	; (23fd068 <_strtod_l+0x2a0>)
 23fce34:	9300      	str	r3, [sp, #0]
 23fce36:	ab19      	add	r3, sp, #100	; 0x64
 23fce38:	f000 ff34 	bl	23fdca4 <__gethex>
 23fce3c:	f010 0707 	ands.w	r7, r0, #7
 23fce40:	4605      	mov	r5, r0
 23fce42:	d005      	beq.n	23fce50 <_strtod_l+0x88>
 23fce44:	2f06      	cmp	r7, #6
 23fce46:	d12c      	bne.n	23fcea2 <_strtod_l+0xda>
 23fce48:	3601      	adds	r6, #1
 23fce4a:	2300      	movs	r3, #0
 23fce4c:	9617      	str	r6, [sp, #92]	; 0x5c
 23fce4e:	930a      	str	r3, [sp, #40]	; 0x28
 23fce50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23fce52:	2b00      	cmp	r3, #0
 23fce54:	f040 858e 	bne.w	23fd974 <_strtod_l+0xbac>
 23fce58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fce5a:	b1eb      	cbz	r3, 23fce98 <_strtod_l+0xd0>
 23fce5c:	4652      	mov	r2, sl
 23fce5e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 23fce62:	ec43 2b10 	vmov	d0, r2, r3
 23fce66:	b01d      	add	sp, #116	; 0x74
 23fce68:	ecbd 8b02 	vpop	{d8}
 23fce6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fce70:	2a20      	cmp	r2, #32
 23fce72:	d1cc      	bne.n	23fce0e <_strtod_l+0x46>
 23fce74:	3301      	adds	r3, #1
 23fce76:	9317      	str	r3, [sp, #92]	; 0x5c
 23fce78:	e7be      	b.n	23fcdf8 <_strtod_l+0x30>
 23fce7a:	2a2d      	cmp	r2, #45	; 0x2d
 23fce7c:	d1c7      	bne.n	23fce0e <_strtod_l+0x46>
 23fce7e:	2201      	movs	r2, #1
 23fce80:	920a      	str	r2, [sp, #40]	; 0x28
 23fce82:	1c5a      	adds	r2, r3, #1
 23fce84:	9217      	str	r2, [sp, #92]	; 0x5c
 23fce86:	785b      	ldrb	r3, [r3, #1]
 23fce88:	2b00      	cmp	r3, #0
 23fce8a:	d1c2      	bne.n	23fce12 <_strtod_l+0x4a>
 23fce8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23fce8e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 23fce92:	2b00      	cmp	r3, #0
 23fce94:	f040 856c 	bne.w	23fd970 <_strtod_l+0xba8>
 23fce98:	4652      	mov	r2, sl
 23fce9a:	465b      	mov	r3, fp
 23fce9c:	e7e1      	b.n	23fce62 <_strtod_l+0x9a>
 23fce9e:	2200      	movs	r2, #0
 23fcea0:	e7ee      	b.n	23fce80 <_strtod_l+0xb8>
 23fcea2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 23fcea4:	b13a      	cbz	r2, 23fceb6 <_strtod_l+0xee>
 23fcea6:	2135      	movs	r1, #53	; 0x35
 23fcea8:	a81a      	add	r0, sp, #104	; 0x68
 23fceaa:	f001 fe9a 	bl	23febe2 <__copybits>
 23fceae:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fceb0:	4620      	mov	r0, r4
 23fceb2:	f001 fa55 	bl	23fe360 <_Bfree>
 23fceb6:	3f01      	subs	r7, #1
 23fceb8:	2f04      	cmp	r7, #4
 23fceba:	d806      	bhi.n	23fceca <_strtod_l+0x102>
 23fcebc:	e8df f007 	tbb	[pc, r7]
 23fcec0:	1714030a 	.word	0x1714030a
 23fcec4:	0a          	.byte	0x0a
 23fcec5:	00          	.byte	0x00
 23fcec6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 23fceca:	0728      	lsls	r0, r5, #28
 23fcecc:	d5c0      	bpl.n	23fce50 <_strtod_l+0x88>
 23fcece:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 23fced2:	e7bd      	b.n	23fce50 <_strtod_l+0x88>
 23fced4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 23fced8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23fceda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 23fcede:	f202 4233 	addw	r2, r2, #1075	; 0x433
 23fcee2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 23fcee6:	e7f0      	b.n	23fceca <_strtod_l+0x102>
 23fcee8:	f8df b180 	ldr.w	fp, [pc, #384]	; 23fd06c <_strtod_l+0x2a4>
 23fceec:	e7ed      	b.n	23fceca <_strtod_l+0x102>
 23fceee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 23fcef2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 23fcef6:	e7e8      	b.n	23fceca <_strtod_l+0x102>
 23fcef8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fcefa:	1c5a      	adds	r2, r3, #1
 23fcefc:	9217      	str	r2, [sp, #92]	; 0x5c
 23fcefe:	785b      	ldrb	r3, [r3, #1]
 23fcf00:	2b30      	cmp	r3, #48	; 0x30
 23fcf02:	d0f9      	beq.n	23fcef8 <_strtod_l+0x130>
 23fcf04:	2b00      	cmp	r3, #0
 23fcf06:	d0a3      	beq.n	23fce50 <_strtod_l+0x88>
 23fcf08:	2301      	movs	r3, #1
 23fcf0a:	f04f 0900 	mov.w	r9, #0
 23fcf0e:	9304      	str	r3, [sp, #16]
 23fcf10:	220a      	movs	r2, #10
 23fcf12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fcf14:	464f      	mov	r7, r9
 23fcf16:	f8cd 901c 	str.w	r9, [sp, #28]
 23fcf1a:	9308      	str	r3, [sp, #32]
 23fcf1c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 23fcf1e:	7806      	ldrb	r6, [r0, #0]
 23fcf20:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 23fcf24:	b2d9      	uxtb	r1, r3
 23fcf26:	2909      	cmp	r1, #9
 23fcf28:	d92a      	bls.n	23fcf80 <_strtod_l+0x1b8>
 23fcf2a:	462a      	mov	r2, r5
 23fcf2c:	9905      	ldr	r1, [sp, #20]
 23fcf2e:	f7ff fef4 	bl	23fcd1a <strncmp>
 23fcf32:	b3a0      	cbz	r0, 23fcf9e <_strtod_l+0x1d6>
 23fcf34:	2000      	movs	r0, #0
 23fcf36:	4632      	mov	r2, r6
 23fcf38:	463d      	mov	r5, r7
 23fcf3a:	4603      	mov	r3, r0
 23fcf3c:	9005      	str	r0, [sp, #20]
 23fcf3e:	2a65      	cmp	r2, #101	; 0x65
 23fcf40:	d001      	beq.n	23fcf46 <_strtod_l+0x17e>
 23fcf42:	2a45      	cmp	r2, #69	; 0x45
 23fcf44:	d118      	bne.n	23fcf78 <_strtod_l+0x1b0>
 23fcf46:	b91d      	cbnz	r5, 23fcf50 <_strtod_l+0x188>
 23fcf48:	9a04      	ldr	r2, [sp, #16]
 23fcf4a:	4302      	orrs	r2, r0
 23fcf4c:	d09e      	beq.n	23fce8c <_strtod_l+0xc4>
 23fcf4e:	2500      	movs	r5, #0
 23fcf50:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 23fcf54:	f108 0201 	add.w	r2, r8, #1
 23fcf58:	9217      	str	r2, [sp, #92]	; 0x5c
 23fcf5a:	f898 2001 	ldrb.w	r2, [r8, #1]
 23fcf5e:	2a2b      	cmp	r2, #43	; 0x2b
 23fcf60:	d075      	beq.n	23fd04e <_strtod_l+0x286>
 23fcf62:	2a2d      	cmp	r2, #45	; 0x2d
 23fcf64:	d07b      	beq.n	23fd05e <_strtod_l+0x296>
 23fcf66:	f04f 0c00 	mov.w	ip, #0
 23fcf6a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 23fcf6e:	2909      	cmp	r1, #9
 23fcf70:	f240 8082 	bls.w	23fd078 <_strtod_l+0x2b0>
 23fcf74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 23fcf78:	2600      	movs	r6, #0
 23fcf7a:	e09d      	b.n	23fd0b8 <_strtod_l+0x2f0>
 23fcf7c:	2300      	movs	r3, #0
 23fcf7e:	e7c4      	b.n	23fcf0a <_strtod_l+0x142>
 23fcf80:	2f08      	cmp	r7, #8
 23fcf82:	f100 0001 	add.w	r0, r0, #1
 23fcf86:	f107 0701 	add.w	r7, r7, #1
 23fcf8a:	bfd4      	ite	le
 23fcf8c:	9907      	ldrle	r1, [sp, #28]
 23fcf8e:	fb02 3909 	mlagt	r9, r2, r9, r3
 23fcf92:	9017      	str	r0, [sp, #92]	; 0x5c
 23fcf94:	bfdc      	itt	le
 23fcf96:	fb02 3301 	mlale	r3, r2, r1, r3
 23fcf9a:	9307      	strle	r3, [sp, #28]
 23fcf9c:	e7be      	b.n	23fcf1c <_strtod_l+0x154>
 23fcf9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fcfa0:	195a      	adds	r2, r3, r5
 23fcfa2:	9217      	str	r2, [sp, #92]	; 0x5c
 23fcfa4:	5d5a      	ldrb	r2, [r3, r5]
 23fcfa6:	2f00      	cmp	r7, #0
 23fcfa8:	d036      	beq.n	23fd018 <_strtod_l+0x250>
 23fcfaa:	463d      	mov	r5, r7
 23fcfac:	9005      	str	r0, [sp, #20]
 23fcfae:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 23fcfb2:	2b09      	cmp	r3, #9
 23fcfb4:	d912      	bls.n	23fcfdc <_strtod_l+0x214>
 23fcfb6:	2301      	movs	r3, #1
 23fcfb8:	e7c1      	b.n	23fcf3e <_strtod_l+0x176>
 23fcfba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fcfbc:	3001      	adds	r0, #1
 23fcfbe:	1c5a      	adds	r2, r3, #1
 23fcfc0:	9217      	str	r2, [sp, #92]	; 0x5c
 23fcfc2:	785a      	ldrb	r2, [r3, #1]
 23fcfc4:	2a30      	cmp	r2, #48	; 0x30
 23fcfc6:	d0f8      	beq.n	23fcfba <_strtod_l+0x1f2>
 23fcfc8:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 23fcfcc:	2b08      	cmp	r3, #8
 23fcfce:	f200 84d6 	bhi.w	23fd97e <_strtod_l+0xbb6>
 23fcfd2:	9005      	str	r0, [sp, #20]
 23fcfd4:	2000      	movs	r0, #0
 23fcfd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fcfd8:	4605      	mov	r5, r0
 23fcfda:	9308      	str	r3, [sp, #32]
 23fcfdc:	3a30      	subs	r2, #48	; 0x30
 23fcfde:	f100 0301 	add.w	r3, r0, #1
 23fcfe2:	d013      	beq.n	23fd00c <_strtod_l+0x244>
 23fcfe4:	9905      	ldr	r1, [sp, #20]
 23fcfe6:	eb00 0e05 	add.w	lr, r0, r5
 23fcfea:	4419      	add	r1, r3
 23fcfec:	462b      	mov	r3, r5
 23fcfee:	9105      	str	r1, [sp, #20]
 23fcff0:	210a      	movs	r1, #10
 23fcff2:	4573      	cmp	r3, lr
 23fcff4:	d112      	bne.n	23fd01c <_strtod_l+0x254>
 23fcff6:	182b      	adds	r3, r5, r0
 23fcff8:	3501      	adds	r5, #1
 23fcffa:	2b08      	cmp	r3, #8
 23fcffc:	4405      	add	r5, r0
 23fcffe:	dc1c      	bgt.n	23fd03a <_strtod_l+0x272>
 23fd000:	9907      	ldr	r1, [sp, #28]
 23fd002:	230a      	movs	r3, #10
 23fd004:	fb03 2301 	mla	r3, r3, r1, r2
 23fd008:	9307      	str	r3, [sp, #28]
 23fd00a:	2300      	movs	r3, #0
 23fd00c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fd00e:	4618      	mov	r0, r3
 23fd010:	1c51      	adds	r1, r2, #1
 23fd012:	9117      	str	r1, [sp, #92]	; 0x5c
 23fd014:	7852      	ldrb	r2, [r2, #1]
 23fd016:	e7ca      	b.n	23fcfae <_strtod_l+0x1e6>
 23fd018:	4638      	mov	r0, r7
 23fd01a:	e7d3      	b.n	23fcfc4 <_strtod_l+0x1fc>
 23fd01c:	2b08      	cmp	r3, #8
 23fd01e:	dc04      	bgt.n	23fd02a <_strtod_l+0x262>
 23fd020:	9e07      	ldr	r6, [sp, #28]
 23fd022:	434e      	muls	r6, r1
 23fd024:	9607      	str	r6, [sp, #28]
 23fd026:	3301      	adds	r3, #1
 23fd028:	e7e3      	b.n	23fcff2 <_strtod_l+0x22a>
 23fd02a:	f103 0c01 	add.w	ip, r3, #1
 23fd02e:	f1bc 0f10 	cmp.w	ip, #16
 23fd032:	bfd8      	it	le
 23fd034:	fb01 f909 	mulle.w	r9, r1, r9
 23fd038:	e7f5      	b.n	23fd026 <_strtod_l+0x25e>
 23fd03a:	2d10      	cmp	r5, #16
 23fd03c:	bfdc      	itt	le
 23fd03e:	230a      	movle	r3, #10
 23fd040:	fb03 2909 	mlale	r9, r3, r9, r2
 23fd044:	e7e1      	b.n	23fd00a <_strtod_l+0x242>
 23fd046:	2300      	movs	r3, #0
 23fd048:	9305      	str	r3, [sp, #20]
 23fd04a:	2301      	movs	r3, #1
 23fd04c:	e77c      	b.n	23fcf48 <_strtod_l+0x180>
 23fd04e:	f04f 0c00 	mov.w	ip, #0
 23fd052:	f108 0202 	add.w	r2, r8, #2
 23fd056:	9217      	str	r2, [sp, #92]	; 0x5c
 23fd058:	f898 2002 	ldrb.w	r2, [r8, #2]
 23fd05c:	e785      	b.n	23fcf6a <_strtod_l+0x1a2>
 23fd05e:	f04f 0c01 	mov.w	ip, #1
 23fd062:	e7f6      	b.n	23fd052 <_strtod_l+0x28a>
 23fd064:	023ffe54 	.word	0x023ffe54
 23fd068:	023ffc90 	.word	0x023ffc90
 23fd06c:	7ff00000 	.word	0x7ff00000
 23fd070:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fd072:	1c51      	adds	r1, r2, #1
 23fd074:	9117      	str	r1, [sp, #92]	; 0x5c
 23fd076:	7852      	ldrb	r2, [r2, #1]
 23fd078:	2a30      	cmp	r2, #48	; 0x30
 23fd07a:	d0f9      	beq.n	23fd070 <_strtod_l+0x2a8>
 23fd07c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 23fd080:	2908      	cmp	r1, #8
 23fd082:	f63f af79 	bhi.w	23fcf78 <_strtod_l+0x1b0>
 23fd086:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 23fd08a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fd08c:	9206      	str	r2, [sp, #24]
 23fd08e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fd090:	1c51      	adds	r1, r2, #1
 23fd092:	9117      	str	r1, [sp, #92]	; 0x5c
 23fd094:	7852      	ldrb	r2, [r2, #1]
 23fd096:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 23fd09a:	2e09      	cmp	r6, #9
 23fd09c:	d937      	bls.n	23fd10e <_strtod_l+0x346>
 23fd09e:	9e06      	ldr	r6, [sp, #24]
 23fd0a0:	1b89      	subs	r1, r1, r6
 23fd0a2:	f644 661f 	movw	r6, #19999	; 0x4e1f
 23fd0a6:	2908      	cmp	r1, #8
 23fd0a8:	dc02      	bgt.n	23fd0b0 <_strtod_l+0x2e8>
 23fd0aa:	4576      	cmp	r6, lr
 23fd0ac:	bfa8      	it	ge
 23fd0ae:	4676      	movge	r6, lr
 23fd0b0:	f1bc 0f00 	cmp.w	ip, #0
 23fd0b4:	d000      	beq.n	23fd0b8 <_strtod_l+0x2f0>
 23fd0b6:	4276      	negs	r6, r6
 23fd0b8:	2d00      	cmp	r5, #0
 23fd0ba:	d14d      	bne.n	23fd158 <_strtod_l+0x390>
 23fd0bc:	9904      	ldr	r1, [sp, #16]
 23fd0be:	4301      	orrs	r1, r0
 23fd0c0:	f47f aec6 	bne.w	23fce50 <_strtod_l+0x88>
 23fd0c4:	2b00      	cmp	r3, #0
 23fd0c6:	f47f aee1 	bne.w	23fce8c <_strtod_l+0xc4>
 23fd0ca:	2a69      	cmp	r2, #105	; 0x69
 23fd0cc:	d027      	beq.n	23fd11e <_strtod_l+0x356>
 23fd0ce:	dc24      	bgt.n	23fd11a <_strtod_l+0x352>
 23fd0d0:	2a49      	cmp	r2, #73	; 0x49
 23fd0d2:	d024      	beq.n	23fd11e <_strtod_l+0x356>
 23fd0d4:	2a4e      	cmp	r2, #78	; 0x4e
 23fd0d6:	f47f aed9 	bne.w	23fce8c <_strtod_l+0xc4>
 23fd0da:	499f      	ldr	r1, [pc, #636]	; (23fd358 <_strtod_l+0x590>)
 23fd0dc:	a817      	add	r0, sp, #92	; 0x5c
 23fd0de:	f001 f839 	bl	23fe154 <__match>
 23fd0e2:	2800      	cmp	r0, #0
 23fd0e4:	f43f aed2 	beq.w	23fce8c <_strtod_l+0xc4>
 23fd0e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd0ea:	781b      	ldrb	r3, [r3, #0]
 23fd0ec:	2b28      	cmp	r3, #40	; 0x28
 23fd0ee:	d12d      	bne.n	23fd14c <_strtod_l+0x384>
 23fd0f0:	aa1a      	add	r2, sp, #104	; 0x68
 23fd0f2:	499a      	ldr	r1, [pc, #616]	; (23fd35c <_strtod_l+0x594>)
 23fd0f4:	a817      	add	r0, sp, #92	; 0x5c
 23fd0f6:	f001 f841 	bl	23fe17c <__hexnan>
 23fd0fa:	2805      	cmp	r0, #5
 23fd0fc:	d126      	bne.n	23fd14c <_strtod_l+0x384>
 23fd0fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 23fd100:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 23fd104:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 23fd108:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 23fd10c:	e6a0      	b.n	23fce50 <_strtod_l+0x88>
 23fd10e:	210a      	movs	r1, #10
 23fd110:	fb01 2e0e 	mla	lr, r1, lr, r2
 23fd114:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 23fd118:	e7b9      	b.n	23fd08e <_strtod_l+0x2c6>
 23fd11a:	2a6e      	cmp	r2, #110	; 0x6e
 23fd11c:	e7db      	b.n	23fd0d6 <_strtod_l+0x30e>
 23fd11e:	4990      	ldr	r1, [pc, #576]	; (23fd360 <_strtod_l+0x598>)
 23fd120:	a817      	add	r0, sp, #92	; 0x5c
 23fd122:	f001 f817 	bl	23fe154 <__match>
 23fd126:	2800      	cmp	r0, #0
 23fd128:	f43f aeb0 	beq.w	23fce8c <_strtod_l+0xc4>
 23fd12c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd12e:	a817      	add	r0, sp, #92	; 0x5c
 23fd130:	498c      	ldr	r1, [pc, #560]	; (23fd364 <_strtod_l+0x59c>)
 23fd132:	3b01      	subs	r3, #1
 23fd134:	9317      	str	r3, [sp, #92]	; 0x5c
 23fd136:	f001 f80d 	bl	23fe154 <__match>
 23fd13a:	b910      	cbnz	r0, 23fd142 <_strtod_l+0x37a>
 23fd13c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd13e:	3301      	adds	r3, #1
 23fd140:	9317      	str	r3, [sp, #92]	; 0x5c
 23fd142:	f8df b230 	ldr.w	fp, [pc, #560]	; 23fd374 <_strtod_l+0x5ac>
 23fd146:	f04f 0a00 	mov.w	sl, #0
 23fd14a:	e681      	b.n	23fce50 <_strtod_l+0x88>
 23fd14c:	4886      	ldr	r0, [pc, #536]	; (23fd368 <_strtod_l+0x5a0>)
 23fd14e:	f7ff fbeb 	bl	23fc928 <nan>
 23fd152:	ec5b ab10 	vmov	sl, fp, d0
 23fd156:	e67b      	b.n	23fce50 <_strtod_l+0x88>
 23fd158:	9b05      	ldr	r3, [sp, #20]
 23fd15a:	2f00      	cmp	r7, #0
 23fd15c:	bf08      	it	eq
 23fd15e:	462f      	moveq	r7, r5
 23fd160:	2d10      	cmp	r5, #16
 23fd162:	9807      	ldr	r0, [sp, #28]
 23fd164:	eba6 0303 	sub.w	r3, r6, r3
 23fd168:	46a8      	mov	r8, r5
 23fd16a:	bfa8      	it	ge
 23fd16c:	f04f 0810 	movge.w	r8, #16
 23fd170:	9306      	str	r3, [sp, #24]
 23fd172:	f7f5 fe1b 	bl	23f2dac <__aeabi_ui2d>
 23fd176:	2d09      	cmp	r5, #9
 23fd178:	4682      	mov	sl, r0
 23fd17a:	468b      	mov	fp, r1
 23fd17c:	dd13      	ble.n	23fd1a6 <_strtod_l+0x3de>
 23fd17e:	4b7b      	ldr	r3, [pc, #492]	; (23fd36c <_strtod_l+0x5a4>)
 23fd180:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 23fd184:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 23fd188:	f7f5 fe8a 	bl	23f2ea0 <__aeabi_dmul>
 23fd18c:	4682      	mov	sl, r0
 23fd18e:	468b      	mov	fp, r1
 23fd190:	4648      	mov	r0, r9
 23fd192:	f7f5 fe0b 	bl	23f2dac <__aeabi_ui2d>
 23fd196:	4602      	mov	r2, r0
 23fd198:	460b      	mov	r3, r1
 23fd19a:	4650      	mov	r0, sl
 23fd19c:	4659      	mov	r1, fp
 23fd19e:	f7f5 fcc9 	bl	23f2b34 <__adddf3>
 23fd1a2:	4682      	mov	sl, r0
 23fd1a4:	468b      	mov	fp, r1
 23fd1a6:	2d0f      	cmp	r5, #15
 23fd1a8:	dc38      	bgt.n	23fd21c <_strtod_l+0x454>
 23fd1aa:	9b06      	ldr	r3, [sp, #24]
 23fd1ac:	2b00      	cmp	r3, #0
 23fd1ae:	f43f ae4f 	beq.w	23fce50 <_strtod_l+0x88>
 23fd1b2:	dd24      	ble.n	23fd1fe <_strtod_l+0x436>
 23fd1b4:	2b16      	cmp	r3, #22
 23fd1b6:	dc0b      	bgt.n	23fd1d0 <_strtod_l+0x408>
 23fd1b8:	496c      	ldr	r1, [pc, #432]	; (23fd36c <_strtod_l+0x5a4>)
 23fd1ba:	4652      	mov	r2, sl
 23fd1bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 23fd1c0:	465b      	mov	r3, fp
 23fd1c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fd1c6:	f7f5 fe6b 	bl	23f2ea0 <__aeabi_dmul>
 23fd1ca:	4682      	mov	sl, r0
 23fd1cc:	468b      	mov	fp, r1
 23fd1ce:	e63f      	b.n	23fce50 <_strtod_l+0x88>
 23fd1d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 23fd1d4:	9a06      	ldr	r2, [sp, #24]
 23fd1d6:	4293      	cmp	r3, r2
 23fd1d8:	db20      	blt.n	23fd21c <_strtod_l+0x454>
 23fd1da:	f1c5 050f 	rsb	r5, r5, #15
 23fd1de:	4c63      	ldr	r4, [pc, #396]	; (23fd36c <_strtod_l+0x5a4>)
 23fd1e0:	4652      	mov	r2, sl
 23fd1e2:	465b      	mov	r3, fp
 23fd1e4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 23fd1e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fd1ec:	f7f5 fe58 	bl	23f2ea0 <__aeabi_dmul>
 23fd1f0:	9b06      	ldr	r3, [sp, #24]
 23fd1f2:	1b5d      	subs	r5, r3, r5
 23fd1f4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 23fd1f8:	e9d4 2300 	ldrd	r2, r3, [r4]
 23fd1fc:	e7e3      	b.n	23fd1c6 <_strtod_l+0x3fe>
 23fd1fe:	9b06      	ldr	r3, [sp, #24]
 23fd200:	3316      	adds	r3, #22
 23fd202:	db0b      	blt.n	23fd21c <_strtod_l+0x454>
 23fd204:	9b05      	ldr	r3, [sp, #20]
 23fd206:	4650      	mov	r0, sl
 23fd208:	4659      	mov	r1, fp
 23fd20a:	1b9e      	subs	r6, r3, r6
 23fd20c:	4b57      	ldr	r3, [pc, #348]	; (23fd36c <_strtod_l+0x5a4>)
 23fd20e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 23fd212:	e9d6 2300 	ldrd	r2, r3, [r6]
 23fd216:	f7f5 ff6d 	bl	23f30f4 <__aeabi_ddiv>
 23fd21a:	e7d6      	b.n	23fd1ca <_strtod_l+0x402>
 23fd21c:	eba5 0808 	sub.w	r8, r5, r8
 23fd220:	9b06      	ldr	r3, [sp, #24]
 23fd222:	4498      	add	r8, r3
 23fd224:	f1b8 0f00 	cmp.w	r8, #0
 23fd228:	dd74      	ble.n	23fd314 <_strtod_l+0x54c>
 23fd22a:	f018 030f 	ands.w	r3, r8, #15
 23fd22e:	d00a      	beq.n	23fd246 <_strtod_l+0x47e>
 23fd230:	494e      	ldr	r1, [pc, #312]	; (23fd36c <_strtod_l+0x5a4>)
 23fd232:	4652      	mov	r2, sl
 23fd234:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 23fd238:	465b      	mov	r3, fp
 23fd23a:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fd23e:	f7f5 fe2f 	bl	23f2ea0 <__aeabi_dmul>
 23fd242:	4682      	mov	sl, r0
 23fd244:	468b      	mov	fp, r1
 23fd246:	f038 080f 	bics.w	r8, r8, #15
 23fd24a:	d04f      	beq.n	23fd2ec <_strtod_l+0x524>
 23fd24c:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 23fd250:	dd22      	ble.n	23fd298 <_strtod_l+0x4d0>
 23fd252:	2500      	movs	r5, #0
 23fd254:	462e      	mov	r6, r5
 23fd256:	9507      	str	r5, [sp, #28]
 23fd258:	9505      	str	r5, [sp, #20]
 23fd25a:	2322      	movs	r3, #34	; 0x22
 23fd25c:	f8df b114 	ldr.w	fp, [pc, #276]	; 23fd374 <_strtod_l+0x5ac>
 23fd260:	f04f 0a00 	mov.w	sl, #0
 23fd264:	6023      	str	r3, [r4, #0]
 23fd266:	9b07      	ldr	r3, [sp, #28]
 23fd268:	2b00      	cmp	r3, #0
 23fd26a:	f43f adf1 	beq.w	23fce50 <_strtod_l+0x88>
 23fd26e:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fd270:	4620      	mov	r0, r4
 23fd272:	f001 f875 	bl	23fe360 <_Bfree>
 23fd276:	9905      	ldr	r1, [sp, #20]
 23fd278:	4620      	mov	r0, r4
 23fd27a:	f001 f871 	bl	23fe360 <_Bfree>
 23fd27e:	4631      	mov	r1, r6
 23fd280:	4620      	mov	r0, r4
 23fd282:	f001 f86d 	bl	23fe360 <_Bfree>
 23fd286:	9907      	ldr	r1, [sp, #28]
 23fd288:	4620      	mov	r0, r4
 23fd28a:	f001 f869 	bl	23fe360 <_Bfree>
 23fd28e:	4629      	mov	r1, r5
 23fd290:	4620      	mov	r0, r4
 23fd292:	f001 f865 	bl	23fe360 <_Bfree>
 23fd296:	e5db      	b.n	23fce50 <_strtod_l+0x88>
 23fd298:	4b35      	ldr	r3, [pc, #212]	; (23fd370 <_strtod_l+0x5a8>)
 23fd29a:	ea4f 1828 	mov.w	r8, r8, asr #4
 23fd29e:	4650      	mov	r0, sl
 23fd2a0:	4659      	mov	r1, fp
 23fd2a2:	9304      	str	r3, [sp, #16]
 23fd2a4:	2300      	movs	r3, #0
 23fd2a6:	4699      	mov	r9, r3
 23fd2a8:	f1b8 0f01 	cmp.w	r8, #1
 23fd2ac:	dc21      	bgt.n	23fd2f2 <_strtod_l+0x52a>
 23fd2ae:	b10b      	cbz	r3, 23fd2b4 <_strtod_l+0x4ec>
 23fd2b0:	4682      	mov	sl, r0
 23fd2b2:	468b      	mov	fp, r1
 23fd2b4:	4b2e      	ldr	r3, [pc, #184]	; (23fd370 <_strtod_l+0x5a8>)
 23fd2b6:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 23fd2ba:	4652      	mov	r2, sl
 23fd2bc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 23fd2c0:	465b      	mov	r3, fp
 23fd2c2:	e9d9 0100 	ldrd	r0, r1, [r9]
 23fd2c6:	f7f5 fdeb 	bl	23f2ea0 <__aeabi_dmul>
 23fd2ca:	4b2a      	ldr	r3, [pc, #168]	; (23fd374 <_strtod_l+0x5ac>)
 23fd2cc:	460a      	mov	r2, r1
 23fd2ce:	4682      	mov	sl, r0
 23fd2d0:	400b      	ands	r3, r1
 23fd2d2:	4929      	ldr	r1, [pc, #164]	; (23fd378 <_strtod_l+0x5b0>)
 23fd2d4:	428b      	cmp	r3, r1
 23fd2d6:	d8bc      	bhi.n	23fd252 <_strtod_l+0x48a>
 23fd2d8:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 23fd2dc:	428b      	cmp	r3, r1
 23fd2de:	bf86      	itte	hi
 23fd2e0:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 23fd37c <_strtod_l+0x5b4>
 23fd2e4:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 23fd2e8:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 23fd2ec:	2300      	movs	r3, #0
 23fd2ee:	9304      	str	r3, [sp, #16]
 23fd2f0:	e083      	b.n	23fd3fa <_strtod_l+0x632>
 23fd2f2:	f018 0f01 	tst.w	r8, #1
 23fd2f6:	d005      	beq.n	23fd304 <_strtod_l+0x53c>
 23fd2f8:	9b04      	ldr	r3, [sp, #16]
 23fd2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd2fe:	f7f5 fdcf 	bl	23f2ea0 <__aeabi_dmul>
 23fd302:	2301      	movs	r3, #1
 23fd304:	9a04      	ldr	r2, [sp, #16]
 23fd306:	f109 0901 	add.w	r9, r9, #1
 23fd30a:	ea4f 0868 	mov.w	r8, r8, asr #1
 23fd30e:	3208      	adds	r2, #8
 23fd310:	9204      	str	r2, [sp, #16]
 23fd312:	e7c9      	b.n	23fd2a8 <_strtod_l+0x4e0>
 23fd314:	d0ea      	beq.n	23fd2ec <_strtod_l+0x524>
 23fd316:	f1c8 0800 	rsb	r8, r8, #0
 23fd31a:	f018 020f 	ands.w	r2, r8, #15
 23fd31e:	d00a      	beq.n	23fd336 <_strtod_l+0x56e>
 23fd320:	4b12      	ldr	r3, [pc, #72]	; (23fd36c <_strtod_l+0x5a4>)
 23fd322:	4650      	mov	r0, sl
 23fd324:	4659      	mov	r1, fp
 23fd326:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 23fd32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd32e:	f7f5 fee1 	bl	23f30f4 <__aeabi_ddiv>
 23fd332:	4682      	mov	sl, r0
 23fd334:	468b      	mov	fp, r1
 23fd336:	ea5f 1828 	movs.w	r8, r8, asr #4
 23fd33a:	d0d7      	beq.n	23fd2ec <_strtod_l+0x524>
 23fd33c:	f1b8 0f1f 	cmp.w	r8, #31
 23fd340:	dd1e      	ble.n	23fd380 <_strtod_l+0x5b8>
 23fd342:	2500      	movs	r5, #0
 23fd344:	462e      	mov	r6, r5
 23fd346:	9507      	str	r5, [sp, #28]
 23fd348:	9505      	str	r5, [sp, #20]
 23fd34a:	2322      	movs	r3, #34	; 0x22
 23fd34c:	f04f 0a00 	mov.w	sl, #0
 23fd350:	f04f 0b00 	mov.w	fp, #0
 23fd354:	6023      	str	r3, [r4, #0]
 23fd356:	e786      	b.n	23fd266 <_strtod_l+0x49e>
 23fd358:	023ffc8a 	.word	0x023ffc8a
 23fd35c:	023ffca4 	.word	0x023ffca4
 23fd360:	023ffc81 	.word	0x023ffc81
 23fd364:	023ffc84 	.word	0x023ffc84
 23fd368:	023ff87d 	.word	0x023ff87d
 23fd36c:	023ffef0 	.word	0x023ffef0
 23fd370:	023ffec8 	.word	0x023ffec8
 23fd374:	7ff00000 	.word	0x7ff00000
 23fd378:	7ca00000 	.word	0x7ca00000
 23fd37c:	7fefffff 	.word	0x7fefffff
 23fd380:	f018 0310 	ands.w	r3, r8, #16
 23fd384:	4650      	mov	r0, sl
 23fd386:	4659      	mov	r1, fp
 23fd388:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 23fd734 <_strtod_l+0x96c>
 23fd38c:	bf18      	it	ne
 23fd38e:	236a      	movne	r3, #106	; 0x6a
 23fd390:	9304      	str	r3, [sp, #16]
 23fd392:	2300      	movs	r3, #0
 23fd394:	f018 0f01 	tst.w	r8, #1
 23fd398:	d004      	beq.n	23fd3a4 <_strtod_l+0x5dc>
 23fd39a:	e9d9 2300 	ldrd	r2, r3, [r9]
 23fd39e:	f7f5 fd7f 	bl	23f2ea0 <__aeabi_dmul>
 23fd3a2:	2301      	movs	r3, #1
 23fd3a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 23fd3a8:	f109 0908 	add.w	r9, r9, #8
 23fd3ac:	d1f2      	bne.n	23fd394 <_strtod_l+0x5cc>
 23fd3ae:	b10b      	cbz	r3, 23fd3b4 <_strtod_l+0x5ec>
 23fd3b0:	4682      	mov	sl, r0
 23fd3b2:	468b      	mov	fp, r1
 23fd3b4:	9b04      	ldr	r3, [sp, #16]
 23fd3b6:	b1c3      	cbz	r3, 23fd3ea <_strtod_l+0x622>
 23fd3b8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 23fd3bc:	4659      	mov	r1, fp
 23fd3be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 23fd3c2:	2b00      	cmp	r3, #0
 23fd3c4:	dd11      	ble.n	23fd3ea <_strtod_l+0x622>
 23fd3c6:	2b1f      	cmp	r3, #31
 23fd3c8:	f340 8121 	ble.w	23fd60e <_strtod_l+0x846>
 23fd3cc:	2b34      	cmp	r3, #52	; 0x34
 23fd3ce:	f04f 0a00 	mov.w	sl, #0
 23fd3d2:	bfdb      	ittet	le
 23fd3d4:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 23fd3d8:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 23fd3dc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 23fd3e0:	fa03 f202 	lslle.w	r2, r3, r2
 23fd3e4:	bfd8      	it	le
 23fd3e6:	ea02 0b01 	andle.w	fp, r2, r1
 23fd3ea:	2200      	movs	r2, #0
 23fd3ec:	2300      	movs	r3, #0
 23fd3ee:	4650      	mov	r0, sl
 23fd3f0:	4659      	mov	r1, fp
 23fd3f2:	f7f5 ffbd 	bl	23f3370 <__aeabi_dcmpeq>
 23fd3f6:	2800      	cmp	r0, #0
 23fd3f8:	d1a3      	bne.n	23fd342 <_strtod_l+0x57a>
 23fd3fa:	9b07      	ldr	r3, [sp, #28]
 23fd3fc:	463a      	mov	r2, r7
 23fd3fe:	9908      	ldr	r1, [sp, #32]
 23fd400:	4620      	mov	r0, r4
 23fd402:	9300      	str	r3, [sp, #0]
 23fd404:	462b      	mov	r3, r5
 23fd406:	f001 f815 	bl	23fe434 <__s2b>
 23fd40a:	9007      	str	r0, [sp, #28]
 23fd40c:	2800      	cmp	r0, #0
 23fd40e:	f43f af20 	beq.w	23fd252 <_strtod_l+0x48a>
 23fd412:	9b05      	ldr	r3, [sp, #20]
 23fd414:	2500      	movs	r5, #0
 23fd416:	1b9e      	subs	r6, r3, r6
 23fd418:	9b06      	ldr	r3, [sp, #24]
 23fd41a:	2b00      	cmp	r3, #0
 23fd41c:	bfb4      	ite	lt
 23fd41e:	4633      	movlt	r3, r6
 23fd420:	2300      	movge	r3, #0
 23fd422:	462e      	mov	r6, r5
 23fd424:	930c      	str	r3, [sp, #48]	; 0x30
 23fd426:	9b06      	ldr	r3, [sp, #24]
 23fd428:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 23fd42c:	9312      	str	r3, [sp, #72]	; 0x48
 23fd42e:	9b07      	ldr	r3, [sp, #28]
 23fd430:	4620      	mov	r0, r4
 23fd432:	6859      	ldr	r1, [r3, #4]
 23fd434:	f000 ff54 	bl	23fe2e0 <_Balloc>
 23fd438:	9005      	str	r0, [sp, #20]
 23fd43a:	2800      	cmp	r0, #0
 23fd43c:	f43f af0d 	beq.w	23fd25a <_strtod_l+0x492>
 23fd440:	9b07      	ldr	r3, [sp, #28]
 23fd442:	300c      	adds	r0, #12
 23fd444:	691a      	ldr	r2, [r3, #16]
 23fd446:	f103 010c 	add.w	r1, r3, #12
 23fd44a:	3202      	adds	r2, #2
 23fd44c:	0092      	lsls	r2, r2, #2
 23fd44e:	f7ff fbe7 	bl	23fcc20 <memcpy>
 23fd452:	aa1a      	add	r2, sp, #104	; 0x68
 23fd454:	a919      	add	r1, sp, #100	; 0x64
 23fd456:	4620      	mov	r0, r4
 23fd458:	ec4b ab10 	vmov	d0, sl, fp
 23fd45c:	f001 fb32 	bl	23feac4 <__d2b>
 23fd460:	9018      	str	r0, [sp, #96]	; 0x60
 23fd462:	ec4b ab18 	vmov	d8, sl, fp
 23fd466:	2800      	cmp	r0, #0
 23fd468:	f43f aef7 	beq.w	23fd25a <_strtod_l+0x492>
 23fd46c:	2101      	movs	r1, #1
 23fd46e:	4620      	mov	r0, r4
 23fd470:	f001 f87a 	bl	23fe568 <__i2b>
 23fd474:	4606      	mov	r6, r0
 23fd476:	2800      	cmp	r0, #0
 23fd478:	f43f aeef 	beq.w	23fd25a <_strtod_l+0x492>
 23fd47c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 23fd47e:	9904      	ldr	r1, [sp, #16]
 23fd480:	2b00      	cmp	r3, #0
 23fd482:	eba3 0801 	sub.w	r8, r3, r1
 23fd486:	bfa9      	itett	ge
 23fd488:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 23fd48a:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 23fd48c:	eb03 0902 	addge.w	r9, r3, r2
 23fd490:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 23fd492:	bfb8      	it	lt
 23fd494:	1ad7      	sublt	r7, r2, r3
 23fd496:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 23fd498:	4ba1      	ldr	r3, [pc, #644]	; (23fd720 <_strtod_l+0x958>)
 23fd49a:	4490      	add	r8, r2
 23fd49c:	bfb8      	it	lt
 23fd49e:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 23fd4a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 23fd4a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fd4aa:	4598      	cmp	r8, r3
 23fd4ac:	f280 80c3 	bge.w	23fd636 <_strtod_l+0x86e>
 23fd4b0:	eba3 0308 	sub.w	r3, r3, r8
 23fd4b4:	2101      	movs	r1, #1
 23fd4b6:	2b1f      	cmp	r3, #31
 23fd4b8:	eba2 0203 	sub.w	r2, r2, r3
 23fd4bc:	f300 80ae 	bgt.w	23fd61c <_strtod_l+0x854>
 23fd4c0:	fa01 f303 	lsl.w	r3, r1, r3
 23fd4c4:	930d      	str	r3, [sp, #52]	; 0x34
 23fd4c6:	2300      	movs	r3, #0
 23fd4c8:	9308      	str	r3, [sp, #32]
 23fd4ca:	eb09 0802 	add.w	r8, r9, r2
 23fd4ce:	9b04      	ldr	r3, [sp, #16]
 23fd4d0:	4417      	add	r7, r2
 23fd4d2:	45c1      	cmp	r9, r8
 23fd4d4:	441f      	add	r7, r3
 23fd4d6:	464b      	mov	r3, r9
 23fd4d8:	bfa8      	it	ge
 23fd4da:	4643      	movge	r3, r8
 23fd4dc:	42bb      	cmp	r3, r7
 23fd4de:	bfa8      	it	ge
 23fd4e0:	463b      	movge	r3, r7
 23fd4e2:	2b00      	cmp	r3, #0
 23fd4e4:	bfc2      	ittt	gt
 23fd4e6:	eba8 0803 	subgt.w	r8, r8, r3
 23fd4ea:	1aff      	subgt	r7, r7, r3
 23fd4ec:	eba9 0903 	subgt.w	r9, r9, r3
 23fd4f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fd4f2:	2b00      	cmp	r3, #0
 23fd4f4:	dd17      	ble.n	23fd526 <_strtod_l+0x75e>
 23fd4f6:	4631      	mov	r1, r6
 23fd4f8:	461a      	mov	r2, r3
 23fd4fa:	4620      	mov	r0, r4
 23fd4fc:	f001 f8f2 	bl	23fe6e4 <__pow5mult>
 23fd500:	4606      	mov	r6, r0
 23fd502:	2800      	cmp	r0, #0
 23fd504:	f43f aea9 	beq.w	23fd25a <_strtod_l+0x492>
 23fd508:	4601      	mov	r1, r0
 23fd50a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 23fd50c:	4620      	mov	r0, r4
 23fd50e:	f001 f841 	bl	23fe594 <__multiply>
 23fd512:	900b      	str	r0, [sp, #44]	; 0x2c
 23fd514:	2800      	cmp	r0, #0
 23fd516:	f43f aea0 	beq.w	23fd25a <_strtod_l+0x492>
 23fd51a:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fd51c:	4620      	mov	r0, r4
 23fd51e:	f000 ff1f 	bl	23fe360 <_Bfree>
 23fd522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fd524:	9318      	str	r3, [sp, #96]	; 0x60
 23fd526:	f1b8 0f00 	cmp.w	r8, #0
 23fd52a:	f300 8089 	bgt.w	23fd640 <_strtod_l+0x878>
 23fd52e:	9b06      	ldr	r3, [sp, #24]
 23fd530:	2b00      	cmp	r3, #0
 23fd532:	dd08      	ble.n	23fd546 <_strtod_l+0x77e>
 23fd534:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23fd536:	4620      	mov	r0, r4
 23fd538:	9905      	ldr	r1, [sp, #20]
 23fd53a:	f001 f8d3 	bl	23fe6e4 <__pow5mult>
 23fd53e:	9005      	str	r0, [sp, #20]
 23fd540:	2800      	cmp	r0, #0
 23fd542:	f43f ae8a 	beq.w	23fd25a <_strtod_l+0x492>
 23fd546:	2f00      	cmp	r7, #0
 23fd548:	dd08      	ble.n	23fd55c <_strtod_l+0x794>
 23fd54a:	463a      	mov	r2, r7
 23fd54c:	9905      	ldr	r1, [sp, #20]
 23fd54e:	4620      	mov	r0, r4
 23fd550:	f001 f922 	bl	23fe798 <__lshift>
 23fd554:	9005      	str	r0, [sp, #20]
 23fd556:	2800      	cmp	r0, #0
 23fd558:	f43f ae7f 	beq.w	23fd25a <_strtod_l+0x492>
 23fd55c:	f1b9 0f00 	cmp.w	r9, #0
 23fd560:	dd08      	ble.n	23fd574 <_strtod_l+0x7ac>
 23fd562:	4631      	mov	r1, r6
 23fd564:	464a      	mov	r2, r9
 23fd566:	4620      	mov	r0, r4
 23fd568:	f001 f916 	bl	23fe798 <__lshift>
 23fd56c:	4606      	mov	r6, r0
 23fd56e:	2800      	cmp	r0, #0
 23fd570:	f43f ae73 	beq.w	23fd25a <_strtod_l+0x492>
 23fd574:	9a05      	ldr	r2, [sp, #20]
 23fd576:	4620      	mov	r0, r4
 23fd578:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fd57a:	f001 f999 	bl	23fe8b0 <__mdiff>
 23fd57e:	4605      	mov	r5, r0
 23fd580:	2800      	cmp	r0, #0
 23fd582:	f43f ae6a 	beq.w	23fd25a <_strtod_l+0x492>
 23fd586:	68c3      	ldr	r3, [r0, #12]
 23fd588:	4631      	mov	r1, r6
 23fd58a:	930b      	str	r3, [sp, #44]	; 0x2c
 23fd58c:	2300      	movs	r3, #0
 23fd58e:	60c3      	str	r3, [r0, #12]
 23fd590:	f001 f972 	bl	23fe878 <__mcmp>
 23fd594:	2800      	cmp	r0, #0
 23fd596:	da5d      	bge.n	23fd654 <_strtod_l+0x88c>
 23fd598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fd59a:	ea53 030a 	orrs.w	r3, r3, sl
 23fd59e:	d17f      	bne.n	23fd6a0 <_strtod_l+0x8d8>
 23fd5a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fd5a4:	2b00      	cmp	r3, #0
 23fd5a6:	d17b      	bne.n	23fd6a0 <_strtod_l+0x8d8>
 23fd5a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23fd5ac:	0d1b      	lsrs	r3, r3, #20
 23fd5ae:	051b      	lsls	r3, r3, #20
 23fd5b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 23fd5b4:	d974      	bls.n	23fd6a0 <_strtod_l+0x8d8>
 23fd5b6:	696b      	ldr	r3, [r5, #20]
 23fd5b8:	b913      	cbnz	r3, 23fd5c0 <_strtod_l+0x7f8>
 23fd5ba:	692b      	ldr	r3, [r5, #16]
 23fd5bc:	2b01      	cmp	r3, #1
 23fd5be:	dd6f      	ble.n	23fd6a0 <_strtod_l+0x8d8>
 23fd5c0:	4629      	mov	r1, r5
 23fd5c2:	2201      	movs	r2, #1
 23fd5c4:	4620      	mov	r0, r4
 23fd5c6:	f001 f8e7 	bl	23fe798 <__lshift>
 23fd5ca:	4631      	mov	r1, r6
 23fd5cc:	4605      	mov	r5, r0
 23fd5ce:	f001 f953 	bl	23fe878 <__mcmp>
 23fd5d2:	2800      	cmp	r0, #0
 23fd5d4:	dd64      	ble.n	23fd6a0 <_strtod_l+0x8d8>
 23fd5d6:	9904      	ldr	r1, [sp, #16]
 23fd5d8:	465b      	mov	r3, fp
 23fd5da:	4a52      	ldr	r2, [pc, #328]	; (23fd724 <_strtod_l+0x95c>)
 23fd5dc:	2900      	cmp	r1, #0
 23fd5de:	d07f      	beq.n	23fd6e0 <_strtod_l+0x918>
 23fd5e0:	ea02 010b 	and.w	r1, r2, fp
 23fd5e4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 23fd5e8:	dc7a      	bgt.n	23fd6e0 <_strtod_l+0x918>
 23fd5ea:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 23fd5ee:	f77f aeac 	ble.w	23fd34a <_strtod_l+0x582>
 23fd5f2:	4b4d      	ldr	r3, [pc, #308]	; (23fd728 <_strtod_l+0x960>)
 23fd5f4:	4650      	mov	r0, sl
 23fd5f6:	4659      	mov	r1, fp
 23fd5f8:	2200      	movs	r2, #0
 23fd5fa:	f7f5 fc51 	bl	23f2ea0 <__aeabi_dmul>
 23fd5fe:	460b      	mov	r3, r1
 23fd600:	4682      	mov	sl, r0
 23fd602:	468b      	mov	fp, r1
 23fd604:	4303      	orrs	r3, r0
 23fd606:	bf04      	itt	eq
 23fd608:	2322      	moveq	r3, #34	; 0x22
 23fd60a:	6023      	streq	r3, [r4, #0]
 23fd60c:	e62f      	b.n	23fd26e <_strtod_l+0x4a6>
 23fd60e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fd612:	fa02 f303 	lsl.w	r3, r2, r3
 23fd616:	ea03 0a0a 	and.w	sl, r3, sl
 23fd61a:	e6e6      	b.n	23fd3ea <_strtod_l+0x622>
 23fd61c:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 23fd620:	910d      	str	r1, [sp, #52]	; 0x34
 23fd622:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 23fd626:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 23fd62a:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 23fd62e:	fa01 f308 	lsl.w	r3, r1, r8
 23fd632:	9308      	str	r3, [sp, #32]
 23fd634:	e749      	b.n	23fd4ca <_strtod_l+0x702>
 23fd636:	2300      	movs	r3, #0
 23fd638:	9308      	str	r3, [sp, #32]
 23fd63a:	2301      	movs	r3, #1
 23fd63c:	930d      	str	r3, [sp, #52]	; 0x34
 23fd63e:	e744      	b.n	23fd4ca <_strtod_l+0x702>
 23fd640:	4642      	mov	r2, r8
 23fd642:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fd644:	4620      	mov	r0, r4
 23fd646:	f001 f8a7 	bl	23fe798 <__lshift>
 23fd64a:	9018      	str	r0, [sp, #96]	; 0x60
 23fd64c:	2800      	cmp	r0, #0
 23fd64e:	f47f af6e 	bne.w	23fd52e <_strtod_l+0x766>
 23fd652:	e602      	b.n	23fd25a <_strtod_l+0x492>
 23fd654:	465f      	mov	r7, fp
 23fd656:	d16f      	bne.n	23fd738 <_strtod_l+0x970>
 23fd658:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fd65a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fd65e:	b342      	cbz	r2, 23fd6b2 <_strtod_l+0x8ea>
 23fd660:	4a32      	ldr	r2, [pc, #200]	; (23fd72c <_strtod_l+0x964>)
 23fd662:	4293      	cmp	r3, r2
 23fd664:	d128      	bne.n	23fd6b8 <_strtod_l+0x8f0>
 23fd666:	9b04      	ldr	r3, [sp, #16]
 23fd668:	4651      	mov	r1, sl
 23fd66a:	b1eb      	cbz	r3, 23fd6a8 <_strtod_l+0x8e0>
 23fd66c:	4b2d      	ldr	r3, [pc, #180]	; (23fd724 <_strtod_l+0x95c>)
 23fd66e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fd672:	403b      	ands	r3, r7
 23fd674:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 23fd678:	d819      	bhi.n	23fd6ae <_strtod_l+0x8e6>
 23fd67a:	0d1b      	lsrs	r3, r3, #20
 23fd67c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 23fd680:	fa02 f303 	lsl.w	r3, r2, r3
 23fd684:	4299      	cmp	r1, r3
 23fd686:	d117      	bne.n	23fd6b8 <_strtod_l+0x8f0>
 23fd688:	4b29      	ldr	r3, [pc, #164]	; (23fd730 <_strtod_l+0x968>)
 23fd68a:	429f      	cmp	r7, r3
 23fd68c:	d102      	bne.n	23fd694 <_strtod_l+0x8cc>
 23fd68e:	3101      	adds	r1, #1
 23fd690:	f43f ade3 	beq.w	23fd25a <_strtod_l+0x492>
 23fd694:	4b23      	ldr	r3, [pc, #140]	; (23fd724 <_strtod_l+0x95c>)
 23fd696:	f04f 0a00 	mov.w	sl, #0
 23fd69a:	403b      	ands	r3, r7
 23fd69c:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 23fd6a0:	9b04      	ldr	r3, [sp, #16]
 23fd6a2:	2b00      	cmp	r3, #0
 23fd6a4:	d1a5      	bne.n	23fd5f2 <_strtod_l+0x82a>
 23fd6a6:	e5e2      	b.n	23fd26e <_strtod_l+0x4a6>
 23fd6a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fd6ac:	e7ea      	b.n	23fd684 <_strtod_l+0x8bc>
 23fd6ae:	4613      	mov	r3, r2
 23fd6b0:	e7e8      	b.n	23fd684 <_strtod_l+0x8bc>
 23fd6b2:	ea53 030a 	orrs.w	r3, r3, sl
 23fd6b6:	d08e      	beq.n	23fd5d6 <_strtod_l+0x80e>
 23fd6b8:	9b08      	ldr	r3, [sp, #32]
 23fd6ba:	b1db      	cbz	r3, 23fd6f4 <_strtod_l+0x92c>
 23fd6bc:	423b      	tst	r3, r7
 23fd6be:	d0ef      	beq.n	23fd6a0 <_strtod_l+0x8d8>
 23fd6c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fd6c2:	4650      	mov	r0, sl
 23fd6c4:	9a04      	ldr	r2, [sp, #16]
 23fd6c6:	4659      	mov	r1, fp
 23fd6c8:	b1c3      	cbz	r3, 23fd6fc <_strtod_l+0x934>
 23fd6ca:	f7ff fb61 	bl	23fcd90 <sulp>
 23fd6ce:	4602      	mov	r2, r0
 23fd6d0:	460b      	mov	r3, r1
 23fd6d2:	ec51 0b18 	vmov	r0, r1, d8
 23fd6d6:	f7f5 fa2d 	bl	23f2b34 <__adddf3>
 23fd6da:	4682      	mov	sl, r0
 23fd6dc:	468b      	mov	fp, r1
 23fd6de:	e7df      	b.n	23fd6a0 <_strtod_l+0x8d8>
 23fd6e0:	4013      	ands	r3, r2
 23fd6e2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 23fd6e6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 23fd6ea:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 23fd6ee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 23fd6f2:	e7d5      	b.n	23fd6a0 <_strtod_l+0x8d8>
 23fd6f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23fd6f6:	ea13 0f0a 	tst.w	r3, sl
 23fd6fa:	e7e0      	b.n	23fd6be <_strtod_l+0x8f6>
 23fd6fc:	f7ff fb48 	bl	23fcd90 <sulp>
 23fd700:	4602      	mov	r2, r0
 23fd702:	460b      	mov	r3, r1
 23fd704:	ec51 0b18 	vmov	r0, r1, d8
 23fd708:	f7f5 fa12 	bl	23f2b30 <__aeabi_dsub>
 23fd70c:	2200      	movs	r2, #0
 23fd70e:	2300      	movs	r3, #0
 23fd710:	4682      	mov	sl, r0
 23fd712:	468b      	mov	fp, r1
 23fd714:	f7f5 fe2c 	bl	23f3370 <__aeabi_dcmpeq>
 23fd718:	2800      	cmp	r0, #0
 23fd71a:	d0c1      	beq.n	23fd6a0 <_strtod_l+0x8d8>
 23fd71c:	e615      	b.n	23fd34a <_strtod_l+0x582>
 23fd71e:	bf00      	nop
 23fd720:	fffffc02 	.word	0xfffffc02
 23fd724:	7ff00000 	.word	0x7ff00000
 23fd728:	39500000 	.word	0x39500000
 23fd72c:	000fffff 	.word	0x000fffff
 23fd730:	7fefffff 	.word	0x7fefffff
 23fd734:	023ffcb8 	.word	0x023ffcb8
 23fd738:	4631      	mov	r1, r6
 23fd73a:	4628      	mov	r0, r5
 23fd73c:	f001 fa1e 	bl	23feb7c <__ratio>
 23fd740:	2200      	movs	r2, #0
 23fd742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23fd746:	ee10 0a10 	vmov	r0, s0
 23fd74a:	ec59 8b10 	vmov	r8, r9, d0
 23fd74e:	4649      	mov	r1, r9
 23fd750:	f7f5 fe22 	bl	23f3398 <__aeabi_dcmple>
 23fd754:	2800      	cmp	r0, #0
 23fd756:	d07a      	beq.n	23fd84e <_strtod_l+0xa86>
 23fd758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fd75a:	2b00      	cmp	r3, #0
 23fd75c:	d04a      	beq.n	23fd7f4 <_strtod_l+0xa2c>
 23fd75e:	2200      	movs	r2, #0
 23fd760:	4b93      	ldr	r3, [pc, #588]	; (23fd9b0 <_strtod_l+0xbe8>)
 23fd762:	f04f 0800 	mov.w	r8, #0
 23fd766:	f8df 9248 	ldr.w	r9, [pc, #584]	; 23fd9b0 <_strtod_l+0xbe8>
 23fd76a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fd76e:	4b91      	ldr	r3, [pc, #580]	; (23fd9b4 <_strtod_l+0xbec>)
 23fd770:	403b      	ands	r3, r7
 23fd772:	930d      	str	r3, [sp, #52]	; 0x34
 23fd774:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23fd776:	4b90      	ldr	r3, [pc, #576]	; (23fd9b8 <_strtod_l+0xbf0>)
 23fd778:	429a      	cmp	r2, r3
 23fd77a:	f040 80b0 	bne.w	23fd8de <_strtod_l+0xb16>
 23fd77e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 23fd782:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fd786:	ec4b ab10 	vmov	d0, sl, fp
 23fd78a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 23fd78e:	f001 f91f 	bl	23fe9d0 <__ulp>
 23fd792:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fd796:	ec53 2b10 	vmov	r2, r3, d0
 23fd79a:	f7f5 fb81 	bl	23f2ea0 <__aeabi_dmul>
 23fd79e:	4652      	mov	r2, sl
 23fd7a0:	465b      	mov	r3, fp
 23fd7a2:	f7f5 f9c7 	bl	23f2b34 <__adddf3>
 23fd7a6:	460b      	mov	r3, r1
 23fd7a8:	4982      	ldr	r1, [pc, #520]	; (23fd9b4 <_strtod_l+0xbec>)
 23fd7aa:	4682      	mov	sl, r0
 23fd7ac:	4a83      	ldr	r2, [pc, #524]	; (23fd9bc <_strtod_l+0xbf4>)
 23fd7ae:	4019      	ands	r1, r3
 23fd7b0:	4291      	cmp	r1, r2
 23fd7b2:	d960      	bls.n	23fd876 <_strtod_l+0xaae>
 23fd7b4:	ee18 3a90 	vmov	r3, s17
 23fd7b8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 23fd7bc:	4293      	cmp	r3, r2
 23fd7be:	d104      	bne.n	23fd7ca <_strtod_l+0xa02>
 23fd7c0:	ee18 3a10 	vmov	r3, s16
 23fd7c4:	3301      	adds	r3, #1
 23fd7c6:	f43f ad48 	beq.w	23fd25a <_strtod_l+0x492>
 23fd7ca:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 23fd9c8 <_strtod_l+0xc00>
 23fd7ce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 23fd7d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fd7d4:	4620      	mov	r0, r4
 23fd7d6:	f000 fdc3 	bl	23fe360 <_Bfree>
 23fd7da:	9905      	ldr	r1, [sp, #20]
 23fd7dc:	4620      	mov	r0, r4
 23fd7de:	f000 fdbf 	bl	23fe360 <_Bfree>
 23fd7e2:	4631      	mov	r1, r6
 23fd7e4:	4620      	mov	r0, r4
 23fd7e6:	f000 fdbb 	bl	23fe360 <_Bfree>
 23fd7ea:	4629      	mov	r1, r5
 23fd7ec:	4620      	mov	r0, r4
 23fd7ee:	f000 fdb7 	bl	23fe360 <_Bfree>
 23fd7f2:	e61c      	b.n	23fd42e <_strtod_l+0x666>
 23fd7f4:	f1ba 0f00 	cmp.w	sl, #0
 23fd7f8:	d11b      	bne.n	23fd832 <_strtod_l+0xa6a>
 23fd7fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fd7fe:	b9f3      	cbnz	r3, 23fd83e <_strtod_l+0xa76>
 23fd800:	2200      	movs	r2, #0
 23fd802:	4b6b      	ldr	r3, [pc, #428]	; (23fd9b0 <_strtod_l+0xbe8>)
 23fd804:	4640      	mov	r0, r8
 23fd806:	4649      	mov	r1, r9
 23fd808:	f7f5 fdbc 	bl	23f3384 <__aeabi_dcmplt>
 23fd80c:	b9d0      	cbnz	r0, 23fd844 <_strtod_l+0xa7c>
 23fd80e:	4640      	mov	r0, r8
 23fd810:	4649      	mov	r1, r9
 23fd812:	2200      	movs	r2, #0
 23fd814:	4b6a      	ldr	r3, [pc, #424]	; (23fd9c0 <_strtod_l+0xbf8>)
 23fd816:	f7f5 fb43 	bl	23f2ea0 <__aeabi_dmul>
 23fd81a:	4680      	mov	r8, r0
 23fd81c:	4689      	mov	r9, r1
 23fd81e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 23fd822:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 23fd826:	9315      	str	r3, [sp, #84]	; 0x54
 23fd828:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 23fd82c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fd830:	e79d      	b.n	23fd76e <_strtod_l+0x9a6>
 23fd832:	f1ba 0f01 	cmp.w	sl, #1
 23fd836:	d102      	bne.n	23fd83e <_strtod_l+0xa76>
 23fd838:	2f00      	cmp	r7, #0
 23fd83a:	f43f ad86 	beq.w	23fd34a <_strtod_l+0x582>
 23fd83e:	2200      	movs	r2, #0
 23fd840:	4b60      	ldr	r3, [pc, #384]	; (23fd9c4 <_strtod_l+0xbfc>)
 23fd842:	e78e      	b.n	23fd762 <_strtod_l+0x99a>
 23fd844:	f04f 0800 	mov.w	r8, #0
 23fd848:	f8df 9174 	ldr.w	r9, [pc, #372]	; 23fd9c0 <_strtod_l+0xbf8>
 23fd84c:	e7e7      	b.n	23fd81e <_strtod_l+0xa56>
 23fd84e:	4b5c      	ldr	r3, [pc, #368]	; (23fd9c0 <_strtod_l+0xbf8>)
 23fd850:	4640      	mov	r0, r8
 23fd852:	4649      	mov	r1, r9
 23fd854:	2200      	movs	r2, #0
 23fd856:	f7f5 fb23 	bl	23f2ea0 <__aeabi_dmul>
 23fd85a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fd85c:	4680      	mov	r8, r0
 23fd85e:	4689      	mov	r9, r1
 23fd860:	b933      	cbnz	r3, 23fd870 <_strtod_l+0xaa8>
 23fd862:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fd866:	900e      	str	r0, [sp, #56]	; 0x38
 23fd868:	930f      	str	r3, [sp, #60]	; 0x3c
 23fd86a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 23fd86e:	e7dd      	b.n	23fd82c <_strtod_l+0xa64>
 23fd870:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 23fd874:	e7f9      	b.n	23fd86a <_strtod_l+0xaa2>
 23fd876:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 23fd87a:	9b04      	ldr	r3, [sp, #16]
 23fd87c:	2b00      	cmp	r3, #0
 23fd87e:	d1a8      	bne.n	23fd7d2 <_strtod_l+0xa0a>
 23fd880:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23fd884:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23fd886:	0d1b      	lsrs	r3, r3, #20
 23fd888:	051b      	lsls	r3, r3, #20
 23fd88a:	429a      	cmp	r2, r3
 23fd88c:	d1a1      	bne.n	23fd7d2 <_strtod_l+0xa0a>
 23fd88e:	4640      	mov	r0, r8
 23fd890:	4649      	mov	r1, r9
 23fd892:	f7f6 f819 	bl	23f38c8 <__aeabi_d2lz>
 23fd896:	f7f5 fad5 	bl	23f2e44 <__aeabi_l2d>
 23fd89a:	4602      	mov	r2, r0
 23fd89c:	460b      	mov	r3, r1
 23fd89e:	4640      	mov	r0, r8
 23fd8a0:	4649      	mov	r1, r9
 23fd8a2:	f7f5 f945 	bl	23f2b30 <__aeabi_dsub>
 23fd8a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fd8aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fd8ac:	4680      	mov	r8, r0
 23fd8ae:	ea43 030a 	orr.w	r3, r3, sl
 23fd8b2:	4689      	mov	r9, r1
 23fd8b4:	4313      	orrs	r3, r2
 23fd8b6:	d055      	beq.n	23fd964 <_strtod_l+0xb9c>
 23fd8b8:	a335      	add	r3, pc, #212	; (adr r3, 23fd990 <_strtod_l+0xbc8>)
 23fd8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd8be:	f7f5 fd61 	bl	23f3384 <__aeabi_dcmplt>
 23fd8c2:	2800      	cmp	r0, #0
 23fd8c4:	f47f acd3 	bne.w	23fd26e <_strtod_l+0x4a6>
 23fd8c8:	4640      	mov	r0, r8
 23fd8ca:	4649      	mov	r1, r9
 23fd8cc:	a332      	add	r3, pc, #200	; (adr r3, 23fd998 <_strtod_l+0xbd0>)
 23fd8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd8d2:	f7f5 fd75 	bl	23f33c0 <__aeabi_dcmpgt>
 23fd8d6:	2800      	cmp	r0, #0
 23fd8d8:	f43f af7b 	beq.w	23fd7d2 <_strtod_l+0xa0a>
 23fd8dc:	e4c7      	b.n	23fd26e <_strtod_l+0x4a6>
 23fd8de:	9b04      	ldr	r3, [sp, #16]
 23fd8e0:	b333      	cbz	r3, 23fd930 <_strtod_l+0xb68>
 23fd8e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23fd8e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 23fd8e8:	d822      	bhi.n	23fd930 <_strtod_l+0xb68>
 23fd8ea:	4640      	mov	r0, r8
 23fd8ec:	4649      	mov	r1, r9
 23fd8ee:	a32c      	add	r3, pc, #176	; (adr r3, 23fd9a0 <_strtod_l+0xbd8>)
 23fd8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd8f4:	f7f5 fd50 	bl	23f3398 <__aeabi_dcmple>
 23fd8f8:	b1a0      	cbz	r0, 23fd924 <_strtod_l+0xb5c>
 23fd8fa:	4649      	mov	r1, r9
 23fd8fc:	4640      	mov	r0, r8
 23fd8fe:	f7f5 fd7f 	bl	23f3400 <__aeabi_d2uiz>
 23fd902:	2801      	cmp	r0, #1
 23fd904:	bf38      	it	cc
 23fd906:	2001      	movcc	r0, #1
 23fd908:	f7f5 fa50 	bl	23f2dac <__aeabi_ui2d>
 23fd90c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fd90e:	4680      	mov	r8, r0
 23fd910:	4689      	mov	r9, r1
 23fd912:	bb23      	cbnz	r3, 23fd95e <_strtod_l+0xb96>
 23fd914:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fd918:	9010      	str	r0, [sp, #64]	; 0x40
 23fd91a:	9311      	str	r3, [sp, #68]	; 0x44
 23fd91c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 23fd920:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fd924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fd926:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23fd928:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 23fd92c:	1a9b      	subs	r3, r3, r2
 23fd92e:	9309      	str	r3, [sp, #36]	; 0x24
 23fd930:	eeb0 0a48 	vmov.f32	s0, s16
 23fd934:	eef0 0a68 	vmov.f32	s1, s17
 23fd938:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fd93c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 23fd940:	f001 f846 	bl	23fe9d0 <__ulp>
 23fd944:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fd948:	ec53 2b10 	vmov	r2, r3, d0
 23fd94c:	f7f5 faa8 	bl	23f2ea0 <__aeabi_dmul>
 23fd950:	ec53 2b18 	vmov	r2, r3, d8
 23fd954:	f7f5 f8ee 	bl	23f2b34 <__adddf3>
 23fd958:	4682      	mov	sl, r0
 23fd95a:	468b      	mov	fp, r1
 23fd95c:	e78d      	b.n	23fd87a <_strtod_l+0xab2>
 23fd95e:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 23fd962:	e7db      	b.n	23fd91c <_strtod_l+0xb54>
 23fd964:	a310      	add	r3, pc, #64	; (adr r3, 23fd9a8 <_strtod_l+0xbe0>)
 23fd966:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd96a:	f7f5 fd0b 	bl	23f3384 <__aeabi_dcmplt>
 23fd96e:	e7b2      	b.n	23fd8d6 <_strtod_l+0xb0e>
 23fd970:	2300      	movs	r3, #0
 23fd972:	930a      	str	r3, [sp, #40]	; 0x28
 23fd974:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd976:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 23fd978:	6013      	str	r3, [r2, #0]
 23fd97a:	f7ff ba6d 	b.w	23fce58 <_strtod_l+0x90>
 23fd97e:	2a65      	cmp	r2, #101	; 0x65
 23fd980:	f43f ab61 	beq.w	23fd046 <_strtod_l+0x27e>
 23fd984:	2a45      	cmp	r2, #69	; 0x45
 23fd986:	f43f ab5e 	beq.w	23fd046 <_strtod_l+0x27e>
 23fd98a:	2301      	movs	r3, #1
 23fd98c:	f7ff bb96 	b.w	23fd0bc <_strtod_l+0x2f4>
 23fd990:	94a03595 	.word	0x94a03595
 23fd994:	3fdfffff 	.word	0x3fdfffff
 23fd998:	35afe535 	.word	0x35afe535
 23fd99c:	3fe00000 	.word	0x3fe00000
 23fd9a0:	ffc00000 	.word	0xffc00000
 23fd9a4:	41dfffff 	.word	0x41dfffff
 23fd9a8:	94a03595 	.word	0x94a03595
 23fd9ac:	3fcfffff 	.word	0x3fcfffff
 23fd9b0:	3ff00000 	.word	0x3ff00000
 23fd9b4:	7ff00000 	.word	0x7ff00000
 23fd9b8:	7fe00000 	.word	0x7fe00000
 23fd9bc:	7c9fffff 	.word	0x7c9fffff
 23fd9c0:	3fe00000 	.word	0x3fe00000
 23fd9c4:	bff00000 	.word	0xbff00000
 23fd9c8:	7fefffff 	.word	0x7fefffff

023fd9cc <strtod>:
 23fd9cc:	460a      	mov	r2, r1
 23fd9ce:	4601      	mov	r1, r0
 23fd9d0:	4802      	ldr	r0, [pc, #8]	; (23fd9dc <strtod+0x10>)
 23fd9d2:	4b03      	ldr	r3, [pc, #12]	; (23fd9e0 <strtod+0x14>)
 23fd9d4:	6800      	ldr	r0, [r0, #0]
 23fd9d6:	f7ff b9f7 	b.w	23fcdc8 <_strtod_l>
 23fd9da:	bf00      	nop
 23fd9dc:	1007aafc 	.word	0x1007aafc
 23fd9e0:	1007ab68 	.word	0x1007ab68

023fd9e4 <_strtol_l.constprop.0>:
 23fd9e4:	2b01      	cmp	r3, #1
 23fd9e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fd9ea:	d001      	beq.n	23fd9f0 <_strtol_l.constprop.0+0xc>
 23fd9ec:	2b24      	cmp	r3, #36	; 0x24
 23fd9ee:	d906      	bls.n	23fd9fe <_strtol_l.constprop.0+0x1a>
 23fd9f0:	f7fa fe76 	bl	23f86e0 <__errno>
 23fd9f4:	2316      	movs	r3, #22
 23fd9f6:	6003      	str	r3, [r0, #0]
 23fd9f8:	2000      	movs	r0, #0
 23fd9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fd9fe:	460d      	mov	r5, r1
 23fda00:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23fdae4 <_strtol_l.constprop.0+0x100>
 23fda04:	462e      	mov	r6, r5
 23fda06:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fda0a:	f814 700c 	ldrb.w	r7, [r4, ip]
 23fda0e:	f017 0708 	ands.w	r7, r7, #8
 23fda12:	d1f7      	bne.n	23fda04 <_strtol_l.constprop.0+0x20>
 23fda14:	2c2d      	cmp	r4, #45	; 0x2d
 23fda16:	d132      	bne.n	23fda7e <_strtol_l.constprop.0+0x9a>
 23fda18:	782c      	ldrb	r4, [r5, #0]
 23fda1a:	2701      	movs	r7, #1
 23fda1c:	1cb5      	adds	r5, r6, #2
 23fda1e:	2b00      	cmp	r3, #0
 23fda20:	d05b      	beq.n	23fdada <_strtol_l.constprop.0+0xf6>
 23fda22:	2b10      	cmp	r3, #16
 23fda24:	d109      	bne.n	23fda3a <_strtol_l.constprop.0+0x56>
 23fda26:	2c30      	cmp	r4, #48	; 0x30
 23fda28:	d107      	bne.n	23fda3a <_strtol_l.constprop.0+0x56>
 23fda2a:	782c      	ldrb	r4, [r5, #0]
 23fda2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23fda30:	2c58      	cmp	r4, #88	; 0x58
 23fda32:	d14d      	bne.n	23fdad0 <_strtol_l.constprop.0+0xec>
 23fda34:	786c      	ldrb	r4, [r5, #1]
 23fda36:	2310      	movs	r3, #16
 23fda38:	3502      	adds	r5, #2
 23fda3a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23fda3e:	f04f 0c00 	mov.w	ip, #0
 23fda42:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fda46:	4666      	mov	r6, ip
 23fda48:	fbb8 f9f3 	udiv	r9, r8, r3
 23fda4c:	fb03 8a19 	mls	sl, r3, r9, r8
 23fda50:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23fda54:	f1be 0f09 	cmp.w	lr, #9
 23fda58:	d816      	bhi.n	23fda88 <_strtol_l.constprop.0+0xa4>
 23fda5a:	4674      	mov	r4, lr
 23fda5c:	42a3      	cmp	r3, r4
 23fda5e:	dd24      	ble.n	23fdaaa <_strtol_l.constprop.0+0xc6>
 23fda60:	f1bc 0f00 	cmp.w	ip, #0
 23fda64:	db1e      	blt.n	23fdaa4 <_strtol_l.constprop.0+0xc0>
 23fda66:	45b1      	cmp	r9, r6
 23fda68:	d31c      	bcc.n	23fdaa4 <_strtol_l.constprop.0+0xc0>
 23fda6a:	d101      	bne.n	23fda70 <_strtol_l.constprop.0+0x8c>
 23fda6c:	45a2      	cmp	sl, r4
 23fda6e:	db19      	blt.n	23fdaa4 <_strtol_l.constprop.0+0xc0>
 23fda70:	fb06 4603 	mla	r6, r6, r3, r4
 23fda74:	f04f 0c01 	mov.w	ip, #1
 23fda78:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fda7c:	e7e8      	b.n	23fda50 <_strtol_l.constprop.0+0x6c>
 23fda7e:	2c2b      	cmp	r4, #43	; 0x2b
 23fda80:	bf04      	itt	eq
 23fda82:	782c      	ldrbeq	r4, [r5, #0]
 23fda84:	1cb5      	addeq	r5, r6, #2
 23fda86:	e7ca      	b.n	23fda1e <_strtol_l.constprop.0+0x3a>
 23fda88:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23fda8c:	f1be 0f19 	cmp.w	lr, #25
 23fda90:	d801      	bhi.n	23fda96 <_strtol_l.constprop.0+0xb2>
 23fda92:	3c37      	subs	r4, #55	; 0x37
 23fda94:	e7e2      	b.n	23fda5c <_strtol_l.constprop.0+0x78>
 23fda96:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23fda9a:	f1be 0f19 	cmp.w	lr, #25
 23fda9e:	d804      	bhi.n	23fdaaa <_strtol_l.constprop.0+0xc6>
 23fdaa0:	3c57      	subs	r4, #87	; 0x57
 23fdaa2:	e7db      	b.n	23fda5c <_strtol_l.constprop.0+0x78>
 23fdaa4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fdaa8:	e7e6      	b.n	23fda78 <_strtol_l.constprop.0+0x94>
 23fdaaa:	f1bc 0f00 	cmp.w	ip, #0
 23fdaae:	da05      	bge.n	23fdabc <_strtol_l.constprop.0+0xd8>
 23fdab0:	2322      	movs	r3, #34	; 0x22
 23fdab2:	4646      	mov	r6, r8
 23fdab4:	6003      	str	r3, [r0, #0]
 23fdab6:	b942      	cbnz	r2, 23fdaca <_strtol_l.constprop.0+0xe6>
 23fdab8:	4630      	mov	r0, r6
 23fdaba:	e79e      	b.n	23fd9fa <_strtol_l.constprop.0+0x16>
 23fdabc:	b107      	cbz	r7, 23fdac0 <_strtol_l.constprop.0+0xdc>
 23fdabe:	4276      	negs	r6, r6
 23fdac0:	2a00      	cmp	r2, #0
 23fdac2:	d0f9      	beq.n	23fdab8 <_strtol_l.constprop.0+0xd4>
 23fdac4:	f1bc 0f00 	cmp.w	ip, #0
 23fdac8:	d000      	beq.n	23fdacc <_strtol_l.constprop.0+0xe8>
 23fdaca:	1e69      	subs	r1, r5, #1
 23fdacc:	6011      	str	r1, [r2, #0]
 23fdace:	e7f3      	b.n	23fdab8 <_strtol_l.constprop.0+0xd4>
 23fdad0:	2430      	movs	r4, #48	; 0x30
 23fdad2:	2b00      	cmp	r3, #0
 23fdad4:	d1b1      	bne.n	23fda3a <_strtol_l.constprop.0+0x56>
 23fdad6:	2308      	movs	r3, #8
 23fdad8:	e7af      	b.n	23fda3a <_strtol_l.constprop.0+0x56>
 23fdada:	2c30      	cmp	r4, #48	; 0x30
 23fdadc:	d0a5      	beq.n	23fda2a <_strtol_l.constprop.0+0x46>
 23fdade:	230a      	movs	r3, #10
 23fdae0:	e7ab      	b.n	23fda3a <_strtol_l.constprop.0+0x56>
 23fdae2:	bf00      	nop
 23fdae4:	023ffce1 	.word	0x023ffce1

023fdae8 <strtol>:
 23fdae8:	4613      	mov	r3, r2
 23fdaea:	460a      	mov	r2, r1
 23fdaec:	4601      	mov	r1, r0
 23fdaee:	4802      	ldr	r0, [pc, #8]	; (23fdaf8 <strtol+0x10>)
 23fdaf0:	6800      	ldr	r0, [r0, #0]
 23fdaf2:	f7ff bf77 	b.w	23fd9e4 <_strtol_l.constprop.0>
 23fdaf6:	bf00      	nop
 23fdaf8:	1007aafc 	.word	0x1007aafc

023fdafc <tolower>:
 23fdafc:	4b03      	ldr	r3, [pc, #12]	; (23fdb0c <tolower+0x10>)
 23fdafe:	5cc3      	ldrb	r3, [r0, r3]
 23fdb00:	f003 0303 	and.w	r3, r3, #3
 23fdb04:	2b01      	cmp	r3, #1
 23fdb06:	bf08      	it	eq
 23fdb08:	3020      	addeq	r0, #32
 23fdb0a:	4770      	bx	lr
 23fdb0c:	023ffce1 	.word	0x023ffce1

023fdb10 <__register_exitproc>:
 23fdb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fdb14:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fdbd4 <__register_exitproc+0xc4>
 23fdb18:	4606      	mov	r6, r0
 23fdb1a:	461f      	mov	r7, r3
 23fdb1c:	460d      	mov	r5, r1
 23fdb1e:	f8d8 0000 	ldr.w	r0, [r8]
 23fdb22:	4691      	mov	r9, r2
 23fdb24:	f000 fbc6 	bl	23fe2b4 <__retarget_lock_acquire_recursive>
 23fdb28:	4b26      	ldr	r3, [pc, #152]	; (23fdbc4 <__register_exitproc+0xb4>)
 23fdb2a:	681c      	ldr	r4, [r3, #0]
 23fdb2c:	b934      	cbnz	r4, 23fdb3c <__register_exitproc+0x2c>
 23fdb2e:	4c26      	ldr	r4, [pc, #152]	; (23fdbc8 <__register_exitproc+0xb8>)
 23fdb30:	601c      	str	r4, [r3, #0]
 23fdb32:	4b26      	ldr	r3, [pc, #152]	; (23fdbcc <__register_exitproc+0xbc>)
 23fdb34:	b113      	cbz	r3, 23fdb3c <__register_exitproc+0x2c>
 23fdb36:	681b      	ldr	r3, [r3, #0]
 23fdb38:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fdb3c:	6863      	ldr	r3, [r4, #4]
 23fdb3e:	2b1f      	cmp	r3, #31
 23fdb40:	dd07      	ble.n	23fdb52 <__register_exitproc+0x42>
 23fdb42:	f8d8 0000 	ldr.w	r0, [r8]
 23fdb46:	f000 fbb7 	bl	23fe2b8 <__retarget_lock_release_recursive>
 23fdb4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fdb4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fdb52:	b35e      	cbz	r6, 23fdbac <__register_exitproc+0x9c>
 23fdb54:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fdb58:	b988      	cbnz	r0, 23fdb7e <__register_exitproc+0x6e>
 23fdb5a:	4b1d      	ldr	r3, [pc, #116]	; (23fdbd0 <__register_exitproc+0xc0>)
 23fdb5c:	b923      	cbnz	r3, 23fdb68 <__register_exitproc+0x58>
 23fdb5e:	f8d8 0000 	ldr.w	r0, [r8]
 23fdb62:	f000 fba8 	bl	23fe2b6 <__retarget_lock_release>
 23fdb66:	e7f0      	b.n	23fdb4a <__register_exitproc+0x3a>
 23fdb68:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fdb6c:	f7fa fd48 	bl	23f8600 <malloc>
 23fdb70:	2800      	cmp	r0, #0
 23fdb72:	d0f4      	beq.n	23fdb5e <__register_exitproc+0x4e>
 23fdb74:	2300      	movs	r3, #0
 23fdb76:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fdb7a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fdb7e:	6863      	ldr	r3, [r4, #4]
 23fdb80:	2201      	movs	r2, #1
 23fdb82:	2e02      	cmp	r6, #2
 23fdb84:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23fdb88:	fa02 f203 	lsl.w	r2, r2, r3
 23fdb8c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fdb90:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fdb94:	ea43 0302 	orr.w	r3, r3, r2
 23fdb98:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23fdb9c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fdba0:	bf02      	ittt	eq
 23fdba2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fdba6:	4313      	orreq	r3, r2
 23fdba8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fdbac:	6863      	ldr	r3, [r4, #4]
 23fdbae:	f8d8 0000 	ldr.w	r0, [r8]
 23fdbb2:	1c5a      	adds	r2, r3, #1
 23fdbb4:	3302      	adds	r3, #2
 23fdbb6:	6062      	str	r2, [r4, #4]
 23fdbb8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fdbbc:	f000 fb7c 	bl	23fe2b8 <__retarget_lock_release_recursive>
 23fdbc0:	2000      	movs	r0, #0
 23fdbc2:	e7c4      	b.n	23fdb4e <__register_exitproc+0x3e>
 23fdbc4:	1007afe4 	.word	0x1007afe4
 23fdbc8:	1007af58 	.word	0x1007af58
 23fdbcc:	00000000 	.word	0x00000000
 23fdbd0:	023f8601 	.word	0x023f8601
 23fdbd4:	1007ab60 	.word	0x1007ab60

023fdbd8 <rshift>:
 23fdbd8:	6903      	ldr	r3, [r0, #16]
 23fdbda:	114a      	asrs	r2, r1, #5
 23fdbdc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 23fdbe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fdbe4:	f100 0414 	add.w	r4, r0, #20
 23fdbe8:	dd45      	ble.n	23fdc76 <rshift+0x9e>
 23fdbea:	f011 011f 	ands.w	r1, r1, #31
 23fdbee:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 23fdbf2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 23fdbf6:	d10c      	bne.n	23fdc12 <rshift+0x3a>
 23fdbf8:	f100 0710 	add.w	r7, r0, #16
 23fdbfc:	4629      	mov	r1, r5
 23fdbfe:	42b1      	cmp	r1, r6
 23fdc00:	d334      	bcc.n	23fdc6c <rshift+0x94>
 23fdc02:	1a9b      	subs	r3, r3, r2
 23fdc04:	1eea      	subs	r2, r5, #3
 23fdc06:	009b      	lsls	r3, r3, #2
 23fdc08:	4296      	cmp	r6, r2
 23fdc0a:	bf38      	it	cc
 23fdc0c:	2300      	movcc	r3, #0
 23fdc0e:	4423      	add	r3, r4
 23fdc10:	e015      	b.n	23fdc3e <rshift+0x66>
 23fdc12:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 23fdc16:	f1c1 0820 	rsb	r8, r1, #32
 23fdc1a:	f105 0e04 	add.w	lr, r5, #4
 23fdc1e:	46a1      	mov	r9, r4
 23fdc20:	40cf      	lsrs	r7, r1
 23fdc22:	4576      	cmp	r6, lr
 23fdc24:	46f4      	mov	ip, lr
 23fdc26:	d815      	bhi.n	23fdc54 <rshift+0x7c>
 23fdc28:	1a9a      	subs	r2, r3, r2
 23fdc2a:	3501      	adds	r5, #1
 23fdc2c:	0092      	lsls	r2, r2, #2
 23fdc2e:	3a04      	subs	r2, #4
 23fdc30:	42ae      	cmp	r6, r5
 23fdc32:	bf38      	it	cc
 23fdc34:	2200      	movcc	r2, #0
 23fdc36:	18a3      	adds	r3, r4, r2
 23fdc38:	50a7      	str	r7, [r4, r2]
 23fdc3a:	b107      	cbz	r7, 23fdc3e <rshift+0x66>
 23fdc3c:	3304      	adds	r3, #4
 23fdc3e:	1b1a      	subs	r2, r3, r4
 23fdc40:	42a3      	cmp	r3, r4
 23fdc42:	ea4f 02a2 	mov.w	r2, r2, asr #2
 23fdc46:	bf08      	it	eq
 23fdc48:	2300      	moveq	r3, #0
 23fdc4a:	6102      	str	r2, [r0, #16]
 23fdc4c:	bf08      	it	eq
 23fdc4e:	6143      	streq	r3, [r0, #20]
 23fdc50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fdc54:	f8dc c000 	ldr.w	ip, [ip]
 23fdc58:	fa0c fc08 	lsl.w	ip, ip, r8
 23fdc5c:	ea4c 0707 	orr.w	r7, ip, r7
 23fdc60:	f849 7b04 	str.w	r7, [r9], #4
 23fdc64:	f85e 7b04 	ldr.w	r7, [lr], #4
 23fdc68:	40cf      	lsrs	r7, r1
 23fdc6a:	e7da      	b.n	23fdc22 <rshift+0x4a>
 23fdc6c:	f851 cb04 	ldr.w	ip, [r1], #4
 23fdc70:	f847 cf04 	str.w	ip, [r7, #4]!
 23fdc74:	e7c3      	b.n	23fdbfe <rshift+0x26>
 23fdc76:	4623      	mov	r3, r4
 23fdc78:	e7e1      	b.n	23fdc3e <rshift+0x66>

023fdc7a <__hexdig_fun>:
 23fdc7a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fdc7e:	2b09      	cmp	r3, #9
 23fdc80:	d802      	bhi.n	23fdc88 <__hexdig_fun+0xe>
 23fdc82:	3820      	subs	r0, #32
 23fdc84:	b2c0      	uxtb	r0, r0
 23fdc86:	4770      	bx	lr
 23fdc88:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 23fdc8c:	2b05      	cmp	r3, #5
 23fdc8e:	d801      	bhi.n	23fdc94 <__hexdig_fun+0x1a>
 23fdc90:	3847      	subs	r0, #71	; 0x47
 23fdc92:	e7f7      	b.n	23fdc84 <__hexdig_fun+0xa>
 23fdc94:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 23fdc98:	2b05      	cmp	r3, #5
 23fdc9a:	d801      	bhi.n	23fdca0 <__hexdig_fun+0x26>
 23fdc9c:	3827      	subs	r0, #39	; 0x27
 23fdc9e:	e7f1      	b.n	23fdc84 <__hexdig_fun+0xa>
 23fdca0:	2000      	movs	r0, #0
 23fdca2:	4770      	bx	lr

023fdca4 <__gethex>:
 23fdca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdca8:	ed2d 8b02 	vpush	{d8}
 23fdcac:	b089      	sub	sp, #36	; 0x24
 23fdcae:	ee08 0a10 	vmov	s16, r0
 23fdcb2:	468b      	mov	fp, r1
 23fdcb4:	4690      	mov	r8, r2
 23fdcb6:	9304      	str	r3, [sp, #16]
 23fdcb8:	4bb2      	ldr	r3, [pc, #712]	; (23fdf84 <__gethex+0x2e0>)
 23fdcba:	681b      	ldr	r3, [r3, #0]
 23fdcbc:	4618      	mov	r0, r3
 23fdcbe:	9301      	str	r3, [sp, #4]
 23fdcc0:	f7f5 fdfa 	bl	23f38b8 <strlen>
 23fdcc4:	9b01      	ldr	r3, [sp, #4]
 23fdcc6:	f8db 2000 	ldr.w	r2, [fp]
 23fdcca:	4682      	mov	sl, r0
 23fdccc:	4403      	add	r3, r0
 23fdcce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 23fdcd2:	9305      	str	r3, [sp, #20]
 23fdcd4:	1c93      	adds	r3, r2, #2
 23fdcd6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 23fdcda:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 23fdcde:	32fe      	adds	r2, #254	; 0xfe
 23fdce0:	18d1      	adds	r1, r2, r3
 23fdce2:	461f      	mov	r7, r3
 23fdce4:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fdce8:	9100      	str	r1, [sp, #0]
 23fdcea:	2830      	cmp	r0, #48	; 0x30
 23fdcec:	d0f8      	beq.n	23fdce0 <__gethex+0x3c>
 23fdcee:	f7ff ffc4 	bl	23fdc7a <__hexdig_fun>
 23fdcf2:	4604      	mov	r4, r0
 23fdcf4:	2800      	cmp	r0, #0
 23fdcf6:	d139      	bne.n	23fdd6c <__gethex+0xc8>
 23fdcf8:	4652      	mov	r2, sl
 23fdcfa:	9901      	ldr	r1, [sp, #4]
 23fdcfc:	4638      	mov	r0, r7
 23fdcfe:	f7ff f80c 	bl	23fcd1a <strncmp>
 23fdd02:	4605      	mov	r5, r0
 23fdd04:	2800      	cmp	r0, #0
 23fdd06:	d167      	bne.n	23fddd8 <__gethex+0x134>
 23fdd08:	f817 000a 	ldrb.w	r0, [r7, sl]
 23fdd0c:	eb07 060a 	add.w	r6, r7, sl
 23fdd10:	f7ff ffb3 	bl	23fdc7a <__hexdig_fun>
 23fdd14:	2800      	cmp	r0, #0
 23fdd16:	d061      	beq.n	23fdddc <__gethex+0x138>
 23fdd18:	4633      	mov	r3, r6
 23fdd1a:	7818      	ldrb	r0, [r3, #0]
 23fdd1c:	461f      	mov	r7, r3
 23fdd1e:	3301      	adds	r3, #1
 23fdd20:	2830      	cmp	r0, #48	; 0x30
 23fdd22:	d0fa      	beq.n	23fdd1a <__gethex+0x76>
 23fdd24:	f7ff ffa9 	bl	23fdc7a <__hexdig_fun>
 23fdd28:	fab0 f480 	clz	r4, r0
 23fdd2c:	2301      	movs	r3, #1
 23fdd2e:	4635      	mov	r5, r6
 23fdd30:	0964      	lsrs	r4, r4, #5
 23fdd32:	9300      	str	r3, [sp, #0]
 23fdd34:	463a      	mov	r2, r7
 23fdd36:	4616      	mov	r6, r2
 23fdd38:	3201      	adds	r2, #1
 23fdd3a:	7830      	ldrb	r0, [r6, #0]
 23fdd3c:	f7ff ff9d 	bl	23fdc7a <__hexdig_fun>
 23fdd40:	2800      	cmp	r0, #0
 23fdd42:	d1f8      	bne.n	23fdd36 <__gethex+0x92>
 23fdd44:	4652      	mov	r2, sl
 23fdd46:	9901      	ldr	r1, [sp, #4]
 23fdd48:	4630      	mov	r0, r6
 23fdd4a:	f7fe ffe6 	bl	23fcd1a <strncmp>
 23fdd4e:	b980      	cbnz	r0, 23fdd72 <__gethex+0xce>
 23fdd50:	b94d      	cbnz	r5, 23fdd66 <__gethex+0xc2>
 23fdd52:	eb06 050a 	add.w	r5, r6, sl
 23fdd56:	462a      	mov	r2, r5
 23fdd58:	4616      	mov	r6, r2
 23fdd5a:	3201      	adds	r2, #1
 23fdd5c:	7830      	ldrb	r0, [r6, #0]
 23fdd5e:	f7ff ff8c 	bl	23fdc7a <__hexdig_fun>
 23fdd62:	2800      	cmp	r0, #0
 23fdd64:	d1f8      	bne.n	23fdd58 <__gethex+0xb4>
 23fdd66:	1bad      	subs	r5, r5, r6
 23fdd68:	00ad      	lsls	r5, r5, #2
 23fdd6a:	e004      	b.n	23fdd76 <__gethex+0xd2>
 23fdd6c:	2400      	movs	r4, #0
 23fdd6e:	4625      	mov	r5, r4
 23fdd70:	e7e0      	b.n	23fdd34 <__gethex+0x90>
 23fdd72:	2d00      	cmp	r5, #0
 23fdd74:	d1f7      	bne.n	23fdd66 <__gethex+0xc2>
 23fdd76:	7833      	ldrb	r3, [r6, #0]
 23fdd78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 23fdd7c:	2b50      	cmp	r3, #80	; 0x50
 23fdd7e:	d13b      	bne.n	23fddf8 <__gethex+0x154>
 23fdd80:	7873      	ldrb	r3, [r6, #1]
 23fdd82:	2b2b      	cmp	r3, #43	; 0x2b
 23fdd84:	d02c      	beq.n	23fdde0 <__gethex+0x13c>
 23fdd86:	2b2d      	cmp	r3, #45	; 0x2d
 23fdd88:	d02e      	beq.n	23fdde8 <__gethex+0x144>
 23fdd8a:	1c71      	adds	r1, r6, #1
 23fdd8c:	f04f 0900 	mov.w	r9, #0
 23fdd90:	7808      	ldrb	r0, [r1, #0]
 23fdd92:	f7ff ff72 	bl	23fdc7a <__hexdig_fun>
 23fdd96:	1e43      	subs	r3, r0, #1
 23fdd98:	b2db      	uxtb	r3, r3
 23fdd9a:	2b18      	cmp	r3, #24
 23fdd9c:	d82c      	bhi.n	23fddf8 <__gethex+0x154>
 23fdd9e:	f1a0 0210 	sub.w	r2, r0, #16
 23fdda2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 23fdda6:	f7ff ff68 	bl	23fdc7a <__hexdig_fun>
 23fddaa:	1e43      	subs	r3, r0, #1
 23fddac:	b2db      	uxtb	r3, r3
 23fddae:	2b18      	cmp	r3, #24
 23fddb0:	d91d      	bls.n	23fddee <__gethex+0x14a>
 23fddb2:	f1b9 0f00 	cmp.w	r9, #0
 23fddb6:	d000      	beq.n	23fddba <__gethex+0x116>
 23fddb8:	4252      	negs	r2, r2
 23fddba:	4415      	add	r5, r2
 23fddbc:	f8cb 1000 	str.w	r1, [fp]
 23fddc0:	b1e4      	cbz	r4, 23fddfc <__gethex+0x158>
 23fddc2:	9b00      	ldr	r3, [sp, #0]
 23fddc4:	2b00      	cmp	r3, #0
 23fddc6:	bf14      	ite	ne
 23fddc8:	2700      	movne	r7, #0
 23fddca:	2706      	moveq	r7, #6
 23fddcc:	4638      	mov	r0, r7
 23fddce:	b009      	add	sp, #36	; 0x24
 23fddd0:	ecbd 8b02 	vpop	{d8}
 23fddd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fddd8:	463e      	mov	r6, r7
 23fddda:	4625      	mov	r5, r4
 23fdddc:	2401      	movs	r4, #1
 23fddde:	e7ca      	b.n	23fdd76 <__gethex+0xd2>
 23fdde0:	f04f 0900 	mov.w	r9, #0
 23fdde4:	1cb1      	adds	r1, r6, #2
 23fdde6:	e7d3      	b.n	23fdd90 <__gethex+0xec>
 23fdde8:	f04f 0901 	mov.w	r9, #1
 23fddec:	e7fa      	b.n	23fdde4 <__gethex+0x140>
 23fddee:	230a      	movs	r3, #10
 23fddf0:	fb03 0202 	mla	r2, r3, r2, r0
 23fddf4:	3a10      	subs	r2, #16
 23fddf6:	e7d4      	b.n	23fdda2 <__gethex+0xfe>
 23fddf8:	4631      	mov	r1, r6
 23fddfa:	e7df      	b.n	23fddbc <__gethex+0x118>
 23fddfc:	1bf3      	subs	r3, r6, r7
 23fddfe:	4621      	mov	r1, r4
 23fde00:	3b01      	subs	r3, #1
 23fde02:	2b07      	cmp	r3, #7
 23fde04:	dc0b      	bgt.n	23fde1e <__gethex+0x17a>
 23fde06:	ee18 0a10 	vmov	r0, s16
 23fde0a:	f000 fa69 	bl	23fe2e0 <_Balloc>
 23fde0e:	4604      	mov	r4, r0
 23fde10:	b940      	cbnz	r0, 23fde24 <__gethex+0x180>
 23fde12:	4b5d      	ldr	r3, [pc, #372]	; (23fdf88 <__gethex+0x2e4>)
 23fde14:	4602      	mov	r2, r0
 23fde16:	21de      	movs	r1, #222	; 0xde
 23fde18:	485c      	ldr	r0, [pc, #368]	; (23fdf8c <__gethex+0x2e8>)
 23fde1a:	f7fa fc6f 	bl	23f86fc <__assert_func>
 23fde1e:	3101      	adds	r1, #1
 23fde20:	105b      	asrs	r3, r3, #1
 23fde22:	e7ee      	b.n	23fde02 <__gethex+0x15e>
 23fde24:	f100 0914 	add.w	r9, r0, #20
 23fde28:	f04f 0b00 	mov.w	fp, #0
 23fde2c:	f1ca 0301 	rsb	r3, sl, #1
 23fde30:	f8cd 9008 	str.w	r9, [sp, #8]
 23fde34:	f8cd b000 	str.w	fp, [sp]
 23fde38:	9306      	str	r3, [sp, #24]
 23fde3a:	42b7      	cmp	r7, r6
 23fde3c:	d340      	bcc.n	23fdec0 <__gethex+0x21c>
 23fde3e:	9802      	ldr	r0, [sp, #8]
 23fde40:	9b00      	ldr	r3, [sp, #0]
 23fde42:	f840 3b04 	str.w	r3, [r0], #4
 23fde46:	eba0 0009 	sub.w	r0, r0, r9
 23fde4a:	1080      	asrs	r0, r0, #2
 23fde4c:	0146      	lsls	r6, r0, #5
 23fde4e:	6120      	str	r0, [r4, #16]
 23fde50:	4618      	mov	r0, r3
 23fde52:	f000 fb39 	bl	23fe4c8 <__hi0bits>
 23fde56:	1a30      	subs	r0, r6, r0
 23fde58:	f8d8 6000 	ldr.w	r6, [r8]
 23fde5c:	42b0      	cmp	r0, r6
 23fde5e:	dd63      	ble.n	23fdf28 <__gethex+0x284>
 23fde60:	1b87      	subs	r7, r0, r6
 23fde62:	4620      	mov	r0, r4
 23fde64:	4639      	mov	r1, r7
 23fde66:	f000 fedf 	bl	23fec28 <__any_on>
 23fde6a:	4682      	mov	sl, r0
 23fde6c:	b1a8      	cbz	r0, 23fde9a <__gethex+0x1f6>
 23fde6e:	1e7b      	subs	r3, r7, #1
 23fde70:	f04f 0a01 	mov.w	sl, #1
 23fde74:	1159      	asrs	r1, r3, #5
 23fde76:	f003 021f 	and.w	r2, r3, #31
 23fde7a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 23fde7e:	fa0a f202 	lsl.w	r2, sl, r2
 23fde82:	420a      	tst	r2, r1
 23fde84:	d009      	beq.n	23fde9a <__gethex+0x1f6>
 23fde86:	4553      	cmp	r3, sl
 23fde88:	dd05      	ble.n	23fde96 <__gethex+0x1f2>
 23fde8a:	1eb9      	subs	r1, r7, #2
 23fde8c:	4620      	mov	r0, r4
 23fde8e:	f000 fecb 	bl	23fec28 <__any_on>
 23fde92:	2800      	cmp	r0, #0
 23fde94:	d145      	bne.n	23fdf22 <__gethex+0x27e>
 23fde96:	f04f 0a02 	mov.w	sl, #2
 23fde9a:	443d      	add	r5, r7
 23fde9c:	4639      	mov	r1, r7
 23fde9e:	4620      	mov	r0, r4
 23fdea0:	f7ff fe9a 	bl	23fdbd8 <rshift>
 23fdea4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 23fdea8:	42ab      	cmp	r3, r5
 23fdeaa:	da4c      	bge.n	23fdf46 <__gethex+0x2a2>
 23fdeac:	4621      	mov	r1, r4
 23fdeae:	ee18 0a10 	vmov	r0, s16
 23fdeb2:	f000 fa55 	bl	23fe360 <_Bfree>
 23fdeb6:	2300      	movs	r3, #0
 23fdeb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 23fdeba:	27a3      	movs	r7, #163	; 0xa3
 23fdebc:	6013      	str	r3, [r2, #0]
 23fdebe:	e785      	b.n	23fddcc <__gethex+0x128>
 23fdec0:	1e73      	subs	r3, r6, #1
 23fdec2:	9a05      	ldr	r2, [sp, #20]
 23fdec4:	9303      	str	r3, [sp, #12]
 23fdec6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 23fdeca:	4293      	cmp	r3, r2
 23fdecc:	d019      	beq.n	23fdf02 <__gethex+0x25e>
 23fdece:	f1bb 0f20 	cmp.w	fp, #32
 23fded2:	d107      	bne.n	23fdee4 <__gethex+0x240>
 23fded4:	9b02      	ldr	r3, [sp, #8]
 23fded6:	9a00      	ldr	r2, [sp, #0]
 23fded8:	f843 2b04 	str.w	r2, [r3], #4
 23fdedc:	9302      	str	r3, [sp, #8]
 23fdede:	2300      	movs	r3, #0
 23fdee0:	469b      	mov	fp, r3
 23fdee2:	9300      	str	r3, [sp, #0]
 23fdee4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 23fdee8:	f7ff fec7 	bl	23fdc7a <__hexdig_fun>
 23fdeec:	f000 000f 	and.w	r0, r0, #15
 23fdef0:	9b00      	ldr	r3, [sp, #0]
 23fdef2:	fa00 f00b 	lsl.w	r0, r0, fp
 23fdef6:	f10b 0b04 	add.w	fp, fp, #4
 23fdefa:	4303      	orrs	r3, r0
 23fdefc:	9300      	str	r3, [sp, #0]
 23fdefe:	9b03      	ldr	r3, [sp, #12]
 23fdf00:	e00d      	b.n	23fdf1e <__gethex+0x27a>
 23fdf02:	9b03      	ldr	r3, [sp, #12]
 23fdf04:	9a06      	ldr	r2, [sp, #24]
 23fdf06:	4413      	add	r3, r2
 23fdf08:	42bb      	cmp	r3, r7
 23fdf0a:	d3e0      	bcc.n	23fdece <__gethex+0x22a>
 23fdf0c:	4618      	mov	r0, r3
 23fdf0e:	4652      	mov	r2, sl
 23fdf10:	9901      	ldr	r1, [sp, #4]
 23fdf12:	9307      	str	r3, [sp, #28]
 23fdf14:	f7fe ff01 	bl	23fcd1a <strncmp>
 23fdf18:	9b07      	ldr	r3, [sp, #28]
 23fdf1a:	2800      	cmp	r0, #0
 23fdf1c:	d1d7      	bne.n	23fdece <__gethex+0x22a>
 23fdf1e:	461e      	mov	r6, r3
 23fdf20:	e78b      	b.n	23fde3a <__gethex+0x196>
 23fdf22:	f04f 0a03 	mov.w	sl, #3
 23fdf26:	e7b8      	b.n	23fde9a <__gethex+0x1f6>
 23fdf28:	da0a      	bge.n	23fdf40 <__gethex+0x29c>
 23fdf2a:	1a37      	subs	r7, r6, r0
 23fdf2c:	4621      	mov	r1, r4
 23fdf2e:	ee18 0a10 	vmov	r0, s16
 23fdf32:	463a      	mov	r2, r7
 23fdf34:	1bed      	subs	r5, r5, r7
 23fdf36:	f000 fc2f 	bl	23fe798 <__lshift>
 23fdf3a:	4604      	mov	r4, r0
 23fdf3c:	f100 0914 	add.w	r9, r0, #20
 23fdf40:	f04f 0a00 	mov.w	sl, #0
 23fdf44:	e7ae      	b.n	23fdea4 <__gethex+0x200>
 23fdf46:	f8d8 0004 	ldr.w	r0, [r8, #4]
 23fdf4a:	42a8      	cmp	r0, r5
 23fdf4c:	dd72      	ble.n	23fe034 <__gethex+0x390>
 23fdf4e:	1b45      	subs	r5, r0, r5
 23fdf50:	42ae      	cmp	r6, r5
 23fdf52:	dc35      	bgt.n	23fdfc0 <__gethex+0x31c>
 23fdf54:	f8d8 300c 	ldr.w	r3, [r8, #12]
 23fdf58:	2b02      	cmp	r3, #2
 23fdf5a:	d029      	beq.n	23fdfb0 <__gethex+0x30c>
 23fdf5c:	2b03      	cmp	r3, #3
 23fdf5e:	d02b      	beq.n	23fdfb8 <__gethex+0x314>
 23fdf60:	2b01      	cmp	r3, #1
 23fdf62:	d11b      	bne.n	23fdf9c <__gethex+0x2f8>
 23fdf64:	42ae      	cmp	r6, r5
 23fdf66:	d119      	bne.n	23fdf9c <__gethex+0x2f8>
 23fdf68:	2e01      	cmp	r6, #1
 23fdf6a:	d111      	bne.n	23fdf90 <__gethex+0x2ec>
 23fdf6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23fdf70:	2762      	movs	r7, #98	; 0x62
 23fdf72:	9a04      	ldr	r2, [sp, #16]
 23fdf74:	6013      	str	r3, [r2, #0]
 23fdf76:	2301      	movs	r3, #1
 23fdf78:	6123      	str	r3, [r4, #16]
 23fdf7a:	f8c9 3000 	str.w	r3, [r9]
 23fdf7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23fdf80:	601c      	str	r4, [r3, #0]
 23fdf82:	e723      	b.n	23fddcc <__gethex+0x128>
 23fdf84:	023ffe54 	.word	0x023ffe54
 23fdf88:	023ffde1 	.word	0x023ffde1
 23fdf8c:	023ffdf2 	.word	0x023ffdf2
 23fdf90:	1e71      	subs	r1, r6, #1
 23fdf92:	4620      	mov	r0, r4
 23fdf94:	f000 fe48 	bl	23fec28 <__any_on>
 23fdf98:	2800      	cmp	r0, #0
 23fdf9a:	d1e7      	bne.n	23fdf6c <__gethex+0x2c8>
 23fdf9c:	4621      	mov	r1, r4
 23fdf9e:	ee18 0a10 	vmov	r0, s16
 23fdfa2:	f000 f9dd 	bl	23fe360 <_Bfree>
 23fdfa6:	2300      	movs	r3, #0
 23fdfa8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 23fdfaa:	2750      	movs	r7, #80	; 0x50
 23fdfac:	6013      	str	r3, [r2, #0]
 23fdfae:	e70d      	b.n	23fddcc <__gethex+0x128>
 23fdfb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fdfb2:	2b00      	cmp	r3, #0
 23fdfb4:	d1f2      	bne.n	23fdf9c <__gethex+0x2f8>
 23fdfb6:	e7d9      	b.n	23fdf6c <__gethex+0x2c8>
 23fdfb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fdfba:	2b00      	cmp	r3, #0
 23fdfbc:	d1d6      	bne.n	23fdf6c <__gethex+0x2c8>
 23fdfbe:	e7ed      	b.n	23fdf9c <__gethex+0x2f8>
 23fdfc0:	1e6f      	subs	r7, r5, #1
 23fdfc2:	f1ba 0f00 	cmp.w	sl, #0
 23fdfc6:	d132      	bne.n	23fe02e <__gethex+0x38a>
 23fdfc8:	b127      	cbz	r7, 23fdfd4 <__gethex+0x330>
 23fdfca:	4639      	mov	r1, r7
 23fdfcc:	4620      	mov	r0, r4
 23fdfce:	f000 fe2b 	bl	23fec28 <__any_on>
 23fdfd2:	4682      	mov	sl, r0
 23fdfd4:	117b      	asrs	r3, r7, #5
 23fdfd6:	2101      	movs	r1, #1
 23fdfd8:	f007 071f 	and.w	r7, r7, #31
 23fdfdc:	4620      	mov	r0, r4
 23fdfde:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 23fdfe2:	1b76      	subs	r6, r6, r5
 23fdfe4:	fa01 f707 	lsl.w	r7, r1, r7
 23fdfe8:	4629      	mov	r1, r5
 23fdfea:	421f      	tst	r7, r3
 23fdfec:	f04f 0702 	mov.w	r7, #2
 23fdff0:	bf18      	it	ne
 23fdff2:	f04a 0a02 	orrne.w	sl, sl, #2
 23fdff6:	f7ff fdef 	bl	23fdbd8 <rshift>
 23fdffa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 23fdffe:	f1ba 0f00 	cmp.w	sl, #0
 23fe002:	d048      	beq.n	23fe096 <__gethex+0x3f2>
 23fe004:	f8d8 300c 	ldr.w	r3, [r8, #12]
 23fe008:	2b02      	cmp	r3, #2
 23fe00a:	d015      	beq.n	23fe038 <__gethex+0x394>
 23fe00c:	2b03      	cmp	r3, #3
 23fe00e:	d017      	beq.n	23fe040 <__gethex+0x39c>
 23fe010:	2b01      	cmp	r3, #1
 23fe012:	d109      	bne.n	23fe028 <__gethex+0x384>
 23fe014:	f01a 0f02 	tst.w	sl, #2
 23fe018:	d006      	beq.n	23fe028 <__gethex+0x384>
 23fe01a:	f8d9 0000 	ldr.w	r0, [r9]
 23fe01e:	ea4a 0a00 	orr.w	sl, sl, r0
 23fe022:	f01a 0f01 	tst.w	sl, #1
 23fe026:	d10e      	bne.n	23fe046 <__gethex+0x3a2>
 23fe028:	f047 0710 	orr.w	r7, r7, #16
 23fe02c:	e033      	b.n	23fe096 <__gethex+0x3f2>
 23fe02e:	f04f 0a01 	mov.w	sl, #1
 23fe032:	e7cf      	b.n	23fdfd4 <__gethex+0x330>
 23fe034:	2701      	movs	r7, #1
 23fe036:	e7e2      	b.n	23fdffe <__gethex+0x35a>
 23fe038:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fe03a:	f1c3 0301 	rsb	r3, r3, #1
 23fe03e:	9315      	str	r3, [sp, #84]	; 0x54
 23fe040:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fe042:	2b00      	cmp	r3, #0
 23fe044:	d0f0      	beq.n	23fe028 <__gethex+0x384>
 23fe046:	f8d4 b010 	ldr.w	fp, [r4, #16]
 23fe04a:	f104 0314 	add.w	r3, r4, #20
 23fe04e:	f04f 0c00 	mov.w	ip, #0
 23fe052:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 23fe056:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 23fe05a:	4618      	mov	r0, r3
 23fe05c:	f853 2b04 	ldr.w	r2, [r3], #4
 23fe060:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 23fe064:	d01c      	beq.n	23fe0a0 <__gethex+0x3fc>
 23fe066:	3201      	adds	r2, #1
 23fe068:	6002      	str	r2, [r0, #0]
 23fe06a:	2f02      	cmp	r7, #2
 23fe06c:	f104 0314 	add.w	r3, r4, #20
 23fe070:	d13f      	bne.n	23fe0f2 <__gethex+0x44e>
 23fe072:	f8d8 2000 	ldr.w	r2, [r8]
 23fe076:	3a01      	subs	r2, #1
 23fe078:	42b2      	cmp	r2, r6
 23fe07a:	d10a      	bne.n	23fe092 <__gethex+0x3ee>
 23fe07c:	1171      	asrs	r1, r6, #5
 23fe07e:	2201      	movs	r2, #1
 23fe080:	f006 061f 	and.w	r6, r6, #31
 23fe084:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 23fe088:	fa02 f606 	lsl.w	r6, r2, r6
 23fe08c:	421e      	tst	r6, r3
 23fe08e:	bf18      	it	ne
 23fe090:	4617      	movne	r7, r2
 23fe092:	f047 0720 	orr.w	r7, r7, #32
 23fe096:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23fe098:	601c      	str	r4, [r3, #0]
 23fe09a:	9b04      	ldr	r3, [sp, #16]
 23fe09c:	601d      	str	r5, [r3, #0]
 23fe09e:	e695      	b.n	23fddcc <__gethex+0x128>
 23fe0a0:	4299      	cmp	r1, r3
 23fe0a2:	f843 cc04 	str.w	ip, [r3, #-4]
 23fe0a6:	d8d8      	bhi.n	23fe05a <__gethex+0x3b6>
 23fe0a8:	68a3      	ldr	r3, [r4, #8]
 23fe0aa:	459b      	cmp	fp, r3
 23fe0ac:	db19      	blt.n	23fe0e2 <__gethex+0x43e>
 23fe0ae:	6861      	ldr	r1, [r4, #4]
 23fe0b0:	ee18 0a10 	vmov	r0, s16
 23fe0b4:	3101      	adds	r1, #1
 23fe0b6:	f000 f913 	bl	23fe2e0 <_Balloc>
 23fe0ba:	4681      	mov	r9, r0
 23fe0bc:	b918      	cbnz	r0, 23fe0c6 <__gethex+0x422>
 23fe0be:	4b1b      	ldr	r3, [pc, #108]	; (23fe12c <__gethex+0x488>)
 23fe0c0:	4602      	mov	r2, r0
 23fe0c2:	2184      	movs	r1, #132	; 0x84
 23fe0c4:	e6a8      	b.n	23fde18 <__gethex+0x174>
 23fe0c6:	6922      	ldr	r2, [r4, #16]
 23fe0c8:	f104 010c 	add.w	r1, r4, #12
 23fe0cc:	300c      	adds	r0, #12
 23fe0ce:	3202      	adds	r2, #2
 23fe0d0:	0092      	lsls	r2, r2, #2
 23fe0d2:	f7fe fda5 	bl	23fcc20 <memcpy>
 23fe0d6:	4621      	mov	r1, r4
 23fe0d8:	464c      	mov	r4, r9
 23fe0da:	ee18 0a10 	vmov	r0, s16
 23fe0de:	f000 f93f 	bl	23fe360 <_Bfree>
 23fe0e2:	6923      	ldr	r3, [r4, #16]
 23fe0e4:	1c5a      	adds	r2, r3, #1
 23fe0e6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 23fe0ea:	6122      	str	r2, [r4, #16]
 23fe0ec:	2201      	movs	r2, #1
 23fe0ee:	615a      	str	r2, [r3, #20]
 23fe0f0:	e7bb      	b.n	23fe06a <__gethex+0x3c6>
 23fe0f2:	6922      	ldr	r2, [r4, #16]
 23fe0f4:	455a      	cmp	r2, fp
 23fe0f6:	dd0b      	ble.n	23fe110 <__gethex+0x46c>
 23fe0f8:	2101      	movs	r1, #1
 23fe0fa:	4620      	mov	r0, r4
 23fe0fc:	f7ff fd6c 	bl	23fdbd8 <rshift>
 23fe100:	3501      	adds	r5, #1
 23fe102:	f8d8 3008 	ldr.w	r3, [r8, #8]
 23fe106:	42ab      	cmp	r3, r5
 23fe108:	f6ff aed0 	blt.w	23fdeac <__gethex+0x208>
 23fe10c:	2701      	movs	r7, #1
 23fe10e:	e7c0      	b.n	23fe092 <__gethex+0x3ee>
 23fe110:	f016 061f 	ands.w	r6, r6, #31
 23fe114:	d0fa      	beq.n	23fe10c <__gethex+0x468>
 23fe116:	4453      	add	r3, sl
 23fe118:	f1c6 0620 	rsb	r6, r6, #32
 23fe11c:	f853 0c04 	ldr.w	r0, [r3, #-4]
 23fe120:	f000 f9d2 	bl	23fe4c8 <__hi0bits>
 23fe124:	42b0      	cmp	r0, r6
 23fe126:	dbe7      	blt.n	23fe0f8 <__gethex+0x454>
 23fe128:	e7f0      	b.n	23fe10c <__gethex+0x468>
 23fe12a:	bf00      	nop
 23fe12c:	023ffde1 	.word	0x023ffde1

023fe130 <L_shift>:
 23fe130:	f1c2 0208 	rsb	r2, r2, #8
 23fe134:	0092      	lsls	r2, r2, #2
 23fe136:	b570      	push	{r4, r5, r6, lr}
 23fe138:	f1c2 0620 	rsb	r6, r2, #32
 23fe13c:	6843      	ldr	r3, [r0, #4]
 23fe13e:	6804      	ldr	r4, [r0, #0]
 23fe140:	fa03 f506 	lsl.w	r5, r3, r6
 23fe144:	40d3      	lsrs	r3, r2
 23fe146:	432c      	orrs	r4, r5
 23fe148:	6004      	str	r4, [r0, #0]
 23fe14a:	f840 3f04 	str.w	r3, [r0, #4]!
 23fe14e:	4288      	cmp	r0, r1
 23fe150:	d3f4      	bcc.n	23fe13c <L_shift+0xc>
 23fe152:	bd70      	pop	{r4, r5, r6, pc}

023fe154 <__match>:
 23fe154:	6803      	ldr	r3, [r0, #0]
 23fe156:	3301      	adds	r3, #1
 23fe158:	b530      	push	{r4, r5, lr}
 23fe15a:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fe15e:	b914      	cbnz	r4, 23fe166 <__match+0x12>
 23fe160:	6003      	str	r3, [r0, #0]
 23fe162:	2001      	movs	r0, #1
 23fe164:	bd30      	pop	{r4, r5, pc}
 23fe166:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe16a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 23fe16e:	2d19      	cmp	r5, #25
 23fe170:	bf98      	it	ls
 23fe172:	3220      	addls	r2, #32
 23fe174:	42a2      	cmp	r2, r4
 23fe176:	d0f0      	beq.n	23fe15a <__match+0x6>
 23fe178:	2000      	movs	r0, #0
 23fe17a:	e7f3      	b.n	23fe164 <__match+0x10>

023fe17c <__hexnan>:
 23fe17c:	680b      	ldr	r3, [r1, #0]
 23fe17e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe182:	115e      	asrs	r6, r3, #5
 23fe184:	f013 031f 	ands.w	r3, r3, #31
 23fe188:	f04f 0500 	mov.w	r5, #0
 23fe18c:	b087      	sub	sp, #28
 23fe18e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 23fe192:	4690      	mov	r8, r2
 23fe194:	4682      	mov	sl, r0
 23fe196:	6802      	ldr	r2, [r0, #0]
 23fe198:	bf18      	it	ne
 23fe19a:	3604      	addne	r6, #4
 23fe19c:	46ab      	mov	fp, r5
 23fe19e:	9301      	str	r3, [sp, #4]
 23fe1a0:	1f37      	subs	r7, r6, #4
 23fe1a2:	f846 5c04 	str.w	r5, [r6, #-4]
 23fe1a6:	9502      	str	r5, [sp, #8]
 23fe1a8:	46b9      	mov	r9, r7
 23fe1aa:	463c      	mov	r4, r7
 23fe1ac:	1c53      	adds	r3, r2, #1
 23fe1ae:	7851      	ldrb	r1, [r2, #1]
 23fe1b0:	9303      	str	r3, [sp, #12]
 23fe1b2:	b341      	cbz	r1, 23fe206 <__hexnan+0x8a>
 23fe1b4:	4608      	mov	r0, r1
 23fe1b6:	9205      	str	r2, [sp, #20]
 23fe1b8:	9104      	str	r1, [sp, #16]
 23fe1ba:	f7ff fd5e 	bl	23fdc7a <__hexdig_fun>
 23fe1be:	2800      	cmp	r0, #0
 23fe1c0:	d14f      	bne.n	23fe262 <__hexnan+0xe6>
 23fe1c2:	9904      	ldr	r1, [sp, #16]
 23fe1c4:	9a05      	ldr	r2, [sp, #20]
 23fe1c6:	2920      	cmp	r1, #32
 23fe1c8:	d818      	bhi.n	23fe1fc <__hexnan+0x80>
 23fe1ca:	9b02      	ldr	r3, [sp, #8]
 23fe1cc:	459b      	cmp	fp, r3
 23fe1ce:	dd13      	ble.n	23fe1f8 <__hexnan+0x7c>
 23fe1d0:	454c      	cmp	r4, r9
 23fe1d2:	d206      	bcs.n	23fe1e2 <__hexnan+0x66>
 23fe1d4:	2d07      	cmp	r5, #7
 23fe1d6:	dc04      	bgt.n	23fe1e2 <__hexnan+0x66>
 23fe1d8:	462a      	mov	r2, r5
 23fe1da:	4649      	mov	r1, r9
 23fe1dc:	4620      	mov	r0, r4
 23fe1de:	f7ff ffa7 	bl	23fe130 <L_shift>
 23fe1e2:	4544      	cmp	r4, r8
 23fe1e4:	d94f      	bls.n	23fe286 <__hexnan+0x10a>
 23fe1e6:	2300      	movs	r3, #0
 23fe1e8:	f1a4 0904 	sub.w	r9, r4, #4
 23fe1ec:	f8cd b008 	str.w	fp, [sp, #8]
 23fe1f0:	f844 3c04 	str.w	r3, [r4, #-4]
 23fe1f4:	461d      	mov	r5, r3
 23fe1f6:	464c      	mov	r4, r9
 23fe1f8:	9a03      	ldr	r2, [sp, #12]
 23fe1fa:	e7d7      	b.n	23fe1ac <__hexnan+0x30>
 23fe1fc:	2929      	cmp	r1, #41	; 0x29
 23fe1fe:	d155      	bne.n	23fe2ac <__hexnan+0x130>
 23fe200:	3202      	adds	r2, #2
 23fe202:	f8ca 2000 	str.w	r2, [sl]
 23fe206:	f1bb 0f00 	cmp.w	fp, #0
 23fe20a:	d04f      	beq.n	23fe2ac <__hexnan+0x130>
 23fe20c:	454c      	cmp	r4, r9
 23fe20e:	d206      	bcs.n	23fe21e <__hexnan+0xa2>
 23fe210:	2d07      	cmp	r5, #7
 23fe212:	dc04      	bgt.n	23fe21e <__hexnan+0xa2>
 23fe214:	462a      	mov	r2, r5
 23fe216:	4649      	mov	r1, r9
 23fe218:	4620      	mov	r0, r4
 23fe21a:	f7ff ff89 	bl	23fe130 <L_shift>
 23fe21e:	4544      	cmp	r4, r8
 23fe220:	d933      	bls.n	23fe28a <__hexnan+0x10e>
 23fe222:	f1a8 0204 	sub.w	r2, r8, #4
 23fe226:	4623      	mov	r3, r4
 23fe228:	f853 1b04 	ldr.w	r1, [r3], #4
 23fe22c:	429f      	cmp	r7, r3
 23fe22e:	f842 1f04 	str.w	r1, [r2, #4]!
 23fe232:	d2f9      	bcs.n	23fe228 <__hexnan+0xac>
 23fe234:	1b3b      	subs	r3, r7, r4
 23fe236:	3e03      	subs	r6, #3
 23fe238:	3401      	adds	r4, #1
 23fe23a:	2200      	movs	r2, #0
 23fe23c:	f023 0303 	bic.w	r3, r3, #3
 23fe240:	3304      	adds	r3, #4
 23fe242:	42b4      	cmp	r4, r6
 23fe244:	bf88      	it	hi
 23fe246:	2304      	movhi	r3, #4
 23fe248:	4443      	add	r3, r8
 23fe24a:	f843 2b04 	str.w	r2, [r3], #4
 23fe24e:	429f      	cmp	r7, r3
 23fe250:	d2fb      	bcs.n	23fe24a <__hexnan+0xce>
 23fe252:	683b      	ldr	r3, [r7, #0]
 23fe254:	b91b      	cbnz	r3, 23fe25e <__hexnan+0xe2>
 23fe256:	4547      	cmp	r7, r8
 23fe258:	d126      	bne.n	23fe2a8 <__hexnan+0x12c>
 23fe25a:	2301      	movs	r3, #1
 23fe25c:	603b      	str	r3, [r7, #0]
 23fe25e:	2005      	movs	r0, #5
 23fe260:	e025      	b.n	23fe2ae <__hexnan+0x132>
 23fe262:	3501      	adds	r5, #1
 23fe264:	f10b 0b01 	add.w	fp, fp, #1
 23fe268:	2d08      	cmp	r5, #8
 23fe26a:	dd05      	ble.n	23fe278 <__hexnan+0xfc>
 23fe26c:	4544      	cmp	r4, r8
 23fe26e:	d9c3      	bls.n	23fe1f8 <__hexnan+0x7c>
 23fe270:	2300      	movs	r3, #0
 23fe272:	3c04      	subs	r4, #4
 23fe274:	2501      	movs	r5, #1
 23fe276:	6023      	str	r3, [r4, #0]
 23fe278:	6822      	ldr	r2, [r4, #0]
 23fe27a:	f000 000f 	and.w	r0, r0, #15
 23fe27e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 23fe282:	6022      	str	r2, [r4, #0]
 23fe284:	e7b8      	b.n	23fe1f8 <__hexnan+0x7c>
 23fe286:	2508      	movs	r5, #8
 23fe288:	e7b6      	b.n	23fe1f8 <__hexnan+0x7c>
 23fe28a:	9b01      	ldr	r3, [sp, #4]
 23fe28c:	2b00      	cmp	r3, #0
 23fe28e:	d0e0      	beq.n	23fe252 <__hexnan+0xd6>
 23fe290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fe294:	f1c3 0320 	rsb	r3, r3, #32
 23fe298:	fa22 f303 	lsr.w	r3, r2, r3
 23fe29c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 23fe2a0:	401a      	ands	r2, r3
 23fe2a2:	f846 2c04 	str.w	r2, [r6, #-4]
 23fe2a6:	e7d4      	b.n	23fe252 <__hexnan+0xd6>
 23fe2a8:	3f04      	subs	r7, #4
 23fe2aa:	e7d2      	b.n	23fe252 <__hexnan+0xd6>
 23fe2ac:	2004      	movs	r0, #4
 23fe2ae:	b007      	add	sp, #28
 23fe2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fe2b4 <__retarget_lock_acquire_recursive>:
 23fe2b4:	4770      	bx	lr

023fe2b6 <__retarget_lock_release>:
 23fe2b6:	4770      	bx	lr

023fe2b8 <__retarget_lock_release_recursive>:
 23fe2b8:	4770      	bx	lr

023fe2ba <__ascii_mbtowc>:
 23fe2ba:	b082      	sub	sp, #8
 23fe2bc:	b901      	cbnz	r1, 23fe2c0 <__ascii_mbtowc+0x6>
 23fe2be:	a901      	add	r1, sp, #4
 23fe2c0:	b142      	cbz	r2, 23fe2d4 <__ascii_mbtowc+0x1a>
 23fe2c2:	b14b      	cbz	r3, 23fe2d8 <__ascii_mbtowc+0x1e>
 23fe2c4:	7813      	ldrb	r3, [r2, #0]
 23fe2c6:	600b      	str	r3, [r1, #0]
 23fe2c8:	7812      	ldrb	r2, [r2, #0]
 23fe2ca:	1e10      	subs	r0, r2, #0
 23fe2cc:	bf18      	it	ne
 23fe2ce:	2001      	movne	r0, #1
 23fe2d0:	b002      	add	sp, #8
 23fe2d2:	4770      	bx	lr
 23fe2d4:	4610      	mov	r0, r2
 23fe2d6:	e7fb      	b.n	23fe2d0 <__ascii_mbtowc+0x16>
 23fe2d8:	f06f 0001 	mvn.w	r0, #1
 23fe2dc:	e7f8      	b.n	23fe2d0 <__ascii_mbtowc+0x16>
	...

023fe2e0 <_Balloc>:
 23fe2e0:	b570      	push	{r4, r5, r6, lr}
 23fe2e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 23fe2e4:	4604      	mov	r4, r0
 23fe2e6:	460d      	mov	r5, r1
 23fe2e8:	b976      	cbnz	r6, 23fe308 <_Balloc+0x28>
 23fe2ea:	2010      	movs	r0, #16
 23fe2ec:	f7fa f988 	bl	23f8600 <malloc>
 23fe2f0:	4602      	mov	r2, r0
 23fe2f2:	6260      	str	r0, [r4, #36]	; 0x24
 23fe2f4:	b920      	cbnz	r0, 23fe300 <_Balloc+0x20>
 23fe2f6:	4b18      	ldr	r3, [pc, #96]	; (23fe358 <_Balloc+0x78>)
 23fe2f8:	2166      	movs	r1, #102	; 0x66
 23fe2fa:	4818      	ldr	r0, [pc, #96]	; (23fe35c <_Balloc+0x7c>)
 23fe2fc:	f7fa f9fe 	bl	23f86fc <__assert_func>
 23fe300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 23fe304:	6006      	str	r6, [r0, #0]
 23fe306:	60c6      	str	r6, [r0, #12]
 23fe308:	6a66      	ldr	r6, [r4, #36]	; 0x24
 23fe30a:	68f3      	ldr	r3, [r6, #12]
 23fe30c:	b183      	cbz	r3, 23fe330 <_Balloc+0x50>
 23fe30e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fe310:	68db      	ldr	r3, [r3, #12]
 23fe312:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 23fe316:	b9b8      	cbnz	r0, 23fe348 <_Balloc+0x68>
 23fe318:	2101      	movs	r1, #1
 23fe31a:	4620      	mov	r0, r4
 23fe31c:	fa01 f605 	lsl.w	r6, r1, r5
 23fe320:	1d72      	adds	r2, r6, #5
 23fe322:	0092      	lsls	r2, r2, #2
 23fe324:	f000 fca1 	bl	23fec6a <_calloc_r>
 23fe328:	b160      	cbz	r0, 23fe344 <_Balloc+0x64>
 23fe32a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 23fe32e:	e00e      	b.n	23fe34e <_Balloc+0x6e>
 23fe330:	2221      	movs	r2, #33	; 0x21
 23fe332:	2104      	movs	r1, #4
 23fe334:	4620      	mov	r0, r4
 23fe336:	f000 fc98 	bl	23fec6a <_calloc_r>
 23fe33a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fe33c:	60f0      	str	r0, [r6, #12]
 23fe33e:	68db      	ldr	r3, [r3, #12]
 23fe340:	2b00      	cmp	r3, #0
 23fe342:	d1e4      	bne.n	23fe30e <_Balloc+0x2e>
 23fe344:	2000      	movs	r0, #0
 23fe346:	bd70      	pop	{r4, r5, r6, pc}
 23fe348:	6802      	ldr	r2, [r0, #0]
 23fe34a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 23fe34e:	2300      	movs	r3, #0
 23fe350:	e9c0 3303 	strd	r3, r3, [r0, #12]
 23fe354:	e7f7      	b.n	23fe346 <_Balloc+0x66>
 23fe356:	bf00      	nop
 23fe358:	023ffc11 	.word	0x023ffc11
 23fe35c:	023ffe68 	.word	0x023ffe68

023fe360 <_Bfree>:
 23fe360:	b570      	push	{r4, r5, r6, lr}
 23fe362:	6a46      	ldr	r6, [r0, #36]	; 0x24
 23fe364:	4605      	mov	r5, r0
 23fe366:	460c      	mov	r4, r1
 23fe368:	b976      	cbnz	r6, 23fe388 <_Bfree+0x28>
 23fe36a:	2010      	movs	r0, #16
 23fe36c:	f7fa f948 	bl	23f8600 <malloc>
 23fe370:	4602      	mov	r2, r0
 23fe372:	6268      	str	r0, [r5, #36]	; 0x24
 23fe374:	b920      	cbnz	r0, 23fe380 <_Bfree+0x20>
 23fe376:	4b09      	ldr	r3, [pc, #36]	; (23fe39c <_Bfree+0x3c>)
 23fe378:	218a      	movs	r1, #138	; 0x8a
 23fe37a:	4809      	ldr	r0, [pc, #36]	; (23fe3a0 <_Bfree+0x40>)
 23fe37c:	f7fa f9be 	bl	23f86fc <__assert_func>
 23fe380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 23fe384:	6006      	str	r6, [r0, #0]
 23fe386:	60c6      	str	r6, [r0, #12]
 23fe388:	b13c      	cbz	r4, 23fe39a <_Bfree+0x3a>
 23fe38a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 23fe38c:	6862      	ldr	r2, [r4, #4]
 23fe38e:	68db      	ldr	r3, [r3, #12]
 23fe390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 23fe394:	6021      	str	r1, [r4, #0]
 23fe396:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 23fe39a:	bd70      	pop	{r4, r5, r6, pc}
 23fe39c:	023ffc11 	.word	0x023ffc11
 23fe3a0:	023ffe68 	.word	0x023ffe68

023fe3a4 <__multadd>:
 23fe3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe3a8:	f101 0c14 	add.w	ip, r1, #20
 23fe3ac:	4607      	mov	r7, r0
 23fe3ae:	460c      	mov	r4, r1
 23fe3b0:	461e      	mov	r6, r3
 23fe3b2:	690d      	ldr	r5, [r1, #16]
 23fe3b4:	2000      	movs	r0, #0
 23fe3b6:	f8dc 3000 	ldr.w	r3, [ip]
 23fe3ba:	3001      	adds	r0, #1
 23fe3bc:	b299      	uxth	r1, r3
 23fe3be:	4285      	cmp	r5, r0
 23fe3c0:	fb02 6101 	mla	r1, r2, r1, r6
 23fe3c4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 23fe3c8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 23fe3cc:	b289      	uxth	r1, r1
 23fe3ce:	fb02 3306 	mla	r3, r2, r6, r3
 23fe3d2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 23fe3d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 23fe3da:	f84c 1b04 	str.w	r1, [ip], #4
 23fe3de:	dcea      	bgt.n	23fe3b6 <__multadd+0x12>
 23fe3e0:	b30e      	cbz	r6, 23fe426 <__multadd+0x82>
 23fe3e2:	68a3      	ldr	r3, [r4, #8]
 23fe3e4:	42ab      	cmp	r3, r5
 23fe3e6:	dc19      	bgt.n	23fe41c <__multadd+0x78>
 23fe3e8:	6861      	ldr	r1, [r4, #4]
 23fe3ea:	4638      	mov	r0, r7
 23fe3ec:	3101      	adds	r1, #1
 23fe3ee:	f7ff ff77 	bl	23fe2e0 <_Balloc>
 23fe3f2:	4680      	mov	r8, r0
 23fe3f4:	b928      	cbnz	r0, 23fe402 <__multadd+0x5e>
 23fe3f6:	4602      	mov	r2, r0
 23fe3f8:	4b0c      	ldr	r3, [pc, #48]	; (23fe42c <__multadd+0x88>)
 23fe3fa:	21b5      	movs	r1, #181	; 0xb5
 23fe3fc:	480c      	ldr	r0, [pc, #48]	; (23fe430 <__multadd+0x8c>)
 23fe3fe:	f7fa f97d 	bl	23f86fc <__assert_func>
 23fe402:	6922      	ldr	r2, [r4, #16]
 23fe404:	f104 010c 	add.w	r1, r4, #12
 23fe408:	300c      	adds	r0, #12
 23fe40a:	3202      	adds	r2, #2
 23fe40c:	0092      	lsls	r2, r2, #2
 23fe40e:	f7fe fc07 	bl	23fcc20 <memcpy>
 23fe412:	4621      	mov	r1, r4
 23fe414:	4644      	mov	r4, r8
 23fe416:	4638      	mov	r0, r7
 23fe418:	f7ff ffa2 	bl	23fe360 <_Bfree>
 23fe41c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 23fe420:	3501      	adds	r5, #1
 23fe422:	615e      	str	r6, [r3, #20]
 23fe424:	6125      	str	r5, [r4, #16]
 23fe426:	4620      	mov	r0, r4
 23fe428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe42c:	023ffde1 	.word	0x023ffde1
 23fe430:	023ffe68 	.word	0x023ffe68

023fe434 <__s2b>:
 23fe434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fe438:	4615      	mov	r5, r2
 23fe43a:	461f      	mov	r7, r3
 23fe43c:	2209      	movs	r2, #9
 23fe43e:	3308      	adds	r3, #8
 23fe440:	460c      	mov	r4, r1
 23fe442:	4606      	mov	r6, r0
 23fe444:	2100      	movs	r1, #0
 23fe446:	fb93 f3f2 	sdiv	r3, r3, r2
 23fe44a:	2201      	movs	r2, #1
 23fe44c:	429a      	cmp	r2, r3
 23fe44e:	db09      	blt.n	23fe464 <__s2b+0x30>
 23fe450:	4630      	mov	r0, r6
 23fe452:	f7ff ff45 	bl	23fe2e0 <_Balloc>
 23fe456:	b940      	cbnz	r0, 23fe46a <__s2b+0x36>
 23fe458:	4602      	mov	r2, r0
 23fe45a:	4b19      	ldr	r3, [pc, #100]	; (23fe4c0 <__s2b+0x8c>)
 23fe45c:	21ce      	movs	r1, #206	; 0xce
 23fe45e:	4819      	ldr	r0, [pc, #100]	; (23fe4c4 <__s2b+0x90>)
 23fe460:	f7fa f94c 	bl	23f86fc <__assert_func>
 23fe464:	0052      	lsls	r2, r2, #1
 23fe466:	3101      	adds	r1, #1
 23fe468:	e7f0      	b.n	23fe44c <__s2b+0x18>
 23fe46a:	9b08      	ldr	r3, [sp, #32]
 23fe46c:	2d09      	cmp	r5, #9
 23fe46e:	6143      	str	r3, [r0, #20]
 23fe470:	f04f 0301 	mov.w	r3, #1
 23fe474:	6103      	str	r3, [r0, #16]
 23fe476:	dd16      	ble.n	23fe4a6 <__s2b+0x72>
 23fe478:	f104 0909 	add.w	r9, r4, #9
 23fe47c:	442c      	add	r4, r5
 23fe47e:	46c8      	mov	r8, r9
 23fe480:	f818 3b01 	ldrb.w	r3, [r8], #1
 23fe484:	4601      	mov	r1, r0
 23fe486:	220a      	movs	r2, #10
 23fe488:	4630      	mov	r0, r6
 23fe48a:	3b30      	subs	r3, #48	; 0x30
 23fe48c:	f7ff ff8a 	bl	23fe3a4 <__multadd>
 23fe490:	45a0      	cmp	r8, r4
 23fe492:	d1f5      	bne.n	23fe480 <__s2b+0x4c>
 23fe494:	f1a5 0408 	sub.w	r4, r5, #8
 23fe498:	444c      	add	r4, r9
 23fe49a:	1b2d      	subs	r5, r5, r4
 23fe49c:	1963      	adds	r3, r4, r5
 23fe49e:	42bb      	cmp	r3, r7
 23fe4a0:	db04      	blt.n	23fe4ac <__s2b+0x78>
 23fe4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fe4a6:	340a      	adds	r4, #10
 23fe4a8:	2509      	movs	r5, #9
 23fe4aa:	e7f6      	b.n	23fe49a <__s2b+0x66>
 23fe4ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 23fe4b0:	4601      	mov	r1, r0
 23fe4b2:	220a      	movs	r2, #10
 23fe4b4:	4630      	mov	r0, r6
 23fe4b6:	3b30      	subs	r3, #48	; 0x30
 23fe4b8:	f7ff ff74 	bl	23fe3a4 <__multadd>
 23fe4bc:	e7ee      	b.n	23fe49c <__s2b+0x68>
 23fe4be:	bf00      	nop
 23fe4c0:	023ffde1 	.word	0x023ffde1
 23fe4c4:	023ffe68 	.word	0x023ffe68

023fe4c8 <__hi0bits>:
 23fe4c8:	0c03      	lsrs	r3, r0, #16
 23fe4ca:	041b      	lsls	r3, r3, #16
 23fe4cc:	b9d3      	cbnz	r3, 23fe504 <__hi0bits+0x3c>
 23fe4ce:	0400      	lsls	r0, r0, #16
 23fe4d0:	2310      	movs	r3, #16
 23fe4d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 23fe4d6:	bf04      	itt	eq
 23fe4d8:	0200      	lsleq	r0, r0, #8
 23fe4da:	3308      	addeq	r3, #8
 23fe4dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 23fe4e0:	bf04      	itt	eq
 23fe4e2:	0100      	lsleq	r0, r0, #4
 23fe4e4:	3304      	addeq	r3, #4
 23fe4e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 23fe4ea:	bf04      	itt	eq
 23fe4ec:	0080      	lsleq	r0, r0, #2
 23fe4ee:	3302      	addeq	r3, #2
 23fe4f0:	2800      	cmp	r0, #0
 23fe4f2:	db05      	blt.n	23fe500 <__hi0bits+0x38>
 23fe4f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 23fe4f8:	f103 0301 	add.w	r3, r3, #1
 23fe4fc:	bf08      	it	eq
 23fe4fe:	2320      	moveq	r3, #32
 23fe500:	4618      	mov	r0, r3
 23fe502:	4770      	bx	lr
 23fe504:	2300      	movs	r3, #0
 23fe506:	e7e4      	b.n	23fe4d2 <__hi0bits+0xa>

023fe508 <__lo0bits>:
 23fe508:	6803      	ldr	r3, [r0, #0]
 23fe50a:	4601      	mov	r1, r0
 23fe50c:	f013 0207 	ands.w	r2, r3, #7
 23fe510:	d00b      	beq.n	23fe52a <__lo0bits+0x22>
 23fe512:	07da      	lsls	r2, r3, #31
 23fe514:	d423      	bmi.n	23fe55e <__lo0bits+0x56>
 23fe516:	0798      	lsls	r0, r3, #30
 23fe518:	bf47      	ittee	mi
 23fe51a:	085b      	lsrmi	r3, r3, #1
 23fe51c:	2001      	movmi	r0, #1
 23fe51e:	089b      	lsrpl	r3, r3, #2
 23fe520:	2002      	movpl	r0, #2
 23fe522:	bf4c      	ite	mi
 23fe524:	600b      	strmi	r3, [r1, #0]
 23fe526:	600b      	strpl	r3, [r1, #0]
 23fe528:	4770      	bx	lr
 23fe52a:	b298      	uxth	r0, r3
 23fe52c:	b9a8      	cbnz	r0, 23fe55a <__lo0bits+0x52>
 23fe52e:	0c1b      	lsrs	r3, r3, #16
 23fe530:	2010      	movs	r0, #16
 23fe532:	b2da      	uxtb	r2, r3
 23fe534:	b90a      	cbnz	r2, 23fe53a <__lo0bits+0x32>
 23fe536:	3008      	adds	r0, #8
 23fe538:	0a1b      	lsrs	r3, r3, #8
 23fe53a:	071a      	lsls	r2, r3, #28
 23fe53c:	bf04      	itt	eq
 23fe53e:	091b      	lsreq	r3, r3, #4
 23fe540:	3004      	addeq	r0, #4
 23fe542:	079a      	lsls	r2, r3, #30
 23fe544:	bf04      	itt	eq
 23fe546:	089b      	lsreq	r3, r3, #2
 23fe548:	3002      	addeq	r0, #2
 23fe54a:	07da      	lsls	r2, r3, #31
 23fe54c:	d403      	bmi.n	23fe556 <__lo0bits+0x4e>
 23fe54e:	085b      	lsrs	r3, r3, #1
 23fe550:	f100 0001 	add.w	r0, r0, #1
 23fe554:	d005      	beq.n	23fe562 <__lo0bits+0x5a>
 23fe556:	600b      	str	r3, [r1, #0]
 23fe558:	4770      	bx	lr
 23fe55a:	4610      	mov	r0, r2
 23fe55c:	e7e9      	b.n	23fe532 <__lo0bits+0x2a>
 23fe55e:	2000      	movs	r0, #0
 23fe560:	4770      	bx	lr
 23fe562:	2020      	movs	r0, #32
 23fe564:	4770      	bx	lr
	...

023fe568 <__i2b>:
 23fe568:	b510      	push	{r4, lr}
 23fe56a:	460c      	mov	r4, r1
 23fe56c:	2101      	movs	r1, #1
 23fe56e:	f7ff feb7 	bl	23fe2e0 <_Balloc>
 23fe572:	4602      	mov	r2, r0
 23fe574:	b928      	cbnz	r0, 23fe582 <__i2b+0x1a>
 23fe576:	4b05      	ldr	r3, [pc, #20]	; (23fe58c <__i2b+0x24>)
 23fe578:	f44f 71a0 	mov.w	r1, #320	; 0x140
 23fe57c:	4804      	ldr	r0, [pc, #16]	; (23fe590 <__i2b+0x28>)
 23fe57e:	f7fa f8bd 	bl	23f86fc <__assert_func>
 23fe582:	2301      	movs	r3, #1
 23fe584:	6144      	str	r4, [r0, #20]
 23fe586:	6103      	str	r3, [r0, #16]
 23fe588:	bd10      	pop	{r4, pc}
 23fe58a:	bf00      	nop
 23fe58c:	023ffde1 	.word	0x023ffde1
 23fe590:	023ffe68 	.word	0x023ffe68

023fe594 <__multiply>:
 23fe594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe598:	4691      	mov	r9, r2
 23fe59a:	690a      	ldr	r2, [r1, #16]
 23fe59c:	460c      	mov	r4, r1
 23fe59e:	b085      	sub	sp, #20
 23fe5a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 23fe5a4:	429a      	cmp	r2, r3
 23fe5a6:	bfbe      	ittt	lt
 23fe5a8:	460b      	movlt	r3, r1
 23fe5aa:	464c      	movlt	r4, r9
 23fe5ac:	4699      	movlt	r9, r3
 23fe5ae:	6927      	ldr	r7, [r4, #16]
 23fe5b0:	68a3      	ldr	r3, [r4, #8]
 23fe5b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 23fe5b6:	6861      	ldr	r1, [r4, #4]
 23fe5b8:	eb07 060a 	add.w	r6, r7, sl
 23fe5bc:	42b3      	cmp	r3, r6
 23fe5be:	bfb8      	it	lt
 23fe5c0:	3101      	addlt	r1, #1
 23fe5c2:	f7ff fe8d 	bl	23fe2e0 <_Balloc>
 23fe5c6:	b930      	cbnz	r0, 23fe5d6 <__multiply+0x42>
 23fe5c8:	4602      	mov	r2, r0
 23fe5ca:	4b44      	ldr	r3, [pc, #272]	; (23fe6dc <__multiply+0x148>)
 23fe5cc:	f240 115d 	movw	r1, #349	; 0x15d
 23fe5d0:	4843      	ldr	r0, [pc, #268]	; (23fe6e0 <__multiply+0x14c>)
 23fe5d2:	f7fa f893 	bl	23f86fc <__assert_func>
 23fe5d6:	f100 0514 	add.w	r5, r0, #20
 23fe5da:	2200      	movs	r2, #0
 23fe5dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 23fe5e0:	462b      	mov	r3, r5
 23fe5e2:	4543      	cmp	r3, r8
 23fe5e4:	d321      	bcc.n	23fe62a <__multiply+0x96>
 23fe5e6:	f104 0314 	add.w	r3, r4, #20
 23fe5ea:	f104 0115 	add.w	r1, r4, #21
 23fe5ee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 23fe5f2:	f109 0314 	add.w	r3, r9, #20
 23fe5f6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 23fe5fa:	9202      	str	r2, [sp, #8]
 23fe5fc:	1b3a      	subs	r2, r7, r4
 23fe5fe:	3a15      	subs	r2, #21
 23fe600:	f022 0203 	bic.w	r2, r2, #3
 23fe604:	3204      	adds	r2, #4
 23fe606:	428f      	cmp	r7, r1
 23fe608:	bf38      	it	cc
 23fe60a:	2204      	movcc	r2, #4
 23fe60c:	9201      	str	r2, [sp, #4]
 23fe60e:	9a02      	ldr	r2, [sp, #8]
 23fe610:	9303      	str	r3, [sp, #12]
 23fe612:	429a      	cmp	r2, r3
 23fe614:	d80c      	bhi.n	23fe630 <__multiply+0x9c>
 23fe616:	2e00      	cmp	r6, #0
 23fe618:	dd03      	ble.n	23fe622 <__multiply+0x8e>
 23fe61a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 23fe61e:	2b00      	cmp	r3, #0
 23fe620:	d05a      	beq.n	23fe6d8 <__multiply+0x144>
 23fe622:	6106      	str	r6, [r0, #16]
 23fe624:	b005      	add	sp, #20
 23fe626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fe62a:	f843 2b04 	str.w	r2, [r3], #4
 23fe62e:	e7d8      	b.n	23fe5e2 <__multiply+0x4e>
 23fe630:	f8b3 a000 	ldrh.w	sl, [r3]
 23fe634:	f1ba 0f00 	cmp.w	sl, #0
 23fe638:	d024      	beq.n	23fe684 <__multiply+0xf0>
 23fe63a:	f104 0e14 	add.w	lr, r4, #20
 23fe63e:	46a9      	mov	r9, r5
 23fe640:	f04f 0c00 	mov.w	ip, #0
 23fe644:	f85e 2b04 	ldr.w	r2, [lr], #4
 23fe648:	f8d9 1000 	ldr.w	r1, [r9]
 23fe64c:	fa1f fb82 	uxth.w	fp, r2
 23fe650:	4577      	cmp	r7, lr
 23fe652:	b289      	uxth	r1, r1
 23fe654:	fb0a 110b 	mla	r1, sl, fp, r1
 23fe658:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 23fe65c:	f8d9 2000 	ldr.w	r2, [r9]
 23fe660:	4461      	add	r1, ip
 23fe662:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 23fe666:	fb0a c20b 	mla	r2, sl, fp, ip
 23fe66a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 23fe66e:	b289      	uxth	r1, r1
 23fe670:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 23fe674:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23fe678:	f849 1b04 	str.w	r1, [r9], #4
 23fe67c:	d8e2      	bhi.n	23fe644 <__multiply+0xb0>
 23fe67e:	9a01      	ldr	r2, [sp, #4]
 23fe680:	f845 c002 	str.w	ip, [r5, r2]
 23fe684:	9a03      	ldr	r2, [sp, #12]
 23fe686:	3304      	adds	r3, #4
 23fe688:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 23fe68c:	f1b9 0f00 	cmp.w	r9, #0
 23fe690:	d020      	beq.n	23fe6d4 <__multiply+0x140>
 23fe692:	6829      	ldr	r1, [r5, #0]
 23fe694:	f104 0c14 	add.w	ip, r4, #20
 23fe698:	46ae      	mov	lr, r5
 23fe69a:	f04f 0a00 	mov.w	sl, #0
 23fe69e:	f8bc b000 	ldrh.w	fp, [ip]
 23fe6a2:	b289      	uxth	r1, r1
 23fe6a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 23fe6a8:	fb09 220b 	mla	r2, r9, fp, r2
 23fe6ac:	4492      	add	sl, r2
 23fe6ae:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 23fe6b2:	f84e 1b04 	str.w	r1, [lr], #4
 23fe6b6:	f85c 2b04 	ldr.w	r2, [ip], #4
 23fe6ba:	f8be 1000 	ldrh.w	r1, [lr]
 23fe6be:	0c12      	lsrs	r2, r2, #16
 23fe6c0:	4567      	cmp	r7, ip
 23fe6c2:	fb09 1102 	mla	r1, r9, r2, r1
 23fe6c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 23fe6ca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 23fe6ce:	d8e6      	bhi.n	23fe69e <__multiply+0x10a>
 23fe6d0:	9a01      	ldr	r2, [sp, #4]
 23fe6d2:	50a9      	str	r1, [r5, r2]
 23fe6d4:	3504      	adds	r5, #4
 23fe6d6:	e79a      	b.n	23fe60e <__multiply+0x7a>
 23fe6d8:	3e01      	subs	r6, #1
 23fe6da:	e79c      	b.n	23fe616 <__multiply+0x82>
 23fe6dc:	023ffde1 	.word	0x023ffde1
 23fe6e0:	023ffe68 	.word	0x023ffe68

023fe6e4 <__pow5mult>:
 23fe6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fe6e8:	4615      	mov	r5, r2
 23fe6ea:	f012 0203 	ands.w	r2, r2, #3
 23fe6ee:	4606      	mov	r6, r0
 23fe6f0:	460f      	mov	r7, r1
 23fe6f2:	d007      	beq.n	23fe704 <__pow5mult+0x20>
 23fe6f4:	3a01      	subs	r2, #1
 23fe6f6:	4c25      	ldr	r4, [pc, #148]	; (23fe78c <__pow5mult+0xa8>)
 23fe6f8:	2300      	movs	r3, #0
 23fe6fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 23fe6fe:	f7ff fe51 	bl	23fe3a4 <__multadd>
 23fe702:	4607      	mov	r7, r0
 23fe704:	10ad      	asrs	r5, r5, #2
 23fe706:	d03d      	beq.n	23fe784 <__pow5mult+0xa0>
 23fe708:	6a74      	ldr	r4, [r6, #36]	; 0x24
 23fe70a:	b97c      	cbnz	r4, 23fe72c <__pow5mult+0x48>
 23fe70c:	2010      	movs	r0, #16
 23fe70e:	f7f9 ff77 	bl	23f8600 <malloc>
 23fe712:	4602      	mov	r2, r0
 23fe714:	6270      	str	r0, [r6, #36]	; 0x24
 23fe716:	b928      	cbnz	r0, 23fe724 <__pow5mult+0x40>
 23fe718:	4b1d      	ldr	r3, [pc, #116]	; (23fe790 <__pow5mult+0xac>)
 23fe71a:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 23fe71e:	481d      	ldr	r0, [pc, #116]	; (23fe794 <__pow5mult+0xb0>)
 23fe720:	f7f9 ffec 	bl	23f86fc <__assert_func>
 23fe724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fe728:	6004      	str	r4, [r0, #0]
 23fe72a:	60c4      	str	r4, [r0, #12]
 23fe72c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 23fe730:	f8d8 4008 	ldr.w	r4, [r8, #8]
 23fe734:	b94c      	cbnz	r4, 23fe74a <__pow5mult+0x66>
 23fe736:	f240 2171 	movw	r1, #625	; 0x271
 23fe73a:	4630      	mov	r0, r6
 23fe73c:	f7ff ff14 	bl	23fe568 <__i2b>
 23fe740:	2300      	movs	r3, #0
 23fe742:	4604      	mov	r4, r0
 23fe744:	f8c8 0008 	str.w	r0, [r8, #8]
 23fe748:	6003      	str	r3, [r0, #0]
 23fe74a:	f04f 0900 	mov.w	r9, #0
 23fe74e:	07eb      	lsls	r3, r5, #31
 23fe750:	d50a      	bpl.n	23fe768 <__pow5mult+0x84>
 23fe752:	4639      	mov	r1, r7
 23fe754:	4622      	mov	r2, r4
 23fe756:	4630      	mov	r0, r6
 23fe758:	f7ff ff1c 	bl	23fe594 <__multiply>
 23fe75c:	4680      	mov	r8, r0
 23fe75e:	4639      	mov	r1, r7
 23fe760:	4630      	mov	r0, r6
 23fe762:	4647      	mov	r7, r8
 23fe764:	f7ff fdfc 	bl	23fe360 <_Bfree>
 23fe768:	106d      	asrs	r5, r5, #1
 23fe76a:	d00b      	beq.n	23fe784 <__pow5mult+0xa0>
 23fe76c:	6820      	ldr	r0, [r4, #0]
 23fe76e:	b938      	cbnz	r0, 23fe780 <__pow5mult+0x9c>
 23fe770:	4622      	mov	r2, r4
 23fe772:	4621      	mov	r1, r4
 23fe774:	4630      	mov	r0, r6
 23fe776:	f7ff ff0d 	bl	23fe594 <__multiply>
 23fe77a:	6020      	str	r0, [r4, #0]
 23fe77c:	f8c0 9000 	str.w	r9, [r0]
 23fe780:	4604      	mov	r4, r0
 23fe782:	e7e4      	b.n	23fe74e <__pow5mult+0x6a>
 23fe784:	4638      	mov	r0, r7
 23fe786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fe78a:	bf00      	nop
 23fe78c:	023fffb8 	.word	0x023fffb8
 23fe790:	023ffc11 	.word	0x023ffc11
 23fe794:	023ffe68 	.word	0x023ffe68

023fe798 <__lshift>:
 23fe798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe79c:	460c      	mov	r4, r1
 23fe79e:	4607      	mov	r7, r0
 23fe7a0:	4691      	mov	r9, r2
 23fe7a2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 23fe7a6:	6923      	ldr	r3, [r4, #16]
 23fe7a8:	6849      	ldr	r1, [r1, #4]
 23fe7aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 23fe7ae:	68a3      	ldr	r3, [r4, #8]
 23fe7b0:	f108 0601 	add.w	r6, r8, #1
 23fe7b4:	42b3      	cmp	r3, r6
 23fe7b6:	db0b      	blt.n	23fe7d0 <__lshift+0x38>
 23fe7b8:	4638      	mov	r0, r7
 23fe7ba:	f7ff fd91 	bl	23fe2e0 <_Balloc>
 23fe7be:	4605      	mov	r5, r0
 23fe7c0:	b948      	cbnz	r0, 23fe7d6 <__lshift+0x3e>
 23fe7c2:	4602      	mov	r2, r0
 23fe7c4:	4b2a      	ldr	r3, [pc, #168]	; (23fe870 <__lshift+0xd8>)
 23fe7c6:	f240 11d9 	movw	r1, #473	; 0x1d9
 23fe7ca:	482a      	ldr	r0, [pc, #168]	; (23fe874 <__lshift+0xdc>)
 23fe7cc:	f7f9 ff96 	bl	23f86fc <__assert_func>
 23fe7d0:	3101      	adds	r1, #1
 23fe7d2:	005b      	lsls	r3, r3, #1
 23fe7d4:	e7ee      	b.n	23fe7b4 <__lshift+0x1c>
 23fe7d6:	2300      	movs	r3, #0
 23fe7d8:	f100 0114 	add.w	r1, r0, #20
 23fe7dc:	f100 0210 	add.w	r2, r0, #16
 23fe7e0:	4618      	mov	r0, r3
 23fe7e2:	4553      	cmp	r3, sl
 23fe7e4:	db37      	blt.n	23fe856 <__lshift+0xbe>
 23fe7e6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 23fe7ea:	f104 0314 	add.w	r3, r4, #20
 23fe7ee:	6920      	ldr	r0, [r4, #16]
 23fe7f0:	f019 091f 	ands.w	r9, r9, #31
 23fe7f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 23fe7f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 23fe7fc:	d02f      	beq.n	23fe85e <__lshift+0xc6>
 23fe7fe:	f1c9 0e20 	rsb	lr, r9, #32
 23fe802:	468a      	mov	sl, r1
 23fe804:	f04f 0c00 	mov.w	ip, #0
 23fe808:	681a      	ldr	r2, [r3, #0]
 23fe80a:	fa02 f209 	lsl.w	r2, r2, r9
 23fe80e:	ea42 020c 	orr.w	r2, r2, ip
 23fe812:	f84a 2b04 	str.w	r2, [sl], #4
 23fe816:	f853 2b04 	ldr.w	r2, [r3], #4
 23fe81a:	4298      	cmp	r0, r3
 23fe81c:	fa22 fc0e 	lsr.w	ip, r2, lr
 23fe820:	d8f2      	bhi.n	23fe808 <__lshift+0x70>
 23fe822:	1b03      	subs	r3, r0, r4
 23fe824:	f104 0215 	add.w	r2, r4, #21
 23fe828:	3b15      	subs	r3, #21
 23fe82a:	f023 0303 	bic.w	r3, r3, #3
 23fe82e:	3304      	adds	r3, #4
 23fe830:	4290      	cmp	r0, r2
 23fe832:	bf38      	it	cc
 23fe834:	2304      	movcc	r3, #4
 23fe836:	f841 c003 	str.w	ip, [r1, r3]
 23fe83a:	f1bc 0f00 	cmp.w	ip, #0
 23fe83e:	d001      	beq.n	23fe844 <__lshift+0xac>
 23fe840:	f108 0602 	add.w	r6, r8, #2
 23fe844:	3e01      	subs	r6, #1
 23fe846:	4638      	mov	r0, r7
 23fe848:	4621      	mov	r1, r4
 23fe84a:	612e      	str	r6, [r5, #16]
 23fe84c:	f7ff fd88 	bl	23fe360 <_Bfree>
 23fe850:	4628      	mov	r0, r5
 23fe852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fe856:	3301      	adds	r3, #1
 23fe858:	f842 0f04 	str.w	r0, [r2, #4]!
 23fe85c:	e7c1      	b.n	23fe7e2 <__lshift+0x4a>
 23fe85e:	3904      	subs	r1, #4
 23fe860:	f853 2b04 	ldr.w	r2, [r3], #4
 23fe864:	4298      	cmp	r0, r3
 23fe866:	f841 2f04 	str.w	r2, [r1, #4]!
 23fe86a:	d8f9      	bhi.n	23fe860 <__lshift+0xc8>
 23fe86c:	e7ea      	b.n	23fe844 <__lshift+0xac>
 23fe86e:	bf00      	nop
 23fe870:	023ffde1 	.word	0x023ffde1
 23fe874:	023ffe68 	.word	0x023ffe68

023fe878 <__mcmp>:
 23fe878:	6902      	ldr	r2, [r0, #16]
 23fe87a:	b530      	push	{r4, r5, lr}
 23fe87c:	690c      	ldr	r4, [r1, #16]
 23fe87e:	1b12      	subs	r2, r2, r4
 23fe880:	d10e      	bne.n	23fe8a0 <__mcmp+0x28>
 23fe882:	f100 0314 	add.w	r3, r0, #20
 23fe886:	3114      	adds	r1, #20
 23fe888:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 23fe88c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 23fe890:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 23fe894:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 23fe898:	42a5      	cmp	r5, r4
 23fe89a:	d003      	beq.n	23fe8a4 <__mcmp+0x2c>
 23fe89c:	d305      	bcc.n	23fe8aa <__mcmp+0x32>
 23fe89e:	2201      	movs	r2, #1
 23fe8a0:	4610      	mov	r0, r2
 23fe8a2:	bd30      	pop	{r4, r5, pc}
 23fe8a4:	4283      	cmp	r3, r0
 23fe8a6:	d3f3      	bcc.n	23fe890 <__mcmp+0x18>
 23fe8a8:	e7fa      	b.n	23fe8a0 <__mcmp+0x28>
 23fe8aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fe8ae:	e7f7      	b.n	23fe8a0 <__mcmp+0x28>

023fe8b0 <__mdiff>:
 23fe8b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe8b4:	460c      	mov	r4, r1
 23fe8b6:	4606      	mov	r6, r0
 23fe8b8:	4611      	mov	r1, r2
 23fe8ba:	4692      	mov	sl, r2
 23fe8bc:	4620      	mov	r0, r4
 23fe8be:	f7ff ffdb 	bl	23fe878 <__mcmp>
 23fe8c2:	1e05      	subs	r5, r0, #0
 23fe8c4:	d110      	bne.n	23fe8e8 <__mdiff+0x38>
 23fe8c6:	4629      	mov	r1, r5
 23fe8c8:	4630      	mov	r0, r6
 23fe8ca:	f7ff fd09 	bl	23fe2e0 <_Balloc>
 23fe8ce:	b930      	cbnz	r0, 23fe8de <__mdiff+0x2e>
 23fe8d0:	4b3d      	ldr	r3, [pc, #244]	; (23fe9c8 <__mdiff+0x118>)
 23fe8d2:	4602      	mov	r2, r0
 23fe8d4:	f240 2132 	movw	r1, #562	; 0x232
 23fe8d8:	483c      	ldr	r0, [pc, #240]	; (23fe9cc <__mdiff+0x11c>)
 23fe8da:	f7f9 ff0f 	bl	23f86fc <__assert_func>
 23fe8de:	2301      	movs	r3, #1
 23fe8e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 23fe8e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fe8e8:	bfa4      	itt	ge
 23fe8ea:	4653      	movge	r3, sl
 23fe8ec:	46a2      	movge	sl, r4
 23fe8ee:	4630      	mov	r0, r6
 23fe8f0:	bfa8      	it	ge
 23fe8f2:	2500      	movge	r5, #0
 23fe8f4:	f8da 1004 	ldr.w	r1, [sl, #4]
 23fe8f8:	bfac      	ite	ge
 23fe8fa:	461c      	movge	r4, r3
 23fe8fc:	2501      	movlt	r5, #1
 23fe8fe:	f7ff fcef 	bl	23fe2e0 <_Balloc>
 23fe902:	b920      	cbnz	r0, 23fe90e <__mdiff+0x5e>
 23fe904:	4b30      	ldr	r3, [pc, #192]	; (23fe9c8 <__mdiff+0x118>)
 23fe906:	4602      	mov	r2, r0
 23fe908:	f44f 7110 	mov.w	r1, #576	; 0x240
 23fe90c:	e7e4      	b.n	23fe8d8 <__mdiff+0x28>
 23fe90e:	f8da 7010 	ldr.w	r7, [sl, #16]
 23fe912:	f104 0914 	add.w	r9, r4, #20
 23fe916:	6926      	ldr	r6, [r4, #16]
 23fe918:	f100 0814 	add.w	r8, r0, #20
 23fe91c:	60c5      	str	r5, [r0, #12]
 23fe91e:	f10a 0514 	add.w	r5, sl, #20
 23fe922:	f10a 0210 	add.w	r2, sl, #16
 23fe926:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 23fe92a:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 23fe92e:	46c2      	mov	sl, r8
 23fe930:	f04f 0c00 	mov.w	ip, #0
 23fe934:	f852 bf04 	ldr.w	fp, [r2, #4]!
 23fe938:	f859 3b04 	ldr.w	r3, [r9], #4
 23fe93c:	fa1f f18b 	uxth.w	r1, fp
 23fe940:	454e      	cmp	r6, r9
 23fe942:	448c      	add	ip, r1
 23fe944:	b299      	uxth	r1, r3
 23fe946:	ea4f 4313 	mov.w	r3, r3, lsr #16
 23fe94a:	ebac 0101 	sub.w	r1, ip, r1
 23fe94e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 23fe952:	eb03 4321 	add.w	r3, r3, r1, asr #16
 23fe956:	b289      	uxth	r1, r1
 23fe958:	ea4f 4c23 	mov.w	ip, r3, asr #16
 23fe95c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 23fe960:	f84a 3b04 	str.w	r3, [sl], #4
 23fe964:	d8e6      	bhi.n	23fe934 <__mdiff+0x84>
 23fe966:	1b33      	subs	r3, r6, r4
 23fe968:	3415      	adds	r4, #21
 23fe96a:	3b15      	subs	r3, #21
 23fe96c:	f023 0303 	bic.w	r3, r3, #3
 23fe970:	3304      	adds	r3, #4
 23fe972:	42a6      	cmp	r6, r4
 23fe974:	bf38      	it	cc
 23fe976:	2304      	movcc	r3, #4
 23fe978:	441d      	add	r5, r3
 23fe97a:	4443      	add	r3, r8
 23fe97c:	462c      	mov	r4, r5
 23fe97e:	461e      	mov	r6, r3
 23fe980:	4574      	cmp	r4, lr
 23fe982:	d30e      	bcc.n	23fe9a2 <__mdiff+0xf2>
 23fe984:	f10e 0203 	add.w	r2, lr, #3
 23fe988:	1b52      	subs	r2, r2, r5
 23fe98a:	3d03      	subs	r5, #3
 23fe98c:	f022 0203 	bic.w	r2, r2, #3
 23fe990:	45ae      	cmp	lr, r5
 23fe992:	bf38      	it	cc
 23fe994:	2200      	movcc	r2, #0
 23fe996:	441a      	add	r2, r3
 23fe998:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 23fe99c:	b18b      	cbz	r3, 23fe9c2 <__mdiff+0x112>
 23fe99e:	6107      	str	r7, [r0, #16]
 23fe9a0:	e7a0      	b.n	23fe8e4 <__mdiff+0x34>
 23fe9a2:	f854 8b04 	ldr.w	r8, [r4], #4
 23fe9a6:	fa1f f288 	uxth.w	r2, r8
 23fe9aa:	4462      	add	r2, ip
 23fe9ac:	1411      	asrs	r1, r2, #16
 23fe9ae:	b292      	uxth	r2, r2
 23fe9b0:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 23fe9b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 23fe9b8:	ea4f 4c21 	mov.w	ip, r1, asr #16
 23fe9bc:	f846 2b04 	str.w	r2, [r6], #4
 23fe9c0:	e7de      	b.n	23fe980 <__mdiff+0xd0>
 23fe9c2:	3f01      	subs	r7, #1
 23fe9c4:	e7e8      	b.n	23fe998 <__mdiff+0xe8>
 23fe9c6:	bf00      	nop
 23fe9c8:	023ffde1 	.word	0x023ffde1
 23fe9cc:	023ffe68 	.word	0x023ffe68

023fe9d0 <__ulp>:
 23fe9d0:	b082      	sub	sp, #8
 23fe9d2:	4913      	ldr	r1, [pc, #76]	; (23fea20 <__ulp+0x50>)
 23fe9d4:	ed8d 0b00 	vstr	d0, [sp]
 23fe9d8:	9b01      	ldr	r3, [sp, #4]
 23fe9da:	4019      	ands	r1, r3
 23fe9dc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 23fe9e0:	2900      	cmp	r1, #0
 23fe9e2:	dd05      	ble.n	23fe9f0 <__ulp+0x20>
 23fe9e4:	2200      	movs	r2, #0
 23fe9e6:	460b      	mov	r3, r1
 23fe9e8:	ec43 2b10 	vmov	d0, r2, r3
 23fe9ec:	b002      	add	sp, #8
 23fe9ee:	4770      	bx	lr
 23fe9f0:	4249      	negs	r1, r1
 23fe9f2:	2200      	movs	r2, #0
 23fe9f4:	2300      	movs	r3, #0
 23fe9f6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 23fe9fa:	ea4f 5021 	mov.w	r0, r1, asr #20
 23fe9fe:	da04      	bge.n	23fea0a <__ulp+0x3a>
 23fea00:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 23fea04:	fa41 f300 	asr.w	r3, r1, r0
 23fea08:	e7ee      	b.n	23fe9e8 <__ulp+0x18>
 23fea0a:	f1a0 0114 	sub.w	r1, r0, #20
 23fea0e:	291e      	cmp	r1, #30
 23fea10:	bfd6      	itet	le
 23fea12:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 23fea16:	2101      	movgt	r1, #1
 23fea18:	fa20 f101 	lsrle.w	r1, r0, r1
 23fea1c:	460a      	mov	r2, r1
 23fea1e:	e7e3      	b.n	23fe9e8 <__ulp+0x18>
 23fea20:	7ff00000 	.word	0x7ff00000

023fea24 <__b2d>:
 23fea24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fea26:	6905      	ldr	r5, [r0, #16]
 23fea28:	f100 0714 	add.w	r7, r0, #20
 23fea2c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 23fea30:	f855 4c04 	ldr.w	r4, [r5, #-4]
 23fea34:	1f2e      	subs	r6, r5, #4
 23fea36:	4620      	mov	r0, r4
 23fea38:	f7ff fd46 	bl	23fe4c8 <__hi0bits>
 23fea3c:	f1c0 0320 	rsb	r3, r0, #32
 23fea40:	280a      	cmp	r0, #10
 23fea42:	f8df c07c 	ldr.w	ip, [pc, #124]	; 23feac0 <__b2d+0x9c>
 23fea46:	600b      	str	r3, [r1, #0]
 23fea48:	dc15      	bgt.n	23fea76 <__b2d+0x52>
 23fea4a:	f1c0 0e0b 	rsb	lr, r0, #11
 23fea4e:	42b7      	cmp	r7, r6
 23fea50:	f100 0015 	add.w	r0, r0, #21
 23fea54:	fa24 f10e 	lsr.w	r1, r4, lr
 23fea58:	fa04 f000 	lsl.w	r0, r4, r0
 23fea5c:	ea41 030c 	orr.w	r3, r1, ip
 23fea60:	bf34      	ite	cc
 23fea62:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 23fea66:	2100      	movcs	r1, #0
 23fea68:	fa21 f10e 	lsr.w	r1, r1, lr
 23fea6c:	ea40 0201 	orr.w	r2, r0, r1
 23fea70:	ec43 2b10 	vmov	d0, r2, r3
 23fea74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fea76:	42b7      	cmp	r7, r6
 23fea78:	bf3a      	itte	cc
 23fea7a:	f1a5 0608 	subcc.w	r6, r5, #8
 23fea7e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 23fea82:	2100      	movcs	r1, #0
 23fea84:	380b      	subs	r0, #11
 23fea86:	d017      	beq.n	23feab8 <__b2d+0x94>
 23fea88:	f1c0 0c20 	rsb	ip, r0, #32
 23fea8c:	fa04 f500 	lsl.w	r5, r4, r0
 23fea90:	42be      	cmp	r6, r7
 23fea92:	fa01 f000 	lsl.w	r0, r1, r0
 23fea96:	fa21 f40c 	lsr.w	r4, r1, ip
 23fea9a:	ea45 0504 	orr.w	r5, r5, r4
 23fea9e:	bf8c      	ite	hi
 23feaa0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 23feaa4:	2400      	movls	r4, #0
 23feaa6:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 23feaaa:	fa24 f40c 	lsr.w	r4, r4, ip
 23feaae:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 23feab2:	ea40 0204 	orr.w	r2, r0, r4
 23feab6:	e7db      	b.n	23fea70 <__b2d+0x4c>
 23feab8:	ea44 030c 	orr.w	r3, r4, ip
 23feabc:	460a      	mov	r2, r1
 23feabe:	e7d7      	b.n	23fea70 <__b2d+0x4c>
 23feac0:	3ff00000 	.word	0x3ff00000

023feac4 <__d2b>:
 23feac4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23feac8:	4689      	mov	r9, r1
 23feaca:	2101      	movs	r1, #1
 23feacc:	4690      	mov	r8, r2
 23feace:	ec57 6b10 	vmov	r6, r7, d0
 23fead2:	f7ff fc05 	bl	23fe2e0 <_Balloc>
 23fead6:	4604      	mov	r4, r0
 23fead8:	b930      	cbnz	r0, 23feae8 <__d2b+0x24>
 23feada:	4602      	mov	r2, r0
 23feadc:	4b25      	ldr	r3, [pc, #148]	; (23feb74 <__d2b+0xb0>)
 23feade:	f240 310a 	movw	r1, #778	; 0x30a
 23feae2:	4825      	ldr	r0, [pc, #148]	; (23feb78 <__d2b+0xb4>)
 23feae4:	f7f9 fe0a 	bl	23f86fc <__assert_func>
 23feae8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 23feaec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 23feaf0:	bb35      	cbnz	r5, 23feb40 <__d2b+0x7c>
 23feaf2:	2e00      	cmp	r6, #0
 23feaf4:	9301      	str	r3, [sp, #4]
 23feaf6:	d028      	beq.n	23feb4a <__d2b+0x86>
 23feaf8:	4668      	mov	r0, sp
 23feafa:	9600      	str	r6, [sp, #0]
 23feafc:	f7ff fd04 	bl	23fe508 <__lo0bits>
 23feb00:	9900      	ldr	r1, [sp, #0]
 23feb02:	b300      	cbz	r0, 23feb46 <__d2b+0x82>
 23feb04:	9a01      	ldr	r2, [sp, #4]
 23feb06:	f1c0 0320 	rsb	r3, r0, #32
 23feb0a:	fa02 f303 	lsl.w	r3, r2, r3
 23feb0e:	40c2      	lsrs	r2, r0
 23feb10:	430b      	orrs	r3, r1
 23feb12:	9201      	str	r2, [sp, #4]
 23feb14:	6163      	str	r3, [r4, #20]
 23feb16:	9b01      	ldr	r3, [sp, #4]
 23feb18:	2b00      	cmp	r3, #0
 23feb1a:	61a3      	str	r3, [r4, #24]
 23feb1c:	bf14      	ite	ne
 23feb1e:	2202      	movne	r2, #2
 23feb20:	2201      	moveq	r2, #1
 23feb22:	6122      	str	r2, [r4, #16]
 23feb24:	b1d5      	cbz	r5, 23feb5c <__d2b+0x98>
 23feb26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 23feb2a:	4405      	add	r5, r0
 23feb2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 23feb30:	f8c9 5000 	str.w	r5, [r9]
 23feb34:	f8c8 0000 	str.w	r0, [r8]
 23feb38:	4620      	mov	r0, r4
 23feb3a:	b003      	add	sp, #12
 23feb3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23feb40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23feb44:	e7d5      	b.n	23feaf2 <__d2b+0x2e>
 23feb46:	6161      	str	r1, [r4, #20]
 23feb48:	e7e5      	b.n	23feb16 <__d2b+0x52>
 23feb4a:	a801      	add	r0, sp, #4
 23feb4c:	f7ff fcdc 	bl	23fe508 <__lo0bits>
 23feb50:	9b01      	ldr	r3, [sp, #4]
 23feb52:	2201      	movs	r2, #1
 23feb54:	3020      	adds	r0, #32
 23feb56:	6163      	str	r3, [r4, #20]
 23feb58:	6122      	str	r2, [r4, #16]
 23feb5a:	e7e3      	b.n	23feb24 <__d2b+0x60>
 23feb5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 23feb60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 23feb64:	f8c9 0000 	str.w	r0, [r9]
 23feb68:	6918      	ldr	r0, [r3, #16]
 23feb6a:	f7ff fcad 	bl	23fe4c8 <__hi0bits>
 23feb6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 23feb72:	e7df      	b.n	23feb34 <__d2b+0x70>
 23feb74:	023ffde1 	.word	0x023ffde1
 23feb78:	023ffe68 	.word	0x023ffe68

023feb7c <__ratio>:
 23feb7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23feb80:	4688      	mov	r8, r1
 23feb82:	4681      	mov	r9, r0
 23feb84:	4669      	mov	r1, sp
 23feb86:	f7ff ff4d 	bl	23fea24 <__b2d>
 23feb8a:	a901      	add	r1, sp, #4
 23feb8c:	4640      	mov	r0, r8
 23feb8e:	ec55 4b10 	vmov	r4, r5, d0
 23feb92:	f7ff ff47 	bl	23fea24 <__b2d>
 23feb96:	f8d9 3010 	ldr.w	r3, [r9, #16]
 23feb9a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 23feb9e:	462f      	mov	r7, r5
 23feba0:	eba3 0c02 	sub.w	ip, r3, r2
 23feba4:	e9dd 3200 	ldrd	r3, r2, [sp]
 23feba8:	ec51 0b10 	vmov	r0, r1, d0
 23febac:	1a9b      	subs	r3, r3, r2
 23febae:	468b      	mov	fp, r1
 23febb0:	4620      	mov	r0, r4
 23febb2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 23febb6:	2b00      	cmp	r3, #0
 23febb8:	bfd5      	itete	le
 23febba:	460a      	movle	r2, r1
 23febbc:	462a      	movgt	r2, r5
 23febbe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 23febc2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 23febc6:	bfd8      	it	le
 23febc8:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 23febcc:	ee10 2a10 	vmov	r2, s0
 23febd0:	4639      	mov	r1, r7
 23febd2:	465b      	mov	r3, fp
 23febd4:	f7f4 fa8e 	bl	23f30f4 <__aeabi_ddiv>
 23febd8:	ec41 0b10 	vmov	d0, r0, r1
 23febdc:	b003      	add	sp, #12
 23febde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023febe2 <__copybits>:
 23febe2:	3901      	subs	r1, #1
 23febe4:	f102 0314 	add.w	r3, r2, #20
 23febe8:	1149      	asrs	r1, r1, #5
 23febea:	b570      	push	{r4, r5, r6, lr}
 23febec:	3101      	adds	r1, #1
 23febee:	6914      	ldr	r4, [r2, #16]
 23febf0:	1f05      	subs	r5, r0, #4
 23febf2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 23febf6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 23febfa:	42a3      	cmp	r3, r4
 23febfc:	d30c      	bcc.n	23fec18 <__copybits+0x36>
 23febfe:	1aa3      	subs	r3, r4, r2
 23fec00:	3211      	adds	r2, #17
 23fec02:	3b11      	subs	r3, #17
 23fec04:	f023 0303 	bic.w	r3, r3, #3
 23fec08:	42a2      	cmp	r2, r4
 23fec0a:	bf88      	it	hi
 23fec0c:	2300      	movhi	r3, #0
 23fec0e:	4418      	add	r0, r3
 23fec10:	2300      	movs	r3, #0
 23fec12:	4288      	cmp	r0, r1
 23fec14:	d305      	bcc.n	23fec22 <__copybits+0x40>
 23fec16:	bd70      	pop	{r4, r5, r6, pc}
 23fec18:	f853 6b04 	ldr.w	r6, [r3], #4
 23fec1c:	f845 6f04 	str.w	r6, [r5, #4]!
 23fec20:	e7eb      	b.n	23febfa <__copybits+0x18>
 23fec22:	f840 3b04 	str.w	r3, [r0], #4
 23fec26:	e7f4      	b.n	23fec12 <__copybits+0x30>

023fec28 <__any_on>:
 23fec28:	f100 0214 	add.w	r2, r0, #20
 23fec2c:	114b      	asrs	r3, r1, #5
 23fec2e:	6900      	ldr	r0, [r0, #16]
 23fec30:	4298      	cmp	r0, r3
 23fec32:	b510      	push	{r4, lr}
 23fec34:	db11      	blt.n	23fec5a <__any_on+0x32>
 23fec36:	dd0a      	ble.n	23fec4e <__any_on+0x26>
 23fec38:	f011 011f 	ands.w	r1, r1, #31
 23fec3c:	d007      	beq.n	23fec4e <__any_on+0x26>
 23fec3e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 23fec42:	fa24 f001 	lsr.w	r0, r4, r1
 23fec46:	fa00 f101 	lsl.w	r1, r0, r1
 23fec4a:	428c      	cmp	r4, r1
 23fec4c:	d10b      	bne.n	23fec66 <__any_on+0x3e>
 23fec4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 23fec52:	4293      	cmp	r3, r2
 23fec54:	d803      	bhi.n	23fec5e <__any_on+0x36>
 23fec56:	2000      	movs	r0, #0
 23fec58:	bd10      	pop	{r4, pc}
 23fec5a:	4603      	mov	r3, r0
 23fec5c:	e7f7      	b.n	23fec4e <__any_on+0x26>
 23fec5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 23fec62:	2900      	cmp	r1, #0
 23fec64:	d0f5      	beq.n	23fec52 <__any_on+0x2a>
 23fec66:	2001      	movs	r0, #1
 23fec68:	e7f6      	b.n	23fec58 <__any_on+0x30>

023fec6a <_calloc_r>:
 23fec6a:	434a      	muls	r2, r1
 23fec6c:	b513      	push	{r0, r1, r4, lr}
 23fec6e:	4611      	mov	r1, r2
 23fec70:	9201      	str	r2, [sp, #4]
 23fec72:	f7f9 fd27 	bl	23f86c4 <_malloc_r>
 23fec76:	4604      	mov	r4, r0
 23fec78:	b118      	cbz	r0, 23fec82 <_calloc_r+0x18>
 23fec7a:	9a01      	ldr	r2, [sp, #4]
 23fec7c:	2100      	movs	r1, #0
 23fec7e:	f7fd fff6 	bl	23fcc6e <memset>
 23fec82:	4620      	mov	r0, r4
 23fec84:	b002      	add	sp, #8
 23fec86:	bd10      	pop	{r4, pc}

023fec88 <__ascii_wctomb>:
 23fec88:	b149      	cbz	r1, 23fec9e <__ascii_wctomb+0x16>
 23fec8a:	2aff      	cmp	r2, #255	; 0xff
 23fec8c:	bf8d      	iteet	hi
 23fec8e:	238a      	movhi	r3, #138	; 0x8a
 23fec90:	2001      	movls	r0, #1
 23fec92:	700a      	strbls	r2, [r1, #0]
 23fec94:	6003      	strhi	r3, [r0, #0]
 23fec96:	bf88      	it	hi
 23fec98:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 23fec9c:	4770      	bx	lr
 23fec9e:	4608      	mov	r0, r1
 23feca0:	4770      	bx	lr
	...

023feca4 <link_const_data_start>:
 23feca4:	514d0400 	.word	0x514d0400
 23feca8:	00045454 	.word	0x00045454
 23fecac:	49514d06 	.word	0x49514d06
 23fecb0:	03706473 	.word	0x03706473

023fecb4 <dynalib_user>:
 23fecb4:	023f38f9 023f3921 023f3925 00000000     .8?.!9?.%9?.....
 23fecc4:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23fecd4:	6c617574 61655200 726f5072 4f006863     tual.RearPorch.O
 23fece4:	63696666 6f6f4465 75430072 69617472     fficeDoor.Curtai
 23fecf4:	664f006e 65636966 66664f00 43656369     n.Office.OfficeC
 23fed04:	696c6965 4c00676e 0074666f 706d6152     eiling.Loft.Ramp
 23fed14:	63726f50 754f0068 64697374 61520065     Porch.Outside.Ra
 23fed24:	7741706d 676e696e 61655200 6e774172     mpAwning.RearAwn
 23fed34:	00676e69 6e616950 6e41006f 656e6f79     ing.Piano.Anyone
 23fed44:	656d6f48 6c6c4100 6e6f5200 656d6f48     Home.All.RonHome
 23fed54:	65685300 79656c6c 656d6f48 67694e00     .ShelleyHome.Nig
 23fed64:	69747468 7300656d 74726174 7473694c     httime.startList
 23fed74:	65686300 69546b63 00736572 706d7564     .checkTires.dump
 23fed84:	6b6e6154 69660073 61576c6c 00726574     Tanks.fillWater.
 23fed94:	6c657566 6c696600 6f72506c 656e6170     fuel.fillPropane
 23feda4:	65686300 6f526b63 6300666f 6b636568     .checkRoof.check
 23fedb4:	65646e55 00565272 6e616c70 74756f52     UnderRV.planRout
 23fedc4:	65620065 696c5364 6e496564 53524c00     e.bedSlideIn.LRS
 23fedd4:	6564696c 72006e49 41706d61 6e696e77     lideIn.rampAwnin
 23fede4:	006e4967 736f6c63 6d615265 65720070     gIn.closeRamp.re
 23fedf4:	77417261 676e696e 6c006e49 68637461     arAwningIn.latch
 23fee04:	646e6148 0073656c 6e6f7266 6e774174     Handles.frontAwn
 23fee14:	49676e69 6964006e 72506373 6e61706f     ingIn.discPropan
 23fee24:	61770065 48726574 65746165 66664f72     e.waterHeaterOff
 23fee34:	74696800 72546863 006b6375 73696172     .hitchTruck.rais
 23fee44:	00474c65 63736964 65776f50 6f630072     eLG.discPower.co
 23fee54:	63656e6e 776f5074 6c007265 7265776f     nnectPower.lower
 23fee64:	6200474c 6c536465 4f656469 4c007475     LG.bedSlideOut.L
 23fee74:	696c5352 4f736564 6f007475 526e6570     RSlidesOut.openR
 23fee84:	00706d61 706d6172 696e7741 754f676e     amp.rampAwningOu
 23fee94:	74730074 44737065 006e776f 72616572     t.stepsDown.rear
 23feea4:	696e7741 754f676e 72660074 41746e6f     AwningOut.frontA
 23feeb4:	6e696e77 74754f67 6f727000 656e6170     wningOut.propane
 23feec4:	77006e4f 72657461 65736f48 74617700     On.waterHose.wat
 23feed4:	65487265 72657461 73006e4f 72657765     erHeaterOn.sewer
 23feee4:	65736f48 32393100 3836312e 332e302e     Hose.192.168.0.3
 23feef4:	65520033 61507261 006c656e 2074756f     3.RearPanel.out 
 23fef04:	6d20666f 726f6d65 636f2079 72727563     of memory occurr
 23fef14:	73206465 3d657a69 50006425 69747261     ed size=%d.Parti
 23fef24:	2e656c63 73206f69 63736275 65626972     cle.io subscribe
 23fef34:	63657220 65766965 61642064 203a6174      received data: 
 23fef44:	2c270027 6c002720 7300676f 69547465     '.', '.log.setTi
 23fef54:	6f7a656d 203a656e 67654200 44206e69     mezone: .Begin D
 23fef64:	53005453 69747465 7420676e 7a656d69     ST.Setting timez
 23fef74:	20656e6f 00206f74 69766544 00736563     one to .Devices.
 23fef84:	63656843 73696c6b 74530074 73757461     Checklist.Status
 23fef94:	74617000 746f6972 74657300 44495353     .patriot.setSSID
 23fefa4:	74732f00 73757461 66664f00 656e696c     ./status.Offline
 23fefb4:	00644900 6e6e6f43 69746365 7420676e     .Id.Connecting t
 23fefc4:	514d206f 4d005454 20545451 20676f6c     o MQTT.MQTT log 
 23fefd4:	646e6168 2072656c 65646461 65520064     handler added.Re
 23fefe4:	746f6f62 2e676e69 6d002e2e 20747471     booting....mqtt 
 23feff4:	6e6e6f63 65746365 73202c64 63736275     connected, subsc
 23ff004:	69626972 2e2e676e 0023002e 5454514d     ribing....#.MQTT
 23ff014:	6d695420 74756f65 514d002e 6e205454      Timeout..MQTT n
 23ff024:	6320746f 656e6e6f 64657463 6572202c     ot connected, re
 23ff034:	2e797274 57002e2e 20694669 20544f4e     try....WiFi NOT 
 23ff044:	64616572 75700079 73696c62 68772068     ready.publish wh
 23ff054:	20656c69 5454514d 746f6e20 6e6f6320     ile MQTT not con
 23ff064:	7463656e 203a6465 00202c00 25206125     nected: ., .%a %
 23ff074:	4d253a48 6c612f00 2f657669 63612f00     H:%M./alive/./ac
 23ff084:	6e002f6b 00656e6f 6f727265 61770072     k/.none.error.wa
 23ff094:	77006e72 696e7261 6900676e 006f666e     rn.warning.info.
 23ff0a4:	63617274 6c610065 6361006c 6c61006b     trace.all.ack.al
 23ff0b4:	00657669 6e6f7266 6e617074 6c006c65     ive.frontpanel.l
 23ff0c4:	73746665 6564696c 61657200 6e617072     eftslide.rearpan
 23ff0d4:	62006c65 68676972 73656e74 616c0073     el.brightness.la
 23ff0e4:	6e6f6c74 203a0067 646c6f68 00300020     tlong.: hold .0.
 23ff0f4:	2f74616c 676e6f6c 00203d20 6553002c     lat/long = .,.Se
 23ff104:	6e697474 616c2067 6f6c2f74 203a676e     tting lat/long: 
 23ff114:	676f6c00 6576656c 7320006c 69747465     .loglevel. setti
 23ff124:	6c20676e 654c676f 206c6576 6d00203d     ng logLevel = .m
 23ff134:	726f6d65 203a0079 65657266 6d656d20     emory.: free mem
 23ff144:	2079726f 6425203d 65757100 3a007972     ory = %d.query.:
 23ff154:	63657220 65766965 75712064 20797265      received query 
 23ff164:	72646461 65737365 6f742064 00737520     addressed to us.
 23ff174:	6572203a 20746573 72646461 65737365     : reset addresse
 23ff184:	6f742064 00737520 74736574 75727400     d to us.test.tru
 23ff194:	666f0065 61660066 0065736c 7474716d     e.off.false.mqtt
 23ff1a4:	74203a00 20747365 61736964 20656c62     .: test disable 
 23ff1b4:	5454514d 72203a00 69656365 20646576     MQTT.: received 
 23ff1c4:	656d6974 656e6f7a 00203d20 6573203a     timezone = .: se
 23ff1d4:	6e697474 69742067 6f7a656d 7420656e     tting timezone t
 23ff1e4:	00203a6f 61766e49 2064696c 656d6974     o: .Invalid time
 23ff1f4:	656e6f7a 6c6f6800 6f6c0064 3a002f67     zone.hold.log/.:
 23ff204:	3a292800 5b200020 646f6300 203d2065     .(): . [.code = 
 23ff214:	64007025 69617465 3d20736c 00000020     %p.details = ...

023ff224 <_ZTVN5spark10LogHandlerE>:
	...
 23ff234:	023f3945 023f4da5                       E9?..M?.

023ff23c <_ZTV11MQTTManager>:
	...
 23ff244:	023f4da9 023f4dd1 023f5a49 023f4da5     .M?..M?.IZ?..M?.
 23ff254:	74727543 206e6961 48746573 20646c6f     Curtain setHold 
 23ff264:	20746f6e 6c706d69 6e656d65 00646574     not implemented.
 23ff274:	68676968 776f6c00 72754300 6e696174     high.low.Curtain
 23ff284:	6c757020 25206573 72450073 20726f72      pulse %s.Error 
 23ff294:	736c7570 20676e69 616c6572 64252079     pulsing relay %d
 23ff2a4:	00732520 74727543 206e6961 56746573      %s.Curtain setV
 23ff2b4:	65756c61 20736920 20656874 656d6173     alue is the same
 23ff2c4:	20736120 76657270 73756f69 6c617620      as previous val
 23ff2d4:	202c6575 6f6e6769 676e6972 70755f00     ue, ignoring._up
 23ff2e4:	65746164 6c6c694d 3d207369 646c2520     dateMillis = %ld
 23ff2f4:	65732f00 672f0074 2f007465 74617473     ./set./get./stat
 23ff304:	6e690065 61657263 676e6973 63656400     e.increasing.dec
 23ff314:	73616572 00676e69 74727543 206e6961     reasing.Curtain 
 23ff324:	2d646e65 732d666f 74726174 6c757020     end-of-start pul
 23ff334:	43006573 61747275 73206e69 74726174     se.Curtain start
 23ff344:	2d666f2d 20646e65 736c7570 75430065     -of-end pulse.Cu
 23ff354:	69617472 6e65206e 666f2d64 646e652d     rtain end-of-end
 23ff364:	6c757020 73006573 70706f74 49006465      pulse.stopped.I
 23ff374:	6c61766e 5f206469 67617473 64252065     nvalid _stage %d
 23ff384:	00000000                                ....

023ff388 <_ZTV7Curtain>:
	...
 23ff390:	023f5c9f 023f5c95 023f5caf 023f5ca1     .\?..\?..\?..\?.
 23ff3a0:	023f5cbd 023f5c97 023f5da9 023f5ccd     .\?..\?..]?..\?.
 23ff3b0:	023f5c9b 023f65fd 023f653b 023f654d     .\?..e?.;e?.Me?.
 23ff3c0:	023f5f81 023f654f 7465672f 736f702f     ._?.Oe?./get/pos
 23ff3d0:	6f697469 0000006e                       ition...

023ff3d8 <_ZTV10NCD4Switch>:
	...
 23ff3e0:	023f60fb 023f5c95 023f5caf 023f5ca1     .`?..\?..\?..\?.
 23ff3f0:	023f5cbd 023f5c97 023f677d 023f60f9     .\?..\?.}g?..`?.
 23ff400:	023f5c9b 023f65fd 023f653b 023f654d     .\?..e?.;e?.Me?.
 23ff410:	023f6211 023f654f 3844434e 6867694c     .b?.Oe?.NCD8Ligh
 23ff420:	65722074 00746573                       t reset.

023ff428 <_ZTV9NCD8Light>:
	...
 23ff430:	023f622f 023f6231 023f5caf 023f5ca1     /b?.1b?..\?..\?.
 23ff440:	023f5cbd 023f5c97 023f6449 023f60f9     .\?..\?.Id?..`?.
 23ff450:	023f5c9b 023f65fd 023f653b 023f654d     .\?..e?.;e?.Me?.
 23ff460:	023f6479 023f654f 69766544 20736563     yd?.Oe?.Devices 
 23ff470:	69726176 656c6261 20736920 206f6f74     variable is too 
 23ff480:	676e6f6c 654e202e 74206465 7865206f     long. Need to ex
 23ff490:	646e6574 206f7420 6e322061 61762064     tend to a 2nd va
 23ff4a0:	62616972 3d00656c 61745300 20737574     riable.=.Status 
 23ff4b0:	69726176 656c6261 20736920 206f6f74     variable is too 
 23ff4c0:	676e6f6c 654e202e 74206465 7865206f     long. Need to ex
 23ff4d0:	646e6574 206f7420 6e322061 61762064     tend to a 2nd va
 23ff4e0:	62616972 4400656c 63697665 20002065     riable.Device . 
 23ff4f0:	56746573 65756c61 202c0020 20736177     setValue ., was 
 23ff500:	74657300 44495353 666e6920 6e69206f     .setSSID info in
 23ff510:	72726f63 3a746365 65530020 6e697474     correct: .Settin
 23ff520:	53532067 702f4449 77737361 3a64726f     g SSID/password:
 23ff530:	68430020 6c6b6365 20747369 69726176      .Checklist vari
 23ff540:	656c6261 20736920 206f6f74 676e6f6c     able is too long
 23ff550:	654e202e 74206465 7865206f 646e6574     . Need to extend
 23ff560:	206f7420 6e322061 61762064 62616972      to a 2nd variab
 23ff570:	4e00656c 6863206f 6c6b6365 20747369     le.No checklist 
 23ff580:	6d657469 64610073 76654464 20656369     items.addDevice 
 23ff590:	656d616e 2000203a 72696620 64207473     name: .  first d
 23ff5a0:	63697665 72450065 3a726f72 616e5520     evice.Error: Una
 23ff5b0:	20656c62 65206f74 736f7078 20002065     ble to expose . 
 23ff5c0:	636e7566 6e6f6974 61747300 002f6574     function.state/.

023ff5d0 <_ZTV6Device>:
	...
 23ff5d8:	023f60fb 023f5c95 023f5caf 023f5ca1     .`?..\?..\?..\?.
 23ff5e8:	023f5cbd 023f5c97 023f677d 023f60f9     .\?..\?.}g?..`?.
 23ff5f8:	023f5c9b 023f65fd 023f653b 023f654d     .\?..e?.;e?.Me?.
 23ff608:	023f6539 023f654f 3250434d 38303033     9e?.Oe?.MCP23008
 23ff618:	74657320 6c6f7020 74697261 61662079      set polarity fa
 23ff628:	64656c69 50434d00 30303332 6e692038     iled.MCP23008 in
 23ff638:	61697469 657a696c 63757320 73736563     itialize success
 23ff648:	50434d00 30303332 65532038 50472074     .MCP23008 Set GP
 23ff658:	66205550 656c6961 434d0064 30333250     PU failed.MCP230
 23ff668:	53203830 49207465 5249444f 69616620     08 Set IODIR fai
 23ff678:	0064656c 3250434d 38303033 73655220     led.MCP23008 Res
 23ff688:	69747465 4d00676e 33325043 20383030     etting.MCP23008 
 23ff698:	6f727245 65722072 6e696461 77732067     Error reading sw
 23ff6a8:	68637469 50434d00 30303332 72452038     itch.MCP23008 Er
 23ff6b8:	20726f72 656c6573 6e697463 50472067     ror selecting GP
 23ff6c8:	72204f49 73696765 00726574 3250434d     IO register.MCP2
 23ff6d8:	38303033 69727720 69206574 6d754e6f     3008 write ioNum
 23ff6e8:	20642520 6425203d 50434d00 30303332      %d = %d.MCP2300
 23ff6f8:	72772038 6e697469 78252067 50434d00     8 writing %x.MCP
 23ff708:	30303332 72772038 20657469 6c696166     23008 write fail
 23ff718:	202c6465 756c6176 203d2065 50007825     ed, value = %x.P
 23ff728:	36394143 49203433 6974696e 7a696c61     CA9634 Initializ
 23ff738:	64612065 73657264 50002073 36394143     e address .PCA96
 23ff748:	49203433 6974696e 7a696c61 20002065     34 Initialize . 
 23ff758:	4c494146 00214445 65736552 6e697474     FAILED!.Resettin
 23ff768:	43502067 33363941 43500034 33363941     g PCA9634.PCA963
 23ff778:	756f2034 74757074 204d5750 74697277     4 outputPWM writ
 23ff788:	61662065 64656c69 726f6620 67696c20     e failed for lig
 23ff798:	00207468 656c202c 206c6576 0000203d     ht ., level = ..

023ff7a8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

023ff7b0 <_ZTVN5spark13EthernetClassE>:
	...
 23ff7b8:	023f88a9 023f889f 023f8895 023f888b     ..?...?...?...?.
 23ff7c8:	023f887f 023f8873 023f9f5d 023f9f65     ..?.s.?.].?.e.?.
 23ff7d8:	023f8867 023f885f 023f8855 023f884b     g.?._.?.U.?.K.?.
 23ff7e8:	023fa08d 023f9f95 023f9f9d              ..?...?...?.

023ff7f4 <_ZTV7TwoWire>:
	...
 23ff7fc:	023f88c9 023f8913 023f88eb 023f88cb     ..?...?...?...?.
 23ff80c:	023f88f3 023f88fb 023f8903 023f890b     ..?...?...?...?.

023ff81c <_ZTV9IPAddress>:
	...
 23ff824:	023f89ff 023f89ef 023f89f1 75007525     ..?...?...?.%u.u
 23ff834:	78343025 75616200 65530064 6c616972     %04x.baud.Serial
 23ff844:	72655300 316c6169 4f534a00 7274534e     .Serial1.JSONStr
 23ff854:	4c6d6165 6148676f 656c646e 70610072     eamLogHandler.ap
 23ff864:	30250070 20753031 00205d00 65646f63     p.%010u .] .code
 23ff874:	00203d20 0d006925 006d000a 66006e6c      = .%i....m.ln.f
 23ff884:	6f63006e 64006564 69617465 0000006c     n.code.detail...

023ff894 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ff89c:	023f8ed9 023f8eff 023f8ebd 023f8b3b     ..?...?...?.;.?.

023ff8ac <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ff8b4:	023f93c5 023f93dd 023f9bc9 023f9d71     ..?...?...?.q.?.

023ff8c4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ff8cc:	023f93f1 023f9405 023f9da9 023f8ec5     ..?...?...?...?.

023ff8dc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ff8e4:	023f8ed7 023f8f0d 023f9b2d 023f8ec7     ..?...?.-.?...?.

023ff8f4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ff8fc:	023f8ed5 023f8f1b 023f9305 023f8f3d     ..?...?...?.=.?.

023ff90c <CSWTCH.109>:
 23ff90c:	1007ae0c 1007aed0 1007ae4c              ........L...

023ff918 <_ZTVN5spark12NetworkClassE>:
	...
 23ff920:	023f9f1d 023f9f27 023f9f31 023f9f3b     ..?.'.?.1.?.;.?.
 23ff930:	023f9f45 023f9f51 023f9f5d 023f9f65     E.?.Q.?.].?.e.?.
 23ff940:	023f9f6d 023f9f79 023f9f81 023f9f8b     m.?.y.?...?...?.
 23ff950:	023fa08d 023f9f95 023f9f9d 69726977     ..?...?...?.wiri
 23ff960:	7200676e 20766365 6f727265 203d2072     ng.recv error = 
 23ff970:	00006425                                %d..

023ff974 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ff97c:	023fa835 023fa859 023fad8b 023fa867     5.?.Y.?...?.g.?.
 23ff98c:	023fa839                                9.?.

023ff990 <_ZTV9TCPClient>:
	...
 23ff998:	023fa8e5 023fa919 023fa7b1 023fa7cb     ..?...?...?...?.
 23ff9a8:	023fac21 023fa7f5 023faa97 023fa829     !.?...?...?.).?.
 23ff9b8:	023fab29 023fa969 023faac5 023facd5     ).?.i.?...?...?.
 23ff9c8:	023faa65 023fa82b 023fa7dd 023fa86d     e.?.+.?...?.m.?.
 23ff9d8:	023fa949 2b25005a 3a643330 75323025     I.?.Z.%+03d:%02u
 23ff9e8:	2d592500 252d6d25 48255464 3a4d253a     .%Y-%m-%dT%H:%M:
 23ff9f8:	7a255325 63736100 656d6974 00000000     %S%z.asctime....

023ffa08 <_ZTV11USARTSerial>:
	...
 23ffa10:	023fb129 023fb195 023fb16d 023fa0b5     ).?...?.m.?...?.
 23ffa20:	023fb13d 023fb159 023fb14b 023fb167     =.?.Y.?.K.?.g.?.
 23ffa30:	023fb12b 023fb12f                       +.?./.?.

023ffa38 <_ZTV9USBSerial>:
	...
 23ffa40:	023fb1ed 023fb255 023fb22b 023fa0b5     ..?.U.?.+.?...?.
 23ffa50:	023fb21d 023fb1ef 023fb1ff 023fb24f     ..?...?...?.O.?.
 23ffa60:	023fb20f 023fb1e7                       ..?...?.

023ffa68 <_ZTVN5spark9WiFiClassE>:
	...
 23ffa70:	023fb36d 023fb363 023fb359 023f4de5     m.?.c.?.Y.?..M?.
 23ffa80:	023fb34d 023fb341 023f9f5d 023f9f65     M.?.A.?.].?.e.?.
 23ffa90:	023fb335 023fb32d 023fb323 023fb319     5.?.-.?.#.?...?.
 23ffaa0:	023fa08d 023f9f95 023f9f9d              ..?...?...?.

023ffaac <_ZSt7nothrow>:
	...

023ffaad <_ZTSSt19_Sp_make_shared_tag>:
 23ffaad:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 23ffabd:	5f646572 00676174                        red_tag....

023ffac8 <_ZTISt19_Sp_make_shared_tag>:
 23ffac8:	023ffb08 023ffaad                       ..?...?.

023ffad0 <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffad0:	023ffb68 023ffadc 023ffb8c              h.?...?...?.

023ffadc <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffadc:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 23ffaec:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 23ffafc:	00000045                                E...

023ffb00 <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffb00:	00000000 023ffad0 023fb8cd 023fb8e1     ......?...?...?.
 23ffb10:	023fba75 023fba75 023fb94b 023fb88d     u.?.u.?.K.?...?.
 23ffb20:	023fb933 023fb8f5 023fb8bf              3.?...?...?.

023ffb2c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffb2c:	023ffb68 023ffb38 023ffad0              h.?.8.?...?.

023ffb38 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffb38:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 23ffb48:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 23ffb58:	456f666e 00000000                       nfoE....

023ffb60 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffb60:	00000000 023ffb2c 023fb975 023fb989     ....,.?.u.?...?.
 23ffb70:	023fba75 023fba75 023fb94b 023fb88d     u.?.u.?.K.?...?.
 23ffb80:	023fba49 023fb9d5 023fb99d              I.?...?...?.

023ffb8c <_ZTISt9type_info>:
 23ffb8c:	023ffb08 023ffb94                       ..?...?.

023ffb94 <_ZTSSt9type_info>:
 23ffb94:	74397453 5f657079 6f666e69 00000000     St9type_info....
 23ffba4:	00000000                                ....

023ffba8 <TWO52>:
 23ffba8:	00000000 43300000 00000000 c3300000     ......0C......0.
 23ffbb8:	73332e25 332e2520 64332573 322e2520     %.3s %.3s%3d %.2
 23ffbc8:	2e253a64 253a6432 2064322e 000a6425     d:%.2d:%.2d %d..

023ffbd8 <day_name.1>:
 23ffbd8:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
 23ffbe8:	61536972                                 riSat

023ffbed <mon_name.0>:
 23ffbed:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
 23ffbfd:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
 23ffc0d:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
 23ffc1d:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
 23ffc2d:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
 23ffc3d:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
 23ffc4d:	5f343231 36303631 36303831 732f3933     124_1606180639/s
 23ffc5d:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
 23ffc6d:	62696c2f 74732f63 62696c64 6e61722f     /libc/stdlib/ran
 23ffc7d:	00632e64 6900666e 7974696e 006e6100     d.c.nf.inity.an.
 23ffc8d:	                                         ...

023ffc90 <fpi.1>:
 23ffc90:	00000035 fffffbce 000003cb 00000001     5...............
 23ffca0:	00000000                                ....

023ffca4 <fpinan.0>:
 23ffca4:	00000034 fffffbce 000003cb 00000001     4...............
 23ffcb4:	00000000                                ....

023ffcb8 <tinytens>:
 23ffcb8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 23ffcc8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 23ffcd8:	64ac6f43 11680628                       Co.d(.h.

023ffce0 <_ctype_>:
 23ffce0:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffcf0:	20202020 20202020 20202020 20202020                     
 23ffd00:	10108820 10101010 10101010 10101010      ...............
 23ffd10:	04040410 04040404 10040404 10101010     ................
 23ffd20:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23ffd30:	01010101 01010101 01010101 10101010     ................
 23ffd40:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23ffd50:	02020202 02020202 02020202 10101010     ................
 23ffd60:	00000020 00000000 00000000 00000000      ...............
	...
 23ffde0:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
 23ffdf0:	742f0064 6a2f706d 696b6e65 472d736e     d./tmp/jenkins-G
 23ffe00:	312d4343 69702d30 696c6570 342d656e     CC-10-pipeline-4
 23ffe10:	30325f38 31313032 315f3432 31363036     8_20201124_16061
 23ffe20:	33363038 72732f39 656e2f63 62696c77     80639/src/newlib
 23ffe30:	77656e2f 2f62696c 6362696c 6474732f     /newlib/libc/std
 23ffe40:	2f62696c 6f746467 65672d61 78656874     lib/gdtoa-gethex
 23ffe50:	0000632e                                .c..

023ffe54 <_C_numeric_locale>:
 23ffe54:	023ff00c 023ff87d 1007ab64 4f500043     ..?.}.?.d...C.PO
 23ffe64:	00584953 706d742f 6e656a2f 736e696b     SIX./tmp/jenkins
 23ffe74:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
 23ffe84:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
 23ffe94:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
 23ffea4:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
 23ffeb4:	696c6474 706d2f62 2e636572 00000063     tdlib/mprec.c...
 23ffec4:	00000000                                ....

023ffec8 <__mprec_bigtens>:
 23ffec8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 23ffed8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 23ffee8:	7f73bf3c 75154fdd                       <.s..O.u

023ffef0 <__mprec_tens>:
 23ffef0:	00000000 3ff00000 00000000 40240000     .......?......$@
 23fff00:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 23fff10:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 23fff20:	00000000 412e8480 00000000 416312d0     .......A......cA
 23fff30:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 23fff40:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 23fff50:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 23fff60:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 23fff70:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 23fff80:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 23fff90:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 23fffa0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 23fffb0:	79d99db4 44ea7843                       ...yCx.D

023fffb8 <p05.0>:
 23fffb8:	00000005 00000019 0000007d              ........}...

023fffc4 <link_const_data_end>:
 23fffc4:	023f45a5 	.word	0x023f45a5
 23fffc8:	023f4d4d 	.word	0x023f4d4d
 23fffcc:	023f5c35 	.word	0x023f5c35
 23fffd0:	023f6d71 	.word	0x023f6d71
 23fffd4:	023f87ed 	.word	0x023f87ed
 23fffd8:	023f88b5 	.word	0x023f88b5
 23fffdc:	023f9bb9 	.word	0x023f9bb9
 23fffe0:	023fa0a1 	.word	0x023fa0a1
 23fffe4:	023fa149 	.word	0x023fa149
 23fffe8:	023fa78d 	.word	0x023fa78d
 23fffec:	023fb115 	.word	0x023fb115
 23ffff0:	023fb379 	.word	0x023fb379
